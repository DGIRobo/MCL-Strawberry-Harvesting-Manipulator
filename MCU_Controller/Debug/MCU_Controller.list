
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fc4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  08011268  08011268  00012268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011958  08011958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011960  08011960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011964  08011964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  08011968  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000053c4  24000248  08011bb0  00013248  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400560c  08011bb0  0001360c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b90d  00000000  00000000  00013276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dc2  00000000  00000000  0003eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e28  00000000  00000000  00043948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  00045770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000060b6  00000000  00000000  00046e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000243b1  00000000  00000000  0004cf4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017e859  00000000  00000000  000712fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001efb57  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092f8  00000000  00000000  001efc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  001f8f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  001f8f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  001fa027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801124c 	.word	0x0801124c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	0801124c 	.word	0x0801124c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b988 	b.w	8000c4c <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f806 	bl	8000954 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__udivmoddi4>:
 8000954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000958:	9d08      	ldr	r5, [sp, #32]
 800095a:	468e      	mov	lr, r1
 800095c:	4604      	mov	r4, r0
 800095e:	4688      	mov	r8, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d14a      	bne.n	80009fa <__udivmoddi4+0xa6>
 8000964:	428a      	cmp	r2, r1
 8000966:	4617      	mov	r7, r2
 8000968:	d962      	bls.n	8000a30 <__udivmoddi4+0xdc>
 800096a:	fab2 f682 	clz	r6, r2
 800096e:	b14e      	cbz	r6, 8000984 <__udivmoddi4+0x30>
 8000970:	f1c6 0320 	rsb	r3, r6, #32
 8000974:	fa01 f806 	lsl.w	r8, r1, r6
 8000978:	fa20 f303 	lsr.w	r3, r0, r3
 800097c:	40b7      	lsls	r7, r6
 800097e:	ea43 0808 	orr.w	r8, r3, r8
 8000982:	40b4      	lsls	r4, r6
 8000984:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000988:	fa1f fc87 	uxth.w	ip, r7
 800098c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000990:	0c23      	lsrs	r3, r4, #16
 8000992:	fb0e 8811 	mls	r8, lr, r1, r8
 8000996:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800099a:	fb01 f20c 	mul.w	r2, r1, ip
 800099e:	429a      	cmp	r2, r3
 80009a0:	d909      	bls.n	80009b6 <__udivmoddi4+0x62>
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80009a8:	f080 80ea 	bcs.w	8000b80 <__udivmoddi4+0x22c>
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f240 80e7 	bls.w	8000b80 <__udivmoddi4+0x22c>
 80009b2:	3902      	subs	r1, #2
 80009b4:	443b      	add	r3, r7
 80009b6:	1a9a      	subs	r2, r3, r2
 80009b8:	b2a3      	uxth	r3, r4
 80009ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80009be:	fb0e 2210 	mls	r2, lr, r0, r2
 80009c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c6:	fb00 fc0c 	mul.w	ip, r0, ip
 80009ca:	459c      	cmp	ip, r3
 80009cc:	d909      	bls.n	80009e2 <__udivmoddi4+0x8e>
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80009d4:	f080 80d6 	bcs.w	8000b84 <__udivmoddi4+0x230>
 80009d8:	459c      	cmp	ip, r3
 80009da:	f240 80d3 	bls.w	8000b84 <__udivmoddi4+0x230>
 80009de:	443b      	add	r3, r7
 80009e0:	3802      	subs	r0, #2
 80009e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e6:	eba3 030c 	sub.w	r3, r3, ip
 80009ea:	2100      	movs	r1, #0
 80009ec:	b11d      	cbz	r5, 80009f6 <__udivmoddi4+0xa2>
 80009ee:	40f3      	lsrs	r3, r6
 80009f0:	2200      	movs	r2, #0
 80009f2:	e9c5 3200 	strd	r3, r2, [r5]
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	428b      	cmp	r3, r1
 80009fc:	d905      	bls.n	8000a0a <__udivmoddi4+0xb6>
 80009fe:	b10d      	cbz	r5, 8000a04 <__udivmoddi4+0xb0>
 8000a00:	e9c5 0100 	strd	r0, r1, [r5]
 8000a04:	2100      	movs	r1, #0
 8000a06:	4608      	mov	r0, r1
 8000a08:	e7f5      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000a0a:	fab3 f183 	clz	r1, r3
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d146      	bne.n	8000aa0 <__udivmoddi4+0x14c>
 8000a12:	4573      	cmp	r3, lr
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0xc8>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 8105 	bhi.w	8000c26 <__udivmoddi4+0x2d2>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	4690      	mov	r8, r2
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0e5      	beq.n	80009f6 <__udivmoddi4+0xa2>
 8000a2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000a2e:	e7e2      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	f000 8090 	beq.w	8000b56 <__udivmoddi4+0x202>
 8000a36:	fab2 f682 	clz	r6, r2
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	f040 80a4 	bne.w	8000b88 <__udivmoddi4+0x234>
 8000a40:	1a8a      	subs	r2, r1, r2
 8000a42:	0c03      	lsrs	r3, r0, #16
 8000a44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a48:	b280      	uxth	r0, r0
 8000a4a:	b2bc      	uxth	r4, r7
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d907      	bls.n	8000a72 <__udivmoddi4+0x11e>
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x11c>
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	f200 80e0 	bhi.w	8000c30 <__udivmoddi4+0x2dc>
 8000a70:	46c4      	mov	ip, r8
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a80:	fb02 f404 	mul.w	r4, r2, r4
 8000a84:	429c      	cmp	r4, r3
 8000a86:	d907      	bls.n	8000a98 <__udivmoddi4+0x144>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a8e:	d202      	bcs.n	8000a96 <__udivmoddi4+0x142>
 8000a90:	429c      	cmp	r4, r3
 8000a92:	f200 80ca 	bhi.w	8000c2a <__udivmoddi4+0x2d6>
 8000a96:	4602      	mov	r2, r0
 8000a98:	1b1b      	subs	r3, r3, r4
 8000a9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a9e:	e7a5      	b.n	80009ec <__udivmoddi4+0x98>
 8000aa0:	f1c1 0620 	rsb	r6, r1, #32
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	fa22 f706 	lsr.w	r7, r2, r6
 8000aaa:	431f      	orrs	r7, r3
 8000aac:	fa0e f401 	lsl.w	r4, lr, r1
 8000ab0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ab4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ab8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000abc:	4323      	orrs	r3, r4
 8000abe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ac2:	fa1f fc87 	uxth.w	ip, r7
 8000ac6:	fbbe f0f9 	udiv	r0, lr, r9
 8000aca:	0c1c      	lsrs	r4, r3, #16
 8000acc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ad0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ad4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ad8:	45a6      	cmp	lr, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x1a0>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ae6:	f080 809c 	bcs.w	8000c22 <__udivmoddi4+0x2ce>
 8000aea:	45a6      	cmp	lr, r4
 8000aec:	f240 8099 	bls.w	8000c22 <__udivmoddi4+0x2ce>
 8000af0:	3802      	subs	r0, #2
 8000af2:	443c      	add	r4, r7
 8000af4:	eba4 040e 	sub.w	r4, r4, lr
 8000af8:	fa1f fe83 	uxth.w	lr, r3
 8000afc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b00:	fb09 4413 	mls	r4, r9, r3, r4
 8000b04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b0c:	45a4      	cmp	ip, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x1ce>
 8000b10:	193c      	adds	r4, r7, r4
 8000b12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b16:	f080 8082 	bcs.w	8000c1e <__udivmoddi4+0x2ca>
 8000b1a:	45a4      	cmp	ip, r4
 8000b1c:	d97f      	bls.n	8000c1e <__udivmoddi4+0x2ca>
 8000b1e:	3b02      	subs	r3, #2
 8000b20:	443c      	add	r4, r7
 8000b22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b26:	eba4 040c 	sub.w	r4, r4, ip
 8000b2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b2e:	4564      	cmp	r4, ip
 8000b30:	4673      	mov	r3, lr
 8000b32:	46e1      	mov	r9, ip
 8000b34:	d362      	bcc.n	8000bfc <__udivmoddi4+0x2a8>
 8000b36:	d05f      	beq.n	8000bf8 <__udivmoddi4+0x2a4>
 8000b38:	b15d      	cbz	r5, 8000b52 <__udivmoddi4+0x1fe>
 8000b3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000b3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000b42:	fa04 f606 	lsl.w	r6, r4, r6
 8000b46:	fa22 f301 	lsr.w	r3, r2, r1
 8000b4a:	431e      	orrs	r6, r3
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000b52:	2100      	movs	r1, #0
 8000b54:	e74f      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000b56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b5a:	0c01      	lsrs	r1, r0, #16
 8000b5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b60:	b280      	uxth	r0, r0
 8000b62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b66:	463b      	mov	r3, r7
 8000b68:	4638      	mov	r0, r7
 8000b6a:	463c      	mov	r4, r7
 8000b6c:	46b8      	mov	r8, r7
 8000b6e:	46be      	mov	lr, r7
 8000b70:	2620      	movs	r6, #32
 8000b72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b76:	eba2 0208 	sub.w	r2, r2, r8
 8000b7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b7e:	e766      	b.n	8000a4e <__udivmoddi4+0xfa>
 8000b80:	4601      	mov	r1, r0
 8000b82:	e718      	b.n	80009b6 <__udivmoddi4+0x62>
 8000b84:	4610      	mov	r0, r2
 8000b86:	e72c      	b.n	80009e2 <__udivmoddi4+0x8e>
 8000b88:	f1c6 0220 	rsb	r2, r6, #32
 8000b8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000b90:	40b7      	lsls	r7, r6
 8000b92:	40b1      	lsls	r1, r6
 8000b94:	fa20 f202 	lsr.w	r2, r0, r2
 8000b98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ba8:	0c11      	lsrs	r1, r2, #16
 8000baa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bae:	fb08 f904 	mul.w	r9, r8, r4
 8000bb2:	40b0      	lsls	r0, r6
 8000bb4:	4589      	cmp	r9, r1
 8000bb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bba:	b280      	uxth	r0, r0
 8000bbc:	d93e      	bls.n	8000c3c <__udivmoddi4+0x2e8>
 8000bbe:	1879      	adds	r1, r7, r1
 8000bc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000bc4:	d201      	bcs.n	8000bca <__udivmoddi4+0x276>
 8000bc6:	4589      	cmp	r9, r1
 8000bc8:	d81f      	bhi.n	8000c0a <__udivmoddi4+0x2b6>
 8000bca:	eba1 0109 	sub.w	r1, r1, r9
 8000bce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd2:	fb09 f804 	mul.w	r8, r9, r4
 8000bd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bda:	b292      	uxth	r2, r2
 8000bdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be0:	4542      	cmp	r2, r8
 8000be2:	d229      	bcs.n	8000c38 <__udivmoddi4+0x2e4>
 8000be4:	18ba      	adds	r2, r7, r2
 8000be6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bea:	d2c4      	bcs.n	8000b76 <__udivmoddi4+0x222>
 8000bec:	4542      	cmp	r2, r8
 8000bee:	d2c2      	bcs.n	8000b76 <__udivmoddi4+0x222>
 8000bf0:	f1a9 0102 	sub.w	r1, r9, #2
 8000bf4:	443a      	add	r2, r7
 8000bf6:	e7be      	b.n	8000b76 <__udivmoddi4+0x222>
 8000bf8:	45f0      	cmp	r8, lr
 8000bfa:	d29d      	bcs.n	8000b38 <__udivmoddi4+0x1e4>
 8000bfc:	ebbe 0302 	subs.w	r3, lr, r2
 8000c00:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c04:	3801      	subs	r0, #1
 8000c06:	46e1      	mov	r9, ip
 8000c08:	e796      	b.n	8000b38 <__udivmoddi4+0x1e4>
 8000c0a:	eba7 0909 	sub.w	r9, r7, r9
 8000c0e:	4449      	add	r1, r9
 8000c10:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c14:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c18:	fb09 f804 	mul.w	r8, r9, r4
 8000c1c:	e7db      	b.n	8000bd6 <__udivmoddi4+0x282>
 8000c1e:	4673      	mov	r3, lr
 8000c20:	e77f      	b.n	8000b22 <__udivmoddi4+0x1ce>
 8000c22:	4650      	mov	r0, sl
 8000c24:	e766      	b.n	8000af4 <__udivmoddi4+0x1a0>
 8000c26:	4608      	mov	r0, r1
 8000c28:	e6fd      	b.n	8000a26 <__udivmoddi4+0xd2>
 8000c2a:	443b      	add	r3, r7
 8000c2c:	3a02      	subs	r2, #2
 8000c2e:	e733      	b.n	8000a98 <__udivmoddi4+0x144>
 8000c30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c34:	443b      	add	r3, r7
 8000c36:	e71c      	b.n	8000a72 <__udivmoddi4+0x11e>
 8000c38:	4649      	mov	r1, r9
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x222>
 8000c3c:	eba1 0109 	sub.w	r1, r1, r9
 8000c40:	46c4      	mov	ip, r8
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	e7c4      	b.n	8000bd6 <__udivmoddi4+0x282>

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
int _write(int file, char* p, int len){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	/*for(int i=0; i<len; i++){
		ITM_SendChar((*p++));
	}*/
	HAL_UART_Transmit(&huart3, (uint8_t*)p, len, HAL_MAX_DELAY);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <_write+0x28>)
 8000c68:	f009 fa36 	bl	800a0d8 <HAL_UART_Transmit>
	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000328 	.word	0x24000328

08000c7c <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d103      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	2400040c 	.word	0x2400040c

08000cac <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d103      	bne.n	8000cc4 <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 8000cbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cc0:	f7ff ffdc 	bl	8000c7c <HAL_GPIO_EXTI_Callback>
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cd0:	ed2d 8b02 	vpush	{d8}
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cdc:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ce0:	ed87 1a01 	vstr	s2, [r7, #4]
 8000ce4:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 8000ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 8000cf6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d06:	d502      	bpl.n	8000d0e <float32_t_to_uint+0x42>
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	60f9      	str	r1, [r7, #12]
 8000d0c:	e00a      	b.n	8000d24 <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8000d0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1e:	dd01      	ble.n	8000d24 <float32_t_to_uint+0x58>
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 8000d24:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d2c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000d30:	f04f 0001 	mov.w	r0, #1
 8000d34:	f04f 0100 	mov.w	r1, #0
 8000d38:	683c      	ldr	r4, [r7, #0]
 8000d3a:	f1a4 0620 	sub.w	r6, r4, #32
 8000d3e:	f1c4 0520 	rsb	r5, r4, #32
 8000d42:	fa01 f304 	lsl.w	r3, r1, r4
 8000d46:	fa00 f606 	lsl.w	r6, r0, r6
 8000d4a:	4333      	orrs	r3, r6
 8000d4c:	fa20 f505 	lsr.w	r5, r0, r5
 8000d50:	432b      	orrs	r3, r5
 8000d52:	fa00 f204 	lsl.w	r2, r0, r4
 8000d56:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000d5a:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000d5e:	4640      	mov	r0, r8
 8000d60:	4649      	mov	r1, r9
 8000d62:	f7ff fd99 	bl	8000898 <__aeabi_ul2f>
 8000d66:	ee06 0a90 	vmov	s13, r0
 8000d6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d7a:	ee17 3a90 	vmov	r3, s15
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	ecbd 8b02 	vpop	{d8}
 8000d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d8c <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d90:	ed2d 8b02 	vpush	{d8}
 8000d94:	b087      	sub	sp, #28
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d9e:	edc7 0a01 	vstr	s1, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 8000da4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000da8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db0:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 8000db8:	68f9      	ldr	r1, [r7, #12]
 8000dba:	ee07 1a90 	vmov	s15, r1
 8000dbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dc6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000dca:	f04f 0001 	mov.w	r0, #1
 8000dce:	f04f 0100 	mov.w	r1, #0
 8000dd2:	683c      	ldr	r4, [r7, #0]
 8000dd4:	f1a4 0620 	sub.w	r6, r4, #32
 8000dd8:	f1c4 0520 	rsb	r5, r4, #32
 8000ddc:	fa01 f304 	lsl.w	r3, r1, r4
 8000de0:	fa00 f606 	lsl.w	r6, r0, r6
 8000de4:	4333      	orrs	r3, r6
 8000de6:	fa20 f505 	lsr.w	r5, r0, r5
 8000dea:	432b      	orrs	r3, r5
 8000dec:	fa00 f204 	lsl.w	r2, r0, r4
 8000df0:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000df4:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000df8:	4640      	mov	r0, r8
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fd4c 	bl	8000898 <__aeabi_ul2f>
 8000e00:	ee07 0a90 	vmov	s15, r0
 8000e04:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8000e08:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e10:	eeb0 0a67 	vmov.f32	s0, s15
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e20 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 8000e2a:	23ff      	movs	r3, #255	@ 0xff
 8000e2c:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000e2e:	23ff      	movs	r3, #255	@ 0xff
 8000e30:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000e32:	23ff      	movs	r3, #255	@ 0xff
 8000e34:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000e36:	23ff      	movs	r3, #255	@ 0xff
 8000e38:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000e3a:	23ff      	movs	r3, #255	@ 0xff
 8000e3c:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000e3e:	23ff      	movs	r3, #255	@ 0xff
 8000e40:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000e42:	23ff      	movs	r3, #255	@ 0xff
 8000e44:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 8000e46:	23fe      	movs	r3, #254	@ 0xfe
 8000e48:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e4e:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e5e:	2208      	movs	r2, #8
 8000e60:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	461a      	mov	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e88:	4808      	ldr	r0, [pc, #32]	@ (8000eac <MIT_reset_origin+0x8c>)
 8000e8a:	f004 fe3a 	bl	8005b02 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <MIT_reset_origin+0x7e>
		sta = 1;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MIT_reset_origin+0x90>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000e9a:	f003 fcdf 	bl	800485c <Error_Handler>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000264 	.word	0x24000264
 8000eac:	24000288 	.word	0x24000288
 8000eb0:	24000a78 	.word	0x24000a78

08000eb4 <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000ebe:	23ff      	movs	r3, #255	@ 0xff
 8000ec0:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000ec2:	23ff      	movs	r3, #255	@ 0xff
 8000ec4:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000ec6:	23ff      	movs	r3, #255	@ 0xff
 8000ec8:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000eca:	23ff      	movs	r3, #255	@ 0xff
 8000ecc:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000ece:	23ff      	movs	r3, #255	@ 0xff
 8000ed0:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000ed2:	23ff      	movs	r3, #255	@ 0xff
 8000ed4:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000ed6:	23ff      	movs	r3, #255	@ 0xff
 8000ed8:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 8000eda:	23fc      	movs	r3, #252	@ 0xfc
 8000edc:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a16      	ldr	r2, [pc, #88]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ee2:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <MIT_enter_control_mode+0x8c>)
 8000f1e:	f004 fdf0 	bl	8005b02 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <MIT_enter_control_mode+0x7e>
		sta = 1;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MIT_enter_control_mode+0x90>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000f2e:	f003 fc95 	bl	800485c <Error_Handler>
	}
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	24000264 	.word	0x24000264
 8000f40:	24000288 	.word	0x24000288
 8000f44:	24000a78 	.word	0x24000a78

08000f48 <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000f52:	23ff      	movs	r3, #255	@ 0xff
 8000f54:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000f56:	23ff      	movs	r3, #255	@ 0xff
 8000f58:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000f5a:	23ff      	movs	r3, #255	@ 0xff
 8000f5c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000f5e:	23ff      	movs	r3, #255	@ 0xff
 8000f60:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000f62:	23ff      	movs	r3, #255	@ 0xff
 8000f64:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000f66:	23ff      	movs	r3, #255	@ 0xff
 8000f68:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000f6a:	23ff      	movs	r3, #255	@ 0xff
 8000f6c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 8000f6e:	23fd      	movs	r3, #253	@ 0xfd
 8000f70:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f76:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f86:	2208      	movs	r2, #8
 8000f88:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	461a      	mov	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000fb0:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <MIT_exit_control_mode+0x8c>)
 8000fb2:	f004 fda6 	bl	8005b02 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <MIT_exit_control_mode+0x7e>
		sta = 1;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MIT_exit_control_mode+0x90>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000fc2:	f003 fc4b 	bl	800485c <Error_Handler>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000264 	.word	0x24000264
 8000fd4:	24000288 	.word	0x24000288
 8000fd8:	24000a78 	.word	0x24000a78

08000fdc <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3303      	adds	r3, #3
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3305      	adds	r3, #5
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	121b      	asrs	r3, r3, #8
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3306      	adds	r3, #6
 8001020:	f002 020f 	and.w	r2, r2, #15
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3307      	adds	r3, #7
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	ed87 0a00 	vstr	s0, [r7]
 800104c:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <MIT_Mode+0xd8>)
 8001050:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MIT_Mode+0xdc>)
 8001054:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 8001056:	edd7 7a07 	vldr	s15, [r7, #28]
 800105a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800105e:	edd7 6a00 	vldr	s13, [r7]
 8001062:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001066:	eeb0 1b46 	vmov.f64	d1, d6
 800106a:	eeb0 0b47 	vmov.f64	d0, d7
 800106e:	f00f fea9 	bl	8010dc4 <fmax>
 8001072:	eeb0 6b40 	vmov.f64	d6, d0
 8001076:	edd7 7a06 	vldr	s15, [r7, #24]
 800107a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107e:	eeb0 1b47 	vmov.f64	d1, d7
 8001082:	eeb0 0b46 	vmov.f64	d0, d6
 8001086:	f00f feba 	bl	8010dfe <fmin>
 800108a:	eeb0 7b40 	vmov.f64	d7, d0
 800108e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001092:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 8001096:	200c      	movs	r0, #12
 8001098:	ed97 1a06 	vldr	s2, [r7, #24]
 800109c:	edd7 0a07 	vldr	s1, [r7, #28]
 80010a0:	ed97 0a00 	vldr	s0, [r7]
 80010a4:	f7ff fe12 	bl	8000ccc <float32_t_to_uint>
 80010a8:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff91 	bl	8000fdc <MIT_TxData>

	TxHeader.Identifier = motor_id;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <MIT_Mode+0xe0>)
 80010be:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MIT_Mode+0xe0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MIT_Mode+0xe0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MIT_Mode+0xe0>)
 80010ce:	2208      	movs	r2, #8
 80010d0:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MIT_Mode+0xe0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MIT_Mode+0xe0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MIT_Mode+0xe0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MIT_Mode+0xe0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <MIT_Mode+0xe0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	461a      	mov	r2, r3
 80010f6:	490a      	ldr	r1, [pc, #40]	@ (8001120 <MIT_Mode+0xe0>)
 80010f8:	480a      	ldr	r0, [pc, #40]	@ (8001124 <MIT_Mode+0xe4>)
 80010fa:	f004 fd02 	bl	8005b02 <HAL_FDCAN_AddMessageToTxFifoQ>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <MIT_Mode+0xce>
		sta = 1;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <MIT_Mode+0xe8>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800110a:	f003 fba7 	bl	800485c <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	c1c80000 	.word	0xc1c80000
 800111c:	41c80000 	.word	0x41c80000
 8001120:	24000264 	.word	0x24000264
 8001124:	24000288 	.word	0x24000288
 8001128:	24000a78 	.word	0x24000a78

0800112c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b092      	sub	sp, #72	@ 0x48
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d04b      	beq.n	80011d8 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001140:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	2140      	movs	r1, #64	@ 0x40
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f004 fd34 	bl	8005bb8 <HAL_FDCAN_GetRxMessage>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001158:	2202      	movs	r2, #2
 800115a:	601a      	str	r2, [r3, #0]
            Error_Handler();
 800115c:	f003 fb7e 	bl	800485c <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 8001160:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001164:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001168:	2300      	movs	r3, #0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
 800116c:	e02b      	b.n	80011c6 <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 800116e:	4a1d      	ldr	r2, [pc, #116]	@ (80011e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001172:	2198      	movs	r1, #152	@ 0x98
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	3308      	adds	r3, #8
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001182:	429a      	cmp	r2, r3
 8001184:	d11c      	bne.n	80011c0 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 800118a:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800118c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800118e:	2198      	movs	r1, #152	@ 0x98
 8001190:	fb01 f303 	mul.w	r3, r1, r3
 8001194:	4413      	add	r3, r2
 8001196:	3310      	adds	r3, #16
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800119e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80011a2:	2300      	movs	r3, #0
 80011a4:	f00a fd02 	bl	800bbac <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00f      	beq.n	80011ce <HAL_FDCAN_RxFifo0Callback+0xa2>
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80011b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	f3bf 8f6f 	isb	sy
                break;
 80011be:	e006      	b.n	80011ce <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 80011c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c2:	3301      	adds	r3, #1
 80011c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80011c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	ddd0      	ble.n	800116e <HAL_FDCAN_RxFifo0Callback+0x42>
 80011cc:	e000      	b.n	80011d0 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 80011ce:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	4806      	ldr	r0, [pc, #24]	@ (80011ec <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80011d4:	f005 fdbf 	bl	8006d56 <HAL_GPIO_TogglePin>
    }
}
 80011d8:	bf00      	nop
 80011da:	3748      	adds	r7, #72	@ 0x48
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	24000a78 	.word	0x24000a78
 80011e4:	2400040c 	.word	0x2400040c
 80011e8:	e000ed04 	.word	0xe000ed04
 80011ec:	58021000 	.word	0x58021000

080011f0 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80011fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80011fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8001202:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 8001206:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001280 <tustin_derivative+0x90>
 800120a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800120e:	edd7 7a00 	vldr	s15, [r7]
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800121a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121e:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 8001228:	ed97 7a03 	vldr	s14, [r7, #12]
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001234:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001238:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001284 <tustin_derivative+0x94>
 800123c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001244:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001248:	edd7 7a01 	vldr	s15, [r7, #4]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001254:	edd7 7a05 	vldr	s15, [r7, #20]
 8001258:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800125c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001284 <tustin_derivative+0x94>
 8001260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001268:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	ee07 3a90 	vmov	s15, r3
}
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40490fd8 	.word	0x40490fd8
 8001284:	3b03126f 	.word	0x3b03126f

08001288 <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 80012e6:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 80012f0:	61bb      	str	r3, [r7, #24]
	uint8_t buf[8];
	if (xQueueReceive(m->canRxQueue, buf, pdMS_TO_TICKS(1)) == pdPASS)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f107 0108 	add.w	r1, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00a fcf3 	bl	800bce8 <xQueueReceive>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d11f      	bne.n	8001348 <motor_encoder_read+0xc0>
	{
		// CAN 메시지가 이미 수신되었거나 1ms 이내 수신 성공 시
		unsigned int p_int = ((buf[1]<<8)|buf[2]);
 8001308:	7a7b      	ldrb	r3, [r7, #9]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	7aba      	ldrb	r2, [r7, #10]
 800130e:	4313      	orrs	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 8001312:	2110      	movs	r1, #16
 8001314:	edd7 0a06 	vldr	s1, [r7, #24]
 8001318:	ed97 0a07 	vldr	s0, [r7, #28]
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f7ff fd35 	bl	8000d8c <uint_to_float32_t>
 8001322:	ed87 0a04 	vstr	s0, [r7, #16]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 8001326:	eddf 7a28 	vldr	s15, [pc, #160]	@ 80013c8 <motor_encoder_read+0x140>
 800132a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	edd3 7a03 	vldr	s15, [r3, #12]
 8001334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001338:	edd7 7a04 	vldr	s15, [r7, #16]
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001346:	e004      	b.n	8001352 <motor_encoder_read+0xca>
	}
	else
	{
		sta = 2;
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <motor_encoder_read+0x144>)
 800134a:	2202      	movs	r2, #2
 800134c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800134e:	f003 fa85 	bl	800485c <Error_Handler>
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		//m->pos = m->pos_old;
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	ed93 6a06 	vldr	s12, [r3, #24]
 800136a:	eef0 1a46 	vmov.f32	s3, s12
 800136e:	eeb0 1a66 	vmov.f32	s2, s13
 8001372:	eef0 0a47 	vmov.f32	s1, s14
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	f7ff ff39 	bl	80011f0 <tustin_derivative>
 800137e:	eef0 7a40 	vmov.f32	s15, s0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	ed93 6a06 	vldr	s12, [r3, #24]
 80013a0:	eef0 1a46 	vmov.f32	s3, s12
 80013a4:	eeb0 1a66 	vmov.f32	s2, s13
 80013a8:	eef0 0a47 	vmov.f32	s1, s14
 80013ac:	eeb0 0a67 	vmov.f32	s0, s15
 80013b0:	f7ff ff1e 	bl	80011f0 <tustin_derivative>
 80013b4:	eef0 7a40 	vmov.f32	s15, s0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40490fd8 	.word	0x40490fd8
 80013cc:	24000a78 	.word	0x24000a78

080013d0 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 7a04 	vldr	s15, [r3, #16]
 80013e2:	ed97 7a00 	vldr	s14, [r7]
 80013e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	ed93 7a05 	vldr	s14, [r3, #20]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd1a      	ble.n	8001450 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a04 	vldr	s15, [r3, #16]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800145c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001464:	d400      	bmi.n	8001468 <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 8001466:	e01a      	b.n	800149e <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	edd3 7a05 	vldr	s15, [r3, #20]
 800147e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a04 	vldr	s15, [r3, #16]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	f00f fd41 	bl	8010f48 <sinf>
 80014c6:	ed87 0a08 	vstr	s0, [r7, #32]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f00f fdfa 	bl	80110d0 <cosf>
 80014dc:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014e6:	3304      	adds	r3, #4
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	f00f fd2a 	bl	8010f48 <sinf>
 80014f4:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014fe:	3304      	adds	r3, #4
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	f00f fde2 	bl	80110d0 <cosf>
 800150c:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001516:	3308      	adds	r3, #8
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	f00f fd12 	bl	8010f48 <sinf>
 8001524:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800152e:	3308      	adds	r3, #8
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	f00f fdca 	bl	80110d0 <cosf>
 800153c:	ed87 0a03 	vstr	s0, [r7, #12]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
 8001544:	e02c      	b.n	80015a0 <robot_forward_kinematics_cal+0xf4>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	441a      	add	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	441a      	add	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	441a      	add	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	3301      	adds	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	ddcf      	ble.n	8001546 <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80015ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80015ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80015be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80015cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80015de:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80015ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80015fe:	3304      	adds	r3, #4
 8001600:	edd7 7a08 	vldr	s15, [r7, #32]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 8001618:	edd7 7a06 	vldr	s15, [r7, #24]
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800162a:	edd7 7a04 	vldr	s15, [r7, #16]
 800162e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001638:	3308      	adds	r3, #8
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163e:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001654:	461a      	mov	r2, r3
 8001656:	f00c fd15 	bl	800e084 <arm_mat_mult_f32>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <robot_forward_kinematics_cal+0x1be>
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <robot_forward_kinematics_cal+0x1c8>)
 8001662:	2204      	movs	r2, #4
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f003 f8f9 	bl	800485c <Error_Handler>
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	24000a78 	.word	0x24000a78

08001678 <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0f0      	sub	sp, #448	@ 0x1c0
 800167c:	af00      	add	r7, sp, #0
 800167e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001682:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001686:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001688:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800168c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	f00f fc53 	bl	8010f48 <sinf>
 80016a2:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 80016a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	f00f fd08 	bl	80110d0 <cosf>
 80016c0:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 80016c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016d2:	3304      	adds	r3, #4
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f00f fc34 	bl	8010f48 <sinf>
 80016e0:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 80016e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016f2:	3304      	adds	r3, #4
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	f00f fce8 	bl	80110d0 <cosf>
 8001700:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001704:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001708:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001712:	3308      	adds	r3, #8
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f00f fc14 	bl	8010f48 <sinf>
 8001720:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001724:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001728:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001732:	3308      	adds	r3, #8
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f00f fcc8 	bl	80110d0 <cosf>
 8001740:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8001744:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001748:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001752:	3308      	adds	r3, #8
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800175c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001766:	3304      	adds	r3, #4
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	eeb0 0a67 	vmov.f32	s0, s15
 8001774:	f00f fbe8 	bl	8010f48 <sinf>
 8001778:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 800177c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001780:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800178a:	3308      	adds	r3, #8
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001794:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800179e:	3304      	adds	r3, #4
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	f00f fc90 	bl	80110d0 <cosf>
 80017b0:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 80017b4:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80017b8:	eeb1 7a67 	vneg.f32	s14, s15
 80017bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 80017ca:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80017ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	ed93 6ac3 	vldr	s12, [r3, #780]	@ 0x30c
 80017e0:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80017e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 8001802:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001806:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001810:	eeb1 7a67 	vneg.f32	s14, s15
 8001814:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001820:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 800182a:	3304      	adds	r3, #4
 800182c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001834:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 8001838:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800183c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001846:	eeb1 7a67 	vneg.f32	s14, s15
 800184a:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800184e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001852:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001856:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 8001860:	3308      	adds	r3, #8
 8001862:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 800186e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001872:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800187c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001884:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001888:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001892:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800189e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018a2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80018ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 80018ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80018d8:	eeb1 7a67 	vneg.f32	s14, s15
 80018dc:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80018e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80018f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001900:	3301      	adds	r3, #1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 8001912:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001916:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001920:	eeb1 7a67 	vneg.f32	s14, s15
 8001924:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001930:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 800193a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800193e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001948:	3302      	adds	r3, #2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001956:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 800195a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800195e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001968:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800196c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 8001980:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001984:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800198e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001992:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 800199c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	3304      	adds	r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 80019bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80019ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80019d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019e6:	3301      	adds	r3, #1
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 80019f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 8001a06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f00c fad6 	bl	800dfc8 <arm_mat_trans_f32>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <robot_model_param_cal+0x3bc>
 8001a22:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <robot_model_param_cal+0x3b8>)
 8001a24:	2204      	movs	r2, #4
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f002 ff18 	bl	800485c <Error_Handler>
 8001a2c:	e002      	b.n	8001a34 <robot_model_param_cal+0x3bc>
 8001a2e:	bf00      	nop
 8001a30:	24000a78 	.word	0x24000a78

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 8001a34:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001a42:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	edd3 6ac8 	vldr	s13, [r3, #800]	@ 0x320
 8001a58:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001a68:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ed93 7ac4 	vldr	s14, [r3, #784]	@ 0x310
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 8001a76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	edd3 6abf 	vldr	s13, [r3, #764]	@ 0x2fc
 8001a84:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a88:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001a92:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001a96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001aa2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001aac:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001ab0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001abc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ac0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001aca:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001ace:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ad2:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001ada:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ade:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001aec:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001af0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001af4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001afe:	eeb1 7a67 	vneg.f32	s14, s15
 8001b02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b26:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001b32:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001b36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b3a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001b44:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b4c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b50:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001b5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b5e:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001b66:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b6a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001b74:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001b76:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 8001b7e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b82:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001b8c:	eeb1 7a67 	vneg.f32	s14, s15
 8001b90:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b98:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001baa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001bb8:	3308      	adds	r3, #8
 8001bba:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 8001bc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001bd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001be2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001be6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	6852      	ldr	r2, [r2, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001bf8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bfc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	ed93 7ac5 	vldr	s14, [r3, #788]	@ 0x314
											+ r->m3 * r->l2 * r->l2;
 8001c06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001c14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c26:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001c38:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001c46:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c4a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001c54:	3301      	adds	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 8001c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 8001c62:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c66:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8001c70:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c74:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001ca2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ca6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 8001cc2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cc6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001cd0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cd4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001cde:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ce2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	6892      	ldr	r2, [r2, #8]
 8001cf2:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 8001cf4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cf8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d10:	3302      	adds	r3, #2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d1a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001d24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	3304      	adds	r3, #4
 8001d36:	440b      	add	r3, r1
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 8001d3c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d58:	3301      	adds	r3, #1
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8001d62:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	f8d2 2318 	ldr.w	r2, [r2, #792]	@ 0x318
 8001d6c:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001d6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001d7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001d80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d92:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d96:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da4:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dac:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001db8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 8001dcc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dd0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001dda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dde:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001de8:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001dec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001df0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001df4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001dfe:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001e02:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e06:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e0e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e12:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001e1c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001e20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001e32:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001e36:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e3a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e3e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e42:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001e64:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001e68:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	ed93 5a00 	vldr	s10, [r3]
 8001e80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e8e:	3304      	adds	r3, #4
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001e98:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e9c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ea8:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 8001eac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001eba:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ebe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ec2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
							 ) * r->qdot_bi.pData[0];
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 8001ed4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ed8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001ee2:	eeb1 7a67 	vneg.f32	s14, s15
 8001ee6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001efc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f0a:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f20:	3308      	adds	r3, #8
 8001f22:	edd3 6a00 	vldr	s13, [r3]
 8001f26:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f34:	3304      	adds	r3, #4
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f50:	3308      	adds	r3, #8
 8001f52:	edd3 6a00 	vldr	s13, [r3]
 8001f56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f64:	3304      	adds	r3, #4
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 8001f86:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f8a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8001f94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001faa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb8:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fc4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fce:	3304      	adds	r3, #4
 8001fd0:	edd3 6a00 	vldr	s13, [r3]
 8001fd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ff0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002004:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002008:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 8002018:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800201c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	ed93 7abf 	vldr	s14, [r3, #764]	@ 0x2fc
 8002026:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800202a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8002034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002038:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800203c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8002046:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800204a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002278 <robot_model_param_cal+0xc00>
 8002060:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002064:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002068:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002072:	3304      	adds	r3, #4
 8002074:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207c:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 8002080:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002084:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 800208e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002278 <robot_model_param_cal+0xc00>
 8002092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002096:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800209a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80020a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80020b6:	3308      	adds	r3, #8
 80020b8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c0:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 80020c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80020d2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80020d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80020e8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80020ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f4:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 80020f8:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 80020fc:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002104:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 8002108:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800210c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002114:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 8002118:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800211c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002126:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800212a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8002134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002138:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800227c <robot_model_param_cal+0xc04>
 800213c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002140:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002144:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800214e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002152:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002280 <robot_model_param_cal+0xc08>
 8002164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002168:	eef0 0a67 	vmov.f32	s1, s15
 800216c:	eeb0 0a66 	vmov.f32	s0, s13
 8002170:	f00e fe86 	bl	8010e80 <fmaxf>
 8002174:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 8002178:	4b42      	ldr	r3, [pc, #264]	@ (8002284 <robot_model_param_cal+0xc0c>)
 800217a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 800217e:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8002182:	eef0 7ae7 	vabs.f32	s15, s15
 8002186:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 800218a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002192:	dc0b      	bgt.n	80021ac <robot_model_param_cal+0xb34>
 8002194:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002198:	eef0 7ae7 	vabs.f32	s15, s15
 800219c:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 80021a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	f340 82aa 	ble.w	8002700 <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 80021b4:	2203      	movs	r2, #3
 80021b6:	2103      	movs	r1, #3
 80021b8:	f00c f906 	bl	800e3c8 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 80021bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021c0:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80021c4:	2203      	movs	r2, #3
 80021c6:	2103      	movs	r1, #3
 80021c8:	f00c f8fe 	bl	800e3c8 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 80021cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80021d0:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 80021d4:	2203      	movs	r2, #3
 80021d6:	2103      	movs	r1, #3
 80021d8:	f00c f8f6 	bl	800e3c8 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80021dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80021ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 80021f8:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 80021fc:	4619      	mov	r1, r3
 80021fe:	f00b ff41 	bl	800e084 <arm_mat_mult_f32>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <robot_model_param_cal+0xb9a>
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <robot_model_param_cal+0xc10>)
 800220a:	2204      	movs	r2, #4
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f002 fb25 	bl	800485c <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002212:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002216:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800221a:	ed93 7a00 	vldr	s14, [r3]
 800221e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002222:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002226:	edd3 7a04 	vldr	s15, [r3, #16]
 800222a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002232:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002236:	edd3 7a08 	vldr	s15, [r3, #32]
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 8002242:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 8002246:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800224a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800227c <robot_model_param_cal+0xc04>
 8002252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002256:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800228c <robot_model_param_cal+0xc14>
 800225a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800225e:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 8002262:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002266:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800226a:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002274:	e023      	b.n	80022be <robot_model_param_cal+0xc46>
 8002276:	bf00      	nop
 8002278:	411ce80a 	.word	0x411ce80a
 800227c:	358637bd 	.word	0x358637bd
 8002280:	34000000 	.word	0x34000000
 8002284:	358637bd 	.word	0x358637bd
 8002288:	24000a78 	.word	0x24000a78
 800228c:	3d4ccccd 	.word	0x3d4ccccd
 8002290:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002294:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8002298:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022a6:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 80022aa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022b8:	3301      	adds	r3, #1
 80022ba:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80022be:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	dde4      	ble.n	8002290 <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 80022c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022ca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022e2:	edc3 7a00 	vstr	s15, [r3]
 80022e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022ea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80022f2:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002302:	edc3 7a04 	vstr	s15, [r3, #16]
 8002306:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800230a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800230e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002312:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800231e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002322:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002326:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800232a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f00b ff4b 	bl	800e1cc <arm_mat_inverse_f32>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <robot_model_param_cal+0xcce>
 800233c:	4b82      	ldr	r3, [pc, #520]	@ (8002548 <robot_model_param_cal+0xed0>)
 800233e:	2204      	movs	r2, #4
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f002 fa8b 	bl	800485c <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002346:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800234a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 8002354:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002358:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002362:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002366:	4619      	mov	r1, r3
 8002368:	f00b fe8c 	bl	800e084 <arm_mat_mult_f32>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <robot_model_param_cal+0xd04>
 8002372:	4b75      	ldr	r3, [pc, #468]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002374:	2204      	movs	r2, #4
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f002 fa70 	bl	800485c <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800237c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002380:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 800238a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800238e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f00b fe14 	bl	800dfc8 <arm_mat_trans_f32>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <robot_model_param_cal+0xd38>
 80023a6:	4b68      	ldr	r3, [pc, #416]	@ (8002548 <robot_model_param_cal+0xed0>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f002 fa56 	bl	800485c <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 80023b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023b4:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 80023b8:	2203      	movs	r2, #3
 80023ba:	2103      	movs	r1, #3
 80023bc:	f00c f804 	bl	800e3c8 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 80023c0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80023c4:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80023c8:	2203      	movs	r2, #3
 80023ca:	2103      	movs	r1, #3
 80023cc:	f00b fffc 	bl	800e3c8 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 80023d0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80023d4:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80023d8:	2203      	movs	r2, #3
 80023da:	2103      	movs	r1, #3
 80023dc:	f00b fff4 	bl	800e3c8 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 80023e0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80023e4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80023e8:	2203      	movs	r2, #3
 80023ea:	2103      	movs	r1, #3
 80023ec:	f00b ffec 	bl	800e3c8 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 80023f0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80023f4:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 80023f8:	2203      	movs	r2, #3
 80023fa:	2103      	movs	r1, #3
 80023fc:	f00b ffe4 	bl	800e3c8 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002400:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002404:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 800240e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f00b fed9 	bl	800e1cc <arm_mat_inverse_f32>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 80b2 	bne.w	8002586 <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002422:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002426:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002430:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002434:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002438:	4618      	mov	r0, r3
 800243a:	f00b fe23 	bl	800e084 <arm_mat_mult_f32>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <robot_model_param_cal+0xdd6>
 8002444:	4b40      	ldr	r3, [pc, #256]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002446:	2204      	movs	r2, #4
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f002 fa07 	bl	800485c <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800244e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002452:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 715f 	add.w	r1, r3, #892	@ 0x37c
 800245c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002460:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002464:	4618      	mov	r0, r3
 8002466:	f00b fe0d 	bl	800e084 <arm_mat_mult_f32>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <robot_model_param_cal+0xe02>
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002472:	2204      	movs	r2, #4
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f002 f9f1 	bl	800485c <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002480:	e016      	b.n	80024b0 <robot_model_param_cal+0xe38>
 8002482:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002486:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 800248a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002498:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 800249c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024aa:	3301      	adds	r3, #1
 80024ac:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80024b0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	dde4      	ble.n	8002482 <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 80024c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024dc:	edc3 7a00 	vstr	s15, [r3]
 80024e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80024ec:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024fc:	edc3 7a04 	vstr	s15, [r3, #16]
 8002500:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002508:	ed93 7a08 	vldr	s14, [r3, #32]
 800250c:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800251c:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002520:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002524:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f00b fe4e 	bl	800e1cc <arm_mat_inverse_f32>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <robot_model_param_cal+0xec8>
 8002536:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002538:	2204      	movs	r2, #4
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f002 f98e 	bl	800485c <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002546:	e01a      	b.n	800257e <robot_model_param_cal+0xf06>
 8002548:	24000a78 	.word	0x24000a78
 800254c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002550:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 800255a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 800256c:	443a      	add	r2, r7
 800256e:	3ae0      	subs	r2, #224	@ 0xe0
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002578:	3301      	adds	r3, #1
 800257a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800257e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002582:	2b08      	cmp	r3, #8
 8002584:	dde2      	ble.n	800254c <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8002586:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800258a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002594:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002598:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 80025a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025b4:	3304      	adds	r3, #4
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 80025bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025ca:	3308      	adds	r3, #8
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 80025d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80025e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 80025f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002606:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800260a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002614:	3301      	adds	r3, #1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800261e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002628:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800262c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002636:	3301      	adds	r3, #1
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002640:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002644:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800264e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002652:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800265c:	3302      	adds	r3, #2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002668:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800266c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002676:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800267a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 800268e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002692:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800269c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3304      	adds	r3, #4
 80026ae:	4413      	add	r3, r2
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 80026b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80026c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 80026d2:	3301      	adds	r3, #1
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	441a      	add	r2, r3
 80026d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 80026e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026f4:	3301      	adds	r3, #1
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	601a      	str	r2, [r3, #0]
	{
 80026fe:	e227      	b.n	8002b50 <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 8002700:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002704:	eef1 6a67 	vneg.f32	s13, s15
 8002708:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800270c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002716:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800271a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800271e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 8002722:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002726:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002730:	3304      	adds	r3, #4
 8002732:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 8002736:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800273a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800273e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 8002742:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002746:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002750:	3308      	adds	r3, #8
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 8002758:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800275c:	eeb1 7a67 	vneg.f32	s14, s15
 8002760:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002764:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002768:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800276c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002776:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002782:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800278c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002790:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 80027a6:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80027aa:	eeb1 7a67 	vneg.f32	s14, s15
 80027ae:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80027b2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80027c4:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80027da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80027e8:	3301      	adds	r3, #1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 80027f6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80027fa:	eef1 6a67 	vneg.f32	s13, s15
 80027fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002802:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800280c:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002814:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002818:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002822:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002826:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002830:	3302      	adds	r3, #2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283a:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 800283e:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 8002842:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002846:	ee67 6a27 	vmul.f32	s13, s14, s15
 800284a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800284e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002858:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800285c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002860:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002864:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800286e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002872:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002884:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 8002888:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 800288c:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002890:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002894:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002898:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80028a2:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80028a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80028b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	3304      	adds	r3, #4
 80028ca:	4413      	add	r3, r2
 80028cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d0:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 80028d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80028e2:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80028e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80028f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002906:	3301      	adds	r3, #1
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 8002910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002914:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002918:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800291c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002926:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800292a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f00b fb46 	bl	800dfc8 <arm_mat_trans_f32>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <robot_model_param_cal+0x12d4>
 8002942:	4b86      	ldr	r3, [pc, #536]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 8002944:	2204      	movs	r2, #4
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f001 ff88 	bl	800485c <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 800294c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002950:	2224      	movs	r2, #36	@ 0x24
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f00c fb83 	bl	800f060 <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 800295a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800295e:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8002962:	2203      	movs	r2, #3
 8002964:	2103      	movs	r1, #3
 8002966:	f00b fd2f 	bl	800e3c8 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800296a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800296e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 7075 	add.w	r0, r3, #980	@ 0x3d4
 8002978:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800297c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002986:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800298a:	4619      	mov	r1, r3
 800298c:	f00b fb7a 	bl	800e084 <arm_mat_mult_f32>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <robot_model_param_cal+0x1328>
 8002996:	4b71      	ldr	r3, [pc, #452]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 8002998:	2204      	movs	r2, #4
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f001 ff5e 	bl	800485c <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80029a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 80029ae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 80029bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029c0:	4619      	mov	r1, r3
 80029c2:	f00b fb5f 	bl	800e084 <arm_mat_mult_f32>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <robot_model_param_cal+0x135e>
 80029cc:	4b63      	ldr	r3, [pc, #396]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 80029ce:	2204      	movs	r2, #4
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f001 ff43 	bl	800485c <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 80029d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029da:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80029e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 80029f6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029fa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a04:	3304      	adds	r3, #4
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002a0c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002a22:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a26:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002a30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8002a48:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002a56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002a64:	3301      	adds	r3, #1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002a78:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a7c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002a86:	3301      	adds	r3, #1
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002a90:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a94:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002a9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aa2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002aac:	3302      	adds	r3, #2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002ab8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002abc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002ac6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002ade:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ae2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002aec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002af0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	3304      	adds	r3, #4
 8002afe:	4413      	add	r3, r2
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 8002b06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002b14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002b22:	3301      	adds	r3, #1
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	441a      	add	r2, r3
 8002b28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002b36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b3a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b44:	3301      	adds	r3, #1
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	601a      	str	r2, [r3, #0]
	}
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	24000a78 	.word	0x24000a78

08002b60 <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e0cb      	b.n	8002d06 <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3374      	adds	r3, #116	@ 0x74
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	ed93 7a00 	vldr	s14, [r3]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2198      	movs	r1, #152	@ 0x98
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	332c      	adds	r3, #44	@ 0x2c
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b92:	4bba      	ldr	r3, [pc, #744]	@ (8002e7c <robot_state_update+0x31c>)
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3374      	adds	r3, #116	@ 0x74
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	ed93 7a00 	vldr	s14, [r3]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2198      	movs	r1, #152	@ 0x98
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3330      	adds	r3, #48	@ 0x30
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd8:	4ba8      	ldr	r3, [pc, #672]	@ (8002e7c <robot_state_update+0x31c>)
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf6:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3374      	adds	r3, #116	@ 0x74
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	ed93 7a00 	vldr	s14, [r3]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2198      	movs	r1, #152	@ 0x98
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3334      	adds	r3, #52	@ 0x34
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2a:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3374      	adds	r3, #116	@ 0x74
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2198      	movs	r1, #152	@ 0x98
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3338      	adds	r3, #56	@ 0x38
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3374      	adds	r3, #116	@ 0x74
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	ed93 7a00 	vldr	s14, [r3]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2198      	movs	r1, #152	@ 0x98
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	333c      	adds	r3, #60	@ 0x3c
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3374      	adds	r3, #116	@ 0x74
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	ed93 7a00 	vldr	s14, [r3]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2198      	movs	r1, #152	@ 0x98
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3340      	adds	r3, #64	@ 0x40
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	3374      	adds	r3, #116	@ 0x74
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	ed93 7a00 	vldr	s14, [r3]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	2198      	movs	r1, #152	@ 0x98
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3301      	adds	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f77f af30 	ble.w	8002b6e <robot_state_update+0xe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fcb2 	bl	8001678 <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fe fbc9 	bl	80014ac <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e02c      	b.n	8002d7a <robot_state_update+0x21a>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	441a      	add	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	@ 0x4d4
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	441a      	add	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	@ 0x510
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	441a      	add	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	3301      	adds	r3, #1
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	ddcf      	ble.n	8002d20 <robot_state_update+0x1c0>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e03a      	b.n	8002dfc <robot_state_update+0x29c>
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	441a      	add	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 1580 	ldr.w	r1, [r3, #1408]	@ 0x580
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	441a      	add	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	ddc1      	ble.n	8002d86 <robot_state_update+0x226>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	e01e      	b.n	8002e46 <robot_state_update+0x2e6>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	441a      	add	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	441a      	add	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 165c 	ldr.w	r1, [r3, #1628]	@ 0x65c
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	6812      	ldr	r2, [r2, #0]
 8002e3e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	dddd      	ble.n	8002e08 <robot_state_update+0x2a8>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f503 61c6 	add.w	r1, r3, #1584	@ 0x630
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f00b f910 	bl	800e084 <arm_mat_mult_f32>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <robot_state_update+0x314>
 8002e6a:	4b05      	ldr	r3, [pc, #20]	@ (8002e80 <robot_state_update+0x320>)
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f001 fcf4 	bl	800485c <Error_Handler>
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	240003e8 	.word	0x240003e8
 8002e80:	24000a78 	.word	0x24000a78

08002e84 <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e040      	b.n	8002f1a <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68f9      	ldr	r1, [r7, #12]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68f9      	ldr	r1, [r7, #12]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3304      	adds	r3, #4
 8002ee0:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	6a3a      	ldr	r2, [r7, #32]
 8002ee8:	4413      	add	r3, r2
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3304      	adds	r3, #4
 8002efa:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f02:	4413      	add	r3, r2
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68f9      	ldr	r1, [r7, #12]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	ddbb      	ble.n	8002e98 <robot_pos_pid_gain_setting+0x14>
	}
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e145      	b.n	80031d0 <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 8002f44:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 8003208 <robot_pos_pid+0x2d8>
 8002f48:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f68:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	441a      	add	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	ed93 7a00 	vldr	s14, [r3]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	edd3 7a00 	vldr	s15, [r3]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb4:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	ed93 7a00 	vldr	s14, [r3]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe8:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800320c <robot_pos_pid+0x2dc>
 8003002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003006:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800300a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800300e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	3304      	adds	r3, #4
 8003030:	edd3 5a00 	vldr	s11, [r3]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003048:	ee37 7a67 	vsub.f32	s14, s14, s15
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	edd3 7a00 	vldr	s15, [r3]
 800305c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	3304      	adds	r3, #4
 800306e:	edd3 5a00 	vldr	s11, [r3]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800308a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800308e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	edd3 7a00 	vldr	s15, [r3]
 80030a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030ba:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030d2:	ee37 5b07 	vadd.f64	d5, d7, d7
 80030d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80030da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030de:	ee37 6b07 	vadd.f64	d6, d7, d7
 80030e2:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800320c <robot_pos_pid+0x2dc>
 80030e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80030ee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800311a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800311e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800320c <robot_pos_pid+0x2dc>
 8003122:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003126:	edd7 7a04 	vldr	s15, [r7, #16]
 800312a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800312e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003132:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003136:	edd7 7a04 	vldr	s15, [r7, #16]
 800313a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800313e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003142:	eddf 7a32 	vldr	s15, [pc, #200]	@ 800320c <robot_pos_pid+0x2dc>
 8003146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800314a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800314e:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003166:	ee25 7b07 	vmul.f64	d7, d5, d7
 800316a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800317e:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	3301      	adds	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	f77f aeb6 	ble.w	8002f44 <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f503 61a9 	add.w	r1, r3, #1352	@ 0x548
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80031ea:	461a      	mov	r2, r3
 80031ec:	f00a ff4a 	bl	800e084 <arm_mat_mult_f32>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <robot_pos_pid+0x2d0>
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <robot_pos_pid+0x2e0>)
 80031f8:	2204      	movs	r2, #4
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f001 fb2e 	bl	800485c <Error_Handler>
}
 8003200:	bf00      	nop
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40490fd8 	.word	0x40490fd8
 800320c:	3b03126f 	.word	0x3b03126f
 8003210:	24000a78 	.word	0x24000a78

08003214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	e060      	b.n	80032e2 <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	49bf      	ldr	r1, [pc, #764]	@ (8003524 <main+0x310>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2098      	movs	r0, #152	@ 0x98
 800322a:	fb00 f303 	mul.w	r3, r0, r3
 800322e:	440b      	add	r3, r1
 8003230:	3308      	adds	r3, #8
 8003232:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 8003234:	4abb      	ldr	r2, [pc, #748]	@ (8003524 <main+0x310>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2198      	movs	r1, #152	@ 0x98
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	330c      	adds	r3, #12
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 8003246:	4ab7      	ldr	r2, [pc, #732]	@ (8003524 <main+0x310>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2198      	movs	r1, #152	@ 0x98
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3314      	adds	r3, #20
 8003254:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003258:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 800325a:	4ab2      	ldr	r2, [pc, #712]	@ (8003524 <main+0x310>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2198      	movs	r1, #152	@ 0x98
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3318      	adds	r3, #24
 8003268:	4aaf      	ldr	r2, [pc, #700]	@ (8003528 <main+0x314>)
 800326a:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 800326c:	4aad      	ldr	r2, [pc, #692]	@ (8003524 <main+0x310>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2198      	movs	r1, #152	@ 0x98
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	331c      	adds	r3, #28
 800327a:	4aac      	ldr	r2, [pc, #688]	@ (800352c <main+0x318>)
 800327c:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 800327e:	2200      	movs	r2, #0
 8003280:	2108      	movs	r1, #8
 8003282:	2008      	movs	r0, #8
 8003284:	f008 fb31 	bl	800b8ea <xQueueGenericCreate>
 8003288:	4602      	mov	r2, r0
 800328a:	49a6      	ldr	r1, [pc, #664]	@ (8003524 <main+0x310>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2098      	movs	r0, #152	@ 0x98
 8003290:	fb00 f303 	mul.w	r3, r0, r3
 8003294:	440b      	add	r3, r1
 8003296:	3310      	adds	r3, #16
 8003298:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 800329a:	4aa2      	ldr	r2, [pc, #648]	@ (8003524 <main+0x310>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2198      	movs	r1, #152	@ 0x98
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3310      	adds	r3, #16
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d104      	bne.n	80032b8 <main+0xa4>
			sta = 3;
 80032ae:	4ba0      	ldr	r3, [pc, #640]	@ (8003530 <main+0x31c>)
 80032b0:	2203      	movs	r2, #3
 80032b2:	601a      	str	r2, [r3, #0]
			Error_Handler();
 80032b4:	f001 fad2 	bl	800485c <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 80032b8:	4a9a      	ldr	r2, [pc, #616]	@ (8003524 <main+0x310>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2198      	movs	r1, #152	@ 0x98
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	3394      	adds	r3, #148	@ 0x94
 80032c6:	4a9b      	ldr	r2, [pc, #620]	@ (8003534 <main+0x320>)
 80032c8:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 80032ca:	4a96      	ldr	r2, [pc, #600]	@ (8003524 <main+0x310>)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3301      	adds	r3, #1
 80032d0:	2198      	movs	r1, #152	@ 0x98
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	4a97      	ldr	r2, [pc, #604]	@ (8003538 <main+0x324>)
 80032da:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3301      	adds	r3, #1
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	dd9b      	ble.n	8003220 <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 80032e8:	4b94      	ldr	r3, [pc, #592]	@ (800353c <main+0x328>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	2103      	movs	r1, #3
 80032ee:	4894      	ldr	r0, [pc, #592]	@ (8003540 <main+0x32c>)
 80032f0:	f00b f86a 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 80032f4:	4b93      	ldr	r3, [pc, #588]	@ (8003544 <main+0x330>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	2103      	movs	r1, #3
 80032fa:	4893      	ldr	r0, [pc, #588]	@ (8003548 <main+0x334>)
 80032fc:	f00b f864 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 8003300:	4b92      	ldr	r3, [pc, #584]	@ (800354c <main+0x338>)
 8003302:	2201      	movs	r2, #1
 8003304:	2103      	movs	r1, #3
 8003306:	4892      	ldr	r0, [pc, #584]	@ (8003550 <main+0x33c>)
 8003308:	f00b f85e 	bl	800e3c8 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 800330c:	4b85      	ldr	r3, [pc, #532]	@ (8003524 <main+0x310>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 8003312:	4b84      	ldr	r3, [pc, #528]	@ (8003524 <main+0x310>)
 8003314:	2200      	movs	r2, #0
 8003316:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 8003318:	4b82      	ldr	r3, [pc, #520]	@ (8003524 <main+0x310>)
 800331a:	4a8e      	ldr	r2, [pc, #568]	@ (8003554 <main+0x340>)
 800331c:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 8003320:	4b80      	ldr	r3, [pc, #512]	@ (8003524 <main+0x310>)
 8003322:	4a8c      	ldr	r2, [pc, #560]	@ (8003554 <main+0x340>)
 8003324:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 8003328:	4b7e      	ldr	r3, [pc, #504]	@ (8003524 <main+0x310>)
 800332a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800332e:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi;
 8003332:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8003558 <main+0x344>
 8003336:	eef1 7a67 	vneg.f32	s15, s15
 800333a:	4b7a      	ldr	r3, [pc, #488]	@ (8003524 <main+0x310>)
 800333c:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi;
 8003340:	4a86      	ldr	r2, [pc, #536]	@ (800355c <main+0x348>)
 8003342:	4b78      	ldr	r3, [pc, #480]	@ (8003524 <main+0x310>)
 8003344:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 8003348:	4b76      	ldr	r3, [pc, #472]	@ (8003524 <main+0x310>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 8003352:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8003558 <main+0x344>
 8003356:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003560 <main+0x34c>
 800335a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800335e:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003564 <main+0x350>
 8003362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003366:	4b6f      	ldr	r3, [pc, #444]	@ (8003524 <main+0x310>)
 8003368:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 800336c:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8003558 <main+0x344>
 8003370:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003560 <main+0x34c>
 8003374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003378:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003568 <main+0x354>
 800337c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003380:	4b68      	ldr	r3, [pc, #416]	@ (8003524 <main+0x310>)
 8003382:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 8003386:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003558 <main+0x344>
 800338a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8003560 <main+0x34c>
 800338e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003392:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800356c <main+0x358>
 8003396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800339a:	4b62      	ldr	r3, [pc, #392]	@ (8003524 <main+0x310>)
 800339c:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 80033a0:	4b60      	ldr	r3, [pc, #384]	@ (8003524 <main+0x310>)
 80033a2:	4a73      	ldr	r2, [pc, #460]	@ (8003570 <main+0x35c>)
 80033a4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	strawberry_robot.l2 = 0.46;
 80033a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003524 <main+0x310>)
 80033aa:	4a72      	ldr	r2, [pc, #456]	@ (8003574 <main+0x360>)
 80033ac:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	strawberry_robot.l3 = 0.46;
 80033b0:	4b5c      	ldr	r3, [pc, #368]	@ (8003524 <main+0x310>)
 80033b2:	4a70      	ldr	r2, [pc, #448]	@ (8003574 <main+0x360>)
 80033b4:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

	// link mass setting
	strawberry_robot.m1 = 3.93949;
 80033b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003524 <main+0x310>)
 80033ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003578 <main+0x364>)
 80033bc:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
	strawberry_robot.m2 = 0;
 80033c0:	4b58      	ldr	r3, [pc, #352]	@ (8003524 <main+0x310>)
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
	strawberry_robot.m3 = 0;
 80033ca:	4b56      	ldr	r3, [pc, #344]	@ (8003524 <main+0x310>)
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300

	// link CoM position setting
	strawberry_robot.d2 = 0;
 80033d4:	4b53      	ldr	r3, [pc, #332]	@ (8003524 <main+0x310>)
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	strawberry_robot.d3 = 0;
 80033de:	4b51      	ldr	r3, [pc, #324]	@ (8003524 <main+0x310>)
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

	// link inertia setting
	strawberry_robot.J1 = 0;
 80033e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003524 <main+0x310>)
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	strawberry_robot.J2 = 0;
 80033f2:	4b4c      	ldr	r3, [pc, #304]	@ (8003524 <main+0x310>)
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	strawberry_robot.J3 = 0;
 80033fc:	4b49      	ldr	r3, [pc, #292]	@ (8003524 <main+0x310>)
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 8003406:	4b5d      	ldr	r3, [pc, #372]	@ (800357c <main+0x368>)
 8003408:	2201      	movs	r2, #1
 800340a:	2103      	movs	r1, #3
 800340c:	485c      	ldr	r0, [pc, #368]	@ (8003580 <main+0x36c>)
 800340e:	f00a ffdb 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 8003412:	4b5c      	ldr	r3, [pc, #368]	@ (8003584 <main+0x370>)
 8003414:	2201      	movs	r2, #1
 8003416:	2103      	movs	r1, #3
 8003418:	485b      	ldr	r0, [pc, #364]	@ (8003588 <main+0x374>)
 800341a:	f00a ffd5 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 800341e:	4b5b      	ldr	r3, [pc, #364]	@ (800358c <main+0x378>)
 8003420:	2201      	movs	r2, #1
 8003422:	2103      	movs	r1, #3
 8003424:	485a      	ldr	r0, [pc, #360]	@ (8003590 <main+0x37c>)
 8003426:	f00a ffcf 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 800342a:	4b5a      	ldr	r3, [pc, #360]	@ (8003594 <main+0x380>)
 800342c:	2201      	movs	r2, #1
 800342e:	2103      	movs	r1, #3
 8003430:	4859      	ldr	r0, [pc, #356]	@ (8003598 <main+0x384>)
 8003432:	f00a ffc9 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 8003436:	4b59      	ldr	r3, [pc, #356]	@ (800359c <main+0x388>)
 8003438:	2201      	movs	r2, #1
 800343a:	2103      	movs	r1, #3
 800343c:	4858      	ldr	r0, [pc, #352]	@ (80035a0 <main+0x38c>)
 800343e:	f00a ffc3 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 8003442:	4b58      	ldr	r3, [pc, #352]	@ (80035a4 <main+0x390>)
 8003444:	2201      	movs	r2, #1
 8003446:	2103      	movs	r1, #3
 8003448:	4857      	ldr	r0, [pc, #348]	@ (80035a8 <main+0x394>)
 800344a:	f00a ffbd 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 800344e:	4b57      	ldr	r3, [pc, #348]	@ (80035ac <main+0x398>)
 8003450:	2201      	movs	r2, #1
 8003452:	2103      	movs	r1, #3
 8003454:	4856      	ldr	r0, [pc, #344]	@ (80035b0 <main+0x39c>)
 8003456:	f00a ffb7 	bl	800e3c8 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 800345a:	4b56      	ldr	r3, [pc, #344]	@ (80035b4 <main+0x3a0>)
 800345c:	2201      	movs	r2, #1
 800345e:	2103      	movs	r1, #3
 8003460:	4855      	ldr	r0, [pc, #340]	@ (80035b8 <main+0x3a4>)
 8003462:	f00a ffb1 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 8003466:	4b55      	ldr	r3, [pc, #340]	@ (80035bc <main+0x3a8>)
 8003468:	2201      	movs	r2, #1
 800346a:	2103      	movs	r1, #3
 800346c:	4854      	ldr	r0, [pc, #336]	@ (80035c0 <main+0x3ac>)
 800346e:	f00a ffab 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 8003472:	4b54      	ldr	r3, [pc, #336]	@ (80035c4 <main+0x3b0>)
 8003474:	2201      	movs	r2, #1
 8003476:	2103      	movs	r1, #3
 8003478:	4853      	ldr	r0, [pc, #332]	@ (80035c8 <main+0x3b4>)
 800347a:	f00a ffa5 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 800347e:	4b53      	ldr	r3, [pc, #332]	@ (80035cc <main+0x3b8>)
 8003480:	2201      	movs	r2, #1
 8003482:	2103      	movs	r1, #3
 8003484:	4852      	ldr	r0, [pc, #328]	@ (80035d0 <main+0x3bc>)
 8003486:	f00a ff9f 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 800348a:	4b52      	ldr	r3, [pc, #328]	@ (80035d4 <main+0x3c0>)
 800348c:	2201      	movs	r2, #1
 800348e:	2103      	movs	r1, #3
 8003490:	4851      	ldr	r0, [pc, #324]	@ (80035d8 <main+0x3c4>)
 8003492:	f00a ff99 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 8003496:	4b51      	ldr	r3, [pc, #324]	@ (80035dc <main+0x3c8>)
 8003498:	2201      	movs	r2, #1
 800349a:	2103      	movs	r1, #3
 800349c:	4850      	ldr	r0, [pc, #320]	@ (80035e0 <main+0x3cc>)
 800349e:	f00a ff93 	bl	800e3c8 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 80034a2:	4b50      	ldr	r3, [pc, #320]	@ (80035e4 <main+0x3d0>)
 80034a4:	2203      	movs	r2, #3
 80034a6:	2103      	movs	r1, #3
 80034a8:	484f      	ldr	r0, [pc, #316]	@ (80035e8 <main+0x3d4>)
 80034aa:	f00a ff8d 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 80034ae:	4b4f      	ldr	r3, [pc, #316]	@ (80035ec <main+0x3d8>)
 80034b0:	2203      	movs	r2, #3
 80034b2:	2103      	movs	r1, #3
 80034b4:	484e      	ldr	r0, [pc, #312]	@ (80035f0 <main+0x3dc>)
 80034b6:	f00a ff87 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 80034ba:	4b4e      	ldr	r3, [pc, #312]	@ (80035f4 <main+0x3e0>)
 80034bc:	2203      	movs	r2, #3
 80034be:	2103      	movs	r1, #3
 80034c0:	484d      	ldr	r0, [pc, #308]	@ (80035f8 <main+0x3e4>)
 80034c2:	f00a ff81 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 80034c6:	4b4d      	ldr	r3, [pc, #308]	@ (80035fc <main+0x3e8>)
 80034c8:	2203      	movs	r2, #3
 80034ca:	2103      	movs	r1, #3
 80034cc:	484c      	ldr	r0, [pc, #304]	@ (8003600 <main+0x3ec>)
 80034ce:	f00a ff7b 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 80034d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003604 <main+0x3f0>)
 80034d4:	2203      	movs	r2, #3
 80034d6:	2103      	movs	r1, #3
 80034d8:	484b      	ldr	r0, [pc, #300]	@ (8003608 <main+0x3f4>)
 80034da:	f00a ff75 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 80034de:	4b4b      	ldr	r3, [pc, #300]	@ (800360c <main+0x3f8>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	2103      	movs	r1, #3
 80034e4:	484a      	ldr	r0, [pc, #296]	@ (8003610 <main+0x3fc>)
 80034e6:	f00a ff6f 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 80034ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003614 <main+0x400>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	2103      	movs	r1, #3
 80034f0:	4849      	ldr	r0, [pc, #292]	@ (8003618 <main+0x404>)
 80034f2:	f00a ff69 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 80034f6:	4b49      	ldr	r3, [pc, #292]	@ (800361c <main+0x408>)
 80034f8:	2203      	movs	r2, #3
 80034fa:	2103      	movs	r1, #3
 80034fc:	4848      	ldr	r0, [pc, #288]	@ (8003620 <main+0x40c>)
 80034fe:	f00a ff63 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 8003502:	4b48      	ldr	r3, [pc, #288]	@ (8003624 <main+0x410>)
 8003504:	2203      	movs	r2, #3
 8003506:	2103      	movs	r1, #3
 8003508:	4847      	ldr	r0, [pc, #284]	@ (8003628 <main+0x414>)
 800350a:	f00a ff5d 	bl	800e3c8 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 800350e:	4b47      	ldr	r3, [pc, #284]	@ (800362c <main+0x418>)
 8003510:	2201      	movs	r2, #1
 8003512:	2103      	movs	r1, #3
 8003514:	4846      	ldr	r0, [pc, #280]	@ (8003630 <main+0x41c>)
 8003516:	f00a ff57 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 800351a:	4b46      	ldr	r3, [pc, #280]	@ (8003634 <main+0x420>)
 800351c:	2201      	movs	r2, #1
 800351e:	2103      	movs	r1, #3
 8003520:	e08a      	b.n	8003638 <main+0x424>
 8003522:	bf00      	nop
 8003524:	2400040c 	.word	0x2400040c
 8003528:	41200000 	.word	0x41200000
 800352c:	3dfbe76d 	.word	0x3dfbe76d
 8003530:	24000a78 	.word	0x24000a78
 8003534:	40e66666 	.word	0x40e66666
 8003538:	c0e66666 	.word	0xc0e66666
 800353c:	24000000 	.word	0x24000000
 8003540:	240003e8 	.word	0x240003e8
 8003544:	2400000c 	.word	0x2400000c
 8003548:	240003f0 	.word	0x240003f0
 800354c:	24000018 	.word	0x24000018
 8003550:	240003f8 	.word	0x240003f8
 8003554:	bf800000 	.word	0xbf800000
 8003558:	40490fd8 	.word	0x40490fd8
 800355c:	40490fd8 	.word	0x40490fd8
 8003560:	43340000 	.word	0x43340000
 8003564:	42aa0000 	.word	0x42aa0000
 8003568:	c3200000 	.word	0xc3200000
 800356c:	c2200000 	.word	0xc2200000
 8003570:	3e343958 	.word	0x3e343958
 8003574:	3eeb851f 	.word	0x3eeb851f
 8003578:	407c209b 	.word	0x407c209b
 800357c:	240005f0 	.word	0x240005f0
 8003580:	240005e8 	.word	0x240005e8
 8003584:	2400061c 	.word	0x2400061c
 8003588:	24000614 	.word	0x24000614
 800358c:	24000630 	.word	0x24000630
 8003590:	24000628 	.word	0x24000628
 8003594:	24000644 	.word	0x24000644
 8003598:	2400063c 	.word	0x2400063c
 800359c:	24000658 	.word	0x24000658
 80035a0:	24000650 	.word	0x24000650
 80035a4:	2400066c 	.word	0x2400066c
 80035a8:	24000664 	.word	0x24000664
 80035ac:	24000680 	.word	0x24000680
 80035b0:	24000678 	.word	0x24000678
 80035b4:	24000694 	.word	0x24000694
 80035b8:	2400068c 	.word	0x2400068c
 80035bc:	240006a8 	.word	0x240006a8
 80035c0:	240006a0 	.word	0x240006a0
 80035c4:	240006bc 	.word	0x240006bc
 80035c8:	240006b4 	.word	0x240006b4
 80035cc:	240006d0 	.word	0x240006d0
 80035d0:	240006c8 	.word	0x240006c8
 80035d4:	240006e4 	.word	0x240006e4
 80035d8:	240006dc 	.word	0x240006dc
 80035dc:	240006f8 	.word	0x240006f8
 80035e0:	240006f0 	.word	0x240006f0
 80035e4:	24000738 	.word	0x24000738
 80035e8:	24000730 	.word	0x24000730
 80035ec:	24000764 	.word	0x24000764
 80035f0:	2400075c 	.word	0x2400075c
 80035f4:	24000790 	.word	0x24000790
 80035f8:	24000788 	.word	0x24000788
 80035fc:	240007bc 	.word	0x240007bc
 8003600:	240007b4 	.word	0x240007b4
 8003604:	240007e8 	.word	0x240007e8
 8003608:	240007e0 	.word	0x240007e0
 800360c:	24000814 	.word	0x24000814
 8003610:	2400080c 	.word	0x2400080c
 8003614:	24000828 	.word	0x24000828
 8003618:	24000820 	.word	0x24000820
 800361c:	2400083c 	.word	0x2400083c
 8003620:	24000834 	.word	0x24000834
 8003624:	24000868 	.word	0x24000868
 8003628:	24000860 	.word	0x24000860
 800362c:	240008d0 	.word	0x240008d0
 8003630:	240008c8 	.word	0x240008c8
 8003634:	240008e4 	.word	0x240008e4
 8003638:	4851      	ldr	r0, [pc, #324]	@ (8003780 <main+0x56c>)
 800363a:	f00a fec5 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 800363e:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <main+0x570>)
 8003640:	2201      	movs	r2, #1
 8003642:	2103      	movs	r1, #3
 8003644:	4850      	ldr	r0, [pc, #320]	@ (8003788 <main+0x574>)
 8003646:	f00a febf 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 800364a:	4b50      	ldr	r3, [pc, #320]	@ (800378c <main+0x578>)
 800364c:	2201      	movs	r2, #1
 800364e:	2103      	movs	r1, #3
 8003650:	484f      	ldr	r0, [pc, #316]	@ (8003790 <main+0x57c>)
 8003652:	f00a feb9 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 8003656:	4b4f      	ldr	r3, [pc, #316]	@ (8003794 <main+0x580>)
 8003658:	2201      	movs	r2, #1
 800365a:	2103      	movs	r1, #3
 800365c:	484e      	ldr	r0, [pc, #312]	@ (8003798 <main+0x584>)
 800365e:	f00a feb3 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 8003662:	4b4e      	ldr	r3, [pc, #312]	@ (800379c <main+0x588>)
 8003664:	2201      	movs	r2, #1
 8003666:	2103      	movs	r1, #3
 8003668:	484d      	ldr	r0, [pc, #308]	@ (80037a0 <main+0x58c>)
 800366a:	f00a fead 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 800366e:	4b4d      	ldr	r3, [pc, #308]	@ (80037a4 <main+0x590>)
 8003670:	2201      	movs	r2, #1
 8003672:	2103      	movs	r1, #3
 8003674:	484c      	ldr	r0, [pc, #304]	@ (80037a8 <main+0x594>)
 8003676:	f00a fea7 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 800367a:	4b4c      	ldr	r3, [pc, #304]	@ (80037ac <main+0x598>)
 800367c:	2201      	movs	r2, #1
 800367e:	2103      	movs	r1, #3
 8003680:	484b      	ldr	r0, [pc, #300]	@ (80037b0 <main+0x59c>)
 8003682:	f00a fea1 	bl	800e3c8 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 8003686:	4b4b      	ldr	r3, [pc, #300]	@ (80037b4 <main+0x5a0>)
 8003688:	2201      	movs	r2, #1
 800368a:	2103      	movs	r1, #3
 800368c:	484a      	ldr	r0, [pc, #296]	@ (80037b8 <main+0x5a4>)
 800368e:	f00a fe9b 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 8003692:	4b4a      	ldr	r3, [pc, #296]	@ (80037bc <main+0x5a8>)
 8003694:	2201      	movs	r2, #1
 8003696:	2103      	movs	r1, #3
 8003698:	4849      	ldr	r0, [pc, #292]	@ (80037c0 <main+0x5ac>)
 800369a:	f00a fe95 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 800369e:	4b49      	ldr	r3, [pc, #292]	@ (80037c4 <main+0x5b0>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	2103      	movs	r1, #3
 80036a4:	4848      	ldr	r0, [pc, #288]	@ (80037c8 <main+0x5b4>)
 80036a6:	f00a fe8f 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 80036aa:	4b48      	ldr	r3, [pc, #288]	@ (80037cc <main+0x5b8>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	2103      	movs	r1, #3
 80036b0:	4847      	ldr	r0, [pc, #284]	@ (80037d0 <main+0x5bc>)
 80036b2:	f00a fe89 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 80036b6:	4b47      	ldr	r3, [pc, #284]	@ (80037d4 <main+0x5c0>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	2103      	movs	r1, #3
 80036bc:	4846      	ldr	r0, [pc, #280]	@ (80037d8 <main+0x5c4>)
 80036be:	f00a fe83 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 80036c2:	4b46      	ldr	r3, [pc, #280]	@ (80037dc <main+0x5c8>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	2103      	movs	r1, #3
 80036c8:	4845      	ldr	r0, [pc, #276]	@ (80037e0 <main+0x5cc>)
 80036ca:	f00a fe7d 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 80036ce:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <main+0x5d0>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	2103      	movs	r1, #3
 80036d4:	4844      	ldr	r0, [pc, #272]	@ (80037e8 <main+0x5d4>)
 80036d6:	f00a fe77 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 80036da:	4b44      	ldr	r3, [pc, #272]	@ (80037ec <main+0x5d8>)
 80036dc:	2201      	movs	r2, #1
 80036de:	2103      	movs	r1, #3
 80036e0:	4843      	ldr	r0, [pc, #268]	@ (80037f0 <main+0x5dc>)
 80036e2:	f00a fe71 	bl	800e3c8 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 80036e6:	4b43      	ldr	r3, [pc, #268]	@ (80037f4 <main+0x5e0>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	2103      	movs	r1, #3
 80036ec:	4842      	ldr	r0, [pc, #264]	@ (80037f8 <main+0x5e4>)
 80036ee:	f00a fe6b 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 80036f2:	4b42      	ldr	r3, [pc, #264]	@ (80037fc <main+0x5e8>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	2103      	movs	r1, #3
 80036f8:	4841      	ldr	r0, [pc, #260]	@ (8003800 <main+0x5ec>)
 80036fa:	f00a fe65 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 80036fe:	4b41      	ldr	r3, [pc, #260]	@ (8003804 <main+0x5f0>)
 8003700:	2201      	movs	r2, #1
 8003702:	2103      	movs	r1, #3
 8003704:	4840      	ldr	r0, [pc, #256]	@ (8003808 <main+0x5f4>)
 8003706:	f00a fe5f 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 800370a:	4b40      	ldr	r3, [pc, #256]	@ (800380c <main+0x5f8>)
 800370c:	2201      	movs	r2, #1
 800370e:	2103      	movs	r1, #3
 8003710:	483f      	ldr	r0, [pc, #252]	@ (8003810 <main+0x5fc>)
 8003712:	f00a fe59 	bl	800e3c8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 8003716:	4b3f      	ldr	r3, [pc, #252]	@ (8003814 <main+0x600>)
 8003718:	2201      	movs	r2, #1
 800371a:	2103      	movs	r1, #3
 800371c:	483e      	ldr	r0, [pc, #248]	@ (8003818 <main+0x604>)
 800371e:	f00a fe53 	bl	800e3c8 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003722:	f001 f85d 	bl	80047e0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003726:	f001 fd9b 	bl	8005260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800372a:	f000 f883 	bl	8003834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800372e:	f000 f9ef 	bl	8003b10 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8003732:	f000 f8f9 	bl	8003928 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8003736:	f000 f99f 	bl	8003a78 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800373a:	f007 fe2b 	bl	800b394 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 800373e:	4a37      	ldr	r2, [pc, #220]	@ (800381c <main+0x608>)
 8003740:	2100      	movs	r1, #0
 8003742:	4837      	ldr	r0, [pc, #220]	@ (8003820 <main+0x60c>)
 8003744:	f007 fe70 	bl	800b428 <osThreadNew>
 8003748:	4603      	mov	r3, r0
 800374a:	4a36      	ldr	r2, [pc, #216]	@ (8003824 <main+0x610>)
 800374c:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 800374e:	4a36      	ldr	r2, [pc, #216]	@ (8003828 <main+0x614>)
 8003750:	2100      	movs	r1, #0
 8003752:	4836      	ldr	r0, [pc, #216]	@ (800382c <main+0x618>)
 8003754:	f007 fe68 	bl	800b428 <osThreadNew>
 8003758:	4603      	mov	r3, r0
 800375a:	4a35      	ldr	r2, [pc, #212]	@ (8003830 <main+0x61c>)
 800375c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800375e:	2000      	movs	r0, #0
 8003760:	f001 fc7c 	bl	800505c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003764:	2001      	movs	r0, #1
 8003766:	f001 fc79 	bl	800505c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800376a:	2002      	movs	r0, #2
 800376c:	f001 fc76 	bl	800505c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003770:	2101      	movs	r1, #1
 8003772:	2000      	movs	r0, #0
 8003774:	f001 fce8 	bl	8005148 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 8003778:	f007 fe30 	bl	800b3dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800377c:	bf00      	nop
 800377e:	e7fd      	b.n	800377c <main+0x568>
 8003780:	240008dc 	.word	0x240008dc
 8003784:	240008f8 	.word	0x240008f8
 8003788:	240008f0 	.word	0x240008f0
 800378c:	2400090c 	.word	0x2400090c
 8003790:	24000904 	.word	0x24000904
 8003794:	24000920 	.word	0x24000920
 8003798:	24000918 	.word	0x24000918
 800379c:	24000934 	.word	0x24000934
 80037a0:	2400092c 	.word	0x2400092c
 80037a4:	24000948 	.word	0x24000948
 80037a8:	24000940 	.word	0x24000940
 80037ac:	2400095c 	.word	0x2400095c
 80037b0:	24000954 	.word	0x24000954
 80037b4:	2400097c 	.word	0x2400097c
 80037b8:	24000974 	.word	0x24000974
 80037bc:	24000990 	.word	0x24000990
 80037c0:	24000988 	.word	0x24000988
 80037c4:	240009a4 	.word	0x240009a4
 80037c8:	2400099c 	.word	0x2400099c
 80037cc:	240009b8 	.word	0x240009b8
 80037d0:	240009b0 	.word	0x240009b0
 80037d4:	240009cc 	.word	0x240009cc
 80037d8:	240009c4 	.word	0x240009c4
 80037dc:	240009e0 	.word	0x240009e0
 80037e0:	240009d8 	.word	0x240009d8
 80037e4:	240009f4 	.word	0x240009f4
 80037e8:	240009ec 	.word	0x240009ec
 80037ec:	24000a08 	.word	0x24000a08
 80037f0:	24000a00 	.word	0x24000a00
 80037f4:	24000a1c 	.word	0x24000a1c
 80037f8:	24000a14 	.word	0x24000a14
 80037fc:	24000a30 	.word	0x24000a30
 8003800:	24000a28 	.word	0x24000a28
 8003804:	24000a44 	.word	0x24000a44
 8003808:	24000a3c 	.word	0x24000a3c
 800380c:	24000a58 	.word	0x24000a58
 8003810:	24000a50 	.word	0x24000a50
 8003814:	24000a6c 	.word	0x24000a6c
 8003818:	24000a64 	.word	0x24000a64
 800381c:	08011404 	.word	0x08011404
 8003820:	08003bf5 	.word	0x08003bf5
 8003824:	240003bc 	.word	0x240003bc
 8003828:	08011428 	.word	0x08011428
 800382c:	08004389 	.word	0x08004389
 8003830:	240003c0 	.word	0x240003c0

08003834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b09c      	sub	sp, #112	@ 0x70
 8003838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800383a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800383e:	224c      	movs	r2, #76	@ 0x4c
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f00b fc0c 	bl	800f060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003848:	1d3b      	adds	r3, r7, #4
 800384a:	2220      	movs	r2, #32
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f00b fc06 	bl	800f060 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003854:	2002      	movs	r0, #2
 8003856:	f003 fa99 	bl	8006d8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800385a:	2300      	movs	r3, #0
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	4b30      	ldr	r3, [pc, #192]	@ (8003920 <SystemClock_Config+0xec>)
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	4a2f      	ldr	r2, [pc, #188]	@ (8003920 <SystemClock_Config+0xec>)
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800386a:	4b2d      	ldr	r3, [pc, #180]	@ (8003920 <SystemClock_Config+0xec>)
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4b2b      	ldr	r3, [pc, #172]	@ (8003924 <SystemClock_Config+0xf0>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4a2a      	ldr	r2, [pc, #168]	@ (8003924 <SystemClock_Config+0xf0>)
 800387a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800387e:	6193      	str	r3, [r2, #24]
 8003880:	4b28      	ldr	r3, [pc, #160]	@ (8003924 <SystemClock_Config+0xf0>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800388c:	bf00      	nop
 800388e:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <SystemClock_Config+0xf0>)
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800389a:	d1f8      	bne.n	800388e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800389c:	2301      	movs	r3, #1
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a6:	2302      	movs	r3, #2
 80038a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038aa:	2302      	movs	r3, #2
 80038ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80038b2:	2364      	movs	r3, #100	@ 0x64
 80038b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80038b6:	2302      	movs	r3, #2
 80038b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 80038ba:	2310      	movs	r3, #16
 80038bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038be:	2302      	movs	r3, #2
 80038c0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80038c2:	230c      	movs	r3, #12
 80038c4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 fa94 	bl	8006e00 <HAL_RCC_OscConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80038de:	f000 ffbd 	bl	800485c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038e2:	233f      	movs	r3, #63	@ 0x3f
 80038e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038e6:	2303      	movs	r3, #3
 80038e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80038ee:	2308      	movs	r3, #8
 80038f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80038f2:	2340      	movs	r3, #64	@ 0x40
 80038f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80038f6:	2340      	movs	r3, #64	@ 0x40
 80038f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80038fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038fe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003900:	2340      	movs	r3, #64	@ 0x40
 8003902:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f003 fed3 	bl	80076b4 <HAL_RCC_ClockConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003914:	f000 ffa2 	bl	800485c <Error_Handler>
  }
}
 8003918:	bf00      	nop
 800391a:	3770      	adds	r7, #112	@ 0x70
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	58000400 	.word	0x58000400
 8003924:	58024800 	.word	0x58024800

08003928 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800392e:	4b4e      	ldr	r3, [pc, #312]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003930:	4a4e      	ldr	r2, [pc, #312]	@ (8003a6c <MX_FDCAN1_Init+0x144>)
 8003932:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003934:	4b4c      	ldr	r3, [pc, #304]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800393a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 800393c:	2200      	movs	r2, #0
 800393e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003940:	4b49      	ldr	r3, [pc, #292]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003942:	2201      	movs	r2, #1
 8003944:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003946:	4b48      	ldr	r3, [pc, #288]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003948:	2200      	movs	r2, #0
 800394a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800394c:	4b46      	ldr	r3, [pc, #280]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 800394e:	2200      	movs	r2, #0
 8003950:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003952:	4b45      	ldr	r3, [pc, #276]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003954:	2201      	movs	r2, #1
 8003956:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8003958:	4b43      	ldr	r3, [pc, #268]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 800395a:	2208      	movs	r2, #8
 800395c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 800395e:	4b42      	ldr	r3, [pc, #264]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003960:	221f      	movs	r2, #31
 8003962:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8003964:	4b40      	ldr	r3, [pc, #256]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003966:	2208      	movs	r2, #8
 8003968:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800396a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 800396c:	2201      	movs	r2, #1
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003970:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003972:	2204      	movs	r2, #4
 8003974:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003976:	4b3c      	ldr	r3, [pc, #240]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003978:	2205      	movs	r2, #5
 800397a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 800397c:	4b3a      	ldr	r3, [pc, #232]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 800397e:	2204      	movs	r2, #4
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003982:	4b39      	ldr	r3, [pc, #228]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003984:	2200      	movs	r2, #0
 8003986:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8003988:	4b37      	ldr	r3, [pc, #220]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 800398a:	2200      	movs	r2, #0
 800398c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800398e:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003990:	2200      	movs	r2, #0
 8003992:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003994:	4b34      	ldr	r3, [pc, #208]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003996:	2240      	movs	r2, #64	@ 0x40
 8003998:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800399a:	4b33      	ldr	r3, [pc, #204]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 800399c:	2204      	movs	r2, #4
 800399e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80039a0:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80039a6:	4b30      	ldr	r3, [pc, #192]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039a8:	2204      	movs	r2, #4
 80039aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 80039ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039ae:	2204      	movs	r2, #4
 80039b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80039b2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039b4:	2204      	movs	r2, #4
 80039b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039ba:	2210      	movs	r2, #16
 80039bc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 80039be:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039c0:	2210      	movs	r2, #16
 80039c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80039c4:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039c6:	2220      	movs	r2, #32
 80039c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80039ca:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80039d0:	4b25      	ldr	r3, [pc, #148]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039d2:	2204      	movs	r2, #4
 80039d4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80039d6:	4824      	ldr	r0, [pc, #144]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039d8:	f001 fe8a 	bl	80056f0 <HAL_FDCAN_Init>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80039e2:	f000 ff3b 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 80039e6:	2200      	movs	r2, #0
 80039e8:	2101      	movs	r1, #1
 80039ea:	481f      	ldr	r0, [pc, #124]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 80039ec:	f002 fa62 	bl	8005eb4 <HAL_FDCAN_ActivateNotification>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 80039f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <MX_FDCAN1_Init+0x148>)
 80039f8:	2203      	movs	r2, #3
 80039fa:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 80039fc:	f000 ff2e 	bl	800485c <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003a00:	4819      	ldr	r0, [pc, #100]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003a02:	f002 f853 	bl	8005aac <HAL_FDCAN_Start>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8003a0c:	4b18      	ldr	r3, [pc, #96]	@ (8003a70 <MX_FDCAN1_Init+0x148>)
 8003a0e:	2203      	movs	r2, #3
 8003a10:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003a12:	f000 ff23 	bl	800485c <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	e01d      	b.n	8003a58 <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003a1c:	4812      	ldr	r0, [pc, #72]	@ (8003a68 <MX_FDCAN1_Init+0x140>)
 8003a1e:	f002 fa37 	bl	8005e90 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d014      	beq.n	8003a52 <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8003a28:	4a12      	ldr	r2, [pc, #72]	@ (8003a74 <MX_FDCAN1_Init+0x14c>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2198      	movs	r1, #152	@ 0x98
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3308      	adds	r3, #8
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fd fa84 	bl	8000f48 <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 8003a40:	4a0c      	ldr	r2, [pc, #48]	@ (8003a74 <MX_FDCAN1_Init+0x14c>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2198      	movs	r1, #152	@ 0x98
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3301      	adds	r3, #1
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	ddde      	ble.n	8003a1c <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	24000288 	.word	0x24000288
 8003a6c:	4000a000 	.word	0x4000a000
 8003a70:	24000a78 	.word	0x24000a78
 8003a74:	2400040c 	.word	0x2400040c

08003a78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a7c:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003a7e:	4a23      	ldr	r2, [pc, #140]	@ (8003b0c <MX_USART3_UART_Init+0x94>)
 8003a80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a82:	4b21      	ldr	r3, [pc, #132]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003a84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a90:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a96:	4b1c      	ldr	r3, [pc, #112]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003a9e:	220c      	movs	r2, #12
 8003aa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa2:	4b19      	ldr	r3, [pc, #100]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa8:	4b17      	ldr	r3, [pc, #92]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aae:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ab4:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003aba:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ac0:	4811      	ldr	r0, [pc, #68]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003ac2:	f006 fab9 	bl	800a038 <HAL_UART_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003acc:	f000 fec6 	bl	800485c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	480d      	ldr	r0, [pc, #52]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003ad4:	f007 fb4f 	bl	800b176 <HAL_UARTEx_SetTxFifoThreshold>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003ade:	f000 febd 	bl	800485c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4808      	ldr	r0, [pc, #32]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003ae6:	f007 fb84 	bl	800b1f2 <HAL_UARTEx_SetRxFifoThreshold>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003af0:	f000 feb4 	bl	800485c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003af4:	4804      	ldr	r0, [pc, #16]	@ (8003b08 <MX_USART3_UART_Init+0x90>)
 8003af6:	f007 fb05 	bl	800b104 <HAL_UARTEx_DisableFifoMode>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003b00:	f000 feac 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	24000328 	.word	0x24000328
 8003b0c:	40004800 	.word	0x40004800

08003b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b16:	f107 0314 	add.w	r3, r7, #20
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	609a      	str	r2, [r3, #8]
 8003b22:	60da      	str	r2, [r3, #12]
 8003b24:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b26:	4b31      	ldr	r3, [pc, #196]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b36:	4b2d      	ldr	r3, [pc, #180]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b44:	4b29      	ldr	r3, [pc, #164]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b4a:	4a28      	ldr	r2, [pc, #160]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b54:	4b25      	ldr	r3, [pc, #148]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b62:	4b22      	ldr	r3, [pc, #136]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b68:	4a20      	ldr	r2, [pc, #128]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b6a:	f043 0308 	orr.w	r3, r3, #8
 8003b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b72:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b80:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b86:	4a19      	ldr	r2, [pc, #100]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b90:	4b16      	ldr	r3, [pc, #88]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b9e:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ba4:	4a11      	ldr	r2, [pc, #68]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003ba6:	f043 0310 	orr.w	r3, r3, #16
 8003baa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bae:	4b0f      	ldr	r3, [pc, #60]	@ (8003bec <MX_GPIO_Init+0xdc>)
 8003bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	603b      	str	r3, [r7, #0]
 8003bba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	480b      	ldr	r0, [pc, #44]	@ (8003bf0 <MX_GPIO_Init+0xe0>)
 8003bc2:	f003 f8af 	bl	8006d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4804      	ldr	r0, [pc, #16]	@ (8003bf0 <MX_GPIO_Init+0xe0>)
 8003bde:	f002 fef1 	bl	80069c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003be2:	bf00      	nop
 8003be4:	3728      	adds	r7, #40	@ 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	58021000 	.word	0x58021000

08003bf4 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	ed2d 8b02 	vpush	{d8}
 8003bfa:	b090      	sub	sp, #64	@ 0x40
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 8003c00:	f008 fe1c 	bl	800c83c <xTaskGetTickCount>
 8003c04:	4603      	mov	r3, r0
 8003c06:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8003c08:	2301      	movs	r3, #1
 8003c0a:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	69b9      	ldr	r1, [r7, #24]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f008 fc76 	bl	800c504 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 8003c18:	4b83      	ldr	r3, [pc, #524]	@ (8003e28 <ControlTask+0x234>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a83      	ldr	r2, [pc, #524]	@ (8003e2c <ControlTask+0x238>)
 8003c1e:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	005a      	lsls	r2, r3, #1
 8003c24:	4b80      	ldr	r3, [pc, #512]	@ (8003e28 <ControlTask+0x234>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4413      	add	r3, r2
 8003c2a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e28 <ControlTask+0x234>)
 8003c2c:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 8003c2e:	2101      	movs	r1, #1
 8003c30:	487f      	ldr	r0, [pc, #508]	@ (8003e30 <ControlTask+0x23c>)
 8003c32:	f003 f890 	bl	8006d56 <HAL_GPIO_TogglePin>

		// 6) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 8003c36:	4b7f      	ldr	r3, [pc, #508]	@ (8003e34 <ControlTask+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	f040 80eb 	bne.w	8003e16 <ControlTask+0x222>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 8003c40:	4b7c      	ldr	r3, [pc, #496]	@ (8003e34 <ControlTask+0x240>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d152      	bne.n	8003cee <ControlTask+0xfa>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4c:	e048      	b.n	8003ce0 <ControlTask+0xec>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8003c4e:	2180      	movs	r1, #128	@ 0x80
 8003c50:	4877      	ldr	r0, [pc, #476]	@ (8003e30 <ControlTask+0x23c>)
 8003c52:	f003 f880 	bl	8006d56 <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8003c56:	4a77      	ldr	r2, [pc, #476]	@ (8003e34 <ControlTask+0x240>)
 8003c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5a:	2198      	movs	r1, #152	@ 0x98
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	4413      	add	r3, r2
 8003c62:	338c      	adds	r3, #140	@ 0x8c
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003c6a:	4873      	ldr	r0, [pc, #460]	@ (8003e38 <ControlTask+0x244>)
 8003c6c:	f002 f910 	bl	8005e90 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <ControlTask+0xb0>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8003c76:	4a6f      	ldr	r2, [pc, #444]	@ (8003e34 <ControlTask+0x240>)
 8003c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7a:	2198      	movs	r1, #152	@ 0x98
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	3308      	adds	r3, #8
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	496a      	ldr	r1, [pc, #424]	@ (8003e34 <ControlTask+0x240>)
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8c:	2098      	movs	r0, #152	@ 0x98
 8003c8e:	fb00 f303 	mul.w	r3, r0, r3
 8003c92:	440b      	add	r3, r1
 8003c94:	338c      	adds	r3, #140	@ 0x8c
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f7fd f9ce 	bl	8001040 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003ca4:	4864      	ldr	r0, [pc, #400]	@ (8003e38 <ControlTask+0x244>)
 8003ca6:	f002 f8f3 	bl	8005e90 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d014      	beq.n	8003cda <ControlTask+0xe6>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8003cb0:	4a60      	ldr	r2, [pc, #384]	@ (8003e34 <ControlTask+0x240>)
 8003cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb4:	2198      	movs	r1, #152	@ 0x98
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fd f940 	bl	8000f48 <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 8003cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8003e34 <ControlTask+0x240>)
 8003cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ccc:	2198      	movs	r1, #152	@ 0x98
 8003cce:	fb01 f303 	mul.w	r3, r1, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cdc:	3301      	adds	r3, #1
 8003cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	ddb3      	ble.n	8003c4e <ControlTask+0x5a>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 8003ce6:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <ControlTask+0x240>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e78e      	b.n	8003c0c <ControlTask+0x18>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf2:	e00e      	b.n	8003d12 <ControlTask+0x11e>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	2298      	movs	r2, #152	@ 0x98
 8003cf8:	fb02 f303 	mul.w	r3, r2, r3
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	4a4d      	ldr	r2, [pc, #308]	@ (8003e34 <ControlTask+0x240>)
 8003d00:	4413      	add	r3, r2
 8003d02:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8003e3c <ControlTask+0x248>
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fd fabe 	bl	8001288 <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0e:	3301      	adds	r3, #1
 8003d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	dded      	ble.n	8003cf4 <ControlTask+0x100>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 8003d18:	4846      	ldr	r0, [pc, #280]	@ (8003e34 <ControlTask+0x240>)
 8003d1a:	f7fe ff21 	bl	8002b60 <robot_state_update>
				// 2. 로봇의 task space PID값 설정
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 8003d1e:	4b48      	ldr	r3, [pc, #288]	@ (8003e40 <ControlTask+0x24c>)
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	4b48      	ldr	r3, [pc, #288]	@ (8003e44 <ControlTask+0x250>)
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4b48      	ldr	r3, [pc, #288]	@ (8003e48 <ControlTask+0x254>)
 8003d28:	4a48      	ldr	r2, [pc, #288]	@ (8003e4c <ControlTask+0x258>)
 8003d2a:	4949      	ldr	r1, [pc, #292]	@ (8003e50 <ControlTask+0x25c>)
 8003d2c:	4841      	ldr	r0, [pc, #260]	@ (8003e34 <ControlTask+0x240>)
 8003d2e:	f7ff f8a9 	bl	8002e84 <robot_pos_pid_gain_setting>
				// 3. 로봇의 Control Input 계산
				target_posXYZ.pData[0] = homing_posXYZ.pData[0] + 0.2f * sinf(2.0f * pi * 5.0f * ((float32_t)ctrl_time_ms) / 1000.0f);
 8003d32:	4b48      	ldr	r3, [pc, #288]	@ (8003e54 <ControlTask+0x260>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	ed93 8a00 	vldr	s16, [r3]
 8003d3a:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8003e58 <ControlTask+0x264>
 8003d3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d42:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003d46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d4a:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <ControlTask+0x234>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5a:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8003e5c <ControlTask+0x268>
 8003d5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003d62:	eeb0 0a47 	vmov.f32	s0, s14
 8003d66:	f00d f8ef 	bl	8010f48 <sinf>
 8003d6a:	eef0 7a40 	vmov.f32	s15, s0
 8003d6e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8003e60 <ControlTask+0x26c>
 8003d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d76:	4b3b      	ldr	r3, [pc, #236]	@ (8003e64 <ControlTask+0x270>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003d7e:	edc3 7a00 	vstr	s15, [r3]
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 8003d82:	4b38      	ldr	r3, [pc, #224]	@ (8003e64 <ControlTask+0x270>)
 8003d84:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d88:	482a      	ldr	r0, [pc, #168]	@ (8003e34 <ControlTask+0x240>)
 8003d8a:	f7ff f8d1 	bl	8002f30 <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d92:	e03c      	b.n	8003e0e <ControlTask+0x21a>
				{
					// 4. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 8003d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d96:	2298      	movs	r2, #152	@ 0x98
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	4a25      	ldr	r2, [pc, #148]	@ (8003e34 <ControlTask+0x240>)
 8003da0:	1899      	adds	r1, r3, r2
 8003da2:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <ControlTask+0x240>)
 8003da4:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	ed93 7a00 	vldr	s14, [r3]
 8003db2:	4a20      	ldr	r2, [pc, #128]	@ (8003e34 <ControlTask+0x240>)
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	3374      	adds	r3, #116	@ 0x74
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	edd3 7a00 	vldr	s15, [r3]
 8003dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc8:	4608      	mov	r0, r1
 8003dca:	f7fd fb01 	bl	80013d0 <motor_feedforward_torque>
					// 5. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003dce:	481a      	ldr	r0, [pc, #104]	@ (8003e38 <ControlTask+0x244>)
 8003dd0:	f002 f85e 	bl	8005e90 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d016      	beq.n	8003e08 <ControlTask+0x214>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8003dda:	4a16      	ldr	r2, [pc, #88]	@ (8003e34 <ControlTask+0x240>)
 8003ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dde:	2198      	movs	r1, #152	@ 0x98
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3308      	adds	r3, #8
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	4911      	ldr	r1, [pc, #68]	@ (8003e34 <ControlTask+0x240>)
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	2098      	movs	r0, #152	@ 0x98
 8003df2:	fb00 f303 	mul.w	r3, r0, r3
 8003df6:	440b      	add	r3, r1
 8003df8:	338c      	adds	r3, #140	@ 0x8c
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
 8003dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8003e02:	4610      	mov	r0, r2
 8003e04:	f7fd f91c 	bl	8001040 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	ddbf      	ble.n	8003d94 <ControlTask+0x1a0>
 8003e14:	e6fa      	b.n	8003c0c <ControlTask+0x18>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 8003e16:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <ControlTask+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	f47f aef6 	bne.w	8003c0c <ControlTask+0x18>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003e20:	2300      	movs	r3, #0
 8003e22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e24:	e1ed      	b.n	8004202 <ControlTask+0x60e>
 8003e26:	bf00      	nop
 8003e28:	240003c4 	.word	0x240003c4
 8003e2c:	240003c8 	.word	0x240003c8
 8003e30:	58020400 	.word	0x58020400
 8003e34:	2400040c 	.word	0x2400040c
 8003e38:	24000288 	.word	0x24000288
 8003e3c:	428c0000 	.word	0x428c0000
 8003e40:	24000048 	.word	0x24000048
 8003e44:	24000400 	.word	0x24000400
 8003e48:	24000030 	.word	0x24000030
 8003e4c:	2400003c 	.word	0x2400003c
 8003e50:	24000024 	.word	0x24000024
 8003e54:	240003f0 	.word	0x240003f0
 8003e58:	40490fd8 	.word	0x40490fd8
 8003e5c:	447a0000 	.word	0x447a0000
 8003e60:	3e4ccccd 	.word	0x3e4ccccd
 8003e64:	240003f8 	.word	0x240003f8
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8003e68:	2180      	movs	r1, #128	@ 0x80
 8003e6a:	48bf      	ldr	r0, [pc, #764]	@ (8004168 <ControlTask+0x574>)
 8003e6c:	f002 ff73 	bl	8006d56 <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 8003e70:	4bbe      	ldr	r3, [pc, #760]	@ (800416c <ControlTask+0x578>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8003e76:	4bbe      	ldr	r3, [pc, #760]	@ (8004170 <ControlTask+0x57c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003e7c:	48bd      	ldr	r0, [pc, #756]	@ (8004174 <ControlTask+0x580>)
 8003e7e:	f002 f807 	bl	8005e90 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00b      	beq.n	8003ea0 <ControlTask+0x2ac>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8003e88:	4abb      	ldr	r2, [pc, #748]	@ (8004178 <ControlTask+0x584>)
 8003e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8c:	2198      	movs	r1, #152	@ 0x98
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3308      	adds	r3, #8
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc ffc0 	bl	8000e20 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 8003ea0:	bf00      	nop
 8003ea2:	4ab5      	ldr	r2, [pc, #724]	@ (8004178 <ControlTask+0x584>)
 8003ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea6:	2198      	movs	r1, #152	@ 0x98
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	4413      	add	r3, r2
 8003eae:	3310      	adds	r3, #16
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f107 010c 	add.w	r1, r7, #12
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f007 ff15 	bl	800bce8 <xQueueReceive>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d0ee      	beq.n	8003ea2 <ControlTask+0x2ae>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003ec4:	48ab      	ldr	r0, [pc, #684]	@ (8004174 <ControlTask+0x580>)
 8003ec6:	f001 ffe3 	bl	8005e90 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d014      	beq.n	8003efa <ControlTask+0x306>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 8003ed0:	4aa9      	ldr	r2, [pc, #676]	@ (8004178 <ControlTask+0x584>)
 8003ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed4:	2198      	movs	r1, #152	@ 0x98
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	3308      	adds	r3, #8
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc ffe6 	bl	8000eb4 <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 8003ee8:	4aa3      	ldr	r2, [pc, #652]	@ (8004178 <ControlTask+0x584>)
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	2198      	movs	r1, #152	@ 0x98
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8003efa:	4a9f      	ldr	r2, [pc, #636]	@ (8004178 <ControlTask+0x584>)
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	2198      	movs	r1, #152	@ 0x98
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	338c      	adds	r3, #140	@ 0x8c
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 8003f0e:	4a9a      	ldr	r2, [pc, #616]	@ (8004178 <ControlTask+0x584>)
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	2198      	movs	r1, #152	@ 0x98
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3390      	adds	r3, #144	@ 0x90
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 8003f22:	4a95      	ldr	r2, [pc, #596]	@ (8004178 <ControlTask+0x584>)
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	3301      	adds	r3, #1
 8003f28:	2198      	movs	r1, #152	@ 0x98
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	3304      	adds	r3, #4
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 8003f38:	4a8f      	ldr	r2, [pc, #572]	@ (8004178 <ControlTask+0x584>)
 8003f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f3c:	2198      	movs	r1, #152	@ 0x98
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	332c      	adds	r3, #44	@ 0x2c
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 8003f4c:	4a8a      	ldr	r2, [pc, #552]	@ (8004178 <ControlTask+0x584>)
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	2198      	movs	r1, #152	@ 0x98
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	332c      	adds	r3, #44	@ 0x2c
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4986      	ldr	r1, [pc, #536]	@ (8004178 <ControlTask+0x584>)
 8003f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f60:	2098      	movs	r0, #152	@ 0x98
 8003f62:	fb00 f303 	mul.w	r3, r0, r3
 8003f66:	440b      	add	r3, r1
 8003f68:	3330      	adds	r3, #48	@ 0x30
 8003f6a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 8003f6c:	4a82      	ldr	r2, [pc, #520]	@ (8004178 <ControlTask+0x584>)
 8003f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f70:	2198      	movs	r1, #152	@ 0x98
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	4413      	add	r3, r2
 8003f78:	3334      	adds	r3, #52	@ 0x34
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 8003f80:	4a7d      	ldr	r2, [pc, #500]	@ (8004178 <ControlTask+0x584>)
 8003f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f84:	2198      	movs	r1, #152	@ 0x98
 8003f86:	fb01 f303 	mul.w	r3, r1, r3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3334      	adds	r3, #52	@ 0x34
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4979      	ldr	r1, [pc, #484]	@ (8004178 <ControlTask+0x584>)
 8003f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f94:	2098      	movs	r0, #152	@ 0x98
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3338      	adds	r3, #56	@ 0x38
 8003f9e:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 8003fa0:	4a76      	ldr	r2, [pc, #472]	@ (800417c <ControlTask+0x588>)
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4973      	ldr	r1, [pc, #460]	@ (8004178 <ControlTask+0x584>)
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	2098      	movs	r0, #152	@ 0x98
 8003fb0:	fb00 f303 	mul.w	r3, r0, r3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3324      	adds	r3, #36	@ 0x24
 8003fb8:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 8003fba:	4a71      	ldr	r2, [pc, #452]	@ (8004180 <ControlTask+0x58c>)
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	496c      	ldr	r1, [pc, #432]	@ (8004178 <ControlTask+0x584>)
 8003fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc8:	2098      	movs	r0, #152	@ 0x98
 8003fca:	fb00 f303 	mul.w	r3, r0, r3
 8003fce:	440b      	add	r3, r1
 8003fd0:	3328      	adds	r3, #40	@ 0x28
 8003fd2:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 8003fd4:	4a68      	ldr	r2, [pc, #416]	@ (8004178 <ControlTask+0x584>)
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	2198      	movs	r1, #152	@ 0x98
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	3324      	adds	r3, #36	@ 0x24
 8003fe2:	ed93 7a00 	vldr	s14, [r3]
 8003fe6:	4a64      	ldr	r2, [pc, #400]	@ (8004178 <ControlTask+0x584>)
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	2198      	movs	r1, #152	@ 0x98
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	332c      	adds	r3, #44	@ 0x2c
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8004178 <ControlTask+0x584>)
 8003ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004000:	2198      	movs	r1, #152	@ 0x98
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	4413      	add	r3, r2
 8004008:	3344      	adds	r3, #68	@ 0x44
 800400a:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 800400e:	4a5a      	ldr	r2, [pc, #360]	@ (8004178 <ControlTask+0x584>)
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	2198      	movs	r1, #152	@ 0x98
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	4413      	add	r3, r2
 800401a:	3344      	adds	r3, #68	@ 0x44
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4956      	ldr	r1, [pc, #344]	@ (8004178 <ControlTask+0x584>)
 8004020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004022:	2098      	movs	r0, #152	@ 0x98
 8004024:	fb00 f303 	mul.w	r3, r0, r3
 8004028:	440b      	add	r3, r1
 800402a:	3348      	adds	r3, #72	@ 0x48
 800402c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 800402e:	4a52      	ldr	r2, [pc, #328]	@ (8004178 <ControlTask+0x584>)
 8004030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004032:	2198      	movs	r1, #152	@ 0x98
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	334c      	adds	r3, #76	@ 0x4c
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 8004042:	4a4d      	ldr	r2, [pc, #308]	@ (8004178 <ControlTask+0x584>)
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	2198      	movs	r1, #152	@ 0x98
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3350      	adds	r3, #80	@ 0x50
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = strawberry_robot.motors[i].pos_I_term_old;
 8004056:	4a48      	ldr	r2, [pc, #288]	@ (8004178 <ControlTask+0x584>)
 8004058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405a:	2198      	movs	r1, #152	@ 0x98
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	3354      	adds	r3, #84	@ 0x54
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4944      	ldr	r1, [pc, #272]	@ (8004178 <ControlTask+0x584>)
 8004068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406a:	2098      	movs	r0, #152	@ 0x98
 800406c:	fb00 f303 	mul.w	r3, r0, r3
 8004070:	440b      	add	r3, r1
 8004072:	3350      	adds	r3, #80	@ 0x50
 8004074:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8004076:	4a40      	ldr	r2, [pc, #256]	@ (8004178 <ControlTask+0x584>)
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	2198      	movs	r1, #152	@ 0x98
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	3358      	adds	r3, #88	@ 0x58
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = strawberry_robot.motors[i].pos_D_term_old;
 800408a:	4a3b      	ldr	r2, [pc, #236]	@ (8004178 <ControlTask+0x584>)
 800408c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408e:	2198      	movs	r1, #152	@ 0x98
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	4413      	add	r3, r2
 8004096:	335c      	adds	r3, #92	@ 0x5c
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4937      	ldr	r1, [pc, #220]	@ (8004178 <ControlTask+0x584>)
 800409c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409e:	2098      	movs	r0, #152	@ 0x98
 80040a0:	fb00 f303 	mul.w	r3, r0, r3
 80040a4:	440b      	add	r3, r1
 80040a6:	3358      	adds	r3, #88	@ 0x58
 80040a8:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 80040aa:	4a33      	ldr	r2, [pc, #204]	@ (8004178 <ControlTask+0x584>)
 80040ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ae:	2198      	movs	r1, #152	@ 0x98
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	4413      	add	r3, r2
 80040b6:	3328      	adds	r3, #40	@ 0x28
 80040b8:	ed93 7a00 	vldr	s14, [r3]
 80040bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004178 <ControlTask+0x584>)
 80040be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c0:	2198      	movs	r1, #152	@ 0x98
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3334      	adds	r3, #52	@ 0x34
 80040ca:	edd3 7a00 	vldr	s15, [r3]
 80040ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d2:	4a29      	ldr	r2, [pc, #164]	@ (8004178 <ControlTask+0x584>)
 80040d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d6:	2198      	movs	r1, #152	@ 0x98
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	3360      	adds	r3, #96	@ 0x60
 80040e0:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 80040e4:	4a24      	ldr	r2, [pc, #144]	@ (8004178 <ControlTask+0x584>)
 80040e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e8:	2198      	movs	r1, #152	@ 0x98
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	3360      	adds	r3, #96	@ 0x60
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4920      	ldr	r1, [pc, #128]	@ (8004178 <ControlTask+0x584>)
 80040f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f8:	2098      	movs	r0, #152	@ 0x98
 80040fa:	fb00 f303 	mul.w	r3, r0, r3
 80040fe:	440b      	add	r3, r1
 8004100:	3364      	adds	r3, #100	@ 0x64
 8004102:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 8004104:	4a1c      	ldr	r2, [pc, #112]	@ (8004178 <ControlTask+0x584>)
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	2198      	movs	r1, #152	@ 0x98
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3368      	adds	r3, #104	@ 0x68
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 8004118:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <ControlTask+0x584>)
 800411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411c:	2198      	movs	r1, #152	@ 0x98
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	336c      	adds	r3, #108	@ 0x6c
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 800412c:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <ControlTask+0x584>)
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	2198      	movs	r1, #152	@ 0x98
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	4413      	add	r3, r2
 8004138:	336c      	adds	r3, #108	@ 0x6c
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	490e      	ldr	r1, [pc, #56]	@ (8004178 <ControlTask+0x584>)
 800413e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004140:	2098      	movs	r0, #152	@ 0x98
 8004142:	fb00 f303 	mul.w	r3, r0, r3
 8004146:	440b      	add	r3, r1
 8004148:	3370      	adds	r3, #112	@ 0x70
 800414a:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 800414c:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <ControlTask+0x584>)
 800414e:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <ControlTask+0x584>)
 8004160:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8004164:	e00e      	b.n	8004184 <ControlTask+0x590>
 8004166:	bf00      	nop
 8004168:	58020400 	.word	0x58020400
 800416c:	240003c4 	.word	0x240003c4
 8004170:	240003c8 	.word	0x240003c8
 8004174:	24000288 	.word	0x24000288
 8004178:	2400040c 	.word	0x2400040c
 800417c:	240003d0 	.word	0x240003d0
 8004180:	240003dc 	.word	0x240003dc
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ControlTask+0x78c>)
 8004192:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 80041a2:	4b77      	ldr	r3, [pc, #476]	@ (8004380 <ControlTask+0x78c>)
 80041a4:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 80041a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 80041b4:	4b72      	ldr	r3, [pc, #456]	@ (8004380 <ControlTask+0x78c>)
 80041b6:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 80041c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004380 <ControlTask+0x78c>)
 80041c8:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ControlTask+0x78c>)
 80041da:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80041de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 80041ea:	4b65      	ldr	r3, [pc, #404]	@ (8004380 <ControlTask+0x78c>)
 80041ec:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	3301      	adds	r3, #1
 8004200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004204:	2b02      	cmp	r3, #2
 8004206:	f77f ae2f 	ble.w	8003e68 <ControlTask+0x274>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 800420a:	2300      	movs	r3, #0
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
 800420e:	e060      	b.n	80042d2 <ControlTask+0x6de>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = target_posXYZ.pData[i];
 8004210:	4b5c      	ldr	r3, [pc, #368]	@ (8004384 <ControlTask+0x790>)
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	4b59      	ldr	r3, [pc, #356]	@ (8004380 <ControlTask+0x78c>)
 800421c:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 800422a:	4b55      	ldr	r3, [pc, #340]	@ (8004380 <ControlTask+0x78c>)
 800422c:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 800423c:	4b50      	ldr	r3, [pc, #320]	@ (8004380 <ControlTask+0x78c>)
 800423e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 800424e:	4b4c      	ldr	r3, [pc, #304]	@ (8004380 <ControlTask+0x78c>)
 8004250:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 8004260:	4b47      	ldr	r3, [pc, #284]	@ (8004380 <ControlTask+0x78c>)
 8004262:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 8004272:	4b43      	ldr	r3, [pc, #268]	@ (8004380 <ControlTask+0x78c>)
 8004274:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 8004284:	4b3e      	ldr	r3, [pc, #248]	@ (8004380 <ControlTask+0x78c>)
 8004286:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 8004296:	4b3a      	ldr	r3, [pc, #232]	@ (8004380 <ControlTask+0x78c>)
 8004298:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 80042a8:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <ControlTask+0x78c>)
 80042aa:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 80042ba:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <ControlTask+0x78c>)
 80042bc:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	3301      	adds	r3, #1
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	dd9b      	ble.n	8004210 <ControlTask+0x61c>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 80042d8:	2300      	movs	r3, #0
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	e00b      	b.n	80042f6 <ControlTask+0x702>
 80042de:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <ControlTask+0x78c>)
 80042e0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	3301      	adds	r3, #1
 80042f4:	623b      	str	r3, [r7, #32]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	ddf0      	ble.n	80042de <ControlTask+0x6ea>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 80042fc:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <ControlTask+0x78c>)
 80042fe:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8004302:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004306:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 8004308:	4b1d      	ldr	r3, [pc, #116]	@ (8004380 <ControlTask+0x78c>)
 800430a:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 800430e:	3310      	adds	r3, #16
 8004310:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004314:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 8004316:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <ControlTask+0x78c>)
 8004318:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 800431c:	3320      	adds	r3, #32
 800431e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004322:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e00b      	b.n	8004342 <ControlTask+0x74e>
 800432a:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <ControlTask+0x78c>)
 800432c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	3301      	adds	r3, #1
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b08      	cmp	r3, #8
 8004346:	ddf0      	ble.n	800432a <ControlTask+0x736>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 8004348:	4b0d      	ldr	r3, [pc, #52]	@ (8004380 <ControlTask+0x78c>)
 800434a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800434e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004352:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 8004354:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <ControlTask+0x78c>)
 8004356:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800435a:	3310      	adds	r3, #16
 800435c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004360:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 8004362:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ControlTask+0x78c>)
 8004364:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004368:	3320      	adds	r3, #32
 800436a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800436e:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 8004370:	4803      	ldr	r0, [pc, #12]	@ (8004380 <ControlTask+0x78c>)
 8004372:	f7fe fbf5 	bl	8002b60 <robot_state_update>
				// 15. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 8004376:	4b02      	ldr	r3, [pc, #8]	@ (8004380 <ControlTask+0x78c>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 800437c:	e446      	b.n	8003c0c <ControlTask+0x18>
 800437e:	bf00      	nop
 8004380:	2400040c 	.word	0x2400040c
 8004384:	240003f8 	.word	0x240003f8

08004388 <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af04      	add	r7, sp, #16
 800438e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 8004390:	f008 fa54 	bl	800c83c <xTaskGetTickCount>
 8004394:	4603      	mov	r3, r0
 8004396:	60bb      	str	r3, [r7, #8]

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8004398:	2301      	movs	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 800439c:	f107 0308 	add.w	r3, r7, #8
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f008 f8ae 	bl	800c504 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	005a      	lsls	r2, r3, #1
 80043ac:	4b93      	ldr	r3, [pc, #588]	@ (80045fc <DataLoggingTask+0x274>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	4a92      	ldr	r2, [pc, #584]	@ (80045fc <DataLoggingTask+0x274>)
 80043b4:	6013      	str	r3, [r2, #0]

			// 5) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 80043b6:	4b92      	ldr	r3, [pc, #584]	@ (8004600 <DataLoggingTask+0x278>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	f040 8132 	bne.w	8004624 <DataLoggingTask+0x29c>
			{
				printf("[");
 80043c0:	205b      	movs	r0, #91	@ 0x5b
 80043c2:	f00a fd0f 	bl	800ede4 <putchar>
				printf("%8.3f, %8.3f, %8d, ", (float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode);
 80043c6:	4b8f      	ldr	r3, [pc, #572]	@ (8004604 <DataLoggingTask+0x27c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043d2:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8004608 <DataLoggingTask+0x280>
 80043d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043da:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80043de:	4b89      	ldr	r3, [pc, #548]	@ (8004604 <DataLoggingTask+0x27c>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b8a      	ldr	r3, [pc, #552]	@ (800460c <DataLoggingTask+0x284>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	ee07 3a90 	vmov	s15, r3
 80043ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043f0:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8004608 <DataLoggingTask+0x280>
 80043f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80043fc:	4b80      	ldr	r3, [pc, #512]	@ (8004600 <DataLoggingTask+0x278>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	9302      	str	r3, [sp, #8]
 8004402:	ed8d 7b00 	vstr	d7, [sp]
 8004406:	ec53 2b15 	vmov	r2, r3, d5
 800440a:	4881      	ldr	r0, [pc, #516]	@ (8004610 <DataLoggingTask+0x288>)
 800440c:	f00a fcd8 	bl	800edc0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[0].id, strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input);
 8004410:	4b7b      	ldr	r3, [pc, #492]	@ (8004600 <DataLoggingTask+0x278>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a7a      	ldr	r2, [pc, #488]	@ (8004600 <DataLoggingTask+0x278>)
 8004416:	68d2      	ldr	r2, [r2, #12]
 8004418:	4979      	ldr	r1, [pc, #484]	@ (8004600 <DataLoggingTask+0x278>)
 800441a:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
 800441e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004422:	ed8d 7b00 	vstr	d7, [sp]
 8004426:	4619      	mov	r1, r3
 8004428:	487a      	ldr	r0, [pc, #488]	@ (8004614 <DataLoggingTask+0x28c>)
 800442a:	f00a fcc9 	bl	800edc0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[1].id, strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input);
 800442e:	4b74      	ldr	r3, [pc, #464]	@ (8004600 <DataLoggingTask+0x278>)
 8004430:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004434:	4a72      	ldr	r2, [pc, #456]	@ (8004600 <DataLoggingTask+0x278>)
 8004436:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 800443a:	4971      	ldr	r1, [pc, #452]	@ (8004600 <DataLoggingTask+0x278>)
 800443c:	edd1 7a49 	vldr	s15, [r1, #292]	@ 0x124
 8004440:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004444:	ed8d 7b00 	vstr	d7, [sp]
 8004448:	4619      	mov	r1, r3
 800444a:	4872      	ldr	r0, [pc, #456]	@ (8004614 <DataLoggingTask+0x28c>)
 800444c:	f00a fcb8 	bl	800edc0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[2].id, strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input);
 8004450:	4b6b      	ldr	r3, [pc, #428]	@ (8004600 <DataLoggingTask+0x278>)
 8004452:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8004456:	4a6a      	ldr	r2, [pc, #424]	@ (8004600 <DataLoggingTask+0x278>)
 8004458:	f8d2 213c 	ldr.w	r2, [r2, #316]	@ 0x13c
 800445c:	4968      	ldr	r1, [pc, #416]	@ (8004600 <DataLoggingTask+0x278>)
 800445e:	edd1 7a6f 	vldr	s15, [r1, #444]	@ 0x1bc
 8004462:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004466:	ed8d 7b00 	vstr	d7, [sp]
 800446a:	4619      	mov	r1, r3
 800446c:	4869      	ldr	r0, [pc, #420]	@ (8004614 <DataLoggingTask+0x28c>)
 800446e:	f00a fca7 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2]);
 8004472:	4b63      	ldr	r3, [pc, #396]	@ (8004600 <DataLoggingTask+0x278>)
 8004474:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004478:	edd3 7a00 	vldr	s15, [r3]
 800447c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004480:	4b5f      	ldr	r3, [pc, #380]	@ (8004600 <DataLoggingTask+0x278>)
 8004482:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004486:	3304      	adds	r3, #4
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004490:	4b5b      	ldr	r3, [pc, #364]	@ (8004600 <DataLoggingTask+0x278>)
 8004492:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004496:	3308      	adds	r3, #8
 8004498:	edd3 6a00 	vldr	s13, [r3]
 800449c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80044a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80044a4:	ed8d 7b00 	vstr	d7, [sp]
 80044a8:	ec53 2b15 	vmov	r2, r3, d5
 80044ac:	485a      	ldr	r0, [pc, #360]	@ (8004618 <DataLoggingTask+0x290>)
 80044ae:	f00a fc87 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2]);
 80044b2:	4b53      	ldr	r3, [pc, #332]	@ (8004600 <DataLoggingTask+0x278>)
 80044b4:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 80044b8:	edd3 7a00 	vldr	s15, [r3]
 80044bc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80044c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004600 <DataLoggingTask+0x278>)
 80044c2:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 80044c6:	3304      	adds	r3, #4
 80044c8:	edd3 7a00 	vldr	s15, [r3]
 80044cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044d0:	4b4b      	ldr	r3, [pc, #300]	@ (8004600 <DataLoggingTask+0x278>)
 80044d2:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 80044d6:	3308      	adds	r3, #8
 80044d8:	edd3 6a00 	vldr	s13, [r3]
 80044dc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80044e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80044e4:	ed8d 7b00 	vstr	d7, [sp]
 80044e8:	ec53 2b15 	vmov	r2, r3, d5
 80044ec:	484a      	ldr	r0, [pc, #296]	@ (8004618 <DataLoggingTask+0x290>)
 80044ee:	f00a fc67 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2]);
 80044f2:	4b43      	ldr	r3, [pc, #268]	@ (8004600 <DataLoggingTask+0x278>)
 80044f4:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80044f8:	edd3 7a00 	vldr	s15, [r3]
 80044fc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004500:	4b3f      	ldr	r3, [pc, #252]	@ (8004600 <DataLoggingTask+0x278>)
 8004502:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8004506:	3304      	adds	r3, #4
 8004508:	edd3 7a00 	vldr	s15, [r3]
 800450c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004510:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <DataLoggingTask+0x278>)
 8004512:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8004516:	3308      	adds	r3, #8
 8004518:	edd3 6a00 	vldr	s13, [r3]
 800451c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004520:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004524:	ed8d 7b00 	vstr	d7, [sp]
 8004528:	ec53 2b15 	vmov	r2, r3, d5
 800452c:	483a      	ldr	r0, [pc, #232]	@ (8004618 <DataLoggingTask+0x290>)
 800452e:	f00a fc47 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.velXYZ.pData[0], strawberry_robot.velXYZ.pData[1], strawberry_robot.velXYZ.pData[2]);
 8004532:	4b33      	ldr	r3, [pc, #204]	@ (8004600 <DataLoggingTask+0x278>)
 8004534:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004538:	edd3 7a00 	vldr	s15, [r3]
 800453c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004540:	4b2f      	ldr	r3, [pc, #188]	@ (8004600 <DataLoggingTask+0x278>)
 8004542:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004546:	3304      	adds	r3, #4
 8004548:	edd3 7a00 	vldr	s15, [r3]
 800454c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004550:	4b2b      	ldr	r3, [pc, #172]	@ (8004600 <DataLoggingTask+0x278>)
 8004552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004556:	3308      	adds	r3, #8
 8004558:	edd3 6a00 	vldr	s13, [r3]
 800455c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004560:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004564:	ed8d 7b00 	vstr	d7, [sp]
 8004568:	ec53 2b15 	vmov	r2, r3, d5
 800456c:	482a      	ldr	r0, [pc, #168]	@ (8004618 <DataLoggingTask+0x290>)
 800456e:	f00a fc27 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8004572:	4b23      	ldr	r3, [pc, #140]	@ (8004600 <DataLoggingTask+0x278>)
 8004574:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004580:	4b1f      	ldr	r3, [pc, #124]	@ (8004600 <DataLoggingTask+0x278>)
 8004582:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004586:	3304      	adds	r3, #4
 8004588:	edd3 7a00 	vldr	s15, [r3]
 800458c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004590:	4b1b      	ldr	r3, [pc, #108]	@ (8004600 <DataLoggingTask+0x278>)
 8004592:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004596:	3308      	adds	r3, #8
 8004598:	edd3 6a00 	vldr	s13, [r3]
 800459c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80045a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80045a4:	ed8d 7b00 	vstr	d7, [sp]
 80045a8:	ec53 2b15 	vmov	r2, r3, d5
 80045ac:	481a      	ldr	r0, [pc, #104]	@ (8004618 <DataLoggingTask+0x290>)
 80045ae:	f00a fc07 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f", strawberry_robot.pos_pid_output.pData[0], strawberry_robot.pos_pid_output.pData[1], strawberry_robot.pos_pid_output.pData[2]);
 80045b2:	4b13      	ldr	r3, [pc, #76]	@ (8004600 <DataLoggingTask+0x278>)
 80045b4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80045b8:	edd3 7a00 	vldr	s15, [r3]
 80045bc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80045c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004600 <DataLoggingTask+0x278>)
 80045c2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80045c6:	3304      	adds	r3, #4
 80045c8:	edd3 7a00 	vldr	s15, [r3]
 80045cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <DataLoggingTask+0x278>)
 80045d2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80045d6:	3308      	adds	r3, #8
 80045d8:	edd3 6a00 	vldr	s13, [r3]
 80045dc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80045e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80045e4:	ed8d 7b00 	vstr	d7, [sp]
 80045e8:	ec53 2b15 	vmov	r2, r3, d5
 80045ec:	480b      	ldr	r0, [pc, #44]	@ (800461c <DataLoggingTask+0x294>)
 80045ee:	f00a fbe7 	bl	800edc0 <iprintf>
				printf("]\r\n");
 80045f2:	480b      	ldr	r0, [pc, #44]	@ (8004620 <DataLoggingTask+0x298>)
 80045f4:	f00a fc54 	bl	800eea0 <puts>
 80045f8:	e6d0      	b.n	800439c <DataLoggingTask+0x14>
 80045fa:	bf00      	nop
 80045fc:	240003cc 	.word	0x240003cc
 8004600:	2400040c 	.word	0x2400040c
 8004604:	240003c4 	.word	0x240003c4
 8004608:	447a0000 	.word	0x447a0000
 800460c:	240003c8 	.word	0x240003c8
 8004610:	0801127c 	.word	0x0801127c
 8004614:	08011290 	.word	0x08011290
 8004618:	080112a4 	.word	0x080112a4
 800461c:	080112bc 	.word	0x080112bc
 8004620:	080112d0 	.word	0x080112d0
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[");
 8004624:	205b      	movs	r0, #91	@ 0x5b
 8004626:	f00a fbdd 	bl	800ede4 <putchar>
				printf("%8.3f, %8.3f, %8d, ", (float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode);
 800462a:	4b64      	ldr	r3, [pc, #400]	@ (80047bc <DataLoggingTask+0x434>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004636:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80047c0 <DataLoggingTask+0x438>
 800463a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800463e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8004642:	4b5e      	ldr	r3, [pc, #376]	@ (80047bc <DataLoggingTask+0x434>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4b5f      	ldr	r3, [pc, #380]	@ (80047c4 <DataLoggingTask+0x43c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004654:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80047c0 <DataLoggingTask+0x438>
 8004658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800465c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004660:	4b59      	ldr	r3, [pc, #356]	@ (80047c8 <DataLoggingTask+0x440>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	9302      	str	r3, [sp, #8]
 8004666:	ed8d 7b00 	vstr	d7, [sp]
 800466a:	ec53 2b15 	vmov	r2, r3, d5
 800466e:	4857      	ldr	r0, [pc, #348]	@ (80047cc <DataLoggingTask+0x444>)
 8004670:	f00a fba6 	bl	800edc0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[0].id, strawberry_robot.motors[0].current_motor_mode, 0.0f);
 8004674:	4b54      	ldr	r3, [pc, #336]	@ (80047c8 <DataLoggingTask+0x440>)
 8004676:	6899      	ldr	r1, [r3, #8]
 8004678:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <DataLoggingTask+0x440>)
 800467a:	68d8      	ldr	r0, [r3, #12]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9cd 2300 	strd	r2, r3, [sp]
 8004688:	4602      	mov	r2, r0
 800468a:	4851      	ldr	r0, [pc, #324]	@ (80047d0 <DataLoggingTask+0x448>)
 800468c:	f00a fb98 	bl	800edc0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[1].id, strawberry_robot.motors[1].current_motor_mode, 0.0f);
 8004690:	4b4d      	ldr	r3, [pc, #308]	@ (80047c8 <DataLoggingTask+0x440>)
 8004692:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8004696:	4b4c      	ldr	r3, [pc, #304]	@ (80047c8 <DataLoggingTask+0x440>)
 8004698:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9cd 2300 	strd	r2, r3, [sp]
 80046a8:	4602      	mov	r2, r0
 80046aa:	4849      	ldr	r0, [pc, #292]	@ (80047d0 <DataLoggingTask+0x448>)
 80046ac:	f00a fb88 	bl	800edc0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[2].id, strawberry_robot.motors[2].current_motor_mode, 0.0f);
 80046b0:	4b45      	ldr	r3, [pc, #276]	@ (80047c8 <DataLoggingTask+0x440>)
 80046b2:	f8d3 1138 	ldr.w	r1, [r3, #312]	@ 0x138
 80046b6:	4b44      	ldr	r3, [pc, #272]	@ (80047c8 <DataLoggingTask+0x440>)
 80046b8:	f8d3 013c 	ldr.w	r0, [r3, #316]	@ 0x13c
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9cd 2300 	strd	r2, r3, [sp]
 80046c8:	4602      	mov	r2, r0
 80046ca:	4841      	ldr	r0, [pc, #260]	@ (80047d0 <DataLoggingTask+0x448>)
 80046cc:	f00a fb78 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9cd 2300 	strd	r2, r3, [sp]
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	4838      	ldr	r0, [pc, #224]	@ (80047d4 <DataLoggingTask+0x44c>)
 80046f2:	f00a fb65 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9cd 2300 	strd	r2, r3, [sp]
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	482f      	ldr	r0, [pc, #188]	@ (80047d4 <DataLoggingTask+0x44c>)
 8004718:	f00a fb52 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e9cd 2300 	strd	r2, r3, [sp]
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	4825      	ldr	r0, [pc, #148]	@ (80047d4 <DataLoggingTask+0x44c>)
 800473e:	f00a fb3f 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9cd 2300 	strd	r2, r3, [sp]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	481c      	ldr	r0, [pc, #112]	@ (80047d4 <DataLoggingTask+0x44c>)
 8004764:	f00a fb2c 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004774:	f04f 0200 	mov.w	r2, #0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	e9cd 2300 	strd	r2, r3, [sp]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	4812      	ldr	r0, [pc, #72]	@ (80047d4 <DataLoggingTask+0x44c>)
 800478a:	f00a fb19 	bl	800edc0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f", 0.0f, 0.0f, 0.0f);
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9cd 2300 	strd	r2, r3, [sp]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	480a      	ldr	r0, [pc, #40]	@ (80047d8 <DataLoggingTask+0x450>)
 80047b0:	f00a fb06 	bl	800edc0 <iprintf>
				printf("]\r\n");
 80047b4:	4809      	ldr	r0, [pc, #36]	@ (80047dc <DataLoggingTask+0x454>)
 80047b6:	f00a fb73 	bl	800eea0 <puts>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 80047ba:	e5ef      	b.n	800439c <DataLoggingTask+0x14>
 80047bc:	240003c4 	.word	0x240003c4
 80047c0:	447a0000 	.word	0x447a0000
 80047c4:	240003c8 	.word	0x240003c8
 80047c8:	2400040c 	.word	0x2400040c
 80047cc:	0801127c 	.word	0x0801127c
 80047d0:	08011290 	.word	0x08011290
 80047d4:	080112a4 	.word	0x080112a4
 80047d8:	080112bc 	.word	0x080112bc
 80047dc:	080112d0 	.word	0x080112d0

080047e0 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80047e6:	463b      	mov	r3, r7
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80047f2:	f000 fea1 	bl	8005538 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80047f6:	2301      	movs	r3, #1
 80047f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004802:	231f      	movs	r3, #31
 8004804:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004806:	2387      	movs	r3, #135	@ 0x87
 8004808:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800480a:	2300      	movs	r3, #0
 800480c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800480e:	2300      	movs	r3, #0
 8004810:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004812:	2301      	movs	r3, #1
 8004814:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004816:	2301      	movs	r3, #1
 8004818:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800481e:	2300      	movs	r3, #0
 8004820:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004822:	463b      	mov	r3, r7
 8004824:	4618      	mov	r0, r3
 8004826:	f000 febf 	bl	80055a8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800482a:	2004      	movs	r0, #4
 800482c:	f000 fe9c 	bl	8005568 <HAL_MPU_Enable>

}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a04      	ldr	r2, [pc, #16]	@ (8004858 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800484a:	f000 fd45 	bl	80052d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40001400 	.word	0x40001400

0800485c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 8004862:	4b4e      	ldr	r3, [pc, #312]	@ (800499c <Error_Handler+0x140>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d148      	bne.n	80048fc <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 800486a:	2300      	movs	r3, #0
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	e03f      	b.n	80048f0 <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004870:	2180      	movs	r1, #128	@ 0x80
 8004872:	484b      	ldr	r0, [pc, #300]	@ (80049a0 <Error_Handler+0x144>)
 8004874:	f002 fa6f 	bl	8006d56 <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 8004878:	4a48      	ldr	r2, [pc, #288]	@ (800499c <Error_Handler+0x140>)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2198      	movs	r1, #152	@ 0x98
 800487e:	fb01 f303 	mul.w	r3, r1, r3
 8004882:	4413      	add	r3, r2
 8004884:	338c      	adds	r3, #140	@ 0x8c
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800488c:	4845      	ldr	r0, [pc, #276]	@ (80049a4 <Error_Handler+0x148>)
 800488e:	f001 faff 	bl	8005e90 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d016      	beq.n	80048c6 <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004898:	4a40      	ldr	r2, [pc, #256]	@ (800499c <Error_Handler+0x140>)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2198      	movs	r1, #152	@ 0x98
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	4413      	add	r3, r2
 80048a4:	3308      	adds	r3, #8
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	493c      	ldr	r1, [pc, #240]	@ (800499c <Error_Handler+0x140>)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2098      	movs	r0, #152	@ 0x98
 80048b0:	fb00 f303 	mul.w	r3, r0, r3
 80048b4:	440b      	add	r3, r1
 80048b6:	338c      	adds	r3, #140	@ 0x8c
 80048b8:	edd3 7a00 	vldr	s15, [r3]
 80048bc:	eeb0 0a67 	vmov.f32	s0, s15
 80048c0:	4610      	mov	r0, r2
 80048c2:	f7fc fbbd 	bl	8001040 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80048c6:	4837      	ldr	r0, [pc, #220]	@ (80049a4 <Error_Handler+0x148>)
 80048c8:	f001 fae2 	bl	8005e90 <HAL_FDCAN_GetTxFifoFreeLevel>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 80048d2:	4a32      	ldr	r2, [pc, #200]	@ (800499c <Error_Handler+0x140>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2198      	movs	r1, #152	@ 0x98
 80048d8:	fb01 f303 	mul.w	r3, r1, r3
 80048dc:	4413      	add	r3, r2
 80048de:	3308      	adds	r3, #8
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fc fb2f 	bl	8000f48 <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3301      	adds	r3, #1
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	ddbc      	ble.n	8004870 <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 80048f6:	4b29      	ldr	r3, [pc, #164]	@ (800499c <Error_Handler+0x140>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 80048fc:	4b2a      	ldr	r3, [pc, #168]	@ (80049a8 <Error_Handler+0x14c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	2b03      	cmp	r3, #3
 8004904:	d826      	bhi.n	8004954 <Error_Handler+0xf8>
 8004906:	a201      	add	r2, pc, #4	@ (adr r2, 800490c <Error_Handler+0xb0>)
 8004908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490c:	0800491d 	.word	0x0800491d
 8004910:	0800492b 	.word	0x0800492b
 8004914:	08004939 	.word	0x08004939
 8004918:	08004947 	.word	0x08004947
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 800491c:	4b22      	ldr	r3, [pc, #136]	@ (80049a8 <Error_Handler+0x14c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4619      	mov	r1, r3
 8004922:	4822      	ldr	r0, [pc, #136]	@ (80049ac <Error_Handler+0x150>)
 8004924:	f00a fa4c 	bl	800edc0 <iprintf>
 8004928:	e017      	b.n	800495a <Error_Handler+0xfe>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 800492a:	4b1f      	ldr	r3, [pc, #124]	@ (80049a8 <Error_Handler+0x14c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	481f      	ldr	r0, [pc, #124]	@ (80049b0 <Error_Handler+0x154>)
 8004932:	f00a fa45 	bl	800edc0 <iprintf>
 8004936:	e010      	b.n	800495a <Error_Handler+0xfe>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <Error_Handler+0x14c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4619      	mov	r1, r3
 800493e:	481d      	ldr	r0, [pc, #116]	@ (80049b4 <Error_Handler+0x158>)
 8004940:	f00a fa3e 	bl	800edc0 <iprintf>
 8004944:	e009      	b.n	800495a <Error_Handler+0xfe>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 8004946:	4b18      	ldr	r3, [pc, #96]	@ (80049a8 <Error_Handler+0x14c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	481a      	ldr	r0, [pc, #104]	@ (80049b8 <Error_Handler+0x15c>)
 800494e:	f00a fa37 	bl	800edc0 <iprintf>
 8004952:	e002      	b.n	800495a <Error_Handler+0xfe>
	  default: printf("Error Code: Unknown");
 8004954:	4819      	ldr	r0, [pc, #100]	@ (80049bc <Error_Handler+0x160>)
 8004956:	f00a fa33 	bl	800edc0 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 800495a:	2300      	movs	r3, #0
 800495c:	603b      	str	r3, [r7, #0]
 800495e:	e012      	b.n	8004986 <Error_Handler+0x12a>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 8004960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004964:	480e      	ldr	r0, [pc, #56]	@ (80049a0 <Error_Handler+0x144>)
 8004966:	f002 f9f6 	bl	8006d56 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 800496a:	20c8      	movs	r0, #200	@ 0xc8
 800496c:	f000 fcd4 	bl	8005318 <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 8004970:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004974:	480a      	ldr	r0, [pc, #40]	@ (80049a0 <Error_Handler+0x144>)
 8004976:	f002 f9ee 	bl	8006d56 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 800497a:	20c8      	movs	r0, #200	@ 0xc8
 800497c:	f000 fccc 	bl	8005318 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <Error_Handler+0x14c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	dbe7      	blt.n	8004960 <Error_Handler+0x104>
	  }
	  HAL_Delay(1000);
 8004990:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004994:	f000 fcc0 	bl	8005318 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004998:	e7df      	b.n	800495a <Error_Handler+0xfe>
 800499a:	bf00      	nop
 800499c:	2400040c 	.word	0x2400040c
 80049a0:	58020400 	.word	0x58020400
 80049a4:	24000288 	.word	0x24000288
 80049a8:	24000a78 	.word	0x24000a78
 80049ac:	080112d4 	.word	0x080112d4
 80049b0:	080112fc 	.word	0x080112fc
 80049b4:	08011324 	.word	0x08011324
 80049b8:	08011358 	.word	0x08011358
 80049bc:	0801138c 	.word	0x0801138c

080049c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c6:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <HAL_MspInit+0x38>)
 80049c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049cc:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <HAL_MspInit+0x38>)
 80049ce:	f043 0302 	orr.w	r3, r3, #2
 80049d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80049d6:	4b08      	ldr	r3, [pc, #32]	@ (80049f8 <HAL_MspInit+0x38>)
 80049d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049e4:	2200      	movs	r2, #0
 80049e6:	210f      	movs	r1, #15
 80049e8:	f06f 0001 	mvn.w	r0, #1
 80049ec:	f000 fd7c 	bl	80054e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	58024400 	.word	0x58024400

080049fc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b0ba      	sub	sp, #232	@ 0xe8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a14:	f107 0310 	add.w	r3, r7, #16
 8004a18:	22c0      	movs	r2, #192	@ 0xc0
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f00a fb1f 	bl	800f060 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a37      	ldr	r2, [pc, #220]	@ (8004b04 <HAL_FDCAN_MspInit+0x108>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d166      	bne.n	8004afa <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004a2c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8004a3c:	2364      	movs	r3, #100	@ 0x64
 8004a3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8004a40:	2302      	movs	r3, #2
 8004a42:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8004a44:	2314      	movs	r3, #20
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004a48:	2302      	movs	r3, #2
 8004a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004a4c:	23c0      	movs	r3, #192	@ 0xc0
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8004a58:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a60:	f107 0310 	add.w	r3, r7, #16
 8004a64:	4618      	mov	r0, r3
 8004a66:	f003 f9f3 	bl	8007e50 <HAL_RCCEx_PeriphCLKConfig>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8004a70:	f7ff fef4 	bl	800485c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004a74:	4b24      	ldr	r3, [pc, #144]	@ (8004b08 <HAL_FDCAN_MspInit+0x10c>)
 8004a76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004a7a:	4a23      	ldr	r2, [pc, #140]	@ (8004b08 <HAL_FDCAN_MspInit+0x10c>)
 8004a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a80:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8004a84:	4b20      	ldr	r3, [pc, #128]	@ (8004b08 <HAL_FDCAN_MspInit+0x10c>)
 8004a86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a92:	4b1d      	ldr	r3, [pc, #116]	@ (8004b08 <HAL_FDCAN_MspInit+0x10c>)
 8004a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a98:	4a1b      	ldr	r2, [pc, #108]	@ (8004b08 <HAL_FDCAN_MspInit+0x10c>)
 8004a9a:	f043 0308 	orr.w	r3, r3, #8
 8004a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004aa2:	4b19      	ldr	r3, [pc, #100]	@ (8004b08 <HAL_FDCAN_MspInit+0x10c>)
 8004aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	60bb      	str	r3, [r7, #8]
 8004aae:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004ac8:	2309      	movs	r3, #9
 8004aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ace:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	480d      	ldr	r0, [pc, #52]	@ (8004b0c <HAL_FDCAN_MspInit+0x110>)
 8004ad6:	f001 ff75 	bl	80069c4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2105      	movs	r1, #5
 8004ade:	2013      	movs	r0, #19
 8004ae0:	f000 fd02 	bl	80054e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004ae4:	2013      	movs	r0, #19
 8004ae6:	f000 fd19 	bl	800551c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2105      	movs	r1, #5
 8004aee:	2015      	movs	r0, #21
 8004af0:	f000 fcfa 	bl	80054e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004af4:	2015      	movs	r0, #21
 8004af6:	f000 fd11 	bl	800551c <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004afa:	bf00      	nop
 8004afc:	37e8      	adds	r7, #232	@ 0xe8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	4000a000 	.word	0x4000a000
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	58020c00 	.word	0x58020c00

08004b10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b0ba      	sub	sp, #232	@ 0xe8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	22c0      	movs	r2, #192	@ 0xc0
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f00a fa95 	bl	800f060 <memset>
  if(huart->Instance==USART3)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a27      	ldr	r2, [pc, #156]	@ (8004bd8 <HAL_UART_MspInit+0xc8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d146      	bne.n	8004bce <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004b40:	f04f 0202 	mov.w	r2, #2
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b52:	f107 0310 	add.w	r3, r7, #16
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 f97a 	bl	8007e50 <HAL_RCCEx_PeriphCLKConfig>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004b62:	f7ff fe7b 	bl	800485c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b66:	4b1d      	ldr	r3, [pc, #116]	@ (8004bdc <HAL_UART_MspInit+0xcc>)
 8004b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004bdc <HAL_UART_MspInit+0xcc>)
 8004b6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004b76:	4b19      	ldr	r3, [pc, #100]	@ (8004bdc <HAL_UART_MspInit+0xcc>)
 8004b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b84:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <HAL_UART_MspInit+0xcc>)
 8004b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b8a:	4a14      	ldr	r2, [pc, #80]	@ (8004bdc <HAL_UART_MspInit+0xcc>)
 8004b8c:	f043 0308 	orr.w	r3, r3, #8
 8004b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b94:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <HAL_UART_MspInit+0xcc>)
 8004b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ba2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004baa:	2302      	movs	r3, #2
 8004bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004bbc:	2307      	movs	r3, #7
 8004bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4805      	ldr	r0, [pc, #20]	@ (8004be0 <HAL_UART_MspInit+0xd0>)
 8004bca:	f001 fefb 	bl	80069c4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8004bce:	bf00      	nop
 8004bd0:	37e8      	adds	r7, #232	@ 0xe8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40004800 	.word	0x40004800
 8004bdc:	58024400 	.word	0x58024400
 8004be0:	58020c00 	.word	0x58020c00

08004be4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b090      	sub	sp, #64	@ 0x40
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b0f      	cmp	r3, #15
 8004bf0:	d827      	bhi.n	8004c42 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	2037      	movs	r0, #55	@ 0x37
 8004bf8:	f000 fc76 	bl	80054e8 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004bfc:	2037      	movs	r0, #55	@ 0x37
 8004bfe:	f000 fc8d 	bl	800551c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8004c02:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <HAL_InitTick+0xc4>)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004c08:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <HAL_InitTick+0xc8>)
 8004c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c0e:	4a27      	ldr	r2, [pc, #156]	@ (8004cac <HAL_InitTick+0xc8>)
 8004c10:	f043 0320 	orr.w	r3, r3, #32
 8004c14:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c18:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <HAL_InitTick+0xc8>)
 8004c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c26:	f107 0210 	add.w	r2, r7, #16
 8004c2a:	f107 0314 	add.w	r3, r7, #20
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f003 f8cb 	bl	8007dcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <HAL_InitTick+0x6a>
 8004c40:	e001      	b.n	8004c46 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e02b      	b.n	8004c9e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c46:	f003 f895 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 8004c4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8004c4c:	e004      	b.n	8004c58 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c4e:	f003 f891 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 8004c52:	4603      	mov	r3, r0
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c5a:	4a15      	ldr	r2, [pc, #84]	@ (8004cb0 <HAL_InitTick+0xcc>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	0c9b      	lsrs	r3, r3, #18
 8004c62:	3b01      	subs	r3, #1
 8004c64:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004c66:	4b13      	ldr	r3, [pc, #76]	@ (8004cb4 <HAL_InitTick+0xd0>)
 8004c68:	4a13      	ldr	r2, [pc, #76]	@ (8004cb8 <HAL_InitTick+0xd4>)
 8004c6a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004c6c:	4b11      	ldr	r3, [pc, #68]	@ (8004cb4 <HAL_InitTick+0xd0>)
 8004c6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004c72:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8004c74:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb4 <HAL_InitTick+0xd0>)
 8004c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c78:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <HAL_InitTick+0xd0>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c80:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb4 <HAL_InitTick+0xd0>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8004c86:	480b      	ldr	r0, [pc, #44]	@ (8004cb4 <HAL_InitTick+0xd0>)
 8004c88:	f004 ff0e 	bl	8009aa8 <HAL_TIM_Base_Init>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8004c92:	4808      	ldr	r0, [pc, #32]	@ (8004cb4 <HAL_InitTick+0xd0>)
 8004c94:	f004 ff6a 	bl	8009b6c <HAL_TIM_Base_Start_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	e000      	b.n	8004c9e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3740      	adds	r7, #64	@ 0x40
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	24000074 	.word	0x24000074
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	431bde83 	.word	0x431bde83
 8004cb4:	24000a7c 	.word	0x24000a7c
 8004cb8:	40001400 	.word	0x40001400

08004cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <NMI_Handler+0x4>

08004cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <HardFault_Handler+0x4>

08004ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <MemManage_Handler+0x4>

08004cd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <BusFault_Handler+0x4>

08004cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <UsageFault_Handler+0x4>

08004ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ce8:	bf00      	nop
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004cf8:	4802      	ldr	r0, [pc, #8]	@ (8004d04 <FDCAN1_IT0_IRQHandler+0x10>)
 8004cfa:	f001 f955 	bl	8005fa8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	24000288 	.word	0x24000288

08004d08 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004d0c:	4802      	ldr	r0, [pc, #8]	@ (8004d18 <FDCAN1_IT1_IRQHandler+0x10>)
 8004d0e:	f001 f94b 	bl	8005fa8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	24000288 	.word	0x24000288

08004d1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8004d20:	2000      	movs	r0, #0
 8004d22:	f000 fa83 	bl	800522c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004d30:	4802      	ldr	r0, [pc, #8]	@ (8004d3c <TIM7_IRQHandler+0x10>)
 8004d32:	f004 ff93 	bl	8009c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	24000a7c 	.word	0x24000a7c

08004d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return 1;
 8004d44:	2301      	movs	r3, #1
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <_kill>:

int _kill(int pid, int sig)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d5a:	f00a fa31 	bl	800f1c0 <__errno>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2216      	movs	r2, #22
 8004d62:	601a      	str	r2, [r3, #0]
  return -1;
 8004d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_exit>:

void _exit (int status)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004d78:	f04f 31ff 	mov.w	r1, #4294967295
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ffe7 	bl	8004d50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <_exit+0x12>

08004d86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	e00a      	b.n	8004dae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d98:	f3af 8000 	nop.w
 8004d9c:	4601      	mov	r1, r0
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	60ba      	str	r2, [r7, #8]
 8004da4:	b2ca      	uxtb	r2, r1
 8004da6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	3301      	adds	r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	dbf0      	blt.n	8004d98 <_read+0x12>
  }

  return len;
 8004db6:	687b      	ldr	r3, [r7, #4]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004de8:	605a      	str	r2, [r3, #4]
  return 0;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <_isatty>:

int _isatty(int file)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e00:	2301      	movs	r3, #1
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e30:	4a14      	ldr	r2, [pc, #80]	@ (8004e84 <_sbrk+0x5c>)
 8004e32:	4b15      	ldr	r3, [pc, #84]	@ (8004e88 <_sbrk+0x60>)
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e3c:	4b13      	ldr	r3, [pc, #76]	@ (8004e8c <_sbrk+0x64>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e44:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <_sbrk+0x64>)
 8004e46:	4a12      	ldr	r2, [pc, #72]	@ (8004e90 <_sbrk+0x68>)
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e4a:	4b10      	ldr	r3, [pc, #64]	@ (8004e8c <_sbrk+0x64>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d207      	bcs.n	8004e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e58:	f00a f9b2 	bl	800f1c0 <__errno>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	220c      	movs	r2, #12
 8004e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	e009      	b.n	8004e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e68:	4b08      	ldr	r3, [pc, #32]	@ (8004e8c <_sbrk+0x64>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e6e:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <_sbrk+0x64>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	4a05      	ldr	r2, [pc, #20]	@ (8004e8c <_sbrk+0x64>)
 8004e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	24080000 	.word	0x24080000
 8004e88:	00000400 	.word	0x00000400
 8004e8c:	24000ac8 	.word	0x24000ac8
 8004e90:	24005610 	.word	0x24005610

08004e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004e98:	4b43      	ldr	r3, [pc, #268]	@ (8004fa8 <SystemInit+0x114>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9e:	4a42      	ldr	r2, [pc, #264]	@ (8004fa8 <SystemInit+0x114>)
 8004ea0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ea4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ea8:	4b40      	ldr	r3, [pc, #256]	@ (8004fac <SystemInit+0x118>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	2b06      	cmp	r3, #6
 8004eb2:	d807      	bhi.n	8004ec4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8004fac <SystemInit+0x118>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f023 030f 	bic.w	r3, r3, #15
 8004ebc:	4a3b      	ldr	r2, [pc, #236]	@ (8004fac <SystemInit+0x118>)
 8004ebe:	f043 0307 	orr.w	r3, r3, #7
 8004ec2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb0 <SystemInit+0x11c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a39      	ldr	r2, [pc, #228]	@ (8004fb0 <SystemInit+0x11c>)
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ed0:	4b37      	ldr	r3, [pc, #220]	@ (8004fb0 <SystemInit+0x11c>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004ed6:	4b36      	ldr	r3, [pc, #216]	@ (8004fb0 <SystemInit+0x11c>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	4935      	ldr	r1, [pc, #212]	@ (8004fb0 <SystemInit+0x11c>)
 8004edc:	4b35      	ldr	r3, [pc, #212]	@ (8004fb4 <SystemInit+0x120>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ee2:	4b32      	ldr	r3, [pc, #200]	@ (8004fac <SystemInit+0x118>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004eee:	4b2f      	ldr	r3, [pc, #188]	@ (8004fac <SystemInit+0x118>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f023 030f 	bic.w	r3, r3, #15
 8004ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8004fac <SystemInit+0x118>)
 8004ef8:	f043 0307 	orr.w	r3, r3, #7
 8004efc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004efe:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb0 <SystemInit+0x11c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004f04:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb0 <SystemInit+0x11c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004f0a:	4b29      	ldr	r3, [pc, #164]	@ (8004fb0 <SystemInit+0x11c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004f10:	4b27      	ldr	r3, [pc, #156]	@ (8004fb0 <SystemInit+0x11c>)
 8004f12:	4a29      	ldr	r2, [pc, #164]	@ (8004fb8 <SystemInit+0x124>)
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004f16:	4b26      	ldr	r3, [pc, #152]	@ (8004fb0 <SystemInit+0x11c>)
 8004f18:	4a28      	ldr	r2, [pc, #160]	@ (8004fbc <SystemInit+0x128>)
 8004f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004f1c:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <SystemInit+0x11c>)
 8004f1e:	4a28      	ldr	r2, [pc, #160]	@ (8004fc0 <SystemInit+0x12c>)
 8004f20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004f22:	4b23      	ldr	r3, [pc, #140]	@ (8004fb0 <SystemInit+0x11c>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004f28:	4b21      	ldr	r3, [pc, #132]	@ (8004fb0 <SystemInit+0x11c>)
 8004f2a:	4a25      	ldr	r2, [pc, #148]	@ (8004fc0 <SystemInit+0x12c>)
 8004f2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004f2e:	4b20      	ldr	r3, [pc, #128]	@ (8004fb0 <SystemInit+0x11c>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004f34:	4b1e      	ldr	r3, [pc, #120]	@ (8004fb0 <SystemInit+0x11c>)
 8004f36:	4a22      	ldr	r2, [pc, #136]	@ (8004fc0 <SystemInit+0x12c>)
 8004f38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb0 <SystemInit+0x11c>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f40:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb0 <SystemInit+0x11c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb0 <SystemInit+0x11c>)
 8004f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f4c:	4b18      	ldr	r3, [pc, #96]	@ (8004fb0 <SystemInit+0x11c>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004f52:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc4 <SystemInit+0x130>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc8 <SystemInit+0x134>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f5e:	d202      	bcs.n	8004f66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <SystemInit+0x138>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8004f66:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <SystemInit+0x11c>)
 8004f68:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d113      	bne.n	8004f9c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004f74:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb0 <SystemInit+0x11c>)
 8004f76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8004fb0 <SystemInit+0x11c>)
 8004f7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f80:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004f84:	4b12      	ldr	r3, [pc, #72]	@ (8004fd0 <SystemInit+0x13c>)
 8004f86:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004f8c:	4b08      	ldr	r3, [pc, #32]	@ (8004fb0 <SystemInit+0x11c>)
 8004f8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004f92:	4a07      	ldr	r2, [pc, #28]	@ (8004fb0 <SystemInit+0x11c>)
 8004f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f98:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000ed00 	.word	0xe000ed00
 8004fac:	52002000 	.word	0x52002000
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8004fb8:	02020200 	.word	0x02020200
 8004fbc:	01ff0000 	.word	0x01ff0000
 8004fc0:	01010280 	.word	0x01010280
 8004fc4:	5c001000 	.word	0x5c001000
 8004fc8:	ffff0000 	.word	0xffff0000
 8004fcc:	51008108 	.word	0x51008108
 8004fd0:	52004000 	.word	0x52004000

08004fd4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8004fd8:	4b09      	ldr	r3, [pc, #36]	@ (8005000 <ExitRun0Mode+0x2c>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a08      	ldr	r2, [pc, #32]	@ (8005000 <ExitRun0Mode+0x2c>)
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004fe4:	bf00      	nop
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <ExitRun0Mode+0x2c>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0f9      	beq.n	8004fe6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	58024800 	.word	0x58024800

08005004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005004:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005040 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8005008:	f7ff ffe4 	bl	8004fd4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800500c:	f7ff ff42 	bl	8004e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005010:	480c      	ldr	r0, [pc, #48]	@ (8005044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005012:	490d      	ldr	r1, [pc, #52]	@ (8005048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005014:	4a0d      	ldr	r2, [pc, #52]	@ (800504c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005018:	e002      	b.n	8005020 <LoopCopyDataInit>

0800501a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800501a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800501c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800501e:	3304      	adds	r3, #4

08005020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005024:	d3f9      	bcc.n	800501a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005028:	4c0a      	ldr	r4, [pc, #40]	@ (8005054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800502a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800502c:	e001      	b.n	8005032 <LoopFillZerobss>

0800502e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800502e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005030:	3204      	adds	r2, #4

08005032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005034:	d3fb      	bcc.n	800502e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005036:	f00a f8c9 	bl	800f1cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800503a:	f7fe f8eb 	bl	8003214 <main>
  bx  lr
 800503e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005040:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005044:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005048:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 800504c:	08011968 	.word	0x08011968
  ldr r2, =_sbss
 8005050:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8005054:	2400560c 	.word	0x2400560c

08005058 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005058:	e7fe      	b.n	8005058 <ADC3_IRQHandler>
	...

0800505c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08c      	sub	sp, #48	@ 0x30
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005066:	2300      	movs	r3, #0
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <BSP_LED_Init+0x28>
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d006      	beq.n	8005084 <BSP_LED_Init+0x28>
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d003      	beq.n	8005084 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800507c:	f06f 0301 	mvn.w	r3, #1
 8005080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005082:	e055      	b.n	8005130 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10f      	bne.n	80050aa <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800508a:	4b2c      	ldr	r3, [pc, #176]	@ (800513c <BSP_LED_Init+0xe0>)
 800508c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005090:	4a2a      	ldr	r2, [pc, #168]	@ (800513c <BSP_LED_Init+0xe0>)
 8005092:	f043 0302 	orr.w	r3, r3, #2
 8005096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800509a:	4b28      	ldr	r3, [pc, #160]	@ (800513c <BSP_LED_Init+0xe0>)
 800509c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	e021      	b.n	80050ee <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10f      	bne.n	80050d0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80050b0:	4b22      	ldr	r3, [pc, #136]	@ (800513c <BSP_LED_Init+0xe0>)
 80050b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050b6:	4a21      	ldr	r2, [pc, #132]	@ (800513c <BSP_LED_Init+0xe0>)
 80050b8:	f043 0302 	orr.w	r3, r3, #2
 80050bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050c0:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <BSP_LED_Init+0xe0>)
 80050c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	e00e      	b.n	80050ee <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80050d0:	4b1a      	ldr	r3, [pc, #104]	@ (800513c <BSP_LED_Init+0xe0>)
 80050d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050d6:	4a19      	ldr	r2, [pc, #100]	@ (800513c <BSP_LED_Init+0xe0>)
 80050d8:	f043 0302 	orr.w	r3, r3, #2
 80050dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050e0:	4b16      	ldr	r3, [pc, #88]	@ (800513c <BSP_LED_Init+0xe0>)
 80050e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	4a13      	ldr	r2, [pc, #76]	@ (8005140 <BSP_LED_Init+0xe4>)
 80050f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050f6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80050f8:	2301      	movs	r3, #1
 80050fa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005100:	2303      	movs	r3, #3
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	4a0f      	ldr	r2, [pc, #60]	@ (8005144 <BSP_LED_Init+0xe8>)
 8005108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800510c:	f107 0218 	add.w	r2, r7, #24
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f001 fc56 	bl	80069c4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	4a0a      	ldr	r2, [pc, #40]	@ (8005144 <BSP_LED_Init+0xe8>)
 800511c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	4a07      	ldr	r2, [pc, #28]	@ (8005140 <BSP_LED_Init+0xe4>)
 8005124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005128:	2200      	movs	r2, #0
 800512a:	4619      	mov	r1, r3
 800512c:	f001 fdfa 	bl	8006d24 <HAL_GPIO_WritePin>
  }

  return ret;
 8005130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005132:	4618      	mov	r0, r3
 8005134:	3730      	adds	r7, #48	@ 0x30
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	58024400 	.word	0x58024400
 8005140:	0801145c 	.word	0x0801145c
 8005144:	2400005c 	.word	0x2400005c

08005148 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	460a      	mov	r2, r1
 8005152:	71fb      	strb	r3, [r7, #7]
 8005154:	4613      	mov	r3, r2
 8005156:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8005158:	4b2e      	ldr	r3, [pc, #184]	@ (8005214 <BSP_PB_Init+0xcc>)
 800515a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800515e:	4a2d      	ldr	r2, [pc, #180]	@ (8005214 <BSP_PB_Init+0xcc>)
 8005160:	f043 0304 	orr.w	r3, r3, #4
 8005164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005168:	4b2a      	ldr	r3, [pc, #168]	@ (8005214 <BSP_PB_Init+0xcc>)
 800516a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	60bb      	str	r3, [r7, #8]
 8005174:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8005176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800517a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800517c:	2302      	movs	r3, #2
 800517e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005180:	2302      	movs	r3, #2
 8005182:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005184:	79bb      	ldrb	r3, [r7, #6]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10c      	bne.n	80051a4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800518a:	2300      	movs	r3, #0
 800518c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	4a21      	ldr	r2, [pc, #132]	@ (8005218 <BSP_PB_Init+0xd0>)
 8005192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005196:	f107 020c 	add.w	r2, r7, #12
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fc11 	bl	80069c4 <HAL_GPIO_Init>
 80051a2:	e031      	b.n	8005208 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80051a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80051a8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005218 <BSP_PB_Init+0xd0>)
 80051ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b2:	f107 020c 	add.w	r2, r7, #12
 80051b6:	4611      	mov	r1, r2
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 fc03 	bl	80069c4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	4a16      	ldr	r2, [pc, #88]	@ (800521c <BSP_PB_Init+0xd4>)
 80051c4:	441a      	add	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	4915      	ldr	r1, [pc, #84]	@ (8005220 <BSP_PB_Init+0xd8>)
 80051ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f000 fa48 	bl	8005666 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4a10      	ldr	r2, [pc, #64]	@ (800521c <BSP_PB_Init+0xd4>)
 80051dc:	1898      	adds	r0, r3, r2
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	4a10      	ldr	r2, [pc, #64]	@ (8005224 <BSP_PB_Init+0xdc>)
 80051e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e6:	461a      	mov	r2, r3
 80051e8:	2100      	movs	r1, #0
 80051ea:	f000 fa1d 	bl	8005628 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80051ee:	2028      	movs	r0, #40	@ 0x28
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005228 <BSP_PB_Init+0xe0>)
 80051f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f8:	2200      	movs	r2, #0
 80051fa:	4619      	mov	r1, r3
 80051fc:	f000 f974 	bl	80054e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005200:	2328      	movs	r3, #40	@ 0x28
 8005202:	4618      	mov	r0, r3
 8005204:	f000 f98a 	bl	800551c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3720      	adds	r7, #32
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	58024400 	.word	0x58024400
 8005218:	24000068 	.word	0x24000068
 800521c:	24000acc 	.word	0x24000acc
 8005220:	08011464 	.word	0x08011464
 8005224:	2400006c 	.word	0x2400006c
 8005228:	24000070 	.word	0x24000070

0800522c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	4603      	mov	r3, r0
 8005234:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	4a04      	ldr	r2, [pc, #16]	@ (800524c <BSP_PB_IRQHandler+0x20>)
 800523c:	4413      	add	r3, r2
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fa26 	bl	8005690 <HAL_EXTI_IRQHandler>
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	24000acc 	.word	0x24000acc

08005250 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005254:	2000      	movs	r0, #0
 8005256:	f7fb fd29 	bl	8000cac <BSP_PB_Callback>
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005266:	2003      	movs	r0, #3
 8005268:	f000 f933 	bl	80054d2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800526c:	f002 fbd8 	bl	8007a20 <HAL_RCC_GetSysClockFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <HAL_Init+0x68>)
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	4913      	ldr	r1, [pc, #76]	@ (80052cc <HAL_Init+0x6c>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
 8005288:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800528a:	4b0f      	ldr	r3, [pc, #60]	@ (80052c8 <HAL_Init+0x68>)
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	4a0e      	ldr	r2, [pc, #56]	@ (80052cc <HAL_Init+0x6c>)
 8005294:	5cd3      	ldrb	r3, [r2, r3]
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
 80052a0:	4a0b      	ldr	r2, [pc, #44]	@ (80052d0 <HAL_Init+0x70>)
 80052a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052a4:	4a0b      	ldr	r2, [pc, #44]	@ (80052d4 <HAL_Init+0x74>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052aa:	200f      	movs	r0, #15
 80052ac:	f7ff fc9a 	bl	8004be4 <HAL_InitTick>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e002      	b.n	80052c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80052ba:	f7ff fb81 	bl	80049c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	58024400 	.word	0x58024400
 80052cc:	0801144c 	.word	0x0801144c
 80052d0:	24000058 	.word	0x24000058
 80052d4:	24000054 	.word	0x24000054

080052d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <HAL_IncTick+0x20>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <HAL_IncTick+0x24>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4413      	add	r3, r2
 80052e8:	4a04      	ldr	r2, [pc, #16]	@ (80052fc <HAL_IncTick+0x24>)
 80052ea:	6013      	str	r3, [r2, #0]
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	24000078 	.word	0x24000078
 80052fc:	24000ad4 	.word	0x24000ad4

08005300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  return uwTick;
 8005304:	4b03      	ldr	r3, [pc, #12]	@ (8005314 <HAL_GetTick+0x14>)
 8005306:	681b      	ldr	r3, [r3, #0]
}
 8005308:	4618      	mov	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	24000ad4 	.word	0x24000ad4

08005318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005320:	f7ff ffee 	bl	8005300 <HAL_GetTick>
 8005324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d005      	beq.n	800533e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005332:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <HAL_Delay+0x44>)
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800533e:	bf00      	nop
 8005340:	f7ff ffde 	bl	8005300 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	429a      	cmp	r2, r3
 800534e:	d8f7      	bhi.n	8005340 <HAL_Delay+0x28>
  {
  }
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	24000078 	.word	0x24000078

08005360 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005364:	4b03      	ldr	r3, [pc, #12]	@ (8005374 <HAL_GetREVID+0x14>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	0c1b      	lsrs	r3, r3, #16
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	5c001000 	.word	0x5c001000

08005378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005388:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <__NVIC_SetPriorityGrouping+0x40>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053a6:	4a04      	ldr	r2, [pc, #16]	@ (80053b8 <__NVIC_SetPriorityGrouping+0x40>)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	60d3      	str	r3, [r2, #12]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000ed00 	.word	0xe000ed00
 80053bc:	05fa0000 	.word	0x05fa0000

080053c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <__NVIC_GetPriorityGrouping+0x18>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 0307 	and.w	r3, r3, #7
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4907      	ldr	r1, [pc, #28]	@ (8005414 <__NVIC_EnableIRQ+0x38>)
 80053f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db0a      	blt.n	8005442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	490c      	ldr	r1, [pc, #48]	@ (8005464 <__NVIC_SetPriority+0x4c>)
 8005432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005436:	0112      	lsls	r2, r2, #4
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	440b      	add	r3, r1
 800543c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005440:	e00a      	b.n	8005458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4908      	ldr	r1, [pc, #32]	@ (8005468 <__NVIC_SetPriority+0x50>)
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	3b04      	subs	r3, #4
 8005450:	0112      	lsls	r2, r2, #4
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	440b      	add	r3, r1
 8005456:	761a      	strb	r2, [r3, #24]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000e100 	.word	0xe000e100
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	@ 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f1c3 0307 	rsb	r3, r3, #7
 8005486:	2b04      	cmp	r3, #4
 8005488:	bf28      	it	cs
 800548a:	2304      	movcs	r3, #4
 800548c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3304      	adds	r3, #4
 8005492:	2b06      	cmp	r3, #6
 8005494:	d902      	bls.n	800549c <NVIC_EncodePriority+0x30>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3b03      	subs	r3, #3
 800549a:	e000      	b.n	800549e <NVIC_EncodePriority+0x32>
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43da      	mvns	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	401a      	ands	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b4:	f04f 31ff 	mov.w	r1, #4294967295
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	43d9      	mvns	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	4313      	orrs	r3, r2
         );
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3724      	adds	r7, #36	@ 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ff4c 	bl	8005378 <__NVIC_SetPriorityGrouping>
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	4603      	mov	r3, r0
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054f6:	f7ff ff63 	bl	80053c0 <__NVIC_GetPriorityGrouping>
 80054fa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	6978      	ldr	r0, [r7, #20]
 8005502:	f7ff ffb3 	bl	800546c <NVIC_EncodePriority>
 8005506:	4602      	mov	r2, r0
 8005508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ff82 	bl	8005418 <__NVIC_SetPriority>
}
 8005514:	bf00      	nop
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff ff56 	bl	80053dc <__NVIC_EnableIRQ>
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800553c:	f3bf 8f5f 	dmb	sy
}
 8005540:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005542:	4b07      	ldr	r3, [pc, #28]	@ (8005560 <HAL_MPU_Disable+0x28>)
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	4a06      	ldr	r2, [pc, #24]	@ (8005560 <HAL_MPU_Disable+0x28>)
 8005548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800554c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800554e:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_MPU_Disable+0x2c>)
 8005550:	2200      	movs	r2, #0
 8005552:	605a      	str	r2, [r3, #4]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000ed00 	.word	0xe000ed00
 8005564:	e000ed90 	.word	0xe000ed90

08005568 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005570:	4a0b      	ldr	r2, [pc, #44]	@ (80055a0 <HAL_MPU_Enable+0x38>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800557a:	4b0a      	ldr	r3, [pc, #40]	@ (80055a4 <HAL_MPU_Enable+0x3c>)
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	4a09      	ldr	r2, [pc, #36]	@ (80055a4 <HAL_MPU_Enable+0x3c>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005584:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005586:	f3bf 8f4f 	dsb	sy
}
 800558a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800558c:	f3bf 8f6f 	isb	sy
}
 8005590:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	e000ed90 	.word	0xe000ed90
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	785a      	ldrb	r2, [r3, #1]
 80055b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005624 <HAL_MPU_ConfigRegion+0x7c>)
 80055b6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80055b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005624 <HAL_MPU_ConfigRegion+0x7c>)
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	4a19      	ldr	r2, [pc, #100]	@ (8005624 <HAL_MPU_ConfigRegion+0x7c>)
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80055c4:	4a17      	ldr	r2, [pc, #92]	@ (8005624 <HAL_MPU_ConfigRegion+0x7c>)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	7b1b      	ldrb	r3, [r3, #12]
 80055d0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	7adb      	ldrb	r3, [r3, #11]
 80055d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80055d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	7a9b      	ldrb	r3, [r3, #10]
 80055de:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80055e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	7b5b      	ldrb	r3, [r3, #13]
 80055e6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80055e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	7b9b      	ldrb	r3, [r3, #14]
 80055ee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80055f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	7bdb      	ldrb	r3, [r3, #15]
 80055f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80055f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7a5b      	ldrb	r3, [r3, #9]
 80055fe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005600:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	7a1b      	ldrb	r3, [r3, #8]
 8005606:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005608:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	7812      	ldrb	r2, [r2, #0]
 800560e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005610:	4a04      	ldr	r2, [pc, #16]	@ (8005624 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005612:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005614:	6113      	str	r3, [r2, #16]
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	e000ed90 	.word	0xe000ed90

08005628 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	460b      	mov	r3, r1
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e00a      	b.n	800565a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005644:	7afb      	ldrb	r3, [r7, #11]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	605a      	str	r2, [r3, #4]
      break;
 8005650:	e002      	b.n	8005658 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
      break;
 8005656:	bf00      	nop
  }

  return status;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e003      	b.n	8005682 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
  }
}
 8005682:	4618      	mov	r0, r3
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2201      	movs	r2, #1
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	011a      	lsls	r2, r3, #4
 80056b8:	4b0c      	ldr	r3, [pc, #48]	@ (80056ec <HAL_EXTI_IRQHandler+0x5c>)
 80056ba:	4413      	add	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4013      	ands	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4798      	blx	r3
    }
  }
}
 80056e2:	bf00      	nop
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	58000088 	.word	0x58000088

080056f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b098      	sub	sp, #96	@ 0x60
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80056f8:	4a84      	ldr	r2, [pc, #528]	@ (800590c <HAL_FDCAN_Init+0x21c>)
 80056fa:	f107 030c 	add.w	r3, r7, #12
 80056fe:	4611      	mov	r1, r2
 8005700:	224c      	movs	r2, #76	@ 0x4c
 8005702:	4618      	mov	r0, r3
 8005704:	f009 fd89 	bl	800f21a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e1c6      	b.n	8005aa0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a7e      	ldr	r2, [pc, #504]	@ (8005910 <HAL_FDCAN_Init+0x220>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d106      	bne.n	800572a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005724:	461a      	mov	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff f95c 	bl	80049fc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0210 	bic.w	r2, r2, #16
 8005752:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005754:	f7ff fdd4 	bl	8005300 <HAL_GetTick>
 8005758:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800575a:	e014      	b.n	8005786 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800575c:	f7ff fdd0 	bl	8005300 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b0a      	cmp	r3, #10
 8005768:	d90d      	bls.n	8005786 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005770:	f043 0201 	orr.w	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2203      	movs	r2, #3
 800577e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e18c      	b.n	8005aa0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b08      	cmp	r3, #8
 8005792:	d0e3      	beq.n	800575c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057a4:	f7ff fdac 	bl	8005300 <HAL_GetTick>
 80057a8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057aa:	e014      	b.n	80057d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057ac:	f7ff fda8 	bl	8005300 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b0a      	cmp	r3, #10
 80057b8:	d90d      	bls.n	80057d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057c0:	f043 0201 	orr.w	r2, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2203      	movs	r2, #3
 80057ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e164      	b.n	8005aa0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0e3      	beq.n	80057ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0202 	orr.w	r2, r2, #2
 80057f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	7c1b      	ldrb	r3, [r3, #16]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d108      	bne.n	800580e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800580a:	619a      	str	r2, [r3, #24]
 800580c:	e007      	b.n	800581e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	699a      	ldr	r2, [r3, #24]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800581c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	7c5b      	ldrb	r3, [r3, #17]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d108      	bne.n	8005838 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005834:	619a      	str	r2, [r3, #24]
 8005836:	e007      	b.n	8005848 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005846:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	7c9b      	ldrb	r3, [r3, #18]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d108      	bne.n	8005862 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800585e:	619a      	str	r2, [r3, #24]
 8005860:	e007      	b.n	8005872 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005870:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005896:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0210 	bic.w	r2, r2, #16
 80058a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d108      	bne.n	80058c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0204 	orr.w	r2, r2, #4
 80058be:	619a      	str	r2, [r3, #24]
 80058c0:	e030      	b.n	8005924 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02c      	beq.n	8005924 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d020      	beq.n	8005914 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0210 	orr.w	r2, r2, #16
 80058f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d114      	bne.n	8005924 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0220 	orr.w	r2, r2, #32
 8005908:	619a      	str	r2, [r3, #24]
 800590a:	e00b      	b.n	8005924 <HAL_FDCAN_Init+0x234>
 800590c:	080113a0 	.word	0x080113a0
 8005910:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0220 	orr.w	r2, r2, #32
 8005922:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	3b01      	subs	r3, #1
 800592a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	3b01      	subs	r3, #1
 8005932:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005934:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800593c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	3b01      	subs	r3, #1
 8005946:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800594c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800594e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005958:	d115      	bne.n	8005986 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005964:	3b01      	subs	r3, #1
 8005966:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005968:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596e:	3b01      	subs	r3, #1
 8005970:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005972:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	3b01      	subs	r3, #1
 800597c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005982:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005984:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	430a      	orrs	r2, r1
 80059a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ac:	4413      	add	r3, r2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80059ba:	f023 0107 	bic.w	r1, r3, #7
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	3360      	adds	r3, #96	@ 0x60
 80059c6:	443b      	add	r3, r7
 80059c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d011      	beq.n	8005a02 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059e6:	f023 0107 	bic.w	r1, r3, #7
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	3360      	adds	r3, #96	@ 0x60
 80059f2:	443b      	add	r3, r7
 80059f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d012      	beq.n	8005a30 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a12:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	3360      	adds	r3, #96	@ 0x60
 8005a1e:	443b      	add	r3, r7
 8005a20:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a24:	011a      	lsls	r2, r3, #4
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d012      	beq.n	8005a5e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a40:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	3360      	adds	r3, #96	@ 0x60
 8005a4c:	443b      	add	r3, r7
 8005a4e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005a52:	021a      	lsls	r2, r3, #8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a11      	ldr	r2, [pc, #68]	@ (8005aa8 <HAL_FDCAN_Init+0x3b8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d107      	bne.n	8005a78 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f022 0203 	bic.w	r2, r2, #3
 8005a76:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fd93 	bl	80065bc <FDCAN_CalcultateRamBlockAddresses>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005a9c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3760      	adds	r7, #96	@ 0x60
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	4000a000 	.word	0x4000a000

08005aac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d111      	bne.n	8005ae4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e008      	b.n	8005af6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aea:	f043 0204 	orr.w	r2, r3, #4
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
  }
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d141      	bne.n	8005b9e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005b22:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d109      	bne.n	8005b3e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b30:	f043 0220 	orr.w	r2, r3, #32
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e038      	b.n	8005bb0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b54:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e026      	b.n	8005bb0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b6a:	0c1b      	lsrs	r3, r3, #16
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fea5 	bl	80068c8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2101      	movs	r1, #1
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	fa01 f202 	lsl.w	r2, r1, r2
 8005b8a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005b8e:	2201      	movs	r2, #1
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	409a      	lsls	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e008      	b.n	8005bb0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ba4:	f043 0208 	orr.w	r2, r3, #8
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
  }
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b08b      	sub	sp, #44	@ 0x2c
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005bd0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005bd2:	7efb      	ldrb	r3, [r7, #27]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	f040 8149 	bne.w	8005e6c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b40      	cmp	r3, #64	@ 0x40
 8005bde:	d14c      	bne.n	8005c7a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005be8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d109      	bne.n	8005c04 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bf6:	f043 0220 	orr.w	r2, r3, #32
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e13c      	b.n	8005e7e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e12a      	b.n	8005e7e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c38:	d10a      	bne.n	8005c50 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005c42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c4a:	d101      	bne.n	8005c50 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005c58:	0a1b      	lsrs	r3, r3, #8
 8005c5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6c:	69f9      	ldr	r1, [r7, #28]
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c78:	e068      	b.n	8005d4c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b41      	cmp	r3, #65	@ 0x41
 8005c7e:	d14c      	bne.n	8005d1a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c88:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c96:	f043 0220 	orr.w	r2, r3, #32
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0ec      	b.n	8005e7e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d109      	bne.n	8005cc8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0da      	b.n	8005e7e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ce2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cea:	d101      	bne.n	8005cf0 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005cec:	2301      	movs	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cf8:	0a1b      	lsrs	r3, r3, #8
 8005cfa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0c:	69f9      	ldr	r1, [r7, #28]
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d18:	e018      	b.n	8005d4c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d309      	bcc.n	8005d38 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0a2      	b.n	8005e7e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d107      	bne.n	8005d70 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	0c9b      	lsrs	r3, r3, #18
 8005d66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e005      	b.n	8005d7c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	3304      	adds	r3, #4
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 020f 	and.w	r2, r3, #15
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	0e1b      	lsrs	r3, r3, #24
 8005dd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	0fda      	lsrs	r2, r3, #31
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	3304      	adds	r3, #4
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005dec:	2300      	movs	r3, #0
 8005dee:	623b      	str	r3, [r7, #32]
 8005df0:	e00a      	b.n	8005e08 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	441a      	add	r2, r3
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	440b      	add	r3, r1
 8005dfe:	7812      	ldrb	r2, [r2, #0]
 8005e00:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	3301      	adds	r3, #1
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e8c <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005e0e:	5cd3      	ldrb	r3, [r2, r3]
 8005e10:	461a      	mov	r2, r3
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d3ec      	bcc.n	8005df2 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b40      	cmp	r3, #64	@ 0x40
 8005e1c:	d105      	bne.n	8005e2a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005e28:	e01e      	b.n	8005e68 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b41      	cmp	r3, #65	@ 0x41
 8005e2e:	d105      	bne.n	8005e3c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005e3a:	e015      	b.n	8005e68 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b1f      	cmp	r3, #31
 8005e40:	d808      	bhi.n	8005e54 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2101      	movs	r1, #1
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005e52:	e009      	b.n	8005e68 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 021f 	and.w	r2, r3, #31
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2101      	movs	r1, #1
 8005e60:	fa01 f202 	lsl.w	r2, r1, r2
 8005e64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e008      	b.n	8005e7e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e72:	f043 0208 	orr.w	r2, r3, #8
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	372c      	adds	r7, #44	@ 0x2c
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	08011468 	.word	0x08011468

08005e90 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005ec6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d002      	beq.n	8005ed4 <HAL_FDCAN_ActivateNotification+0x20>
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d155      	bne.n	8005f80 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d108      	bne.n	8005ef4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ef2:	e014      	b.n	8005f1e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4013      	ands	r3, r2
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d108      	bne.n	8005f16 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0202 	orr.w	r2, r2, #2
 8005f12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f14:	e003      	b.n	8005f1e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d009      	beq.n	8005f5a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa0 <HAL_FDCAN_ActivateNotification+0xec>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	6812      	ldr	r2, [r2, #0]
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	0f9b      	lsrs	r3, r3, #30
 8005f76:	490b      	ldr	r1, [pc, #44]	@ (8005fa4 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e008      	b.n	8005f92 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f86:	f043 0202 	orr.w	r2, r3, #2
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	3fcfffff 	.word	0x3fcfffff
 8005fa4:	4000a800 	.word	0x4000a800

08005fa8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b096      	sub	sp, #88	@ 0x58
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005fb0:	4b9a      	ldr	r3, [pc, #616]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	079b      	lsls	r3, r3, #30
 8005fb6:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005fb8:	4b98      	ldr	r3, [pc, #608]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	079b      	lsls	r3, r3, #30
 8005fbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005fce:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005fd8:	4013      	ands	r3, r2
 8005fda:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ffa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006008:	4013      	ands	r3, r2
 800600a:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006012:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8006016:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006020:	4013      	ands	r3, r2
 8006022:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800602e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006036:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006038:	4013      	ands	r3, r2
 800603a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800604c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800604e:	0a1b      	lsrs	r3, r3, #8
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d010      	beq.n	800607a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800606c:	651a      	str	r2, [r3, #80]	@ 0x50
 800606e:	4b6b      	ldr	r3, [pc, #428]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 8006070:	2200      	movs	r2, #0
 8006072:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa54 	bl	8006522 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800607a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607c:	0a9b      	lsrs	r3, r3, #10
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d01d      	beq.n	80060c2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006088:	0a9b      	lsrs	r3, r3, #10
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d017      	beq.n	80060c2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800609a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060a6:	4013      	ands	r3, r2
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80060b4:	4b59      	ldr	r3, [pc, #356]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80060ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fa07 	bl	80064d0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80060c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060ce:	4b54      	ldr	r3, [pc, #336]	@ (8006220 <HAL_FDCAN_IRQHandler+0x278>)
 80060d0:	400b      	ands	r3, r1
 80060d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80060d4:	4a51      	ldr	r2, [pc, #324]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 80060d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d8:	0f9b      	lsrs	r3, r3, #30
 80060da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80060dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f9c0 	bl	8006464 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80060e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00d      	beq.n	8006106 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80060f0:	4b4b      	ldr	r3, [pc, #300]	@ (8006220 <HAL_FDCAN_IRQHandler+0x278>)
 80060f2:	400b      	ands	r3, r1
 80060f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80060f6:	4a49      	ldr	r2, [pc, #292]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 80060f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060fa:	0f9b      	lsrs	r3, r3, #30
 80060fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80060fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f9ba 	bl	800647a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8006106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00d      	beq.n	8006128 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006112:	4b43      	ldr	r3, [pc, #268]	@ (8006220 <HAL_FDCAN_IRQHandler+0x278>)
 8006114:	400b      	ands	r3, r1
 8006116:	6513      	str	r3, [r2, #80]	@ 0x50
 8006118:	4a40      	ldr	r2, [pc, #256]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 800611a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800611c:	0f9b      	lsrs	r3, r3, #30
 800611e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006120:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb f802 	bl	800112c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006134:	4b3a      	ldr	r3, [pc, #232]	@ (8006220 <HAL_FDCAN_IRQHandler+0x278>)
 8006136:	400b      	ands	r3, r1
 8006138:	6513      	str	r3, [r2, #80]	@ 0x50
 800613a:	4a38      	ldr	r2, [pc, #224]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 800613c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613e:	0f9b      	lsrs	r3, r3, #30
 8006140:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006142:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f9a3 	bl	8006490 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800614a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614c:	0adb      	lsrs	r3, r3, #11
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d010      	beq.n	8006178 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006158:	0adb      	lsrs	r3, r3, #11
 800615a:	f003 0301 	and.w	r3, r3, #1
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00a      	beq.n	8006178 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800616a:	651a      	str	r2, [r3, #80]	@ 0x50
 800616c:	4b2b      	ldr	r3, [pc, #172]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 800616e:	2200      	movs	r2, #0
 8006170:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f997 	bl	80064a6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617a:	0a5b      	lsrs	r3, r3, #9
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01d      	beq.n	80061c0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006186:	0a5b      	lsrs	r3, r3, #9
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d017      	beq.n	80061c0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006198:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a4:	4013      	ands	r3, r2
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80061b2:	4b1a      	ldr	r3, [pc, #104]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80061b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f97d 	bl	80064ba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80061c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c2:	0cdb      	lsrs	r3, r3, #19
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d010      	beq.n	80061ee <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80061cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ce:	0cdb      	lsrs	r3, r3, #19
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80061e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80061e2:	4b0e      	ldr	r3, [pc, #56]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f97c 	bl	80064e6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80061ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d016      	beq.n	8006228 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80061fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d010      	beq.n	8006228 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800620e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006210:	4b02      	ldr	r3, [pc, #8]	@ (800621c <HAL_FDCAN_IRQHandler+0x274>)
 8006212:	2200      	movs	r2, #0
 8006214:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	e004      	b.n	8006224 <HAL_FDCAN_IRQHandler+0x27c>
 800621a:	bf00      	nop
 800621c:	4000a800 	.word	0x4000a800
 8006220:	3fcfffff 	.word	0x3fcfffff
 8006224:	f000 f969 	bl	80064fa <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622a:	0c9b      	lsrs	r3, r3, #18
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006236:	0c9b      	lsrs	r3, r3, #18
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00a      	beq.n	8006256 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006248:	651a      	str	r2, [r3, #80]	@ 0x50
 800624a:	4b83      	ldr	r3, [pc, #524]	@ (8006458 <HAL_FDCAN_IRQHandler+0x4b0>)
 800624c:	2200      	movs	r2, #0
 800624e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f95c 	bl	800650e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006258:	0c5b      	lsrs	r3, r3, #17
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d015      	beq.n	800628e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006264:	0c5b      	lsrs	r3, r3, #17
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00f      	beq.n	800628e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006276:	651a      	str	r2, [r3, #80]	@ 0x50
 8006278:	4b77      	ldr	r3, [pc, #476]	@ (8006458 <HAL_FDCAN_IRQHandler+0x4b0>)
 800627a:	2200      	movs	r2, #0
 800627c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006284:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800628e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00d      	beq.n	80062b0 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800629a:	4b70      	ldr	r3, [pc, #448]	@ (800645c <HAL_FDCAN_IRQHandler+0x4b4>)
 800629c:	400b      	ands	r3, r1
 800629e:	6513      	str	r3, [r2, #80]	@ 0x50
 80062a0:	4a6d      	ldr	r2, [pc, #436]	@ (8006458 <HAL_FDCAN_IRQHandler+0x4b0>)
 80062a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a4:	0f9b      	lsrs	r3, r3, #30
 80062a6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80062a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f94d 	bl	800654a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80062b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d011      	beq.n	80062da <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80062bc:	4b67      	ldr	r3, [pc, #412]	@ (800645c <HAL_FDCAN_IRQHandler+0x4b4>)
 80062be:	400b      	ands	r3, r1
 80062c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80062c2:	4a65      	ldr	r2, [pc, #404]	@ (8006458 <HAL_FDCAN_IRQHandler+0x4b0>)
 80062c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062c6:	0f9b      	lsrs	r3, r3, #30
 80062c8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80062d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a60      	ldr	r2, [pc, #384]	@ (8006460 <HAL_FDCAN_IRQHandler+0x4b8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	f040 80ac 	bne.w	800643e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80a4 	beq.w	800643e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f003 030f 	and.w	r3, r3, #15
 8006300:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800630a:	4013      	ands	r3, r2
 800630c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006318:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006322:	4013      	ands	r3, r2
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633a:	4013      	ands	r3, r2
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8006348:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	6a3a      	ldr	r2, [r7, #32]
 8006352:	4013      	ands	r3, r2
 8006354:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8006360:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	4013      	ands	r3, r2
 800636c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800638a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800638c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8e6 	bl	8006560 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063a0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80063a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f8e6 	bl	8006576 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	099b      	lsrs	r3, r3, #6
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d01a      	beq.n	80063ec <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	099b      	lsrs	r3, r3, #6
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d014      	beq.n	80063ec <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063d8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2240      	movs	r2, #64	@ 0x40
 80063e0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	6939      	ldr	r1, [r7, #16]
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f8d0 	bl	800658c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80063fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f8d1 	bl	80065a4 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00b      	beq.n	8006420 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00b      	beq.n	800643e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f874 	bl	8006536 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800644e:	bf00      	nop
 8006450:	3758      	adds	r7, #88	@ 0x58
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	4000a800 	.word	0x4000a800
 800645c:	3fcfffff 	.word	0x3fcfffff
 8006460:	4000a000 	.word	0x4000a000

08006464 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80064da:	bf00      	nop
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80064ee:	bf00      	nop
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800656a:	bf00      	nop
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80065d2:	4ba7      	ldr	r3, [pc, #668]	@ (8006870 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	0091      	lsls	r1, r2, #2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	430b      	orrs	r3, r1
 80065e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ec:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	041a      	lsls	r2, r3, #16
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4413      	add	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006612:	4b97      	ldr	r3, [pc, #604]	@ (8006870 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006614:	4013      	ands	r3, r2
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	0091      	lsls	r1, r2, #2
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	430b      	orrs	r3, r1
 8006620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006634:	041a      	lsls	r2, r3, #16
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	4413      	add	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006654:	4b86      	ldr	r3, [pc, #536]	@ (8006870 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006656:	4013      	ands	r3, r2
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	0091      	lsls	r1, r2, #2
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	430b      	orrs	r3, r1
 8006662:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800666e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	041a      	lsls	r2, r3, #16
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800668a:	fb02 f303 	mul.w	r3, r2, r3
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	4413      	add	r3, r2
 8006692:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800669c:	4b74      	ldr	r3, [pc, #464]	@ (8006870 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800669e:	4013      	ands	r3, r2
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	0091      	lsls	r1, r2, #2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6812      	ldr	r2, [r2, #0]
 80066a8:	430b      	orrs	r3, r1
 80066aa:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80066b6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066be:	041a      	lsls	r2, r3, #16
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80066d2:	fb02 f303 	mul.w	r3, r2, r3
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	4413      	add	r3, r2
 80066da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80066e4:	4b62      	ldr	r3, [pc, #392]	@ (8006870 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	0091      	lsls	r1, r2, #2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006710:	4b57      	ldr	r3, [pc, #348]	@ (8006870 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006712:	4013      	ands	r3, r2
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	0091      	lsls	r1, r2, #2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	430b      	orrs	r3, r1
 800671e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800672a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	041a      	lsls	r2, r3, #16
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	4413      	add	r3, r2
 8006748:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006752:	4b47      	ldr	r3, [pc, #284]	@ (8006870 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006754:	4013      	ands	r3, r2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	0091      	lsls	r1, r2, #2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	430b      	orrs	r3, r1
 8006760:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800676c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	041a      	lsls	r2, r3, #16
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006788:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006790:	061a      	lsls	r2, r3, #24
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a0:	4b34      	ldr	r3, [pc, #208]	@ (8006874 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80067a2:	4413      	add	r3, r2
 80067a4:	009a      	lsls	r2, r3, #2
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	441a      	add	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80067d6:	fb01 f303 	mul.w	r3, r1, r3
 80067da:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80067dc:	441a      	add	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80067f4:	441a      	add	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8006806:	fb01 f303 	mul.w	r3, r1, r3
 800680a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800680c:	441a      	add	r2, r3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	441a      	add	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006836:	fb01 f303 	mul.w	r3, r1, r3
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006858:	441a      	add	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006866:	4a04      	ldr	r2, [pc, #16]	@ (8006878 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d915      	bls.n	8006898 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800686c:	e006      	b.n	800687c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800686e:	bf00      	nop
 8006870:	ffff0003 	.word	0xffff0003
 8006874:	10002b00 	.word	0x10002b00
 8006878:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2203      	movs	r2, #3
 8006890:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e010      	b.n	80068ba <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e005      	b.n	80068ac <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3304      	adds	r3, #4
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d3f3      	bcc.n	80068a0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop

080068c8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b089      	sub	sp, #36	@ 0x24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80068e6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80068ee:	4313      	orrs	r3, r2
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e00a      	b.n	800690a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80068fc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8006902:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006904:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006908:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006914:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800691a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006920:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	3304      	adds	r3, #4
 800694c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	3304      	adds	r3, #4
 8006958:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	e020      	b.n	80069a2 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3303      	adds	r3, #3
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	4413      	add	r3, r2
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	3302      	adds	r3, #2
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	440b      	add	r3, r1
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006978:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	3301      	adds	r3, #1
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	440b      	add	r3, r1
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006986:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	440a      	add	r2, r1
 800698e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006990:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	3304      	adds	r3, #4
 800699a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	3304      	adds	r3, #4
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	4a06      	ldr	r2, [pc, #24]	@ (80069c0 <FDCAN_CopyMessageToRAM+0xf8>)
 80069a8:	5cd3      	ldrb	r3, [r2, r3]
 80069aa:	461a      	mov	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d3d6      	bcc.n	8006960 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	3724      	adds	r7, #36	@ 0x24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	08011468 	.word	0x08011468

080069c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	@ 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069d2:	4b89      	ldr	r3, [pc, #548]	@ (8006bf8 <HAL_GPIO_Init+0x234>)
 80069d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069d6:	e194      	b.n	8006d02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	2101      	movs	r1, #1
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	fa01 f303 	lsl.w	r3, r1, r3
 80069e4:	4013      	ands	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 8186 	beq.w	8006cfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d005      	beq.n	8006a08 <HAL_GPIO_Init+0x44>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d130      	bne.n	8006a6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	2203      	movs	r2, #3
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a3e:	2201      	movs	r2, #1
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	43db      	mvns	r3, r3
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	091b      	lsrs	r3, r3, #4
 8006a54:	f003 0201 	and.w	r2, r3, #1
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f003 0303 	and.w	r3, r3, #3
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d017      	beq.n	8006aa6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	2203      	movs	r2, #3
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d123      	bne.n	8006afa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	08da      	lsrs	r2, r3, #3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3208      	adds	r2, #8
 8006aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	220f      	movs	r2, #15
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	08da      	lsrs	r2, r3, #3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3208      	adds	r2, #8
 8006af4:	69b9      	ldr	r1, [r7, #24]
 8006af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	2203      	movs	r2, #3
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f003 0203 	and.w	r2, r3, #3
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80e0 	beq.w	8006cfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bfc <HAL_GPIO_Init+0x238>)
 8006b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b42:	4a2e      	ldr	r2, [pc, #184]	@ (8006bfc <HAL_GPIO_Init+0x238>)
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006bfc <HAL_GPIO_Init+0x238>)
 8006b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b5a:	4a29      	ldr	r2, [pc, #164]	@ (8006c00 <HAL_GPIO_Init+0x23c>)
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	089b      	lsrs	r3, r3, #2
 8006b60:	3302      	adds	r3, #2
 8006b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	220f      	movs	r2, #15
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43db      	mvns	r3, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a20      	ldr	r2, [pc, #128]	@ (8006c04 <HAL_GPIO_Init+0x240>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d052      	beq.n	8006c2c <HAL_GPIO_Init+0x268>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1f      	ldr	r2, [pc, #124]	@ (8006c08 <HAL_GPIO_Init+0x244>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d031      	beq.n	8006bf2 <HAL_GPIO_Init+0x22e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1e      	ldr	r2, [pc, #120]	@ (8006c0c <HAL_GPIO_Init+0x248>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d02b      	beq.n	8006bee <HAL_GPIO_Init+0x22a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	@ (8006c10 <HAL_GPIO_Init+0x24c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d025      	beq.n	8006bea <HAL_GPIO_Init+0x226>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c14 <HAL_GPIO_Init+0x250>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d01f      	beq.n	8006be6 <HAL_GPIO_Init+0x222>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c18 <HAL_GPIO_Init+0x254>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d019      	beq.n	8006be2 <HAL_GPIO_Init+0x21e>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c1c <HAL_GPIO_Init+0x258>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <HAL_GPIO_Init+0x21a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a19      	ldr	r2, [pc, #100]	@ (8006c20 <HAL_GPIO_Init+0x25c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00d      	beq.n	8006bda <HAL_GPIO_Init+0x216>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a18      	ldr	r2, [pc, #96]	@ (8006c24 <HAL_GPIO_Init+0x260>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d007      	beq.n	8006bd6 <HAL_GPIO_Init+0x212>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a17      	ldr	r2, [pc, #92]	@ (8006c28 <HAL_GPIO_Init+0x264>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d101      	bne.n	8006bd2 <HAL_GPIO_Init+0x20e>
 8006bce:	2309      	movs	r3, #9
 8006bd0:	e02d      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006bd2:	230a      	movs	r3, #10
 8006bd4:	e02b      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	e029      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006bda:	2307      	movs	r3, #7
 8006bdc:	e027      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006bde:	2306      	movs	r3, #6
 8006be0:	e025      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006be2:	2305      	movs	r3, #5
 8006be4:	e023      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006be6:	2304      	movs	r3, #4
 8006be8:	e021      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006bea:	2303      	movs	r3, #3
 8006bec:	e01f      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e01d      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e01b      	b.n	8006c2e <HAL_GPIO_Init+0x26a>
 8006bf6:	bf00      	nop
 8006bf8:	58000080 	.word	0x58000080
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	58000400 	.word	0x58000400
 8006c04:	58020000 	.word	0x58020000
 8006c08:	58020400 	.word	0x58020400
 8006c0c:	58020800 	.word	0x58020800
 8006c10:	58020c00 	.word	0x58020c00
 8006c14:	58021000 	.word	0x58021000
 8006c18:	58021400 	.word	0x58021400
 8006c1c:	58021800 	.word	0x58021800
 8006c20:	58021c00 	.word	0x58021c00
 8006c24:	58022000 	.word	0x58022000
 8006c28:	58022400 	.word	0x58022400
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	69fa      	ldr	r2, [r7, #28]
 8006c30:	f002 0203 	and.w	r2, r2, #3
 8006c34:	0092      	lsls	r2, r2, #2
 8006c36:	4093      	lsls	r3, r2
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c3e:	4938      	ldr	r1, [pc, #224]	@ (8006d20 <HAL_GPIO_Init+0x35c>)
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	089b      	lsrs	r3, r3, #2
 8006c44:	3302      	adds	r3, #2
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	43db      	mvns	r3, r3
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	43db      	mvns	r3, r3
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	43db      	mvns	r3, r3
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f47f ae63 	bne.w	80069d8 <HAL_GPIO_Init+0x14>
  }
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	3724      	adds	r7, #36	@ 0x24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	58000400 	.word	0x58000400

08006d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	807b      	strh	r3, [r7, #2]
 8006d30:	4613      	mov	r3, r2
 8006d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d34:	787b      	ldrb	r3, [r7, #1]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d3a:	887a      	ldrh	r2, [r7, #2]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d40:	e003      	b.n	8006d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d42:	887b      	ldrh	r3, [r7, #2]
 8006d44:	041a      	lsls	r2, r3, #16
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	619a      	str	r2, [r3, #24]
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006d68:	887a      	ldrh	r2, [r7, #2]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	041a      	lsls	r2, r3, #16
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	43d9      	mvns	r1, r3
 8006d74:	887b      	ldrh	r3, [r7, #2]
 8006d76:	400b      	ands	r3, r1
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	619a      	str	r2, [r3, #24]
}
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006d94:	4b19      	ldr	r3, [pc, #100]	@ (8006dfc <HAL_PWREx_ConfigSupply+0x70>)
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d00a      	beq.n	8006db6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006da0:	4b16      	ldr	r3, [pc, #88]	@ (8006dfc <HAL_PWREx_ConfigSupply+0x70>)
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d001      	beq.n	8006db2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e01f      	b.n	8006df2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	e01d      	b.n	8006df2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006db6:	4b11      	ldr	r3, [pc, #68]	@ (8006dfc <HAL_PWREx_ConfigSupply+0x70>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f023 0207 	bic.w	r2, r3, #7
 8006dbe:	490f      	ldr	r1, [pc, #60]	@ (8006dfc <HAL_PWREx_ConfigSupply+0x70>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006dc6:	f7fe fa9b 	bl	8005300 <HAL_GetTick>
 8006dca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006dcc:	e009      	b.n	8006de2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dce:	f7fe fa97 	bl	8005300 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ddc:	d901      	bls.n	8006de2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e007      	b.n	8006df2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006de2:	4b06      	ldr	r3, [pc, #24]	@ (8006dfc <HAL_PWREx_ConfigSupply+0x70>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dee:	d1ee      	bne.n	8006dce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	58024800 	.word	0x58024800

08006e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	@ 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f000 bc48 	b.w	80076a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 8088 	beq.w	8006f32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e22:	4b99      	ldr	r3, [pc, #612]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e2c:	4b96      	ldr	r3, [pc, #600]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d007      	beq.n	8006e48 <HAL_RCC_OscConfig+0x48>
 8006e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3a:	2b18      	cmp	r3, #24
 8006e3c:	d111      	bne.n	8006e62 <HAL_RCC_OscConfig+0x62>
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d10c      	bne.n	8006e62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e48:	4b8f      	ldr	r3, [pc, #572]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d06d      	beq.n	8006f30 <HAL_RCC_OscConfig+0x130>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d169      	bne.n	8006f30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f000 bc21 	b.w	80076a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCC_OscConfig+0x7a>
 8006e6c:	4b86      	ldr	r3, [pc, #536]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a85      	ldr	r2, [pc, #532]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	e02e      	b.n	8006ed8 <HAL_RCC_OscConfig+0xd8>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x9c>
 8006e82:	4b81      	ldr	r3, [pc, #516]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a80      	ldr	r2, [pc, #512]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	4b7e      	ldr	r3, [pc, #504]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a7d      	ldr	r2, [pc, #500]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006e94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	e01d      	b.n	8006ed8 <HAL_RCC_OscConfig+0xd8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_RCC_OscConfig+0xc0>
 8006ea6:	4b78      	ldr	r3, [pc, #480]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a77      	ldr	r2, [pc, #476]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	4b75      	ldr	r3, [pc, #468]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a74      	ldr	r2, [pc, #464]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	e00b      	b.n	8006ed8 <HAL_RCC_OscConfig+0xd8>
 8006ec0:	4b71      	ldr	r3, [pc, #452]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a70      	ldr	r2, [pc, #448]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	4b6e      	ldr	r3, [pc, #440]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a6d      	ldr	r2, [pc, #436]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d013      	beq.n	8006f08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fe fa0e 	bl	8005300 <HAL_GetTick>
 8006ee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ee8:	f7fe fa0a 	bl	8005300 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b64      	cmp	r3, #100	@ 0x64
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e3d4      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006efa:	4b63      	ldr	r3, [pc, #396]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0f0      	beq.n	8006ee8 <HAL_RCC_OscConfig+0xe8>
 8006f06:	e014      	b.n	8006f32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f08:	f7fe f9fa 	bl	8005300 <HAL_GetTick>
 8006f0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f0e:	e008      	b.n	8006f22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f10:	f7fe f9f6 	bl	8005300 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b64      	cmp	r3, #100	@ 0x64
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e3c0      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f22:	4b59      	ldr	r3, [pc, #356]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f0      	bne.n	8006f10 <HAL_RCC_OscConfig+0x110>
 8006f2e:	e000      	b.n	8006f32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 80ca 	beq.w	80070d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f40:	4b51      	ldr	r3, [pc, #324]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d007      	beq.n	8006f66 <HAL_RCC_OscConfig+0x166>
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	2b18      	cmp	r3, #24
 8006f5a:	d156      	bne.n	800700a <HAL_RCC_OscConfig+0x20a>
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d151      	bne.n	800700a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f66:	4b48      	ldr	r3, [pc, #288]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_RCC_OscConfig+0x17e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e392      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f7e:	4b42      	ldr	r3, [pc, #264]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 0219 	bic.w	r2, r3, #25
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	493f      	ldr	r1, [pc, #252]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f90:	f7fe f9b6 	bl	8005300 <HAL_GetTick>
 8006f94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f98:	f7fe f9b2 	bl	8005300 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e37c      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006faa:	4b37      	ldr	r3, [pc, #220]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f0      	beq.n	8006f98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb6:	f7fe f9d3 	bl	8005360 <HAL_GetREVID>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d817      	bhi.n	8006ff4 <HAL_RCC_OscConfig+0x1f4>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d108      	bne.n	8006fde <HAL_RCC_OscConfig+0x1de>
 8006fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fdc:	e07a      	b.n	80070d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fde:	4b2a      	ldr	r3, [pc, #168]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	031b      	lsls	r3, r3, #12
 8006fec:	4926      	ldr	r1, [pc, #152]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ff2:	e06f      	b.n	80070d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff4:	4b24      	ldr	r3, [pc, #144]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	061b      	lsls	r3, r3, #24
 8007002:	4921      	ldr	r1, [pc, #132]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8007004:	4313      	orrs	r3, r2
 8007006:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007008:	e064      	b.n	80070d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d047      	beq.n	80070a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007012:	4b1d      	ldr	r3, [pc, #116]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f023 0219 	bic.w	r2, r3, #25
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	491a      	ldr	r1, [pc, #104]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8007020:	4313      	orrs	r3, r2
 8007022:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fe f96c 	bl	8005300 <HAL_GetTick>
 8007028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800702c:	f7fe f968 	bl	8005300 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e332      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800703e:	4b12      	ldr	r3, [pc, #72]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800704a:	f7fe f989 	bl	8005360 <HAL_GetREVID>
 800704e:	4603      	mov	r3, r0
 8007050:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007054:	4293      	cmp	r3, r2
 8007056:	d819      	bhi.n	800708c <HAL_RCC_OscConfig+0x28c>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b40      	cmp	r3, #64	@ 0x40
 800705e:	d108      	bne.n	8007072 <HAL_RCC_OscConfig+0x272>
 8007060:	4b09      	ldr	r3, [pc, #36]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007068:	4a07      	ldr	r2, [pc, #28]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 800706a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800706e:	6053      	str	r3, [r2, #4]
 8007070:	e030      	b.n	80070d4 <HAL_RCC_OscConfig+0x2d4>
 8007072:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	031b      	lsls	r3, r3, #12
 8007080:	4901      	ldr	r1, [pc, #4]	@ (8007088 <HAL_RCC_OscConfig+0x288>)
 8007082:	4313      	orrs	r3, r2
 8007084:	604b      	str	r3, [r1, #4]
 8007086:	e025      	b.n	80070d4 <HAL_RCC_OscConfig+0x2d4>
 8007088:	58024400 	.word	0x58024400
 800708c:	4b9a      	ldr	r3, [pc, #616]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	061b      	lsls	r3, r3, #24
 800709a:	4997      	ldr	r1, [pc, #604]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800709c:	4313      	orrs	r3, r2
 800709e:	604b      	str	r3, [r1, #4]
 80070a0:	e018      	b.n	80070d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a2:	4b95      	ldr	r3, [pc, #596]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a94      	ldr	r2, [pc, #592]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ae:	f7fe f927 	bl	8005300 <HAL_GetTick>
 80070b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070b4:	e008      	b.n	80070c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b6:	f7fe f923 	bl	8005300 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d901      	bls.n	80070c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e2ed      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070c8:	4b8b      	ldr	r3, [pc, #556]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1f0      	bne.n	80070b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80a9 	beq.w	8007234 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070e2:	4b85      	ldr	r3, [pc, #532]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070ec:	4b82      	ldr	r3, [pc, #520]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80070ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d007      	beq.n	8007108 <HAL_RCC_OscConfig+0x308>
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2b18      	cmp	r3, #24
 80070fc:	d13a      	bne.n	8007174 <HAL_RCC_OscConfig+0x374>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d135      	bne.n	8007174 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007108:	4b7b      	ldr	r3, [pc, #492]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_RCC_OscConfig+0x320>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	2b80      	cmp	r3, #128	@ 0x80
 800711a:	d001      	beq.n	8007120 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e2c1      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007120:	f7fe f91e 	bl	8005360 <HAL_GetREVID>
 8007124:	4603      	mov	r3, r0
 8007126:	f241 0203 	movw	r2, #4099	@ 0x1003
 800712a:	4293      	cmp	r3, r2
 800712c:	d817      	bhi.n	800715e <HAL_RCC_OscConfig+0x35e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	2b20      	cmp	r3, #32
 8007134:	d108      	bne.n	8007148 <HAL_RCC_OscConfig+0x348>
 8007136:	4b70      	ldr	r3, [pc, #448]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800713e:	4a6e      	ldr	r2, [pc, #440]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007140:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007144:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007146:	e075      	b.n	8007234 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007148:	4b6b      	ldr	r3, [pc, #428]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	069b      	lsls	r3, r3, #26
 8007156:	4968      	ldr	r1, [pc, #416]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007158:	4313      	orrs	r3, r2
 800715a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800715c:	e06a      	b.n	8007234 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800715e:	4b66      	ldr	r3, [pc, #408]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	061b      	lsls	r3, r3, #24
 800716c:	4962      	ldr	r1, [pc, #392]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800716e:	4313      	orrs	r3, r2
 8007170:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007172:	e05f      	b.n	8007234 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d042      	beq.n	8007202 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800717c:	4b5e      	ldr	r3, [pc, #376]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a5d      	ldr	r2, [pc, #372]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007188:	f7fe f8ba 	bl	8005300 <HAL_GetTick>
 800718c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007190:	f7fe f8b6 	bl	8005300 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b02      	cmp	r3, #2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e280      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071a2:	4b55      	ldr	r3, [pc, #340]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f0      	beq.n	8007190 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071ae:	f7fe f8d7 	bl	8005360 <HAL_GetREVID>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d817      	bhi.n	80071ec <HAL_RCC_OscConfig+0x3ec>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d108      	bne.n	80071d6 <HAL_RCC_OscConfig+0x3d6>
 80071c4:	4b4c      	ldr	r3, [pc, #304]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80071cc:	4a4a      	ldr	r2, [pc, #296]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80071ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071d2:	6053      	str	r3, [r2, #4]
 80071d4:	e02e      	b.n	8007234 <HAL_RCC_OscConfig+0x434>
 80071d6:	4b48      	ldr	r3, [pc, #288]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	069b      	lsls	r3, r3, #26
 80071e4:	4944      	ldr	r1, [pc, #272]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	604b      	str	r3, [r1, #4]
 80071ea:	e023      	b.n	8007234 <HAL_RCC_OscConfig+0x434>
 80071ec:	4b42      	ldr	r3, [pc, #264]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	061b      	lsls	r3, r3, #24
 80071fa:	493f      	ldr	r1, [pc, #252]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60cb      	str	r3, [r1, #12]
 8007200:	e018      	b.n	8007234 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007202:	4b3d      	ldr	r3, [pc, #244]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a3c      	ldr	r2, [pc, #240]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007208:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800720c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720e:	f7fe f877 	bl	8005300 <HAL_GetTick>
 8007212:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007214:	e008      	b.n	8007228 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007216:	f7fe f873 	bl	8005300 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e23d      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007228:	4b33      	ldr	r3, [pc, #204]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1f0      	bne.n	8007216 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d036      	beq.n	80072ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d019      	beq.n	800727c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007248:	4b2b      	ldr	r3, [pc, #172]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800724a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800724c:	4a2a      	ldr	r2, [pc, #168]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007254:	f7fe f854 	bl	8005300 <HAL_GetTick>
 8007258:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800725c:	f7fe f850 	bl	8005300 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e21a      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800726e:	4b22      	ldr	r3, [pc, #136]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0f0      	beq.n	800725c <HAL_RCC_OscConfig+0x45c>
 800727a:	e018      	b.n	80072ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800727c:	4b1e      	ldr	r3, [pc, #120]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 800727e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007280:	4a1d      	ldr	r2, [pc, #116]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 8007282:	f023 0301 	bic.w	r3, r3, #1
 8007286:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007288:	f7fe f83a 	bl	8005300 <HAL_GetTick>
 800728c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007290:	f7fe f836 	bl	8005300 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b02      	cmp	r3, #2
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e200      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072a2:	4b15      	ldr	r3, [pc, #84]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80072a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1f0      	bne.n	8007290 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d039      	beq.n	800732e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01c      	beq.n	80072fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a0c      	ldr	r2, [pc, #48]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80072c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ce:	f7fe f817 	bl	8005300 <HAL_GetTick>
 80072d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072d4:	e008      	b.n	80072e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072d6:	f7fe f813 	bl	8005300 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d901      	bls.n	80072e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e1dd      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072e8:	4b03      	ldr	r3, [pc, #12]	@ (80072f8 <HAL_RCC_OscConfig+0x4f8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0f0      	beq.n	80072d6 <HAL_RCC_OscConfig+0x4d6>
 80072f4:	e01b      	b.n	800732e <HAL_RCC_OscConfig+0x52e>
 80072f6:	bf00      	nop
 80072f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072fc:	4b9b      	ldr	r3, [pc, #620]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a9a      	ldr	r2, [pc, #616]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007302:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007306:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007308:	f7fd fffa 	bl	8005300 <HAL_GetTick>
 800730c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800730e:	e008      	b.n	8007322 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007310:	f7fd fff6 	bl	8005300 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e1c0      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007322:	4b92      	ldr	r3, [pc, #584]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1f0      	bne.n	8007310 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8081 	beq.w	800743e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800733c:	4b8c      	ldr	r3, [pc, #560]	@ (8007570 <HAL_RCC_OscConfig+0x770>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a8b      	ldr	r2, [pc, #556]	@ (8007570 <HAL_RCC_OscConfig+0x770>)
 8007342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007348:	f7fd ffda 	bl	8005300 <HAL_GetTick>
 800734c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007350:	f7fd ffd6 	bl	8005300 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b64      	cmp	r3, #100	@ 0x64
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e1a0      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007362:	4b83      	ldr	r3, [pc, #524]	@ (8007570 <HAL_RCC_OscConfig+0x770>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0f0      	beq.n	8007350 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d106      	bne.n	8007384 <HAL_RCC_OscConfig+0x584>
 8007376:	4b7d      	ldr	r3, [pc, #500]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737a:	4a7c      	ldr	r2, [pc, #496]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	6713      	str	r3, [r2, #112]	@ 0x70
 8007382:	e02d      	b.n	80073e0 <HAL_RCC_OscConfig+0x5e0>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10c      	bne.n	80073a6 <HAL_RCC_OscConfig+0x5a6>
 800738c:	4b77      	ldr	r3, [pc, #476]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 800738e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007390:	4a76      	ldr	r2, [pc, #472]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	6713      	str	r3, [r2, #112]	@ 0x70
 8007398:	4b74      	ldr	r3, [pc, #464]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 800739a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739c:	4a73      	ldr	r2, [pc, #460]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 800739e:	f023 0304 	bic.w	r3, r3, #4
 80073a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a4:	e01c      	b.n	80073e0 <HAL_RCC_OscConfig+0x5e0>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d10c      	bne.n	80073c8 <HAL_RCC_OscConfig+0x5c8>
 80073ae:	4b6f      	ldr	r3, [pc, #444]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b2:	4a6e      	ldr	r2, [pc, #440]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80073b4:	f043 0304 	orr.w	r3, r3, #4
 80073b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ba:	4b6c      	ldr	r3, [pc, #432]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073be:	4a6b      	ldr	r2, [pc, #428]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073c6:	e00b      	b.n	80073e0 <HAL_RCC_OscConfig+0x5e0>
 80073c8:	4b68      	ldr	r3, [pc, #416]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	4a67      	ldr	r2, [pc, #412]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80073ce:	f023 0301 	bic.w	r3, r3, #1
 80073d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073d4:	4b65      	ldr	r3, [pc, #404]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80073d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d8:	4a64      	ldr	r2, [pc, #400]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80073da:	f023 0304 	bic.w	r3, r3, #4
 80073de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d015      	beq.n	8007414 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e8:	f7fd ff8a 	bl	8005300 <HAL_GetTick>
 80073ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073ee:	e00a      	b.n	8007406 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f0:	f7fd ff86 	bl	8005300 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073fe:	4293      	cmp	r3, r2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e14e      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007406:	4b59      	ldr	r3, [pc, #356]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0ee      	beq.n	80073f0 <HAL_RCC_OscConfig+0x5f0>
 8007412:	e014      	b.n	800743e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007414:	f7fd ff74 	bl	8005300 <HAL_GetTick>
 8007418:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800741a:	e00a      	b.n	8007432 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800741c:	f7fd ff70 	bl	8005300 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800742a:	4293      	cmp	r3, r2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e138      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007432:	4b4e      	ldr	r3, [pc, #312]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1ee      	bne.n	800741c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 812d 	beq.w	80076a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007448:	4b48      	ldr	r3, [pc, #288]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007450:	2b18      	cmp	r3, #24
 8007452:	f000 80bd 	beq.w	80075d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745a:	2b02      	cmp	r3, #2
 800745c:	f040 809e 	bne.w	800759c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007460:	4b42      	ldr	r3, [pc, #264]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a41      	ldr	r2, [pc, #260]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800746a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746c:	f7fd ff48 	bl	8005300 <HAL_GetTick>
 8007470:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007474:	f7fd ff44 	bl	8005300 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e10e      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007486:	4b39      	ldr	r3, [pc, #228]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007492:	4b36      	ldr	r3, [pc, #216]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007494:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007496:	4b37      	ldr	r3, [pc, #220]	@ (8007574 <HAL_RCC_OscConfig+0x774>)
 8007498:	4013      	ands	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074a2:	0112      	lsls	r2, r2, #4
 80074a4:	430a      	orrs	r2, r1
 80074a6:	4931      	ldr	r1, [pc, #196]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	628b      	str	r3, [r1, #40]	@ 0x28
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b0:	3b01      	subs	r3, #1
 80074b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ba:	3b01      	subs	r3, #1
 80074bc:	025b      	lsls	r3, r3, #9
 80074be:	b29b      	uxth	r3, r3
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	3b01      	subs	r3, #1
 80074c8:	041b      	lsls	r3, r3, #16
 80074ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074d4:	3b01      	subs	r3, #1
 80074d6:	061b      	lsls	r3, r3, #24
 80074d8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074dc:	4923      	ldr	r1, [pc, #140]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80074e2:	4b22      	ldr	r3, [pc, #136]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80074e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e6:	4a21      	ldr	r2, [pc, #132]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074ee:	4b1f      	ldr	r3, [pc, #124]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80074f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074f2:	4b21      	ldr	r3, [pc, #132]	@ (8007578 <HAL_RCC_OscConfig+0x778>)
 80074f4:	4013      	ands	r3, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80074fa:	00d2      	lsls	r2, r2, #3
 80074fc:	491b      	ldr	r1, [pc, #108]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007502:	4b1a      	ldr	r3, [pc, #104]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007506:	f023 020c 	bic.w	r2, r3, #12
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750e:	4917      	ldr	r1, [pc, #92]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007510:	4313      	orrs	r3, r2
 8007512:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007514:	4b15      	ldr	r3, [pc, #84]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007518:	f023 0202 	bic.w	r2, r3, #2
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007520:	4912      	ldr	r1, [pc, #72]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007522:	4313      	orrs	r3, r2
 8007524:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007526:	4b11      	ldr	r3, [pc, #68]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752a:	4a10      	ldr	r2, [pc, #64]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 800752c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007530:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007532:	4b0e      	ldr	r3, [pc, #56]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	4a0d      	ldr	r2, [pc, #52]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800753c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800753e:	4b0b      	ldr	r3, [pc, #44]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007542:	4a0a      	ldr	r2, [pc, #40]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007548:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800754a:	4b08      	ldr	r3, [pc, #32]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	4a07      	ldr	r2, [pc, #28]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007556:	4b05      	ldr	r3, [pc, #20]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a04      	ldr	r2, [pc, #16]	@ (800756c <HAL_RCC_OscConfig+0x76c>)
 800755c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007562:	f7fd fecd 	bl	8005300 <HAL_GetTick>
 8007566:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007568:	e011      	b.n	800758e <HAL_RCC_OscConfig+0x78e>
 800756a:	bf00      	nop
 800756c:	58024400 	.word	0x58024400
 8007570:	58024800 	.word	0x58024800
 8007574:	fffffc0c 	.word	0xfffffc0c
 8007578:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800757c:	f7fd fec0 	bl	8005300 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d901      	bls.n	800758e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e08a      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800758e:	4b47      	ldr	r3, [pc, #284]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d0f0      	beq.n	800757c <HAL_RCC_OscConfig+0x77c>
 800759a:	e082      	b.n	80076a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800759c:	4b43      	ldr	r3, [pc, #268]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a42      	ldr	r2, [pc, #264]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 80075a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a8:	f7fd feaa 	bl	8005300 <HAL_GetTick>
 80075ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075ae:	e008      	b.n	80075c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075b0:	f7fd fea6 	bl	8005300 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e070      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075c2:	4b3a      	ldr	r3, [pc, #232]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f0      	bne.n	80075b0 <HAL_RCC_OscConfig+0x7b0>
 80075ce:	e068      	b.n	80076a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075d0:	4b36      	ldr	r3, [pc, #216]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075d6:	4b35      	ldr	r3, [pc, #212]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 80075d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d031      	beq.n	8007648 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f003 0203 	and.w	r2, r3, #3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d12a      	bne.n	8007648 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	091b      	lsrs	r3, r3, #4
 80075f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075fe:	429a      	cmp	r2, r3
 8007600:	d122      	bne.n	8007648 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800760e:	429a      	cmp	r2, r3
 8007610:	d11a      	bne.n	8007648 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	0a5b      	lsrs	r3, r3, #9
 8007616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800761e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007620:	429a      	cmp	r2, r3
 8007622:	d111      	bne.n	8007648 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	0c1b      	lsrs	r3, r3, #16
 8007628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007632:	429a      	cmp	r2, r3
 8007634:	d108      	bne.n	8007648 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	0e1b      	lsrs	r3, r3, #24
 800763a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007642:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007644:	429a      	cmp	r2, r3
 8007646:	d001      	beq.n	800764c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e02b      	b.n	80076a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800764c:	4b17      	ldr	r3, [pc, #92]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 800764e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007650:	08db      	lsrs	r3, r3, #3
 8007652:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007656:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	429a      	cmp	r2, r3
 8007660:	d01f      	beq.n	80076a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007662:	4b12      	ldr	r3, [pc, #72]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 8007664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007666:	4a11      	ldr	r2, [pc, #68]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 8007668:	f023 0301 	bic.w	r3, r3, #1
 800766c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800766e:	f7fd fe47 	bl	8005300 <HAL_GetTick>
 8007672:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007674:	bf00      	nop
 8007676:	f7fd fe43 	bl	8005300 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	4293      	cmp	r3, r2
 8007680:	d0f9      	beq.n	8007676 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007682:	4b0a      	ldr	r3, [pc, #40]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 8007684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007686:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <HAL_RCC_OscConfig+0x8b0>)
 8007688:	4013      	ands	r3, r2
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800768e:	00d2      	lsls	r2, r2, #3
 8007690:	4906      	ldr	r1, [pc, #24]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 8007692:	4313      	orrs	r3, r2
 8007694:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007696:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 8007698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769a:	4a04      	ldr	r2, [pc, #16]	@ (80076ac <HAL_RCC_OscConfig+0x8ac>)
 800769c:	f043 0301 	orr.w	r3, r3, #1
 80076a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3730      	adds	r7, #48	@ 0x30
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	58024400 	.word	0x58024400
 80076b0:	ffff0007 	.word	0xffff0007

080076b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e19c      	b.n	8007a02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076c8:	4b8a      	ldr	r3, [pc, #552]	@ (80078f4 <HAL_RCC_ClockConfig+0x240>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d910      	bls.n	80076f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076d6:	4b87      	ldr	r3, [pc, #540]	@ (80078f4 <HAL_RCC_ClockConfig+0x240>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f023 020f 	bic.w	r2, r3, #15
 80076de:	4985      	ldr	r1, [pc, #532]	@ (80078f4 <HAL_RCC_ClockConfig+0x240>)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e6:	4b83      	ldr	r3, [pc, #524]	@ (80078f4 <HAL_RCC_ClockConfig+0x240>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d001      	beq.n	80076f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e184      	b.n	8007a02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	2b00      	cmp	r3, #0
 8007702:	d010      	beq.n	8007726 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	4b7b      	ldr	r3, [pc, #492]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007710:	429a      	cmp	r2, r3
 8007712:	d908      	bls.n	8007726 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007714:	4b78      	ldr	r3, [pc, #480]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	4975      	ldr	r1, [pc, #468]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007722:	4313      	orrs	r3, r2
 8007724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d010      	beq.n	8007754 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695a      	ldr	r2, [r3, #20]
 8007736:	4b70      	ldr	r3, [pc, #448]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800773e:	429a      	cmp	r2, r3
 8007740:	d908      	bls.n	8007754 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007742:	4b6d      	ldr	r3, [pc, #436]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	496a      	ldr	r1, [pc, #424]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007750:	4313      	orrs	r3, r2
 8007752:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0310 	and.w	r3, r3, #16
 800775c:	2b00      	cmp	r3, #0
 800775e:	d010      	beq.n	8007782 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699a      	ldr	r2, [r3, #24]
 8007764:	4b64      	ldr	r3, [pc, #400]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800776c:	429a      	cmp	r2, r3
 800776e:	d908      	bls.n	8007782 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007770:	4b61      	ldr	r3, [pc, #388]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	495e      	ldr	r1, [pc, #376]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 800777e:	4313      	orrs	r3, r2
 8007780:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	d010      	beq.n	80077b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69da      	ldr	r2, [r3, #28]
 8007792:	4b59      	ldr	r3, [pc, #356]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800779a:	429a      	cmp	r2, r3
 800779c:	d908      	bls.n	80077b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800779e:	4b56      	ldr	r3, [pc, #344]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	4953      	ldr	r1, [pc, #332]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d010      	beq.n	80077de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	4b4d      	ldr	r3, [pc, #308]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d908      	bls.n	80077de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077cc:	4b4a      	ldr	r3, [pc, #296]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	f023 020f 	bic.w	r2, r3, #15
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	4947      	ldr	r1, [pc, #284]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d055      	beq.n	8007896 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80077ea:	4b43      	ldr	r3, [pc, #268]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	4940      	ldr	r1, [pc, #256]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b02      	cmp	r3, #2
 8007802:	d107      	bne.n	8007814 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007804:	4b3c      	ldr	r3, [pc, #240]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d121      	bne.n	8007854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e0f6      	b.n	8007a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	2b03      	cmp	r3, #3
 800781a:	d107      	bne.n	800782c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800781c:	4b36      	ldr	r3, [pc, #216]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d115      	bne.n	8007854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e0ea      	b.n	8007a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d107      	bne.n	8007844 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007834:	4b30      	ldr	r3, [pc, #192]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800783c:	2b00      	cmp	r3, #0
 800783e:	d109      	bne.n	8007854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e0de      	b.n	8007a02 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007844:	4b2c      	ldr	r3, [pc, #176]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e0d6      	b.n	8007a02 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007854:	4b28      	ldr	r3, [pc, #160]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	f023 0207 	bic.w	r2, r3, #7
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	4925      	ldr	r1, [pc, #148]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007862:	4313      	orrs	r3, r2
 8007864:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007866:	f7fd fd4b 	bl	8005300 <HAL_GetTick>
 800786a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800786c:	e00a      	b.n	8007884 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800786e:	f7fd fd47 	bl	8005300 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800787c:	4293      	cmp	r3, r2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e0be      	b.n	8007a02 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007884:	4b1c      	ldr	r3, [pc, #112]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	00db      	lsls	r3, r3, #3
 8007892:	429a      	cmp	r2, r3
 8007894:	d1eb      	bne.n	800786e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	4b14      	ldr	r3, [pc, #80]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f003 030f 	and.w	r3, r3, #15
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d208      	bcs.n	80078c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078b2:	4b11      	ldr	r3, [pc, #68]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	f023 020f 	bic.w	r2, r3, #15
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	490e      	ldr	r1, [pc, #56]	@ (80078f8 <HAL_RCC_ClockConfig+0x244>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078c4:	4b0b      	ldr	r3, [pc, #44]	@ (80078f4 <HAL_RCC_ClockConfig+0x240>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 030f 	and.w	r3, r3, #15
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d214      	bcs.n	80078fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d2:	4b08      	ldr	r3, [pc, #32]	@ (80078f4 <HAL_RCC_ClockConfig+0x240>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f023 020f 	bic.w	r2, r3, #15
 80078da:	4906      	ldr	r1, [pc, #24]	@ (80078f4 <HAL_RCC_ClockConfig+0x240>)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	4313      	orrs	r3, r2
 80078e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078e2:	4b04      	ldr	r3, [pc, #16]	@ (80078f4 <HAL_RCC_ClockConfig+0x240>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d005      	beq.n	80078fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e086      	b.n	8007a02 <HAL_RCC_ClockConfig+0x34e>
 80078f4:	52002000 	.word	0x52002000
 80078f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0304 	and.w	r3, r3, #4
 8007904:	2b00      	cmp	r3, #0
 8007906:	d010      	beq.n	800792a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007914:	429a      	cmp	r2, r3
 8007916:	d208      	bcs.n	800792a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007918:	4b3c      	ldr	r3, [pc, #240]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	4939      	ldr	r1, [pc, #228]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 8007926:	4313      	orrs	r3, r2
 8007928:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0308 	and.w	r3, r3, #8
 8007932:	2b00      	cmp	r3, #0
 8007934:	d010      	beq.n	8007958 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	4b34      	ldr	r3, [pc, #208]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007942:	429a      	cmp	r2, r3
 8007944:	d208      	bcs.n	8007958 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007946:	4b31      	ldr	r3, [pc, #196]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	492e      	ldr	r1, [pc, #184]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 8007954:	4313      	orrs	r3, r2
 8007956:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	2b00      	cmp	r3, #0
 8007962:	d010      	beq.n	8007986 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	4b28      	ldr	r3, [pc, #160]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007970:	429a      	cmp	r2, r3
 8007972:	d208      	bcs.n	8007986 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007974:	4b25      	ldr	r3, [pc, #148]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	4922      	ldr	r1, [pc, #136]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 8007982:	4313      	orrs	r3, r2
 8007984:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	d010      	beq.n	80079b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	69da      	ldr	r2, [r3, #28]
 8007996:	4b1d      	ldr	r3, [pc, #116]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800799e:	429a      	cmp	r2, r3
 80079a0:	d208      	bcs.n	80079b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80079a2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	4917      	ldr	r1, [pc, #92]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80079b4:	f000 f834 	bl	8007a20 <HAL_RCC_GetSysClockFreq>
 80079b8:	4602      	mov	r2, r0
 80079ba:	4b14      	ldr	r3, [pc, #80]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	4912      	ldr	r1, [pc, #72]	@ (8007a10 <HAL_RCC_ClockConfig+0x35c>)
 80079c6:	5ccb      	ldrb	r3, [r1, r3]
 80079c8:	f003 031f 	and.w	r3, r3, #31
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
 80079d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079d2:	4b0e      	ldr	r3, [pc, #56]	@ (8007a0c <HAL_RCC_ClockConfig+0x358>)
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	4a0d      	ldr	r2, [pc, #52]	@ (8007a10 <HAL_RCC_ClockConfig+0x35c>)
 80079dc:	5cd3      	ldrb	r3, [r2, r3]
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
 80079e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007a14 <HAL_RCC_ClockConfig+0x360>)
 80079ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007a18 <HAL_RCC_ClockConfig+0x364>)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80079f2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <HAL_RCC_ClockConfig+0x368>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fd f8f4 	bl	8004be4 <HAL_InitTick>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	0801144c 	.word	0x0801144c
 8007a14:	24000058 	.word	0x24000058
 8007a18:	24000054 	.word	0x24000054
 8007a1c:	24000074 	.word	0x24000074

08007a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b089      	sub	sp, #36	@ 0x24
 8007a24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a26:	4bb3      	ldr	r3, [pc, #716]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a2e:	2b18      	cmp	r3, #24
 8007a30:	f200 8155 	bhi.w	8007cde <HAL_RCC_GetSysClockFreq+0x2be>
 8007a34:	a201      	add	r2, pc, #4	@ (adr r2, 8007a3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007aa1 	.word	0x08007aa1
 8007a40:	08007cdf 	.word	0x08007cdf
 8007a44:	08007cdf 	.word	0x08007cdf
 8007a48:	08007cdf 	.word	0x08007cdf
 8007a4c:	08007cdf 	.word	0x08007cdf
 8007a50:	08007cdf 	.word	0x08007cdf
 8007a54:	08007cdf 	.word	0x08007cdf
 8007a58:	08007cdf 	.word	0x08007cdf
 8007a5c:	08007ac7 	.word	0x08007ac7
 8007a60:	08007cdf 	.word	0x08007cdf
 8007a64:	08007cdf 	.word	0x08007cdf
 8007a68:	08007cdf 	.word	0x08007cdf
 8007a6c:	08007cdf 	.word	0x08007cdf
 8007a70:	08007cdf 	.word	0x08007cdf
 8007a74:	08007cdf 	.word	0x08007cdf
 8007a78:	08007cdf 	.word	0x08007cdf
 8007a7c:	08007acd 	.word	0x08007acd
 8007a80:	08007cdf 	.word	0x08007cdf
 8007a84:	08007cdf 	.word	0x08007cdf
 8007a88:	08007cdf 	.word	0x08007cdf
 8007a8c:	08007cdf 	.word	0x08007cdf
 8007a90:	08007cdf 	.word	0x08007cdf
 8007a94:	08007cdf 	.word	0x08007cdf
 8007a98:	08007cdf 	.word	0x08007cdf
 8007a9c:	08007ad3 	.word	0x08007ad3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aa0:	4b94      	ldr	r3, [pc, #592]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aac:	4b91      	ldr	r3, [pc, #580]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	08db      	lsrs	r3, r3, #3
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	4a90      	ldr	r2, [pc, #576]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8007abc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007abe:	e111      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ac0:	4b8d      	ldr	r3, [pc, #564]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ac2:	61bb      	str	r3, [r7, #24]
      break;
 8007ac4:	e10e      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ac8:	61bb      	str	r3, [r7, #24]
      break;
 8007aca:	e10b      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007acc:	4b8c      	ldr	r3, [pc, #560]	@ (8007d00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007ace:	61bb      	str	r3, [r7, #24]
      break;
 8007ad0:	e108      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ad2:	4b88      	ldr	r3, [pc, #544]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007adc:	4b85      	ldr	r3, [pc, #532]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae0:	091b      	lsrs	r3, r3, #4
 8007ae2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ae6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007ae8:	4b82      	ldr	r3, [pc, #520]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007af2:	4b80      	ldr	r3, [pc, #512]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 80e1 	beq.w	8007cd8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	f000 8083 	beq.w	8007c24 <HAL_RCC_GetSysClockFreq+0x204>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	f200 80a1 	bhi.w	8007c68 <HAL_RCC_GetSysClockFreq+0x248>
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <HAL_RCC_GetSysClockFreq+0x114>
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d056      	beq.n	8007be0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007b32:	e099      	b.n	8007c68 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b34:	4b6f      	ldr	r3, [pc, #444]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d02d      	beq.n	8007b9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b40:	4b6c      	ldr	r3, [pc, #432]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	08db      	lsrs	r3, r3, #3
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	4a6b      	ldr	r2, [pc, #428]	@ (8007cf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	ee07 3a90 	vmov	s15, r3
 8007b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b6a:	4b62      	ldr	r3, [pc, #392]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b7e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007b9a:	e087      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ba6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007d08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bae:	4b51      	ldr	r3, [pc, #324]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bc2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bde:	e065      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf2:	4b40      	ldr	r3, [pc, #256]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c06:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c22:	e043      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c2e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007d10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c36:	4b2f      	ldr	r3, [pc, #188]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c4a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c66:	e021      	b.n	8007cac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	ee07 3a90 	vmov	s15, r3
 8007c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c72:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007d0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c82:	ee07 3a90 	vmov	s15, r3
 8007c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c8e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007d04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007caa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007cac:	4b11      	ldr	r3, [pc, #68]	@ (8007cf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb0:	0a5b      	lsrs	r3, r3, #9
 8007cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cd0:	ee17 3a90 	vmov	r3, s15
 8007cd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007cd6:	e005      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61bb      	str	r3, [r7, #24]
      break;
 8007cdc:	e002      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007cde:	4b07      	ldr	r3, [pc, #28]	@ (8007cfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ce0:	61bb      	str	r3, [r7, #24]
      break;
 8007ce2:	bf00      	nop
  }

  return sysclockfreq;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3724      	adds	r7, #36	@ 0x24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	03d09000 	.word	0x03d09000
 8007cfc:	003d0900 	.word	0x003d0900
 8007d00:	007a1200 	.word	0x007a1200
 8007d04:	46000000 	.word	0x46000000
 8007d08:	4c742400 	.word	0x4c742400
 8007d0c:	4a742400 	.word	0x4a742400
 8007d10:	4af42400 	.word	0x4af42400

08007d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d1a:	f7ff fe81 	bl	8007a20 <HAL_RCC_GetSysClockFreq>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	4b10      	ldr	r3, [pc, #64]	@ (8007d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	0a1b      	lsrs	r3, r3, #8
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	490f      	ldr	r1, [pc, #60]	@ (8007d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d2c:	5ccb      	ldrb	r3, [r1, r3]
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	fa22 f303 	lsr.w	r3, r2, r3
 8007d36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d38:	4b0a      	ldr	r3, [pc, #40]	@ (8007d64 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	4a09      	ldr	r2, [pc, #36]	@ (8007d68 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d42:	5cd3      	ldrb	r3, [r2, r3]
 8007d44:	f003 031f 	and.w	r3, r3, #31
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4e:	4a07      	ldr	r2, [pc, #28]	@ (8007d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8007d50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d52:	4a07      	ldr	r2, [pc, #28]	@ (8007d70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007d58:	4b04      	ldr	r3, [pc, #16]	@ (8007d6c <HAL_RCC_GetHCLKFreq+0x58>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	58024400 	.word	0x58024400
 8007d68:	0801144c 	.word	0x0801144c
 8007d6c:	24000058 	.word	0x24000058
 8007d70:	24000054 	.word	0x24000054

08007d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007d78:	f7ff ffcc 	bl	8007d14 <HAL_RCC_GetHCLKFreq>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	091b      	lsrs	r3, r3, #4
 8007d84:	f003 0307 	and.w	r3, r3, #7
 8007d88:	4904      	ldr	r1, [pc, #16]	@ (8007d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d8a:	5ccb      	ldrb	r3, [r1, r3]
 8007d8c:	f003 031f 	and.w	r3, r3, #31
 8007d90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	58024400 	.word	0x58024400
 8007d9c:	0801144c 	.word	0x0801144c

08007da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007da4:	f7ff ffb6 	bl	8007d14 <HAL_RCC_GetHCLKFreq>
 8007da8:	4602      	mov	r2, r0
 8007daa:	4b06      	ldr	r3, [pc, #24]	@ (8007dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	0a1b      	lsrs	r3, r3, #8
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	4904      	ldr	r1, [pc, #16]	@ (8007dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007db6:	5ccb      	ldrb	r3, [r1, r3]
 8007db8:	f003 031f 	and.w	r3, r3, #31
 8007dbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	58024400 	.word	0x58024400
 8007dc8:	0801144c 	.word	0x0801144c

08007dcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	223f      	movs	r2, #63	@ 0x3f
 8007dda:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8007e48 <HAL_RCC_GetClockConfig+0x7c>)
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	f003 0207 	and.w	r2, r3, #7
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007de8:	4b17      	ldr	r3, [pc, #92]	@ (8007e48 <HAL_RCC_GetClockConfig+0x7c>)
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007df4:	4b14      	ldr	r3, [pc, #80]	@ (8007e48 <HAL_RCC_GetClockConfig+0x7c>)
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	f003 020f 	and.w	r2, r3, #15
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007e00:	4b11      	ldr	r3, [pc, #68]	@ (8007e48 <HAL_RCC_GetClockConfig+0x7c>)
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <HAL_RCC_GetClockConfig+0x7c>)
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007e18:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <HAL_RCC_GetClockConfig+0x7c>)
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007e24:	4b08      	ldr	r3, [pc, #32]	@ (8007e48 <HAL_RCC_GetClockConfig+0x7c>)
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e30:	4b06      	ldr	r3, [pc, #24]	@ (8007e4c <HAL_RCC_GetClockConfig+0x80>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 020f 	and.w	r2, r3, #15
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	601a      	str	r2, [r3, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	58024400 	.word	0x58024400
 8007e4c:	52002000 	.word	0x52002000

08007e50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e54:	b0ca      	sub	sp, #296	@ 0x128
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e62:	2300      	movs	r3, #0
 8007e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007e74:	2500      	movs	r5, #0
 8007e76:	ea54 0305 	orrs.w	r3, r4, r5
 8007e7a:	d049      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e86:	d02f      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007e88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e8c:	d828      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e92:	d01a      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007e94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e98:	d822      	bhi.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ea2:	d007      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ea4:	e01c      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea6:	4bb8      	ldr	r3, [pc, #736]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eaa:	4ab7      	ldr	r2, [pc, #732]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007eb2:	e01a      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb8:	3308      	adds	r3, #8
 8007eba:	2102      	movs	r1, #2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f001 fc8f 	bl	80097e0 <RCCEx_PLL2_Config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ec8:	e00f      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ece:	3328      	adds	r3, #40	@ 0x28
 8007ed0:	2102      	movs	r1, #2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 fd36 	bl	8009944 <RCCEx_PLL3_Config>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ede:	e004      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ee6:	e000      	b.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ef2:	4ba5      	ldr	r3, [pc, #660]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f00:	4aa1      	ldr	r2, [pc, #644]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f02:	430b      	orrs	r3, r1
 8007f04:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f06:	e003      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007f1c:	f04f 0900 	mov.w	r9, #0
 8007f20:	ea58 0309 	orrs.w	r3, r8, r9
 8007f24:	d047      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2c:	2b04      	cmp	r3, #4
 8007f2e:	d82a      	bhi.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007f30:	a201      	add	r2, pc, #4	@ (adr r2, 8007f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f36:	bf00      	nop
 8007f38:	08007f4d 	.word	0x08007f4d
 8007f3c:	08007f5b 	.word	0x08007f5b
 8007f40:	08007f71 	.word	0x08007f71
 8007f44:	08007f8f 	.word	0x08007f8f
 8007f48:	08007f8f 	.word	0x08007f8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	4a8d      	ldr	r2, [pc, #564]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f58:	e01a      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5e:	3308      	adds	r3, #8
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 fc3c 	bl	80097e0 <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f6e:	e00f      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f74:	3328      	adds	r3, #40	@ 0x28
 8007f76:	2100      	movs	r1, #0
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 fce3 	bl	8009944 <RCCEx_PLL3_Config>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f84:	e004      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f8c:	e000      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f98:	4b7b      	ldr	r3, [pc, #492]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f9c:	f023 0107 	bic.w	r1, r3, #7
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa6:	4a78      	ldr	r2, [pc, #480]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fac:	e003      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007fc2:	f04f 0b00 	mov.w	fp, #0
 8007fc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007fca:	d04c      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fd6:	d030      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fdc:	d829      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007fde:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe0:	d02d      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe4:	d825      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007fe6:	2b80      	cmp	r3, #128	@ 0x80
 8007fe8:	d018      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007fea:	2b80      	cmp	r3, #128	@ 0x80
 8007fec:	d821      	bhi.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007ff2:	2b40      	cmp	r3, #64	@ 0x40
 8007ff4:	d007      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007ff6:	e01c      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff8:	4b63      	ldr	r3, [pc, #396]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffc:	4a62      	ldr	r2, [pc, #392]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008004:	e01c      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800a:	3308      	adds	r3, #8
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f001 fbe6 	bl	80097e0 <RCCEx_PLL2_Config>
 8008014:	4603      	mov	r3, r0
 8008016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800801a:	e011      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800801c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008020:	3328      	adds	r3, #40	@ 0x28
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f001 fc8d 	bl	8009944 <RCCEx_PLL3_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008030:	e006      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008038:	e002      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800803a:	bf00      	nop
 800803c:	e000      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800803e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008048:	4b4f      	ldr	r3, [pc, #316]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800804a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800804c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008056:	4a4c      	ldr	r2, [pc, #304]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008058:	430b      	orrs	r3, r1
 800805a:	6513      	str	r3, [r2, #80]	@ 0x50
 800805c:	e003      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008072:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008076:	2300      	movs	r3, #0
 8008078:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800807c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008080:	460b      	mov	r3, r1
 8008082:	4313      	orrs	r3, r2
 8008084:	d053      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800808a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800808e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008092:	d035      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008094:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008098:	d82e      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800809a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800809e:	d031      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80080a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80080a4:	d828      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80080a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080aa:	d01a      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80080ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080b0:	d822      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80080b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080ba:	d007      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80080bc:	e01c      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080be:	4b32      	ldr	r3, [pc, #200]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c2:	4a31      	ldr	r2, [pc, #196]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080ca:	e01c      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d0:	3308      	adds	r3, #8
 80080d2:	2100      	movs	r1, #0
 80080d4:	4618      	mov	r0, r3
 80080d6:	f001 fb83 	bl	80097e0 <RCCEx_PLL2_Config>
 80080da:	4603      	mov	r3, r0
 80080dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80080e0:	e011      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e6:	3328      	adds	r3, #40	@ 0x28
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 fc2a 	bl	8009944 <RCCEx_PLL3_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080f6:	e006      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080fe:	e002      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008100:	bf00      	nop
 8008102:	e000      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10b      	bne.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800810e:	4b1e      	ldr	r3, [pc, #120]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008112:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800811e:	4a1a      	ldr	r2, [pc, #104]	@ (8008188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008120:	430b      	orrs	r3, r1
 8008122:	6593      	str	r3, [r2, #88]	@ 0x58
 8008124:	e003      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800812e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800813a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800813e:	2300      	movs	r3, #0
 8008140:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008144:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008148:	460b      	mov	r3, r1
 800814a:	4313      	orrs	r3, r2
 800814c:	d056      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800814e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008156:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800815a:	d038      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800815c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008160:	d831      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008162:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008166:	d034      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008168:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800816c:	d82b      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800816e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008172:	d01d      	beq.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008178:	d825      	bhi.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d006      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800817e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008182:	d00a      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008184:	e01f      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008186:	bf00      	nop
 8008188:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800818c:	4ba2      	ldr	r3, [pc, #648]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	4aa1      	ldr	r2, [pc, #644]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008198:	e01c      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	3308      	adds	r3, #8
 80081a0:	2100      	movs	r1, #0
 80081a2:	4618      	mov	r0, r3
 80081a4:	f001 fb1c 	bl	80097e0 <RCCEx_PLL2_Config>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80081ae:	e011      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b4:	3328      	adds	r3, #40	@ 0x28
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 fbc3 	bl	8009944 <RCCEx_PLL3_Config>
 80081be:	4603      	mov	r3, r0
 80081c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081c4:	e006      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081cc:	e002      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80081ce:	bf00      	nop
 80081d0:	e000      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80081d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10b      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80081dc:	4b8e      	ldr	r3, [pc, #568]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081ec:	4a8a      	ldr	r2, [pc, #552]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081ee:	430b      	orrs	r3, r1
 80081f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80081f2:	e003      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008208:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800820c:	2300      	movs	r3, #0
 800820e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008212:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008216:	460b      	mov	r3, r1
 8008218:	4313      	orrs	r3, r2
 800821a:	d03a      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800821c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008222:	2b30      	cmp	r3, #48	@ 0x30
 8008224:	d01f      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008226:	2b30      	cmp	r3, #48	@ 0x30
 8008228:	d819      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800822a:	2b20      	cmp	r3, #32
 800822c:	d00c      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800822e:	2b20      	cmp	r3, #32
 8008230:	d815      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008232:	2b00      	cmp	r3, #0
 8008234:	d019      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008236:	2b10      	cmp	r3, #16
 8008238:	d111      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800823a:	4b77      	ldr	r3, [pc, #476]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800823c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823e:	4a76      	ldr	r2, [pc, #472]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008246:	e011      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824c:	3308      	adds	r3, #8
 800824e:	2102      	movs	r1, #2
 8008250:	4618      	mov	r0, r3
 8008252:	f001 fac5 	bl	80097e0 <RCCEx_PLL2_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800825c:	e006      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008264:	e002      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008266:	bf00      	nop
 8008268:	e000      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800826a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800826c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008274:	4b68      	ldr	r3, [pc, #416]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008278:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008282:	4a65      	ldr	r2, [pc, #404]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008284:	430b      	orrs	r3, r1
 8008286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008288:	e003      	b.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800828e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800829e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082a2:	2300      	movs	r3, #0
 80082a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082ac:	460b      	mov	r3, r1
 80082ae:	4313      	orrs	r3, r2
 80082b0:	d051      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80082b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082bc:	d035      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80082be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082c2:	d82e      	bhi.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80082c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082c8:	d031      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80082ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082ce:	d828      	bhi.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80082d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d4:	d01a      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80082d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082da:	d822      	bhi.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80082e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e4:	d007      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80082e6:	e01c      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e8:	4b4b      	ldr	r3, [pc, #300]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ec:	4a4a      	ldr	r2, [pc, #296]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082f4:	e01c      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	3308      	adds	r3, #8
 80082fc:	2100      	movs	r1, #0
 80082fe:	4618      	mov	r0, r3
 8008300:	f001 fa6e 	bl	80097e0 <RCCEx_PLL2_Config>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800830a:	e011      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800830c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008310:	3328      	adds	r3, #40	@ 0x28
 8008312:	2100      	movs	r1, #0
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fb15 	bl	8009944 <RCCEx_PLL3_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008320:	e006      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008328:	e002      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800832a:	bf00      	nop
 800832c:	e000      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800832e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10a      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008338:	4b37      	ldr	r3, [pc, #220]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800833a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800833c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008346:	4a34      	ldr	r2, [pc, #208]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008348:	430b      	orrs	r3, r1
 800834a:	6513      	str	r3, [r2, #80]	@ 0x50
 800834c:	e003      	b.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008362:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800836c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008370:	460b      	mov	r3, r1
 8008372:	4313      	orrs	r3, r2
 8008374:	d056      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800837c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008380:	d033      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008382:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008386:	d82c      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008388:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800838c:	d02f      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800838e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008392:	d826      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008398:	d02b      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800839a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800839e:	d820      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80083a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a4:	d012      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80083a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083aa:	d81a      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d022      	beq.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80083b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b4:	d115      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ba:	3308      	adds	r3, #8
 80083bc:	2101      	movs	r1, #1
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 fa0e 	bl	80097e0 <RCCEx_PLL2_Config>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80083ca:	e015      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d0:	3328      	adds	r3, #40	@ 0x28
 80083d2:	2101      	movs	r1, #1
 80083d4:	4618      	mov	r0, r3
 80083d6:	f001 fab5 	bl	8009944 <RCCEx_PLL3_Config>
 80083da:	4603      	mov	r3, r0
 80083dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80083e0:	e00a      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083e8:	e006      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80083ea:	bf00      	nop
 80083ec:	e004      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80083ee:	bf00      	nop
 80083f0:	e002      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80083f2:	bf00      	nop
 80083f4:	e000      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80083f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10d      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008400:	4b05      	ldr	r3, [pc, #20]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008404:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800840c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800840e:	4a02      	ldr	r2, [pc, #8]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008410:	430b      	orrs	r3, r1
 8008412:	6513      	str	r3, [r2, #80]	@ 0x50
 8008414:	e006      	b.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008416:	bf00      	nop
 8008418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008434:	2300      	movs	r3, #0
 8008436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800843a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800843e:	460b      	mov	r3, r1
 8008440:	4313      	orrs	r3, r2
 8008442:	d055      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008448:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800844c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008450:	d033      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008456:	d82c      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800845c:	d02f      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008462:	d826      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008464:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008468:	d02b      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800846a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800846e:	d820      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008474:	d012      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800847a:	d81a      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d022      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008484:	d115      	bne.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848a:	3308      	adds	r3, #8
 800848c:	2101      	movs	r1, #1
 800848e:	4618      	mov	r0, r3
 8008490:	f001 f9a6 	bl	80097e0 <RCCEx_PLL2_Config>
 8008494:	4603      	mov	r3, r0
 8008496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800849a:	e015      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800849c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a0:	3328      	adds	r3, #40	@ 0x28
 80084a2:	2101      	movs	r1, #1
 80084a4:	4618      	mov	r0, r3
 80084a6:	f001 fa4d 	bl	8009944 <RCCEx_PLL3_Config>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084b0:	e00a      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084b8:	e006      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80084ba:	bf00      	nop
 80084bc:	e004      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80084be:	bf00      	nop
 80084c0:	e002      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80084c2:	bf00      	nop
 80084c4:	e000      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80084c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10b      	bne.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80084d0:	4ba3      	ldr	r3, [pc, #652]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80084d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084e0:	4a9f      	ldr	r2, [pc, #636]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084e2:	430b      	orrs	r3, r1
 80084e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80084e6:	e003      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80084fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008500:	2300      	movs	r3, #0
 8008502:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800850a:	460b      	mov	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	d037      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800851a:	d00e      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800851c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008520:	d816      	bhi.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d018      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800852a:	d111      	bne.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800852c:	4b8c      	ldr	r3, [pc, #560]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	4a8b      	ldr	r2, [pc, #556]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008538:	e00f      	b.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800853a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800853e:	3308      	adds	r3, #8
 8008540:	2101      	movs	r1, #1
 8008542:	4618      	mov	r0, r3
 8008544:	f001 f94c 	bl	80097e0 <RCCEx_PLL2_Config>
 8008548:	4603      	mov	r3, r0
 800854a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800854e:	e004      	b.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008556:	e000      	b.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800855a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855e:	2b00      	cmp	r3, #0
 8008560:	d10a      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008562:	4b7f      	ldr	r3, [pc, #508]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008566:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008570:	4a7b      	ldr	r2, [pc, #492]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008572:	430b      	orrs	r3, r1
 8008574:	6513      	str	r3, [r2, #80]	@ 0x50
 8008576:	e003      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800857c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008588:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800858c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008590:	2300      	movs	r3, #0
 8008592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008596:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d039      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80085a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d81c      	bhi.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80085aa:	a201      	add	r2, pc, #4	@ (adr r2, 80085b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80085ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b0:	080085ed 	.word	0x080085ed
 80085b4:	080085c1 	.word	0x080085c1
 80085b8:	080085cf 	.word	0x080085cf
 80085bc:	080085ed 	.word	0x080085ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085c0:	4b67      	ldr	r3, [pc, #412]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c4:	4a66      	ldr	r2, [pc, #408]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80085cc:	e00f      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d2:	3308      	adds	r3, #8
 80085d4:	2102      	movs	r1, #2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f902 	bl	80097e0 <RCCEx_PLL2_Config>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80085e2:	e004      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085ea:	e000      	b.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80085ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10a      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80085f6:	4b5a      	ldr	r3, [pc, #360]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085fa:	f023 0103 	bic.w	r1, r3, #3
 80085fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008604:	4a56      	ldr	r2, [pc, #344]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008606:	430b      	orrs	r3, r1
 8008608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800860a:	e003      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008624:	2300      	movs	r3, #0
 8008626:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800862a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800862e:	460b      	mov	r3, r1
 8008630:	4313      	orrs	r3, r2
 8008632:	f000 809f 	beq.w	8008774 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008636:	4b4b      	ldr	r3, [pc, #300]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a4a      	ldr	r2, [pc, #296]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800863c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008642:	f7fc fe5d 	bl	8005300 <HAL_GetTick>
 8008646:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800864a:	e00b      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800864c:	f7fc fe58 	bl	8005300 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b64      	cmp	r3, #100	@ 0x64
 800865a:	d903      	bls.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008662:	e005      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008664:	4b3f      	ldr	r3, [pc, #252]	@ (8008764 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0ed      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008674:	2b00      	cmp	r3, #0
 8008676:	d179      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008678:	4b39      	ldr	r3, [pc, #228]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800867a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008680:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008684:	4053      	eors	r3, r2
 8008686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800868a:	2b00      	cmp	r3, #0
 800868c:	d015      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800868e:	4b34      	ldr	r3, [pc, #208]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008696:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800869a:	4b31      	ldr	r3, [pc, #196]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800869c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869e:	4a30      	ldr	r2, [pc, #192]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086a6:	4b2e      	ldr	r3, [pc, #184]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086aa:	4a2d      	ldr	r2, [pc, #180]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80086b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80086ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086c6:	d118      	bne.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c8:	f7fc fe1a 	bl	8005300 <HAL_GetTick>
 80086cc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086d0:	e00d      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086d2:	f7fc fe15 	bl	8005300 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80086dc:	1ad2      	subs	r2, r2, r3
 80086de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d903      	bls.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80086ec:	e005      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0eb      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80086fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d129      	bne.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800870a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800870e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008712:	d10e      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008714:	4b12      	ldr	r3, [pc, #72]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800871c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008720:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008724:	091a      	lsrs	r2, r3, #4
 8008726:	4b10      	ldr	r3, [pc, #64]	@ (8008768 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008728:	4013      	ands	r3, r2
 800872a:	4a0d      	ldr	r2, [pc, #52]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800872c:	430b      	orrs	r3, r1
 800872e:	6113      	str	r3, [r2, #16]
 8008730:	e005      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008732:	4b0b      	ldr	r3, [pc, #44]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	4a0a      	ldr	r2, [pc, #40]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008738:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800873c:	6113      	str	r3, [r2, #16]
 800873e:	4b08      	ldr	r3, [pc, #32]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008740:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008746:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800874a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800874e:	4a04      	ldr	r2, [pc, #16]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008750:	430b      	orrs	r3, r1
 8008752:	6713      	str	r3, [r2, #112]	@ 0x70
 8008754:	e00e      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800875a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800875e:	e009      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008760:	58024400 	.word	0x58024400
 8008764:	58024800 	.word	0x58024800
 8008768:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f002 0301 	and.w	r3, r2, #1
 8008780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008784:	2300      	movs	r3, #0
 8008786:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800878a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800878e:	460b      	mov	r3, r1
 8008790:	4313      	orrs	r3, r2
 8008792:	f000 8089 	beq.w	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800879c:	2b28      	cmp	r3, #40	@ 0x28
 800879e:	d86b      	bhi.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80087a0:	a201      	add	r2, pc, #4	@ (adr r2, 80087a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80087a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a6:	bf00      	nop
 80087a8:	08008881 	.word	0x08008881
 80087ac:	08008879 	.word	0x08008879
 80087b0:	08008879 	.word	0x08008879
 80087b4:	08008879 	.word	0x08008879
 80087b8:	08008879 	.word	0x08008879
 80087bc:	08008879 	.word	0x08008879
 80087c0:	08008879 	.word	0x08008879
 80087c4:	08008879 	.word	0x08008879
 80087c8:	0800884d 	.word	0x0800884d
 80087cc:	08008879 	.word	0x08008879
 80087d0:	08008879 	.word	0x08008879
 80087d4:	08008879 	.word	0x08008879
 80087d8:	08008879 	.word	0x08008879
 80087dc:	08008879 	.word	0x08008879
 80087e0:	08008879 	.word	0x08008879
 80087e4:	08008879 	.word	0x08008879
 80087e8:	08008863 	.word	0x08008863
 80087ec:	08008879 	.word	0x08008879
 80087f0:	08008879 	.word	0x08008879
 80087f4:	08008879 	.word	0x08008879
 80087f8:	08008879 	.word	0x08008879
 80087fc:	08008879 	.word	0x08008879
 8008800:	08008879 	.word	0x08008879
 8008804:	08008879 	.word	0x08008879
 8008808:	08008881 	.word	0x08008881
 800880c:	08008879 	.word	0x08008879
 8008810:	08008879 	.word	0x08008879
 8008814:	08008879 	.word	0x08008879
 8008818:	08008879 	.word	0x08008879
 800881c:	08008879 	.word	0x08008879
 8008820:	08008879 	.word	0x08008879
 8008824:	08008879 	.word	0x08008879
 8008828:	08008881 	.word	0x08008881
 800882c:	08008879 	.word	0x08008879
 8008830:	08008879 	.word	0x08008879
 8008834:	08008879 	.word	0x08008879
 8008838:	08008879 	.word	0x08008879
 800883c:	08008879 	.word	0x08008879
 8008840:	08008879 	.word	0x08008879
 8008844:	08008879 	.word	0x08008879
 8008848:	08008881 	.word	0x08008881
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008850:	3308      	adds	r3, #8
 8008852:	2101      	movs	r1, #1
 8008854:	4618      	mov	r0, r3
 8008856:	f000 ffc3 	bl	80097e0 <RCCEx_PLL2_Config>
 800885a:	4603      	mov	r3, r0
 800885c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008860:	e00f      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008866:	3328      	adds	r3, #40	@ 0x28
 8008868:	2101      	movs	r1, #1
 800886a:	4618      	mov	r0, r3
 800886c:	f001 f86a 	bl	8009944 <RCCEx_PLL3_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008876:	e004      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800887e:	e000      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10a      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800888a:	4bbf      	ldr	r3, [pc, #764]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800888c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800888e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008898:	4abb      	ldr	r2, [pc, #748]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800889a:	430b      	orrs	r3, r1
 800889c:	6553      	str	r3, [r2, #84]	@ 0x54
 800889e:	e003      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f002 0302 	and.w	r3, r2, #2
 80088b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088b8:	2300      	movs	r3, #0
 80088ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80088be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80088c2:	460b      	mov	r3, r1
 80088c4:	4313      	orrs	r3, r2
 80088c6:	d041      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d824      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80088d2:	a201      	add	r2, pc, #4	@ (adr r2, 80088d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	08008925 	.word	0x08008925
 80088dc:	080088f1 	.word	0x080088f1
 80088e0:	08008907 	.word	0x08008907
 80088e4:	08008925 	.word	0x08008925
 80088e8:	08008925 	.word	0x08008925
 80088ec:	08008925 	.word	0x08008925
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088f4:	3308      	adds	r3, #8
 80088f6:	2101      	movs	r1, #1
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 ff71 	bl	80097e0 <RCCEx_PLL2_Config>
 80088fe:	4603      	mov	r3, r0
 8008900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008904:	e00f      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800890a:	3328      	adds	r3, #40	@ 0x28
 800890c:	2101      	movs	r1, #1
 800890e:	4618      	mov	r0, r3
 8008910:	f001 f818 	bl	8009944 <RCCEx_PLL3_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800891a:	e004      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008922:	e000      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10a      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800892e:	4b96      	ldr	r3, [pc, #600]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008932:	f023 0107 	bic.w	r1, r3, #7
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800893c:	4a92      	ldr	r2, [pc, #584]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800893e:	430b      	orrs	r3, r1
 8008940:	6553      	str	r3, [r2, #84]	@ 0x54
 8008942:	e003      	b.n	800894c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800894c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f002 0304 	and.w	r3, r2, #4
 8008958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800895c:	2300      	movs	r3, #0
 800895e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008962:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008966:	460b      	mov	r3, r1
 8008968:	4313      	orrs	r3, r2
 800896a:	d044      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800896c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008974:	2b05      	cmp	r3, #5
 8008976:	d825      	bhi.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008978:	a201      	add	r2, pc, #4	@ (adr r2, 8008980 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800897a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897e:	bf00      	nop
 8008980:	080089cd 	.word	0x080089cd
 8008984:	08008999 	.word	0x08008999
 8008988:	080089af 	.word	0x080089af
 800898c:	080089cd 	.word	0x080089cd
 8008990:	080089cd 	.word	0x080089cd
 8008994:	080089cd 	.word	0x080089cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899c:	3308      	adds	r3, #8
 800899e:	2101      	movs	r1, #1
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 ff1d 	bl	80097e0 <RCCEx_PLL2_Config>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089ac:	e00f      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b2:	3328      	adds	r3, #40	@ 0x28
 80089b4:	2101      	movs	r1, #1
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 ffc4 	bl	8009944 <RCCEx_PLL3_Config>
 80089bc:	4603      	mov	r3, r0
 80089be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089c2:	e004      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089ca:	e000      	b.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80089cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10b      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089d6:	4b6c      	ldr	r3, [pc, #432]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089da:	f023 0107 	bic.w	r1, r3, #7
 80089de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089e6:	4a68      	ldr	r2, [pc, #416]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089e8:	430b      	orrs	r3, r1
 80089ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80089ec:	e003      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f002 0320 	and.w	r3, r2, #32
 8008a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a06:	2300      	movs	r3, #0
 8008a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a10:	460b      	mov	r3, r1
 8008a12:	4313      	orrs	r3, r2
 8008a14:	d055      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a22:	d033      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a28:	d82c      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2e:	d02f      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a34:	d826      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a3a:	d02b      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008a3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a40:	d820      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a46:	d012      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a4c:	d81a      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d022      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a56:	d115      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 febd 	bl	80097e0 <RCCEx_PLL2_Config>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a6c:	e015      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a72:	3328      	adds	r3, #40	@ 0x28
 8008a74:	2102      	movs	r1, #2
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 ff64 	bl	8009944 <RCCEx_PLL3_Config>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a82:	e00a      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a8a:	e006      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008a8c:	bf00      	nop
 8008a8e:	e004      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008a90:	bf00      	nop
 8008a92:	e002      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008a94:	bf00      	nop
 8008a96:	e000      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10b      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008aa2:	4b39      	ldr	r3, [pc, #228]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab2:	4a35      	ldr	r2, [pc, #212]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ab8:	e003      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008ad8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	d058      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008aea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008aee:	d033      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008af0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008af4:	d82c      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008afa:	d02f      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b00:	d826      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b06:	d02b      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b0c:	d820      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b12:	d012      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b18:	d81a      	bhi.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d022      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b22:	d115      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b28:	3308      	adds	r3, #8
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 fe57 	bl	80097e0 <RCCEx_PLL2_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b38:	e015      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3e:	3328      	adds	r3, #40	@ 0x28
 8008b40:	2102      	movs	r1, #2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 fefe 	bl	8009944 <RCCEx_PLL3_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b4e:	e00a      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b56:	e006      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008b58:	bf00      	nop
 8008b5a:	e004      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008b5c:	bf00      	nop
 8008b5e:	e002      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008b60:	bf00      	nop
 8008b62:	e000      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10e      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b6e:	4b06      	ldr	r3, [pc, #24]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b72:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b7e:	4a02      	ldr	r2, [pc, #8]	@ (8008b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b80:	430b      	orrs	r3, r1
 8008b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b84:	e006      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008b86:	bf00      	nop
 8008b88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008baa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	d055      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bbc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bc0:	d033      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008bc2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bc6:	d82c      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bcc:	d02f      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bd2:	d826      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008bd4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008bd8:	d02b      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008bda:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008bde:	d820      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008be4:	d012      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bea:	d81a      	bhi.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d022      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bf4:	d115      	bne.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fdee 	bl	80097e0 <RCCEx_PLL2_Config>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c0a:	e015      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c10:	3328      	adds	r3, #40	@ 0x28
 8008c12:	2102      	movs	r1, #2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fe95 	bl	8009944 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c20:	e00a      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c28:	e006      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c2a:	bf00      	nop
 8008c2c:	e004      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c2e:	bf00      	nop
 8008c30:	e002      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c32:	bf00      	nop
 8008c34:	e000      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10b      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c40:	4ba1      	ldr	r3, [pc, #644]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c50:	4a9d      	ldr	r2, [pc, #628]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c52:	430b      	orrs	r3, r1
 8008c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c56:	e003      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	f002 0308 	and.w	r3, r2, #8
 8008c6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c70:	2300      	movs	r3, #0
 8008c72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	d01e      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c8c:	d10c      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c92:	3328      	adds	r3, #40	@ 0x28
 8008c94:	2102      	movs	r1, #2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fe54 	bl	8009944 <RCCEx_PLL3_Config>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d002      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ca8:	4b87      	ldr	r3, [pc, #540]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cb8:	4a83      	ldr	r2, [pc, #524]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f002 0310 	and.w	r3, r2, #16
 8008cca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008cd4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008cd8:	460b      	mov	r3, r1
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	d01e      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cea:	d10c      	bne.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf0:	3328      	adds	r3, #40	@ 0x28
 8008cf2:	2102      	movs	r1, #2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fe25 	bl	8009944 <RCCEx_PLL3_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d06:	4b70      	ldr	r3, [pc, #448]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d16:	4a6c      	ldr	r2, [pc, #432]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d36:	460b      	mov	r3, r1
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	d03e      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d48:	d022      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d4e:	d81b      	bhi.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d58:	d00b      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008d5a:	e015      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d60:	3308      	adds	r3, #8
 8008d62:	2100      	movs	r1, #0
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fd3b 	bl	80097e0 <RCCEx_PLL2_Config>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d70:	e00f      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d76:	3328      	adds	r3, #40	@ 0x28
 8008d78:	2102      	movs	r1, #2
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 fde2 	bl	8009944 <RCCEx_PLL3_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d86:	e004      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d8e:	e000      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10b      	bne.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008daa:	4a47      	ldr	r2, [pc, #284]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dac:	430b      	orrs	r3, r1
 8008dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8008db0:	e003      	b.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008dc8:	2300      	movs	r3, #0
 8008dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008dcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	d03b      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008de2:	d01f      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008de4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008de8:	d818      	bhi.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dee:	d003      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008df0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008df4:	d007      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008df6:	e011      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df8:	4b33      	ldr	r3, [pc, #204]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dfc:	4a32      	ldr	r2, [pc, #200]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e04:	e00f      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e0a:	3328      	adds	r3, #40	@ 0x28
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fd98 	bl	8009944 <RCCEx_PLL3_Config>
 8008e14:	4603      	mov	r3, r0
 8008e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e1a:	e004      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e22:	e000      	b.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10b      	bne.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e2e:	4b26      	ldr	r3, [pc, #152]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e3e:	4a22      	ldr	r2, [pc, #136]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e40:	430b      	orrs	r3, r1
 8008e42:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e44:	e003      	b.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008e5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e64:	460b      	mov	r3, r1
 8008e66:	4313      	orrs	r3, r2
 8008e68:	d034      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d003      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e78:	d007      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008e7a:	e011      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e7c:	4b12      	ldr	r3, [pc, #72]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e80:	4a11      	ldr	r2, [pc, #68]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e88:	e00e      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8e:	3308      	adds	r3, #8
 8008e90:	2102      	movs	r1, #2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 fca4 	bl	80097e0 <RCCEx_PLL2_Config>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e9e:	e003      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10d      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008eb0:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebe:	4a02      	ldr	r2, [pc, #8]	@ (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ec0:	430b      	orrs	r3, r1
 8008ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ec4:	e006      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008ec6:	bf00      	nop
 8008ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ed0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ee6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008eea:	460b      	mov	r3, r1
 8008eec:	4313      	orrs	r3, r2
 8008eee:	d00c      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef4:	3328      	adds	r3, #40	@ 0x28
 8008ef6:	2102      	movs	r1, #2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fd23 	bl	8009944 <RCCEx_PLL3_Config>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f18:	2300      	movs	r3, #0
 8008f1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f20:	460b      	mov	r3, r1
 8008f22:	4313      	orrs	r3, r2
 8008f24:	d038      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f32:	d018      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f38:	d811      	bhi.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f3e:	d014      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f44:	d80b      	bhi.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d011      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f4e:	d106      	bne.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f50:	4bc3      	ldr	r3, [pc, #780]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	4ac2      	ldr	r2, [pc, #776]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008f5c:	e008      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f64:	e004      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008f66:	bf00      	nop
 8008f68:	e002      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10b      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f78:	4bb9      	ldr	r3, [pc, #740]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f88:	4ab5      	ldr	r2, [pc, #724]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f8e:	e003      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008faa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	d009      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008fb4:	4baa      	ldr	r3, [pc, #680]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fc2:	4aa7      	ldr	r2, [pc, #668]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008fd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	d00a      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008fe4:	4b9e      	ldr	r3, [pc, #632]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ff4:	4a9a      	ldr	r2, [pc, #616]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009008:	2300      	movs	r3, #0
 800900a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800900c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009010:	460b      	mov	r3, r1
 8009012:	4313      	orrs	r3, r2
 8009014:	d009      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009016:	4b92      	ldr	r3, [pc, #584]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800901a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800901e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009024:	4a8e      	ldr	r2, [pc, #568]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009026:	430b      	orrs	r3, r1
 8009028:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800902a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009036:	643b      	str	r3, [r7, #64]	@ 0x40
 8009038:	2300      	movs	r3, #0
 800903a:	647b      	str	r3, [r7, #68]	@ 0x44
 800903c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009040:	460b      	mov	r3, r1
 8009042:	4313      	orrs	r3, r2
 8009044:	d00e      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009046:	4b86      	ldr	r3, [pc, #536]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	4a85      	ldr	r2, [pc, #532]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800904c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009050:	6113      	str	r3, [r2, #16]
 8009052:	4b83      	ldr	r3, [pc, #524]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009054:	6919      	ldr	r1, [r3, #16]
 8009056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800905a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800905e:	4a80      	ldr	r2, [pc, #512]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009060:	430b      	orrs	r3, r1
 8009062:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009070:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009076:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800907a:	460b      	mov	r3, r1
 800907c:	4313      	orrs	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009080:	4b77      	ldr	r3, [pc, #476]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009084:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800908e:	4a74      	ldr	r2, [pc, #464]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009090:	430b      	orrs	r3, r1
 8009092:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80090a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80090a2:	2300      	movs	r3, #0
 80090a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090aa:	460b      	mov	r3, r1
 80090ac:	4313      	orrs	r3, r2
 80090ae:	d00a      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090b0:	4b6b      	ldr	r3, [pc, #428]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090b4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80090b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090c0:	4a67      	ldr	r2, [pc, #412]	@ (8009260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090c2:	430b      	orrs	r3, r1
 80090c4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80090c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	2100      	movs	r1, #0
 80090d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80090dc:	460b      	mov	r3, r1
 80090de:	4313      	orrs	r3, r2
 80090e0:	d011      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e6:	3308      	adds	r3, #8
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fb78 	bl	80097e0 <RCCEx_PLL2_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80090f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910e:	2100      	movs	r1, #0
 8009110:	6239      	str	r1, [r7, #32]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	627b      	str	r3, [r7, #36]	@ 0x24
 8009118:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800911c:	460b      	mov	r3, r1
 800911e:	4313      	orrs	r3, r2
 8009120:	d011      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009126:	3308      	adds	r3, #8
 8009128:	2101      	movs	r1, #1
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fb58 	bl	80097e0 <RCCEx_PLL2_Config>
 8009130:	4603      	mov	r3, r0
 8009132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	2100      	movs	r1, #0
 8009150:	61b9      	str	r1, [r7, #24]
 8009152:	f003 0304 	and.w	r3, r3, #4
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800915c:	460b      	mov	r3, r1
 800915e:	4313      	orrs	r3, r2
 8009160:	d011      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009166:	3308      	adds	r3, #8
 8009168:	2102      	movs	r1, #2
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fb38 	bl	80097e0 <RCCEx_PLL2_Config>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	2100      	movs	r1, #0
 8009190:	6139      	str	r1, [r7, #16]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800919c:	460b      	mov	r3, r1
 800919e:	4313      	orrs	r3, r2
 80091a0:	d011      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a6:	3328      	adds	r3, #40	@ 0x28
 80091a8:	2100      	movs	r1, #0
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fbca 	bl	8009944 <RCCEx_PLL3_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80091b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80091c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	2100      	movs	r1, #0
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	f003 0310 	and.w	r3, r3, #16
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80091dc:	460b      	mov	r3, r1
 80091de:	4313      	orrs	r3, r2
 80091e0:	d011      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e6:	3328      	adds	r3, #40	@ 0x28
 80091e8:	2101      	movs	r1, #1
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fbaa 	bl	8009944 <RCCEx_PLL3_Config>
 80091f0:	4603      	mov	r3, r0
 80091f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80091f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	2100      	movs	r1, #0
 8009210:	6039      	str	r1, [r7, #0]
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	607b      	str	r3, [r7, #4]
 8009218:	e9d7 1200 	ldrd	r1, r2, [r7]
 800921c:	460b      	mov	r3, r1
 800921e:	4313      	orrs	r3, r2
 8009220:	d011      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009226:	3328      	adds	r3, #40	@ 0x28
 8009228:	2102      	movs	r1, #2
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fb8a 	bl	8009944 <RCCEx_PLL3_Config>
 8009230:	4603      	mov	r3, r0
 8009232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009246:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	e000      	b.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
}
 8009254:	4618      	mov	r0, r3
 8009256:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800925a:	46bd      	mov	sp, r7
 800925c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009260:	58024400 	.word	0x58024400

08009264 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009268:	f7fe fd54 	bl	8007d14 <HAL_RCC_GetHCLKFreq>
 800926c:	4602      	mov	r2, r0
 800926e:	4b06      	ldr	r3, [pc, #24]	@ (8009288 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	091b      	lsrs	r3, r3, #4
 8009274:	f003 0307 	and.w	r3, r3, #7
 8009278:	4904      	ldr	r1, [pc, #16]	@ (800928c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800927a:	5ccb      	ldrb	r3, [r1, r3]
 800927c:	f003 031f 	and.w	r3, r3, #31
 8009280:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009284:	4618      	mov	r0, r3
 8009286:	bd80      	pop	{r7, pc}
 8009288:	58024400 	.word	0x58024400
 800928c:	0801144c 	.word	0x0801144c

08009290 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009290:	b480      	push	{r7}
 8009292:	b089      	sub	sp, #36	@ 0x24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009298:	4ba1      	ldr	r3, [pc, #644]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	f003 0303 	and.w	r3, r3, #3
 80092a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80092a2:	4b9f      	ldr	r3, [pc, #636]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a6:	0b1b      	lsrs	r3, r3, #12
 80092a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092ae:	4b9c      	ldr	r3, [pc, #624]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b2:	091b      	lsrs	r3, r3, #4
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80092ba:	4b99      	ldr	r3, [pc, #612]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092be:	08db      	lsrs	r3, r3, #3
 80092c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8111 	beq.w	8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f000 8083 	beq.w	80093ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	f200 80a1 	bhi.w	8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092f4:	69bb      	ldr	r3, [r7, #24]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d056      	beq.n	80093a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092fa:	e099      	b.n	8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092fc:	4b88      	ldr	r3, [pc, #544]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0320 	and.w	r3, r3, #32
 8009304:	2b00      	cmp	r3, #0
 8009306:	d02d      	beq.n	8009364 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009308:	4b85      	ldr	r3, [pc, #532]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	08db      	lsrs	r3, r3, #3
 800930e:	f003 0303 	and.w	r3, r3, #3
 8009312:	4a84      	ldr	r2, [pc, #528]	@ (8009524 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009314:	fa22 f303 	lsr.w	r3, r2, r3
 8009318:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	ee07 3a90 	vmov	s15, r3
 8009320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800932e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009332:	4b7b      	ldr	r3, [pc, #492]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800933a:	ee07 3a90 	vmov	s15, r3
 800933e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009342:	ed97 6a03 	vldr	s12, [r7, #12]
 8009346:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800934a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800935a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009362:	e087      	b.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800952c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009376:	4b6a      	ldr	r3, [pc, #424]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937e:	ee07 3a90 	vmov	s15, r3
 8009382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009386:	ed97 6a03 	vldr	s12, [r7, #12]
 800938a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800938e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800939a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093a6:	e065      	b.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ba:	4b59      	ldr	r3, [pc, #356]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ea:	e043      	b.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fe:	4b48      	ldr	r3, [pc, #288]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009412:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800941a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800942a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800942e:	e021      	b.n	8009474 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009530 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800943e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009442:	4b37      	ldr	r3, [pc, #220]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009452:	ed97 6a03 	vldr	s12, [r7, #12]
 8009456:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800945a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800945e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800946e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009472:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009474:	4b2a      	ldr	r3, [pc, #168]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009478:	0a5b      	lsrs	r3, r3, #9
 800947a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800948a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800949a:	ee17 2a90 	vmov	r2, s15
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80094a2:	4b1f      	ldr	r3, [pc, #124]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	0c1b      	lsrs	r3, r3, #16
 80094a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c8:	ee17 2a90 	vmov	r2, s15
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094d0:	4b13      	ldr	r3, [pc, #76]	@ (8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d4:	0e1b      	lsrs	r3, r3, #24
 80094d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094f6:	ee17 2a90 	vmov	r2, s15
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094fe:	e008      	b.n	8009512 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	609a      	str	r2, [r3, #8]
}
 8009512:	bf00      	nop
 8009514:	3724      	adds	r7, #36	@ 0x24
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	58024400 	.word	0x58024400
 8009524:	03d09000 	.word	0x03d09000
 8009528:	46000000 	.word	0x46000000
 800952c:	4c742400 	.word	0x4c742400
 8009530:	4a742400 	.word	0x4a742400
 8009534:	4af42400 	.word	0x4af42400

08009538 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009538:	b480      	push	{r7}
 800953a:	b089      	sub	sp, #36	@ 0x24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009540:	4ba1      	ldr	r3, [pc, #644]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009544:	f003 0303 	and.w	r3, r3, #3
 8009548:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800954a:	4b9f      	ldr	r3, [pc, #636]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954e:	0d1b      	lsrs	r3, r3, #20
 8009550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009554:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009556:	4b9c      	ldr	r3, [pc, #624]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955a:	0a1b      	lsrs	r3, r3, #8
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009562:	4b99      	ldr	r3, [pc, #612]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009566:	08db      	lsrs	r3, r3, #3
 8009568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	fb02 f303 	mul.w	r3, r2, r3
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 8111 	beq.w	80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b02      	cmp	r3, #2
 800958a:	f000 8083 	beq.w	8009694 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b02      	cmp	r3, #2
 8009592:	f200 80a1 	bhi.w	80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d003      	beq.n	80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d056      	beq.n	8009650 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80095a2:	e099      	b.n	80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095a4:	4b88      	ldr	r3, [pc, #544]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d02d      	beq.n	800960c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095b0:	4b85      	ldr	r3, [pc, #532]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	08db      	lsrs	r3, r3, #3
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	4a84      	ldr	r2, [pc, #528]	@ (80097cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095bc:	fa22 f303 	lsr.w	r3, r2, r3
 80095c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	ee07 3a90 	vmov	s15, r3
 80095c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095da:	4b7b      	ldr	r3, [pc, #492]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009606:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800960a:	e087      	b.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009616:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800961a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961e:	4b6a      	ldr	r3, [pc, #424]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009626:	ee07 3a90 	vmov	s15, r3
 800962a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009632:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800964e:	e065      	b.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800965e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009662:	4b59      	ldr	r3, [pc, #356]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009672:	ed97 6a03 	vldr	s12, [r7, #12]
 8009676:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800967a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009692:	e043      	b.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80096a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a6:	4b48      	ldr	r3, [pc, #288]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096d6:	e021      	b.n	800971c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ea:	4b37      	ldr	r3, [pc, #220]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800970e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800971a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800971c:	4b2a      	ldr	r3, [pc, #168]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800971e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009720:	0a5b      	lsrs	r3, r3, #9
 8009722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009726:	ee07 3a90 	vmov	s15, r3
 800972a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009732:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009736:	edd7 6a07 	vldr	s13, [r7, #28]
 800973a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800973e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009742:	ee17 2a90 	vmov	r2, s15
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800974a:	4b1f      	ldr	r3, [pc, #124]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800974c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974e:	0c1b      	lsrs	r3, r3, #16
 8009750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009754:	ee07 3a90 	vmov	s15, r3
 8009758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009760:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009764:	edd7 6a07 	vldr	s13, [r7, #28]
 8009768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009770:	ee17 2a90 	vmov	r2, s15
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009778:	4b13      	ldr	r3, [pc, #76]	@ (80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800977a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800977c:	0e1b      	lsrs	r3, r3, #24
 800977e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800978e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009792:	edd7 6a07 	vldr	s13, [r7, #28]
 8009796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800979e:	ee17 2a90 	vmov	r2, s15
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80097a6:	e008      	b.n	80097ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	609a      	str	r2, [r3, #8]
}
 80097ba:	bf00      	nop
 80097bc:	3724      	adds	r7, #36	@ 0x24
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	58024400 	.word	0x58024400
 80097cc:	03d09000 	.word	0x03d09000
 80097d0:	46000000 	.word	0x46000000
 80097d4:	4c742400 	.word	0x4c742400
 80097d8:	4a742400 	.word	0x4a742400
 80097dc:	4af42400 	.word	0x4af42400

080097e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097ee:	4b53      	ldr	r3, [pc, #332]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80097f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f2:	f003 0303 	and.w	r3, r3, #3
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d101      	bne.n	80097fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e099      	b.n	8009932 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097fe:	4b4f      	ldr	r3, [pc, #316]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a4e      	ldr	r2, [pc, #312]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009804:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009808:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800980a:	f7fb fd79 	bl	8005300 <HAL_GetTick>
 800980e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009810:	e008      	b.n	8009824 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009812:	f7fb fd75 	bl	8005300 <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b02      	cmp	r3, #2
 800981e:	d901      	bls.n	8009824 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e086      	b.n	8009932 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009824:	4b45      	ldr	r3, [pc, #276]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1f0      	bne.n	8009812 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009830:	4b42      	ldr	r3, [pc, #264]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009834:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	031b      	lsls	r3, r3, #12
 800983e:	493f      	ldr	r1, [pc, #252]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009840:	4313      	orrs	r3, r2
 8009842:	628b      	str	r3, [r1, #40]	@ 0x28
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	3b01      	subs	r3, #1
 800984a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	3b01      	subs	r3, #1
 8009854:	025b      	lsls	r3, r3, #9
 8009856:	b29b      	uxth	r3, r3
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	3b01      	subs	r3, #1
 8009860:	041b      	lsls	r3, r3, #16
 8009862:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	3b01      	subs	r3, #1
 800986e:	061b      	lsls	r3, r3, #24
 8009870:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009874:	4931      	ldr	r1, [pc, #196]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009876:	4313      	orrs	r3, r2
 8009878:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800987a:	4b30      	ldr	r3, [pc, #192]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 800987c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	492d      	ldr	r1, [pc, #180]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009888:	4313      	orrs	r3, r2
 800988a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800988c:	4b2b      	ldr	r3, [pc, #172]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 800988e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009890:	f023 0220 	bic.w	r2, r3, #32
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	4928      	ldr	r1, [pc, #160]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 800989a:	4313      	orrs	r3, r2
 800989c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800989e:	4b27      	ldr	r3, [pc, #156]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a2:	4a26      	ldr	r2, [pc, #152]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098a4:	f023 0310 	bic.w	r3, r3, #16
 80098a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098aa:	4b24      	ldr	r3, [pc, #144]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098ae:	4b24      	ldr	r3, [pc, #144]	@ (8009940 <RCCEx_PLL2_Config+0x160>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	69d2      	ldr	r2, [r2, #28]
 80098b6:	00d2      	lsls	r2, r2, #3
 80098b8:	4920      	ldr	r1, [pc, #128]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098be:	4b1f      	ldr	r3, [pc, #124]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c2:	4a1e      	ldr	r2, [pc, #120]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098c4:	f043 0310 	orr.w	r3, r3, #16
 80098c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d106      	bne.n	80098de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098d0:	4b1a      	ldr	r3, [pc, #104]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d4:	4a19      	ldr	r2, [pc, #100]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098dc:	e00f      	b.n	80098fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d106      	bne.n	80098f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098e4:	4b15      	ldr	r3, [pc, #84]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e8:	4a14      	ldr	r2, [pc, #80]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098f0:	e005      	b.n	80098fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098f2:	4b12      	ldr	r3, [pc, #72]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f6:	4a11      	ldr	r2, [pc, #68]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 80098f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098fe:	4b0f      	ldr	r3, [pc, #60]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a0e      	ldr	r2, [pc, #56]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009904:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800990a:	f7fb fcf9 	bl	8005300 <HAL_GetTick>
 800990e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009910:	e008      	b.n	8009924 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009912:	f7fb fcf5 	bl	8005300 <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	2b02      	cmp	r3, #2
 800991e:	d901      	bls.n	8009924 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009920:	2303      	movs	r3, #3
 8009922:	e006      	b.n	8009932 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009924:	4b05      	ldr	r3, [pc, #20]	@ (800993c <RCCEx_PLL2_Config+0x15c>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d0f0      	beq.n	8009912 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	58024400 	.word	0x58024400
 8009940:	ffff0007 	.word	0xffff0007

08009944 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009952:	4b53      	ldr	r3, [pc, #332]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	2b03      	cmp	r3, #3
 800995c:	d101      	bne.n	8009962 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e099      	b.n	8009a96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009962:	4b4f      	ldr	r3, [pc, #316]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a4e      	ldr	r2, [pc, #312]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800996c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800996e:	f7fb fcc7 	bl	8005300 <HAL_GetTick>
 8009972:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009974:	e008      	b.n	8009988 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009976:	f7fb fcc3 	bl	8005300 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d901      	bls.n	8009988 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e086      	b.n	8009a96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009988:	4b45      	ldr	r3, [pc, #276]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1f0      	bne.n	8009976 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009994:	4b42      	ldr	r3, [pc, #264]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009998:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	051b      	lsls	r3, r3, #20
 80099a2:	493f      	ldr	r1, [pc, #252]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	025b      	lsls	r3, r3, #9
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	041b      	lsls	r3, r3, #16
 80099c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099ca:	431a      	orrs	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	061b      	lsls	r3, r3, #24
 80099d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099d8:	4931      	ldr	r1, [pc, #196]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099de:	4b30      	ldr	r3, [pc, #192]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	492d      	ldr	r1, [pc, #180]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099f0:	4b2b      	ldr	r3, [pc, #172]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 80099f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	4928      	ldr	r1, [pc, #160]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a02:	4b27      	ldr	r3, [pc, #156]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a06:	4a26      	ldr	r2, [pc, #152]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a0e:	4b24      	ldr	r3, [pc, #144]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a12:	4b24      	ldr	r3, [pc, #144]	@ (8009aa4 <RCCEx_PLL3_Config+0x160>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	69d2      	ldr	r2, [r2, #28]
 8009a1a:	00d2      	lsls	r2, r2, #3
 8009a1c:	4920      	ldr	r1, [pc, #128]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a22:	4b1f      	ldr	r3, [pc, #124]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a26:	4a1e      	ldr	r2, [pc, #120]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d106      	bne.n	8009a42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a34:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a38:	4a19      	ldr	r2, [pc, #100]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a40:	e00f      	b.n	8009a62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d106      	bne.n	8009a56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a48:	4b15      	ldr	r3, [pc, #84]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	4a14      	ldr	r2, [pc, #80]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a54:	e005      	b.n	8009a62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a56:	4b12      	ldr	r3, [pc, #72]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5a:	4a11      	ldr	r2, [pc, #68]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a62:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a0e      	ldr	r2, [pc, #56]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a6e:	f7fb fc47 	bl	8005300 <HAL_GetTick>
 8009a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a74:	e008      	b.n	8009a88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a76:	f7fb fc43 	bl	8005300 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d901      	bls.n	8009a88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e006      	b.n	8009a96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a88:	4b05      	ldr	r3, [pc, #20]	@ (8009aa0 <RCCEx_PLL3_Config+0x15c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0f0      	beq.n	8009a76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	ffff0007 	.word	0xffff0007

08009aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e049      	b.n	8009b4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d106      	bne.n	8009ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f841 	bl	8009b56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	f000 f9e8 	bl	8009ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b083      	sub	sp, #12
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b5e:	bf00      	nop
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
	...

08009b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d001      	beq.n	8009b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e054      	b.n	8009c2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0201 	orr.w	r2, r2, #1
 8009b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a26      	ldr	r2, [pc, #152]	@ (8009c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d022      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bae:	d01d      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a22      	ldr	r2, [pc, #136]	@ (8009c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d018      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a21      	ldr	r2, [pc, #132]	@ (8009c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d013      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8009c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d00e      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8009c4c <HAL_TIM_Base_Start_IT+0xe0>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d009      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8009c50 <HAL_TIM_Base_Start_IT+0xe4>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d004      	beq.n	8009bec <HAL_TIM_Base_Start_IT+0x80>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a1b      	ldr	r2, [pc, #108]	@ (8009c54 <HAL_TIM_Base_Start_IT+0xe8>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d115      	bne.n	8009c18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689a      	ldr	r2, [r3, #8]
 8009bf2:	4b19      	ldr	r3, [pc, #100]	@ (8009c58 <HAL_TIM_Base_Start_IT+0xec>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b06      	cmp	r3, #6
 8009bfc:	d015      	beq.n	8009c2a <HAL_TIM_Base_Start_IT+0xbe>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c04:	d011      	beq.n	8009c2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f042 0201 	orr.w	r2, r2, #1
 8009c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c16:	e008      	b.n	8009c2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0201 	orr.w	r2, r2, #1
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	e000      	b.n	8009c2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	40010000 	.word	0x40010000
 8009c40:	40000400 	.word	0x40000400
 8009c44:	40000800 	.word	0x40000800
 8009c48:	40000c00 	.word	0x40000c00
 8009c4c:	40010400 	.word	0x40010400
 8009c50:	40001800 	.word	0x40001800
 8009c54:	40014000 	.word	0x40014000
 8009c58:	00010007 	.word	0x00010007

08009c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f003 0302 	and.w	r3, r3, #2
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d020      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d01b      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f06f 0202 	mvn.w	r2, #2
 8009c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f8e9 	bl	8009e7e <HAL_TIM_IC_CaptureCallback>
 8009cac:	e005      	b.n	8009cba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f8db 	bl	8009e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f8ec 	bl	8009e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f003 0304 	and.w	r3, r3, #4
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d020      	beq.n	8009d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d01b      	beq.n	8009d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f06f 0204 	mvn.w	r2, #4
 8009cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f8c3 	bl	8009e7e <HAL_TIM_IC_CaptureCallback>
 8009cf8:	e005      	b.n	8009d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f8b5 	bl	8009e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8c6 	bl	8009e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f003 0308 	and.w	r3, r3, #8
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d020      	beq.n	8009d58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f003 0308 	and.w	r3, r3, #8
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01b      	beq.n	8009d58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f06f 0208 	mvn.w	r2, #8
 8009d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f89d 	bl	8009e7e <HAL_TIM_IC_CaptureCallback>
 8009d44:	e005      	b.n	8009d52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f88f 	bl	8009e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f8a0 	bl	8009e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2200      	movs	r2, #0
 8009d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d020      	beq.n	8009da4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f003 0310 	and.w	r3, r3, #16
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d01b      	beq.n	8009da4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f06f 0210 	mvn.w	r2, #16
 8009d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2208      	movs	r2, #8
 8009d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 f877 	bl	8009e7e <HAL_TIM_IC_CaptureCallback>
 8009d90:	e005      	b.n	8009d9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f869 	bl	8009e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f87a 	bl	8009e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f003 0301 	and.w	r3, r3, #1
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00c      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d007      	beq.n	8009dc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f06f 0201 	mvn.w	r2, #1
 8009dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7fa fd38 	bl	8004838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d104      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00c      	beq.n	8009df6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d007      	beq.n	8009df6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f90d 	bl	800a010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00c      	beq.n	8009e1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d007      	beq.n	8009e1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f905 	bl	800a024 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00c      	beq.n	8009e3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d007      	beq.n	8009e3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f834 	bl	8009ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f003 0320 	and.w	r3, r3, #32
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00c      	beq.n	8009e62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d007      	beq.n	8009e62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f06f 0220 	mvn.w	r2, #32
 8009e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f8cd 	bl	8009ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a43      	ldr	r2, [pc, #268]	@ (8009fdc <TIM_Base_SetConfig+0x120>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d013      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eda:	d00f      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a40      	ldr	r2, [pc, #256]	@ (8009fe0 <TIM_Base_SetConfig+0x124>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00b      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8009fe4 <TIM_Base_SetConfig+0x128>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d007      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a3e      	ldr	r2, [pc, #248]	@ (8009fe8 <TIM_Base_SetConfig+0x12c>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d003      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8009fec <TIM_Base_SetConfig+0x130>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d108      	bne.n	8009f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a32      	ldr	r2, [pc, #200]	@ (8009fdc <TIM_Base_SetConfig+0x120>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d01f      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f1c:	d01b      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a2f      	ldr	r2, [pc, #188]	@ (8009fe0 <TIM_Base_SetConfig+0x124>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d017      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a2e      	ldr	r2, [pc, #184]	@ (8009fe4 <TIM_Base_SetConfig+0x128>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d013      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a2d      	ldr	r2, [pc, #180]	@ (8009fe8 <TIM_Base_SetConfig+0x12c>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d00f      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a2c      	ldr	r2, [pc, #176]	@ (8009fec <TIM_Base_SetConfig+0x130>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00b      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a2b      	ldr	r2, [pc, #172]	@ (8009ff0 <TIM_Base_SetConfig+0x134>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d007      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a2a      	ldr	r2, [pc, #168]	@ (8009ff4 <TIM_Base_SetConfig+0x138>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a29      	ldr	r2, [pc, #164]	@ (8009ff8 <TIM_Base_SetConfig+0x13c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d108      	bne.n	8009f68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a14      	ldr	r2, [pc, #80]	@ (8009fdc <TIM_Base_SetConfig+0x120>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d00f      	beq.n	8009fae <TIM_Base_SetConfig+0xf2>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a16      	ldr	r2, [pc, #88]	@ (8009fec <TIM_Base_SetConfig+0x130>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00b      	beq.n	8009fae <TIM_Base_SetConfig+0xf2>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a15      	ldr	r2, [pc, #84]	@ (8009ff0 <TIM_Base_SetConfig+0x134>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d007      	beq.n	8009fae <TIM_Base_SetConfig+0xf2>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a14      	ldr	r2, [pc, #80]	@ (8009ff4 <TIM_Base_SetConfig+0x138>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d003      	beq.n	8009fae <TIM_Base_SetConfig+0xf2>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a13      	ldr	r2, [pc, #76]	@ (8009ff8 <TIM_Base_SetConfig+0x13c>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d103      	bne.n	8009fb6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	691a      	ldr	r2, [r3, #16]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f043 0204 	orr.w	r2, r3, #4
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	601a      	str	r2, [r3, #0]
}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	40010000 	.word	0x40010000
 8009fe0:	40000400 	.word	0x40000400
 8009fe4:	40000800 	.word	0x40000800
 8009fe8:	40000c00 	.word	0x40000c00
 8009fec:	40010400 	.word	0x40010400
 8009ff0:	40014000 	.word	0x40014000
 8009ff4:	40014400 	.word	0x40014400
 8009ff8:	40014800 	.word	0x40014800

08009ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d101      	bne.n	800a04a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e042      	b.n	800a0d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a050:	2b00      	cmp	r3, #0
 800a052:	d106      	bne.n	800a062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7fa fd57 	bl	8004b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2224      	movs	r2, #36	@ 0x24
 800a066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f022 0201 	bic.w	r2, r2, #1
 800a078:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fe1e 	bl	800acc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f8b3 	bl	800a1f4 <UART_SetConfig>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b01      	cmp	r3, #1
 800a092:	d101      	bne.n	800a098 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	e01b      	b.n	800a0d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689a      	ldr	r2, [r3, #8]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f042 0201 	orr.w	r2, r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fe9d 	bl	800ae08 <UART_CheckIdleState>
 800a0ce:	4603      	mov	r3, r0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08a      	sub	sp, #40	@ 0x28
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	d17b      	bne.n	800a1ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <HAL_UART_Transmit+0x26>
 800a0f8:	88fb      	ldrh	r3, [r7, #6]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e074      	b.n	800a1ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2221      	movs	r2, #33	@ 0x21
 800a10e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a112:	f7fb f8f5 	bl	8005300 <HAL_GetTick>
 800a116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	88fa      	ldrh	r2, [r7, #6]
 800a11c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	88fa      	ldrh	r2, [r7, #6]
 800a124:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a130:	d108      	bne.n	800a144 <HAL_UART_Transmit+0x6c>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d104      	bne.n	800a144 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	61bb      	str	r3, [r7, #24]
 800a142:	e003      	b.n	800a14c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a14c:	e030      	b.n	800a1b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2200      	movs	r2, #0
 800a156:	2180      	movs	r1, #128	@ 0x80
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 feff 	bl	800af5c <UART_WaitOnFlagUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2220      	movs	r2, #32
 800a168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	e03d      	b.n	800a1ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10b      	bne.n	800a18e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a184:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	3302      	adds	r3, #2
 800a18a:	61bb      	str	r3, [r7, #24]
 800a18c:	e007      	b.n	800a19e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	781a      	ldrb	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	3301      	adds	r3, #1
 800a19c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1c8      	bne.n	800a14e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2140      	movs	r1, #64	@ 0x40
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 fec8 	bl	800af5c <UART_WaitOnFlagUntilTimeout>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d005      	beq.n	800a1de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e006      	b.n	800a1ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e000      	b.n	800a1ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a1ea:	2302      	movs	r3, #2
  }
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3720      	adds	r7, #32
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1f8:	b092      	sub	sp, #72	@ 0x48
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	431a      	orrs	r2, r3
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	431a      	orrs	r2, r3
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	69db      	ldr	r3, [r3, #28]
 800a218:	4313      	orrs	r3, r2
 800a21a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	4bbe      	ldr	r3, [pc, #760]	@ (800a51c <UART_SetConfig+0x328>)
 800a224:	4013      	ands	r3, r2
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	6812      	ldr	r2, [r2, #0]
 800a22a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a22c:	430b      	orrs	r3, r1
 800a22e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	430a      	orrs	r2, r1
 800a244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4ab3      	ldr	r2, [pc, #716]	@ (800a520 <UART_SetConfig+0x32c>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a25c:	4313      	orrs	r3, r2
 800a25e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689a      	ldr	r2, [r3, #8]
 800a266:	4baf      	ldr	r3, [pc, #700]	@ (800a524 <UART_SetConfig+0x330>)
 800a268:	4013      	ands	r3, r2
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	6812      	ldr	r2, [r2, #0]
 800a26e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a270:	430b      	orrs	r3, r1
 800a272:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27a:	f023 010f 	bic.w	r1, r3, #15
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4aa6      	ldr	r2, [pc, #664]	@ (800a528 <UART_SetConfig+0x334>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d177      	bne.n	800a384 <UART_SetConfig+0x190>
 800a294:	4ba5      	ldr	r3, [pc, #660]	@ (800a52c <UART_SetConfig+0x338>)
 800a296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a298:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a29c:	2b28      	cmp	r3, #40	@ 0x28
 800a29e:	d86d      	bhi.n	800a37c <UART_SetConfig+0x188>
 800a2a0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a8 <UART_SetConfig+0xb4>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a34d 	.word	0x0800a34d
 800a2ac:	0800a37d 	.word	0x0800a37d
 800a2b0:	0800a37d 	.word	0x0800a37d
 800a2b4:	0800a37d 	.word	0x0800a37d
 800a2b8:	0800a37d 	.word	0x0800a37d
 800a2bc:	0800a37d 	.word	0x0800a37d
 800a2c0:	0800a37d 	.word	0x0800a37d
 800a2c4:	0800a37d 	.word	0x0800a37d
 800a2c8:	0800a355 	.word	0x0800a355
 800a2cc:	0800a37d 	.word	0x0800a37d
 800a2d0:	0800a37d 	.word	0x0800a37d
 800a2d4:	0800a37d 	.word	0x0800a37d
 800a2d8:	0800a37d 	.word	0x0800a37d
 800a2dc:	0800a37d 	.word	0x0800a37d
 800a2e0:	0800a37d 	.word	0x0800a37d
 800a2e4:	0800a37d 	.word	0x0800a37d
 800a2e8:	0800a35d 	.word	0x0800a35d
 800a2ec:	0800a37d 	.word	0x0800a37d
 800a2f0:	0800a37d 	.word	0x0800a37d
 800a2f4:	0800a37d 	.word	0x0800a37d
 800a2f8:	0800a37d 	.word	0x0800a37d
 800a2fc:	0800a37d 	.word	0x0800a37d
 800a300:	0800a37d 	.word	0x0800a37d
 800a304:	0800a37d 	.word	0x0800a37d
 800a308:	0800a365 	.word	0x0800a365
 800a30c:	0800a37d 	.word	0x0800a37d
 800a310:	0800a37d 	.word	0x0800a37d
 800a314:	0800a37d 	.word	0x0800a37d
 800a318:	0800a37d 	.word	0x0800a37d
 800a31c:	0800a37d 	.word	0x0800a37d
 800a320:	0800a37d 	.word	0x0800a37d
 800a324:	0800a37d 	.word	0x0800a37d
 800a328:	0800a36d 	.word	0x0800a36d
 800a32c:	0800a37d 	.word	0x0800a37d
 800a330:	0800a37d 	.word	0x0800a37d
 800a334:	0800a37d 	.word	0x0800a37d
 800a338:	0800a37d 	.word	0x0800a37d
 800a33c:	0800a37d 	.word	0x0800a37d
 800a340:	0800a37d 	.word	0x0800a37d
 800a344:	0800a37d 	.word	0x0800a37d
 800a348:	0800a375 	.word	0x0800a375
 800a34c:	2301      	movs	r3, #1
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e222      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a354:	2304      	movs	r3, #4
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e21e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a35c:	2308      	movs	r3, #8
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e21a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a364:	2310      	movs	r3, #16
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36a:	e216      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a36c:	2320      	movs	r3, #32
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a372:	e212      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a374:	2340      	movs	r3, #64	@ 0x40
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37a:	e20e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a37c:	2380      	movs	r3, #128	@ 0x80
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a382:	e20a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a69      	ldr	r2, [pc, #420]	@ (800a530 <UART_SetConfig+0x33c>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d130      	bne.n	800a3f0 <UART_SetConfig+0x1fc>
 800a38e:	4b67      	ldr	r3, [pc, #412]	@ (800a52c <UART_SetConfig+0x338>)
 800a390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b05      	cmp	r3, #5
 800a398:	d826      	bhi.n	800a3e8 <UART_SetConfig+0x1f4>
 800a39a:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <UART_SetConfig+0x1ac>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3c1 	.word	0x0800a3c1
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	0800a3d1 	.word	0x0800a3d1
 800a3b0:	0800a3d9 	.word	0x0800a3d9
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e1ec      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e1e8      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e1e4      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3d6:	e1e0      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3d8:	2320      	movs	r3, #32
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3de:	e1dc      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3e0:	2340      	movs	r3, #64	@ 0x40
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3e6:	e1d8      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3e8:	2380      	movs	r3, #128	@ 0x80
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ee:	e1d4      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a4f      	ldr	r2, [pc, #316]	@ (800a534 <UART_SetConfig+0x340>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d130      	bne.n	800a45c <UART_SetConfig+0x268>
 800a3fa:	4b4c      	ldr	r3, [pc, #304]	@ (800a52c <UART_SetConfig+0x338>)
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	2b05      	cmp	r3, #5
 800a404:	d826      	bhi.n	800a454 <UART_SetConfig+0x260>
 800a406:	a201      	add	r2, pc, #4	@ (adr r2, 800a40c <UART_SetConfig+0x218>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a425 	.word	0x0800a425
 800a410:	0800a42d 	.word	0x0800a42d
 800a414:	0800a435 	.word	0x0800a435
 800a418:	0800a43d 	.word	0x0800a43d
 800a41c:	0800a445 	.word	0x0800a445
 800a420:	0800a44d 	.word	0x0800a44d
 800a424:	2300      	movs	r3, #0
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e1b6      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a42c:	2304      	movs	r3, #4
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e1b2      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a434:	2308      	movs	r3, #8
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e1ae      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a43c:	2310      	movs	r3, #16
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e1aa      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a444:	2320      	movs	r3, #32
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e1a6      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a44c:	2340      	movs	r3, #64	@ 0x40
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e1a2      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a454:	2380      	movs	r3, #128	@ 0x80
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e19e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a35      	ldr	r2, [pc, #212]	@ (800a538 <UART_SetConfig+0x344>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d130      	bne.n	800a4c8 <UART_SetConfig+0x2d4>
 800a466:	4b31      	ldr	r3, [pc, #196]	@ (800a52c <UART_SetConfig+0x338>)
 800a468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a46a:	f003 0307 	and.w	r3, r3, #7
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d826      	bhi.n	800a4c0 <UART_SetConfig+0x2cc>
 800a472:	a201      	add	r2, pc, #4	@ (adr r2, 800a478 <UART_SetConfig+0x284>)
 800a474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a478:	0800a491 	.word	0x0800a491
 800a47c:	0800a499 	.word	0x0800a499
 800a480:	0800a4a1 	.word	0x0800a4a1
 800a484:	0800a4a9 	.word	0x0800a4a9
 800a488:	0800a4b1 	.word	0x0800a4b1
 800a48c:	0800a4b9 	.word	0x0800a4b9
 800a490:	2300      	movs	r3, #0
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a496:	e180      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a498:	2304      	movs	r3, #4
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e17c      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e178      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e174      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e170      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4b8:	2340      	movs	r3, #64	@ 0x40
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e16c      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4c0:	2380      	movs	r3, #128	@ 0x80
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e168      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a53c <UART_SetConfig+0x348>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d142      	bne.n	800a558 <UART_SetConfig+0x364>
 800a4d2:	4b16      	ldr	r3, [pc, #88]	@ (800a52c <UART_SetConfig+0x338>)
 800a4d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b05      	cmp	r3, #5
 800a4dc:	d838      	bhi.n	800a550 <UART_SetConfig+0x35c>
 800a4de:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e4 <UART_SetConfig+0x2f0>)
 800a4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e4:	0800a4fd 	.word	0x0800a4fd
 800a4e8:	0800a505 	.word	0x0800a505
 800a4ec:	0800a50d 	.word	0x0800a50d
 800a4f0:	0800a515 	.word	0x0800a515
 800a4f4:	0800a541 	.word	0x0800a541
 800a4f8:	0800a549 	.word	0x0800a549
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a502:	e14a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a504:	2304      	movs	r3, #4
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e146      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a50c:	2308      	movs	r3, #8
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e142      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a514:	2310      	movs	r3, #16
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e13e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a51c:	cfff69f3 	.word	0xcfff69f3
 800a520:	58000c00 	.word	0x58000c00
 800a524:	11fff4ff 	.word	0x11fff4ff
 800a528:	40011000 	.word	0x40011000
 800a52c:	58024400 	.word	0x58024400
 800a530:	40004400 	.word	0x40004400
 800a534:	40004800 	.word	0x40004800
 800a538:	40004c00 	.word	0x40004c00
 800a53c:	40005000 	.word	0x40005000
 800a540:	2320      	movs	r3, #32
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a546:	e128      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a548:	2340      	movs	r3, #64	@ 0x40
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e124      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a550:	2380      	movs	r3, #128	@ 0x80
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a556:	e120      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4acb      	ldr	r2, [pc, #812]	@ (800a88c <UART_SetConfig+0x698>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d176      	bne.n	800a650 <UART_SetConfig+0x45c>
 800a562:	4bcb      	ldr	r3, [pc, #812]	@ (800a890 <UART_SetConfig+0x69c>)
 800a564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a56a:	2b28      	cmp	r3, #40	@ 0x28
 800a56c:	d86c      	bhi.n	800a648 <UART_SetConfig+0x454>
 800a56e:	a201      	add	r2, pc, #4	@ (adr r2, 800a574 <UART_SetConfig+0x380>)
 800a570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a574:	0800a619 	.word	0x0800a619
 800a578:	0800a649 	.word	0x0800a649
 800a57c:	0800a649 	.word	0x0800a649
 800a580:	0800a649 	.word	0x0800a649
 800a584:	0800a649 	.word	0x0800a649
 800a588:	0800a649 	.word	0x0800a649
 800a58c:	0800a649 	.word	0x0800a649
 800a590:	0800a649 	.word	0x0800a649
 800a594:	0800a621 	.word	0x0800a621
 800a598:	0800a649 	.word	0x0800a649
 800a59c:	0800a649 	.word	0x0800a649
 800a5a0:	0800a649 	.word	0x0800a649
 800a5a4:	0800a649 	.word	0x0800a649
 800a5a8:	0800a649 	.word	0x0800a649
 800a5ac:	0800a649 	.word	0x0800a649
 800a5b0:	0800a649 	.word	0x0800a649
 800a5b4:	0800a629 	.word	0x0800a629
 800a5b8:	0800a649 	.word	0x0800a649
 800a5bc:	0800a649 	.word	0x0800a649
 800a5c0:	0800a649 	.word	0x0800a649
 800a5c4:	0800a649 	.word	0x0800a649
 800a5c8:	0800a649 	.word	0x0800a649
 800a5cc:	0800a649 	.word	0x0800a649
 800a5d0:	0800a649 	.word	0x0800a649
 800a5d4:	0800a631 	.word	0x0800a631
 800a5d8:	0800a649 	.word	0x0800a649
 800a5dc:	0800a649 	.word	0x0800a649
 800a5e0:	0800a649 	.word	0x0800a649
 800a5e4:	0800a649 	.word	0x0800a649
 800a5e8:	0800a649 	.word	0x0800a649
 800a5ec:	0800a649 	.word	0x0800a649
 800a5f0:	0800a649 	.word	0x0800a649
 800a5f4:	0800a639 	.word	0x0800a639
 800a5f8:	0800a649 	.word	0x0800a649
 800a5fc:	0800a649 	.word	0x0800a649
 800a600:	0800a649 	.word	0x0800a649
 800a604:	0800a649 	.word	0x0800a649
 800a608:	0800a649 	.word	0x0800a649
 800a60c:	0800a649 	.word	0x0800a649
 800a610:	0800a649 	.word	0x0800a649
 800a614:	0800a641 	.word	0x0800a641
 800a618:	2301      	movs	r3, #1
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61e:	e0bc      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a620:	2304      	movs	r3, #4
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e0b8      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a628:	2308      	movs	r3, #8
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e0b4      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a630:	2310      	movs	r3, #16
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a636:	e0b0      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a638:	2320      	movs	r3, #32
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63e:	e0ac      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a640:	2340      	movs	r3, #64	@ 0x40
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e0a8      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a648:	2380      	movs	r3, #128	@ 0x80
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e0a4      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a8f      	ldr	r2, [pc, #572]	@ (800a894 <UART_SetConfig+0x6a0>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d130      	bne.n	800a6bc <UART_SetConfig+0x4c8>
 800a65a:	4b8d      	ldr	r3, [pc, #564]	@ (800a890 <UART_SetConfig+0x69c>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	2b05      	cmp	r3, #5
 800a664:	d826      	bhi.n	800a6b4 <UART_SetConfig+0x4c0>
 800a666:	a201      	add	r2, pc, #4	@ (adr r2, 800a66c <UART_SetConfig+0x478>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a685 	.word	0x0800a685
 800a670:	0800a68d 	.word	0x0800a68d
 800a674:	0800a695 	.word	0x0800a695
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a6a5 	.word	0x0800a6a5
 800a680:	0800a6ad 	.word	0x0800a6ad
 800a684:	2300      	movs	r3, #0
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e086      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a68c:	2304      	movs	r3, #4
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e082      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a694:	2308      	movs	r3, #8
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e07e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a69c:	2310      	movs	r3, #16
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e07a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e076      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6ac:	2340      	movs	r3, #64	@ 0x40
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e072      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6b4:	2380      	movs	r3, #128	@ 0x80
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e06e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a75      	ldr	r2, [pc, #468]	@ (800a898 <UART_SetConfig+0x6a4>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d130      	bne.n	800a728 <UART_SetConfig+0x534>
 800a6c6:	4b72      	ldr	r3, [pc, #456]	@ (800a890 <UART_SetConfig+0x69c>)
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d826      	bhi.n	800a720 <UART_SetConfig+0x52c>
 800a6d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6d8 <UART_SetConfig+0x4e4>)
 800a6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d8:	0800a6f1 	.word	0x0800a6f1
 800a6dc:	0800a6f9 	.word	0x0800a6f9
 800a6e0:	0800a701 	.word	0x0800a701
 800a6e4:	0800a709 	.word	0x0800a709
 800a6e8:	0800a711 	.word	0x0800a711
 800a6ec:	0800a719 	.word	0x0800a719
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f6:	e050      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a6f8:	2304      	movs	r3, #4
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e04c      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a700:	2308      	movs	r3, #8
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e048      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a708:	2310      	movs	r3, #16
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e044      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a710:	2320      	movs	r3, #32
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e040      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a718:	2340      	movs	r3, #64	@ 0x40
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e03c      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a720:	2380      	movs	r3, #128	@ 0x80
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e038      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a5b      	ldr	r2, [pc, #364]	@ (800a89c <UART_SetConfig+0x6a8>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d130      	bne.n	800a794 <UART_SetConfig+0x5a0>
 800a732:	4b57      	ldr	r3, [pc, #348]	@ (800a890 <UART_SetConfig+0x69c>)
 800a734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	d826      	bhi.n	800a78c <UART_SetConfig+0x598>
 800a73e:	a201      	add	r2, pc, #4	@ (adr r2, 800a744 <UART_SetConfig+0x550>)
 800a740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a744:	0800a75d 	.word	0x0800a75d
 800a748:	0800a765 	.word	0x0800a765
 800a74c:	0800a76d 	.word	0x0800a76d
 800a750:	0800a775 	.word	0x0800a775
 800a754:	0800a77d 	.word	0x0800a77d
 800a758:	0800a785 	.word	0x0800a785
 800a75c:	2302      	movs	r3, #2
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e01a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a764:	2304      	movs	r3, #4
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e016      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a76c:	2308      	movs	r3, #8
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e012      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77a:	e00e      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a77c:	2320      	movs	r3, #32
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e00a      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a784:	2340      	movs	r3, #64	@ 0x40
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e006      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a78c:	2380      	movs	r3, #128	@ 0x80
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e002      	b.n	800a79a <UART_SetConfig+0x5a6>
 800a794:	2380      	movs	r3, #128	@ 0x80
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a3f      	ldr	r2, [pc, #252]	@ (800a89c <UART_SetConfig+0x6a8>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	f040 80f8 	bne.w	800a996 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a7a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7aa:	2b20      	cmp	r3, #32
 800a7ac:	dc46      	bgt.n	800a83c <UART_SetConfig+0x648>
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	f2c0 8082 	blt.w	800a8b8 <UART_SetConfig+0x6c4>
 800a7b4:	3b02      	subs	r3, #2
 800a7b6:	2b1e      	cmp	r3, #30
 800a7b8:	d87e      	bhi.n	800a8b8 <UART_SetConfig+0x6c4>
 800a7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c0 <UART_SetConfig+0x5cc>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a843 	.word	0x0800a843
 800a7c4:	0800a8b9 	.word	0x0800a8b9
 800a7c8:	0800a84b 	.word	0x0800a84b
 800a7cc:	0800a8b9 	.word	0x0800a8b9
 800a7d0:	0800a8b9 	.word	0x0800a8b9
 800a7d4:	0800a8b9 	.word	0x0800a8b9
 800a7d8:	0800a85b 	.word	0x0800a85b
 800a7dc:	0800a8b9 	.word	0x0800a8b9
 800a7e0:	0800a8b9 	.word	0x0800a8b9
 800a7e4:	0800a8b9 	.word	0x0800a8b9
 800a7e8:	0800a8b9 	.word	0x0800a8b9
 800a7ec:	0800a8b9 	.word	0x0800a8b9
 800a7f0:	0800a8b9 	.word	0x0800a8b9
 800a7f4:	0800a8b9 	.word	0x0800a8b9
 800a7f8:	0800a86b 	.word	0x0800a86b
 800a7fc:	0800a8b9 	.word	0x0800a8b9
 800a800:	0800a8b9 	.word	0x0800a8b9
 800a804:	0800a8b9 	.word	0x0800a8b9
 800a808:	0800a8b9 	.word	0x0800a8b9
 800a80c:	0800a8b9 	.word	0x0800a8b9
 800a810:	0800a8b9 	.word	0x0800a8b9
 800a814:	0800a8b9 	.word	0x0800a8b9
 800a818:	0800a8b9 	.word	0x0800a8b9
 800a81c:	0800a8b9 	.word	0x0800a8b9
 800a820:	0800a8b9 	.word	0x0800a8b9
 800a824:	0800a8b9 	.word	0x0800a8b9
 800a828:	0800a8b9 	.word	0x0800a8b9
 800a82c:	0800a8b9 	.word	0x0800a8b9
 800a830:	0800a8b9 	.word	0x0800a8b9
 800a834:	0800a8b9 	.word	0x0800a8b9
 800a838:	0800a8ab 	.word	0x0800a8ab
 800a83c:	2b40      	cmp	r3, #64	@ 0x40
 800a83e:	d037      	beq.n	800a8b0 <UART_SetConfig+0x6bc>
 800a840:	e03a      	b.n	800a8b8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a842:	f7fe fd0f 	bl	8009264 <HAL_RCCEx_GetD3PCLK1Freq>
 800a846:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a848:	e03c      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a84a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fd1e 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a858:	e034      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85a:	f107 0318 	add.w	r3, r7, #24
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe fe6a 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a868:	e02c      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a86a:	4b09      	ldr	r3, [pc, #36]	@ (800a890 <UART_SetConfig+0x69c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d016      	beq.n	800a8a4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a876:	4b06      	ldr	r3, [pc, #24]	@ (800a890 <UART_SetConfig+0x69c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	08db      	lsrs	r3, r3, #3
 800a87c:	f003 0303 	and.w	r3, r3, #3
 800a880:	4a07      	ldr	r2, [pc, #28]	@ (800a8a0 <UART_SetConfig+0x6ac>)
 800a882:	fa22 f303 	lsr.w	r3, r2, r3
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a888:	e01c      	b.n	800a8c4 <UART_SetConfig+0x6d0>
 800a88a:	bf00      	nop
 800a88c:	40011400 	.word	0x40011400
 800a890:	58024400 	.word	0x58024400
 800a894:	40007800 	.word	0x40007800
 800a898:	40007c00 	.word	0x40007c00
 800a89c:	58000c00 	.word	0x58000c00
 800a8a0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a8a4:	4b9d      	ldr	r3, [pc, #628]	@ (800ab1c <UART_SetConfig+0x928>)
 800a8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8a8:	e00c      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8aa:	4b9d      	ldr	r3, [pc, #628]	@ (800ab20 <UART_SetConfig+0x92c>)
 800a8ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ae:	e009      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b6:	e005      	b.n	800a8c4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 81de 	beq.w	800ac88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d0:	4a94      	ldr	r2, [pc, #592]	@ (800ab24 <UART_SetConfig+0x930>)
 800a8d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8de:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	4413      	add	r3, r2
 800a8ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d305      	bcc.n	800a8fc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d903      	bls.n	800a904 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a902:	e1c1      	b.n	800ac88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a906:	2200      	movs	r2, #0
 800a908:	60bb      	str	r3, [r7, #8]
 800a90a:	60fa      	str	r2, [r7, #12]
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a910:	4a84      	ldr	r2, [pc, #528]	@ (800ab24 <UART_SetConfig+0x930>)
 800a912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a916:	b29b      	uxth	r3, r3
 800a918:	2200      	movs	r2, #0
 800a91a:	603b      	str	r3, [r7, #0]
 800a91c:	607a      	str	r2, [r7, #4]
 800a91e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a926:	f7f5 fffd 	bl	8000924 <__aeabi_uldivmod>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4610      	mov	r0, r2
 800a930:	4619      	mov	r1, r3
 800a932:	f04f 0200 	mov.w	r2, #0
 800a936:	f04f 0300 	mov.w	r3, #0
 800a93a:	020b      	lsls	r3, r1, #8
 800a93c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a940:	0202      	lsls	r2, r0, #8
 800a942:	6979      	ldr	r1, [r7, #20]
 800a944:	6849      	ldr	r1, [r1, #4]
 800a946:	0849      	lsrs	r1, r1, #1
 800a948:	2000      	movs	r0, #0
 800a94a:	460c      	mov	r4, r1
 800a94c:	4605      	mov	r5, r0
 800a94e:	eb12 0804 	adds.w	r8, r2, r4
 800a952:	eb43 0905 	adc.w	r9, r3, r5
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	469a      	mov	sl, r3
 800a95e:	4693      	mov	fp, r2
 800a960:	4652      	mov	r2, sl
 800a962:	465b      	mov	r3, fp
 800a964:	4640      	mov	r0, r8
 800a966:	4649      	mov	r1, r9
 800a968:	f7f5 ffdc 	bl	8000924 <__aeabi_uldivmod>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4613      	mov	r3, r2
 800a972:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a97a:	d308      	bcc.n	800a98e <UART_SetConfig+0x79a>
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a982:	d204      	bcs.n	800a98e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a98a:	60da      	str	r2, [r3, #12]
 800a98c:	e17c      	b.n	800ac88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a994:	e178      	b.n	800ac88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a99e:	f040 80c5 	bne.w	800ab2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a9a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	dc48      	bgt.n	800aa3c <UART_SetConfig+0x848>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	db7b      	blt.n	800aaa6 <UART_SetConfig+0x8b2>
 800a9ae:	2b20      	cmp	r3, #32
 800a9b0:	d879      	bhi.n	800aaa6 <UART_SetConfig+0x8b2>
 800a9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <UART_SetConfig+0x7c4>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800aa43 	.word	0x0800aa43
 800a9bc:	0800aa4b 	.word	0x0800aa4b
 800a9c0:	0800aaa7 	.word	0x0800aaa7
 800a9c4:	0800aaa7 	.word	0x0800aaa7
 800a9c8:	0800aa53 	.word	0x0800aa53
 800a9cc:	0800aaa7 	.word	0x0800aaa7
 800a9d0:	0800aaa7 	.word	0x0800aaa7
 800a9d4:	0800aaa7 	.word	0x0800aaa7
 800a9d8:	0800aa63 	.word	0x0800aa63
 800a9dc:	0800aaa7 	.word	0x0800aaa7
 800a9e0:	0800aaa7 	.word	0x0800aaa7
 800a9e4:	0800aaa7 	.word	0x0800aaa7
 800a9e8:	0800aaa7 	.word	0x0800aaa7
 800a9ec:	0800aaa7 	.word	0x0800aaa7
 800a9f0:	0800aaa7 	.word	0x0800aaa7
 800a9f4:	0800aaa7 	.word	0x0800aaa7
 800a9f8:	0800aa73 	.word	0x0800aa73
 800a9fc:	0800aaa7 	.word	0x0800aaa7
 800aa00:	0800aaa7 	.word	0x0800aaa7
 800aa04:	0800aaa7 	.word	0x0800aaa7
 800aa08:	0800aaa7 	.word	0x0800aaa7
 800aa0c:	0800aaa7 	.word	0x0800aaa7
 800aa10:	0800aaa7 	.word	0x0800aaa7
 800aa14:	0800aaa7 	.word	0x0800aaa7
 800aa18:	0800aaa7 	.word	0x0800aaa7
 800aa1c:	0800aaa7 	.word	0x0800aaa7
 800aa20:	0800aaa7 	.word	0x0800aaa7
 800aa24:	0800aaa7 	.word	0x0800aaa7
 800aa28:	0800aaa7 	.word	0x0800aaa7
 800aa2c:	0800aaa7 	.word	0x0800aaa7
 800aa30:	0800aaa7 	.word	0x0800aaa7
 800aa34:	0800aaa7 	.word	0x0800aaa7
 800aa38:	0800aa99 	.word	0x0800aa99
 800aa3c:	2b40      	cmp	r3, #64	@ 0x40
 800aa3e:	d02e      	beq.n	800aa9e <UART_SetConfig+0x8aa>
 800aa40:	e031      	b.n	800aaa6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa42:	f7fd f997 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 800aa46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa48:	e033      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa4a:	f7fd f9a9 	bl	8007da0 <HAL_RCC_GetPCLK2Freq>
 800aa4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa50:	e02f      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe fc1a 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa60:	e027      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa62:	f107 0318 	add.w	r3, r7, #24
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fe fd66 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa70:	e01f      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa72:	4b2d      	ldr	r3, [pc, #180]	@ (800ab28 <UART_SetConfig+0x934>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d009      	beq.n	800aa92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa7e:	4b2a      	ldr	r3, [pc, #168]	@ (800ab28 <UART_SetConfig+0x934>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	08db      	lsrs	r3, r3, #3
 800aa84:	f003 0303 	and.w	r3, r3, #3
 800aa88:	4a24      	ldr	r2, [pc, #144]	@ (800ab1c <UART_SetConfig+0x928>)
 800aa8a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa90:	e00f      	b.n	800aab2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aa92:	4b22      	ldr	r3, [pc, #136]	@ (800ab1c <UART_SetConfig+0x928>)
 800aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa96:	e00c      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa98:	4b21      	ldr	r3, [pc, #132]	@ (800ab20 <UART_SetConfig+0x92c>)
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa9c:	e009      	b.n	800aab2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa4:	e005      	b.n	800aab2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 80e7 	beq.w	800ac88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabe:	4a19      	ldr	r2, [pc, #100]	@ (800ab24 <UART_SetConfig+0x930>)
 800aac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aac4:	461a      	mov	r2, r3
 800aac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aacc:	005a      	lsls	r2, r3, #1
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	085b      	lsrs	r3, r3, #1
 800aad4:	441a      	add	r2, r3
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	fbb2 f3f3 	udiv	r3, r2, r3
 800aade:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae2:	2b0f      	cmp	r3, #15
 800aae4:	d916      	bls.n	800ab14 <UART_SetConfig+0x920>
 800aae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aaec:	d212      	bcs.n	800ab14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f023 030f 	bic.w	r3, r3, #15
 800aaf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	085b      	lsrs	r3, r3, #1
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab06:	4313      	orrs	r3, r2
 800ab08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ab10:	60da      	str	r2, [r3, #12]
 800ab12:	e0b9      	b.n	800ac88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab1a:	e0b5      	b.n	800ac88 <UART_SetConfig+0xa94>
 800ab1c:	03d09000 	.word	0x03d09000
 800ab20:	003d0900 	.word	0x003d0900
 800ab24:	08011478 	.word	0x08011478
 800ab28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab30:	2b20      	cmp	r3, #32
 800ab32:	dc49      	bgt.n	800abc8 <UART_SetConfig+0x9d4>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	db7c      	blt.n	800ac32 <UART_SetConfig+0xa3e>
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d87a      	bhi.n	800ac32 <UART_SetConfig+0xa3e>
 800ab3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <UART_SetConfig+0x950>)
 800ab3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab42:	bf00      	nop
 800ab44:	0800abcf 	.word	0x0800abcf
 800ab48:	0800abd7 	.word	0x0800abd7
 800ab4c:	0800ac33 	.word	0x0800ac33
 800ab50:	0800ac33 	.word	0x0800ac33
 800ab54:	0800abdf 	.word	0x0800abdf
 800ab58:	0800ac33 	.word	0x0800ac33
 800ab5c:	0800ac33 	.word	0x0800ac33
 800ab60:	0800ac33 	.word	0x0800ac33
 800ab64:	0800abef 	.word	0x0800abef
 800ab68:	0800ac33 	.word	0x0800ac33
 800ab6c:	0800ac33 	.word	0x0800ac33
 800ab70:	0800ac33 	.word	0x0800ac33
 800ab74:	0800ac33 	.word	0x0800ac33
 800ab78:	0800ac33 	.word	0x0800ac33
 800ab7c:	0800ac33 	.word	0x0800ac33
 800ab80:	0800ac33 	.word	0x0800ac33
 800ab84:	0800abff 	.word	0x0800abff
 800ab88:	0800ac33 	.word	0x0800ac33
 800ab8c:	0800ac33 	.word	0x0800ac33
 800ab90:	0800ac33 	.word	0x0800ac33
 800ab94:	0800ac33 	.word	0x0800ac33
 800ab98:	0800ac33 	.word	0x0800ac33
 800ab9c:	0800ac33 	.word	0x0800ac33
 800aba0:	0800ac33 	.word	0x0800ac33
 800aba4:	0800ac33 	.word	0x0800ac33
 800aba8:	0800ac33 	.word	0x0800ac33
 800abac:	0800ac33 	.word	0x0800ac33
 800abb0:	0800ac33 	.word	0x0800ac33
 800abb4:	0800ac33 	.word	0x0800ac33
 800abb8:	0800ac33 	.word	0x0800ac33
 800abbc:	0800ac33 	.word	0x0800ac33
 800abc0:	0800ac33 	.word	0x0800ac33
 800abc4:	0800ac25 	.word	0x0800ac25
 800abc8:	2b40      	cmp	r3, #64	@ 0x40
 800abca:	d02e      	beq.n	800ac2a <UART_SetConfig+0xa36>
 800abcc:	e031      	b.n	800ac32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abce:	f7fd f8d1 	bl	8007d74 <HAL_RCC_GetPCLK1Freq>
 800abd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abd4:	e033      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abd6:	f7fd f8e3 	bl	8007da0 <HAL_RCC_GetPCLK2Freq>
 800abda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abdc:	e02f      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fb54 	bl	8009290 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abec:	e027      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abee:	f107 0318 	add.w	r3, r7, #24
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe fca0 	bl	8009538 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abfc:	e01f      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abfe:	4b2d      	ldr	r3, [pc, #180]	@ (800acb4 <UART_SetConfig+0xac0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 0320 	and.w	r3, r3, #32
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d009      	beq.n	800ac1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac0a:	4b2a      	ldr	r3, [pc, #168]	@ (800acb4 <UART_SetConfig+0xac0>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	08db      	lsrs	r3, r3, #3
 800ac10:	f003 0303 	and.w	r3, r3, #3
 800ac14:	4a28      	ldr	r2, [pc, #160]	@ (800acb8 <UART_SetConfig+0xac4>)
 800ac16:	fa22 f303 	lsr.w	r3, r2, r3
 800ac1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac1c:	e00f      	b.n	800ac3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ac1e:	4b26      	ldr	r3, [pc, #152]	@ (800acb8 <UART_SetConfig+0xac4>)
 800ac20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac22:	e00c      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac24:	4b25      	ldr	r3, [pc, #148]	@ (800acbc <UART_SetConfig+0xac8>)
 800ac26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac28:	e009      	b.n	800ac3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac30:	e005      	b.n	800ac3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac3c:	bf00      	nop
    }

    if (pclk != 0U)
 800ac3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d021      	beq.n	800ac88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac48:	4a1d      	ldr	r2, [pc, #116]	@ (800acc0 <UART_SetConfig+0xacc>)
 800ac4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac52:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	441a      	add	r2, r3
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6a:	2b0f      	cmp	r3, #15
 800ac6c:	d909      	bls.n	800ac82 <UART_SetConfig+0xa8e>
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac74:	d205      	bcs.n	800ac82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	60da      	str	r2, [r3, #12]
 800ac80:	e002      	b.n	800ac88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2200      	movs	r2, #0
 800aca2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aca4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3748      	adds	r7, #72	@ 0x48
 800acac:	46bd      	mov	sp, r7
 800acae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800acb2:	bf00      	nop
 800acb4:	58024400 	.word	0x58024400
 800acb8:	03d09000 	.word	0x03d09000
 800acbc:	003d0900 	.word	0x003d0900
 800acc0:	08011478 	.word	0x08011478

0800acc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acd0:	f003 0308 	and.w	r3, r3, #8
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00a      	beq.n	800acee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00a      	beq.n	800ad10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	430a      	orrs	r2, r1
 800ad0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad14:	f003 0302 	and.w	r3, r3, #2
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad36:	f003 0304 	and.w	r3, r3, #4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad58:	f003 0310 	and.w	r3, r3, #16
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00a      	beq.n	800ad76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d01a      	beq.n	800adda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adc2:	d10a      	bne.n	800adda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b098      	sub	sp, #96	@ 0x60
 800ae0c:	af02      	add	r7, sp, #8
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae18:	f7fa fa72 	bl	8005300 <HAL_GetTick>
 800ae1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 0308 	and.w	r3, r3, #8
 800ae28:	2b08      	cmp	r3, #8
 800ae2a:	d12f      	bne.n	800ae8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae34:	2200      	movs	r2, #0
 800ae36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f88e 	bl	800af5c <UART_WaitOnFlagUntilTimeout>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d022      	beq.n	800ae8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae66:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e6      	bne.n	800ae46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e063      	b.n	800af54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0304 	and.w	r3, r3, #4
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d149      	bne.n	800af2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aea2:	2200      	movs	r2, #0
 800aea4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f857 	bl	800af5c <UART_WaitOnFlagUntilTimeout>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d03c      	beq.n	800af2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	e853 3f00 	ldrex	r3, [r3]
 800aec0:	623b      	str	r3, [r7, #32]
   return(result);
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aed4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeda:	e841 2300 	strex	r3, r2, [r1]
 800aede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d1e6      	bne.n	800aeb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3308      	adds	r3, #8
 800aeec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	e853 3f00 	ldrex	r3, [r3]
 800aef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f023 0301 	bic.w	r3, r3, #1
 800aefc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3308      	adds	r3, #8
 800af04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af06:	61fa      	str	r2, [r7, #28]
 800af08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	69b9      	ldr	r1, [r7, #24]
 800af0c:	69fa      	ldr	r2, [r7, #28]
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	617b      	str	r3, [r7, #20]
   return(result);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e5      	bne.n	800aee6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e012      	b.n	800af54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2220      	movs	r2, #32
 800af32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2220      	movs	r2, #32
 800af3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3758      	adds	r7, #88	@ 0x58
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	4613      	mov	r3, r2
 800af6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af6c:	e04f      	b.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af74:	d04b      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af76:	f7fa f9c3 	bl	8005300 <HAL_GetTick>
 800af7a:	4602      	mov	r2, r0
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	429a      	cmp	r2, r3
 800af84:	d302      	bcc.n	800af8c <UART_WaitOnFlagUntilTimeout+0x30>
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e04e      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d037      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b80      	cmp	r3, #128	@ 0x80
 800afa2:	d034      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2b40      	cmp	r3, #64	@ 0x40
 800afa8:	d031      	beq.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	f003 0308 	and.w	r3, r3, #8
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d110      	bne.n	800afda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2208      	movs	r2, #8
 800afbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 f839 	bl	800b038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2208      	movs	r2, #8
 800afca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e029      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69db      	ldr	r3, [r3, #28]
 800afe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afe8:	d111      	bne.n	800b00e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 f81f 	bl	800b038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2220      	movs	r2, #32
 800affe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e00f      	b.n	800b02e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	69da      	ldr	r2, [r3, #28]
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	4013      	ands	r3, r2
 800b018:	68ba      	ldr	r2, [r7, #8]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	bf0c      	ite	eq
 800b01e:	2301      	moveq	r3, #1
 800b020:	2300      	movne	r3, #0
 800b022:	b2db      	uxtb	r3, r3
 800b024:	461a      	mov	r2, r3
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d0a0      	beq.n	800af6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
	...

0800b038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b038:	b480      	push	{r7}
 800b03a:	b095      	sub	sp, #84	@ 0x54
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b048:	e853 3f00 	ldrex	r3, [r3]
 800b04c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b05e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b060:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1e6      	bne.n	800b040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3308      	adds	r3, #8
 800b078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07a:	6a3b      	ldr	r3, [r7, #32]
 800b07c:	e853 3f00 	ldrex	r3, [r3]
 800b080:	61fb      	str	r3, [r7, #28]
   return(result);
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	4b1e      	ldr	r3, [pc, #120]	@ (800b100 <UART_EndRxTransfer+0xc8>)
 800b086:	4013      	ands	r3, r2
 800b088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3308      	adds	r3, #8
 800b090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b09a:	e841 2300 	strex	r3, r2, [r1]
 800b09e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1e5      	bne.n	800b072 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d118      	bne.n	800b0e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	e853 3f00 	ldrex	r3, [r3]
 800b0ba:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	f023 0310 	bic.w	r3, r3, #16
 800b0c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	6979      	ldr	r1, [r7, #20]
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e6      	bne.n	800b0ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2220      	movs	r2, #32
 800b0e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b0f4:	bf00      	nop
 800b0f6:	3754      	adds	r7, #84	@ 0x54
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	effffffe 	.word	0xeffffffe

0800b104 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b112:	2b01      	cmp	r3, #1
 800b114:	d101      	bne.n	800b11a <HAL_UARTEx_DisableFifoMode+0x16>
 800b116:	2302      	movs	r3, #2
 800b118:	e027      	b.n	800b16a <HAL_UARTEx_DisableFifoMode+0x66>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2224      	movs	r2, #36	@ 0x24
 800b126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f022 0201 	bic.w	r2, r2, #1
 800b140:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b148:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2220      	movs	r2, #32
 800b15c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e02d      	b.n	800b1ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2224      	movs	r2, #36	@ 0x24
 800b19a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f022 0201 	bic.w	r2, r2, #1
 800b1b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	430a      	orrs	r2, r1
 800b1c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f850 	bl	800b270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b206:	2302      	movs	r3, #2
 800b208:	e02d      	b.n	800b266 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2224      	movs	r2, #36	@ 0x24
 800b216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f022 0201 	bic.w	r2, r2, #1
 800b230:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f812 	bl	800b270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2220      	movs	r2, #32
 800b258:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d108      	bne.n	800b292 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b290:	e031      	b.n	800b2f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b292:	2310      	movs	r3, #16
 800b294:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b296:	2310      	movs	r3, #16
 800b298:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	0e5b      	lsrs	r3, r3, #25
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f003 0307 	and.w	r3, r3, #7
 800b2a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	0f5b      	lsrs	r3, r3, #29
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	f003 0307 	and.w	r3, r3, #7
 800b2b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	7b3a      	ldrb	r2, [r7, #12]
 800b2be:	4911      	ldr	r1, [pc, #68]	@ (800b304 <UARTEx_SetNbDataToProcess+0x94>)
 800b2c0:	5c8a      	ldrb	r2, [r1, r2]
 800b2c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2c6:	7b3a      	ldrb	r2, [r7, #12]
 800b2c8:	490f      	ldr	r1, [pc, #60]	@ (800b308 <UARTEx_SetNbDataToProcess+0x98>)
 800b2ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d0:	b29a      	uxth	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	7b7a      	ldrb	r2, [r7, #13]
 800b2dc:	4909      	ldr	r1, [pc, #36]	@ (800b304 <UARTEx_SetNbDataToProcess+0x94>)
 800b2de:	5c8a      	ldrb	r2, [r1, r2]
 800b2e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2e4:	7b7a      	ldrb	r2, [r7, #13]
 800b2e6:	4908      	ldr	r1, [pc, #32]	@ (800b308 <UARTEx_SetNbDataToProcess+0x98>)
 800b2e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2ee:	b29a      	uxth	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b2f6:	bf00      	nop
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	08011490 	.word	0x08011490
 800b308:	08011498 	.word	0x08011498

0800b30c <__NVIC_SetPriority>:
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	6039      	str	r1, [r7, #0]
 800b316:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b318:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	db0a      	blt.n	800b336 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	b2da      	uxtb	r2, r3
 800b324:	490c      	ldr	r1, [pc, #48]	@ (800b358 <__NVIC_SetPriority+0x4c>)
 800b326:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b32a:	0112      	lsls	r2, r2, #4
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	440b      	add	r3, r1
 800b330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b334:	e00a      	b.n	800b34c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	4908      	ldr	r1, [pc, #32]	@ (800b35c <__NVIC_SetPriority+0x50>)
 800b33c:	88fb      	ldrh	r3, [r7, #6]
 800b33e:	f003 030f 	and.w	r3, r3, #15
 800b342:	3b04      	subs	r3, #4
 800b344:	0112      	lsls	r2, r2, #4
 800b346:	b2d2      	uxtb	r2, r2
 800b348:	440b      	add	r3, r1
 800b34a:	761a      	strb	r2, [r3, #24]
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	e000e100 	.word	0xe000e100
 800b35c:	e000ed00 	.word	0xe000ed00

0800b360 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b364:	4b05      	ldr	r3, [pc, #20]	@ (800b37c <SysTick_Handler+0x1c>)
 800b366:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b368:	f001 fdb0 	bl	800cecc <xTaskGetSchedulerState>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d001      	beq.n	800b376 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b372:	f002 fba9 	bl	800dac8 <xPortSysTickHandler>
  }
}
 800b376:	bf00      	nop
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	e000e010 	.word	0xe000e010

0800b380 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b384:	2100      	movs	r1, #0
 800b386:	f06f 0004 	mvn.w	r0, #4
 800b38a:	f7ff ffbf 	bl	800b30c <__NVIC_SetPriority>
#endif
}
 800b38e:	bf00      	nop
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b39a:	f3ef 8305 	mrs	r3, IPSR
 800b39e:	603b      	str	r3, [r7, #0]
  return(result);
 800b3a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d003      	beq.n	800b3ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3a6:	f06f 0305 	mvn.w	r3, #5
 800b3aa:	607b      	str	r3, [r7, #4]
 800b3ac:	e00c      	b.n	800b3c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d8 <osKernelInitialize+0x44>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d105      	bne.n	800b3c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3b6:	4b08      	ldr	r3, [pc, #32]	@ (800b3d8 <osKernelInitialize+0x44>)
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	607b      	str	r3, [r7, #4]
 800b3c0:	e002      	b.n	800b3c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3c8:	687b      	ldr	r3, [r7, #4]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	24000ad8 	.word	0x24000ad8

0800b3dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e2:	f3ef 8305 	mrs	r3, IPSR
 800b3e6:	603b      	str	r3, [r7, #0]
  return(result);
 800b3e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b3ee:	f06f 0305 	mvn.w	r3, #5
 800b3f2:	607b      	str	r3, [r7, #4]
 800b3f4:	e010      	b.n	800b418 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b424 <osKernelStart+0x48>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d109      	bne.n	800b412 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b3fe:	f7ff ffbf 	bl	800b380 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b402:	4b08      	ldr	r3, [pc, #32]	@ (800b424 <osKernelStart+0x48>)
 800b404:	2202      	movs	r2, #2
 800b406:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b408:	f001 f8fc 	bl	800c604 <vTaskStartScheduler>
      stat = osOK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	607b      	str	r3, [r7, #4]
 800b410:	e002      	b.n	800b418 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b412:	f04f 33ff 	mov.w	r3, #4294967295
 800b416:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b418:	687b      	ldr	r3, [r7, #4]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	24000ad8 	.word	0x24000ad8

0800b428 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b428:	b580      	push	{r7, lr}
 800b42a:	b08e      	sub	sp, #56	@ 0x38
 800b42c:	af04      	add	r7, sp, #16
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b434:	2300      	movs	r3, #0
 800b436:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b438:	f3ef 8305 	mrs	r3, IPSR
 800b43c:	617b      	str	r3, [r7, #20]
  return(result);
 800b43e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b440:	2b00      	cmp	r3, #0
 800b442:	d17e      	bne.n	800b542 <osThreadNew+0x11a>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d07b      	beq.n	800b542 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b44a:	2380      	movs	r3, #128	@ 0x80
 800b44c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b44e:	2318      	movs	r3, #24
 800b450:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b452:	2300      	movs	r3, #0
 800b454:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b456:	f04f 33ff 	mov.w	r3, #4294967295
 800b45a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d045      	beq.n	800b4ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d002      	beq.n	800b470 <osThreadNew+0x48>
        name = attr->name;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d008      	beq.n	800b496 <osThreadNew+0x6e>
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	2b38      	cmp	r3, #56	@ 0x38
 800b488:	d805      	bhi.n	800b496 <osThreadNew+0x6e>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <osThreadNew+0x72>
        return (NULL);
 800b496:	2300      	movs	r3, #0
 800b498:	e054      	b.n	800b544 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	695b      	ldr	r3, [r3, #20]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	089b      	lsrs	r3, r3, #2
 800b4a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00e      	beq.n	800b4d0 <osThreadNew+0xa8>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	2ba7      	cmp	r3, #167	@ 0xa7
 800b4b8:	d90a      	bls.n	800b4d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d006      	beq.n	800b4d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d002      	beq.n	800b4d0 <osThreadNew+0xa8>
        mem = 1;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	61bb      	str	r3, [r7, #24]
 800b4ce:	e010      	b.n	800b4f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10c      	bne.n	800b4f2 <osThreadNew+0xca>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d108      	bne.n	800b4f2 <osThreadNew+0xca>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d104      	bne.n	800b4f2 <osThreadNew+0xca>
          mem = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	61bb      	str	r3, [r7, #24]
 800b4ec:	e001      	b.n	800b4f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d110      	bne.n	800b51a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b500:	9202      	str	r2, [sp, #8]
 800b502:	9301      	str	r3, [sp, #4]
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	6a3a      	ldr	r2, [r7, #32]
 800b50c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f000 fe3a 	bl	800c188 <xTaskCreateStatic>
 800b514:	4603      	mov	r3, r0
 800b516:	613b      	str	r3, [r7, #16]
 800b518:	e013      	b.n	800b542 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d110      	bne.n	800b542 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b520:	6a3b      	ldr	r3, [r7, #32]
 800b522:	b29a      	uxth	r2, r3
 800b524:	f107 0310 	add.w	r3, r7, #16
 800b528:	9301      	str	r3, [sp, #4]
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f000 fe88 	bl	800c248 <xTaskCreate>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d001      	beq.n	800b542 <osThreadNew+0x11a>
            hTask = NULL;
 800b53e:	2300      	movs	r3, #0
 800b540:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b542:	693b      	ldr	r3, [r7, #16]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3728      	adds	r7, #40	@ 0x28
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	4a07      	ldr	r2, [pc, #28]	@ (800b578 <vApplicationGetIdleTaskMemory+0x2c>)
 800b55c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	4a06      	ldr	r2, [pc, #24]	@ (800b57c <vApplicationGetIdleTaskMemory+0x30>)
 800b562:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2280      	movs	r2, #128	@ 0x80
 800b568:	601a      	str	r2, [r3, #0]
}
 800b56a:	bf00      	nop
 800b56c:	3714      	adds	r7, #20
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	24000adc 	.word	0x24000adc
 800b57c:	24000b84 	.word	0x24000b84

0800b580 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4a07      	ldr	r2, [pc, #28]	@ (800b5ac <vApplicationGetTimerTaskMemory+0x2c>)
 800b590:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	4a06      	ldr	r2, [pc, #24]	@ (800b5b0 <vApplicationGetTimerTaskMemory+0x30>)
 800b596:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b59e:	601a      	str	r2, [r3, #0]
}
 800b5a0:	bf00      	nop
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	24000d84 	.word	0x24000d84
 800b5b0:	24000e2c 	.word	0x24000e2c

0800b5b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f103 0208 	add.w	r2, r3, #8
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f103 0208 	add.w	r2, r3, #8
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f103 0208 	add.w	r2, r3, #8
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b602:	bf00      	nop
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b60e:	b480      	push	{r7}
 800b610:	b085      	sub	sp, #20
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	689a      	ldr	r2, [r3, #8]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	601a      	str	r2, [r3, #0]
}
 800b64a:	bf00      	nop
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b656:	b480      	push	{r7}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66c:	d103      	bne.n	800b676 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	60fb      	str	r3, [r7, #12]
 800b674:	e00c      	b.n	800b690 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3308      	adds	r3, #8
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	e002      	b.n	800b684 <vListInsert+0x2e>
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	60fb      	str	r3, [r7, #12]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d2f6      	bcs.n	800b67e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	685a      	ldr	r2, [r3, #4]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	683a      	ldr	r2, [r7, #0]
 800b69e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	1c5a      	adds	r2, r3, #1
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	601a      	str	r2, [r3, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	6892      	ldr	r2, [r2, #8]
 800b6de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	6852      	ldr	r2, [r2, #4]
 800b6e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	685b      	ldr	r3, [r3, #4]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d103      	bne.n	800b6fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689a      	ldr	r2, [r3, #8]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	1e5a      	subs	r2, r3, #1
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3714      	adds	r7, #20
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10b      	bne.n	800b748 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b742:	bf00      	nop
 800b744:	bf00      	nop
 800b746:	e7fd      	b.n	800b744 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b748:	f002 f92e 	bl	800d9a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b754:	68f9      	ldr	r1, [r7, #12]
 800b756:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b758:	fb01 f303 	mul.w	r3, r1, r3
 800b75c:	441a      	add	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2200      	movs	r2, #0
 800b766:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b778:	3b01      	subs	r3, #1
 800b77a:	68f9      	ldr	r1, [r7, #12]
 800b77c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b77e:	fb01 f303 	mul.w	r3, r1, r3
 800b782:	441a      	add	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	22ff      	movs	r2, #255	@ 0xff
 800b78c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	22ff      	movs	r2, #255	@ 0xff
 800b794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d114      	bne.n	800b7c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d01a      	beq.n	800b7dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3310      	adds	r3, #16
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f001 f9c8 	bl	800cb40 <xTaskRemoveFromEventList>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d012      	beq.n	800b7dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7ec <xQueueGenericReset+0xd0>)
 800b7b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	f3bf 8f6f 	isb	sy
 800b7c6:	e009      	b.n	800b7dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	3310      	adds	r3, #16
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fef1 	bl	800b5b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	3324      	adds	r3, #36	@ 0x24
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff feec 	bl	800b5b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b7dc:	f002 f916 	bl	800da0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b7e0:	2301      	movs	r3, #1
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	e000ed04 	.word	0xe000ed04

0800b7f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b08e      	sub	sp, #56	@ 0x38
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10b      	bne.n	800b81c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b816:	bf00      	nop
 800b818:	bf00      	nop
 800b81a:	e7fd      	b.n	800b818 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10b      	bne.n	800b83a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	e7fd      	b.n	800b836 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <xQueueGenericCreateStatic+0x56>
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d001      	beq.n	800b84a <xQueueGenericCreateStatic+0x5a>
 800b846:	2301      	movs	r3, #1
 800b848:	e000      	b.n	800b84c <xQueueGenericCreateStatic+0x5c>
 800b84a:	2300      	movs	r3, #0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10b      	bne.n	800b868 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	623b      	str	r3, [r7, #32]
}
 800b862:	bf00      	nop
 800b864:	bf00      	nop
 800b866:	e7fd      	b.n	800b864 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d102      	bne.n	800b874 <xQueueGenericCreateStatic+0x84>
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <xQueueGenericCreateStatic+0x88>
 800b874:	2301      	movs	r3, #1
 800b876:	e000      	b.n	800b87a <xQueueGenericCreateStatic+0x8a>
 800b878:	2300      	movs	r3, #0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10b      	bne.n	800b896 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	61fb      	str	r3, [r7, #28]
}
 800b890:	bf00      	nop
 800b892:	bf00      	nop
 800b894:	e7fd      	b.n	800b892 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b896:	2350      	movs	r3, #80	@ 0x50
 800b898:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b50      	cmp	r3, #80	@ 0x50
 800b89e:	d00b      	beq.n	800b8b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	61bb      	str	r3, [r7, #24]
}
 800b8b2:	bf00      	nop
 800b8b4:	bf00      	nop
 800b8b6:	e7fd      	b.n	800b8b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d00d      	beq.n	800b8e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	68b9      	ldr	r1, [r7, #8]
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f000 f840 	bl	800b960 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3730      	adds	r7, #48	@ 0x30
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b08a      	sub	sp, #40	@ 0x28
 800b8ee:	af02      	add	r7, sp, #8
 800b8f0:	60f8      	str	r0, [r7, #12]
 800b8f2:	60b9      	str	r1, [r7, #8]
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10b      	bne.n	800b916 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	613b      	str	r3, [r7, #16]
}
 800b910:	bf00      	nop
 800b912:	bf00      	nop
 800b914:	e7fd      	b.n	800b912 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	fb02 f303 	mul.w	r3, r2, r3
 800b91e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	3350      	adds	r3, #80	@ 0x50
 800b924:	4618      	mov	r0, r3
 800b926:	f002 f961 	bl	800dbec <pvPortMalloc>
 800b92a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d011      	beq.n	800b956 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	3350      	adds	r3, #80	@ 0x50
 800b93a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b93c:	69bb      	ldr	r3, [r7, #24]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b944:	79fa      	ldrb	r2, [r7, #7]
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	4613      	mov	r3, r2
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	68b9      	ldr	r1, [r7, #8]
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f000 f805 	bl	800b960 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b956:	69bb      	ldr	r3, [r7, #24]
	}
 800b958:	4618      	mov	r0, r3
 800b95a:	3720      	adds	r7, #32
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d103      	bne.n	800b97c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	69ba      	ldr	r2, [r7, #24]
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	e002      	b.n	800b982 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	68ba      	ldr	r2, [r7, #8]
 800b98c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b98e:	2101      	movs	r1, #1
 800b990:	69b8      	ldr	r0, [r7, #24]
 800b992:	f7ff fec3 	bl	800b71c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	78fa      	ldrb	r2, [r7, #3]
 800b99a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b99e:	bf00      	nop
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
	...

0800b9a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b08e      	sub	sp, #56	@ 0x38
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10b      	bne.n	800b9dc <xQueueGenericSend+0x34>
	__asm volatile
 800b9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b9d6:	bf00      	nop
 800b9d8:	bf00      	nop
 800b9da:	e7fd      	b.n	800b9d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d103      	bne.n	800b9ea <xQueueGenericSend+0x42>
 800b9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <xQueueGenericSend+0x46>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e000      	b.n	800b9f0 <xQueueGenericSend+0x48>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10b      	bne.n	800ba0c <xQueueGenericSend+0x64>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba06:	bf00      	nop
 800ba08:	bf00      	nop
 800ba0a:	e7fd      	b.n	800ba08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d103      	bne.n	800ba1a <xQueueGenericSend+0x72>
 800ba12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d101      	bne.n	800ba1e <xQueueGenericSend+0x76>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e000      	b.n	800ba20 <xQueueGenericSend+0x78>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10b      	bne.n	800ba3c <xQueueGenericSend+0x94>
	__asm volatile
 800ba24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	623b      	str	r3, [r7, #32]
}
 800ba36:	bf00      	nop
 800ba38:	bf00      	nop
 800ba3a:	e7fd      	b.n	800ba38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba3c:	f001 fa46 	bl	800cecc <xTaskGetSchedulerState>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d102      	bne.n	800ba4c <xQueueGenericSend+0xa4>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <xQueueGenericSend+0xa8>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e000      	b.n	800ba52 <xQueueGenericSend+0xaa>
 800ba50:	2300      	movs	r3, #0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10b      	bne.n	800ba6e <xQueueGenericSend+0xc6>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	61fb      	str	r3, [r7, #28]
}
 800ba68:	bf00      	nop
 800ba6a:	bf00      	nop
 800ba6c:	e7fd      	b.n	800ba6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba6e:	f001 ff9b 	bl	800d9a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d302      	bcc.n	800ba84 <xQueueGenericSend+0xdc>
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d129      	bne.n	800bad8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba84:	683a      	ldr	r2, [r7, #0]
 800ba86:	68b9      	ldr	r1, [r7, #8]
 800ba88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba8a:	f000 fa0f 	bl	800beac <prvCopyDataToQueue>
 800ba8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d010      	beq.n	800baba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9a:	3324      	adds	r3, #36	@ 0x24
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f001 f84f 	bl	800cb40 <xTaskRemoveFromEventList>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d013      	beq.n	800bad0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800baa8:	4b3f      	ldr	r3, [pc, #252]	@ (800bba8 <xQueueGenericSend+0x200>)
 800baaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baae:	601a      	str	r2, [r3, #0]
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	e00a      	b.n	800bad0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800baba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d007      	beq.n	800bad0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bac0:	4b39      	ldr	r3, [pc, #228]	@ (800bba8 <xQueueGenericSend+0x200>)
 800bac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bad0:	f001 ff9c 	bl	800da0c <vPortExitCritical>
				return pdPASS;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e063      	b.n	800bba0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d103      	bne.n	800bae6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bade:	f001 ff95 	bl	800da0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bae2:	2300      	movs	r3, #0
 800bae4:	e05c      	b.n	800bba0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d106      	bne.n	800bafa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800baec:	f107 0314 	add.w	r3, r7, #20
 800baf0:	4618      	mov	r0, r3
 800baf2:	f001 f889 	bl	800cc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800baf6:	2301      	movs	r3, #1
 800baf8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bafa:	f001 ff87 	bl	800da0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bafe:	f000 fdf1 	bl	800c6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb02:	f001 ff51 	bl	800d9a8 <vPortEnterCritical>
 800bb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb0c:	b25b      	sxtb	r3, r3
 800bb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb12:	d103      	bne.n	800bb1c <xQueueGenericSend+0x174>
 800bb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb22:	b25b      	sxtb	r3, r3
 800bb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb28:	d103      	bne.n	800bb32 <xQueueGenericSend+0x18a>
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb32:	f001 ff6b 	bl	800da0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb36:	1d3a      	adds	r2, r7, #4
 800bb38:	f107 0314 	add.w	r3, r7, #20
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f001 f878 	bl	800cc34 <xTaskCheckForTimeOut>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d124      	bne.n	800bb94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb4c:	f000 faa6 	bl	800c09c <prvIsQueueFull>
 800bb50:	4603      	mov	r3, r0
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d018      	beq.n	800bb88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb58:	3310      	adds	r3, #16
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f000 ff9c 	bl	800ca9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb66:	f000 fa31 	bl	800bfcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb6a:	f000 fdc9 	bl	800c700 <xTaskResumeAll>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f47f af7c 	bne.w	800ba6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bb76:	4b0c      	ldr	r3, [pc, #48]	@ (800bba8 <xQueueGenericSend+0x200>)
 800bb78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	e772      	b.n	800ba6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb8a:	f000 fa1f 	bl	800bfcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb8e:	f000 fdb7 	bl	800c700 <xTaskResumeAll>
 800bb92:	e76c      	b.n	800ba6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb96:	f000 fa19 	bl	800bfcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb9a:	f000 fdb1 	bl	800c700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3738      	adds	r7, #56	@ 0x38
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	e000ed04 	.word	0xe000ed04

0800bbac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b090      	sub	sp, #64	@ 0x40
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10b      	bne.n	800bbdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bbd6:	bf00      	nop
 800bbd8:	bf00      	nop
 800bbda:	e7fd      	b.n	800bbd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d103      	bne.n	800bbea <xQueueGenericSendFromISR+0x3e>
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <xQueueGenericSendFromISR+0x42>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e000      	b.n	800bbf0 <xQueueGenericSendFromISR+0x44>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10b      	bne.n	800bc0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc06:	bf00      	nop
 800bc08:	bf00      	nop
 800bc0a:	e7fd      	b.n	800bc08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d103      	bne.n	800bc1a <xQueueGenericSendFromISR+0x6e>
 800bc12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d101      	bne.n	800bc1e <xQueueGenericSendFromISR+0x72>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e000      	b.n	800bc20 <xQueueGenericSendFromISR+0x74>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10b      	bne.n	800bc3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	623b      	str	r3, [r7, #32]
}
 800bc36:	bf00      	nop
 800bc38:	bf00      	nop
 800bc3a:	e7fd      	b.n	800bc38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc3c:	f001 ff94 	bl	800db68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc40:	f3ef 8211 	mrs	r2, BASEPRI
 800bc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	61fa      	str	r2, [r7, #28]
 800bc56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d302      	bcc.n	800bc6e <xQueueGenericSendFromISR+0xc2>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d12f      	bne.n	800bcce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	68b9      	ldr	r1, [r7, #8]
 800bc82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bc84:	f000 f912 	bl	800beac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc90:	d112      	bne.n	800bcb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d016      	beq.n	800bcc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9c:	3324      	adds	r3, #36	@ 0x24
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 ff4e 	bl	800cb40 <xTaskRemoveFromEventList>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00e      	beq.n	800bcc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	e007      	b.n	800bcc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	b25a      	sxtb	r2, r3
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bccc:	e001      	b.n	800bcd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bcd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3740      	adds	r7, #64	@ 0x40
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b08c      	sub	sp, #48	@ 0x30
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10b      	bne.n	800bd1a <xQueueReceive+0x32>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	623b      	str	r3, [r7, #32]
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop
 800bd18:	e7fd      	b.n	800bd16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d103      	bne.n	800bd28 <xQueueReceive+0x40>
 800bd20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <xQueueReceive+0x44>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e000      	b.n	800bd2e <xQueueReceive+0x46>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10b      	bne.n	800bd4a <xQueueReceive+0x62>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	61fb      	str	r3, [r7, #28]
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	e7fd      	b.n	800bd46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd4a:	f001 f8bf 	bl	800cecc <xTaskGetSchedulerState>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d102      	bne.n	800bd5a <xQueueReceive+0x72>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <xQueueReceive+0x76>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e000      	b.n	800bd60 <xQueueReceive+0x78>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10b      	bne.n	800bd7c <xQueueReceive+0x94>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	61bb      	str	r3, [r7, #24]
}
 800bd76:	bf00      	nop
 800bd78:	bf00      	nop
 800bd7a:	e7fd      	b.n	800bd78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd7c:	f001 fe14 	bl	800d9a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01f      	beq.n	800bdcc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd8c:	68b9      	ldr	r1, [r7, #8]
 800bd8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd90:	f000 f8f6 	bl	800bf80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd96:	1e5a      	subs	r2, r3, #1
 800bd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00f      	beq.n	800bdc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda6:	3310      	adds	r3, #16
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 fec9 	bl	800cb40 <xTaskRemoveFromEventList>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d007      	beq.n	800bdc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdb4:	4b3c      	ldr	r3, [pc, #240]	@ (800bea8 <xQueueReceive+0x1c0>)
 800bdb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdc4:	f001 fe22 	bl	800da0c <vPortExitCritical>
				return pdPASS;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e069      	b.n	800bea0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d103      	bne.n	800bdda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdd2:	f001 fe1b 	bl	800da0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	e062      	b.n	800bea0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d106      	bne.n	800bdee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bde0:	f107 0310 	add.w	r3, r7, #16
 800bde4:	4618      	mov	r0, r3
 800bde6:	f000 ff0f 	bl	800cc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdea:	2301      	movs	r3, #1
 800bdec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdee:	f001 fe0d 	bl	800da0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdf2:	f000 fc77 	bl	800c6e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdf6:	f001 fdd7 	bl	800d9a8 <vPortEnterCritical>
 800bdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be00:	b25b      	sxtb	r3, r3
 800be02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be06:	d103      	bne.n	800be10 <xQueueReceive+0x128>
 800be08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be16:	b25b      	sxtb	r3, r3
 800be18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1c:	d103      	bne.n	800be26 <xQueueReceive+0x13e>
 800be1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be26:	f001 fdf1 	bl	800da0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be2a:	1d3a      	adds	r2, r7, #4
 800be2c:	f107 0310 	add.w	r3, r7, #16
 800be30:	4611      	mov	r1, r2
 800be32:	4618      	mov	r0, r3
 800be34:	f000 fefe 	bl	800cc34 <xTaskCheckForTimeOut>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d123      	bne.n	800be86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be40:	f000 f916 	bl	800c070 <prvIsQueueEmpty>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d017      	beq.n	800be7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4c:	3324      	adds	r3, #36	@ 0x24
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	4611      	mov	r1, r2
 800be52:	4618      	mov	r0, r3
 800be54:	f000 fe22 	bl	800ca9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be5a:	f000 f8b7 	bl	800bfcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be5e:	f000 fc4f 	bl	800c700 <xTaskResumeAll>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d189      	bne.n	800bd7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800be68:	4b0f      	ldr	r3, [pc, #60]	@ (800bea8 <xQueueReceive+0x1c0>)
 800be6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be6e:	601a      	str	r2, [r3, #0]
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	e780      	b.n	800bd7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be7c:	f000 f8a6 	bl	800bfcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be80:	f000 fc3e 	bl	800c700 <xTaskResumeAll>
 800be84:	e77a      	b.n	800bd7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be88:	f000 f8a0 	bl	800bfcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be8c:	f000 fc38 	bl	800c700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be92:	f000 f8ed 	bl	800c070 <prvIsQueueEmpty>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f43f af6f 	beq.w	800bd7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3730      	adds	r7, #48	@ 0x30
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	e000ed04 	.word	0xe000ed04

0800beac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800beb8:	2300      	movs	r3, #0
 800beba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10d      	bne.n	800bee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d14d      	bne.n	800bf6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f001 f816 	bl	800cf08 <xTaskPriorityDisinherit>
 800bedc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	609a      	str	r2, [r3, #8]
 800bee4:	e043      	b.n	800bf6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d119      	bne.n	800bf20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6858      	ldr	r0, [r3, #4]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bef4:	461a      	mov	r2, r3
 800bef6:	68b9      	ldr	r1, [r7, #8]
 800bef8:	f003 f98f 	bl	800f21a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf04:	441a      	add	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d32b      	bcc.n	800bf6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	605a      	str	r2, [r3, #4]
 800bf1e:	e026      	b.n	800bf6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	68d8      	ldr	r0, [r3, #12]
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf28:	461a      	mov	r2, r3
 800bf2a:	68b9      	ldr	r1, [r7, #8]
 800bf2c:	f003 f975 	bl	800f21a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	68da      	ldr	r2, [r3, #12]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf38:	425b      	negs	r3, r3
 800bf3a:	441a      	add	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68da      	ldr	r2, [r3, #12]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d207      	bcs.n	800bf5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf54:	425b      	negs	r3, r3
 800bf56:	441a      	add	r2, r3
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d105      	bne.n	800bf6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bf76:	697b      	ldr	r3, [r7, #20]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3718      	adds	r7, #24
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d018      	beq.n	800bfc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68da      	ldr	r2, [r3, #12]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf9a:	441a      	add	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68da      	ldr	r2, [r3, #12]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d303      	bcc.n	800bfb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	68d9      	ldr	r1, [r3, #12]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	6838      	ldr	r0, [r7, #0]
 800bfc0:	f003 f92b 	bl	800f21a <memcpy>
	}
}
 800bfc4:	bf00      	nop
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bfd4:	f001 fce8 	bl	800d9a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bfde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfe0:	e011      	b.n	800c006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d012      	beq.n	800c010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	3324      	adds	r3, #36	@ 0x24
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 fda6 	bl	800cb40 <xTaskRemoveFromEventList>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bffa:	f000 fe7f 	bl	800ccfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	3b01      	subs	r3, #1
 800c002:	b2db      	uxtb	r3, r3
 800c004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dce9      	bgt.n	800bfe2 <prvUnlockQueue+0x16>
 800c00e:	e000      	b.n	800c012 <prvUnlockQueue+0x46>
					break;
 800c010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	22ff      	movs	r2, #255	@ 0xff
 800c016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c01a:	f001 fcf7 	bl	800da0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c01e:	f001 fcc3 	bl	800d9a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c02a:	e011      	b.n	800c050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d012      	beq.n	800c05a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	3310      	adds	r3, #16
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 fd81 	bl	800cb40 <xTaskRemoveFromEventList>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c044:	f000 fe5a 	bl	800ccfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c048:	7bbb      	ldrb	r3, [r7, #14]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c054:	2b00      	cmp	r3, #0
 800c056:	dce9      	bgt.n	800c02c <prvUnlockQueue+0x60>
 800c058:	e000      	b.n	800c05c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c05a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	22ff      	movs	r2, #255	@ 0xff
 800c060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c064:	f001 fcd2 	bl	800da0c <vPortExitCritical>
}
 800c068:	bf00      	nop
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c078:	f001 fc96 	bl	800d9a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c080:	2b00      	cmp	r3, #0
 800c082:	d102      	bne.n	800c08a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c084:	2301      	movs	r3, #1
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	e001      	b.n	800c08e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c08e:	f001 fcbd 	bl	800da0c <vPortExitCritical>

	return xReturn;
 800c092:	68fb      	ldr	r3, [r7, #12]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0a4:	f001 fc80 	bl	800d9a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d102      	bne.n	800c0ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	e001      	b.n	800c0be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0be:	f001 fca5 	bl	800da0c <vPortExitCritical>

	return xReturn;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	60fb      	str	r3, [r7, #12]
 800c0da:	e014      	b.n	800c106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c0dc:	4a0f      	ldr	r2, [pc, #60]	@ (800c11c <vQueueAddToRegistry+0x50>)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d10b      	bne.n	800c100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c0e8:	490c      	ldr	r1, [pc, #48]	@ (800c11c <vQueueAddToRegistry+0x50>)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c0f2:	4a0a      	ldr	r2, [pc, #40]	@ (800c11c <vQueueAddToRegistry+0x50>)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	00db      	lsls	r3, r3, #3
 800c0f8:	4413      	add	r3, r2
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c0fe:	e006      	b.n	800c10e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	3301      	adds	r3, #1
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b07      	cmp	r3, #7
 800c10a:	d9e7      	bls.n	800c0dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c10c:	bf00      	nop
 800c10e:	bf00      	nop
 800c110:	3714      	adds	r7, #20
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	2400122c 	.word	0x2400122c

0800c120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c130:	f001 fc3a 	bl	800d9a8 <vPortEnterCritical>
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c13a:	b25b      	sxtb	r3, r3
 800c13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c140:	d103      	bne.n	800c14a <vQueueWaitForMessageRestricted+0x2a>
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	2200      	movs	r2, #0
 800c146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c150:	b25b      	sxtb	r3, r3
 800c152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c156:	d103      	bne.n	800c160 <vQueueWaitForMessageRestricted+0x40>
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c160:	f001 fc54 	bl	800da0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d106      	bne.n	800c17a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	3324      	adds	r3, #36	@ 0x24
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	68b9      	ldr	r1, [r7, #8]
 800c174:	4618      	mov	r0, r3
 800c176:	f000 fcb7 	bl	800cae8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c17a:	6978      	ldr	r0, [r7, #20]
 800c17c:	f7ff ff26 	bl	800bfcc <prvUnlockQueue>
	}
 800c180:	bf00      	nop
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08e      	sub	sp, #56	@ 0x38
 800c18c:	af04      	add	r7, sp, #16
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
 800c194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10b      	bne.n	800c1b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a0:	f383 8811 	msr	BASEPRI, r3
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	623b      	str	r3, [r7, #32]
}
 800c1ae:	bf00      	nop
 800c1b0:	bf00      	nop
 800c1b2:	e7fd      	b.n	800c1b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10b      	bne.n	800c1d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	61fb      	str	r3, [r7, #28]
}
 800c1cc:	bf00      	nop
 800c1ce:	bf00      	nop
 800c1d0:	e7fd      	b.n	800c1ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c1d2:	23a8      	movs	r3, #168	@ 0xa8
 800c1d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	2ba8      	cmp	r3, #168	@ 0xa8
 800c1da:	d00b      	beq.n	800c1f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	61bb      	str	r3, [r7, #24]
}
 800c1ee:	bf00      	nop
 800c1f0:	bf00      	nop
 800c1f2:	e7fd      	b.n	800c1f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d01e      	beq.n	800c23a <xTaskCreateStatic+0xb2>
 800c1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d01b      	beq.n	800c23a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c204:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c20a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	2202      	movs	r2, #2
 800c210:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c214:	2300      	movs	r3, #0
 800c216:	9303      	str	r3, [sp, #12]
 800c218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21a:	9302      	str	r3, [sp, #8]
 800c21c:	f107 0314 	add.w	r3, r7, #20
 800c220:	9301      	str	r3, [sp, #4]
 800c222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	68b9      	ldr	r1, [r7, #8]
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f000 f851 	bl	800c2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c234:	f000 f8f6 	bl	800c424 <prvAddNewTaskToReadyList>
 800c238:	e001      	b.n	800c23e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c23e:	697b      	ldr	r3, [r7, #20]
	}
 800c240:	4618      	mov	r0, r3
 800c242:	3728      	adds	r7, #40	@ 0x28
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08c      	sub	sp, #48	@ 0x30
 800c24c:	af04      	add	r7, sp, #16
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	603b      	str	r3, [r7, #0]
 800c254:	4613      	mov	r3, r2
 800c256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c258:	88fb      	ldrh	r3, [r7, #6]
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4618      	mov	r0, r3
 800c25e:	f001 fcc5 	bl	800dbec <pvPortMalloc>
 800c262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00e      	beq.n	800c288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c26a:	20a8      	movs	r0, #168	@ 0xa8
 800c26c:	f001 fcbe 	bl	800dbec <pvPortMalloc>
 800c270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c27e:	e005      	b.n	800c28c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c280:	6978      	ldr	r0, [r7, #20]
 800c282:	f001 fd81 	bl	800dd88 <vPortFree>
 800c286:	e001      	b.n	800c28c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c288:	2300      	movs	r3, #0
 800c28a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d017      	beq.n	800c2c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	2200      	movs	r2, #0
 800c296:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c29a:	88fa      	ldrh	r2, [r7, #6]
 800c29c:	2300      	movs	r3, #0
 800c29e:	9303      	str	r3, [sp, #12]
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	9302      	str	r3, [sp, #8]
 800c2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a6:	9301      	str	r3, [sp, #4]
 800c2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	68b9      	ldr	r1, [r7, #8]
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f80f 	bl	800c2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2b6:	69f8      	ldr	r0, [r7, #28]
 800c2b8:	f000 f8b4 	bl	800c424 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	61bb      	str	r3, [r7, #24]
 800c2c0:	e002      	b.n	800c2c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c2c8:	69bb      	ldr	r3, [r7, #24]
	}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3720      	adds	r7, #32
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	607a      	str	r2, [r7, #4]
 800c2e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	21a5      	movs	r1, #165	@ 0xa5
 800c2ee:	f002 feb7 	bl	800f060 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c2f6:	6879      	ldr	r1, [r7, #4]
 800c2f8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c2fc:	440b      	add	r3, r1
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	f023 0307 	bic.w	r3, r3, #7
 800c30a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	f003 0307 	and.w	r3, r3, #7
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00b      	beq.n	800c32e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	617b      	str	r3, [r7, #20]
}
 800c328:	bf00      	nop
 800c32a:	bf00      	nop
 800c32c:	e7fd      	b.n	800c32a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d01f      	beq.n	800c374 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c334:	2300      	movs	r3, #0
 800c336:	61fb      	str	r3, [r7, #28]
 800c338:	e012      	b.n	800c360 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	4413      	add	r3, r2
 800c340:	7819      	ldrb	r1, [r3, #0]
 800c342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	4413      	add	r3, r2
 800c348:	3334      	adds	r3, #52	@ 0x34
 800c34a:	460a      	mov	r2, r1
 800c34c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	4413      	add	r3, r2
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d006      	beq.n	800c368 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	3301      	adds	r3, #1
 800c35e:	61fb      	str	r3, [r7, #28]
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	2b0f      	cmp	r3, #15
 800c364:	d9e9      	bls.n	800c33a <prvInitialiseNewTask+0x66>
 800c366:	e000      	b.n	800c36a <prvInitialiseNewTask+0x96>
			{
				break;
 800c368:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c372:	e003      	b.n	800c37c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c376:	2200      	movs	r2, #0
 800c378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37e:	2b37      	cmp	r3, #55	@ 0x37
 800c380:	d901      	bls.n	800c386 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c382:	2337      	movs	r3, #55	@ 0x37
 800c384:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c38a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c390:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c394:	2200      	movs	r2, #0
 800c396:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c39a:	3304      	adds	r3, #4
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff f929 	bl	800b5f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3a4:	3318      	adds	r3, #24
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7ff f924 	bl	800b5f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	3354      	adds	r3, #84	@ 0x54
 800c3d6:	224c      	movs	r2, #76	@ 0x4c
 800c3d8:	2100      	movs	r1, #0
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f002 fe40 	bl	800f060 <memset>
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e2:	4a0d      	ldr	r2, [pc, #52]	@ (800c418 <prvInitialiseNewTask+0x144>)
 800c3e4:	659a      	str	r2, [r3, #88]	@ 0x58
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c41c <prvInitialiseNewTask+0x148>)
 800c3ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ee:	4a0c      	ldr	r2, [pc, #48]	@ (800c420 <prvInitialiseNewTask+0x14c>)
 800c3f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3f2:	683a      	ldr	r2, [r7, #0]
 800c3f4:	68f9      	ldr	r1, [r7, #12]
 800c3f6:	69b8      	ldr	r0, [r7, #24]
 800c3f8:	f001 f9a4 	bl	800d744 <pxPortInitialiseStack>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c400:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d002      	beq.n	800c40e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c40c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c40e:	bf00      	nop
 800c410:	3720      	adds	r7, #32
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	240054c0 	.word	0x240054c0
 800c41c:	24005528 	.word	0x24005528
 800c420:	24005590 	.word	0x24005590

0800c424 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c42c:	f001 fabc 	bl	800d9a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c430:	4b2d      	ldr	r3, [pc, #180]	@ (800c4e8 <prvAddNewTaskToReadyList+0xc4>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	3301      	adds	r3, #1
 800c436:	4a2c      	ldr	r2, [pc, #176]	@ (800c4e8 <prvAddNewTaskToReadyList+0xc4>)
 800c438:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c43a:	4b2c      	ldr	r3, [pc, #176]	@ (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d109      	bne.n	800c456 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c442:	4a2a      	ldr	r2, [pc, #168]	@ (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c448:	4b27      	ldr	r3, [pc, #156]	@ (800c4e8 <prvAddNewTaskToReadyList+0xc4>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d110      	bne.n	800c472 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c450:	f000 fc78 	bl	800cd44 <prvInitialiseTaskLists>
 800c454:	e00d      	b.n	800c472 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c456:	4b26      	ldr	r3, [pc, #152]	@ (800c4f0 <prvAddNewTaskToReadyList+0xcc>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d109      	bne.n	800c472 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c45e:	4b23      	ldr	r3, [pc, #140]	@ (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c468:	429a      	cmp	r2, r3
 800c46a:	d802      	bhi.n	800c472 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c46c:	4a1f      	ldr	r2, [pc, #124]	@ (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c472:	4b20      	ldr	r3, [pc, #128]	@ (800c4f4 <prvAddNewTaskToReadyList+0xd0>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3301      	adds	r3, #1
 800c478:	4a1e      	ldr	r2, [pc, #120]	@ (800c4f4 <prvAddNewTaskToReadyList+0xd0>)
 800c47a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c47c:	4b1d      	ldr	r3, [pc, #116]	@ (800c4f4 <prvAddNewTaskToReadyList+0xd0>)
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c488:	4b1b      	ldr	r3, [pc, #108]	@ (800c4f8 <prvAddNewTaskToReadyList+0xd4>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d903      	bls.n	800c498 <prvAddNewTaskToReadyList+0x74>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c494:	4a18      	ldr	r2, [pc, #96]	@ (800c4f8 <prvAddNewTaskToReadyList+0xd4>)
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c49c:	4613      	mov	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4a15      	ldr	r2, [pc, #84]	@ (800c4fc <prvAddNewTaskToReadyList+0xd8>)
 800c4a6:	441a      	add	r2, r3
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3304      	adds	r3, #4
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4610      	mov	r0, r2
 800c4b0:	f7ff f8ad 	bl	800b60e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c4b4:	f001 faaa 	bl	800da0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c4b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c4f0 <prvAddNewTaskToReadyList+0xcc>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00e      	beq.n	800c4de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c4ec <prvAddNewTaskToReadyList+0xc8>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d207      	bcs.n	800c4de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c4ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c500 <prvAddNewTaskToReadyList+0xdc>)
 800c4d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4d4:	601a      	str	r2, [r3, #0]
 800c4d6:	f3bf 8f4f 	dsb	sy
 800c4da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	24001740 	.word	0x24001740
 800c4ec:	2400126c 	.word	0x2400126c
 800c4f0:	2400174c 	.word	0x2400174c
 800c4f4:	2400175c 	.word	0x2400175c
 800c4f8:	24001748 	.word	0x24001748
 800c4fc:	24001270 	.word	0x24001270
 800c500:	e000ed04 	.word	0xe000ed04

0800c504 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c504:	b580      	push	{r7, lr}
 800c506:	b08a      	sub	sp, #40	@ 0x28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c50e:	2300      	movs	r3, #0
 800c510:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10b      	bne.n	800c530 <vTaskDelayUntil+0x2c>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	617b      	str	r3, [r7, #20]
}
 800c52a:	bf00      	nop
 800c52c:	bf00      	nop
 800c52e:	e7fd      	b.n	800c52c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10b      	bne.n	800c54e <vTaskDelayUntil+0x4a>
	__asm volatile
 800c536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	613b      	str	r3, [r7, #16]
}
 800c548:	bf00      	nop
 800c54a:	bf00      	nop
 800c54c:	e7fd      	b.n	800c54a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800c54e:	4b2a      	ldr	r3, [pc, #168]	@ (800c5f8 <vTaskDelayUntil+0xf4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00b      	beq.n	800c56e <vTaskDelayUntil+0x6a>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	60fb      	str	r3, [r7, #12]
}
 800c568:	bf00      	nop
 800c56a:	bf00      	nop
 800c56c:	e7fd      	b.n	800c56a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800c56e:	f000 f8b9 	bl	800c6e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c572:	4b22      	ldr	r3, [pc, #136]	@ (800c5fc <vTaskDelayUntil+0xf8>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	4413      	add	r3, r2
 800c580:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6a3a      	ldr	r2, [r7, #32]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d20b      	bcs.n	800c5a4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	69fa      	ldr	r2, [r7, #28]
 800c592:	429a      	cmp	r2, r3
 800c594:	d211      	bcs.n	800c5ba <vTaskDelayUntil+0xb6>
 800c596:	69fa      	ldr	r2, [r7, #28]
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d90d      	bls.n	800c5ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5a2:	e00a      	b.n	800c5ba <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	69fa      	ldr	r2, [r7, #28]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d303      	bcc.n	800c5b6 <vTaskDelayUntil+0xb2>
 800c5ae:	69fa      	ldr	r2, [r7, #28]
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d901      	bls.n	800c5ba <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	69fa      	ldr	r2, [r7, #28]
 800c5be:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d006      	beq.n	800c5d4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fd0a 	bl	800cfe8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c5d4:	f000 f894 	bl	800c700 <xTaskResumeAll>
 800c5d8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d107      	bne.n	800c5f0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c5e0:	4b07      	ldr	r3, [pc, #28]	@ (800c600 <vTaskDelayUntil+0xfc>)
 800c5e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5e6:	601a      	str	r2, [r3, #0]
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5f0:	bf00      	nop
 800c5f2:	3728      	adds	r7, #40	@ 0x28
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	24001768 	.word	0x24001768
 800c5fc:	24001744 	.word	0x24001744
 800c600:	e000ed04 	.word	0xe000ed04

0800c604 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b08a      	sub	sp, #40	@ 0x28
 800c608:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c60a:	2300      	movs	r3, #0
 800c60c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c60e:	2300      	movs	r3, #0
 800c610:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c612:	463a      	mov	r2, r7
 800c614:	1d39      	adds	r1, r7, #4
 800c616:	f107 0308 	add.w	r3, r7, #8
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe ff96 	bl	800b54c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	9202      	str	r2, [sp, #8]
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	2300      	movs	r3, #0
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	2300      	movs	r3, #0
 800c630:	460a      	mov	r2, r1
 800c632:	4924      	ldr	r1, [pc, #144]	@ (800c6c4 <vTaskStartScheduler+0xc0>)
 800c634:	4824      	ldr	r0, [pc, #144]	@ (800c6c8 <vTaskStartScheduler+0xc4>)
 800c636:	f7ff fda7 	bl	800c188 <xTaskCreateStatic>
 800c63a:	4603      	mov	r3, r0
 800c63c:	4a23      	ldr	r2, [pc, #140]	@ (800c6cc <vTaskStartScheduler+0xc8>)
 800c63e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c640:	4b22      	ldr	r3, [pc, #136]	@ (800c6cc <vTaskStartScheduler+0xc8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c648:	2301      	movs	r3, #1
 800c64a:	617b      	str	r3, [r7, #20]
 800c64c:	e001      	b.n	800c652 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d102      	bne.n	800c65e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c658:	f000 fd1a 	bl	800d090 <xTimerCreateTimerTask>
 800c65c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d11b      	bne.n	800c69c <vTaskStartScheduler+0x98>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	613b      	str	r3, [r7, #16]
}
 800c676:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c678:	4b15      	ldr	r3, [pc, #84]	@ (800c6d0 <vTaskStartScheduler+0xcc>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3354      	adds	r3, #84	@ 0x54
 800c67e:	4a15      	ldr	r2, [pc, #84]	@ (800c6d4 <vTaskStartScheduler+0xd0>)
 800c680:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c682:	4b15      	ldr	r3, [pc, #84]	@ (800c6d8 <vTaskStartScheduler+0xd4>)
 800c684:	f04f 32ff 	mov.w	r2, #4294967295
 800c688:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c68a:	4b14      	ldr	r3, [pc, #80]	@ (800c6dc <vTaskStartScheduler+0xd8>)
 800c68c:	2201      	movs	r2, #1
 800c68e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c690:	4b13      	ldr	r3, [pc, #76]	@ (800c6e0 <vTaskStartScheduler+0xdc>)
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c696:	f001 f8e3 	bl	800d860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c69a:	e00f      	b.n	800c6bc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a2:	d10b      	bne.n	800c6bc <vTaskStartScheduler+0xb8>
	__asm volatile
 800c6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	60fb      	str	r3, [r7, #12]
}
 800c6b6:	bf00      	nop
 800c6b8:	bf00      	nop
 800c6ba:	e7fd      	b.n	800c6b8 <vTaskStartScheduler+0xb4>
}
 800c6bc:	bf00      	nop
 800c6be:	3718      	adds	r7, #24
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	080113ec 	.word	0x080113ec
 800c6c8:	0800cd15 	.word	0x0800cd15
 800c6cc:	24001764 	.word	0x24001764
 800c6d0:	2400126c 	.word	0x2400126c
 800c6d4:	2400008c 	.word	0x2400008c
 800c6d8:	24001760 	.word	0x24001760
 800c6dc:	2400174c 	.word	0x2400174c
 800c6e0:	24001744 	.word	0x24001744

0800c6e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c6e8:	4b04      	ldr	r3, [pc, #16]	@ (800c6fc <vTaskSuspendAll+0x18>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	4a03      	ldr	r2, [pc, #12]	@ (800c6fc <vTaskSuspendAll+0x18>)
 800c6f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c6f2:	bf00      	nop
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	24001768 	.word	0x24001768

0800c700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c706:	2300      	movs	r3, #0
 800c708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c70a:	2300      	movs	r3, #0
 800c70c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c70e:	4b42      	ldr	r3, [pc, #264]	@ (800c818 <xTaskResumeAll+0x118>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10b      	bne.n	800c72e <xTaskResumeAll+0x2e>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	603b      	str	r3, [r7, #0]
}
 800c728:	bf00      	nop
 800c72a:	bf00      	nop
 800c72c:	e7fd      	b.n	800c72a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c72e:	f001 f93b 	bl	800d9a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c732:	4b39      	ldr	r3, [pc, #228]	@ (800c818 <xTaskResumeAll+0x118>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	3b01      	subs	r3, #1
 800c738:	4a37      	ldr	r2, [pc, #220]	@ (800c818 <xTaskResumeAll+0x118>)
 800c73a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c73c:	4b36      	ldr	r3, [pc, #216]	@ (800c818 <xTaskResumeAll+0x118>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d162      	bne.n	800c80a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c744:	4b35      	ldr	r3, [pc, #212]	@ (800c81c <xTaskResumeAll+0x11c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d05e      	beq.n	800c80a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c74c:	e02f      	b.n	800c7ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c74e:	4b34      	ldr	r3, [pc, #208]	@ (800c820 <xTaskResumeAll+0x120>)
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3318      	adds	r3, #24
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe ffb4 	bl	800b6c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	3304      	adds	r3, #4
 800c764:	4618      	mov	r0, r3
 800c766:	f7fe ffaf 	bl	800b6c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c76e:	4b2d      	ldr	r3, [pc, #180]	@ (800c824 <xTaskResumeAll+0x124>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	429a      	cmp	r2, r3
 800c774:	d903      	bls.n	800c77e <xTaskResumeAll+0x7e>
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c77a:	4a2a      	ldr	r2, [pc, #168]	@ (800c824 <xTaskResumeAll+0x124>)
 800c77c:	6013      	str	r3, [r2, #0]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c782:	4613      	mov	r3, r2
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	009b      	lsls	r3, r3, #2
 800c78a:	4a27      	ldr	r2, [pc, #156]	@ (800c828 <xTaskResumeAll+0x128>)
 800c78c:	441a      	add	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3304      	adds	r3, #4
 800c792:	4619      	mov	r1, r3
 800c794:	4610      	mov	r0, r2
 800c796:	f7fe ff3a 	bl	800b60e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c79e:	4b23      	ldr	r3, [pc, #140]	@ (800c82c <xTaskResumeAll+0x12c>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d302      	bcc.n	800c7ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c7a8:	4b21      	ldr	r3, [pc, #132]	@ (800c830 <xTaskResumeAll+0x130>)
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7ae:	4b1c      	ldr	r3, [pc, #112]	@ (800c820 <xTaskResumeAll+0x120>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1cb      	bne.n	800c74e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c7bc:	f000 fb66 	bl	800ce8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c7c0:	4b1c      	ldr	r3, [pc, #112]	@ (800c834 <xTaskResumeAll+0x134>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d010      	beq.n	800c7ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c7cc:	f000 f846 	bl	800c85c <xTaskIncrementTick>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d002      	beq.n	800c7dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c7d6:	4b16      	ldr	r3, [pc, #88]	@ (800c830 <xTaskResumeAll+0x130>)
 800c7d8:	2201      	movs	r2, #1
 800c7da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1f1      	bne.n	800c7cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c7e8:	4b12      	ldr	r3, [pc, #72]	@ (800c834 <xTaskResumeAll+0x134>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c7ee:	4b10      	ldr	r3, [pc, #64]	@ (800c830 <xTaskResumeAll+0x130>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d009      	beq.n	800c80a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c7fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c838 <xTaskResumeAll+0x138>)
 800c7fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c80a:	f001 f8ff 	bl	800da0c <vPortExitCritical>

	return xAlreadyYielded;
 800c80e:	68bb      	ldr	r3, [r7, #8]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	24001768 	.word	0x24001768
 800c81c:	24001740 	.word	0x24001740
 800c820:	24001700 	.word	0x24001700
 800c824:	24001748 	.word	0x24001748
 800c828:	24001270 	.word	0x24001270
 800c82c:	2400126c 	.word	0x2400126c
 800c830:	24001754 	.word	0x24001754
 800c834:	24001750 	.word	0x24001750
 800c838:	e000ed04 	.word	0xe000ed04

0800c83c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c842:	4b05      	ldr	r3, [pc, #20]	@ (800c858 <xTaskGetTickCount+0x1c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c848:	687b      	ldr	r3, [r7, #4]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	370c      	adds	r7, #12
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	24001744 	.word	0x24001744

0800c85c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b086      	sub	sp, #24
 800c860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c862:	2300      	movs	r3, #0
 800c864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c866:	4b4f      	ldr	r3, [pc, #316]	@ (800c9a4 <xTaskIncrementTick+0x148>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f040 8090 	bne.w	800c990 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c870:	4b4d      	ldr	r3, [pc, #308]	@ (800c9a8 <xTaskIncrementTick+0x14c>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	3301      	adds	r3, #1
 800c876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c878:	4a4b      	ldr	r2, [pc, #300]	@ (800c9a8 <xTaskIncrementTick+0x14c>)
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d121      	bne.n	800c8c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c884:	4b49      	ldr	r3, [pc, #292]	@ (800c9ac <xTaskIncrementTick+0x150>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00b      	beq.n	800c8a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c892:	f383 8811 	msr	BASEPRI, r3
 800c896:	f3bf 8f6f 	isb	sy
 800c89a:	f3bf 8f4f 	dsb	sy
 800c89e:	603b      	str	r3, [r7, #0]
}
 800c8a0:	bf00      	nop
 800c8a2:	bf00      	nop
 800c8a4:	e7fd      	b.n	800c8a2 <xTaskIncrementTick+0x46>
 800c8a6:	4b41      	ldr	r3, [pc, #260]	@ (800c9ac <xTaskIncrementTick+0x150>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	60fb      	str	r3, [r7, #12]
 800c8ac:	4b40      	ldr	r3, [pc, #256]	@ (800c9b0 <xTaskIncrementTick+0x154>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a3e      	ldr	r2, [pc, #248]	@ (800c9ac <xTaskIncrementTick+0x150>)
 800c8b2:	6013      	str	r3, [r2, #0]
 800c8b4:	4a3e      	ldr	r2, [pc, #248]	@ (800c9b0 <xTaskIncrementTick+0x154>)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6013      	str	r3, [r2, #0]
 800c8ba:	4b3e      	ldr	r3, [pc, #248]	@ (800c9b4 <xTaskIncrementTick+0x158>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	4a3c      	ldr	r2, [pc, #240]	@ (800c9b4 <xTaskIncrementTick+0x158>)
 800c8c2:	6013      	str	r3, [r2, #0]
 800c8c4:	f000 fae2 	bl	800ce8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c8c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c9b8 <xTaskIncrementTick+0x15c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d349      	bcc.n	800c966 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8d2:	4b36      	ldr	r3, [pc, #216]	@ (800c9ac <xTaskIncrementTick+0x150>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d104      	bne.n	800c8e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8dc:	4b36      	ldr	r3, [pc, #216]	@ (800c9b8 <xTaskIncrementTick+0x15c>)
 800c8de:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e2:	601a      	str	r2, [r3, #0]
					break;
 800c8e4:	e03f      	b.n	800c966 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8e6:	4b31      	ldr	r3, [pc, #196]	@ (800c9ac <xTaskIncrementTick+0x150>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d203      	bcs.n	800c906 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c8fe:	4a2e      	ldr	r2, [pc, #184]	@ (800c9b8 <xTaskIncrementTick+0x15c>)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c904:	e02f      	b.n	800c966 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	3304      	adds	r3, #4
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe fedc 	bl	800b6c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c914:	2b00      	cmp	r3, #0
 800c916:	d004      	beq.n	800c922 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	3318      	adds	r3, #24
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7fe fed3 	bl	800b6c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c926:	4b25      	ldr	r3, [pc, #148]	@ (800c9bc <xTaskIncrementTick+0x160>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d903      	bls.n	800c936 <xTaskIncrementTick+0xda>
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c932:	4a22      	ldr	r2, [pc, #136]	@ (800c9bc <xTaskIncrementTick+0x160>)
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c93a:	4613      	mov	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4a1f      	ldr	r2, [pc, #124]	@ (800c9c0 <xTaskIncrementTick+0x164>)
 800c944:	441a      	add	r2, r3
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	3304      	adds	r3, #4
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f7fe fe5e 	bl	800b60e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c956:	4b1b      	ldr	r3, [pc, #108]	@ (800c9c4 <xTaskIncrementTick+0x168>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d3b8      	bcc.n	800c8d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c960:	2301      	movs	r3, #1
 800c962:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c964:	e7b5      	b.n	800c8d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c966:	4b17      	ldr	r3, [pc, #92]	@ (800c9c4 <xTaskIncrementTick+0x168>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c96c:	4914      	ldr	r1, [pc, #80]	@ (800c9c0 <xTaskIncrementTick+0x164>)
 800c96e:	4613      	mov	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	440b      	add	r3, r1
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d901      	bls.n	800c982 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c97e:	2301      	movs	r3, #1
 800c980:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c982:	4b11      	ldr	r3, [pc, #68]	@ (800c9c8 <xTaskIncrementTick+0x16c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d007      	beq.n	800c99a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c98a:	2301      	movs	r3, #1
 800c98c:	617b      	str	r3, [r7, #20]
 800c98e:	e004      	b.n	800c99a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c990:	4b0e      	ldr	r3, [pc, #56]	@ (800c9cc <xTaskIncrementTick+0x170>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3301      	adds	r3, #1
 800c996:	4a0d      	ldr	r2, [pc, #52]	@ (800c9cc <xTaskIncrementTick+0x170>)
 800c998:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c99a:	697b      	ldr	r3, [r7, #20]
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	24001768 	.word	0x24001768
 800c9a8:	24001744 	.word	0x24001744
 800c9ac:	240016f8 	.word	0x240016f8
 800c9b0:	240016fc 	.word	0x240016fc
 800c9b4:	24001758 	.word	0x24001758
 800c9b8:	24001760 	.word	0x24001760
 800c9bc:	24001748 	.word	0x24001748
 800c9c0:	24001270 	.word	0x24001270
 800c9c4:	2400126c 	.word	0x2400126c
 800c9c8:	24001754 	.word	0x24001754
 800c9cc:	24001750 	.word	0x24001750

0800c9d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9d6:	4b2b      	ldr	r3, [pc, #172]	@ (800ca84 <vTaskSwitchContext+0xb4>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d003      	beq.n	800c9e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c9de:	4b2a      	ldr	r3, [pc, #168]	@ (800ca88 <vTaskSwitchContext+0xb8>)
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c9e4:	e047      	b.n	800ca76 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c9e6:	4b28      	ldr	r3, [pc, #160]	@ (800ca88 <vTaskSwitchContext+0xb8>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9ec:	4b27      	ldr	r3, [pc, #156]	@ (800ca8c <vTaskSwitchContext+0xbc>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	60fb      	str	r3, [r7, #12]
 800c9f2:	e011      	b.n	800ca18 <vTaskSwitchContext+0x48>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d10b      	bne.n	800ca12 <vTaskSwitchContext+0x42>
	__asm volatile
 800c9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	607b      	str	r3, [r7, #4]
}
 800ca0c:	bf00      	nop
 800ca0e:	bf00      	nop
 800ca10:	e7fd      	b.n	800ca0e <vTaskSwitchContext+0x3e>
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3b01      	subs	r3, #1
 800ca16:	60fb      	str	r3, [r7, #12]
 800ca18:	491d      	ldr	r1, [pc, #116]	@ (800ca90 <vTaskSwitchContext+0xc0>)
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4413      	add	r3, r2
 800ca22:	009b      	lsls	r3, r3, #2
 800ca24:	440b      	add	r3, r1
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d0e3      	beq.n	800c9f4 <vTaskSwitchContext+0x24>
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4a16      	ldr	r2, [pc, #88]	@ (800ca90 <vTaskSwitchContext+0xc0>)
 800ca38:	4413      	add	r3, r2
 800ca3a:	60bb      	str	r3, [r7, #8]
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	605a      	str	r2, [r3, #4]
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	685a      	ldr	r2, [r3, #4]
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	3308      	adds	r3, #8
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d104      	bne.n	800ca5c <vTaskSwitchContext+0x8c>
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	605a      	str	r2, [r3, #4]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	4a0c      	ldr	r2, [pc, #48]	@ (800ca94 <vTaskSwitchContext+0xc4>)
 800ca64:	6013      	str	r3, [r2, #0]
 800ca66:	4a09      	ldr	r2, [pc, #36]	@ (800ca8c <vTaskSwitchContext+0xbc>)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca6c:	4b09      	ldr	r3, [pc, #36]	@ (800ca94 <vTaskSwitchContext+0xc4>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	3354      	adds	r3, #84	@ 0x54
 800ca72:	4a09      	ldr	r2, [pc, #36]	@ (800ca98 <vTaskSwitchContext+0xc8>)
 800ca74:	6013      	str	r3, [r2, #0]
}
 800ca76:	bf00      	nop
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	24001768 	.word	0x24001768
 800ca88:	24001754 	.word	0x24001754
 800ca8c:	24001748 	.word	0x24001748
 800ca90:	24001270 	.word	0x24001270
 800ca94:	2400126c 	.word	0x2400126c
 800ca98:	2400008c 	.word	0x2400008c

0800ca9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10b      	bne.n	800cac4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	60fb      	str	r3, [r7, #12]
}
 800cabe:	bf00      	nop
 800cac0:	bf00      	nop
 800cac2:	e7fd      	b.n	800cac0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cac4:	4b07      	ldr	r3, [pc, #28]	@ (800cae4 <vTaskPlaceOnEventList+0x48>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3318      	adds	r3, #24
 800caca:	4619      	mov	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7fe fdc2 	bl	800b656 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cad2:	2101      	movs	r1, #1
 800cad4:	6838      	ldr	r0, [r7, #0]
 800cad6:	f000 fa87 	bl	800cfe8 <prvAddCurrentTaskToDelayedList>
}
 800cada:	bf00      	nop
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	2400126c 	.word	0x2400126c

0800cae8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10b      	bne.n	800cb12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	617b      	str	r3, [r7, #20]
}
 800cb0c:	bf00      	nop
 800cb0e:	bf00      	nop
 800cb10:	e7fd      	b.n	800cb0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb12:	4b0a      	ldr	r3, [pc, #40]	@ (800cb3c <vTaskPlaceOnEventListRestricted+0x54>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	3318      	adds	r3, #24
 800cb18:	4619      	mov	r1, r3
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f7fe fd77 	bl	800b60e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cb26:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	68b8      	ldr	r0, [r7, #8]
 800cb30:	f000 fa5a 	bl	800cfe8 <prvAddCurrentTaskToDelayedList>
	}
 800cb34:	bf00      	nop
 800cb36:	3718      	adds	r7, #24
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	2400126c 	.word	0x2400126c

0800cb40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10b      	bne.n	800cb6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	60fb      	str	r3, [r7, #12]
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop
 800cb6c:	e7fd      	b.n	800cb6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	3318      	adds	r3, #24
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe fda8 	bl	800b6c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb78:	4b1d      	ldr	r3, [pc, #116]	@ (800cbf0 <xTaskRemoveFromEventList+0xb0>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d11d      	bne.n	800cbbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	3304      	adds	r3, #4
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fe fd9f 	bl	800b6c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb8e:	4b19      	ldr	r3, [pc, #100]	@ (800cbf4 <xTaskRemoveFromEventList+0xb4>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d903      	bls.n	800cb9e <xTaskRemoveFromEventList+0x5e>
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb9a:	4a16      	ldr	r2, [pc, #88]	@ (800cbf4 <xTaskRemoveFromEventList+0xb4>)
 800cb9c:	6013      	str	r3, [r2, #0]
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cba2:	4613      	mov	r3, r2
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	4413      	add	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4a13      	ldr	r2, [pc, #76]	@ (800cbf8 <xTaskRemoveFromEventList+0xb8>)
 800cbac:	441a      	add	r2, r3
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	f7fe fd2a 	bl	800b60e <vListInsertEnd>
 800cbba:	e005      	b.n	800cbc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	3318      	adds	r3, #24
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	480e      	ldr	r0, [pc, #56]	@ (800cbfc <xTaskRemoveFromEventList+0xbc>)
 800cbc4:	f7fe fd23 	bl	800b60e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbcc:	4b0c      	ldr	r3, [pc, #48]	@ (800cc00 <xTaskRemoveFromEventList+0xc0>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d905      	bls.n	800cbe2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cbda:	4b0a      	ldr	r3, [pc, #40]	@ (800cc04 <xTaskRemoveFromEventList+0xc4>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	e001      	b.n	800cbe6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cbe6:	697b      	ldr	r3, [r7, #20]
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	24001768 	.word	0x24001768
 800cbf4:	24001748 	.word	0x24001748
 800cbf8:	24001270 	.word	0x24001270
 800cbfc:	24001700 	.word	0x24001700
 800cc00:	2400126c 	.word	0x2400126c
 800cc04:	24001754 	.word	0x24001754

0800cc08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc10:	4b06      	ldr	r3, [pc, #24]	@ (800cc2c <vTaskInternalSetTimeOutState+0x24>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc18:	4b05      	ldr	r3, [pc, #20]	@ (800cc30 <vTaskInternalSetTimeOutState+0x28>)
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	605a      	str	r2, [r3, #4]
}
 800cc20:	bf00      	nop
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr
 800cc2c:	24001758 	.word	0x24001758
 800cc30:	24001744 	.word	0x24001744

0800cc34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b088      	sub	sp, #32
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10b      	bne.n	800cc5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	613b      	str	r3, [r7, #16]
}
 800cc56:	bf00      	nop
 800cc58:	bf00      	nop
 800cc5a:	e7fd      	b.n	800cc58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d10b      	bne.n	800cc7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	60fb      	str	r3, [r7, #12]
}
 800cc74:	bf00      	nop
 800cc76:	bf00      	nop
 800cc78:	e7fd      	b.n	800cc76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cc7a:	f000 fe95 	bl	800d9a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc7e:	4b1d      	ldr	r3, [pc, #116]	@ (800ccf4 <xTaskCheckForTimeOut+0xc0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	69ba      	ldr	r2, [r7, #24]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc96:	d102      	bne.n	800cc9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	61fb      	str	r3, [r7, #28]
 800cc9c:	e023      	b.n	800cce6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	4b15      	ldr	r3, [pc, #84]	@ (800ccf8 <xTaskCheckForTimeOut+0xc4>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d007      	beq.n	800ccba <xTaskCheckForTimeOut+0x86>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	69ba      	ldr	r2, [r7, #24]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d302      	bcc.n	800ccba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	61fb      	str	r3, [r7, #28]
 800ccb8:	e015      	b.n	800cce6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d20b      	bcs.n	800ccdc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	1ad2      	subs	r2, r2, r3
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7ff ff99 	bl	800cc08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	61fb      	str	r3, [r7, #28]
 800ccda:	e004      	b.n	800cce6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	2200      	movs	r2, #0
 800cce0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cce2:	2301      	movs	r3, #1
 800cce4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cce6:	f000 fe91 	bl	800da0c <vPortExitCritical>

	return xReturn;
 800ccea:	69fb      	ldr	r3, [r7, #28]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3720      	adds	r7, #32
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	24001744 	.word	0x24001744
 800ccf8:	24001758 	.word	0x24001758

0800ccfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd00:	4b03      	ldr	r3, [pc, #12]	@ (800cd10 <vTaskMissedYield+0x14>)
 800cd02:	2201      	movs	r2, #1
 800cd04:	601a      	str	r2, [r3, #0]
}
 800cd06:	bf00      	nop
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	24001754 	.word	0x24001754

0800cd14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd1c:	f000 f852 	bl	800cdc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd20:	4b06      	ldr	r3, [pc, #24]	@ (800cd3c <prvIdleTask+0x28>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d9f9      	bls.n	800cd1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd28:	4b05      	ldr	r3, [pc, #20]	@ (800cd40 <prvIdleTask+0x2c>)
 800cd2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd38:	e7f0      	b.n	800cd1c <prvIdleTask+0x8>
 800cd3a:	bf00      	nop
 800cd3c:	24001270 	.word	0x24001270
 800cd40:	e000ed04 	.word	0xe000ed04

0800cd44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	607b      	str	r3, [r7, #4]
 800cd4e:	e00c      	b.n	800cd6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	4a12      	ldr	r2, [pc, #72]	@ (800cda4 <prvInitialiseTaskLists+0x60>)
 800cd5c:	4413      	add	r3, r2
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fc28 	bl	800b5b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3301      	adds	r3, #1
 800cd68:	607b      	str	r3, [r7, #4]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b37      	cmp	r3, #55	@ 0x37
 800cd6e:	d9ef      	bls.n	800cd50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd70:	480d      	ldr	r0, [pc, #52]	@ (800cda8 <prvInitialiseTaskLists+0x64>)
 800cd72:	f7fe fc1f 	bl	800b5b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd76:	480d      	ldr	r0, [pc, #52]	@ (800cdac <prvInitialiseTaskLists+0x68>)
 800cd78:	f7fe fc1c 	bl	800b5b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd7c:	480c      	ldr	r0, [pc, #48]	@ (800cdb0 <prvInitialiseTaskLists+0x6c>)
 800cd7e:	f7fe fc19 	bl	800b5b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cd82:	480c      	ldr	r0, [pc, #48]	@ (800cdb4 <prvInitialiseTaskLists+0x70>)
 800cd84:	f7fe fc16 	bl	800b5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cd88:	480b      	ldr	r0, [pc, #44]	@ (800cdb8 <prvInitialiseTaskLists+0x74>)
 800cd8a:	f7fe fc13 	bl	800b5b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cd8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cdbc <prvInitialiseTaskLists+0x78>)
 800cd90:	4a05      	ldr	r2, [pc, #20]	@ (800cda8 <prvInitialiseTaskLists+0x64>)
 800cd92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cd94:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc0 <prvInitialiseTaskLists+0x7c>)
 800cd96:	4a05      	ldr	r2, [pc, #20]	@ (800cdac <prvInitialiseTaskLists+0x68>)
 800cd98:	601a      	str	r2, [r3, #0]
}
 800cd9a:	bf00      	nop
 800cd9c:	3708      	adds	r7, #8
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	24001270 	.word	0x24001270
 800cda8:	240016d0 	.word	0x240016d0
 800cdac:	240016e4 	.word	0x240016e4
 800cdb0:	24001700 	.word	0x24001700
 800cdb4:	24001714 	.word	0x24001714
 800cdb8:	2400172c 	.word	0x2400172c
 800cdbc:	240016f8 	.word	0x240016f8
 800cdc0:	240016fc 	.word	0x240016fc

0800cdc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cdca:	e019      	b.n	800ce00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cdcc:	f000 fdec 	bl	800d9a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd0:	4b10      	ldr	r3, [pc, #64]	@ (800ce14 <prvCheckTasksWaitingTermination+0x50>)
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3304      	adds	r3, #4
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe fc73 	bl	800b6c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cde2:	4b0d      	ldr	r3, [pc, #52]	@ (800ce18 <prvCheckTasksWaitingTermination+0x54>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	3b01      	subs	r3, #1
 800cde8:	4a0b      	ldr	r2, [pc, #44]	@ (800ce18 <prvCheckTasksWaitingTermination+0x54>)
 800cdea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cdec:	4b0b      	ldr	r3, [pc, #44]	@ (800ce1c <prvCheckTasksWaitingTermination+0x58>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	4a0a      	ldr	r2, [pc, #40]	@ (800ce1c <prvCheckTasksWaitingTermination+0x58>)
 800cdf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cdf6:	f000 fe09 	bl	800da0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f810 	bl	800ce20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce00:	4b06      	ldr	r3, [pc, #24]	@ (800ce1c <prvCheckTasksWaitingTermination+0x58>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1e1      	bne.n	800cdcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce08:	bf00      	nop
 800ce0a:	bf00      	nop
 800ce0c:	3708      	adds	r7, #8
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop
 800ce14:	24001714 	.word	0x24001714
 800ce18:	24001740 	.word	0x24001740
 800ce1c:	24001728 	.word	0x24001728

0800ce20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	3354      	adds	r3, #84	@ 0x54
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f002 f933 	bl	800f098 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d108      	bne.n	800ce4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 ffa1 	bl	800dd88 <vPortFree>
				vPortFree( pxTCB );
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 ff9e 	bl	800dd88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce4c:	e019      	b.n	800ce82 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d103      	bne.n	800ce60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 ff95 	bl	800dd88 <vPortFree>
	}
 800ce5e:	e010      	b.n	800ce82 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d00b      	beq.n	800ce82 <prvDeleteTCB+0x62>
	__asm volatile
 800ce6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	60fb      	str	r3, [r7, #12]
}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	e7fd      	b.n	800ce7e <prvDeleteTCB+0x5e>
	}
 800ce82:	bf00      	nop
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
	...

0800ce8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce92:	4b0c      	ldr	r3, [pc, #48]	@ (800cec4 <prvResetNextTaskUnblockTime+0x38>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d104      	bne.n	800cea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ce9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cec8 <prvResetNextTaskUnblockTime+0x3c>)
 800ce9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cea4:	e008      	b.n	800ceb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cea6:	4b07      	ldr	r3, [pc, #28]	@ (800cec4 <prvResetNextTaskUnblockTime+0x38>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	4a04      	ldr	r2, [pc, #16]	@ (800cec8 <prvResetNextTaskUnblockTime+0x3c>)
 800ceb6:	6013      	str	r3, [r2, #0]
}
 800ceb8:	bf00      	nop
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr
 800cec4:	240016f8 	.word	0x240016f8
 800cec8:	24001760 	.word	0x24001760

0800cecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ced2:	4b0b      	ldr	r3, [pc, #44]	@ (800cf00 <xTaskGetSchedulerState+0x34>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d102      	bne.n	800cee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ceda:	2301      	movs	r3, #1
 800cedc:	607b      	str	r3, [r7, #4]
 800cede:	e008      	b.n	800cef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cee0:	4b08      	ldr	r3, [pc, #32]	@ (800cf04 <xTaskGetSchedulerState+0x38>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d102      	bne.n	800ceee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cee8:	2302      	movs	r3, #2
 800ceea:	607b      	str	r3, [r7, #4]
 800ceec:	e001      	b.n	800cef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ceee:	2300      	movs	r3, #0
 800cef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cef2:	687b      	ldr	r3, [r7, #4]
	}
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	2400174c 	.word	0x2400174c
 800cf04:	24001768 	.word	0x24001768

0800cf08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf14:	2300      	movs	r3, #0
 800cf16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d058      	beq.n	800cfd0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf1e:	4b2f      	ldr	r3, [pc, #188]	@ (800cfdc <xTaskPriorityDisinherit+0xd4>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	693a      	ldr	r2, [r7, #16]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d00b      	beq.n	800cf40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	60fb      	str	r3, [r7, #12]
}
 800cf3a:	bf00      	nop
 800cf3c:	bf00      	nop
 800cf3e:	e7fd      	b.n	800cf3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10b      	bne.n	800cf60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4c:	f383 8811 	msr	BASEPRI, r3
 800cf50:	f3bf 8f6f 	isb	sy
 800cf54:	f3bf 8f4f 	dsb	sy
 800cf58:	60bb      	str	r3, [r7, #8]
}
 800cf5a:	bf00      	nop
 800cf5c:	bf00      	nop
 800cf5e:	e7fd      	b.n	800cf5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cf60:	693b      	ldr	r3, [r7, #16]
 800cf62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf64:	1e5a      	subs	r2, r3, #1
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d02c      	beq.n	800cfd0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d128      	bne.n	800cfd0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fe fba0 	bl	800b6c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfa0:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe0 <xTaskPriorityDisinherit+0xd8>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d903      	bls.n	800cfb0 <xTaskPriorityDisinherit+0xa8>
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfac:	4a0c      	ldr	r2, [pc, #48]	@ (800cfe0 <xTaskPriorityDisinherit+0xd8>)
 800cfae:	6013      	str	r3, [r2, #0]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	4413      	add	r3, r2
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	4a09      	ldr	r2, [pc, #36]	@ (800cfe4 <xTaskPriorityDisinherit+0xdc>)
 800cfbe:	441a      	add	r2, r3
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	f7fe fb21 	bl	800b60e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfd0:	697b      	ldr	r3, [r7, #20]
	}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3718      	adds	r7, #24
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	2400126c 	.word	0x2400126c
 800cfe0:	24001748 	.word	0x24001748
 800cfe4:	24001270 	.word	0x24001270

0800cfe8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cff2:	4b21      	ldr	r3, [pc, #132]	@ (800d078 <prvAddCurrentTaskToDelayedList+0x90>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cff8:	4b20      	ldr	r3, [pc, #128]	@ (800d07c <prvAddCurrentTaskToDelayedList+0x94>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	3304      	adds	r3, #4
 800cffe:	4618      	mov	r0, r3
 800d000:	f7fe fb62 	bl	800b6c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d00a:	d10a      	bne.n	800d022 <prvAddCurrentTaskToDelayedList+0x3a>
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d007      	beq.n	800d022 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d012:	4b1a      	ldr	r3, [pc, #104]	@ (800d07c <prvAddCurrentTaskToDelayedList+0x94>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3304      	adds	r3, #4
 800d018:	4619      	mov	r1, r3
 800d01a:	4819      	ldr	r0, [pc, #100]	@ (800d080 <prvAddCurrentTaskToDelayedList+0x98>)
 800d01c:	f7fe faf7 	bl	800b60e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d020:	e026      	b.n	800d070 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4413      	add	r3, r2
 800d028:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d02a:	4b14      	ldr	r3, [pc, #80]	@ (800d07c <prvAddCurrentTaskToDelayedList+0x94>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68ba      	ldr	r2, [r7, #8]
 800d030:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	429a      	cmp	r2, r3
 800d038:	d209      	bcs.n	800d04e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d03a:	4b12      	ldr	r3, [pc, #72]	@ (800d084 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	4b0f      	ldr	r3, [pc, #60]	@ (800d07c <prvAddCurrentTaskToDelayedList+0x94>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	3304      	adds	r3, #4
 800d044:	4619      	mov	r1, r3
 800d046:	4610      	mov	r0, r2
 800d048:	f7fe fb05 	bl	800b656 <vListInsert>
}
 800d04c:	e010      	b.n	800d070 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d04e:	4b0e      	ldr	r3, [pc, #56]	@ (800d088 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d050:	681a      	ldr	r2, [r3, #0]
 800d052:	4b0a      	ldr	r3, [pc, #40]	@ (800d07c <prvAddCurrentTaskToDelayedList+0x94>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3304      	adds	r3, #4
 800d058:	4619      	mov	r1, r3
 800d05a:	4610      	mov	r0, r2
 800d05c:	f7fe fafb 	bl	800b656 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d060:	4b0a      	ldr	r3, [pc, #40]	@ (800d08c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	429a      	cmp	r2, r3
 800d068:	d202      	bcs.n	800d070 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d06a:	4a08      	ldr	r2, [pc, #32]	@ (800d08c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	6013      	str	r3, [r2, #0]
}
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	24001744 	.word	0x24001744
 800d07c:	2400126c 	.word	0x2400126c
 800d080:	2400172c 	.word	0x2400172c
 800d084:	240016fc 	.word	0x240016fc
 800d088:	240016f8 	.word	0x240016f8
 800d08c:	24001760 	.word	0x24001760

0800d090 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b08a      	sub	sp, #40	@ 0x28
 800d094:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d096:	2300      	movs	r3, #0
 800d098:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d09a:	f000 fb13 	bl	800d6c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d09e:	4b1d      	ldr	r3, [pc, #116]	@ (800d114 <xTimerCreateTimerTask+0x84>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d021      	beq.n	800d0ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d0ae:	1d3a      	adds	r2, r7, #4
 800d0b0:	f107 0108 	add.w	r1, r7, #8
 800d0b4:	f107 030c 	add.w	r3, r7, #12
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fe fa61 	bl	800b580 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0be:	6879      	ldr	r1, [r7, #4]
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	9202      	str	r2, [sp, #8]
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	460a      	mov	r2, r1
 800d0d0:	4911      	ldr	r1, [pc, #68]	@ (800d118 <xTimerCreateTimerTask+0x88>)
 800d0d2:	4812      	ldr	r0, [pc, #72]	@ (800d11c <xTimerCreateTimerTask+0x8c>)
 800d0d4:	f7ff f858 	bl	800c188 <xTaskCreateStatic>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	4a11      	ldr	r2, [pc, #68]	@ (800d120 <xTimerCreateTimerTask+0x90>)
 800d0dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d0de:	4b10      	ldr	r3, [pc, #64]	@ (800d120 <xTimerCreateTimerTask+0x90>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10b      	bne.n	800d108 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	613b      	str	r3, [r7, #16]
}
 800d102:	bf00      	nop
 800d104:	bf00      	nop
 800d106:	e7fd      	b.n	800d104 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d108:	697b      	ldr	r3, [r7, #20]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	2400179c 	.word	0x2400179c
 800d118:	080113f4 	.word	0x080113f4
 800d11c:	0800d25d 	.word	0x0800d25d
 800d120:	240017a0 	.word	0x240017a0

0800d124 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b08a      	sub	sp, #40	@ 0x28
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d132:	2300      	movs	r3, #0
 800d134:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10b      	bne.n	800d154 <xTimerGenericCommand+0x30>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	623b      	str	r3, [r7, #32]
}
 800d14e:	bf00      	nop
 800d150:	bf00      	nop
 800d152:	e7fd      	b.n	800d150 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d154:	4b19      	ldr	r3, [pc, #100]	@ (800d1bc <xTimerGenericCommand+0x98>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d02a      	beq.n	800d1b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	2b05      	cmp	r3, #5
 800d16c:	dc18      	bgt.n	800d1a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d16e:	f7ff fead 	bl	800cecc <xTaskGetSchedulerState>
 800d172:	4603      	mov	r3, r0
 800d174:	2b02      	cmp	r3, #2
 800d176:	d109      	bne.n	800d18c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d178:	4b10      	ldr	r3, [pc, #64]	@ (800d1bc <xTimerGenericCommand+0x98>)
 800d17a:	6818      	ldr	r0, [r3, #0]
 800d17c:	f107 0110 	add.w	r1, r7, #16
 800d180:	2300      	movs	r3, #0
 800d182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d184:	f7fe fc10 	bl	800b9a8 <xQueueGenericSend>
 800d188:	6278      	str	r0, [r7, #36]	@ 0x24
 800d18a:	e012      	b.n	800d1b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d18c:	4b0b      	ldr	r3, [pc, #44]	@ (800d1bc <xTimerGenericCommand+0x98>)
 800d18e:	6818      	ldr	r0, [r3, #0]
 800d190:	f107 0110 	add.w	r1, r7, #16
 800d194:	2300      	movs	r3, #0
 800d196:	2200      	movs	r2, #0
 800d198:	f7fe fc06 	bl	800b9a8 <xQueueGenericSend>
 800d19c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d19e:	e008      	b.n	800d1b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1a0:	4b06      	ldr	r3, [pc, #24]	@ (800d1bc <xTimerGenericCommand+0x98>)
 800d1a2:	6818      	ldr	r0, [r3, #0]
 800d1a4:	f107 0110 	add.w	r1, r7, #16
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	f7fe fcfe 	bl	800bbac <xQueueGenericSendFromISR>
 800d1b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3728      	adds	r7, #40	@ 0x28
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	2400179c 	.word	0x2400179c

0800d1c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af02      	add	r7, sp, #8
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ca:	4b23      	ldr	r3, [pc, #140]	@ (800d258 <prvProcessExpiredTimer+0x98>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fe fa75 	bl	800b6c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d1e4:	f003 0304 	and.w	r3, r3, #4
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d023      	beq.n	800d234 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	699a      	ldr	r2, [r3, #24]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	18d1      	adds	r1, r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	683a      	ldr	r2, [r7, #0]
 800d1f8:	6978      	ldr	r0, [r7, #20]
 800d1fa:	f000 f8d5 	bl	800d3a8 <prvInsertTimerInActiveList>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	d020      	beq.n	800d246 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d204:	2300      	movs	r3, #0
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	2300      	movs	r3, #0
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	2100      	movs	r1, #0
 800d20e:	6978      	ldr	r0, [r7, #20]
 800d210:	f7ff ff88 	bl	800d124 <xTimerGenericCommand>
 800d214:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d114      	bne.n	800d246 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	60fb      	str	r3, [r7, #12]
}
 800d22e:	bf00      	nop
 800d230:	bf00      	nop
 800d232:	e7fd      	b.n	800d230 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d23a:	f023 0301 	bic.w	r3, r3, #1
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	6a1b      	ldr	r3, [r3, #32]
 800d24a:	6978      	ldr	r0, [r7, #20]
 800d24c:	4798      	blx	r3
}
 800d24e:	bf00      	nop
 800d250:	3718      	adds	r7, #24
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	24001794 	.word	0x24001794

0800d25c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d264:	f107 0308 	add.w	r3, r7, #8
 800d268:	4618      	mov	r0, r3
 800d26a:	f000 f859 	bl	800d320 <prvGetNextExpireTime>
 800d26e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	4619      	mov	r1, r3
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f000 f805 	bl	800d284 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d27a:	f000 f8d7 	bl	800d42c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d27e:	bf00      	nop
 800d280:	e7f0      	b.n	800d264 <prvTimerTask+0x8>
	...

0800d284 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d28e:	f7ff fa29 	bl	800c6e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d292:	f107 0308 	add.w	r3, r7, #8
 800d296:	4618      	mov	r0, r3
 800d298:	f000 f866 	bl	800d368 <prvSampleTimeNow>
 800d29c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d130      	bne.n	800d306 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10a      	bne.n	800d2c0 <prvProcessTimerOrBlockTask+0x3c>
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d806      	bhi.n	800d2c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d2b2:	f7ff fa25 	bl	800c700 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d2b6:	68f9      	ldr	r1, [r7, #12]
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7ff ff81 	bl	800d1c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d2be:	e024      	b.n	800d30a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d008      	beq.n	800d2d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2c6:	4b13      	ldr	r3, [pc, #76]	@ (800d314 <prvProcessTimerOrBlockTask+0x90>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <prvProcessTimerOrBlockTask+0x50>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e000      	b.n	800d2d6 <prvProcessTimerOrBlockTask+0x52>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800d318 <prvProcessTimerOrBlockTask+0x94>)
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	f7fe ff1b 	bl	800c120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d2ea:	f7ff fa09 	bl	800c700 <xTaskResumeAll>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10a      	bne.n	800d30a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d2f4:	4b09      	ldr	r3, [pc, #36]	@ (800d31c <prvProcessTimerOrBlockTask+0x98>)
 800d2f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2fa:	601a      	str	r2, [r3, #0]
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	f3bf 8f6f 	isb	sy
}
 800d304:	e001      	b.n	800d30a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d306:	f7ff f9fb 	bl	800c700 <xTaskResumeAll>
}
 800d30a:	bf00      	nop
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	24001798 	.word	0x24001798
 800d318:	2400179c 	.word	0x2400179c
 800d31c:	e000ed04 	.word	0xe000ed04

0800d320 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d328:	4b0e      	ldr	r3, [pc, #56]	@ (800d364 <prvGetNextExpireTime+0x44>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d101      	bne.n	800d336 <prvGetNextExpireTime+0x16>
 800d332:	2201      	movs	r2, #1
 800d334:	e000      	b.n	800d338 <prvGetNextExpireTime+0x18>
 800d336:	2200      	movs	r2, #0
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d105      	bne.n	800d350 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d344:	4b07      	ldr	r3, [pc, #28]	@ (800d364 <prvGetNextExpireTime+0x44>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	60fb      	str	r3, [r7, #12]
 800d34e:	e001      	b.n	800d354 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d350:	2300      	movs	r3, #0
 800d352:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d354:	68fb      	ldr	r3, [r7, #12]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3714      	adds	r7, #20
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	24001794 	.word	0x24001794

0800d368 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d370:	f7ff fa64 	bl	800c83c <xTaskGetTickCount>
 800d374:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d376:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a4 <prvSampleTimeNow+0x3c>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d205      	bcs.n	800d38c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d380:	f000 f93a 	bl	800d5f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	e002      	b.n	800d392 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d392:	4a04      	ldr	r2, [pc, #16]	@ (800d3a4 <prvSampleTimeNow+0x3c>)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d398:	68fb      	ldr	r3, [r7, #12]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	240017a4 	.word	0x240017a4

0800d3a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d812      	bhi.n	800d3f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	1ad2      	subs	r2, r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	699b      	ldr	r3, [r3, #24]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d302      	bcc.n	800d3e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	617b      	str	r3, [r7, #20]
 800d3e0:	e01b      	b.n	800d41a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d3e2:	4b10      	ldr	r3, [pc, #64]	@ (800d424 <prvInsertTimerInActiveList+0x7c>)
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7fe f932 	bl	800b656 <vListInsert>
 800d3f2:	e012      	b.n	800d41a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d206      	bcs.n	800d40a <prvInsertTimerInActiveList+0x62>
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	429a      	cmp	r2, r3
 800d402:	d302      	bcc.n	800d40a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d404:	2301      	movs	r3, #1
 800d406:	617b      	str	r3, [r7, #20]
 800d408:	e007      	b.n	800d41a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d40a:	4b07      	ldr	r3, [pc, #28]	@ (800d428 <prvInsertTimerInActiveList+0x80>)
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	3304      	adds	r3, #4
 800d412:	4619      	mov	r1, r3
 800d414:	4610      	mov	r0, r2
 800d416:	f7fe f91e 	bl	800b656 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d41a:	697b      	ldr	r3, [r7, #20]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3718      	adds	r7, #24
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	24001798 	.word	0x24001798
 800d428:	24001794 	.word	0x24001794

0800d42c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b08e      	sub	sp, #56	@ 0x38
 800d430:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d432:	e0ce      	b.n	800d5d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	da19      	bge.n	800d46e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d43a:	1d3b      	adds	r3, r7, #4
 800d43c:	3304      	adds	r3, #4
 800d43e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10b      	bne.n	800d45e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	61fb      	str	r3, [r7, #28]
}
 800d458:	bf00      	nop
 800d45a:	bf00      	nop
 800d45c:	e7fd      	b.n	800d45a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d464:	6850      	ldr	r0, [r2, #4]
 800d466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d468:	6892      	ldr	r2, [r2, #8]
 800d46a:	4611      	mov	r1, r2
 800d46c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	f2c0 80ae 	blt.w	800d5d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d47c:	695b      	ldr	r3, [r3, #20]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d004      	beq.n	800d48c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d484:	3304      	adds	r3, #4
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe f91e 	bl	800b6c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d48c:	463b      	mov	r3, r7
 800d48e:	4618      	mov	r0, r3
 800d490:	f7ff ff6a 	bl	800d368 <prvSampleTimeNow>
 800d494:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b09      	cmp	r3, #9
 800d49a:	f200 8097 	bhi.w	800d5cc <prvProcessReceivedCommands+0x1a0>
 800d49e:	a201      	add	r2, pc, #4	@ (adr r2, 800d4a4 <prvProcessReceivedCommands+0x78>)
 800d4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4a4:	0800d4cd 	.word	0x0800d4cd
 800d4a8:	0800d4cd 	.word	0x0800d4cd
 800d4ac:	0800d4cd 	.word	0x0800d4cd
 800d4b0:	0800d543 	.word	0x0800d543
 800d4b4:	0800d557 	.word	0x0800d557
 800d4b8:	0800d5a3 	.word	0x0800d5a3
 800d4bc:	0800d4cd 	.word	0x0800d4cd
 800d4c0:	0800d4cd 	.word	0x0800d4cd
 800d4c4:	0800d543 	.word	0x0800d543
 800d4c8:	0800d557 	.word	0x0800d557
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4d2:	f043 0301 	orr.w	r3, r3, #1
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4de:	68ba      	ldr	r2, [r7, #8]
 800d4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4e2:	699b      	ldr	r3, [r3, #24]
 800d4e4:	18d1      	adds	r1, r2, r3
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4ec:	f7ff ff5c 	bl	800d3a8 <prvInsertTimerInActiveList>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d06c      	beq.n	800d5d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f8:	6a1b      	ldr	r3, [r3, #32]
 800d4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d4fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d504:	f003 0304 	and.w	r3, r3, #4
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d061      	beq.n	800d5d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	441a      	add	r2, r3
 800d514:	2300      	movs	r3, #0
 800d516:	9300      	str	r3, [sp, #0]
 800d518:	2300      	movs	r3, #0
 800d51a:	2100      	movs	r1, #0
 800d51c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d51e:	f7ff fe01 	bl	800d124 <xTimerGenericCommand>
 800d522:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d524:	6a3b      	ldr	r3, [r7, #32]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d152      	bne.n	800d5d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52e:	f383 8811 	msr	BASEPRI, r3
 800d532:	f3bf 8f6f 	isb	sy
 800d536:	f3bf 8f4f 	dsb	sy
 800d53a:	61bb      	str	r3, [r7, #24]
}
 800d53c:	bf00      	nop
 800d53e:	bf00      	nop
 800d540:	e7fd      	b.n	800d53e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d548:	f023 0301 	bic.w	r3, r3, #1
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d550:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d554:	e03d      	b.n	800d5d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d558:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d55c:	f043 0301 	orr.w	r3, r3, #1
 800d560:	b2da      	uxtb	r2, r3
 800d562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d564:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d56c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10b      	bne.n	800d58e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	617b      	str	r3, [r7, #20]
}
 800d588:	bf00      	nop
 800d58a:	bf00      	nop
 800d58c:	e7fd      	b.n	800d58a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d590:	699a      	ldr	r2, [r3, #24]
 800d592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d594:	18d1      	adds	r1, r2, r3
 800d596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d59a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d59c:	f7ff ff04 	bl	800d3a8 <prvInsertTimerInActiveList>
					break;
 800d5a0:	e017      	b.n	800d5d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5a8:	f003 0302 	and.w	r3, r3, #2
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d103      	bne.n	800d5b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d5b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5b2:	f000 fbe9 	bl	800dd88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5b6:	e00c      	b.n	800d5d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5be:	f023 0301 	bic.w	r3, r3, #1
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d5ca:	e002      	b.n	800d5d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d5cc:	bf00      	nop
 800d5ce:	e000      	b.n	800d5d2 <prvProcessReceivedCommands+0x1a6>
					break;
 800d5d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5d2:	4b08      	ldr	r3, [pc, #32]	@ (800d5f4 <prvProcessReceivedCommands+0x1c8>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	1d39      	adds	r1, r7, #4
 800d5d8:	2200      	movs	r2, #0
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fe fb84 	bl	800bce8 <xQueueReceive>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f47f af26 	bne.w	800d434 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d5e8:	bf00      	nop
 800d5ea:	bf00      	nop
 800d5ec:	3730      	adds	r7, #48	@ 0x30
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	2400179c 	.word	0x2400179c

0800d5f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b088      	sub	sp, #32
 800d5fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5fe:	e049      	b.n	800d694 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d600:	4b2e      	ldr	r3, [pc, #184]	@ (800d6bc <prvSwitchTimerLists+0xc4>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d60a:	4b2c      	ldr	r3, [pc, #176]	@ (800d6bc <prvSwitchTimerLists+0xc4>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	3304      	adds	r3, #4
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe f855 	bl	800b6c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d62c:	f003 0304 	and.w	r3, r3, #4
 800d630:	2b00      	cmp	r3, #0
 800d632:	d02f      	beq.n	800d694 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	699b      	ldr	r3, [r3, #24]
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	4413      	add	r3, r2
 800d63c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d63e:	68ba      	ldr	r2, [r7, #8]
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	429a      	cmp	r2, r3
 800d644:	d90e      	bls.n	800d664 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d652:	4b1a      	ldr	r3, [pc, #104]	@ (800d6bc <prvSwitchTimerLists+0xc4>)
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3304      	adds	r3, #4
 800d65a:	4619      	mov	r1, r3
 800d65c:	4610      	mov	r0, r2
 800d65e:	f7fd fffa 	bl	800b656 <vListInsert>
 800d662:	e017      	b.n	800d694 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d664:	2300      	movs	r3, #0
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	2300      	movs	r3, #0
 800d66a:	693a      	ldr	r2, [r7, #16]
 800d66c:	2100      	movs	r1, #0
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f7ff fd58 	bl	800d124 <xTimerGenericCommand>
 800d674:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10b      	bne.n	800d694 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	603b      	str	r3, [r7, #0]
}
 800d68e:	bf00      	nop
 800d690:	bf00      	nop
 800d692:	e7fd      	b.n	800d690 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d694:	4b09      	ldr	r3, [pc, #36]	@ (800d6bc <prvSwitchTimerLists+0xc4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1b0      	bne.n	800d600 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d69e:	4b07      	ldr	r3, [pc, #28]	@ (800d6bc <prvSwitchTimerLists+0xc4>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d6a4:	4b06      	ldr	r3, [pc, #24]	@ (800d6c0 <prvSwitchTimerLists+0xc8>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a04      	ldr	r2, [pc, #16]	@ (800d6bc <prvSwitchTimerLists+0xc4>)
 800d6aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d6ac:	4a04      	ldr	r2, [pc, #16]	@ (800d6c0 <prvSwitchTimerLists+0xc8>)
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	6013      	str	r3, [r2, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	3718      	adds	r7, #24
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	24001794 	.word	0x24001794
 800d6c0:	24001798 	.word	0x24001798

0800d6c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6ca:	f000 f96d 	bl	800d9a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6ce:	4b15      	ldr	r3, [pc, #84]	@ (800d724 <prvCheckForValidListAndQueue+0x60>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d120      	bne.n	800d718 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6d6:	4814      	ldr	r0, [pc, #80]	@ (800d728 <prvCheckForValidListAndQueue+0x64>)
 800d6d8:	f7fd ff6c 	bl	800b5b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d6dc:	4813      	ldr	r0, [pc, #76]	@ (800d72c <prvCheckForValidListAndQueue+0x68>)
 800d6de:	f7fd ff69 	bl	800b5b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d6e2:	4b13      	ldr	r3, [pc, #76]	@ (800d730 <prvCheckForValidListAndQueue+0x6c>)
 800d6e4:	4a10      	ldr	r2, [pc, #64]	@ (800d728 <prvCheckForValidListAndQueue+0x64>)
 800d6e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d6e8:	4b12      	ldr	r3, [pc, #72]	@ (800d734 <prvCheckForValidListAndQueue+0x70>)
 800d6ea:	4a10      	ldr	r2, [pc, #64]	@ (800d72c <prvCheckForValidListAndQueue+0x68>)
 800d6ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	4b11      	ldr	r3, [pc, #68]	@ (800d738 <prvCheckForValidListAndQueue+0x74>)
 800d6f4:	4a11      	ldr	r2, [pc, #68]	@ (800d73c <prvCheckForValidListAndQueue+0x78>)
 800d6f6:	2110      	movs	r1, #16
 800d6f8:	200a      	movs	r0, #10
 800d6fa:	f7fe f879 	bl	800b7f0 <xQueueGenericCreateStatic>
 800d6fe:	4603      	mov	r3, r0
 800d700:	4a08      	ldr	r2, [pc, #32]	@ (800d724 <prvCheckForValidListAndQueue+0x60>)
 800d702:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d704:	4b07      	ldr	r3, [pc, #28]	@ (800d724 <prvCheckForValidListAndQueue+0x60>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d005      	beq.n	800d718 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d70c:	4b05      	ldr	r3, [pc, #20]	@ (800d724 <prvCheckForValidListAndQueue+0x60>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	490b      	ldr	r1, [pc, #44]	@ (800d740 <prvCheckForValidListAndQueue+0x7c>)
 800d712:	4618      	mov	r0, r3
 800d714:	f7fe fcda 	bl	800c0cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d718:	f000 f978 	bl	800da0c <vPortExitCritical>
}
 800d71c:	bf00      	nop
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	2400179c 	.word	0x2400179c
 800d728:	2400176c 	.word	0x2400176c
 800d72c:	24001780 	.word	0x24001780
 800d730:	24001794 	.word	0x24001794
 800d734:	24001798 	.word	0x24001798
 800d738:	24001848 	.word	0x24001848
 800d73c:	240017a8 	.word	0x240017a8
 800d740:	080113fc 	.word	0x080113fc

0800d744 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	3b04      	subs	r3, #4
 800d754:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d75c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	3b04      	subs	r3, #4
 800d762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	f023 0201 	bic.w	r2, r3, #1
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3b04      	subs	r3, #4
 800d772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d774:	4a0c      	ldr	r2, [pc, #48]	@ (800d7a8 <pxPortInitialiseStack+0x64>)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	3b14      	subs	r3, #20
 800d77e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3b04      	subs	r3, #4
 800d78a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f06f 0202 	mvn.w	r2, #2
 800d792:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3b20      	subs	r3, #32
 800d798:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d79a:	68fb      	ldr	r3, [r7, #12]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3714      	adds	r7, #20
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	0800d7ad 	.word	0x0800d7ad

0800d7ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7b6:	4b13      	ldr	r3, [pc, #76]	@ (800d804 <prvTaskExitError+0x58>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7be:	d00b      	beq.n	800d7d8 <prvTaskExitError+0x2c>
	__asm volatile
 800d7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7c4:	f383 8811 	msr	BASEPRI, r3
 800d7c8:	f3bf 8f6f 	isb	sy
 800d7cc:	f3bf 8f4f 	dsb	sy
 800d7d0:	60fb      	str	r3, [r7, #12]
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	e7fd      	b.n	800d7d4 <prvTaskExitError+0x28>
	__asm volatile
 800d7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	60bb      	str	r3, [r7, #8]
}
 800d7ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7ec:	bf00      	nop
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d0fc      	beq.n	800d7ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	2400007c 	.word	0x2400007c
	...

0800d810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d810:	4b07      	ldr	r3, [pc, #28]	@ (800d830 <pxCurrentTCBConst2>)
 800d812:	6819      	ldr	r1, [r3, #0]
 800d814:	6808      	ldr	r0, [r1, #0]
 800d816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81a:	f380 8809 	msr	PSP, r0
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f04f 0000 	mov.w	r0, #0
 800d826:	f380 8811 	msr	BASEPRI, r0
 800d82a:	4770      	bx	lr
 800d82c:	f3af 8000 	nop.w

0800d830 <pxCurrentTCBConst2>:
 800d830:	2400126c 	.word	0x2400126c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop

0800d838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d838:	4808      	ldr	r0, [pc, #32]	@ (800d85c <prvPortStartFirstTask+0x24>)
 800d83a:	6800      	ldr	r0, [r0, #0]
 800d83c:	6800      	ldr	r0, [r0, #0]
 800d83e:	f380 8808 	msr	MSP, r0
 800d842:	f04f 0000 	mov.w	r0, #0
 800d846:	f380 8814 	msr	CONTROL, r0
 800d84a:	b662      	cpsie	i
 800d84c:	b661      	cpsie	f
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	df00      	svc	0
 800d858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d85a:	bf00      	nop
 800d85c:	e000ed08 	.word	0xe000ed08

0800d860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d866:	4b47      	ldr	r3, [pc, #284]	@ (800d984 <xPortStartScheduler+0x124>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a47      	ldr	r2, [pc, #284]	@ (800d988 <xPortStartScheduler+0x128>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d10b      	bne.n	800d888 <xPortStartScheduler+0x28>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	60fb      	str	r3, [r7, #12]
}
 800d882:	bf00      	nop
 800d884:	bf00      	nop
 800d886:	e7fd      	b.n	800d884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d888:	4b3e      	ldr	r3, [pc, #248]	@ (800d984 <xPortStartScheduler+0x124>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a3f      	ldr	r2, [pc, #252]	@ (800d98c <xPortStartScheduler+0x12c>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d10b      	bne.n	800d8aa <xPortStartScheduler+0x4a>
	__asm volatile
 800d892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d896:	f383 8811 	msr	BASEPRI, r3
 800d89a:	f3bf 8f6f 	isb	sy
 800d89e:	f3bf 8f4f 	dsb	sy
 800d8a2:	613b      	str	r3, [r7, #16]
}
 800d8a4:	bf00      	nop
 800d8a6:	bf00      	nop
 800d8a8:	e7fd      	b.n	800d8a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d8aa:	4b39      	ldr	r3, [pc, #228]	@ (800d990 <xPortStartScheduler+0x130>)
 800d8ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	22ff      	movs	r2, #255	@ 0xff
 800d8ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	4b31      	ldr	r3, [pc, #196]	@ (800d994 <xPortStartScheduler+0x134>)
 800d8d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d8d2:	4b31      	ldr	r3, [pc, #196]	@ (800d998 <xPortStartScheduler+0x138>)
 800d8d4:	2207      	movs	r2, #7
 800d8d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8d8:	e009      	b.n	800d8ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d8da:	4b2f      	ldr	r3, [pc, #188]	@ (800d998 <xPortStartScheduler+0x138>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	4a2d      	ldr	r2, [pc, #180]	@ (800d998 <xPortStartScheduler+0x138>)
 800d8e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8e4:	78fb      	ldrb	r3, [r7, #3]
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	005b      	lsls	r3, r3, #1
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8ee:	78fb      	ldrb	r3, [r7, #3]
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8f6:	2b80      	cmp	r3, #128	@ 0x80
 800d8f8:	d0ef      	beq.n	800d8da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8fa:	4b27      	ldr	r3, [pc, #156]	@ (800d998 <xPortStartScheduler+0x138>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f1c3 0307 	rsb	r3, r3, #7
 800d902:	2b04      	cmp	r3, #4
 800d904:	d00b      	beq.n	800d91e <xPortStartScheduler+0xbe>
	__asm volatile
 800d906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	60bb      	str	r3, [r7, #8]
}
 800d918:	bf00      	nop
 800d91a:	bf00      	nop
 800d91c:	e7fd      	b.n	800d91a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d91e:	4b1e      	ldr	r3, [pc, #120]	@ (800d998 <xPortStartScheduler+0x138>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	021b      	lsls	r3, r3, #8
 800d924:	4a1c      	ldr	r2, [pc, #112]	@ (800d998 <xPortStartScheduler+0x138>)
 800d926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d928:	4b1b      	ldr	r3, [pc, #108]	@ (800d998 <xPortStartScheduler+0x138>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d930:	4a19      	ldr	r2, [pc, #100]	@ (800d998 <xPortStartScheduler+0x138>)
 800d932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	b2da      	uxtb	r2, r3
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d93c:	4b17      	ldr	r3, [pc, #92]	@ (800d99c <xPortStartScheduler+0x13c>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a16      	ldr	r2, [pc, #88]	@ (800d99c <xPortStartScheduler+0x13c>)
 800d942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d948:	4b14      	ldr	r3, [pc, #80]	@ (800d99c <xPortStartScheduler+0x13c>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a13      	ldr	r2, [pc, #76]	@ (800d99c <xPortStartScheduler+0x13c>)
 800d94e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d954:	f000 f8da 	bl	800db0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d958:	4b11      	ldr	r3, [pc, #68]	@ (800d9a0 <xPortStartScheduler+0x140>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d95e:	f000 f8f9 	bl	800db54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d962:	4b10      	ldr	r3, [pc, #64]	@ (800d9a4 <xPortStartScheduler+0x144>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a0f      	ldr	r2, [pc, #60]	@ (800d9a4 <xPortStartScheduler+0x144>)
 800d968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d96c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d96e:	f7ff ff63 	bl	800d838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d972:	f7ff f82d 	bl	800c9d0 <vTaskSwitchContext>
	prvTaskExitError();
 800d976:	f7ff ff19 	bl	800d7ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3718      	adds	r7, #24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	e000ed00 	.word	0xe000ed00
 800d988:	410fc271 	.word	0x410fc271
 800d98c:	410fc270 	.word	0x410fc270
 800d990:	e000e400 	.word	0xe000e400
 800d994:	24001898 	.word	0x24001898
 800d998:	2400189c 	.word	0x2400189c
 800d99c:	e000ed20 	.word	0xe000ed20
 800d9a0:	2400007c 	.word	0x2400007c
 800d9a4:	e000ef34 	.word	0xe000ef34

0800d9a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	607b      	str	r3, [r7, #4]
}
 800d9c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9c2:	4b10      	ldr	r3, [pc, #64]	@ (800da04 <vPortEnterCritical+0x5c>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	4a0e      	ldr	r2, [pc, #56]	@ (800da04 <vPortEnterCritical+0x5c>)
 800d9ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9cc:	4b0d      	ldr	r3, [pc, #52]	@ (800da04 <vPortEnterCritical+0x5c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d110      	bne.n	800d9f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800da08 <vPortEnterCritical+0x60>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00b      	beq.n	800d9f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	603b      	str	r3, [r7, #0]
}
 800d9f0:	bf00      	nop
 800d9f2:	bf00      	nop
 800d9f4:	e7fd      	b.n	800d9f2 <vPortEnterCritical+0x4a>
	}
}
 800d9f6:	bf00      	nop
 800d9f8:	370c      	adds	r7, #12
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	2400007c 	.word	0x2400007c
 800da08:	e000ed04 	.word	0xe000ed04

0800da0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da0c:	b480      	push	{r7}
 800da0e:	b083      	sub	sp, #12
 800da10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da12:	4b12      	ldr	r3, [pc, #72]	@ (800da5c <vPortExitCritical+0x50>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10b      	bne.n	800da32 <vPortExitCritical+0x26>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	607b      	str	r3, [r7, #4]
}
 800da2c:	bf00      	nop
 800da2e:	bf00      	nop
 800da30:	e7fd      	b.n	800da2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800da32:	4b0a      	ldr	r3, [pc, #40]	@ (800da5c <vPortExitCritical+0x50>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	3b01      	subs	r3, #1
 800da38:	4a08      	ldr	r2, [pc, #32]	@ (800da5c <vPortExitCritical+0x50>)
 800da3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da3c:	4b07      	ldr	r3, [pc, #28]	@ (800da5c <vPortExitCritical+0x50>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d105      	bne.n	800da50 <vPortExitCritical+0x44>
 800da44:	2300      	movs	r3, #0
 800da46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	f383 8811 	msr	BASEPRI, r3
}
 800da4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da50:	bf00      	nop
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	2400007c 	.word	0x2400007c

0800da60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da60:	f3ef 8009 	mrs	r0, PSP
 800da64:	f3bf 8f6f 	isb	sy
 800da68:	4b15      	ldr	r3, [pc, #84]	@ (800dac0 <pxCurrentTCBConst>)
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	f01e 0f10 	tst.w	lr, #16
 800da70:	bf08      	it	eq
 800da72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7a:	6010      	str	r0, [r2, #0]
 800da7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800da84:	f380 8811 	msr	BASEPRI, r0
 800da88:	f3bf 8f4f 	dsb	sy
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f7fe ff9e 	bl	800c9d0 <vTaskSwitchContext>
 800da94:	f04f 0000 	mov.w	r0, #0
 800da98:	f380 8811 	msr	BASEPRI, r0
 800da9c:	bc09      	pop	{r0, r3}
 800da9e:	6819      	ldr	r1, [r3, #0]
 800daa0:	6808      	ldr	r0, [r1, #0]
 800daa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa6:	f01e 0f10 	tst.w	lr, #16
 800daaa:	bf08      	it	eq
 800daac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dab0:	f380 8809 	msr	PSP, r0
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	f3af 8000 	nop.w

0800dac0 <pxCurrentTCBConst>:
 800dac0:	2400126c 	.word	0x2400126c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dac4:	bf00      	nop
 800dac6:	bf00      	nop

0800dac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
	__asm volatile
 800dace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad2:	f383 8811 	msr	BASEPRI, r3
 800dad6:	f3bf 8f6f 	isb	sy
 800dada:	f3bf 8f4f 	dsb	sy
 800dade:	607b      	str	r3, [r7, #4]
}
 800dae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dae2:	f7fe febb 	bl	800c85c <xTaskIncrementTick>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d003      	beq.n	800daf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800daec:	4b06      	ldr	r3, [pc, #24]	@ (800db08 <xPortSysTickHandler+0x40>)
 800daee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	2300      	movs	r3, #0
 800daf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	f383 8811 	msr	BASEPRI, r3
}
 800dafe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800db00:	bf00      	nop
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	e000ed04 	.word	0xe000ed04

0800db0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db0c:	b480      	push	{r7}
 800db0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db10:	4b0b      	ldr	r3, [pc, #44]	@ (800db40 <vPortSetupTimerInterrupt+0x34>)
 800db12:	2200      	movs	r2, #0
 800db14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db16:	4b0b      	ldr	r3, [pc, #44]	@ (800db44 <vPortSetupTimerInterrupt+0x38>)
 800db18:	2200      	movs	r2, #0
 800db1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db1c:	4b0a      	ldr	r3, [pc, #40]	@ (800db48 <vPortSetupTimerInterrupt+0x3c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a0a      	ldr	r2, [pc, #40]	@ (800db4c <vPortSetupTimerInterrupt+0x40>)
 800db22:	fba2 2303 	umull	r2, r3, r2, r3
 800db26:	095b      	lsrs	r3, r3, #5
 800db28:	4a09      	ldr	r2, [pc, #36]	@ (800db50 <vPortSetupTimerInterrupt+0x44>)
 800db2a:	3b01      	subs	r3, #1
 800db2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db2e:	4b04      	ldr	r3, [pc, #16]	@ (800db40 <vPortSetupTimerInterrupt+0x34>)
 800db30:	2207      	movs	r2, #7
 800db32:	601a      	str	r2, [r3, #0]
}
 800db34:	bf00      	nop
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	e000e010 	.word	0xe000e010
 800db44:	e000e018 	.word	0xe000e018
 800db48:	24000054 	.word	0x24000054
 800db4c:	10624dd3 	.word	0x10624dd3
 800db50:	e000e014 	.word	0xe000e014

0800db54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800db64 <vPortEnableVFP+0x10>
 800db58:	6801      	ldr	r1, [r0, #0]
 800db5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800db5e:	6001      	str	r1, [r0, #0]
 800db60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db62:	bf00      	nop
 800db64:	e000ed88 	.word	0xe000ed88

0800db68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db6e:	f3ef 8305 	mrs	r3, IPSR
 800db72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b0f      	cmp	r3, #15
 800db78:	d915      	bls.n	800dba6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db7a:	4a18      	ldr	r2, [pc, #96]	@ (800dbdc <vPortValidateInterruptPriority+0x74>)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	4413      	add	r3, r2
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db84:	4b16      	ldr	r3, [pc, #88]	@ (800dbe0 <vPortValidateInterruptPriority+0x78>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	7afa      	ldrb	r2, [r7, #11]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d20b      	bcs.n	800dba6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800db8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db92:	f383 8811 	msr	BASEPRI, r3
 800db96:	f3bf 8f6f 	isb	sy
 800db9a:	f3bf 8f4f 	dsb	sy
 800db9e:	607b      	str	r3, [r7, #4]
}
 800dba0:	bf00      	nop
 800dba2:	bf00      	nop
 800dba4:	e7fd      	b.n	800dba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dba6:	4b0f      	ldr	r3, [pc, #60]	@ (800dbe4 <vPortValidateInterruptPriority+0x7c>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dbae:	4b0e      	ldr	r3, [pc, #56]	@ (800dbe8 <vPortValidateInterruptPriority+0x80>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d90b      	bls.n	800dbce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbba:	f383 8811 	msr	BASEPRI, r3
 800dbbe:	f3bf 8f6f 	isb	sy
 800dbc2:	f3bf 8f4f 	dsb	sy
 800dbc6:	603b      	str	r3, [r7, #0]
}
 800dbc8:	bf00      	nop
 800dbca:	bf00      	nop
 800dbcc:	e7fd      	b.n	800dbca <vPortValidateInterruptPriority+0x62>
	}
 800dbce:	bf00      	nop
 800dbd0:	3714      	adds	r7, #20
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	e000e3f0 	.word	0xe000e3f0
 800dbe0:	24001898 	.word	0x24001898
 800dbe4:	e000ed0c 	.word	0xe000ed0c
 800dbe8:	2400189c 	.word	0x2400189c

0800dbec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b08a      	sub	sp, #40	@ 0x28
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbf8:	f7fe fd74 	bl	800c6e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbfc:	4b5c      	ldr	r3, [pc, #368]	@ (800dd70 <pvPortMalloc+0x184>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d101      	bne.n	800dc08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dc04:	f000 f924 	bl	800de50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dc08:	4b5a      	ldr	r3, [pc, #360]	@ (800dd74 <pvPortMalloc+0x188>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	4013      	ands	r3, r2
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f040 8095 	bne.w	800dd40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d01e      	beq.n	800dc5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dc1c:	2208      	movs	r2, #8
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4413      	add	r3, r2
 800dc22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f003 0307 	and.w	r3, r3, #7
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d015      	beq.n	800dc5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f023 0307 	bic.w	r3, r3, #7
 800dc34:	3308      	adds	r3, #8
 800dc36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f003 0307 	and.w	r3, r3, #7
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00b      	beq.n	800dc5a <pvPortMalloc+0x6e>
	__asm volatile
 800dc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc46:	f383 8811 	msr	BASEPRI, r3
 800dc4a:	f3bf 8f6f 	isb	sy
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	617b      	str	r3, [r7, #20]
}
 800dc54:	bf00      	nop
 800dc56:	bf00      	nop
 800dc58:	e7fd      	b.n	800dc56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d06f      	beq.n	800dd40 <pvPortMalloc+0x154>
 800dc60:	4b45      	ldr	r3, [pc, #276]	@ (800dd78 <pvPortMalloc+0x18c>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	687a      	ldr	r2, [r7, #4]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d86a      	bhi.n	800dd40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc6a:	4b44      	ldr	r3, [pc, #272]	@ (800dd7c <pvPortMalloc+0x190>)
 800dc6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc6e:	4b43      	ldr	r3, [pc, #268]	@ (800dd7c <pvPortMalloc+0x190>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc74:	e004      	b.n	800dc80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d903      	bls.n	800dc92 <pvPortMalloc+0xa6>
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1f1      	bne.n	800dc76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc92:	4b37      	ldr	r3, [pc, #220]	@ (800dd70 <pvPortMalloc+0x184>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d051      	beq.n	800dd40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2208      	movs	r2, #8
 800dca2:	4413      	add	r3, r2
 800dca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	6a3b      	ldr	r3, [r7, #32]
 800dcac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb0:	685a      	ldr	r2, [r3, #4]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	1ad2      	subs	r2, r2, r3
 800dcb6:	2308      	movs	r3, #8
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d920      	bls.n	800dd00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dcbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	f003 0307 	and.w	r3, r3, #7
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00b      	beq.n	800dce8 <pvPortMalloc+0xfc>
	__asm volatile
 800dcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	613b      	str	r3, [r7, #16]
}
 800dce2:	bf00      	nop
 800dce4:	bf00      	nop
 800dce6:	e7fd      	b.n	800dce4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcea:	685a      	ldr	r2, [r3, #4]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	1ad2      	subs	r2, r2, r3
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcfa:	69b8      	ldr	r0, [r7, #24]
 800dcfc:	f000 f90a 	bl	800df14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dd00:	4b1d      	ldr	r3, [pc, #116]	@ (800dd78 <pvPortMalloc+0x18c>)
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	4a1b      	ldr	r2, [pc, #108]	@ (800dd78 <pvPortMalloc+0x18c>)
 800dd0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dd0e:	4b1a      	ldr	r3, [pc, #104]	@ (800dd78 <pvPortMalloc+0x18c>)
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	4b1b      	ldr	r3, [pc, #108]	@ (800dd80 <pvPortMalloc+0x194>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d203      	bcs.n	800dd22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd1a:	4b17      	ldr	r3, [pc, #92]	@ (800dd78 <pvPortMalloc+0x18c>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a18      	ldr	r2, [pc, #96]	@ (800dd80 <pvPortMalloc+0x194>)
 800dd20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd24:	685a      	ldr	r2, [r3, #4]
 800dd26:	4b13      	ldr	r3, [pc, #76]	@ (800dd74 <pvPortMalloc+0x188>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd32:	2200      	movs	r2, #0
 800dd34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dd36:	4b13      	ldr	r3, [pc, #76]	@ (800dd84 <pvPortMalloc+0x198>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	4a11      	ldr	r2, [pc, #68]	@ (800dd84 <pvPortMalloc+0x198>)
 800dd3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd40:	f7fe fcde 	bl	800c700 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	f003 0307 	and.w	r3, r3, #7
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00b      	beq.n	800dd66 <pvPortMalloc+0x17a>
	__asm volatile
 800dd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	60fb      	str	r3, [r7, #12]
}
 800dd60:	bf00      	nop
 800dd62:	bf00      	nop
 800dd64:	e7fd      	b.n	800dd62 <pvPortMalloc+0x176>
	return pvReturn;
 800dd66:	69fb      	ldr	r3, [r7, #28]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3728      	adds	r7, #40	@ 0x28
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	240054a8 	.word	0x240054a8
 800dd74:	240054bc 	.word	0x240054bc
 800dd78:	240054ac 	.word	0x240054ac
 800dd7c:	240054a0 	.word	0x240054a0
 800dd80:	240054b0 	.word	0x240054b0
 800dd84:	240054b4 	.word	0x240054b4

0800dd88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d04f      	beq.n	800de3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd9a:	2308      	movs	r3, #8
 800dd9c:	425b      	negs	r3, r3
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	4413      	add	r3, r2
 800dda2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	4b25      	ldr	r3, [pc, #148]	@ (800de44 <vPortFree+0xbc>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4013      	ands	r3, r2
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d10b      	bne.n	800ddce <vPortFree+0x46>
	__asm volatile
 800ddb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddba:	f383 8811 	msr	BASEPRI, r3
 800ddbe:	f3bf 8f6f 	isb	sy
 800ddc2:	f3bf 8f4f 	dsb	sy
 800ddc6:	60fb      	str	r3, [r7, #12]
}
 800ddc8:	bf00      	nop
 800ddca:	bf00      	nop
 800ddcc:	e7fd      	b.n	800ddca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00b      	beq.n	800ddee <vPortFree+0x66>
	__asm volatile
 800ddd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	60bb      	str	r3, [r7, #8]
}
 800dde8:	bf00      	nop
 800ddea:	bf00      	nop
 800ddec:	e7fd      	b.n	800ddea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	685a      	ldr	r2, [r3, #4]
 800ddf2:	4b14      	ldr	r3, [pc, #80]	@ (800de44 <vPortFree+0xbc>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4013      	ands	r3, r2
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d01e      	beq.n	800de3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d11a      	bne.n	800de3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	685a      	ldr	r2, [r3, #4]
 800de08:	4b0e      	ldr	r3, [pc, #56]	@ (800de44 <vPortFree+0xbc>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	43db      	mvns	r3, r3
 800de0e:	401a      	ands	r2, r3
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800de14:	f7fe fc66 	bl	800c6e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	4b0a      	ldr	r3, [pc, #40]	@ (800de48 <vPortFree+0xc0>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4413      	add	r3, r2
 800de22:	4a09      	ldr	r2, [pc, #36]	@ (800de48 <vPortFree+0xc0>)
 800de24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de26:	6938      	ldr	r0, [r7, #16]
 800de28:	f000 f874 	bl	800df14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800de2c:	4b07      	ldr	r3, [pc, #28]	@ (800de4c <vPortFree+0xc4>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3301      	adds	r3, #1
 800de32:	4a06      	ldr	r2, [pc, #24]	@ (800de4c <vPortFree+0xc4>)
 800de34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800de36:	f7fe fc63 	bl	800c700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de3a:	bf00      	nop
 800de3c:	3718      	adds	r7, #24
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	240054bc 	.word	0x240054bc
 800de48:	240054ac 	.word	0x240054ac
 800de4c:	240054b8 	.word	0x240054b8

0800de50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800de5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de5c:	4b27      	ldr	r3, [pc, #156]	@ (800defc <prvHeapInit+0xac>)
 800de5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00c      	beq.n	800de84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	3307      	adds	r3, #7
 800de6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f023 0307 	bic.w	r3, r3, #7
 800de76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	4a1f      	ldr	r2, [pc, #124]	@ (800defc <prvHeapInit+0xac>)
 800de80:	4413      	add	r3, r2
 800de82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de88:	4a1d      	ldr	r2, [pc, #116]	@ (800df00 <prvHeapInit+0xb0>)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de8e:	4b1c      	ldr	r3, [pc, #112]	@ (800df00 <prvHeapInit+0xb0>)
 800de90:	2200      	movs	r2, #0
 800de92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68ba      	ldr	r2, [r7, #8]
 800de98:	4413      	add	r3, r2
 800de9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de9c:	2208      	movs	r2, #8
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	1a9b      	subs	r3, r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f023 0307 	bic.w	r3, r3, #7
 800deaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4a15      	ldr	r2, [pc, #84]	@ (800df04 <prvHeapInit+0xb4>)
 800deb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800deb2:	4b14      	ldr	r3, [pc, #80]	@ (800df04 <prvHeapInit+0xb4>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2200      	movs	r2, #0
 800deb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800deba:	4b12      	ldr	r3, [pc, #72]	@ (800df04 <prvHeapInit+0xb4>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2200      	movs	r2, #0
 800dec0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	1ad2      	subs	r2, r2, r3
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ded0:	4b0c      	ldr	r3, [pc, #48]	@ (800df04 <prvHeapInit+0xb4>)
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	4a0a      	ldr	r2, [pc, #40]	@ (800df08 <prvHeapInit+0xb8>)
 800dede:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	4a09      	ldr	r2, [pc, #36]	@ (800df0c <prvHeapInit+0xbc>)
 800dee6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dee8:	4b09      	ldr	r3, [pc, #36]	@ (800df10 <prvHeapInit+0xc0>)
 800deea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800deee:	601a      	str	r2, [r3, #0]
}
 800def0:	bf00      	nop
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr
 800defc:	240018a0 	.word	0x240018a0
 800df00:	240054a0 	.word	0x240054a0
 800df04:	240054a8 	.word	0x240054a8
 800df08:	240054b0 	.word	0x240054b0
 800df0c:	240054ac 	.word	0x240054ac
 800df10:	240054bc 	.word	0x240054bc

0800df14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df1c:	4b28      	ldr	r3, [pc, #160]	@ (800dfc0 <prvInsertBlockIntoFreeList+0xac>)
 800df1e:	60fb      	str	r3, [r7, #12]
 800df20:	e002      	b.n	800df28 <prvInsertBlockIntoFreeList+0x14>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d8f7      	bhi.n	800df22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	4413      	add	r3, r2
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	429a      	cmp	r2, r3
 800df42:	d108      	bne.n	800df56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	685a      	ldr	r2, [r3, #4]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	441a      	add	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	68ba      	ldr	r2, [r7, #8]
 800df60:	441a      	add	r2, r3
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	429a      	cmp	r2, r3
 800df68:	d118      	bne.n	800df9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	4b15      	ldr	r3, [pc, #84]	@ (800dfc4 <prvInsertBlockIntoFreeList+0xb0>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	429a      	cmp	r2, r3
 800df74:	d00d      	beq.n	800df92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	441a      	add	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	601a      	str	r2, [r3, #0]
 800df90:	e008      	b.n	800dfa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df92:	4b0c      	ldr	r3, [pc, #48]	@ (800dfc4 <prvInsertBlockIntoFreeList+0xb0>)
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	e003      	b.n	800dfa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d002      	beq.n	800dfb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dfb2:	bf00      	nop
 800dfb4:	3714      	adds	r7, #20
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	240054a0 	.word	0x240054a0
 800dfc4:	240054a8 	.word	0x240054a8

0800dfc8 <arm_mat_trans_f32>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	8802      	ldrh	r2, [r0, #0]
 800dfce:	b085      	sub	sp, #20
 800dfd0:	884b      	ldrh	r3, [r1, #2]
 800dfd2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	8844      	ldrh	r4, [r0, #2]
 800dfda:	6848      	ldr	r0, [r1, #4]
 800dfdc:	d14e      	bne.n	800e07c <arm_mat_trans_f32+0xb4>
 800dfde:	f8b1 8000 	ldrh.w	r8, [r1]
 800dfe2:	45a0      	cmp	r8, r4
 800dfe4:	d14a      	bne.n	800e07c <arm_mat_trans_f32+0xb4>
 800dfe6:	ea4f 0998 	mov.w	r9, r8, lsr #2
 800dfea:	f008 0803 	and.w	r8, r8, #3
 800dfee:	009c      	lsls	r4, r3, #2
 800dff0:	4684      	mov	ip, r0
 800dff2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800dff6:	fb09 f204 	mul.w	r2, r9, r4
 800dffa:	011d      	lsls	r5, r3, #4
 800dffc:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 800e000:	eb00 0a04 	add.w	sl, r0, r4
 800e004:	0092      	lsls	r2, r2, #2
 800e006:	9103      	str	r1, [sp, #12]
 800e008:	00db      	lsls	r3, r3, #3
 800e00a:	9202      	str	r2, [sp, #8]
 800e00c:	9301      	str	r3, [sp, #4]
 800e00e:	4663      	mov	r3, ip
 800e010:	f1b9 0f00 	cmp.w	r9, #0
 800e014:	d01d      	beq.n	800e052 <arm_mat_trans_f32+0x8a>
 800e016:	9901      	ldr	r1, [sp, #4]
 800e018:	f10e 0210 	add.w	r2, lr, #16
 800e01c:	4648      	mov	r0, r9
 800e01e:	4461      	add	r1, ip
 800e020:	ed52 7a04 	vldr	s15, [r2, #-16]
 800e024:	191f      	adds	r7, r3, r4
 800e026:	190e      	adds	r6, r1, r4
 800e028:	3801      	subs	r0, #1
 800e02a:	edc3 7a00 	vstr	s15, [r3]
 800e02e:	f102 0210 	add.w	r2, r2, #16
 800e032:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 800e036:	442b      	add	r3, r5
 800e038:	edc7 7a00 	vstr	s15, [r7]
 800e03c:	f852 7c18 	ldr.w	r7, [r2, #-24]
 800e040:	600f      	str	r7, [r1, #0]
 800e042:	4429      	add	r1, r5
 800e044:	f852 7c14 	ldr.w	r7, [r2, #-20]
 800e048:	6037      	str	r7, [r6, #0]
 800e04a:	d1e9      	bne.n	800e020 <arm_mat_trans_f32+0x58>
 800e04c:	9b02      	ldr	r3, [sp, #8]
 800e04e:	44de      	add	lr, fp
 800e050:	4463      	add	r3, ip
 800e052:	f1b8 0f00 	cmp.w	r8, #0
 800e056:	d009      	beq.n	800e06c <arm_mat_trans_f32+0xa4>
 800e058:	4642      	mov	r2, r8
 800e05a:	4671      	mov	r1, lr
 800e05c:	f851 0b04 	ldr.w	r0, [r1], #4
 800e060:	3a01      	subs	r2, #1
 800e062:	6018      	str	r0, [r3, #0]
 800e064:	4423      	add	r3, r4
 800e066:	d1f9      	bne.n	800e05c <arm_mat_trans_f32+0x94>
 800e068:	9b03      	ldr	r3, [sp, #12]
 800e06a:	449e      	add	lr, r3
 800e06c:	f10c 0c04 	add.w	ip, ip, #4
 800e070:	45d4      	cmp	ip, sl
 800e072:	d1cc      	bne.n	800e00e <arm_mat_trans_f32+0x46>
 800e074:	2000      	movs	r0, #0
 800e076:	b005      	add	sp, #20
 800e078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07c:	f06f 0002 	mvn.w	r0, #2
 800e080:	e7f9      	b.n	800e076 <arm_mat_trans_f32+0xae>
 800e082:	bf00      	nop

0800e084 <arm_mat_mult_f32>:
 800e084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e088:	8845      	ldrh	r5, [r0, #2]
 800e08a:	b08b      	sub	sp, #44	@ 0x2c
 800e08c:	880b      	ldrh	r3, [r1, #0]
 800e08e:	8806      	ldrh	r6, [r0, #0]
 800e090:	42ab      	cmp	r3, r5
 800e092:	9109      	str	r1, [sp, #36]	@ 0x24
 800e094:	6847      	ldr	r7, [r0, #4]
 800e096:	9604      	str	r6, [sp, #16]
 800e098:	6848      	ldr	r0, [r1, #4]
 800e09a:	6854      	ldr	r4, [r2, #4]
 800e09c:	8849      	ldrh	r1, [r1, #2]
 800e09e:	f040 808d 	bne.w	800e1bc <arm_mat_mult_f32+0x138>
 800e0a2:	8815      	ldrh	r5, [r2, #0]
 800e0a4:	42b5      	cmp	r5, r6
 800e0a6:	f040 8089 	bne.w	800e1bc <arm_mat_mult_f32+0x138>
 800e0aa:	8852      	ldrh	r2, [r2, #2]
 800e0ac:	428a      	cmp	r2, r1
 800e0ae:	f040 8085 	bne.w	800e1bc <arm_mat_mult_f32+0x138>
 800e0b2:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800e0b6:	1d01      	adds	r1, r0, #4
 800e0b8:	0116      	lsls	r6, r2, #4
 800e0ba:	f003 0903 	and.w	r9, r3, #3
 800e0be:	9108      	str	r1, [sp, #32]
 800e0c0:	0095      	lsls	r5, r2, #2
 800e0c2:	fb06 f108 	mul.w	r1, r6, r8
 800e0c6:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	f107 0b10 	add.w	fp, r7, #16
 800e0d0:	9103      	str	r1, [sp, #12]
 800e0d2:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800e0d6:	00d2      	lsls	r2, r2, #3
 800e0d8:	eb04 0a05 	add.w	sl, r4, r5
 800e0dc:	9101      	str	r1, [sp, #4]
 800e0de:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800e0e2:	9202      	str	r2, [sp, #8]
 800e0e4:	9107      	str	r1, [sp, #28]
 800e0e6:	9306      	str	r3, [sp, #24]
 800e0e8:	f1ab 0310 	sub.w	r3, fp, #16
 800e0ec:	f8dd e020 	ldr.w	lr, [sp, #32]
 800e0f0:	9305      	str	r3, [sp, #20]
 800e0f2:	9b07      	ldr	r3, [sp, #28]
 800e0f4:	eb03 0c0a 	add.w	ip, r3, sl
 800e0f8:	f1b8 0f00 	cmp.w	r8, #0
 800e0fc:	d056      	beq.n	800e1ac <arm_mat_mult_f32+0x128>
 800e0fe:	9b02      	ldr	r3, [sp, #8]
 800e100:	4644      	mov	r4, r8
 800e102:	4602      	mov	r2, r0
 800e104:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800e1c8 <arm_mat_mult_f32+0x144>
 800e108:	18c1      	adds	r1, r0, r3
 800e10a:	465b      	mov	r3, fp
 800e10c:	edd2 6a00 	vldr	s13, [r2]
 800e110:	1957      	adds	r7, r2, r5
 800e112:	ed13 7a04 	vldr	s14, [r3, #-16]
 800e116:	3c01      	subs	r4, #1
 800e118:	ed53 5a03 	vldr	s11, [r3, #-12]
 800e11c:	4432      	add	r2, r6
 800e11e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e122:	ed97 6a00 	vldr	s12, [r7]
 800e126:	ed53 6a02 	vldr	s13, [r3, #-8]
 800e12a:	eb01 0705 	add.w	r7, r1, r5
 800e12e:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e132:	ed91 5a00 	vldr	s10, [r1]
 800e136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e13a:	edd7 5a00 	vldr	s11, [r7]
 800e13e:	ee26 7a85 	vmul.f32	s14, s13, s10
 800e142:	ed53 6a01 	vldr	s13, [r3, #-4]
 800e146:	4431      	add	r1, r6
 800e148:	f103 0310 	add.w	r3, r3, #16
 800e14c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e150:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800e154:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e158:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e15c:	d1d6      	bne.n	800e10c <arm_mat_mult_f32+0x88>
 800e15e:	9b03      	ldr	r3, [sp, #12]
 800e160:	9a01      	ldr	r2, [sp, #4]
 800e162:	4418      	add	r0, r3
 800e164:	f1b9 0f00 	cmp.w	r9, #0
 800e168:	d00b      	beq.n	800e182 <arm_mat_mult_f32+0xfe>
 800e16a:	464b      	mov	r3, r9
 800e16c:	edd0 6a00 	vldr	s13, [r0]
 800e170:	3b01      	subs	r3, #1
 800e172:	ecb2 7a01 	vldmia	r2!, {s14}
 800e176:	4428      	add	r0, r5
 800e178:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e17c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e180:	d1f4      	bne.n	800e16c <arm_mat_mult_f32+0xe8>
 800e182:	ecec 7a01 	vstmia	ip!, {s15}
 800e186:	45d4      	cmp	ip, sl
 800e188:	4670      	mov	r0, lr
 800e18a:	f10e 0e04 	add.w	lr, lr, #4
 800e18e:	d1b3      	bne.n	800e0f8 <arm_mat_mult_f32+0x74>
 800e190:	9a01      	ldr	r2, [sp, #4]
 800e192:	44aa      	add	sl, r5
 800e194:	9b06      	ldr	r3, [sp, #24]
 800e196:	4611      	mov	r1, r2
 800e198:	449b      	add	fp, r3
 800e19a:	4419      	add	r1, r3
 800e19c:	9b04      	ldr	r3, [sp, #16]
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	9101      	str	r1, [sp, #4]
 800e1a2:	9304      	str	r3, [sp, #16]
 800e1a4:	d006      	beq.n	800e1b4 <arm_mat_mult_f32+0x130>
 800e1a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1a8:	6858      	ldr	r0, [r3, #4]
 800e1aa:	e79d      	b.n	800e0e8 <arm_mat_mult_f32+0x64>
 800e1ac:	9a05      	ldr	r2, [sp, #20]
 800e1ae:	eddf 7a06 	vldr	s15, [pc, #24]	@ 800e1c8 <arm_mat_mult_f32+0x144>
 800e1b2:	e7d7      	b.n	800e164 <arm_mat_mult_f32+0xe0>
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	b00b      	add	sp, #44	@ 0x2c
 800e1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1bc:	f06f 0002 	mvn.w	r0, #2
 800e1c0:	b00b      	add	sp, #44	@ 0x2c
 800e1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c6:	bf00      	nop
 800e1c8:	00000000 	.word	0x00000000

0800e1cc <arm_mat_inverse_f32>:
 800e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d0:	8843      	ldrh	r3, [r0, #2]
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	8804      	ldrh	r4, [r0, #0]
 800e1d6:	684d      	ldr	r5, [r1, #4]
 800e1d8:	429c      	cmp	r4, r3
 800e1da:	9301      	str	r3, [sp, #4]
 800e1dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800e1e0:	9503      	str	r5, [sp, #12]
 800e1e2:	f040 80e2 	bne.w	800e3aa <arm_mat_inverse_f32+0x1de>
 800e1e6:	880b      	ldrh	r3, [r1, #0]
 800e1e8:	884a      	ldrh	r2, [r1, #2]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	f040 80dd 	bne.w	800e3aa <arm_mat_inverse_f32+0x1de>
 800e1f0:	429c      	cmp	r4, r3
 800e1f2:	f040 80da 	bne.w	800e3aa <arm_mat_inverse_f32+0x1de>
 800e1f6:	9005      	str	r0, [sp, #20]
 800e1f8:	b1fc      	cbz	r4, 800e23a <arm_mat_inverse_f32+0x6e>
 800e1fa:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 800e1fe:	1e66      	subs	r6, r4, #1
 800e200:	f845 bb04 	str.w	fp, [r5], #4
 800e204:	d019      	beq.n	800e23a <arm_mat_inverse_f32+0x6e>
 800e206:	2701      	movs	r7, #1
 800e208:	00b2      	lsls	r2, r6, #2
 800e20a:	4628      	mov	r0, r5
 800e20c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800e210:	2100      	movs	r1, #0
 800e212:	eb05 0a02 	add.w	sl, r5, r2
 800e216:	f000 ff23 	bl	800f060 <memset>
 800e21a:	4642      	mov	r2, r8
 800e21c:	2100      	movs	r1, #0
 800e21e:	eb0a 0508 	add.w	r5, sl, r8
 800e222:	4650      	mov	r0, sl
 800e224:	2f00      	cmp	r7, #0
 800e226:	f000 80c5 	beq.w	800e3b4 <arm_mat_inverse_f32+0x1e8>
 800e22a:	f000 ff19 	bl	800f060 <memset>
 800e22e:	3e01      	subs	r6, #1
 800e230:	f107 0701 	add.w	r7, r7, #1
 800e234:	f845 bb04 	str.w	fp, [r5], #4
 800e238:	d1e6      	bne.n	800e208 <arm_mat_inverse_f32+0x3c>
 800e23a:	9b01      	ldr	r3, [sp, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 80af 	beq.w	800e3a0 <arm_mat_inverse_f32+0x1d4>
 800e242:	009d      	lsls	r5, r3, #2
 800e244:	46cc      	mov	ip, r9
 800e246:	469e      	mov	lr, r3
 800e248:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e24c:	eb0c 0305 	add.w	r3, ip, r5
 800e250:	462f      	mov	r7, r5
 800e252:	2600      	movs	r6, #0
 800e254:	9302      	str	r3, [sp, #8]
 800e256:	1d2b      	adds	r3, r5, #4
 800e258:	9304      	str	r3, [sp, #16]
 800e25a:	9b02      	ldr	r3, [sp, #8]
 800e25c:	42b4      	cmp	r4, r6
 800e25e:	eddc 6a00 	vldr	s13, [ip]
 800e262:	eba3 0b07 	sub.w	fp, r3, r7
 800e266:	f000 809b 	beq.w	800e3a0 <arm_mat_inverse_f32+0x1d4>
 800e26a:	4632      	mov	r2, r6
 800e26c:	4663      	mov	r3, ip
 800e26e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e3c4 <arm_mat_inverse_f32+0x1f8>
 800e272:	e009      	b.n	800e288 <arm_mat_inverse_f32+0xbc>
 800e274:	eef4 7a47 	vcmp.f32	s15, s14
 800e278:	3201      	adds	r2, #1
 800e27a:	442b      	add	r3, r5
 800e27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e280:	fe37 7a87 	vselgt.f32	s14, s15, s14
 800e284:	42a2      	cmp	r2, r4
 800e286:	d012      	beq.n	800e2ae <arm_mat_inverse_f32+0xe2>
 800e288:	edd3 7a00 	vldr	s15, [r3]
 800e28c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e290:	eeb1 6a67 	vneg.f32	s12, s15
 800e294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e298:	dcec      	bgt.n	800e274 <arm_mat_inverse_f32+0xa8>
 800e29a:	eeb4 6a47 	vcmp.f32	s12, s14
 800e29e:	3201      	adds	r2, #1
 800e2a0:	442b      	add	r3, r5
 800e2a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a6:	fe36 7a07 	vselgt.f32	s14, s12, s14
 800e2aa:	42a2      	cmp	r2, r4
 800e2ac:	d1ec      	bne.n	800e288 <arm_mat_inverse_f32+0xbc>
 800e2ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b6:	d073      	beq.n	800e3a0 <arm_mat_inverse_f32+0x1d4>
 800e2b8:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c0:	d06e      	beq.n	800e3a0 <arm_mat_inverse_f32+0x1d4>
 800e2c2:	4672      	mov	r2, lr
 800e2c4:	4663      	mov	r3, ip
 800e2c6:	ed93 7a00 	vldr	s14, [r3]
 800e2ca:	3a01      	subs	r2, #1
 800e2cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e2d0:	ece3 7a01 	vstmia	r3!, {s15}
 800e2d4:	d1f7      	bne.n	800e2c6 <arm_mat_inverse_f32+0xfa>
 800e2d6:	9901      	ldr	r1, [sp, #4]
 800e2d8:	464b      	mov	r3, r9
 800e2da:	ed93 7a00 	vldr	s14, [r3]
 800e2de:	3901      	subs	r1, #1
 800e2e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e2e4:	ece3 7a01 	vstmia	r3!, {s15}
 800e2e8:	d1f7      	bne.n	800e2da <arm_mat_inverse_f32+0x10e>
 800e2ea:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800e2ee:	9803      	ldr	r0, [sp, #12]
 800e2f0:	42b1      	cmp	r1, r6
 800e2f2:	d038      	beq.n	800e366 <arm_mat_inverse_f32+0x19a>
 800e2f4:	eddb 6a00 	vldr	s13, [fp]
 800e2f8:	465a      	mov	r2, fp
 800e2fa:	4673      	mov	r3, lr
 800e2fc:	46e2      	mov	sl, ip
 800e2fe:	ecba 7a01 	vldmia	sl!, {s14}
 800e302:	3b01      	subs	r3, #1
 800e304:	edd2 7a00 	vldr	s15, [r2]
 800e308:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e30c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e310:	ece2 7a01 	vstmia	r2!, {s15}
 800e314:	d1f3      	bne.n	800e2fe <arm_mat_inverse_f32+0x132>
 800e316:	44bb      	add	fp, r7
 800e318:	4602      	mov	r2, r0
 800e31a:	9b01      	ldr	r3, [sp, #4]
 800e31c:	46ca      	mov	sl, r9
 800e31e:	ecba 7a01 	vldmia	sl!, {s14}
 800e322:	3b01      	subs	r3, #1
 800e324:	edd2 7a00 	vldr	s15, [r2]
 800e328:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e32c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e330:	ece2 7a01 	vstmia	r2!, {s15}
 800e334:	d1f3      	bne.n	800e31e <arm_mat_inverse_f32+0x152>
 800e336:	4428      	add	r0, r5
 800e338:	3101      	adds	r1, #1
 800e33a:	44c3      	add	fp, r8
 800e33c:	428c      	cmp	r4, r1
 800e33e:	d1d7      	bne.n	800e2f0 <arm_mat_inverse_f32+0x124>
 800e340:	9b04      	ldr	r3, [sp, #16]
 800e342:	f1be 0e01 	subs.w	lr, lr, #1
 800e346:	f106 0601 	add.w	r6, r6, #1
 800e34a:	f1a7 0704 	sub.w	r7, r7, #4
 800e34e:	449c      	add	ip, r3
 800e350:	44a9      	add	r9, r5
 800e352:	d182      	bne.n	800e25a <arm_mat_inverse_f32+0x8e>
 800e354:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35c:	d006      	beq.n	800e36c <arm_mat_inverse_f32+0x1a0>
 800e35e:	2000      	movs	r0, #0
 800e360:	b007      	add	sp, #28
 800e362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e366:	44bb      	add	fp, r7
 800e368:	4428      	add	r0, r5
 800e36a:	e7e5      	b.n	800e338 <arm_mat_inverse_f32+0x16c>
 800e36c:	9b05      	ldr	r3, [sp, #20]
 800e36e:	9a01      	ldr	r2, [sp, #4]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	fb02 f204 	mul.w	r2, r2, r4
 800e376:	edd3 7a00 	vldr	s15, [r3]
 800e37a:	4614      	mov	r4, r2
 800e37c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e384:	d1eb      	bne.n	800e35e <arm_mat_inverse_f32+0x192>
 800e386:	3304      	adds	r3, #4
 800e388:	e006      	b.n	800e398 <arm_mat_inverse_f32+0x1cc>
 800e38a:	ecf3 7a01 	vldmia	r3!, {s15}
 800e38e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e396:	d1e2      	bne.n	800e35e <arm_mat_inverse_f32+0x192>
 800e398:	f10e 0e01 	add.w	lr, lr, #1
 800e39c:	4574      	cmp	r4, lr
 800e39e:	d1f4      	bne.n	800e38a <arm_mat_inverse_f32+0x1be>
 800e3a0:	f06f 0004 	mvn.w	r0, #4
 800e3a4:	b007      	add	sp, #28
 800e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3aa:	f06f 0002 	mvn.w	r0, #2
 800e3ae:	b007      	add	sp, #28
 800e3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b4:	4655      	mov	r5, sl
 800e3b6:	3e01      	subs	r6, #1
 800e3b8:	f845 bb04 	str.w	fp, [r5], #4
 800e3bc:	f47f af23 	bne.w	800e206 <arm_mat_inverse_f32+0x3a>
 800e3c0:	e73b      	b.n	800e23a <arm_mat_inverse_f32+0x6e>
 800e3c2:	bf00      	nop
 800e3c4:	00000000 	.word	0x00000000

0800e3c8 <arm_mat_init_f32>:
 800e3c8:	8001      	strh	r1, [r0, #0]
 800e3ca:	8042      	strh	r2, [r0, #2]
 800e3cc:	6043      	str	r3, [r0, #4]
 800e3ce:	4770      	bx	lr

0800e3d0 <__cvt>:
 800e3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3d2:	ed2d 8b02 	vpush	{d8}
 800e3d6:	eeb0 8b40 	vmov.f64	d8, d0
 800e3da:	b085      	sub	sp, #20
 800e3dc:	4617      	mov	r7, r2
 800e3de:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e3e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e3e2:	ee18 2a90 	vmov	r2, s17
 800e3e6:	f025 0520 	bic.w	r5, r5, #32
 800e3ea:	2a00      	cmp	r2, #0
 800e3ec:	bfb6      	itet	lt
 800e3ee:	222d      	movlt	r2, #45	@ 0x2d
 800e3f0:	2200      	movge	r2, #0
 800e3f2:	eeb1 8b40 	vneglt.f64	d8, d0
 800e3f6:	2d46      	cmp	r5, #70	@ 0x46
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	701a      	strb	r2, [r3, #0]
 800e3fc:	d004      	beq.n	800e408 <__cvt+0x38>
 800e3fe:	2d45      	cmp	r5, #69	@ 0x45
 800e400:	d100      	bne.n	800e404 <__cvt+0x34>
 800e402:	3401      	adds	r4, #1
 800e404:	2102      	movs	r1, #2
 800e406:	e000      	b.n	800e40a <__cvt+0x3a>
 800e408:	2103      	movs	r1, #3
 800e40a:	ab03      	add	r3, sp, #12
 800e40c:	9301      	str	r3, [sp, #4]
 800e40e:	ab02      	add	r3, sp, #8
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	4622      	mov	r2, r4
 800e414:	4633      	mov	r3, r6
 800e416:	eeb0 0b48 	vmov.f64	d0, d8
 800e41a:	f000 ff95 	bl	800f348 <_dtoa_r>
 800e41e:	2d47      	cmp	r5, #71	@ 0x47
 800e420:	d114      	bne.n	800e44c <__cvt+0x7c>
 800e422:	07fb      	lsls	r3, r7, #31
 800e424:	d50a      	bpl.n	800e43c <__cvt+0x6c>
 800e426:	1902      	adds	r2, r0, r4
 800e428:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e430:	bf08      	it	eq
 800e432:	9203      	streq	r2, [sp, #12]
 800e434:	2130      	movs	r1, #48	@ 0x30
 800e436:	9b03      	ldr	r3, [sp, #12]
 800e438:	4293      	cmp	r3, r2
 800e43a:	d319      	bcc.n	800e470 <__cvt+0xa0>
 800e43c:	9b03      	ldr	r3, [sp, #12]
 800e43e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e440:	1a1b      	subs	r3, r3, r0
 800e442:	6013      	str	r3, [r2, #0]
 800e444:	b005      	add	sp, #20
 800e446:	ecbd 8b02 	vpop	{d8}
 800e44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e44c:	2d46      	cmp	r5, #70	@ 0x46
 800e44e:	eb00 0204 	add.w	r2, r0, r4
 800e452:	d1e9      	bne.n	800e428 <__cvt+0x58>
 800e454:	7803      	ldrb	r3, [r0, #0]
 800e456:	2b30      	cmp	r3, #48	@ 0x30
 800e458:	d107      	bne.n	800e46a <__cvt+0x9a>
 800e45a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	bf1c      	itt	ne
 800e464:	f1c4 0401 	rsbne	r4, r4, #1
 800e468:	6034      	strne	r4, [r6, #0]
 800e46a:	6833      	ldr	r3, [r6, #0]
 800e46c:	441a      	add	r2, r3
 800e46e:	e7db      	b.n	800e428 <__cvt+0x58>
 800e470:	1c5c      	adds	r4, r3, #1
 800e472:	9403      	str	r4, [sp, #12]
 800e474:	7019      	strb	r1, [r3, #0]
 800e476:	e7de      	b.n	800e436 <__cvt+0x66>

0800e478 <__exponent>:
 800e478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e47a:	2900      	cmp	r1, #0
 800e47c:	bfba      	itte	lt
 800e47e:	4249      	neglt	r1, r1
 800e480:	232d      	movlt	r3, #45	@ 0x2d
 800e482:	232b      	movge	r3, #43	@ 0x2b
 800e484:	2909      	cmp	r1, #9
 800e486:	7002      	strb	r2, [r0, #0]
 800e488:	7043      	strb	r3, [r0, #1]
 800e48a:	dd29      	ble.n	800e4e0 <__exponent+0x68>
 800e48c:	f10d 0307 	add.w	r3, sp, #7
 800e490:	461d      	mov	r5, r3
 800e492:	270a      	movs	r7, #10
 800e494:	461a      	mov	r2, r3
 800e496:	fbb1 f6f7 	udiv	r6, r1, r7
 800e49a:	fb07 1416 	mls	r4, r7, r6, r1
 800e49e:	3430      	adds	r4, #48	@ 0x30
 800e4a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	2c63      	cmp	r4, #99	@ 0x63
 800e4a8:	f103 33ff 	add.w	r3, r3, #4294967295
 800e4ac:	4631      	mov	r1, r6
 800e4ae:	dcf1      	bgt.n	800e494 <__exponent+0x1c>
 800e4b0:	3130      	adds	r1, #48	@ 0x30
 800e4b2:	1e94      	subs	r4, r2, #2
 800e4b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e4b8:	1c41      	adds	r1, r0, #1
 800e4ba:	4623      	mov	r3, r4
 800e4bc:	42ab      	cmp	r3, r5
 800e4be:	d30a      	bcc.n	800e4d6 <__exponent+0x5e>
 800e4c0:	f10d 0309 	add.w	r3, sp, #9
 800e4c4:	1a9b      	subs	r3, r3, r2
 800e4c6:	42ac      	cmp	r4, r5
 800e4c8:	bf88      	it	hi
 800e4ca:	2300      	movhi	r3, #0
 800e4cc:	3302      	adds	r3, #2
 800e4ce:	4403      	add	r3, r0
 800e4d0:	1a18      	subs	r0, r3, r0
 800e4d2:	b003      	add	sp, #12
 800e4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e4da:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e4de:	e7ed      	b.n	800e4bc <__exponent+0x44>
 800e4e0:	2330      	movs	r3, #48	@ 0x30
 800e4e2:	3130      	adds	r1, #48	@ 0x30
 800e4e4:	7083      	strb	r3, [r0, #2]
 800e4e6:	70c1      	strb	r1, [r0, #3]
 800e4e8:	1d03      	adds	r3, r0, #4
 800e4ea:	e7f1      	b.n	800e4d0 <__exponent+0x58>
 800e4ec:	0000      	movs	r0, r0
	...

0800e4f0 <_printf_float>:
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	b08d      	sub	sp, #52	@ 0x34
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e4fc:	4616      	mov	r6, r2
 800e4fe:	461f      	mov	r7, r3
 800e500:	4605      	mov	r5, r0
 800e502:	f000 fdb5 	bl	800f070 <_localeconv_r>
 800e506:	f8d0 b000 	ldr.w	fp, [r0]
 800e50a:	4658      	mov	r0, fp
 800e50c:	f7f1 ff38 	bl	8000380 <strlen>
 800e510:	2300      	movs	r3, #0
 800e512:	930a      	str	r3, [sp, #40]	@ 0x28
 800e514:	f8d8 3000 	ldr.w	r3, [r8]
 800e518:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e51c:	6822      	ldr	r2, [r4, #0]
 800e51e:	9005      	str	r0, [sp, #20]
 800e520:	3307      	adds	r3, #7
 800e522:	f023 0307 	bic.w	r3, r3, #7
 800e526:	f103 0108 	add.w	r1, r3, #8
 800e52a:	f8c8 1000 	str.w	r1, [r8]
 800e52e:	ed93 0b00 	vldr	d0, [r3]
 800e532:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e790 <_printf_float+0x2a0>
 800e536:	eeb0 7bc0 	vabs.f64	d7, d0
 800e53a:	eeb4 7b46 	vcmp.f64	d7, d6
 800e53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e542:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e546:	dd24      	ble.n	800e592 <_printf_float+0xa2>
 800e548:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e550:	d502      	bpl.n	800e558 <_printf_float+0x68>
 800e552:	232d      	movs	r3, #45	@ 0x2d
 800e554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e558:	498f      	ldr	r1, [pc, #572]	@ (800e798 <_printf_float+0x2a8>)
 800e55a:	4b90      	ldr	r3, [pc, #576]	@ (800e79c <_printf_float+0x2ac>)
 800e55c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e560:	bf8c      	ite	hi
 800e562:	4688      	movhi	r8, r1
 800e564:	4698      	movls	r8, r3
 800e566:	f022 0204 	bic.w	r2, r2, #4
 800e56a:	2303      	movs	r3, #3
 800e56c:	6123      	str	r3, [r4, #16]
 800e56e:	6022      	str	r2, [r4, #0]
 800e570:	f04f 0a00 	mov.w	sl, #0
 800e574:	9700      	str	r7, [sp, #0]
 800e576:	4633      	mov	r3, r6
 800e578:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e57a:	4621      	mov	r1, r4
 800e57c:	4628      	mov	r0, r5
 800e57e:	f000 f9d1 	bl	800e924 <_printf_common>
 800e582:	3001      	adds	r0, #1
 800e584:	f040 8089 	bne.w	800e69a <_printf_float+0x1aa>
 800e588:	f04f 30ff 	mov.w	r0, #4294967295
 800e58c:	b00d      	add	sp, #52	@ 0x34
 800e58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e592:	eeb4 0b40 	vcmp.f64	d0, d0
 800e596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e59a:	d709      	bvc.n	800e5b0 <_printf_float+0xc0>
 800e59c:	ee10 3a90 	vmov	r3, s1
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	bfbc      	itt	lt
 800e5a4:	232d      	movlt	r3, #45	@ 0x2d
 800e5a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e5aa:	497d      	ldr	r1, [pc, #500]	@ (800e7a0 <_printf_float+0x2b0>)
 800e5ac:	4b7d      	ldr	r3, [pc, #500]	@ (800e7a4 <_printf_float+0x2b4>)
 800e5ae:	e7d5      	b.n	800e55c <_printf_float+0x6c>
 800e5b0:	6863      	ldr	r3, [r4, #4]
 800e5b2:	1c59      	adds	r1, r3, #1
 800e5b4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e5b8:	d139      	bne.n	800e62e <_printf_float+0x13e>
 800e5ba:	2306      	movs	r3, #6
 800e5bc:	6063      	str	r3, [r4, #4]
 800e5be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	6022      	str	r2, [r4, #0]
 800e5c6:	9303      	str	r3, [sp, #12]
 800e5c8:	ab0a      	add	r3, sp, #40	@ 0x28
 800e5ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e5ce:	ab09      	add	r3, sp, #36	@ 0x24
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	6861      	ldr	r1, [r4, #4]
 800e5d4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f7ff fef9 	bl	800e3d0 <__cvt>
 800e5de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e5e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e5e4:	4680      	mov	r8, r0
 800e5e6:	d129      	bne.n	800e63c <_printf_float+0x14c>
 800e5e8:	1cc8      	adds	r0, r1, #3
 800e5ea:	db02      	blt.n	800e5f2 <_printf_float+0x102>
 800e5ec:	6863      	ldr	r3, [r4, #4]
 800e5ee:	4299      	cmp	r1, r3
 800e5f0:	dd41      	ble.n	800e676 <_printf_float+0x186>
 800e5f2:	f1a9 0902 	sub.w	r9, r9, #2
 800e5f6:	fa5f f989 	uxtb.w	r9, r9
 800e5fa:	3901      	subs	r1, #1
 800e5fc:	464a      	mov	r2, r9
 800e5fe:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e602:	9109      	str	r1, [sp, #36]	@ 0x24
 800e604:	f7ff ff38 	bl	800e478 <__exponent>
 800e608:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e60a:	1813      	adds	r3, r2, r0
 800e60c:	2a01      	cmp	r2, #1
 800e60e:	4682      	mov	sl, r0
 800e610:	6123      	str	r3, [r4, #16]
 800e612:	dc02      	bgt.n	800e61a <_printf_float+0x12a>
 800e614:	6822      	ldr	r2, [r4, #0]
 800e616:	07d2      	lsls	r2, r2, #31
 800e618:	d501      	bpl.n	800e61e <_printf_float+0x12e>
 800e61a:	3301      	adds	r3, #1
 800e61c:	6123      	str	r3, [r4, #16]
 800e61e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e622:	2b00      	cmp	r3, #0
 800e624:	d0a6      	beq.n	800e574 <_printf_float+0x84>
 800e626:	232d      	movs	r3, #45	@ 0x2d
 800e628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e62c:	e7a2      	b.n	800e574 <_printf_float+0x84>
 800e62e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e632:	d1c4      	bne.n	800e5be <_printf_float+0xce>
 800e634:	2b00      	cmp	r3, #0
 800e636:	d1c2      	bne.n	800e5be <_printf_float+0xce>
 800e638:	2301      	movs	r3, #1
 800e63a:	e7bf      	b.n	800e5bc <_printf_float+0xcc>
 800e63c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e640:	d9db      	bls.n	800e5fa <_printf_float+0x10a>
 800e642:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e646:	d118      	bne.n	800e67a <_printf_float+0x18a>
 800e648:	2900      	cmp	r1, #0
 800e64a:	6863      	ldr	r3, [r4, #4]
 800e64c:	dd0b      	ble.n	800e666 <_printf_float+0x176>
 800e64e:	6121      	str	r1, [r4, #16]
 800e650:	b913      	cbnz	r3, 800e658 <_printf_float+0x168>
 800e652:	6822      	ldr	r2, [r4, #0]
 800e654:	07d0      	lsls	r0, r2, #31
 800e656:	d502      	bpl.n	800e65e <_printf_float+0x16e>
 800e658:	3301      	adds	r3, #1
 800e65a:	440b      	add	r3, r1
 800e65c:	6123      	str	r3, [r4, #16]
 800e65e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e660:	f04f 0a00 	mov.w	sl, #0
 800e664:	e7db      	b.n	800e61e <_printf_float+0x12e>
 800e666:	b913      	cbnz	r3, 800e66e <_printf_float+0x17e>
 800e668:	6822      	ldr	r2, [r4, #0]
 800e66a:	07d2      	lsls	r2, r2, #31
 800e66c:	d501      	bpl.n	800e672 <_printf_float+0x182>
 800e66e:	3302      	adds	r3, #2
 800e670:	e7f4      	b.n	800e65c <_printf_float+0x16c>
 800e672:	2301      	movs	r3, #1
 800e674:	e7f2      	b.n	800e65c <_printf_float+0x16c>
 800e676:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e67a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e67c:	4299      	cmp	r1, r3
 800e67e:	db05      	blt.n	800e68c <_printf_float+0x19c>
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	6121      	str	r1, [r4, #16]
 800e684:	07d8      	lsls	r0, r3, #31
 800e686:	d5ea      	bpl.n	800e65e <_printf_float+0x16e>
 800e688:	1c4b      	adds	r3, r1, #1
 800e68a:	e7e7      	b.n	800e65c <_printf_float+0x16c>
 800e68c:	2900      	cmp	r1, #0
 800e68e:	bfd4      	ite	le
 800e690:	f1c1 0202 	rsble	r2, r1, #2
 800e694:	2201      	movgt	r2, #1
 800e696:	4413      	add	r3, r2
 800e698:	e7e0      	b.n	800e65c <_printf_float+0x16c>
 800e69a:	6823      	ldr	r3, [r4, #0]
 800e69c:	055a      	lsls	r2, r3, #21
 800e69e:	d407      	bmi.n	800e6b0 <_printf_float+0x1c0>
 800e6a0:	6923      	ldr	r3, [r4, #16]
 800e6a2:	4642      	mov	r2, r8
 800e6a4:	4631      	mov	r1, r6
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	47b8      	blx	r7
 800e6aa:	3001      	adds	r0, #1
 800e6ac:	d12a      	bne.n	800e704 <_printf_float+0x214>
 800e6ae:	e76b      	b.n	800e588 <_printf_float+0x98>
 800e6b0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e6b4:	f240 80e0 	bls.w	800e878 <_printf_float+0x388>
 800e6b8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e6bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c4:	d133      	bne.n	800e72e <_printf_float+0x23e>
 800e6c6:	4a38      	ldr	r2, [pc, #224]	@ (800e7a8 <_printf_float+0x2b8>)
 800e6c8:	2301      	movs	r3, #1
 800e6ca:	4631      	mov	r1, r6
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	47b8      	blx	r7
 800e6d0:	3001      	adds	r0, #1
 800e6d2:	f43f af59 	beq.w	800e588 <_printf_float+0x98>
 800e6d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e6da:	4543      	cmp	r3, r8
 800e6dc:	db02      	blt.n	800e6e4 <_printf_float+0x1f4>
 800e6de:	6823      	ldr	r3, [r4, #0]
 800e6e0:	07d8      	lsls	r0, r3, #31
 800e6e2:	d50f      	bpl.n	800e704 <_printf_float+0x214>
 800e6e4:	9b05      	ldr	r3, [sp, #20]
 800e6e6:	465a      	mov	r2, fp
 800e6e8:	4631      	mov	r1, r6
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	47b8      	blx	r7
 800e6ee:	3001      	adds	r0, #1
 800e6f0:	f43f af4a 	beq.w	800e588 <_printf_float+0x98>
 800e6f4:	f04f 0900 	mov.w	r9, #0
 800e6f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6fc:	f104 0a1a 	add.w	sl, r4, #26
 800e700:	45c8      	cmp	r8, r9
 800e702:	dc09      	bgt.n	800e718 <_printf_float+0x228>
 800e704:	6823      	ldr	r3, [r4, #0]
 800e706:	079b      	lsls	r3, r3, #30
 800e708:	f100 8107 	bmi.w	800e91a <_printf_float+0x42a>
 800e70c:	68e0      	ldr	r0, [r4, #12]
 800e70e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e710:	4298      	cmp	r0, r3
 800e712:	bfb8      	it	lt
 800e714:	4618      	movlt	r0, r3
 800e716:	e739      	b.n	800e58c <_printf_float+0x9c>
 800e718:	2301      	movs	r3, #1
 800e71a:	4652      	mov	r2, sl
 800e71c:	4631      	mov	r1, r6
 800e71e:	4628      	mov	r0, r5
 800e720:	47b8      	blx	r7
 800e722:	3001      	adds	r0, #1
 800e724:	f43f af30 	beq.w	800e588 <_printf_float+0x98>
 800e728:	f109 0901 	add.w	r9, r9, #1
 800e72c:	e7e8      	b.n	800e700 <_printf_float+0x210>
 800e72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e730:	2b00      	cmp	r3, #0
 800e732:	dc3b      	bgt.n	800e7ac <_printf_float+0x2bc>
 800e734:	4a1c      	ldr	r2, [pc, #112]	@ (800e7a8 <_printf_float+0x2b8>)
 800e736:	2301      	movs	r3, #1
 800e738:	4631      	mov	r1, r6
 800e73a:	4628      	mov	r0, r5
 800e73c:	47b8      	blx	r7
 800e73e:	3001      	adds	r0, #1
 800e740:	f43f af22 	beq.w	800e588 <_printf_float+0x98>
 800e744:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e748:	ea59 0303 	orrs.w	r3, r9, r3
 800e74c:	d102      	bne.n	800e754 <_printf_float+0x264>
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	07d9      	lsls	r1, r3, #31
 800e752:	d5d7      	bpl.n	800e704 <_printf_float+0x214>
 800e754:	9b05      	ldr	r3, [sp, #20]
 800e756:	465a      	mov	r2, fp
 800e758:	4631      	mov	r1, r6
 800e75a:	4628      	mov	r0, r5
 800e75c:	47b8      	blx	r7
 800e75e:	3001      	adds	r0, #1
 800e760:	f43f af12 	beq.w	800e588 <_printf_float+0x98>
 800e764:	f04f 0a00 	mov.w	sl, #0
 800e768:	f104 0b1a 	add.w	fp, r4, #26
 800e76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e76e:	425b      	negs	r3, r3
 800e770:	4553      	cmp	r3, sl
 800e772:	dc01      	bgt.n	800e778 <_printf_float+0x288>
 800e774:	464b      	mov	r3, r9
 800e776:	e794      	b.n	800e6a2 <_printf_float+0x1b2>
 800e778:	2301      	movs	r3, #1
 800e77a:	465a      	mov	r2, fp
 800e77c:	4631      	mov	r1, r6
 800e77e:	4628      	mov	r0, r5
 800e780:	47b8      	blx	r7
 800e782:	3001      	adds	r0, #1
 800e784:	f43f af00 	beq.w	800e588 <_printf_float+0x98>
 800e788:	f10a 0a01 	add.w	sl, sl, #1
 800e78c:	e7ee      	b.n	800e76c <_printf_float+0x27c>
 800e78e:	bf00      	nop
 800e790:	ffffffff 	.word	0xffffffff
 800e794:	7fefffff 	.word	0x7fefffff
 800e798:	080114a4 	.word	0x080114a4
 800e79c:	080114a0 	.word	0x080114a0
 800e7a0:	080114ac 	.word	0x080114ac
 800e7a4:	080114a8 	.word	0x080114a8
 800e7a8:	080114b0 	.word	0x080114b0
 800e7ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e7ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e7b2:	4553      	cmp	r3, sl
 800e7b4:	bfa8      	it	ge
 800e7b6:	4653      	movge	r3, sl
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	4699      	mov	r9, r3
 800e7bc:	dc37      	bgt.n	800e82e <_printf_float+0x33e>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	9307      	str	r3, [sp, #28]
 800e7c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7c6:	f104 021a 	add.w	r2, r4, #26
 800e7ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e7cc:	9907      	ldr	r1, [sp, #28]
 800e7ce:	9306      	str	r3, [sp, #24]
 800e7d0:	eba3 0309 	sub.w	r3, r3, r9
 800e7d4:	428b      	cmp	r3, r1
 800e7d6:	dc31      	bgt.n	800e83c <_printf_float+0x34c>
 800e7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7da:	459a      	cmp	sl, r3
 800e7dc:	dc3b      	bgt.n	800e856 <_printf_float+0x366>
 800e7de:	6823      	ldr	r3, [r4, #0]
 800e7e0:	07da      	lsls	r2, r3, #31
 800e7e2:	d438      	bmi.n	800e856 <_printf_float+0x366>
 800e7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7e6:	ebaa 0903 	sub.w	r9, sl, r3
 800e7ea:	9b06      	ldr	r3, [sp, #24]
 800e7ec:	ebaa 0303 	sub.w	r3, sl, r3
 800e7f0:	4599      	cmp	r9, r3
 800e7f2:	bfa8      	it	ge
 800e7f4:	4699      	movge	r9, r3
 800e7f6:	f1b9 0f00 	cmp.w	r9, #0
 800e7fa:	dc34      	bgt.n	800e866 <_printf_float+0x376>
 800e7fc:	f04f 0800 	mov.w	r8, #0
 800e800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e804:	f104 0b1a 	add.w	fp, r4, #26
 800e808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e80a:	ebaa 0303 	sub.w	r3, sl, r3
 800e80e:	eba3 0309 	sub.w	r3, r3, r9
 800e812:	4543      	cmp	r3, r8
 800e814:	f77f af76 	ble.w	800e704 <_printf_float+0x214>
 800e818:	2301      	movs	r3, #1
 800e81a:	465a      	mov	r2, fp
 800e81c:	4631      	mov	r1, r6
 800e81e:	4628      	mov	r0, r5
 800e820:	47b8      	blx	r7
 800e822:	3001      	adds	r0, #1
 800e824:	f43f aeb0 	beq.w	800e588 <_printf_float+0x98>
 800e828:	f108 0801 	add.w	r8, r8, #1
 800e82c:	e7ec      	b.n	800e808 <_printf_float+0x318>
 800e82e:	4642      	mov	r2, r8
 800e830:	4631      	mov	r1, r6
 800e832:	4628      	mov	r0, r5
 800e834:	47b8      	blx	r7
 800e836:	3001      	adds	r0, #1
 800e838:	d1c1      	bne.n	800e7be <_printf_float+0x2ce>
 800e83a:	e6a5      	b.n	800e588 <_printf_float+0x98>
 800e83c:	2301      	movs	r3, #1
 800e83e:	4631      	mov	r1, r6
 800e840:	4628      	mov	r0, r5
 800e842:	9206      	str	r2, [sp, #24]
 800e844:	47b8      	blx	r7
 800e846:	3001      	adds	r0, #1
 800e848:	f43f ae9e 	beq.w	800e588 <_printf_float+0x98>
 800e84c:	9b07      	ldr	r3, [sp, #28]
 800e84e:	9a06      	ldr	r2, [sp, #24]
 800e850:	3301      	adds	r3, #1
 800e852:	9307      	str	r3, [sp, #28]
 800e854:	e7b9      	b.n	800e7ca <_printf_float+0x2da>
 800e856:	9b05      	ldr	r3, [sp, #20]
 800e858:	465a      	mov	r2, fp
 800e85a:	4631      	mov	r1, r6
 800e85c:	4628      	mov	r0, r5
 800e85e:	47b8      	blx	r7
 800e860:	3001      	adds	r0, #1
 800e862:	d1bf      	bne.n	800e7e4 <_printf_float+0x2f4>
 800e864:	e690      	b.n	800e588 <_printf_float+0x98>
 800e866:	9a06      	ldr	r2, [sp, #24]
 800e868:	464b      	mov	r3, r9
 800e86a:	4442      	add	r2, r8
 800e86c:	4631      	mov	r1, r6
 800e86e:	4628      	mov	r0, r5
 800e870:	47b8      	blx	r7
 800e872:	3001      	adds	r0, #1
 800e874:	d1c2      	bne.n	800e7fc <_printf_float+0x30c>
 800e876:	e687      	b.n	800e588 <_printf_float+0x98>
 800e878:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e87c:	f1b9 0f01 	cmp.w	r9, #1
 800e880:	dc01      	bgt.n	800e886 <_printf_float+0x396>
 800e882:	07db      	lsls	r3, r3, #31
 800e884:	d536      	bpl.n	800e8f4 <_printf_float+0x404>
 800e886:	2301      	movs	r3, #1
 800e888:	4642      	mov	r2, r8
 800e88a:	4631      	mov	r1, r6
 800e88c:	4628      	mov	r0, r5
 800e88e:	47b8      	blx	r7
 800e890:	3001      	adds	r0, #1
 800e892:	f43f ae79 	beq.w	800e588 <_printf_float+0x98>
 800e896:	9b05      	ldr	r3, [sp, #20]
 800e898:	465a      	mov	r2, fp
 800e89a:	4631      	mov	r1, r6
 800e89c:	4628      	mov	r0, r5
 800e89e:	47b8      	blx	r7
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	f43f ae71 	beq.w	800e588 <_printf_float+0x98>
 800e8a6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e8aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b2:	f109 39ff 	add.w	r9, r9, #4294967295
 800e8b6:	d018      	beq.n	800e8ea <_printf_float+0x3fa>
 800e8b8:	464b      	mov	r3, r9
 800e8ba:	f108 0201 	add.w	r2, r8, #1
 800e8be:	4631      	mov	r1, r6
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	47b8      	blx	r7
 800e8c4:	3001      	adds	r0, #1
 800e8c6:	d10c      	bne.n	800e8e2 <_printf_float+0x3f2>
 800e8c8:	e65e      	b.n	800e588 <_printf_float+0x98>
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	465a      	mov	r2, fp
 800e8ce:	4631      	mov	r1, r6
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	47b8      	blx	r7
 800e8d4:	3001      	adds	r0, #1
 800e8d6:	f43f ae57 	beq.w	800e588 <_printf_float+0x98>
 800e8da:	f108 0801 	add.w	r8, r8, #1
 800e8de:	45c8      	cmp	r8, r9
 800e8e0:	dbf3      	blt.n	800e8ca <_printf_float+0x3da>
 800e8e2:	4653      	mov	r3, sl
 800e8e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e8e8:	e6dc      	b.n	800e6a4 <_printf_float+0x1b4>
 800e8ea:	f04f 0800 	mov.w	r8, #0
 800e8ee:	f104 0b1a 	add.w	fp, r4, #26
 800e8f2:	e7f4      	b.n	800e8de <_printf_float+0x3ee>
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	4642      	mov	r2, r8
 800e8f8:	e7e1      	b.n	800e8be <_printf_float+0x3ce>
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	464a      	mov	r2, r9
 800e8fe:	4631      	mov	r1, r6
 800e900:	4628      	mov	r0, r5
 800e902:	47b8      	blx	r7
 800e904:	3001      	adds	r0, #1
 800e906:	f43f ae3f 	beq.w	800e588 <_printf_float+0x98>
 800e90a:	f108 0801 	add.w	r8, r8, #1
 800e90e:	68e3      	ldr	r3, [r4, #12]
 800e910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e912:	1a5b      	subs	r3, r3, r1
 800e914:	4543      	cmp	r3, r8
 800e916:	dcf0      	bgt.n	800e8fa <_printf_float+0x40a>
 800e918:	e6f8      	b.n	800e70c <_printf_float+0x21c>
 800e91a:	f04f 0800 	mov.w	r8, #0
 800e91e:	f104 0919 	add.w	r9, r4, #25
 800e922:	e7f4      	b.n	800e90e <_printf_float+0x41e>

0800e924 <_printf_common>:
 800e924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e928:	4616      	mov	r6, r2
 800e92a:	4698      	mov	r8, r3
 800e92c:	688a      	ldr	r2, [r1, #8]
 800e92e:	690b      	ldr	r3, [r1, #16]
 800e930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e934:	4293      	cmp	r3, r2
 800e936:	bfb8      	it	lt
 800e938:	4613      	movlt	r3, r2
 800e93a:	6033      	str	r3, [r6, #0]
 800e93c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e940:	4607      	mov	r7, r0
 800e942:	460c      	mov	r4, r1
 800e944:	b10a      	cbz	r2, 800e94a <_printf_common+0x26>
 800e946:	3301      	adds	r3, #1
 800e948:	6033      	str	r3, [r6, #0]
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	0699      	lsls	r1, r3, #26
 800e94e:	bf42      	ittt	mi
 800e950:	6833      	ldrmi	r3, [r6, #0]
 800e952:	3302      	addmi	r3, #2
 800e954:	6033      	strmi	r3, [r6, #0]
 800e956:	6825      	ldr	r5, [r4, #0]
 800e958:	f015 0506 	ands.w	r5, r5, #6
 800e95c:	d106      	bne.n	800e96c <_printf_common+0x48>
 800e95e:	f104 0a19 	add.w	sl, r4, #25
 800e962:	68e3      	ldr	r3, [r4, #12]
 800e964:	6832      	ldr	r2, [r6, #0]
 800e966:	1a9b      	subs	r3, r3, r2
 800e968:	42ab      	cmp	r3, r5
 800e96a:	dc26      	bgt.n	800e9ba <_printf_common+0x96>
 800e96c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e970:	6822      	ldr	r2, [r4, #0]
 800e972:	3b00      	subs	r3, #0
 800e974:	bf18      	it	ne
 800e976:	2301      	movne	r3, #1
 800e978:	0692      	lsls	r2, r2, #26
 800e97a:	d42b      	bmi.n	800e9d4 <_printf_common+0xb0>
 800e97c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e980:	4641      	mov	r1, r8
 800e982:	4638      	mov	r0, r7
 800e984:	47c8      	blx	r9
 800e986:	3001      	adds	r0, #1
 800e988:	d01e      	beq.n	800e9c8 <_printf_common+0xa4>
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	6922      	ldr	r2, [r4, #16]
 800e98e:	f003 0306 	and.w	r3, r3, #6
 800e992:	2b04      	cmp	r3, #4
 800e994:	bf02      	ittt	eq
 800e996:	68e5      	ldreq	r5, [r4, #12]
 800e998:	6833      	ldreq	r3, [r6, #0]
 800e99a:	1aed      	subeq	r5, r5, r3
 800e99c:	68a3      	ldr	r3, [r4, #8]
 800e99e:	bf0c      	ite	eq
 800e9a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9a4:	2500      	movne	r5, #0
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	bfc4      	itt	gt
 800e9aa:	1a9b      	subgt	r3, r3, r2
 800e9ac:	18ed      	addgt	r5, r5, r3
 800e9ae:	2600      	movs	r6, #0
 800e9b0:	341a      	adds	r4, #26
 800e9b2:	42b5      	cmp	r5, r6
 800e9b4:	d11a      	bne.n	800e9ec <_printf_common+0xc8>
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	e008      	b.n	800e9cc <_printf_common+0xa8>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	4652      	mov	r2, sl
 800e9be:	4641      	mov	r1, r8
 800e9c0:	4638      	mov	r0, r7
 800e9c2:	47c8      	blx	r9
 800e9c4:	3001      	adds	r0, #1
 800e9c6:	d103      	bne.n	800e9d0 <_printf_common+0xac>
 800e9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9d0:	3501      	adds	r5, #1
 800e9d2:	e7c6      	b.n	800e962 <_printf_common+0x3e>
 800e9d4:	18e1      	adds	r1, r4, r3
 800e9d6:	1c5a      	adds	r2, r3, #1
 800e9d8:	2030      	movs	r0, #48	@ 0x30
 800e9da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e9de:	4422      	add	r2, r4
 800e9e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e9e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9e8:	3302      	adds	r3, #2
 800e9ea:	e7c7      	b.n	800e97c <_printf_common+0x58>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	4622      	mov	r2, r4
 800e9f0:	4641      	mov	r1, r8
 800e9f2:	4638      	mov	r0, r7
 800e9f4:	47c8      	blx	r9
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	d0e6      	beq.n	800e9c8 <_printf_common+0xa4>
 800e9fa:	3601      	adds	r6, #1
 800e9fc:	e7d9      	b.n	800e9b2 <_printf_common+0x8e>
	...

0800ea00 <_printf_i>:
 800ea00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea04:	7e0f      	ldrb	r7, [r1, #24]
 800ea06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ea08:	2f78      	cmp	r7, #120	@ 0x78
 800ea0a:	4691      	mov	r9, r2
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	460c      	mov	r4, r1
 800ea10:	469a      	mov	sl, r3
 800ea12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ea16:	d807      	bhi.n	800ea28 <_printf_i+0x28>
 800ea18:	2f62      	cmp	r7, #98	@ 0x62
 800ea1a:	d80a      	bhi.n	800ea32 <_printf_i+0x32>
 800ea1c:	2f00      	cmp	r7, #0
 800ea1e:	f000 80d1 	beq.w	800ebc4 <_printf_i+0x1c4>
 800ea22:	2f58      	cmp	r7, #88	@ 0x58
 800ea24:	f000 80b8 	beq.w	800eb98 <_printf_i+0x198>
 800ea28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ea30:	e03a      	b.n	800eaa8 <_printf_i+0xa8>
 800ea32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ea36:	2b15      	cmp	r3, #21
 800ea38:	d8f6      	bhi.n	800ea28 <_printf_i+0x28>
 800ea3a:	a101      	add	r1, pc, #4	@ (adr r1, 800ea40 <_printf_i+0x40>)
 800ea3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea40:	0800ea99 	.word	0x0800ea99
 800ea44:	0800eaad 	.word	0x0800eaad
 800ea48:	0800ea29 	.word	0x0800ea29
 800ea4c:	0800ea29 	.word	0x0800ea29
 800ea50:	0800ea29 	.word	0x0800ea29
 800ea54:	0800ea29 	.word	0x0800ea29
 800ea58:	0800eaad 	.word	0x0800eaad
 800ea5c:	0800ea29 	.word	0x0800ea29
 800ea60:	0800ea29 	.word	0x0800ea29
 800ea64:	0800ea29 	.word	0x0800ea29
 800ea68:	0800ea29 	.word	0x0800ea29
 800ea6c:	0800ebab 	.word	0x0800ebab
 800ea70:	0800ead7 	.word	0x0800ead7
 800ea74:	0800eb65 	.word	0x0800eb65
 800ea78:	0800ea29 	.word	0x0800ea29
 800ea7c:	0800ea29 	.word	0x0800ea29
 800ea80:	0800ebcd 	.word	0x0800ebcd
 800ea84:	0800ea29 	.word	0x0800ea29
 800ea88:	0800ead7 	.word	0x0800ead7
 800ea8c:	0800ea29 	.word	0x0800ea29
 800ea90:	0800ea29 	.word	0x0800ea29
 800ea94:	0800eb6d 	.word	0x0800eb6d
 800ea98:	6833      	ldr	r3, [r6, #0]
 800ea9a:	1d1a      	adds	r2, r3, #4
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	6032      	str	r2, [r6, #0]
 800eaa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eaa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e09c      	b.n	800ebe6 <_printf_i+0x1e6>
 800eaac:	6833      	ldr	r3, [r6, #0]
 800eaae:	6820      	ldr	r0, [r4, #0]
 800eab0:	1d19      	adds	r1, r3, #4
 800eab2:	6031      	str	r1, [r6, #0]
 800eab4:	0606      	lsls	r6, r0, #24
 800eab6:	d501      	bpl.n	800eabc <_printf_i+0xbc>
 800eab8:	681d      	ldr	r5, [r3, #0]
 800eaba:	e003      	b.n	800eac4 <_printf_i+0xc4>
 800eabc:	0645      	lsls	r5, r0, #25
 800eabe:	d5fb      	bpl.n	800eab8 <_printf_i+0xb8>
 800eac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eac4:	2d00      	cmp	r5, #0
 800eac6:	da03      	bge.n	800ead0 <_printf_i+0xd0>
 800eac8:	232d      	movs	r3, #45	@ 0x2d
 800eaca:	426d      	negs	r5, r5
 800eacc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ead0:	4858      	ldr	r0, [pc, #352]	@ (800ec34 <_printf_i+0x234>)
 800ead2:	230a      	movs	r3, #10
 800ead4:	e011      	b.n	800eafa <_printf_i+0xfa>
 800ead6:	6821      	ldr	r1, [r4, #0]
 800ead8:	6833      	ldr	r3, [r6, #0]
 800eada:	0608      	lsls	r0, r1, #24
 800eadc:	f853 5b04 	ldr.w	r5, [r3], #4
 800eae0:	d402      	bmi.n	800eae8 <_printf_i+0xe8>
 800eae2:	0649      	lsls	r1, r1, #25
 800eae4:	bf48      	it	mi
 800eae6:	b2ad      	uxthmi	r5, r5
 800eae8:	2f6f      	cmp	r7, #111	@ 0x6f
 800eaea:	4852      	ldr	r0, [pc, #328]	@ (800ec34 <_printf_i+0x234>)
 800eaec:	6033      	str	r3, [r6, #0]
 800eaee:	bf14      	ite	ne
 800eaf0:	230a      	movne	r3, #10
 800eaf2:	2308      	moveq	r3, #8
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eafa:	6866      	ldr	r6, [r4, #4]
 800eafc:	60a6      	str	r6, [r4, #8]
 800eafe:	2e00      	cmp	r6, #0
 800eb00:	db05      	blt.n	800eb0e <_printf_i+0x10e>
 800eb02:	6821      	ldr	r1, [r4, #0]
 800eb04:	432e      	orrs	r6, r5
 800eb06:	f021 0104 	bic.w	r1, r1, #4
 800eb0a:	6021      	str	r1, [r4, #0]
 800eb0c:	d04b      	beq.n	800eba6 <_printf_i+0x1a6>
 800eb0e:	4616      	mov	r6, r2
 800eb10:	fbb5 f1f3 	udiv	r1, r5, r3
 800eb14:	fb03 5711 	mls	r7, r3, r1, r5
 800eb18:	5dc7      	ldrb	r7, [r0, r7]
 800eb1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eb1e:	462f      	mov	r7, r5
 800eb20:	42bb      	cmp	r3, r7
 800eb22:	460d      	mov	r5, r1
 800eb24:	d9f4      	bls.n	800eb10 <_printf_i+0x110>
 800eb26:	2b08      	cmp	r3, #8
 800eb28:	d10b      	bne.n	800eb42 <_printf_i+0x142>
 800eb2a:	6823      	ldr	r3, [r4, #0]
 800eb2c:	07df      	lsls	r7, r3, #31
 800eb2e:	d508      	bpl.n	800eb42 <_printf_i+0x142>
 800eb30:	6923      	ldr	r3, [r4, #16]
 800eb32:	6861      	ldr	r1, [r4, #4]
 800eb34:	4299      	cmp	r1, r3
 800eb36:	bfde      	ittt	le
 800eb38:	2330      	movle	r3, #48	@ 0x30
 800eb3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eb3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eb42:	1b92      	subs	r2, r2, r6
 800eb44:	6122      	str	r2, [r4, #16]
 800eb46:	f8cd a000 	str.w	sl, [sp]
 800eb4a:	464b      	mov	r3, r9
 800eb4c:	aa03      	add	r2, sp, #12
 800eb4e:	4621      	mov	r1, r4
 800eb50:	4640      	mov	r0, r8
 800eb52:	f7ff fee7 	bl	800e924 <_printf_common>
 800eb56:	3001      	adds	r0, #1
 800eb58:	d14a      	bne.n	800ebf0 <_printf_i+0x1f0>
 800eb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb5e:	b004      	add	sp, #16
 800eb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb64:	6823      	ldr	r3, [r4, #0]
 800eb66:	f043 0320 	orr.w	r3, r3, #32
 800eb6a:	6023      	str	r3, [r4, #0]
 800eb6c:	4832      	ldr	r0, [pc, #200]	@ (800ec38 <_printf_i+0x238>)
 800eb6e:	2778      	movs	r7, #120	@ 0x78
 800eb70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb74:	6823      	ldr	r3, [r4, #0]
 800eb76:	6831      	ldr	r1, [r6, #0]
 800eb78:	061f      	lsls	r7, r3, #24
 800eb7a:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb7e:	d402      	bmi.n	800eb86 <_printf_i+0x186>
 800eb80:	065f      	lsls	r7, r3, #25
 800eb82:	bf48      	it	mi
 800eb84:	b2ad      	uxthmi	r5, r5
 800eb86:	6031      	str	r1, [r6, #0]
 800eb88:	07d9      	lsls	r1, r3, #31
 800eb8a:	bf44      	itt	mi
 800eb8c:	f043 0320 	orrmi.w	r3, r3, #32
 800eb90:	6023      	strmi	r3, [r4, #0]
 800eb92:	b11d      	cbz	r5, 800eb9c <_printf_i+0x19c>
 800eb94:	2310      	movs	r3, #16
 800eb96:	e7ad      	b.n	800eaf4 <_printf_i+0xf4>
 800eb98:	4826      	ldr	r0, [pc, #152]	@ (800ec34 <_printf_i+0x234>)
 800eb9a:	e7e9      	b.n	800eb70 <_printf_i+0x170>
 800eb9c:	6823      	ldr	r3, [r4, #0]
 800eb9e:	f023 0320 	bic.w	r3, r3, #32
 800eba2:	6023      	str	r3, [r4, #0]
 800eba4:	e7f6      	b.n	800eb94 <_printf_i+0x194>
 800eba6:	4616      	mov	r6, r2
 800eba8:	e7bd      	b.n	800eb26 <_printf_i+0x126>
 800ebaa:	6833      	ldr	r3, [r6, #0]
 800ebac:	6825      	ldr	r5, [r4, #0]
 800ebae:	6961      	ldr	r1, [r4, #20]
 800ebb0:	1d18      	adds	r0, r3, #4
 800ebb2:	6030      	str	r0, [r6, #0]
 800ebb4:	062e      	lsls	r6, r5, #24
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	d501      	bpl.n	800ebbe <_printf_i+0x1be>
 800ebba:	6019      	str	r1, [r3, #0]
 800ebbc:	e002      	b.n	800ebc4 <_printf_i+0x1c4>
 800ebbe:	0668      	lsls	r0, r5, #25
 800ebc0:	d5fb      	bpl.n	800ebba <_printf_i+0x1ba>
 800ebc2:	8019      	strh	r1, [r3, #0]
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	6123      	str	r3, [r4, #16]
 800ebc8:	4616      	mov	r6, r2
 800ebca:	e7bc      	b.n	800eb46 <_printf_i+0x146>
 800ebcc:	6833      	ldr	r3, [r6, #0]
 800ebce:	1d1a      	adds	r2, r3, #4
 800ebd0:	6032      	str	r2, [r6, #0]
 800ebd2:	681e      	ldr	r6, [r3, #0]
 800ebd4:	6862      	ldr	r2, [r4, #4]
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7f1 fb81 	bl	80002e0 <memchr>
 800ebde:	b108      	cbz	r0, 800ebe4 <_printf_i+0x1e4>
 800ebe0:	1b80      	subs	r0, r0, r6
 800ebe2:	6060      	str	r0, [r4, #4]
 800ebe4:	6863      	ldr	r3, [r4, #4]
 800ebe6:	6123      	str	r3, [r4, #16]
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebee:	e7aa      	b.n	800eb46 <_printf_i+0x146>
 800ebf0:	6923      	ldr	r3, [r4, #16]
 800ebf2:	4632      	mov	r2, r6
 800ebf4:	4649      	mov	r1, r9
 800ebf6:	4640      	mov	r0, r8
 800ebf8:	47d0      	blx	sl
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	d0ad      	beq.n	800eb5a <_printf_i+0x15a>
 800ebfe:	6823      	ldr	r3, [r4, #0]
 800ec00:	079b      	lsls	r3, r3, #30
 800ec02:	d413      	bmi.n	800ec2c <_printf_i+0x22c>
 800ec04:	68e0      	ldr	r0, [r4, #12]
 800ec06:	9b03      	ldr	r3, [sp, #12]
 800ec08:	4298      	cmp	r0, r3
 800ec0a:	bfb8      	it	lt
 800ec0c:	4618      	movlt	r0, r3
 800ec0e:	e7a6      	b.n	800eb5e <_printf_i+0x15e>
 800ec10:	2301      	movs	r3, #1
 800ec12:	4632      	mov	r2, r6
 800ec14:	4649      	mov	r1, r9
 800ec16:	4640      	mov	r0, r8
 800ec18:	47d0      	blx	sl
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	d09d      	beq.n	800eb5a <_printf_i+0x15a>
 800ec1e:	3501      	adds	r5, #1
 800ec20:	68e3      	ldr	r3, [r4, #12]
 800ec22:	9903      	ldr	r1, [sp, #12]
 800ec24:	1a5b      	subs	r3, r3, r1
 800ec26:	42ab      	cmp	r3, r5
 800ec28:	dcf2      	bgt.n	800ec10 <_printf_i+0x210>
 800ec2a:	e7eb      	b.n	800ec04 <_printf_i+0x204>
 800ec2c:	2500      	movs	r5, #0
 800ec2e:	f104 0619 	add.w	r6, r4, #25
 800ec32:	e7f5      	b.n	800ec20 <_printf_i+0x220>
 800ec34:	080114b2 	.word	0x080114b2
 800ec38:	080114c3 	.word	0x080114c3

0800ec3c <std>:
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	b510      	push	{r4, lr}
 800ec40:	4604      	mov	r4, r0
 800ec42:	e9c0 3300 	strd	r3, r3, [r0]
 800ec46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec4a:	6083      	str	r3, [r0, #8]
 800ec4c:	8181      	strh	r1, [r0, #12]
 800ec4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ec50:	81c2      	strh	r2, [r0, #14]
 800ec52:	6183      	str	r3, [r0, #24]
 800ec54:	4619      	mov	r1, r3
 800ec56:	2208      	movs	r2, #8
 800ec58:	305c      	adds	r0, #92	@ 0x5c
 800ec5a:	f000 fa01 	bl	800f060 <memset>
 800ec5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ec94 <std+0x58>)
 800ec60:	6263      	str	r3, [r4, #36]	@ 0x24
 800ec62:	4b0d      	ldr	r3, [pc, #52]	@ (800ec98 <std+0x5c>)
 800ec64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ec66:	4b0d      	ldr	r3, [pc, #52]	@ (800ec9c <std+0x60>)
 800ec68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ec6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eca0 <std+0x64>)
 800ec6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ec6e:	4b0d      	ldr	r3, [pc, #52]	@ (800eca4 <std+0x68>)
 800ec70:	6224      	str	r4, [r4, #32]
 800ec72:	429c      	cmp	r4, r3
 800ec74:	d006      	beq.n	800ec84 <std+0x48>
 800ec76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ec7a:	4294      	cmp	r4, r2
 800ec7c:	d002      	beq.n	800ec84 <std+0x48>
 800ec7e:	33d0      	adds	r3, #208	@ 0xd0
 800ec80:	429c      	cmp	r4, r3
 800ec82:	d105      	bne.n	800ec90 <std+0x54>
 800ec84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ec88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec8c:	f000 bac2 	b.w	800f214 <__retarget_lock_init_recursive>
 800ec90:	bd10      	pop	{r4, pc}
 800ec92:	bf00      	nop
 800ec94:	0800eeb1 	.word	0x0800eeb1
 800ec98:	0800eed3 	.word	0x0800eed3
 800ec9c:	0800ef0b 	.word	0x0800ef0b
 800eca0:	0800ef2f 	.word	0x0800ef2f
 800eca4:	240054c0 	.word	0x240054c0

0800eca8 <stdio_exit_handler>:
 800eca8:	4a02      	ldr	r2, [pc, #8]	@ (800ecb4 <stdio_exit_handler+0xc>)
 800ecaa:	4903      	ldr	r1, [pc, #12]	@ (800ecb8 <stdio_exit_handler+0x10>)
 800ecac:	4803      	ldr	r0, [pc, #12]	@ (800ecbc <stdio_exit_handler+0x14>)
 800ecae:	f000 b869 	b.w	800ed84 <_fwalk_sglue>
 800ecb2:	bf00      	nop
 800ecb4:	24000080 	.word	0x24000080
 800ecb8:	08010a85 	.word	0x08010a85
 800ecbc:	24000090 	.word	0x24000090

0800ecc0 <cleanup_stdio>:
 800ecc0:	6841      	ldr	r1, [r0, #4]
 800ecc2:	4b0c      	ldr	r3, [pc, #48]	@ (800ecf4 <cleanup_stdio+0x34>)
 800ecc4:	4299      	cmp	r1, r3
 800ecc6:	b510      	push	{r4, lr}
 800ecc8:	4604      	mov	r4, r0
 800ecca:	d001      	beq.n	800ecd0 <cleanup_stdio+0x10>
 800eccc:	f001 feda 	bl	8010a84 <_fflush_r>
 800ecd0:	68a1      	ldr	r1, [r4, #8]
 800ecd2:	4b09      	ldr	r3, [pc, #36]	@ (800ecf8 <cleanup_stdio+0x38>)
 800ecd4:	4299      	cmp	r1, r3
 800ecd6:	d002      	beq.n	800ecde <cleanup_stdio+0x1e>
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f001 fed3 	bl	8010a84 <_fflush_r>
 800ecde:	68e1      	ldr	r1, [r4, #12]
 800ece0:	4b06      	ldr	r3, [pc, #24]	@ (800ecfc <cleanup_stdio+0x3c>)
 800ece2:	4299      	cmp	r1, r3
 800ece4:	d004      	beq.n	800ecf0 <cleanup_stdio+0x30>
 800ece6:	4620      	mov	r0, r4
 800ece8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecec:	f001 beca 	b.w	8010a84 <_fflush_r>
 800ecf0:	bd10      	pop	{r4, pc}
 800ecf2:	bf00      	nop
 800ecf4:	240054c0 	.word	0x240054c0
 800ecf8:	24005528 	.word	0x24005528
 800ecfc:	24005590 	.word	0x24005590

0800ed00 <global_stdio_init.part.0>:
 800ed00:	b510      	push	{r4, lr}
 800ed02:	4b0b      	ldr	r3, [pc, #44]	@ (800ed30 <global_stdio_init.part.0+0x30>)
 800ed04:	4c0b      	ldr	r4, [pc, #44]	@ (800ed34 <global_stdio_init.part.0+0x34>)
 800ed06:	4a0c      	ldr	r2, [pc, #48]	@ (800ed38 <global_stdio_init.part.0+0x38>)
 800ed08:	601a      	str	r2, [r3, #0]
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	2104      	movs	r1, #4
 800ed10:	f7ff ff94 	bl	800ec3c <std>
 800ed14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ed18:	2201      	movs	r2, #1
 800ed1a:	2109      	movs	r1, #9
 800ed1c:	f7ff ff8e 	bl	800ec3c <std>
 800ed20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ed24:	2202      	movs	r2, #2
 800ed26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed2a:	2112      	movs	r1, #18
 800ed2c:	f7ff bf86 	b.w	800ec3c <std>
 800ed30:	240055f8 	.word	0x240055f8
 800ed34:	240054c0 	.word	0x240054c0
 800ed38:	0800eca9 	.word	0x0800eca9

0800ed3c <__sfp_lock_acquire>:
 800ed3c:	4801      	ldr	r0, [pc, #4]	@ (800ed44 <__sfp_lock_acquire+0x8>)
 800ed3e:	f000 ba6a 	b.w	800f216 <__retarget_lock_acquire_recursive>
 800ed42:	bf00      	nop
 800ed44:	24005601 	.word	0x24005601

0800ed48 <__sfp_lock_release>:
 800ed48:	4801      	ldr	r0, [pc, #4]	@ (800ed50 <__sfp_lock_release+0x8>)
 800ed4a:	f000 ba65 	b.w	800f218 <__retarget_lock_release_recursive>
 800ed4e:	bf00      	nop
 800ed50:	24005601 	.word	0x24005601

0800ed54 <__sinit>:
 800ed54:	b510      	push	{r4, lr}
 800ed56:	4604      	mov	r4, r0
 800ed58:	f7ff fff0 	bl	800ed3c <__sfp_lock_acquire>
 800ed5c:	6a23      	ldr	r3, [r4, #32]
 800ed5e:	b11b      	cbz	r3, 800ed68 <__sinit+0x14>
 800ed60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed64:	f7ff bff0 	b.w	800ed48 <__sfp_lock_release>
 800ed68:	4b04      	ldr	r3, [pc, #16]	@ (800ed7c <__sinit+0x28>)
 800ed6a:	6223      	str	r3, [r4, #32]
 800ed6c:	4b04      	ldr	r3, [pc, #16]	@ (800ed80 <__sinit+0x2c>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d1f5      	bne.n	800ed60 <__sinit+0xc>
 800ed74:	f7ff ffc4 	bl	800ed00 <global_stdio_init.part.0>
 800ed78:	e7f2      	b.n	800ed60 <__sinit+0xc>
 800ed7a:	bf00      	nop
 800ed7c:	0800ecc1 	.word	0x0800ecc1
 800ed80:	240055f8 	.word	0x240055f8

0800ed84 <_fwalk_sglue>:
 800ed84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed88:	4607      	mov	r7, r0
 800ed8a:	4688      	mov	r8, r1
 800ed8c:	4614      	mov	r4, r2
 800ed8e:	2600      	movs	r6, #0
 800ed90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed94:	f1b9 0901 	subs.w	r9, r9, #1
 800ed98:	d505      	bpl.n	800eda6 <_fwalk_sglue+0x22>
 800ed9a:	6824      	ldr	r4, [r4, #0]
 800ed9c:	2c00      	cmp	r4, #0
 800ed9e:	d1f7      	bne.n	800ed90 <_fwalk_sglue+0xc>
 800eda0:	4630      	mov	r0, r6
 800eda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eda6:	89ab      	ldrh	r3, [r5, #12]
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	d907      	bls.n	800edbc <_fwalk_sglue+0x38>
 800edac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edb0:	3301      	adds	r3, #1
 800edb2:	d003      	beq.n	800edbc <_fwalk_sglue+0x38>
 800edb4:	4629      	mov	r1, r5
 800edb6:	4638      	mov	r0, r7
 800edb8:	47c0      	blx	r8
 800edba:	4306      	orrs	r6, r0
 800edbc:	3568      	adds	r5, #104	@ 0x68
 800edbe:	e7e9      	b.n	800ed94 <_fwalk_sglue+0x10>

0800edc0 <iprintf>:
 800edc0:	b40f      	push	{r0, r1, r2, r3}
 800edc2:	b507      	push	{r0, r1, r2, lr}
 800edc4:	4906      	ldr	r1, [pc, #24]	@ (800ede0 <iprintf+0x20>)
 800edc6:	ab04      	add	r3, sp, #16
 800edc8:	6808      	ldr	r0, [r1, #0]
 800edca:	f853 2b04 	ldr.w	r2, [r3], #4
 800edce:	6881      	ldr	r1, [r0, #8]
 800edd0:	9301      	str	r3, [sp, #4]
 800edd2:	f001 fcbb 	bl	801074c <_vfiprintf_r>
 800edd6:	b003      	add	sp, #12
 800edd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eddc:	b004      	add	sp, #16
 800edde:	4770      	bx	lr
 800ede0:	2400008c 	.word	0x2400008c

0800ede4 <putchar>:
 800ede4:	4b02      	ldr	r3, [pc, #8]	@ (800edf0 <putchar+0xc>)
 800ede6:	4601      	mov	r1, r0
 800ede8:	6818      	ldr	r0, [r3, #0]
 800edea:	6882      	ldr	r2, [r0, #8]
 800edec:	f001 bed4 	b.w	8010b98 <_putc_r>
 800edf0:	2400008c 	.word	0x2400008c

0800edf4 <_puts_r>:
 800edf4:	6a03      	ldr	r3, [r0, #32]
 800edf6:	b570      	push	{r4, r5, r6, lr}
 800edf8:	6884      	ldr	r4, [r0, #8]
 800edfa:	4605      	mov	r5, r0
 800edfc:	460e      	mov	r6, r1
 800edfe:	b90b      	cbnz	r3, 800ee04 <_puts_r+0x10>
 800ee00:	f7ff ffa8 	bl	800ed54 <__sinit>
 800ee04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee06:	07db      	lsls	r3, r3, #31
 800ee08:	d405      	bmi.n	800ee16 <_puts_r+0x22>
 800ee0a:	89a3      	ldrh	r3, [r4, #12]
 800ee0c:	0598      	lsls	r0, r3, #22
 800ee0e:	d402      	bmi.n	800ee16 <_puts_r+0x22>
 800ee10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee12:	f000 fa00 	bl	800f216 <__retarget_lock_acquire_recursive>
 800ee16:	89a3      	ldrh	r3, [r4, #12]
 800ee18:	0719      	lsls	r1, r3, #28
 800ee1a:	d502      	bpl.n	800ee22 <_puts_r+0x2e>
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d135      	bne.n	800ee8e <_puts_r+0x9a>
 800ee22:	4621      	mov	r1, r4
 800ee24:	4628      	mov	r0, r5
 800ee26:	f000 f8c5 	bl	800efb4 <__swsetup_r>
 800ee2a:	b380      	cbz	r0, 800ee8e <_puts_r+0x9a>
 800ee2c:	f04f 35ff 	mov.w	r5, #4294967295
 800ee30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee32:	07da      	lsls	r2, r3, #31
 800ee34:	d405      	bmi.n	800ee42 <_puts_r+0x4e>
 800ee36:	89a3      	ldrh	r3, [r4, #12]
 800ee38:	059b      	lsls	r3, r3, #22
 800ee3a:	d402      	bmi.n	800ee42 <_puts_r+0x4e>
 800ee3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee3e:	f000 f9eb 	bl	800f218 <__retarget_lock_release_recursive>
 800ee42:	4628      	mov	r0, r5
 800ee44:	bd70      	pop	{r4, r5, r6, pc}
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	da04      	bge.n	800ee54 <_puts_r+0x60>
 800ee4a:	69a2      	ldr	r2, [r4, #24]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	dc17      	bgt.n	800ee80 <_puts_r+0x8c>
 800ee50:	290a      	cmp	r1, #10
 800ee52:	d015      	beq.n	800ee80 <_puts_r+0x8c>
 800ee54:	6823      	ldr	r3, [r4, #0]
 800ee56:	1c5a      	adds	r2, r3, #1
 800ee58:	6022      	str	r2, [r4, #0]
 800ee5a:	7019      	strb	r1, [r3, #0]
 800ee5c:	68a3      	ldr	r3, [r4, #8]
 800ee5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee62:	3b01      	subs	r3, #1
 800ee64:	60a3      	str	r3, [r4, #8]
 800ee66:	2900      	cmp	r1, #0
 800ee68:	d1ed      	bne.n	800ee46 <_puts_r+0x52>
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	da11      	bge.n	800ee92 <_puts_r+0x9e>
 800ee6e:	4622      	mov	r2, r4
 800ee70:	210a      	movs	r1, #10
 800ee72:	4628      	mov	r0, r5
 800ee74:	f000 f85f 	bl	800ef36 <__swbuf_r>
 800ee78:	3001      	adds	r0, #1
 800ee7a:	d0d7      	beq.n	800ee2c <_puts_r+0x38>
 800ee7c:	250a      	movs	r5, #10
 800ee7e:	e7d7      	b.n	800ee30 <_puts_r+0x3c>
 800ee80:	4622      	mov	r2, r4
 800ee82:	4628      	mov	r0, r5
 800ee84:	f000 f857 	bl	800ef36 <__swbuf_r>
 800ee88:	3001      	adds	r0, #1
 800ee8a:	d1e7      	bne.n	800ee5c <_puts_r+0x68>
 800ee8c:	e7ce      	b.n	800ee2c <_puts_r+0x38>
 800ee8e:	3e01      	subs	r6, #1
 800ee90:	e7e4      	b.n	800ee5c <_puts_r+0x68>
 800ee92:	6823      	ldr	r3, [r4, #0]
 800ee94:	1c5a      	adds	r2, r3, #1
 800ee96:	6022      	str	r2, [r4, #0]
 800ee98:	220a      	movs	r2, #10
 800ee9a:	701a      	strb	r2, [r3, #0]
 800ee9c:	e7ee      	b.n	800ee7c <_puts_r+0x88>
	...

0800eea0 <puts>:
 800eea0:	4b02      	ldr	r3, [pc, #8]	@ (800eeac <puts+0xc>)
 800eea2:	4601      	mov	r1, r0
 800eea4:	6818      	ldr	r0, [r3, #0]
 800eea6:	f7ff bfa5 	b.w	800edf4 <_puts_r>
 800eeaa:	bf00      	nop
 800eeac:	2400008c 	.word	0x2400008c

0800eeb0 <__sread>:
 800eeb0:	b510      	push	{r4, lr}
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeb8:	f000 f95e 	bl	800f178 <_read_r>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	bfab      	itete	ge
 800eec0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eec2:	89a3      	ldrhlt	r3, [r4, #12]
 800eec4:	181b      	addge	r3, r3, r0
 800eec6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eeca:	bfac      	ite	ge
 800eecc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eece:	81a3      	strhlt	r3, [r4, #12]
 800eed0:	bd10      	pop	{r4, pc}

0800eed2 <__swrite>:
 800eed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eed6:	461f      	mov	r7, r3
 800eed8:	898b      	ldrh	r3, [r1, #12]
 800eeda:	05db      	lsls	r3, r3, #23
 800eedc:	4605      	mov	r5, r0
 800eede:	460c      	mov	r4, r1
 800eee0:	4616      	mov	r6, r2
 800eee2:	d505      	bpl.n	800eef0 <__swrite+0x1e>
 800eee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eee8:	2302      	movs	r3, #2
 800eeea:	2200      	movs	r2, #0
 800eeec:	f000 f932 	bl	800f154 <_lseek_r>
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eef6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eefa:	81a3      	strh	r3, [r4, #12]
 800eefc:	4632      	mov	r2, r6
 800eefe:	463b      	mov	r3, r7
 800ef00:	4628      	mov	r0, r5
 800ef02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef06:	f000 b949 	b.w	800f19c <_write_r>

0800ef0a <__sseek>:
 800ef0a:	b510      	push	{r4, lr}
 800ef0c:	460c      	mov	r4, r1
 800ef0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef12:	f000 f91f 	bl	800f154 <_lseek_r>
 800ef16:	1c43      	adds	r3, r0, #1
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	bf15      	itete	ne
 800ef1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef26:	81a3      	strheq	r3, [r4, #12]
 800ef28:	bf18      	it	ne
 800ef2a:	81a3      	strhne	r3, [r4, #12]
 800ef2c:	bd10      	pop	{r4, pc}

0800ef2e <__sclose>:
 800ef2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef32:	f000 b8a1 	b.w	800f078 <_close_r>

0800ef36 <__swbuf_r>:
 800ef36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef38:	460e      	mov	r6, r1
 800ef3a:	4614      	mov	r4, r2
 800ef3c:	4605      	mov	r5, r0
 800ef3e:	b118      	cbz	r0, 800ef48 <__swbuf_r+0x12>
 800ef40:	6a03      	ldr	r3, [r0, #32]
 800ef42:	b90b      	cbnz	r3, 800ef48 <__swbuf_r+0x12>
 800ef44:	f7ff ff06 	bl	800ed54 <__sinit>
 800ef48:	69a3      	ldr	r3, [r4, #24]
 800ef4a:	60a3      	str	r3, [r4, #8]
 800ef4c:	89a3      	ldrh	r3, [r4, #12]
 800ef4e:	071a      	lsls	r2, r3, #28
 800ef50:	d501      	bpl.n	800ef56 <__swbuf_r+0x20>
 800ef52:	6923      	ldr	r3, [r4, #16]
 800ef54:	b943      	cbnz	r3, 800ef68 <__swbuf_r+0x32>
 800ef56:	4621      	mov	r1, r4
 800ef58:	4628      	mov	r0, r5
 800ef5a:	f000 f82b 	bl	800efb4 <__swsetup_r>
 800ef5e:	b118      	cbz	r0, 800ef68 <__swbuf_r+0x32>
 800ef60:	f04f 37ff 	mov.w	r7, #4294967295
 800ef64:	4638      	mov	r0, r7
 800ef66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef68:	6823      	ldr	r3, [r4, #0]
 800ef6a:	6922      	ldr	r2, [r4, #16]
 800ef6c:	1a98      	subs	r0, r3, r2
 800ef6e:	6963      	ldr	r3, [r4, #20]
 800ef70:	b2f6      	uxtb	r6, r6
 800ef72:	4283      	cmp	r3, r0
 800ef74:	4637      	mov	r7, r6
 800ef76:	dc05      	bgt.n	800ef84 <__swbuf_r+0x4e>
 800ef78:	4621      	mov	r1, r4
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	f001 fd82 	bl	8010a84 <_fflush_r>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d1ed      	bne.n	800ef60 <__swbuf_r+0x2a>
 800ef84:	68a3      	ldr	r3, [r4, #8]
 800ef86:	3b01      	subs	r3, #1
 800ef88:	60a3      	str	r3, [r4, #8]
 800ef8a:	6823      	ldr	r3, [r4, #0]
 800ef8c:	1c5a      	adds	r2, r3, #1
 800ef8e:	6022      	str	r2, [r4, #0]
 800ef90:	701e      	strb	r6, [r3, #0]
 800ef92:	6962      	ldr	r2, [r4, #20]
 800ef94:	1c43      	adds	r3, r0, #1
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d004      	beq.n	800efa4 <__swbuf_r+0x6e>
 800ef9a:	89a3      	ldrh	r3, [r4, #12]
 800ef9c:	07db      	lsls	r3, r3, #31
 800ef9e:	d5e1      	bpl.n	800ef64 <__swbuf_r+0x2e>
 800efa0:	2e0a      	cmp	r6, #10
 800efa2:	d1df      	bne.n	800ef64 <__swbuf_r+0x2e>
 800efa4:	4621      	mov	r1, r4
 800efa6:	4628      	mov	r0, r5
 800efa8:	f001 fd6c 	bl	8010a84 <_fflush_r>
 800efac:	2800      	cmp	r0, #0
 800efae:	d0d9      	beq.n	800ef64 <__swbuf_r+0x2e>
 800efb0:	e7d6      	b.n	800ef60 <__swbuf_r+0x2a>
	...

0800efb4 <__swsetup_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4b29      	ldr	r3, [pc, #164]	@ (800f05c <__swsetup_r+0xa8>)
 800efb8:	4605      	mov	r5, r0
 800efba:	6818      	ldr	r0, [r3, #0]
 800efbc:	460c      	mov	r4, r1
 800efbe:	b118      	cbz	r0, 800efc8 <__swsetup_r+0x14>
 800efc0:	6a03      	ldr	r3, [r0, #32]
 800efc2:	b90b      	cbnz	r3, 800efc8 <__swsetup_r+0x14>
 800efc4:	f7ff fec6 	bl	800ed54 <__sinit>
 800efc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efcc:	0719      	lsls	r1, r3, #28
 800efce:	d422      	bmi.n	800f016 <__swsetup_r+0x62>
 800efd0:	06da      	lsls	r2, r3, #27
 800efd2:	d407      	bmi.n	800efe4 <__swsetup_r+0x30>
 800efd4:	2209      	movs	r2, #9
 800efd6:	602a      	str	r2, [r5, #0]
 800efd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efdc:	81a3      	strh	r3, [r4, #12]
 800efde:	f04f 30ff 	mov.w	r0, #4294967295
 800efe2:	e033      	b.n	800f04c <__swsetup_r+0x98>
 800efe4:	0758      	lsls	r0, r3, #29
 800efe6:	d512      	bpl.n	800f00e <__swsetup_r+0x5a>
 800efe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efea:	b141      	cbz	r1, 800effe <__swsetup_r+0x4a>
 800efec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eff0:	4299      	cmp	r1, r3
 800eff2:	d002      	beq.n	800effa <__swsetup_r+0x46>
 800eff4:	4628      	mov	r0, r5
 800eff6:	f000 ff05 	bl	800fe04 <_free_r>
 800effa:	2300      	movs	r3, #0
 800effc:	6363      	str	r3, [r4, #52]	@ 0x34
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f004:	81a3      	strh	r3, [r4, #12]
 800f006:	2300      	movs	r3, #0
 800f008:	6063      	str	r3, [r4, #4]
 800f00a:	6923      	ldr	r3, [r4, #16]
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	f043 0308 	orr.w	r3, r3, #8
 800f014:	81a3      	strh	r3, [r4, #12]
 800f016:	6923      	ldr	r3, [r4, #16]
 800f018:	b94b      	cbnz	r3, 800f02e <__swsetup_r+0x7a>
 800f01a:	89a3      	ldrh	r3, [r4, #12]
 800f01c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f024:	d003      	beq.n	800f02e <__swsetup_r+0x7a>
 800f026:	4621      	mov	r1, r4
 800f028:	4628      	mov	r0, r5
 800f02a:	f001 fd79 	bl	8010b20 <__smakebuf_r>
 800f02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f032:	f013 0201 	ands.w	r2, r3, #1
 800f036:	d00a      	beq.n	800f04e <__swsetup_r+0x9a>
 800f038:	2200      	movs	r2, #0
 800f03a:	60a2      	str	r2, [r4, #8]
 800f03c:	6962      	ldr	r2, [r4, #20]
 800f03e:	4252      	negs	r2, r2
 800f040:	61a2      	str	r2, [r4, #24]
 800f042:	6922      	ldr	r2, [r4, #16]
 800f044:	b942      	cbnz	r2, 800f058 <__swsetup_r+0xa4>
 800f046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f04a:	d1c5      	bne.n	800efd8 <__swsetup_r+0x24>
 800f04c:	bd38      	pop	{r3, r4, r5, pc}
 800f04e:	0799      	lsls	r1, r3, #30
 800f050:	bf58      	it	pl
 800f052:	6962      	ldrpl	r2, [r4, #20]
 800f054:	60a2      	str	r2, [r4, #8]
 800f056:	e7f4      	b.n	800f042 <__swsetup_r+0x8e>
 800f058:	2000      	movs	r0, #0
 800f05a:	e7f7      	b.n	800f04c <__swsetup_r+0x98>
 800f05c:	2400008c 	.word	0x2400008c

0800f060 <memset>:
 800f060:	4402      	add	r2, r0
 800f062:	4603      	mov	r3, r0
 800f064:	4293      	cmp	r3, r2
 800f066:	d100      	bne.n	800f06a <memset+0xa>
 800f068:	4770      	bx	lr
 800f06a:	f803 1b01 	strb.w	r1, [r3], #1
 800f06e:	e7f9      	b.n	800f064 <memset+0x4>

0800f070 <_localeconv_r>:
 800f070:	4800      	ldr	r0, [pc, #0]	@ (800f074 <_localeconv_r+0x4>)
 800f072:	4770      	bx	lr
 800f074:	240001cc 	.word	0x240001cc

0800f078 <_close_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4d06      	ldr	r5, [pc, #24]	@ (800f094 <_close_r+0x1c>)
 800f07c:	2300      	movs	r3, #0
 800f07e:	4604      	mov	r4, r0
 800f080:	4608      	mov	r0, r1
 800f082:	602b      	str	r3, [r5, #0]
 800f084:	f7f5 fe9c 	bl	8004dc0 <_close>
 800f088:	1c43      	adds	r3, r0, #1
 800f08a:	d102      	bne.n	800f092 <_close_r+0x1a>
 800f08c:	682b      	ldr	r3, [r5, #0]
 800f08e:	b103      	cbz	r3, 800f092 <_close_r+0x1a>
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	bd38      	pop	{r3, r4, r5, pc}
 800f094:	240055fc 	.word	0x240055fc

0800f098 <_reclaim_reent>:
 800f098:	4b2d      	ldr	r3, [pc, #180]	@ (800f150 <_reclaim_reent+0xb8>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4283      	cmp	r3, r0
 800f09e:	b570      	push	{r4, r5, r6, lr}
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	d053      	beq.n	800f14c <_reclaim_reent+0xb4>
 800f0a4:	69c3      	ldr	r3, [r0, #28]
 800f0a6:	b31b      	cbz	r3, 800f0f0 <_reclaim_reent+0x58>
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	b163      	cbz	r3, 800f0c6 <_reclaim_reent+0x2e>
 800f0ac:	2500      	movs	r5, #0
 800f0ae:	69e3      	ldr	r3, [r4, #28]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	5959      	ldr	r1, [r3, r5]
 800f0b4:	b9b1      	cbnz	r1, 800f0e4 <_reclaim_reent+0x4c>
 800f0b6:	3504      	adds	r5, #4
 800f0b8:	2d80      	cmp	r5, #128	@ 0x80
 800f0ba:	d1f8      	bne.n	800f0ae <_reclaim_reent+0x16>
 800f0bc:	69e3      	ldr	r3, [r4, #28]
 800f0be:	4620      	mov	r0, r4
 800f0c0:	68d9      	ldr	r1, [r3, #12]
 800f0c2:	f000 fe9f 	bl	800fe04 <_free_r>
 800f0c6:	69e3      	ldr	r3, [r4, #28]
 800f0c8:	6819      	ldr	r1, [r3, #0]
 800f0ca:	b111      	cbz	r1, 800f0d2 <_reclaim_reent+0x3a>
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f000 fe99 	bl	800fe04 <_free_r>
 800f0d2:	69e3      	ldr	r3, [r4, #28]
 800f0d4:	689d      	ldr	r5, [r3, #8]
 800f0d6:	b15d      	cbz	r5, 800f0f0 <_reclaim_reent+0x58>
 800f0d8:	4629      	mov	r1, r5
 800f0da:	4620      	mov	r0, r4
 800f0dc:	682d      	ldr	r5, [r5, #0]
 800f0de:	f000 fe91 	bl	800fe04 <_free_r>
 800f0e2:	e7f8      	b.n	800f0d6 <_reclaim_reent+0x3e>
 800f0e4:	680e      	ldr	r6, [r1, #0]
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f000 fe8c 	bl	800fe04 <_free_r>
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	e7e1      	b.n	800f0b4 <_reclaim_reent+0x1c>
 800f0f0:	6961      	ldr	r1, [r4, #20]
 800f0f2:	b111      	cbz	r1, 800f0fa <_reclaim_reent+0x62>
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f000 fe85 	bl	800fe04 <_free_r>
 800f0fa:	69e1      	ldr	r1, [r4, #28]
 800f0fc:	b111      	cbz	r1, 800f104 <_reclaim_reent+0x6c>
 800f0fe:	4620      	mov	r0, r4
 800f100:	f000 fe80 	bl	800fe04 <_free_r>
 800f104:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f106:	b111      	cbz	r1, 800f10e <_reclaim_reent+0x76>
 800f108:	4620      	mov	r0, r4
 800f10a:	f000 fe7b 	bl	800fe04 <_free_r>
 800f10e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f110:	b111      	cbz	r1, 800f118 <_reclaim_reent+0x80>
 800f112:	4620      	mov	r0, r4
 800f114:	f000 fe76 	bl	800fe04 <_free_r>
 800f118:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f11a:	b111      	cbz	r1, 800f122 <_reclaim_reent+0x8a>
 800f11c:	4620      	mov	r0, r4
 800f11e:	f000 fe71 	bl	800fe04 <_free_r>
 800f122:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f124:	b111      	cbz	r1, 800f12c <_reclaim_reent+0x94>
 800f126:	4620      	mov	r0, r4
 800f128:	f000 fe6c 	bl	800fe04 <_free_r>
 800f12c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f12e:	b111      	cbz	r1, 800f136 <_reclaim_reent+0x9e>
 800f130:	4620      	mov	r0, r4
 800f132:	f000 fe67 	bl	800fe04 <_free_r>
 800f136:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f138:	b111      	cbz	r1, 800f140 <_reclaim_reent+0xa8>
 800f13a:	4620      	mov	r0, r4
 800f13c:	f000 fe62 	bl	800fe04 <_free_r>
 800f140:	6a23      	ldr	r3, [r4, #32]
 800f142:	b11b      	cbz	r3, 800f14c <_reclaim_reent+0xb4>
 800f144:	4620      	mov	r0, r4
 800f146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f14a:	4718      	bx	r3
 800f14c:	bd70      	pop	{r4, r5, r6, pc}
 800f14e:	bf00      	nop
 800f150:	2400008c 	.word	0x2400008c

0800f154 <_lseek_r>:
 800f154:	b538      	push	{r3, r4, r5, lr}
 800f156:	4d07      	ldr	r5, [pc, #28]	@ (800f174 <_lseek_r+0x20>)
 800f158:	4604      	mov	r4, r0
 800f15a:	4608      	mov	r0, r1
 800f15c:	4611      	mov	r1, r2
 800f15e:	2200      	movs	r2, #0
 800f160:	602a      	str	r2, [r5, #0]
 800f162:	461a      	mov	r2, r3
 800f164:	f7f5 fe53 	bl	8004e0e <_lseek>
 800f168:	1c43      	adds	r3, r0, #1
 800f16a:	d102      	bne.n	800f172 <_lseek_r+0x1e>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	b103      	cbz	r3, 800f172 <_lseek_r+0x1e>
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	240055fc 	.word	0x240055fc

0800f178 <_read_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	4d07      	ldr	r5, [pc, #28]	@ (800f198 <_read_r+0x20>)
 800f17c:	4604      	mov	r4, r0
 800f17e:	4608      	mov	r0, r1
 800f180:	4611      	mov	r1, r2
 800f182:	2200      	movs	r2, #0
 800f184:	602a      	str	r2, [r5, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	f7f5 fdfd 	bl	8004d86 <_read>
 800f18c:	1c43      	adds	r3, r0, #1
 800f18e:	d102      	bne.n	800f196 <_read_r+0x1e>
 800f190:	682b      	ldr	r3, [r5, #0]
 800f192:	b103      	cbz	r3, 800f196 <_read_r+0x1e>
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	bd38      	pop	{r3, r4, r5, pc}
 800f198:	240055fc 	.word	0x240055fc

0800f19c <_write_r>:
 800f19c:	b538      	push	{r3, r4, r5, lr}
 800f19e:	4d07      	ldr	r5, [pc, #28]	@ (800f1bc <_write_r+0x20>)
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	4608      	mov	r0, r1
 800f1a4:	4611      	mov	r1, r2
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	602a      	str	r2, [r5, #0]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	f7f1 fd50 	bl	8000c50 <_write>
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d102      	bne.n	800f1ba <_write_r+0x1e>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	b103      	cbz	r3, 800f1ba <_write_r+0x1e>
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	240055fc 	.word	0x240055fc

0800f1c0 <__errno>:
 800f1c0:	4b01      	ldr	r3, [pc, #4]	@ (800f1c8 <__errno+0x8>)
 800f1c2:	6818      	ldr	r0, [r3, #0]
 800f1c4:	4770      	bx	lr
 800f1c6:	bf00      	nop
 800f1c8:	2400008c 	.word	0x2400008c

0800f1cc <__libc_init_array>:
 800f1cc:	b570      	push	{r4, r5, r6, lr}
 800f1ce:	4d0d      	ldr	r5, [pc, #52]	@ (800f204 <__libc_init_array+0x38>)
 800f1d0:	4c0d      	ldr	r4, [pc, #52]	@ (800f208 <__libc_init_array+0x3c>)
 800f1d2:	1b64      	subs	r4, r4, r5
 800f1d4:	10a4      	asrs	r4, r4, #2
 800f1d6:	2600      	movs	r6, #0
 800f1d8:	42a6      	cmp	r6, r4
 800f1da:	d109      	bne.n	800f1f0 <__libc_init_array+0x24>
 800f1dc:	4d0b      	ldr	r5, [pc, #44]	@ (800f20c <__libc_init_array+0x40>)
 800f1de:	4c0c      	ldr	r4, [pc, #48]	@ (800f210 <__libc_init_array+0x44>)
 800f1e0:	f002 f834 	bl	801124c <_init>
 800f1e4:	1b64      	subs	r4, r4, r5
 800f1e6:	10a4      	asrs	r4, r4, #2
 800f1e8:	2600      	movs	r6, #0
 800f1ea:	42a6      	cmp	r6, r4
 800f1ec:	d105      	bne.n	800f1fa <__libc_init_array+0x2e>
 800f1ee:	bd70      	pop	{r4, r5, r6, pc}
 800f1f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1f4:	4798      	blx	r3
 800f1f6:	3601      	adds	r6, #1
 800f1f8:	e7ee      	b.n	800f1d8 <__libc_init_array+0xc>
 800f1fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1fe:	4798      	blx	r3
 800f200:	3601      	adds	r6, #1
 800f202:	e7f2      	b.n	800f1ea <__libc_init_array+0x1e>
 800f204:	08011960 	.word	0x08011960
 800f208:	08011960 	.word	0x08011960
 800f20c:	08011960 	.word	0x08011960
 800f210:	08011964 	.word	0x08011964

0800f214 <__retarget_lock_init_recursive>:
 800f214:	4770      	bx	lr

0800f216 <__retarget_lock_acquire_recursive>:
 800f216:	4770      	bx	lr

0800f218 <__retarget_lock_release_recursive>:
 800f218:	4770      	bx	lr

0800f21a <memcpy>:
 800f21a:	440a      	add	r2, r1
 800f21c:	4291      	cmp	r1, r2
 800f21e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f222:	d100      	bne.n	800f226 <memcpy+0xc>
 800f224:	4770      	bx	lr
 800f226:	b510      	push	{r4, lr}
 800f228:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f22c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f230:	4291      	cmp	r1, r2
 800f232:	d1f9      	bne.n	800f228 <memcpy+0xe>
 800f234:	bd10      	pop	{r4, pc}

0800f236 <quorem>:
 800f236:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23a:	6903      	ldr	r3, [r0, #16]
 800f23c:	690c      	ldr	r4, [r1, #16]
 800f23e:	42a3      	cmp	r3, r4
 800f240:	4607      	mov	r7, r0
 800f242:	db7e      	blt.n	800f342 <quorem+0x10c>
 800f244:	3c01      	subs	r4, #1
 800f246:	f101 0814 	add.w	r8, r1, #20
 800f24a:	00a3      	lsls	r3, r4, #2
 800f24c:	f100 0514 	add.w	r5, r0, #20
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f256:	9301      	str	r3, [sp, #4]
 800f258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f25c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f260:	3301      	adds	r3, #1
 800f262:	429a      	cmp	r2, r3
 800f264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f268:	fbb2 f6f3 	udiv	r6, r2, r3
 800f26c:	d32e      	bcc.n	800f2cc <quorem+0x96>
 800f26e:	f04f 0a00 	mov.w	sl, #0
 800f272:	46c4      	mov	ip, r8
 800f274:	46ae      	mov	lr, r5
 800f276:	46d3      	mov	fp, sl
 800f278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f27c:	b298      	uxth	r0, r3
 800f27e:	fb06 a000 	mla	r0, r6, r0, sl
 800f282:	0c02      	lsrs	r2, r0, #16
 800f284:	0c1b      	lsrs	r3, r3, #16
 800f286:	fb06 2303 	mla	r3, r6, r3, r2
 800f28a:	f8de 2000 	ldr.w	r2, [lr]
 800f28e:	b280      	uxth	r0, r0
 800f290:	b292      	uxth	r2, r2
 800f292:	1a12      	subs	r2, r2, r0
 800f294:	445a      	add	r2, fp
 800f296:	f8de 0000 	ldr.w	r0, [lr]
 800f29a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f2a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f2a8:	b292      	uxth	r2, r2
 800f2aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f2ae:	45e1      	cmp	r9, ip
 800f2b0:	f84e 2b04 	str.w	r2, [lr], #4
 800f2b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f2b8:	d2de      	bcs.n	800f278 <quorem+0x42>
 800f2ba:	9b00      	ldr	r3, [sp, #0]
 800f2bc:	58eb      	ldr	r3, [r5, r3]
 800f2be:	b92b      	cbnz	r3, 800f2cc <quorem+0x96>
 800f2c0:	9b01      	ldr	r3, [sp, #4]
 800f2c2:	3b04      	subs	r3, #4
 800f2c4:	429d      	cmp	r5, r3
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	d32f      	bcc.n	800f32a <quorem+0xf4>
 800f2ca:	613c      	str	r4, [r7, #16]
 800f2cc:	4638      	mov	r0, r7
 800f2ce:	f001 f90b 	bl	80104e8 <__mcmp>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	db25      	blt.n	800f322 <quorem+0xec>
 800f2d6:	4629      	mov	r1, r5
 800f2d8:	2000      	movs	r0, #0
 800f2da:	f858 2b04 	ldr.w	r2, [r8], #4
 800f2de:	f8d1 c000 	ldr.w	ip, [r1]
 800f2e2:	fa1f fe82 	uxth.w	lr, r2
 800f2e6:	fa1f f38c 	uxth.w	r3, ip
 800f2ea:	eba3 030e 	sub.w	r3, r3, lr
 800f2ee:	4403      	add	r3, r0
 800f2f0:	0c12      	lsrs	r2, r2, #16
 800f2f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f2f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f300:	45c1      	cmp	r9, r8
 800f302:	f841 3b04 	str.w	r3, [r1], #4
 800f306:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f30a:	d2e6      	bcs.n	800f2da <quorem+0xa4>
 800f30c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f314:	b922      	cbnz	r2, 800f320 <quorem+0xea>
 800f316:	3b04      	subs	r3, #4
 800f318:	429d      	cmp	r5, r3
 800f31a:	461a      	mov	r2, r3
 800f31c:	d30b      	bcc.n	800f336 <quorem+0x100>
 800f31e:	613c      	str	r4, [r7, #16]
 800f320:	3601      	adds	r6, #1
 800f322:	4630      	mov	r0, r6
 800f324:	b003      	add	sp, #12
 800f326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32a:	6812      	ldr	r2, [r2, #0]
 800f32c:	3b04      	subs	r3, #4
 800f32e:	2a00      	cmp	r2, #0
 800f330:	d1cb      	bne.n	800f2ca <quorem+0x94>
 800f332:	3c01      	subs	r4, #1
 800f334:	e7c6      	b.n	800f2c4 <quorem+0x8e>
 800f336:	6812      	ldr	r2, [r2, #0]
 800f338:	3b04      	subs	r3, #4
 800f33a:	2a00      	cmp	r2, #0
 800f33c:	d1ef      	bne.n	800f31e <quorem+0xe8>
 800f33e:	3c01      	subs	r4, #1
 800f340:	e7ea      	b.n	800f318 <quorem+0xe2>
 800f342:	2000      	movs	r0, #0
 800f344:	e7ee      	b.n	800f324 <quorem+0xee>
	...

0800f348 <_dtoa_r>:
 800f348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f34c:	ed2d 8b02 	vpush	{d8}
 800f350:	69c7      	ldr	r7, [r0, #28]
 800f352:	b091      	sub	sp, #68	@ 0x44
 800f354:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f358:	ec55 4b10 	vmov	r4, r5, d0
 800f35c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f35e:	9107      	str	r1, [sp, #28]
 800f360:	4681      	mov	r9, r0
 800f362:	9209      	str	r2, [sp, #36]	@ 0x24
 800f364:	930d      	str	r3, [sp, #52]	@ 0x34
 800f366:	b97f      	cbnz	r7, 800f388 <_dtoa_r+0x40>
 800f368:	2010      	movs	r0, #16
 800f36a:	f000 fd95 	bl	800fe98 <malloc>
 800f36e:	4602      	mov	r2, r0
 800f370:	f8c9 001c 	str.w	r0, [r9, #28]
 800f374:	b920      	cbnz	r0, 800f380 <_dtoa_r+0x38>
 800f376:	4ba0      	ldr	r3, [pc, #640]	@ (800f5f8 <_dtoa_r+0x2b0>)
 800f378:	21ef      	movs	r1, #239	@ 0xef
 800f37a:	48a0      	ldr	r0, [pc, #640]	@ (800f5fc <_dtoa_r+0x2b4>)
 800f37c:	f001 fc72 	bl	8010c64 <__assert_func>
 800f380:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f384:	6007      	str	r7, [r0, #0]
 800f386:	60c7      	str	r7, [r0, #12]
 800f388:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f38c:	6819      	ldr	r1, [r3, #0]
 800f38e:	b159      	cbz	r1, 800f3a8 <_dtoa_r+0x60>
 800f390:	685a      	ldr	r2, [r3, #4]
 800f392:	604a      	str	r2, [r1, #4]
 800f394:	2301      	movs	r3, #1
 800f396:	4093      	lsls	r3, r2
 800f398:	608b      	str	r3, [r1, #8]
 800f39a:	4648      	mov	r0, r9
 800f39c:	f000 fe72 	bl	8010084 <_Bfree>
 800f3a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	601a      	str	r2, [r3, #0]
 800f3a8:	1e2b      	subs	r3, r5, #0
 800f3aa:	bfbb      	ittet	lt
 800f3ac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f3b0:	9303      	strlt	r3, [sp, #12]
 800f3b2:	2300      	movge	r3, #0
 800f3b4:	2201      	movlt	r2, #1
 800f3b6:	bfac      	ite	ge
 800f3b8:	6033      	strge	r3, [r6, #0]
 800f3ba:	6032      	strlt	r2, [r6, #0]
 800f3bc:	4b90      	ldr	r3, [pc, #576]	@ (800f600 <_dtoa_r+0x2b8>)
 800f3be:	9e03      	ldr	r6, [sp, #12]
 800f3c0:	43b3      	bics	r3, r6
 800f3c2:	d110      	bne.n	800f3e6 <_dtoa_r+0x9e>
 800f3c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3c6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f3ca:	6013      	str	r3, [r2, #0]
 800f3cc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f3d0:	4323      	orrs	r3, r4
 800f3d2:	f000 84e6 	beq.w	800fda2 <_dtoa_r+0xa5a>
 800f3d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f3d8:	4f8a      	ldr	r7, [pc, #552]	@ (800f604 <_dtoa_r+0x2bc>)
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f000 84e8 	beq.w	800fdb0 <_dtoa_r+0xa68>
 800f3e0:	1cfb      	adds	r3, r7, #3
 800f3e2:	f000 bce3 	b.w	800fdac <_dtoa_r+0xa64>
 800f3e6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f3ea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f2:	d10a      	bne.n	800f40a <_dtoa_r+0xc2>
 800f3f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	6013      	str	r3, [r2, #0]
 800f3fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f3fc:	b113      	cbz	r3, 800f404 <_dtoa_r+0xbc>
 800f3fe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f400:	4b81      	ldr	r3, [pc, #516]	@ (800f608 <_dtoa_r+0x2c0>)
 800f402:	6013      	str	r3, [r2, #0]
 800f404:	4f81      	ldr	r7, [pc, #516]	@ (800f60c <_dtoa_r+0x2c4>)
 800f406:	f000 bcd3 	b.w	800fdb0 <_dtoa_r+0xa68>
 800f40a:	aa0e      	add	r2, sp, #56	@ 0x38
 800f40c:	a90f      	add	r1, sp, #60	@ 0x3c
 800f40e:	4648      	mov	r0, r9
 800f410:	eeb0 0b48 	vmov.f64	d0, d8
 800f414:	f001 f918 	bl	8010648 <__d2b>
 800f418:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f41c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f41e:	9001      	str	r0, [sp, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d045      	beq.n	800f4b0 <_dtoa_r+0x168>
 800f424:	eeb0 7b48 	vmov.f64	d7, d8
 800f428:	ee18 1a90 	vmov	r1, s17
 800f42c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f430:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f434:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f438:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f43c:	2500      	movs	r5, #0
 800f43e:	ee07 1a90 	vmov	s15, r1
 800f442:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f446:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f5e0 <_dtoa_r+0x298>
 800f44a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f44e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f5e8 <_dtoa_r+0x2a0>
 800f452:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f456:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f5f0 <_dtoa_r+0x2a8>
 800f45a:	ee07 3a90 	vmov	s15, r3
 800f45e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f462:	eeb0 7b46 	vmov.f64	d7, d6
 800f466:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f46a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f46e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	ee16 8a90 	vmov	r8, s13
 800f47a:	d508      	bpl.n	800f48e <_dtoa_r+0x146>
 800f47c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f480:	eeb4 6b47 	vcmp.f64	d6, d7
 800f484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f488:	bf18      	it	ne
 800f48a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f48e:	f1b8 0f16 	cmp.w	r8, #22
 800f492:	d82b      	bhi.n	800f4ec <_dtoa_r+0x1a4>
 800f494:	495e      	ldr	r1, [pc, #376]	@ (800f610 <_dtoa_r+0x2c8>)
 800f496:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f49a:	ed91 7b00 	vldr	d7, [r1]
 800f49e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a6:	d501      	bpl.n	800f4ac <_dtoa_r+0x164>
 800f4a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	e01e      	b.n	800f4ee <_dtoa_r+0x1a6>
 800f4b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4b2:	4413      	add	r3, r2
 800f4b4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f4b8:	2920      	cmp	r1, #32
 800f4ba:	bfc1      	itttt	gt
 800f4bc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f4c0:	408e      	lslgt	r6, r1
 800f4c2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f4c6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f4ca:	bfd6      	itet	le
 800f4cc:	f1c1 0120 	rsble	r1, r1, #32
 800f4d0:	4331      	orrgt	r1, r6
 800f4d2:	fa04 f101 	lslle.w	r1, r4, r1
 800f4d6:	ee07 1a90 	vmov	s15, r1
 800f4da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f4de:	3b01      	subs	r3, #1
 800f4e0:	ee17 1a90 	vmov	r1, s15
 800f4e4:	2501      	movs	r5, #1
 800f4e6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f4ea:	e7a8      	b.n	800f43e <_dtoa_r+0xf6>
 800f4ec:	2101      	movs	r1, #1
 800f4ee:	1ad2      	subs	r2, r2, r3
 800f4f0:	1e53      	subs	r3, r2, #1
 800f4f2:	9306      	str	r3, [sp, #24]
 800f4f4:	bf45      	ittet	mi
 800f4f6:	f1c2 0301 	rsbmi	r3, r2, #1
 800f4fa:	9304      	strmi	r3, [sp, #16]
 800f4fc:	2300      	movpl	r3, #0
 800f4fe:	2300      	movmi	r3, #0
 800f500:	bf4c      	ite	mi
 800f502:	9306      	strmi	r3, [sp, #24]
 800f504:	9304      	strpl	r3, [sp, #16]
 800f506:	f1b8 0f00 	cmp.w	r8, #0
 800f50a:	910c      	str	r1, [sp, #48]	@ 0x30
 800f50c:	db18      	blt.n	800f540 <_dtoa_r+0x1f8>
 800f50e:	9b06      	ldr	r3, [sp, #24]
 800f510:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f514:	4443      	add	r3, r8
 800f516:	9306      	str	r3, [sp, #24]
 800f518:	2300      	movs	r3, #0
 800f51a:	9a07      	ldr	r2, [sp, #28]
 800f51c:	2a09      	cmp	r2, #9
 800f51e:	d845      	bhi.n	800f5ac <_dtoa_r+0x264>
 800f520:	2a05      	cmp	r2, #5
 800f522:	bfc4      	itt	gt
 800f524:	3a04      	subgt	r2, #4
 800f526:	9207      	strgt	r2, [sp, #28]
 800f528:	9a07      	ldr	r2, [sp, #28]
 800f52a:	f1a2 0202 	sub.w	r2, r2, #2
 800f52e:	bfcc      	ite	gt
 800f530:	2400      	movgt	r4, #0
 800f532:	2401      	movle	r4, #1
 800f534:	2a03      	cmp	r2, #3
 800f536:	d844      	bhi.n	800f5c2 <_dtoa_r+0x27a>
 800f538:	e8df f002 	tbb	[pc, r2]
 800f53c:	0b173634 	.word	0x0b173634
 800f540:	9b04      	ldr	r3, [sp, #16]
 800f542:	2200      	movs	r2, #0
 800f544:	eba3 0308 	sub.w	r3, r3, r8
 800f548:	9304      	str	r3, [sp, #16]
 800f54a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f54c:	f1c8 0300 	rsb	r3, r8, #0
 800f550:	e7e3      	b.n	800f51a <_dtoa_r+0x1d2>
 800f552:	2201      	movs	r2, #1
 800f554:	9208      	str	r2, [sp, #32]
 800f556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f558:	eb08 0b02 	add.w	fp, r8, r2
 800f55c:	f10b 0a01 	add.w	sl, fp, #1
 800f560:	4652      	mov	r2, sl
 800f562:	2a01      	cmp	r2, #1
 800f564:	bfb8      	it	lt
 800f566:	2201      	movlt	r2, #1
 800f568:	e006      	b.n	800f578 <_dtoa_r+0x230>
 800f56a:	2201      	movs	r2, #1
 800f56c:	9208      	str	r2, [sp, #32]
 800f56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f570:	2a00      	cmp	r2, #0
 800f572:	dd29      	ble.n	800f5c8 <_dtoa_r+0x280>
 800f574:	4693      	mov	fp, r2
 800f576:	4692      	mov	sl, r2
 800f578:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f57c:	2100      	movs	r1, #0
 800f57e:	2004      	movs	r0, #4
 800f580:	f100 0614 	add.w	r6, r0, #20
 800f584:	4296      	cmp	r6, r2
 800f586:	d926      	bls.n	800f5d6 <_dtoa_r+0x28e>
 800f588:	6079      	str	r1, [r7, #4]
 800f58a:	4648      	mov	r0, r9
 800f58c:	9305      	str	r3, [sp, #20]
 800f58e:	f000 fd39 	bl	8010004 <_Balloc>
 800f592:	9b05      	ldr	r3, [sp, #20]
 800f594:	4607      	mov	r7, r0
 800f596:	2800      	cmp	r0, #0
 800f598:	d13e      	bne.n	800f618 <_dtoa_r+0x2d0>
 800f59a:	4b1e      	ldr	r3, [pc, #120]	@ (800f614 <_dtoa_r+0x2cc>)
 800f59c:	4602      	mov	r2, r0
 800f59e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f5a2:	e6ea      	b.n	800f37a <_dtoa_r+0x32>
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	e7e1      	b.n	800f56c <_dtoa_r+0x224>
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	e7d3      	b.n	800f554 <_dtoa_r+0x20c>
 800f5ac:	2401      	movs	r4, #1
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f5b4:	f04f 3bff 	mov.w	fp, #4294967295
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	46da      	mov	sl, fp
 800f5bc:	2212      	movs	r2, #18
 800f5be:	9109      	str	r1, [sp, #36]	@ 0x24
 800f5c0:	e7da      	b.n	800f578 <_dtoa_r+0x230>
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	9208      	str	r2, [sp, #32]
 800f5c6:	e7f5      	b.n	800f5b4 <_dtoa_r+0x26c>
 800f5c8:	f04f 0b01 	mov.w	fp, #1
 800f5cc:	46da      	mov	sl, fp
 800f5ce:	465a      	mov	r2, fp
 800f5d0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f5d4:	e7d0      	b.n	800f578 <_dtoa_r+0x230>
 800f5d6:	3101      	adds	r1, #1
 800f5d8:	0040      	lsls	r0, r0, #1
 800f5da:	e7d1      	b.n	800f580 <_dtoa_r+0x238>
 800f5dc:	f3af 8000 	nop.w
 800f5e0:	636f4361 	.word	0x636f4361
 800f5e4:	3fd287a7 	.word	0x3fd287a7
 800f5e8:	8b60c8b3 	.word	0x8b60c8b3
 800f5ec:	3fc68a28 	.word	0x3fc68a28
 800f5f0:	509f79fb 	.word	0x509f79fb
 800f5f4:	3fd34413 	.word	0x3fd34413
 800f5f8:	080114e1 	.word	0x080114e1
 800f5fc:	080114f8 	.word	0x080114f8
 800f600:	7ff00000 	.word	0x7ff00000
 800f604:	080114dd 	.word	0x080114dd
 800f608:	080114b1 	.word	0x080114b1
 800f60c:	080114b0 	.word	0x080114b0
 800f610:	08011648 	.word	0x08011648
 800f614:	08011550 	.word	0x08011550
 800f618:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f61c:	f1ba 0f0e 	cmp.w	sl, #14
 800f620:	6010      	str	r0, [r2, #0]
 800f622:	d86e      	bhi.n	800f702 <_dtoa_r+0x3ba>
 800f624:	2c00      	cmp	r4, #0
 800f626:	d06c      	beq.n	800f702 <_dtoa_r+0x3ba>
 800f628:	f1b8 0f00 	cmp.w	r8, #0
 800f62c:	f340 80b4 	ble.w	800f798 <_dtoa_r+0x450>
 800f630:	4ac8      	ldr	r2, [pc, #800]	@ (800f954 <_dtoa_r+0x60c>)
 800f632:	f008 010f 	and.w	r1, r8, #15
 800f636:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f63a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f63e:	ed92 7b00 	vldr	d7, [r2]
 800f642:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f646:	f000 809b 	beq.w	800f780 <_dtoa_r+0x438>
 800f64a:	4ac3      	ldr	r2, [pc, #780]	@ (800f958 <_dtoa_r+0x610>)
 800f64c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f650:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f654:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f658:	f001 010f 	and.w	r1, r1, #15
 800f65c:	2203      	movs	r2, #3
 800f65e:	48be      	ldr	r0, [pc, #760]	@ (800f958 <_dtoa_r+0x610>)
 800f660:	2900      	cmp	r1, #0
 800f662:	f040 808f 	bne.w	800f784 <_dtoa_r+0x43c>
 800f666:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f66a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f66e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f672:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f674:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f678:	2900      	cmp	r1, #0
 800f67a:	f000 80b3 	beq.w	800f7e4 <_dtoa_r+0x49c>
 800f67e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f682:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68a:	f140 80ab 	bpl.w	800f7e4 <_dtoa_r+0x49c>
 800f68e:	f1ba 0f00 	cmp.w	sl, #0
 800f692:	f000 80a7 	beq.w	800f7e4 <_dtoa_r+0x49c>
 800f696:	f1bb 0f00 	cmp.w	fp, #0
 800f69a:	dd30      	ble.n	800f6fe <_dtoa_r+0x3b6>
 800f69c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f6a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6a8:	f108 31ff 	add.w	r1, r8, #4294967295
 800f6ac:	9105      	str	r1, [sp, #20]
 800f6ae:	3201      	adds	r2, #1
 800f6b0:	465c      	mov	r4, fp
 800f6b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f6b6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f6ba:	ee07 2a90 	vmov	s15, r2
 800f6be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f6c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f6c6:	ee15 2a90 	vmov	r2, s11
 800f6ca:	ec51 0b15 	vmov	r0, r1, d5
 800f6ce:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f6d2:	2c00      	cmp	r4, #0
 800f6d4:	f040 808a 	bne.w	800f7ec <_dtoa_r+0x4a4>
 800f6d8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f6dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f6e0:	ec41 0b17 	vmov	d7, r0, r1
 800f6e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ec:	f300 826a 	bgt.w	800fbc4 <_dtoa_r+0x87c>
 800f6f0:	eeb1 7b47 	vneg.f64	d7, d7
 800f6f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fc:	d423      	bmi.n	800f746 <_dtoa_r+0x3fe>
 800f6fe:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f702:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f704:	2a00      	cmp	r2, #0
 800f706:	f2c0 8129 	blt.w	800f95c <_dtoa_r+0x614>
 800f70a:	f1b8 0f0e 	cmp.w	r8, #14
 800f70e:	f300 8125 	bgt.w	800f95c <_dtoa_r+0x614>
 800f712:	4b90      	ldr	r3, [pc, #576]	@ (800f954 <_dtoa_r+0x60c>)
 800f714:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f718:	ed93 6b00 	vldr	d6, [r3]
 800f71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f280 80c8 	bge.w	800f8b4 <_dtoa_r+0x56c>
 800f724:	f1ba 0f00 	cmp.w	sl, #0
 800f728:	f300 80c4 	bgt.w	800f8b4 <_dtoa_r+0x56c>
 800f72c:	d10b      	bne.n	800f746 <_dtoa_r+0x3fe>
 800f72e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f732:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f736:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f73a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f742:	f2c0 823c 	blt.w	800fbbe <_dtoa_r+0x876>
 800f746:	2400      	movs	r4, #0
 800f748:	4625      	mov	r5, r4
 800f74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f74c:	43db      	mvns	r3, r3
 800f74e:	9305      	str	r3, [sp, #20]
 800f750:	463e      	mov	r6, r7
 800f752:	f04f 0800 	mov.w	r8, #0
 800f756:	4621      	mov	r1, r4
 800f758:	4648      	mov	r0, r9
 800f75a:	f000 fc93 	bl	8010084 <_Bfree>
 800f75e:	2d00      	cmp	r5, #0
 800f760:	f000 80a2 	beq.w	800f8a8 <_dtoa_r+0x560>
 800f764:	f1b8 0f00 	cmp.w	r8, #0
 800f768:	d005      	beq.n	800f776 <_dtoa_r+0x42e>
 800f76a:	45a8      	cmp	r8, r5
 800f76c:	d003      	beq.n	800f776 <_dtoa_r+0x42e>
 800f76e:	4641      	mov	r1, r8
 800f770:	4648      	mov	r0, r9
 800f772:	f000 fc87 	bl	8010084 <_Bfree>
 800f776:	4629      	mov	r1, r5
 800f778:	4648      	mov	r0, r9
 800f77a:	f000 fc83 	bl	8010084 <_Bfree>
 800f77e:	e093      	b.n	800f8a8 <_dtoa_r+0x560>
 800f780:	2202      	movs	r2, #2
 800f782:	e76c      	b.n	800f65e <_dtoa_r+0x316>
 800f784:	07cc      	lsls	r4, r1, #31
 800f786:	d504      	bpl.n	800f792 <_dtoa_r+0x44a>
 800f788:	ed90 6b00 	vldr	d6, [r0]
 800f78c:	3201      	adds	r2, #1
 800f78e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f792:	1049      	asrs	r1, r1, #1
 800f794:	3008      	adds	r0, #8
 800f796:	e763      	b.n	800f660 <_dtoa_r+0x318>
 800f798:	d022      	beq.n	800f7e0 <_dtoa_r+0x498>
 800f79a:	f1c8 0100 	rsb	r1, r8, #0
 800f79e:	4a6d      	ldr	r2, [pc, #436]	@ (800f954 <_dtoa_r+0x60c>)
 800f7a0:	f001 000f 	and.w	r0, r1, #15
 800f7a4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f7a8:	ed92 7b00 	vldr	d7, [r2]
 800f7ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f7b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7b4:	4868      	ldr	r0, [pc, #416]	@ (800f958 <_dtoa_r+0x610>)
 800f7b6:	1109      	asrs	r1, r1, #4
 800f7b8:	2400      	movs	r4, #0
 800f7ba:	2202      	movs	r2, #2
 800f7bc:	b929      	cbnz	r1, 800f7ca <_dtoa_r+0x482>
 800f7be:	2c00      	cmp	r4, #0
 800f7c0:	f43f af57 	beq.w	800f672 <_dtoa_r+0x32a>
 800f7c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7c8:	e753      	b.n	800f672 <_dtoa_r+0x32a>
 800f7ca:	07ce      	lsls	r6, r1, #31
 800f7cc:	d505      	bpl.n	800f7da <_dtoa_r+0x492>
 800f7ce:	ed90 6b00 	vldr	d6, [r0]
 800f7d2:	3201      	adds	r2, #1
 800f7d4:	2401      	movs	r4, #1
 800f7d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f7da:	1049      	asrs	r1, r1, #1
 800f7dc:	3008      	adds	r0, #8
 800f7de:	e7ed      	b.n	800f7bc <_dtoa_r+0x474>
 800f7e0:	2202      	movs	r2, #2
 800f7e2:	e746      	b.n	800f672 <_dtoa_r+0x32a>
 800f7e4:	f8cd 8014 	str.w	r8, [sp, #20]
 800f7e8:	4654      	mov	r4, sl
 800f7ea:	e762      	b.n	800f6b2 <_dtoa_r+0x36a>
 800f7ec:	4a59      	ldr	r2, [pc, #356]	@ (800f954 <_dtoa_r+0x60c>)
 800f7ee:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f7f2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f7f6:	9a08      	ldr	r2, [sp, #32]
 800f7f8:	ec41 0b17 	vmov	d7, r0, r1
 800f7fc:	443c      	add	r4, r7
 800f7fe:	b34a      	cbz	r2, 800f854 <_dtoa_r+0x50c>
 800f800:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f804:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f808:	463e      	mov	r6, r7
 800f80a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f80e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f812:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f816:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f81a:	ee14 2a90 	vmov	r2, s9
 800f81e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f822:	3230      	adds	r2, #48	@ 0x30
 800f824:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f828:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f830:	f806 2b01 	strb.w	r2, [r6], #1
 800f834:	d438      	bmi.n	800f8a8 <_dtoa_r+0x560>
 800f836:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f83a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f842:	d46e      	bmi.n	800f922 <_dtoa_r+0x5da>
 800f844:	42a6      	cmp	r6, r4
 800f846:	f43f af5a 	beq.w	800f6fe <_dtoa_r+0x3b6>
 800f84a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f84e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f852:	e7e0      	b.n	800f816 <_dtoa_r+0x4ce>
 800f854:	4621      	mov	r1, r4
 800f856:	463e      	mov	r6, r7
 800f858:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f85c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f860:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f864:	ee14 2a90 	vmov	r2, s9
 800f868:	3230      	adds	r2, #48	@ 0x30
 800f86a:	f806 2b01 	strb.w	r2, [r6], #1
 800f86e:	42a6      	cmp	r6, r4
 800f870:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f874:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f878:	d119      	bne.n	800f8ae <_dtoa_r+0x566>
 800f87a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f87e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f882:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f88a:	dc4a      	bgt.n	800f922 <_dtoa_r+0x5da>
 800f88c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f890:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f898:	f57f af31 	bpl.w	800f6fe <_dtoa_r+0x3b6>
 800f89c:	460e      	mov	r6, r1
 800f89e:	3901      	subs	r1, #1
 800f8a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f8a4:	2b30      	cmp	r3, #48	@ 0x30
 800f8a6:	d0f9      	beq.n	800f89c <_dtoa_r+0x554>
 800f8a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f8ac:	e027      	b.n	800f8fe <_dtoa_r+0x5b6>
 800f8ae:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f8b2:	e7d5      	b.n	800f860 <_dtoa_r+0x518>
 800f8b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8b8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f8bc:	463e      	mov	r6, r7
 800f8be:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f8c2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f8c6:	ee15 3a10 	vmov	r3, s10
 800f8ca:	3330      	adds	r3, #48	@ 0x30
 800f8cc:	f806 3b01 	strb.w	r3, [r6], #1
 800f8d0:	1bf3      	subs	r3, r6, r7
 800f8d2:	459a      	cmp	sl, r3
 800f8d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f8d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f8dc:	d132      	bne.n	800f944 <_dtoa_r+0x5fc>
 800f8de:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f8e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ea:	dc18      	bgt.n	800f91e <_dtoa_r+0x5d6>
 800f8ec:	eeb4 7b46 	vcmp.f64	d7, d6
 800f8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f4:	d103      	bne.n	800f8fe <_dtoa_r+0x5b6>
 800f8f6:	ee15 3a10 	vmov	r3, s10
 800f8fa:	07db      	lsls	r3, r3, #31
 800f8fc:	d40f      	bmi.n	800f91e <_dtoa_r+0x5d6>
 800f8fe:	9901      	ldr	r1, [sp, #4]
 800f900:	4648      	mov	r0, r9
 800f902:	f000 fbbf 	bl	8010084 <_Bfree>
 800f906:	2300      	movs	r3, #0
 800f908:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f90a:	7033      	strb	r3, [r6, #0]
 800f90c:	f108 0301 	add.w	r3, r8, #1
 800f910:	6013      	str	r3, [r2, #0]
 800f912:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f914:	2b00      	cmp	r3, #0
 800f916:	f000 824b 	beq.w	800fdb0 <_dtoa_r+0xa68>
 800f91a:	601e      	str	r6, [r3, #0]
 800f91c:	e248      	b.n	800fdb0 <_dtoa_r+0xa68>
 800f91e:	f8cd 8014 	str.w	r8, [sp, #20]
 800f922:	4633      	mov	r3, r6
 800f924:	461e      	mov	r6, r3
 800f926:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f92a:	2a39      	cmp	r2, #57	@ 0x39
 800f92c:	d106      	bne.n	800f93c <_dtoa_r+0x5f4>
 800f92e:	429f      	cmp	r7, r3
 800f930:	d1f8      	bne.n	800f924 <_dtoa_r+0x5dc>
 800f932:	9a05      	ldr	r2, [sp, #20]
 800f934:	3201      	adds	r2, #1
 800f936:	9205      	str	r2, [sp, #20]
 800f938:	2230      	movs	r2, #48	@ 0x30
 800f93a:	703a      	strb	r2, [r7, #0]
 800f93c:	781a      	ldrb	r2, [r3, #0]
 800f93e:	3201      	adds	r2, #1
 800f940:	701a      	strb	r2, [r3, #0]
 800f942:	e7b1      	b.n	800f8a8 <_dtoa_r+0x560>
 800f944:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f948:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f950:	d1b5      	bne.n	800f8be <_dtoa_r+0x576>
 800f952:	e7d4      	b.n	800f8fe <_dtoa_r+0x5b6>
 800f954:	08011648 	.word	0x08011648
 800f958:	08011620 	.word	0x08011620
 800f95c:	9908      	ldr	r1, [sp, #32]
 800f95e:	2900      	cmp	r1, #0
 800f960:	f000 80e9 	beq.w	800fb36 <_dtoa_r+0x7ee>
 800f964:	9907      	ldr	r1, [sp, #28]
 800f966:	2901      	cmp	r1, #1
 800f968:	f300 80cb 	bgt.w	800fb02 <_dtoa_r+0x7ba>
 800f96c:	2d00      	cmp	r5, #0
 800f96e:	f000 80c4 	beq.w	800fafa <_dtoa_r+0x7b2>
 800f972:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f976:	9e04      	ldr	r6, [sp, #16]
 800f978:	461c      	mov	r4, r3
 800f97a:	9305      	str	r3, [sp, #20]
 800f97c:	9b04      	ldr	r3, [sp, #16]
 800f97e:	4413      	add	r3, r2
 800f980:	9304      	str	r3, [sp, #16]
 800f982:	9b06      	ldr	r3, [sp, #24]
 800f984:	2101      	movs	r1, #1
 800f986:	4413      	add	r3, r2
 800f988:	4648      	mov	r0, r9
 800f98a:	9306      	str	r3, [sp, #24]
 800f98c:	f000 fc2e 	bl	80101ec <__i2b>
 800f990:	9b05      	ldr	r3, [sp, #20]
 800f992:	4605      	mov	r5, r0
 800f994:	b166      	cbz	r6, 800f9b0 <_dtoa_r+0x668>
 800f996:	9a06      	ldr	r2, [sp, #24]
 800f998:	2a00      	cmp	r2, #0
 800f99a:	dd09      	ble.n	800f9b0 <_dtoa_r+0x668>
 800f99c:	42b2      	cmp	r2, r6
 800f99e:	9904      	ldr	r1, [sp, #16]
 800f9a0:	bfa8      	it	ge
 800f9a2:	4632      	movge	r2, r6
 800f9a4:	1a89      	subs	r1, r1, r2
 800f9a6:	9104      	str	r1, [sp, #16]
 800f9a8:	9906      	ldr	r1, [sp, #24]
 800f9aa:	1ab6      	subs	r6, r6, r2
 800f9ac:	1a8a      	subs	r2, r1, r2
 800f9ae:	9206      	str	r2, [sp, #24]
 800f9b0:	b30b      	cbz	r3, 800f9f6 <_dtoa_r+0x6ae>
 800f9b2:	9a08      	ldr	r2, [sp, #32]
 800f9b4:	2a00      	cmp	r2, #0
 800f9b6:	f000 80c5 	beq.w	800fb44 <_dtoa_r+0x7fc>
 800f9ba:	2c00      	cmp	r4, #0
 800f9bc:	f000 80bf 	beq.w	800fb3e <_dtoa_r+0x7f6>
 800f9c0:	4629      	mov	r1, r5
 800f9c2:	4622      	mov	r2, r4
 800f9c4:	4648      	mov	r0, r9
 800f9c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9c8:	f000 fcc8 	bl	801035c <__pow5mult>
 800f9cc:	9a01      	ldr	r2, [sp, #4]
 800f9ce:	4601      	mov	r1, r0
 800f9d0:	4605      	mov	r5, r0
 800f9d2:	4648      	mov	r0, r9
 800f9d4:	f000 fc20 	bl	8010218 <__multiply>
 800f9d8:	9901      	ldr	r1, [sp, #4]
 800f9da:	9005      	str	r0, [sp, #20]
 800f9dc:	4648      	mov	r0, r9
 800f9de:	f000 fb51 	bl	8010084 <_Bfree>
 800f9e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9e4:	1b1b      	subs	r3, r3, r4
 800f9e6:	f000 80b0 	beq.w	800fb4a <_dtoa_r+0x802>
 800f9ea:	9905      	ldr	r1, [sp, #20]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4648      	mov	r0, r9
 800f9f0:	f000 fcb4 	bl	801035c <__pow5mult>
 800f9f4:	9001      	str	r0, [sp, #4]
 800f9f6:	2101      	movs	r1, #1
 800f9f8:	4648      	mov	r0, r9
 800f9fa:	f000 fbf7 	bl	80101ec <__i2b>
 800f9fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa00:	4604      	mov	r4, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f000 81da 	beq.w	800fdbc <_dtoa_r+0xa74>
 800fa08:	461a      	mov	r2, r3
 800fa0a:	4601      	mov	r1, r0
 800fa0c:	4648      	mov	r0, r9
 800fa0e:	f000 fca5 	bl	801035c <__pow5mult>
 800fa12:	9b07      	ldr	r3, [sp, #28]
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	4604      	mov	r4, r0
 800fa18:	f300 80a0 	bgt.w	800fb5c <_dtoa_r+0x814>
 800fa1c:	9b02      	ldr	r3, [sp, #8]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f040 8096 	bne.w	800fb50 <_dtoa_r+0x808>
 800fa24:	9b03      	ldr	r3, [sp, #12]
 800fa26:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fa2a:	2a00      	cmp	r2, #0
 800fa2c:	f040 8092 	bne.w	800fb54 <_dtoa_r+0x80c>
 800fa30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fa34:	0d12      	lsrs	r2, r2, #20
 800fa36:	0512      	lsls	r2, r2, #20
 800fa38:	2a00      	cmp	r2, #0
 800fa3a:	f000 808d 	beq.w	800fb58 <_dtoa_r+0x810>
 800fa3e:	9b04      	ldr	r3, [sp, #16]
 800fa40:	3301      	adds	r3, #1
 800fa42:	9304      	str	r3, [sp, #16]
 800fa44:	9b06      	ldr	r3, [sp, #24]
 800fa46:	3301      	adds	r3, #1
 800fa48:	9306      	str	r3, [sp, #24]
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f000 81b9 	beq.w	800fdc8 <_dtoa_r+0xa80>
 800fa56:	6922      	ldr	r2, [r4, #16]
 800fa58:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fa5c:	6910      	ldr	r0, [r2, #16]
 800fa5e:	f000 fb79 	bl	8010154 <__hi0bits>
 800fa62:	f1c0 0020 	rsb	r0, r0, #32
 800fa66:	9b06      	ldr	r3, [sp, #24]
 800fa68:	4418      	add	r0, r3
 800fa6a:	f010 001f 	ands.w	r0, r0, #31
 800fa6e:	f000 8081 	beq.w	800fb74 <_dtoa_r+0x82c>
 800fa72:	f1c0 0220 	rsb	r2, r0, #32
 800fa76:	2a04      	cmp	r2, #4
 800fa78:	dd73      	ble.n	800fb62 <_dtoa_r+0x81a>
 800fa7a:	9b04      	ldr	r3, [sp, #16]
 800fa7c:	f1c0 001c 	rsb	r0, r0, #28
 800fa80:	4403      	add	r3, r0
 800fa82:	9304      	str	r3, [sp, #16]
 800fa84:	9b06      	ldr	r3, [sp, #24]
 800fa86:	4406      	add	r6, r0
 800fa88:	4403      	add	r3, r0
 800fa8a:	9306      	str	r3, [sp, #24]
 800fa8c:	9b04      	ldr	r3, [sp, #16]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	dd05      	ble.n	800fa9e <_dtoa_r+0x756>
 800fa92:	9901      	ldr	r1, [sp, #4]
 800fa94:	461a      	mov	r2, r3
 800fa96:	4648      	mov	r0, r9
 800fa98:	f000 fcba 	bl	8010410 <__lshift>
 800fa9c:	9001      	str	r0, [sp, #4]
 800fa9e:	9b06      	ldr	r3, [sp, #24]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	dd05      	ble.n	800fab0 <_dtoa_r+0x768>
 800faa4:	4621      	mov	r1, r4
 800faa6:	461a      	mov	r2, r3
 800faa8:	4648      	mov	r0, r9
 800faaa:	f000 fcb1 	bl	8010410 <__lshift>
 800faae:	4604      	mov	r4, r0
 800fab0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d060      	beq.n	800fb78 <_dtoa_r+0x830>
 800fab6:	9801      	ldr	r0, [sp, #4]
 800fab8:	4621      	mov	r1, r4
 800faba:	f000 fd15 	bl	80104e8 <__mcmp>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	da5a      	bge.n	800fb78 <_dtoa_r+0x830>
 800fac2:	f108 33ff 	add.w	r3, r8, #4294967295
 800fac6:	9305      	str	r3, [sp, #20]
 800fac8:	9901      	ldr	r1, [sp, #4]
 800faca:	2300      	movs	r3, #0
 800facc:	220a      	movs	r2, #10
 800face:	4648      	mov	r0, r9
 800fad0:	f000 fafa 	bl	80100c8 <__multadd>
 800fad4:	9b08      	ldr	r3, [sp, #32]
 800fad6:	9001      	str	r0, [sp, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 8177 	beq.w	800fdcc <_dtoa_r+0xa84>
 800fade:	4629      	mov	r1, r5
 800fae0:	2300      	movs	r3, #0
 800fae2:	220a      	movs	r2, #10
 800fae4:	4648      	mov	r0, r9
 800fae6:	f000 faef 	bl	80100c8 <__multadd>
 800faea:	f1bb 0f00 	cmp.w	fp, #0
 800faee:	4605      	mov	r5, r0
 800faf0:	dc6e      	bgt.n	800fbd0 <_dtoa_r+0x888>
 800faf2:	9b07      	ldr	r3, [sp, #28]
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	dc48      	bgt.n	800fb8a <_dtoa_r+0x842>
 800faf8:	e06a      	b.n	800fbd0 <_dtoa_r+0x888>
 800fafa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fafc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fb00:	e739      	b.n	800f976 <_dtoa_r+0x62e>
 800fb02:	f10a 34ff 	add.w	r4, sl, #4294967295
 800fb06:	42a3      	cmp	r3, r4
 800fb08:	db07      	blt.n	800fb1a <_dtoa_r+0x7d2>
 800fb0a:	f1ba 0f00 	cmp.w	sl, #0
 800fb0e:	eba3 0404 	sub.w	r4, r3, r4
 800fb12:	db0b      	blt.n	800fb2c <_dtoa_r+0x7e4>
 800fb14:	9e04      	ldr	r6, [sp, #16]
 800fb16:	4652      	mov	r2, sl
 800fb18:	e72f      	b.n	800f97a <_dtoa_r+0x632>
 800fb1a:	1ae2      	subs	r2, r4, r3
 800fb1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb1e:	9e04      	ldr	r6, [sp, #16]
 800fb20:	4413      	add	r3, r2
 800fb22:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb24:	4652      	mov	r2, sl
 800fb26:	4623      	mov	r3, r4
 800fb28:	2400      	movs	r4, #0
 800fb2a:	e726      	b.n	800f97a <_dtoa_r+0x632>
 800fb2c:	9a04      	ldr	r2, [sp, #16]
 800fb2e:	eba2 060a 	sub.w	r6, r2, sl
 800fb32:	2200      	movs	r2, #0
 800fb34:	e721      	b.n	800f97a <_dtoa_r+0x632>
 800fb36:	9e04      	ldr	r6, [sp, #16]
 800fb38:	9d08      	ldr	r5, [sp, #32]
 800fb3a:	461c      	mov	r4, r3
 800fb3c:	e72a      	b.n	800f994 <_dtoa_r+0x64c>
 800fb3e:	9a01      	ldr	r2, [sp, #4]
 800fb40:	9205      	str	r2, [sp, #20]
 800fb42:	e752      	b.n	800f9ea <_dtoa_r+0x6a2>
 800fb44:	9901      	ldr	r1, [sp, #4]
 800fb46:	461a      	mov	r2, r3
 800fb48:	e751      	b.n	800f9ee <_dtoa_r+0x6a6>
 800fb4a:	9b05      	ldr	r3, [sp, #20]
 800fb4c:	9301      	str	r3, [sp, #4]
 800fb4e:	e752      	b.n	800f9f6 <_dtoa_r+0x6ae>
 800fb50:	2300      	movs	r3, #0
 800fb52:	e77b      	b.n	800fa4c <_dtoa_r+0x704>
 800fb54:	9b02      	ldr	r3, [sp, #8]
 800fb56:	e779      	b.n	800fa4c <_dtoa_r+0x704>
 800fb58:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fb5a:	e778      	b.n	800fa4e <_dtoa_r+0x706>
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb60:	e779      	b.n	800fa56 <_dtoa_r+0x70e>
 800fb62:	d093      	beq.n	800fa8c <_dtoa_r+0x744>
 800fb64:	9b04      	ldr	r3, [sp, #16]
 800fb66:	321c      	adds	r2, #28
 800fb68:	4413      	add	r3, r2
 800fb6a:	9304      	str	r3, [sp, #16]
 800fb6c:	9b06      	ldr	r3, [sp, #24]
 800fb6e:	4416      	add	r6, r2
 800fb70:	4413      	add	r3, r2
 800fb72:	e78a      	b.n	800fa8a <_dtoa_r+0x742>
 800fb74:	4602      	mov	r2, r0
 800fb76:	e7f5      	b.n	800fb64 <_dtoa_r+0x81c>
 800fb78:	f1ba 0f00 	cmp.w	sl, #0
 800fb7c:	f8cd 8014 	str.w	r8, [sp, #20]
 800fb80:	46d3      	mov	fp, sl
 800fb82:	dc21      	bgt.n	800fbc8 <_dtoa_r+0x880>
 800fb84:	9b07      	ldr	r3, [sp, #28]
 800fb86:	2b02      	cmp	r3, #2
 800fb88:	dd1e      	ble.n	800fbc8 <_dtoa_r+0x880>
 800fb8a:	f1bb 0f00 	cmp.w	fp, #0
 800fb8e:	f47f addc 	bne.w	800f74a <_dtoa_r+0x402>
 800fb92:	4621      	mov	r1, r4
 800fb94:	465b      	mov	r3, fp
 800fb96:	2205      	movs	r2, #5
 800fb98:	4648      	mov	r0, r9
 800fb9a:	f000 fa95 	bl	80100c8 <__multadd>
 800fb9e:	4601      	mov	r1, r0
 800fba0:	4604      	mov	r4, r0
 800fba2:	9801      	ldr	r0, [sp, #4]
 800fba4:	f000 fca0 	bl	80104e8 <__mcmp>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	f77f adce 	ble.w	800f74a <_dtoa_r+0x402>
 800fbae:	463e      	mov	r6, r7
 800fbb0:	2331      	movs	r3, #49	@ 0x31
 800fbb2:	f806 3b01 	strb.w	r3, [r6], #1
 800fbb6:	9b05      	ldr	r3, [sp, #20]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	9305      	str	r3, [sp, #20]
 800fbbc:	e5c9      	b.n	800f752 <_dtoa_r+0x40a>
 800fbbe:	f8cd 8014 	str.w	r8, [sp, #20]
 800fbc2:	4654      	mov	r4, sl
 800fbc4:	4625      	mov	r5, r4
 800fbc6:	e7f2      	b.n	800fbae <_dtoa_r+0x866>
 800fbc8:	9b08      	ldr	r3, [sp, #32]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 8102 	beq.w	800fdd4 <_dtoa_r+0xa8c>
 800fbd0:	2e00      	cmp	r6, #0
 800fbd2:	dd05      	ble.n	800fbe0 <_dtoa_r+0x898>
 800fbd4:	4629      	mov	r1, r5
 800fbd6:	4632      	mov	r2, r6
 800fbd8:	4648      	mov	r0, r9
 800fbda:	f000 fc19 	bl	8010410 <__lshift>
 800fbde:	4605      	mov	r5, r0
 800fbe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d058      	beq.n	800fc98 <_dtoa_r+0x950>
 800fbe6:	6869      	ldr	r1, [r5, #4]
 800fbe8:	4648      	mov	r0, r9
 800fbea:	f000 fa0b 	bl	8010004 <_Balloc>
 800fbee:	4606      	mov	r6, r0
 800fbf0:	b928      	cbnz	r0, 800fbfe <_dtoa_r+0x8b6>
 800fbf2:	4b82      	ldr	r3, [pc, #520]	@ (800fdfc <_dtoa_r+0xab4>)
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fbfa:	f7ff bbbe 	b.w	800f37a <_dtoa_r+0x32>
 800fbfe:	692a      	ldr	r2, [r5, #16]
 800fc00:	3202      	adds	r2, #2
 800fc02:	0092      	lsls	r2, r2, #2
 800fc04:	f105 010c 	add.w	r1, r5, #12
 800fc08:	300c      	adds	r0, #12
 800fc0a:	f7ff fb06 	bl	800f21a <memcpy>
 800fc0e:	2201      	movs	r2, #1
 800fc10:	4631      	mov	r1, r6
 800fc12:	4648      	mov	r0, r9
 800fc14:	f000 fbfc 	bl	8010410 <__lshift>
 800fc18:	1c7b      	adds	r3, r7, #1
 800fc1a:	9304      	str	r3, [sp, #16]
 800fc1c:	eb07 030b 	add.w	r3, r7, fp
 800fc20:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc22:	9b02      	ldr	r3, [sp, #8]
 800fc24:	f003 0301 	and.w	r3, r3, #1
 800fc28:	46a8      	mov	r8, r5
 800fc2a:	9308      	str	r3, [sp, #32]
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	9b04      	ldr	r3, [sp, #16]
 800fc30:	9801      	ldr	r0, [sp, #4]
 800fc32:	4621      	mov	r1, r4
 800fc34:	f103 3bff 	add.w	fp, r3, #4294967295
 800fc38:	f7ff fafd 	bl	800f236 <quorem>
 800fc3c:	4641      	mov	r1, r8
 800fc3e:	9002      	str	r0, [sp, #8]
 800fc40:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fc44:	9801      	ldr	r0, [sp, #4]
 800fc46:	f000 fc4f 	bl	80104e8 <__mcmp>
 800fc4a:	462a      	mov	r2, r5
 800fc4c:	9006      	str	r0, [sp, #24]
 800fc4e:	4621      	mov	r1, r4
 800fc50:	4648      	mov	r0, r9
 800fc52:	f000 fc65 	bl	8010520 <__mdiff>
 800fc56:	68c2      	ldr	r2, [r0, #12]
 800fc58:	4606      	mov	r6, r0
 800fc5a:	b9fa      	cbnz	r2, 800fc9c <_dtoa_r+0x954>
 800fc5c:	4601      	mov	r1, r0
 800fc5e:	9801      	ldr	r0, [sp, #4]
 800fc60:	f000 fc42 	bl	80104e8 <__mcmp>
 800fc64:	4602      	mov	r2, r0
 800fc66:	4631      	mov	r1, r6
 800fc68:	4648      	mov	r0, r9
 800fc6a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fc6c:	f000 fa0a 	bl	8010084 <_Bfree>
 800fc70:	9b07      	ldr	r3, [sp, #28]
 800fc72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc74:	9e04      	ldr	r6, [sp, #16]
 800fc76:	ea42 0103 	orr.w	r1, r2, r3
 800fc7a:	9b08      	ldr	r3, [sp, #32]
 800fc7c:	4319      	orrs	r1, r3
 800fc7e:	d10f      	bne.n	800fca0 <_dtoa_r+0x958>
 800fc80:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fc84:	d028      	beq.n	800fcd8 <_dtoa_r+0x990>
 800fc86:	9b06      	ldr	r3, [sp, #24]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	dd02      	ble.n	800fc92 <_dtoa_r+0x94a>
 800fc8c:	9b02      	ldr	r3, [sp, #8]
 800fc8e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fc92:	f88b a000 	strb.w	sl, [fp]
 800fc96:	e55e      	b.n	800f756 <_dtoa_r+0x40e>
 800fc98:	4628      	mov	r0, r5
 800fc9a:	e7bd      	b.n	800fc18 <_dtoa_r+0x8d0>
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	e7e2      	b.n	800fc66 <_dtoa_r+0x91e>
 800fca0:	9b06      	ldr	r3, [sp, #24]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	db04      	blt.n	800fcb0 <_dtoa_r+0x968>
 800fca6:	9907      	ldr	r1, [sp, #28]
 800fca8:	430b      	orrs	r3, r1
 800fcaa:	9908      	ldr	r1, [sp, #32]
 800fcac:	430b      	orrs	r3, r1
 800fcae:	d120      	bne.n	800fcf2 <_dtoa_r+0x9aa>
 800fcb0:	2a00      	cmp	r2, #0
 800fcb2:	ddee      	ble.n	800fc92 <_dtoa_r+0x94a>
 800fcb4:	9901      	ldr	r1, [sp, #4]
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	4648      	mov	r0, r9
 800fcba:	f000 fba9 	bl	8010410 <__lshift>
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	9001      	str	r0, [sp, #4]
 800fcc2:	f000 fc11 	bl	80104e8 <__mcmp>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	dc03      	bgt.n	800fcd2 <_dtoa_r+0x98a>
 800fcca:	d1e2      	bne.n	800fc92 <_dtoa_r+0x94a>
 800fccc:	f01a 0f01 	tst.w	sl, #1
 800fcd0:	d0df      	beq.n	800fc92 <_dtoa_r+0x94a>
 800fcd2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fcd6:	d1d9      	bne.n	800fc8c <_dtoa_r+0x944>
 800fcd8:	2339      	movs	r3, #57	@ 0x39
 800fcda:	f88b 3000 	strb.w	r3, [fp]
 800fcde:	4633      	mov	r3, r6
 800fce0:	461e      	mov	r6, r3
 800fce2:	3b01      	subs	r3, #1
 800fce4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fce8:	2a39      	cmp	r2, #57	@ 0x39
 800fcea:	d052      	beq.n	800fd92 <_dtoa_r+0xa4a>
 800fcec:	3201      	adds	r2, #1
 800fcee:	701a      	strb	r2, [r3, #0]
 800fcf0:	e531      	b.n	800f756 <_dtoa_r+0x40e>
 800fcf2:	2a00      	cmp	r2, #0
 800fcf4:	dd07      	ble.n	800fd06 <_dtoa_r+0x9be>
 800fcf6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fcfa:	d0ed      	beq.n	800fcd8 <_dtoa_r+0x990>
 800fcfc:	f10a 0301 	add.w	r3, sl, #1
 800fd00:	f88b 3000 	strb.w	r3, [fp]
 800fd04:	e527      	b.n	800f756 <_dtoa_r+0x40e>
 800fd06:	9b04      	ldr	r3, [sp, #16]
 800fd08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd0a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d029      	beq.n	800fd66 <_dtoa_r+0xa1e>
 800fd12:	9901      	ldr	r1, [sp, #4]
 800fd14:	2300      	movs	r3, #0
 800fd16:	220a      	movs	r2, #10
 800fd18:	4648      	mov	r0, r9
 800fd1a:	f000 f9d5 	bl	80100c8 <__multadd>
 800fd1e:	45a8      	cmp	r8, r5
 800fd20:	9001      	str	r0, [sp, #4]
 800fd22:	f04f 0300 	mov.w	r3, #0
 800fd26:	f04f 020a 	mov.w	r2, #10
 800fd2a:	4641      	mov	r1, r8
 800fd2c:	4648      	mov	r0, r9
 800fd2e:	d107      	bne.n	800fd40 <_dtoa_r+0x9f8>
 800fd30:	f000 f9ca 	bl	80100c8 <__multadd>
 800fd34:	4680      	mov	r8, r0
 800fd36:	4605      	mov	r5, r0
 800fd38:	9b04      	ldr	r3, [sp, #16]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	9304      	str	r3, [sp, #16]
 800fd3e:	e776      	b.n	800fc2e <_dtoa_r+0x8e6>
 800fd40:	f000 f9c2 	bl	80100c8 <__multadd>
 800fd44:	4629      	mov	r1, r5
 800fd46:	4680      	mov	r8, r0
 800fd48:	2300      	movs	r3, #0
 800fd4a:	220a      	movs	r2, #10
 800fd4c:	4648      	mov	r0, r9
 800fd4e:	f000 f9bb 	bl	80100c8 <__multadd>
 800fd52:	4605      	mov	r5, r0
 800fd54:	e7f0      	b.n	800fd38 <_dtoa_r+0x9f0>
 800fd56:	f1bb 0f00 	cmp.w	fp, #0
 800fd5a:	bfcc      	ite	gt
 800fd5c:	465e      	movgt	r6, fp
 800fd5e:	2601      	movle	r6, #1
 800fd60:	443e      	add	r6, r7
 800fd62:	f04f 0800 	mov.w	r8, #0
 800fd66:	9901      	ldr	r1, [sp, #4]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	4648      	mov	r0, r9
 800fd6c:	f000 fb50 	bl	8010410 <__lshift>
 800fd70:	4621      	mov	r1, r4
 800fd72:	9001      	str	r0, [sp, #4]
 800fd74:	f000 fbb8 	bl	80104e8 <__mcmp>
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	dcb0      	bgt.n	800fcde <_dtoa_r+0x996>
 800fd7c:	d102      	bne.n	800fd84 <_dtoa_r+0xa3c>
 800fd7e:	f01a 0f01 	tst.w	sl, #1
 800fd82:	d1ac      	bne.n	800fcde <_dtoa_r+0x996>
 800fd84:	4633      	mov	r3, r6
 800fd86:	461e      	mov	r6, r3
 800fd88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd8c:	2a30      	cmp	r2, #48	@ 0x30
 800fd8e:	d0fa      	beq.n	800fd86 <_dtoa_r+0xa3e>
 800fd90:	e4e1      	b.n	800f756 <_dtoa_r+0x40e>
 800fd92:	429f      	cmp	r7, r3
 800fd94:	d1a4      	bne.n	800fce0 <_dtoa_r+0x998>
 800fd96:	9b05      	ldr	r3, [sp, #20]
 800fd98:	3301      	adds	r3, #1
 800fd9a:	9305      	str	r3, [sp, #20]
 800fd9c:	2331      	movs	r3, #49	@ 0x31
 800fd9e:	703b      	strb	r3, [r7, #0]
 800fda0:	e4d9      	b.n	800f756 <_dtoa_r+0x40e>
 800fda2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fda4:	4f16      	ldr	r7, [pc, #88]	@ (800fe00 <_dtoa_r+0xab8>)
 800fda6:	b11b      	cbz	r3, 800fdb0 <_dtoa_r+0xa68>
 800fda8:	f107 0308 	add.w	r3, r7, #8
 800fdac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fdae:	6013      	str	r3, [r2, #0]
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	b011      	add	sp, #68	@ 0x44
 800fdb4:	ecbd 8b02 	vpop	{d8}
 800fdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbc:	9b07      	ldr	r3, [sp, #28]
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	f77f ae2c 	ble.w	800fa1c <_dtoa_r+0x6d4>
 800fdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fdc6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdc8:	2001      	movs	r0, #1
 800fdca:	e64c      	b.n	800fa66 <_dtoa_r+0x71e>
 800fdcc:	f1bb 0f00 	cmp.w	fp, #0
 800fdd0:	f77f aed8 	ble.w	800fb84 <_dtoa_r+0x83c>
 800fdd4:	463e      	mov	r6, r7
 800fdd6:	9801      	ldr	r0, [sp, #4]
 800fdd8:	4621      	mov	r1, r4
 800fdda:	f7ff fa2c 	bl	800f236 <quorem>
 800fdde:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fde2:	f806 ab01 	strb.w	sl, [r6], #1
 800fde6:	1bf2      	subs	r2, r6, r7
 800fde8:	4593      	cmp	fp, r2
 800fdea:	ddb4      	ble.n	800fd56 <_dtoa_r+0xa0e>
 800fdec:	9901      	ldr	r1, [sp, #4]
 800fdee:	2300      	movs	r3, #0
 800fdf0:	220a      	movs	r2, #10
 800fdf2:	4648      	mov	r0, r9
 800fdf4:	f000 f968 	bl	80100c8 <__multadd>
 800fdf8:	9001      	str	r0, [sp, #4]
 800fdfa:	e7ec      	b.n	800fdd6 <_dtoa_r+0xa8e>
 800fdfc:	08011550 	.word	0x08011550
 800fe00:	080114d4 	.word	0x080114d4

0800fe04 <_free_r>:
 800fe04:	b538      	push	{r3, r4, r5, lr}
 800fe06:	4605      	mov	r5, r0
 800fe08:	2900      	cmp	r1, #0
 800fe0a:	d041      	beq.n	800fe90 <_free_r+0x8c>
 800fe0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe10:	1f0c      	subs	r4, r1, #4
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	bfb8      	it	lt
 800fe16:	18e4      	addlt	r4, r4, r3
 800fe18:	f000 f8e8 	bl	800ffec <__malloc_lock>
 800fe1c:	4a1d      	ldr	r2, [pc, #116]	@ (800fe94 <_free_r+0x90>)
 800fe1e:	6813      	ldr	r3, [r2, #0]
 800fe20:	b933      	cbnz	r3, 800fe30 <_free_r+0x2c>
 800fe22:	6063      	str	r3, [r4, #4]
 800fe24:	6014      	str	r4, [r2, #0]
 800fe26:	4628      	mov	r0, r5
 800fe28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe2c:	f000 b8e4 	b.w	800fff8 <__malloc_unlock>
 800fe30:	42a3      	cmp	r3, r4
 800fe32:	d908      	bls.n	800fe46 <_free_r+0x42>
 800fe34:	6820      	ldr	r0, [r4, #0]
 800fe36:	1821      	adds	r1, r4, r0
 800fe38:	428b      	cmp	r3, r1
 800fe3a:	bf01      	itttt	eq
 800fe3c:	6819      	ldreq	r1, [r3, #0]
 800fe3e:	685b      	ldreq	r3, [r3, #4]
 800fe40:	1809      	addeq	r1, r1, r0
 800fe42:	6021      	streq	r1, [r4, #0]
 800fe44:	e7ed      	b.n	800fe22 <_free_r+0x1e>
 800fe46:	461a      	mov	r2, r3
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	b10b      	cbz	r3, 800fe50 <_free_r+0x4c>
 800fe4c:	42a3      	cmp	r3, r4
 800fe4e:	d9fa      	bls.n	800fe46 <_free_r+0x42>
 800fe50:	6811      	ldr	r1, [r2, #0]
 800fe52:	1850      	adds	r0, r2, r1
 800fe54:	42a0      	cmp	r0, r4
 800fe56:	d10b      	bne.n	800fe70 <_free_r+0x6c>
 800fe58:	6820      	ldr	r0, [r4, #0]
 800fe5a:	4401      	add	r1, r0
 800fe5c:	1850      	adds	r0, r2, r1
 800fe5e:	4283      	cmp	r3, r0
 800fe60:	6011      	str	r1, [r2, #0]
 800fe62:	d1e0      	bne.n	800fe26 <_free_r+0x22>
 800fe64:	6818      	ldr	r0, [r3, #0]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	6053      	str	r3, [r2, #4]
 800fe6a:	4408      	add	r0, r1
 800fe6c:	6010      	str	r0, [r2, #0]
 800fe6e:	e7da      	b.n	800fe26 <_free_r+0x22>
 800fe70:	d902      	bls.n	800fe78 <_free_r+0x74>
 800fe72:	230c      	movs	r3, #12
 800fe74:	602b      	str	r3, [r5, #0]
 800fe76:	e7d6      	b.n	800fe26 <_free_r+0x22>
 800fe78:	6820      	ldr	r0, [r4, #0]
 800fe7a:	1821      	adds	r1, r4, r0
 800fe7c:	428b      	cmp	r3, r1
 800fe7e:	bf04      	itt	eq
 800fe80:	6819      	ldreq	r1, [r3, #0]
 800fe82:	685b      	ldreq	r3, [r3, #4]
 800fe84:	6063      	str	r3, [r4, #4]
 800fe86:	bf04      	itt	eq
 800fe88:	1809      	addeq	r1, r1, r0
 800fe8a:	6021      	streq	r1, [r4, #0]
 800fe8c:	6054      	str	r4, [r2, #4]
 800fe8e:	e7ca      	b.n	800fe26 <_free_r+0x22>
 800fe90:	bd38      	pop	{r3, r4, r5, pc}
 800fe92:	bf00      	nop
 800fe94:	24005608 	.word	0x24005608

0800fe98 <malloc>:
 800fe98:	4b02      	ldr	r3, [pc, #8]	@ (800fea4 <malloc+0xc>)
 800fe9a:	4601      	mov	r1, r0
 800fe9c:	6818      	ldr	r0, [r3, #0]
 800fe9e:	f000 b825 	b.w	800feec <_malloc_r>
 800fea2:	bf00      	nop
 800fea4:	2400008c 	.word	0x2400008c

0800fea8 <sbrk_aligned>:
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	4e0f      	ldr	r6, [pc, #60]	@ (800fee8 <sbrk_aligned+0x40>)
 800feac:	460c      	mov	r4, r1
 800feae:	6831      	ldr	r1, [r6, #0]
 800feb0:	4605      	mov	r5, r0
 800feb2:	b911      	cbnz	r1, 800feba <sbrk_aligned+0x12>
 800feb4:	f000 fec6 	bl	8010c44 <_sbrk_r>
 800feb8:	6030      	str	r0, [r6, #0]
 800feba:	4621      	mov	r1, r4
 800febc:	4628      	mov	r0, r5
 800febe:	f000 fec1 	bl	8010c44 <_sbrk_r>
 800fec2:	1c43      	adds	r3, r0, #1
 800fec4:	d103      	bne.n	800fece <sbrk_aligned+0x26>
 800fec6:	f04f 34ff 	mov.w	r4, #4294967295
 800feca:	4620      	mov	r0, r4
 800fecc:	bd70      	pop	{r4, r5, r6, pc}
 800fece:	1cc4      	adds	r4, r0, #3
 800fed0:	f024 0403 	bic.w	r4, r4, #3
 800fed4:	42a0      	cmp	r0, r4
 800fed6:	d0f8      	beq.n	800feca <sbrk_aligned+0x22>
 800fed8:	1a21      	subs	r1, r4, r0
 800feda:	4628      	mov	r0, r5
 800fedc:	f000 feb2 	bl	8010c44 <_sbrk_r>
 800fee0:	3001      	adds	r0, #1
 800fee2:	d1f2      	bne.n	800feca <sbrk_aligned+0x22>
 800fee4:	e7ef      	b.n	800fec6 <sbrk_aligned+0x1e>
 800fee6:	bf00      	nop
 800fee8:	24005604 	.word	0x24005604

0800feec <_malloc_r>:
 800feec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef0:	1ccd      	adds	r5, r1, #3
 800fef2:	f025 0503 	bic.w	r5, r5, #3
 800fef6:	3508      	adds	r5, #8
 800fef8:	2d0c      	cmp	r5, #12
 800fefa:	bf38      	it	cc
 800fefc:	250c      	movcc	r5, #12
 800fefe:	2d00      	cmp	r5, #0
 800ff00:	4606      	mov	r6, r0
 800ff02:	db01      	blt.n	800ff08 <_malloc_r+0x1c>
 800ff04:	42a9      	cmp	r1, r5
 800ff06:	d904      	bls.n	800ff12 <_malloc_r+0x26>
 800ff08:	230c      	movs	r3, #12
 800ff0a:	6033      	str	r3, [r6, #0]
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ffe8 <_malloc_r+0xfc>
 800ff16:	f000 f869 	bl	800ffec <__malloc_lock>
 800ff1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ff1e:	461c      	mov	r4, r3
 800ff20:	bb44      	cbnz	r4, 800ff74 <_malloc_r+0x88>
 800ff22:	4629      	mov	r1, r5
 800ff24:	4630      	mov	r0, r6
 800ff26:	f7ff ffbf 	bl	800fea8 <sbrk_aligned>
 800ff2a:	1c43      	adds	r3, r0, #1
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	d158      	bne.n	800ffe2 <_malloc_r+0xf6>
 800ff30:	f8d8 4000 	ldr.w	r4, [r8]
 800ff34:	4627      	mov	r7, r4
 800ff36:	2f00      	cmp	r7, #0
 800ff38:	d143      	bne.n	800ffc2 <_malloc_r+0xd6>
 800ff3a:	2c00      	cmp	r4, #0
 800ff3c:	d04b      	beq.n	800ffd6 <_malloc_r+0xea>
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	4639      	mov	r1, r7
 800ff42:	4630      	mov	r0, r6
 800ff44:	eb04 0903 	add.w	r9, r4, r3
 800ff48:	f000 fe7c 	bl	8010c44 <_sbrk_r>
 800ff4c:	4581      	cmp	r9, r0
 800ff4e:	d142      	bne.n	800ffd6 <_malloc_r+0xea>
 800ff50:	6821      	ldr	r1, [r4, #0]
 800ff52:	1a6d      	subs	r5, r5, r1
 800ff54:	4629      	mov	r1, r5
 800ff56:	4630      	mov	r0, r6
 800ff58:	f7ff ffa6 	bl	800fea8 <sbrk_aligned>
 800ff5c:	3001      	adds	r0, #1
 800ff5e:	d03a      	beq.n	800ffd6 <_malloc_r+0xea>
 800ff60:	6823      	ldr	r3, [r4, #0]
 800ff62:	442b      	add	r3, r5
 800ff64:	6023      	str	r3, [r4, #0]
 800ff66:	f8d8 3000 	ldr.w	r3, [r8]
 800ff6a:	685a      	ldr	r2, [r3, #4]
 800ff6c:	bb62      	cbnz	r2, 800ffc8 <_malloc_r+0xdc>
 800ff6e:	f8c8 7000 	str.w	r7, [r8]
 800ff72:	e00f      	b.n	800ff94 <_malloc_r+0xa8>
 800ff74:	6822      	ldr	r2, [r4, #0]
 800ff76:	1b52      	subs	r2, r2, r5
 800ff78:	d420      	bmi.n	800ffbc <_malloc_r+0xd0>
 800ff7a:	2a0b      	cmp	r2, #11
 800ff7c:	d917      	bls.n	800ffae <_malloc_r+0xc2>
 800ff7e:	1961      	adds	r1, r4, r5
 800ff80:	42a3      	cmp	r3, r4
 800ff82:	6025      	str	r5, [r4, #0]
 800ff84:	bf18      	it	ne
 800ff86:	6059      	strne	r1, [r3, #4]
 800ff88:	6863      	ldr	r3, [r4, #4]
 800ff8a:	bf08      	it	eq
 800ff8c:	f8c8 1000 	streq.w	r1, [r8]
 800ff90:	5162      	str	r2, [r4, r5]
 800ff92:	604b      	str	r3, [r1, #4]
 800ff94:	4630      	mov	r0, r6
 800ff96:	f000 f82f 	bl	800fff8 <__malloc_unlock>
 800ff9a:	f104 000b 	add.w	r0, r4, #11
 800ff9e:	1d23      	adds	r3, r4, #4
 800ffa0:	f020 0007 	bic.w	r0, r0, #7
 800ffa4:	1ac2      	subs	r2, r0, r3
 800ffa6:	bf1c      	itt	ne
 800ffa8:	1a1b      	subne	r3, r3, r0
 800ffaa:	50a3      	strne	r3, [r4, r2]
 800ffac:	e7af      	b.n	800ff0e <_malloc_r+0x22>
 800ffae:	6862      	ldr	r2, [r4, #4]
 800ffb0:	42a3      	cmp	r3, r4
 800ffb2:	bf0c      	ite	eq
 800ffb4:	f8c8 2000 	streq.w	r2, [r8]
 800ffb8:	605a      	strne	r2, [r3, #4]
 800ffba:	e7eb      	b.n	800ff94 <_malloc_r+0xa8>
 800ffbc:	4623      	mov	r3, r4
 800ffbe:	6864      	ldr	r4, [r4, #4]
 800ffc0:	e7ae      	b.n	800ff20 <_malloc_r+0x34>
 800ffc2:	463c      	mov	r4, r7
 800ffc4:	687f      	ldr	r7, [r7, #4]
 800ffc6:	e7b6      	b.n	800ff36 <_malloc_r+0x4a>
 800ffc8:	461a      	mov	r2, r3
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	42a3      	cmp	r3, r4
 800ffce:	d1fb      	bne.n	800ffc8 <_malloc_r+0xdc>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	6053      	str	r3, [r2, #4]
 800ffd4:	e7de      	b.n	800ff94 <_malloc_r+0xa8>
 800ffd6:	230c      	movs	r3, #12
 800ffd8:	6033      	str	r3, [r6, #0]
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f000 f80c 	bl	800fff8 <__malloc_unlock>
 800ffe0:	e794      	b.n	800ff0c <_malloc_r+0x20>
 800ffe2:	6005      	str	r5, [r0, #0]
 800ffe4:	e7d6      	b.n	800ff94 <_malloc_r+0xa8>
 800ffe6:	bf00      	nop
 800ffe8:	24005608 	.word	0x24005608

0800ffec <__malloc_lock>:
 800ffec:	4801      	ldr	r0, [pc, #4]	@ (800fff4 <__malloc_lock+0x8>)
 800ffee:	f7ff b912 	b.w	800f216 <__retarget_lock_acquire_recursive>
 800fff2:	bf00      	nop
 800fff4:	24005600 	.word	0x24005600

0800fff8 <__malloc_unlock>:
 800fff8:	4801      	ldr	r0, [pc, #4]	@ (8010000 <__malloc_unlock+0x8>)
 800fffa:	f7ff b90d 	b.w	800f218 <__retarget_lock_release_recursive>
 800fffe:	bf00      	nop
 8010000:	24005600 	.word	0x24005600

08010004 <_Balloc>:
 8010004:	b570      	push	{r4, r5, r6, lr}
 8010006:	69c6      	ldr	r6, [r0, #28]
 8010008:	4604      	mov	r4, r0
 801000a:	460d      	mov	r5, r1
 801000c:	b976      	cbnz	r6, 801002c <_Balloc+0x28>
 801000e:	2010      	movs	r0, #16
 8010010:	f7ff ff42 	bl	800fe98 <malloc>
 8010014:	4602      	mov	r2, r0
 8010016:	61e0      	str	r0, [r4, #28]
 8010018:	b920      	cbnz	r0, 8010024 <_Balloc+0x20>
 801001a:	4b18      	ldr	r3, [pc, #96]	@ (801007c <_Balloc+0x78>)
 801001c:	4818      	ldr	r0, [pc, #96]	@ (8010080 <_Balloc+0x7c>)
 801001e:	216b      	movs	r1, #107	@ 0x6b
 8010020:	f000 fe20 	bl	8010c64 <__assert_func>
 8010024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010028:	6006      	str	r6, [r0, #0]
 801002a:	60c6      	str	r6, [r0, #12]
 801002c:	69e6      	ldr	r6, [r4, #28]
 801002e:	68f3      	ldr	r3, [r6, #12]
 8010030:	b183      	cbz	r3, 8010054 <_Balloc+0x50>
 8010032:	69e3      	ldr	r3, [r4, #28]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801003a:	b9b8      	cbnz	r0, 801006c <_Balloc+0x68>
 801003c:	2101      	movs	r1, #1
 801003e:	fa01 f605 	lsl.w	r6, r1, r5
 8010042:	1d72      	adds	r2, r6, #5
 8010044:	0092      	lsls	r2, r2, #2
 8010046:	4620      	mov	r0, r4
 8010048:	f000 fe2a 	bl	8010ca0 <_calloc_r>
 801004c:	b160      	cbz	r0, 8010068 <_Balloc+0x64>
 801004e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010052:	e00e      	b.n	8010072 <_Balloc+0x6e>
 8010054:	2221      	movs	r2, #33	@ 0x21
 8010056:	2104      	movs	r1, #4
 8010058:	4620      	mov	r0, r4
 801005a:	f000 fe21 	bl	8010ca0 <_calloc_r>
 801005e:	69e3      	ldr	r3, [r4, #28]
 8010060:	60f0      	str	r0, [r6, #12]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d1e4      	bne.n	8010032 <_Balloc+0x2e>
 8010068:	2000      	movs	r0, #0
 801006a:	bd70      	pop	{r4, r5, r6, pc}
 801006c:	6802      	ldr	r2, [r0, #0]
 801006e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010072:	2300      	movs	r3, #0
 8010074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010078:	e7f7      	b.n	801006a <_Balloc+0x66>
 801007a:	bf00      	nop
 801007c:	080114e1 	.word	0x080114e1
 8010080:	08011561 	.word	0x08011561

08010084 <_Bfree>:
 8010084:	b570      	push	{r4, r5, r6, lr}
 8010086:	69c6      	ldr	r6, [r0, #28]
 8010088:	4605      	mov	r5, r0
 801008a:	460c      	mov	r4, r1
 801008c:	b976      	cbnz	r6, 80100ac <_Bfree+0x28>
 801008e:	2010      	movs	r0, #16
 8010090:	f7ff ff02 	bl	800fe98 <malloc>
 8010094:	4602      	mov	r2, r0
 8010096:	61e8      	str	r0, [r5, #28]
 8010098:	b920      	cbnz	r0, 80100a4 <_Bfree+0x20>
 801009a:	4b09      	ldr	r3, [pc, #36]	@ (80100c0 <_Bfree+0x3c>)
 801009c:	4809      	ldr	r0, [pc, #36]	@ (80100c4 <_Bfree+0x40>)
 801009e:	218f      	movs	r1, #143	@ 0x8f
 80100a0:	f000 fde0 	bl	8010c64 <__assert_func>
 80100a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100a8:	6006      	str	r6, [r0, #0]
 80100aa:	60c6      	str	r6, [r0, #12]
 80100ac:	b13c      	cbz	r4, 80100be <_Bfree+0x3a>
 80100ae:	69eb      	ldr	r3, [r5, #28]
 80100b0:	6862      	ldr	r2, [r4, #4]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100b8:	6021      	str	r1, [r4, #0]
 80100ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100be:	bd70      	pop	{r4, r5, r6, pc}
 80100c0:	080114e1 	.word	0x080114e1
 80100c4:	08011561 	.word	0x08011561

080100c8 <__multadd>:
 80100c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100cc:	690d      	ldr	r5, [r1, #16]
 80100ce:	4607      	mov	r7, r0
 80100d0:	460c      	mov	r4, r1
 80100d2:	461e      	mov	r6, r3
 80100d4:	f101 0c14 	add.w	ip, r1, #20
 80100d8:	2000      	movs	r0, #0
 80100da:	f8dc 3000 	ldr.w	r3, [ip]
 80100de:	b299      	uxth	r1, r3
 80100e0:	fb02 6101 	mla	r1, r2, r1, r6
 80100e4:	0c1e      	lsrs	r6, r3, #16
 80100e6:	0c0b      	lsrs	r3, r1, #16
 80100e8:	fb02 3306 	mla	r3, r2, r6, r3
 80100ec:	b289      	uxth	r1, r1
 80100ee:	3001      	adds	r0, #1
 80100f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100f4:	4285      	cmp	r5, r0
 80100f6:	f84c 1b04 	str.w	r1, [ip], #4
 80100fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100fe:	dcec      	bgt.n	80100da <__multadd+0x12>
 8010100:	b30e      	cbz	r6, 8010146 <__multadd+0x7e>
 8010102:	68a3      	ldr	r3, [r4, #8]
 8010104:	42ab      	cmp	r3, r5
 8010106:	dc19      	bgt.n	801013c <__multadd+0x74>
 8010108:	6861      	ldr	r1, [r4, #4]
 801010a:	4638      	mov	r0, r7
 801010c:	3101      	adds	r1, #1
 801010e:	f7ff ff79 	bl	8010004 <_Balloc>
 8010112:	4680      	mov	r8, r0
 8010114:	b928      	cbnz	r0, 8010122 <__multadd+0x5a>
 8010116:	4602      	mov	r2, r0
 8010118:	4b0c      	ldr	r3, [pc, #48]	@ (801014c <__multadd+0x84>)
 801011a:	480d      	ldr	r0, [pc, #52]	@ (8010150 <__multadd+0x88>)
 801011c:	21ba      	movs	r1, #186	@ 0xba
 801011e:	f000 fda1 	bl	8010c64 <__assert_func>
 8010122:	6922      	ldr	r2, [r4, #16]
 8010124:	3202      	adds	r2, #2
 8010126:	f104 010c 	add.w	r1, r4, #12
 801012a:	0092      	lsls	r2, r2, #2
 801012c:	300c      	adds	r0, #12
 801012e:	f7ff f874 	bl	800f21a <memcpy>
 8010132:	4621      	mov	r1, r4
 8010134:	4638      	mov	r0, r7
 8010136:	f7ff ffa5 	bl	8010084 <_Bfree>
 801013a:	4644      	mov	r4, r8
 801013c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010140:	3501      	adds	r5, #1
 8010142:	615e      	str	r6, [r3, #20]
 8010144:	6125      	str	r5, [r4, #16]
 8010146:	4620      	mov	r0, r4
 8010148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801014c:	08011550 	.word	0x08011550
 8010150:	08011561 	.word	0x08011561

08010154 <__hi0bits>:
 8010154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010158:	4603      	mov	r3, r0
 801015a:	bf36      	itet	cc
 801015c:	0403      	lslcc	r3, r0, #16
 801015e:	2000      	movcs	r0, #0
 8010160:	2010      	movcc	r0, #16
 8010162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010166:	bf3c      	itt	cc
 8010168:	021b      	lslcc	r3, r3, #8
 801016a:	3008      	addcc	r0, #8
 801016c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010170:	bf3c      	itt	cc
 8010172:	011b      	lslcc	r3, r3, #4
 8010174:	3004      	addcc	r0, #4
 8010176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801017a:	bf3c      	itt	cc
 801017c:	009b      	lslcc	r3, r3, #2
 801017e:	3002      	addcc	r0, #2
 8010180:	2b00      	cmp	r3, #0
 8010182:	db05      	blt.n	8010190 <__hi0bits+0x3c>
 8010184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010188:	f100 0001 	add.w	r0, r0, #1
 801018c:	bf08      	it	eq
 801018e:	2020      	moveq	r0, #32
 8010190:	4770      	bx	lr

08010192 <__lo0bits>:
 8010192:	6803      	ldr	r3, [r0, #0]
 8010194:	4602      	mov	r2, r0
 8010196:	f013 0007 	ands.w	r0, r3, #7
 801019a:	d00b      	beq.n	80101b4 <__lo0bits+0x22>
 801019c:	07d9      	lsls	r1, r3, #31
 801019e:	d421      	bmi.n	80101e4 <__lo0bits+0x52>
 80101a0:	0798      	lsls	r0, r3, #30
 80101a2:	bf49      	itett	mi
 80101a4:	085b      	lsrmi	r3, r3, #1
 80101a6:	089b      	lsrpl	r3, r3, #2
 80101a8:	2001      	movmi	r0, #1
 80101aa:	6013      	strmi	r3, [r2, #0]
 80101ac:	bf5c      	itt	pl
 80101ae:	6013      	strpl	r3, [r2, #0]
 80101b0:	2002      	movpl	r0, #2
 80101b2:	4770      	bx	lr
 80101b4:	b299      	uxth	r1, r3
 80101b6:	b909      	cbnz	r1, 80101bc <__lo0bits+0x2a>
 80101b8:	0c1b      	lsrs	r3, r3, #16
 80101ba:	2010      	movs	r0, #16
 80101bc:	b2d9      	uxtb	r1, r3
 80101be:	b909      	cbnz	r1, 80101c4 <__lo0bits+0x32>
 80101c0:	3008      	adds	r0, #8
 80101c2:	0a1b      	lsrs	r3, r3, #8
 80101c4:	0719      	lsls	r1, r3, #28
 80101c6:	bf04      	itt	eq
 80101c8:	091b      	lsreq	r3, r3, #4
 80101ca:	3004      	addeq	r0, #4
 80101cc:	0799      	lsls	r1, r3, #30
 80101ce:	bf04      	itt	eq
 80101d0:	089b      	lsreq	r3, r3, #2
 80101d2:	3002      	addeq	r0, #2
 80101d4:	07d9      	lsls	r1, r3, #31
 80101d6:	d403      	bmi.n	80101e0 <__lo0bits+0x4e>
 80101d8:	085b      	lsrs	r3, r3, #1
 80101da:	f100 0001 	add.w	r0, r0, #1
 80101de:	d003      	beq.n	80101e8 <__lo0bits+0x56>
 80101e0:	6013      	str	r3, [r2, #0]
 80101e2:	4770      	bx	lr
 80101e4:	2000      	movs	r0, #0
 80101e6:	4770      	bx	lr
 80101e8:	2020      	movs	r0, #32
 80101ea:	4770      	bx	lr

080101ec <__i2b>:
 80101ec:	b510      	push	{r4, lr}
 80101ee:	460c      	mov	r4, r1
 80101f0:	2101      	movs	r1, #1
 80101f2:	f7ff ff07 	bl	8010004 <_Balloc>
 80101f6:	4602      	mov	r2, r0
 80101f8:	b928      	cbnz	r0, 8010206 <__i2b+0x1a>
 80101fa:	4b05      	ldr	r3, [pc, #20]	@ (8010210 <__i2b+0x24>)
 80101fc:	4805      	ldr	r0, [pc, #20]	@ (8010214 <__i2b+0x28>)
 80101fe:	f240 1145 	movw	r1, #325	@ 0x145
 8010202:	f000 fd2f 	bl	8010c64 <__assert_func>
 8010206:	2301      	movs	r3, #1
 8010208:	6144      	str	r4, [r0, #20]
 801020a:	6103      	str	r3, [r0, #16]
 801020c:	bd10      	pop	{r4, pc}
 801020e:	bf00      	nop
 8010210:	08011550 	.word	0x08011550
 8010214:	08011561 	.word	0x08011561

08010218 <__multiply>:
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	4617      	mov	r7, r2
 801021e:	690a      	ldr	r2, [r1, #16]
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	429a      	cmp	r2, r3
 8010224:	bfa8      	it	ge
 8010226:	463b      	movge	r3, r7
 8010228:	4689      	mov	r9, r1
 801022a:	bfa4      	itt	ge
 801022c:	460f      	movge	r7, r1
 801022e:	4699      	movge	r9, r3
 8010230:	693d      	ldr	r5, [r7, #16]
 8010232:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	6879      	ldr	r1, [r7, #4]
 801023a:	eb05 060a 	add.w	r6, r5, sl
 801023e:	42b3      	cmp	r3, r6
 8010240:	b085      	sub	sp, #20
 8010242:	bfb8      	it	lt
 8010244:	3101      	addlt	r1, #1
 8010246:	f7ff fedd 	bl	8010004 <_Balloc>
 801024a:	b930      	cbnz	r0, 801025a <__multiply+0x42>
 801024c:	4602      	mov	r2, r0
 801024e:	4b41      	ldr	r3, [pc, #260]	@ (8010354 <__multiply+0x13c>)
 8010250:	4841      	ldr	r0, [pc, #260]	@ (8010358 <__multiply+0x140>)
 8010252:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010256:	f000 fd05 	bl	8010c64 <__assert_func>
 801025a:	f100 0414 	add.w	r4, r0, #20
 801025e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010262:	4623      	mov	r3, r4
 8010264:	2200      	movs	r2, #0
 8010266:	4573      	cmp	r3, lr
 8010268:	d320      	bcc.n	80102ac <__multiply+0x94>
 801026a:	f107 0814 	add.w	r8, r7, #20
 801026e:	f109 0114 	add.w	r1, r9, #20
 8010272:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010276:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801027a:	9302      	str	r3, [sp, #8]
 801027c:	1beb      	subs	r3, r5, r7
 801027e:	3b15      	subs	r3, #21
 8010280:	f023 0303 	bic.w	r3, r3, #3
 8010284:	3304      	adds	r3, #4
 8010286:	3715      	adds	r7, #21
 8010288:	42bd      	cmp	r5, r7
 801028a:	bf38      	it	cc
 801028c:	2304      	movcc	r3, #4
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	9b02      	ldr	r3, [sp, #8]
 8010292:	9103      	str	r1, [sp, #12]
 8010294:	428b      	cmp	r3, r1
 8010296:	d80c      	bhi.n	80102b2 <__multiply+0x9a>
 8010298:	2e00      	cmp	r6, #0
 801029a:	dd03      	ble.n	80102a4 <__multiply+0x8c>
 801029c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d055      	beq.n	8010350 <__multiply+0x138>
 80102a4:	6106      	str	r6, [r0, #16]
 80102a6:	b005      	add	sp, #20
 80102a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ac:	f843 2b04 	str.w	r2, [r3], #4
 80102b0:	e7d9      	b.n	8010266 <__multiply+0x4e>
 80102b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80102b6:	f1ba 0f00 	cmp.w	sl, #0
 80102ba:	d01f      	beq.n	80102fc <__multiply+0xe4>
 80102bc:	46c4      	mov	ip, r8
 80102be:	46a1      	mov	r9, r4
 80102c0:	2700      	movs	r7, #0
 80102c2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80102c6:	f8d9 3000 	ldr.w	r3, [r9]
 80102ca:	fa1f fb82 	uxth.w	fp, r2
 80102ce:	b29b      	uxth	r3, r3
 80102d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80102d4:	443b      	add	r3, r7
 80102d6:	f8d9 7000 	ldr.w	r7, [r9]
 80102da:	0c12      	lsrs	r2, r2, #16
 80102dc:	0c3f      	lsrs	r7, r7, #16
 80102de:	fb0a 7202 	mla	r2, sl, r2, r7
 80102e2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102ec:	4565      	cmp	r5, ip
 80102ee:	f849 3b04 	str.w	r3, [r9], #4
 80102f2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80102f6:	d8e4      	bhi.n	80102c2 <__multiply+0xaa>
 80102f8:	9b01      	ldr	r3, [sp, #4]
 80102fa:	50e7      	str	r7, [r4, r3]
 80102fc:	9b03      	ldr	r3, [sp, #12]
 80102fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010302:	3104      	adds	r1, #4
 8010304:	f1b9 0f00 	cmp.w	r9, #0
 8010308:	d020      	beq.n	801034c <__multiply+0x134>
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	4647      	mov	r7, r8
 801030e:	46a4      	mov	ip, r4
 8010310:	f04f 0a00 	mov.w	sl, #0
 8010314:	f8b7 b000 	ldrh.w	fp, [r7]
 8010318:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801031c:	fb09 220b 	mla	r2, r9, fp, r2
 8010320:	4452      	add	r2, sl
 8010322:	b29b      	uxth	r3, r3
 8010324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010328:	f84c 3b04 	str.w	r3, [ip], #4
 801032c:	f857 3b04 	ldr.w	r3, [r7], #4
 8010330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010334:	f8bc 3000 	ldrh.w	r3, [ip]
 8010338:	fb09 330a 	mla	r3, r9, sl, r3
 801033c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010340:	42bd      	cmp	r5, r7
 8010342:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010346:	d8e5      	bhi.n	8010314 <__multiply+0xfc>
 8010348:	9a01      	ldr	r2, [sp, #4]
 801034a:	50a3      	str	r3, [r4, r2]
 801034c:	3404      	adds	r4, #4
 801034e:	e79f      	b.n	8010290 <__multiply+0x78>
 8010350:	3e01      	subs	r6, #1
 8010352:	e7a1      	b.n	8010298 <__multiply+0x80>
 8010354:	08011550 	.word	0x08011550
 8010358:	08011561 	.word	0x08011561

0801035c <__pow5mult>:
 801035c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010360:	4615      	mov	r5, r2
 8010362:	f012 0203 	ands.w	r2, r2, #3
 8010366:	4607      	mov	r7, r0
 8010368:	460e      	mov	r6, r1
 801036a:	d007      	beq.n	801037c <__pow5mult+0x20>
 801036c:	4c25      	ldr	r4, [pc, #148]	@ (8010404 <__pow5mult+0xa8>)
 801036e:	3a01      	subs	r2, #1
 8010370:	2300      	movs	r3, #0
 8010372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010376:	f7ff fea7 	bl	80100c8 <__multadd>
 801037a:	4606      	mov	r6, r0
 801037c:	10ad      	asrs	r5, r5, #2
 801037e:	d03d      	beq.n	80103fc <__pow5mult+0xa0>
 8010380:	69fc      	ldr	r4, [r7, #28]
 8010382:	b97c      	cbnz	r4, 80103a4 <__pow5mult+0x48>
 8010384:	2010      	movs	r0, #16
 8010386:	f7ff fd87 	bl	800fe98 <malloc>
 801038a:	4602      	mov	r2, r0
 801038c:	61f8      	str	r0, [r7, #28]
 801038e:	b928      	cbnz	r0, 801039c <__pow5mult+0x40>
 8010390:	4b1d      	ldr	r3, [pc, #116]	@ (8010408 <__pow5mult+0xac>)
 8010392:	481e      	ldr	r0, [pc, #120]	@ (801040c <__pow5mult+0xb0>)
 8010394:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010398:	f000 fc64 	bl	8010c64 <__assert_func>
 801039c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103a0:	6004      	str	r4, [r0, #0]
 80103a2:	60c4      	str	r4, [r0, #12]
 80103a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80103a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80103ac:	b94c      	cbnz	r4, 80103c2 <__pow5mult+0x66>
 80103ae:	f240 2171 	movw	r1, #625	@ 0x271
 80103b2:	4638      	mov	r0, r7
 80103b4:	f7ff ff1a 	bl	80101ec <__i2b>
 80103b8:	2300      	movs	r3, #0
 80103ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80103be:	4604      	mov	r4, r0
 80103c0:	6003      	str	r3, [r0, #0]
 80103c2:	f04f 0900 	mov.w	r9, #0
 80103c6:	07eb      	lsls	r3, r5, #31
 80103c8:	d50a      	bpl.n	80103e0 <__pow5mult+0x84>
 80103ca:	4631      	mov	r1, r6
 80103cc:	4622      	mov	r2, r4
 80103ce:	4638      	mov	r0, r7
 80103d0:	f7ff ff22 	bl	8010218 <__multiply>
 80103d4:	4631      	mov	r1, r6
 80103d6:	4680      	mov	r8, r0
 80103d8:	4638      	mov	r0, r7
 80103da:	f7ff fe53 	bl	8010084 <_Bfree>
 80103de:	4646      	mov	r6, r8
 80103e0:	106d      	asrs	r5, r5, #1
 80103e2:	d00b      	beq.n	80103fc <__pow5mult+0xa0>
 80103e4:	6820      	ldr	r0, [r4, #0]
 80103e6:	b938      	cbnz	r0, 80103f8 <__pow5mult+0x9c>
 80103e8:	4622      	mov	r2, r4
 80103ea:	4621      	mov	r1, r4
 80103ec:	4638      	mov	r0, r7
 80103ee:	f7ff ff13 	bl	8010218 <__multiply>
 80103f2:	6020      	str	r0, [r4, #0]
 80103f4:	f8c0 9000 	str.w	r9, [r0]
 80103f8:	4604      	mov	r4, r0
 80103fa:	e7e4      	b.n	80103c6 <__pow5mult+0x6a>
 80103fc:	4630      	mov	r0, r6
 80103fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010402:	bf00      	nop
 8010404:	08011614 	.word	0x08011614
 8010408:	080114e1 	.word	0x080114e1
 801040c:	08011561 	.word	0x08011561

08010410 <__lshift>:
 8010410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010414:	460c      	mov	r4, r1
 8010416:	6849      	ldr	r1, [r1, #4]
 8010418:	6923      	ldr	r3, [r4, #16]
 801041a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801041e:	68a3      	ldr	r3, [r4, #8]
 8010420:	4607      	mov	r7, r0
 8010422:	4691      	mov	r9, r2
 8010424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010428:	f108 0601 	add.w	r6, r8, #1
 801042c:	42b3      	cmp	r3, r6
 801042e:	db0b      	blt.n	8010448 <__lshift+0x38>
 8010430:	4638      	mov	r0, r7
 8010432:	f7ff fde7 	bl	8010004 <_Balloc>
 8010436:	4605      	mov	r5, r0
 8010438:	b948      	cbnz	r0, 801044e <__lshift+0x3e>
 801043a:	4602      	mov	r2, r0
 801043c:	4b28      	ldr	r3, [pc, #160]	@ (80104e0 <__lshift+0xd0>)
 801043e:	4829      	ldr	r0, [pc, #164]	@ (80104e4 <__lshift+0xd4>)
 8010440:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010444:	f000 fc0e 	bl	8010c64 <__assert_func>
 8010448:	3101      	adds	r1, #1
 801044a:	005b      	lsls	r3, r3, #1
 801044c:	e7ee      	b.n	801042c <__lshift+0x1c>
 801044e:	2300      	movs	r3, #0
 8010450:	f100 0114 	add.w	r1, r0, #20
 8010454:	f100 0210 	add.w	r2, r0, #16
 8010458:	4618      	mov	r0, r3
 801045a:	4553      	cmp	r3, sl
 801045c:	db33      	blt.n	80104c6 <__lshift+0xb6>
 801045e:	6920      	ldr	r0, [r4, #16]
 8010460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010464:	f104 0314 	add.w	r3, r4, #20
 8010468:	f019 091f 	ands.w	r9, r9, #31
 801046c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010470:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010474:	d02b      	beq.n	80104ce <__lshift+0xbe>
 8010476:	f1c9 0e20 	rsb	lr, r9, #32
 801047a:	468a      	mov	sl, r1
 801047c:	2200      	movs	r2, #0
 801047e:	6818      	ldr	r0, [r3, #0]
 8010480:	fa00 f009 	lsl.w	r0, r0, r9
 8010484:	4310      	orrs	r0, r2
 8010486:	f84a 0b04 	str.w	r0, [sl], #4
 801048a:	f853 2b04 	ldr.w	r2, [r3], #4
 801048e:	459c      	cmp	ip, r3
 8010490:	fa22 f20e 	lsr.w	r2, r2, lr
 8010494:	d8f3      	bhi.n	801047e <__lshift+0x6e>
 8010496:	ebac 0304 	sub.w	r3, ip, r4
 801049a:	3b15      	subs	r3, #21
 801049c:	f023 0303 	bic.w	r3, r3, #3
 80104a0:	3304      	adds	r3, #4
 80104a2:	f104 0015 	add.w	r0, r4, #21
 80104a6:	4560      	cmp	r0, ip
 80104a8:	bf88      	it	hi
 80104aa:	2304      	movhi	r3, #4
 80104ac:	50ca      	str	r2, [r1, r3]
 80104ae:	b10a      	cbz	r2, 80104b4 <__lshift+0xa4>
 80104b0:	f108 0602 	add.w	r6, r8, #2
 80104b4:	3e01      	subs	r6, #1
 80104b6:	4638      	mov	r0, r7
 80104b8:	612e      	str	r6, [r5, #16]
 80104ba:	4621      	mov	r1, r4
 80104bc:	f7ff fde2 	bl	8010084 <_Bfree>
 80104c0:	4628      	mov	r0, r5
 80104c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80104ca:	3301      	adds	r3, #1
 80104cc:	e7c5      	b.n	801045a <__lshift+0x4a>
 80104ce:	3904      	subs	r1, #4
 80104d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80104d8:	459c      	cmp	ip, r3
 80104da:	d8f9      	bhi.n	80104d0 <__lshift+0xc0>
 80104dc:	e7ea      	b.n	80104b4 <__lshift+0xa4>
 80104de:	bf00      	nop
 80104e0:	08011550 	.word	0x08011550
 80104e4:	08011561 	.word	0x08011561

080104e8 <__mcmp>:
 80104e8:	690a      	ldr	r2, [r1, #16]
 80104ea:	4603      	mov	r3, r0
 80104ec:	6900      	ldr	r0, [r0, #16]
 80104ee:	1a80      	subs	r0, r0, r2
 80104f0:	b530      	push	{r4, r5, lr}
 80104f2:	d10e      	bne.n	8010512 <__mcmp+0x2a>
 80104f4:	3314      	adds	r3, #20
 80104f6:	3114      	adds	r1, #20
 80104f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80104fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010500:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010504:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010508:	4295      	cmp	r5, r2
 801050a:	d003      	beq.n	8010514 <__mcmp+0x2c>
 801050c:	d205      	bcs.n	801051a <__mcmp+0x32>
 801050e:	f04f 30ff 	mov.w	r0, #4294967295
 8010512:	bd30      	pop	{r4, r5, pc}
 8010514:	42a3      	cmp	r3, r4
 8010516:	d3f3      	bcc.n	8010500 <__mcmp+0x18>
 8010518:	e7fb      	b.n	8010512 <__mcmp+0x2a>
 801051a:	2001      	movs	r0, #1
 801051c:	e7f9      	b.n	8010512 <__mcmp+0x2a>
	...

08010520 <__mdiff>:
 8010520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010524:	4689      	mov	r9, r1
 8010526:	4606      	mov	r6, r0
 8010528:	4611      	mov	r1, r2
 801052a:	4648      	mov	r0, r9
 801052c:	4614      	mov	r4, r2
 801052e:	f7ff ffdb 	bl	80104e8 <__mcmp>
 8010532:	1e05      	subs	r5, r0, #0
 8010534:	d112      	bne.n	801055c <__mdiff+0x3c>
 8010536:	4629      	mov	r1, r5
 8010538:	4630      	mov	r0, r6
 801053a:	f7ff fd63 	bl	8010004 <_Balloc>
 801053e:	4602      	mov	r2, r0
 8010540:	b928      	cbnz	r0, 801054e <__mdiff+0x2e>
 8010542:	4b3f      	ldr	r3, [pc, #252]	@ (8010640 <__mdiff+0x120>)
 8010544:	f240 2137 	movw	r1, #567	@ 0x237
 8010548:	483e      	ldr	r0, [pc, #248]	@ (8010644 <__mdiff+0x124>)
 801054a:	f000 fb8b 	bl	8010c64 <__assert_func>
 801054e:	2301      	movs	r3, #1
 8010550:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010554:	4610      	mov	r0, r2
 8010556:	b003      	add	sp, #12
 8010558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055c:	bfbc      	itt	lt
 801055e:	464b      	movlt	r3, r9
 8010560:	46a1      	movlt	r9, r4
 8010562:	4630      	mov	r0, r6
 8010564:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010568:	bfba      	itte	lt
 801056a:	461c      	movlt	r4, r3
 801056c:	2501      	movlt	r5, #1
 801056e:	2500      	movge	r5, #0
 8010570:	f7ff fd48 	bl	8010004 <_Balloc>
 8010574:	4602      	mov	r2, r0
 8010576:	b918      	cbnz	r0, 8010580 <__mdiff+0x60>
 8010578:	4b31      	ldr	r3, [pc, #196]	@ (8010640 <__mdiff+0x120>)
 801057a:	f240 2145 	movw	r1, #581	@ 0x245
 801057e:	e7e3      	b.n	8010548 <__mdiff+0x28>
 8010580:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010584:	6926      	ldr	r6, [r4, #16]
 8010586:	60c5      	str	r5, [r0, #12]
 8010588:	f109 0310 	add.w	r3, r9, #16
 801058c:	f109 0514 	add.w	r5, r9, #20
 8010590:	f104 0e14 	add.w	lr, r4, #20
 8010594:	f100 0b14 	add.w	fp, r0, #20
 8010598:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801059c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80105a0:	9301      	str	r3, [sp, #4]
 80105a2:	46d9      	mov	r9, fp
 80105a4:	f04f 0c00 	mov.w	ip, #0
 80105a8:	9b01      	ldr	r3, [sp, #4]
 80105aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80105ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80105b2:	9301      	str	r3, [sp, #4]
 80105b4:	fa1f f38a 	uxth.w	r3, sl
 80105b8:	4619      	mov	r1, r3
 80105ba:	b283      	uxth	r3, r0
 80105bc:	1acb      	subs	r3, r1, r3
 80105be:	0c00      	lsrs	r0, r0, #16
 80105c0:	4463      	add	r3, ip
 80105c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80105c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80105d0:	4576      	cmp	r6, lr
 80105d2:	f849 3b04 	str.w	r3, [r9], #4
 80105d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80105da:	d8e5      	bhi.n	80105a8 <__mdiff+0x88>
 80105dc:	1b33      	subs	r3, r6, r4
 80105de:	3b15      	subs	r3, #21
 80105e0:	f023 0303 	bic.w	r3, r3, #3
 80105e4:	3415      	adds	r4, #21
 80105e6:	3304      	adds	r3, #4
 80105e8:	42a6      	cmp	r6, r4
 80105ea:	bf38      	it	cc
 80105ec:	2304      	movcc	r3, #4
 80105ee:	441d      	add	r5, r3
 80105f0:	445b      	add	r3, fp
 80105f2:	461e      	mov	r6, r3
 80105f4:	462c      	mov	r4, r5
 80105f6:	4544      	cmp	r4, r8
 80105f8:	d30e      	bcc.n	8010618 <__mdiff+0xf8>
 80105fa:	f108 0103 	add.w	r1, r8, #3
 80105fe:	1b49      	subs	r1, r1, r5
 8010600:	f021 0103 	bic.w	r1, r1, #3
 8010604:	3d03      	subs	r5, #3
 8010606:	45a8      	cmp	r8, r5
 8010608:	bf38      	it	cc
 801060a:	2100      	movcc	r1, #0
 801060c:	440b      	add	r3, r1
 801060e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010612:	b191      	cbz	r1, 801063a <__mdiff+0x11a>
 8010614:	6117      	str	r7, [r2, #16]
 8010616:	e79d      	b.n	8010554 <__mdiff+0x34>
 8010618:	f854 1b04 	ldr.w	r1, [r4], #4
 801061c:	46e6      	mov	lr, ip
 801061e:	0c08      	lsrs	r0, r1, #16
 8010620:	fa1c fc81 	uxtah	ip, ip, r1
 8010624:	4471      	add	r1, lr
 8010626:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801062a:	b289      	uxth	r1, r1
 801062c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010630:	f846 1b04 	str.w	r1, [r6], #4
 8010634:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010638:	e7dd      	b.n	80105f6 <__mdiff+0xd6>
 801063a:	3f01      	subs	r7, #1
 801063c:	e7e7      	b.n	801060e <__mdiff+0xee>
 801063e:	bf00      	nop
 8010640:	08011550 	.word	0x08011550
 8010644:	08011561 	.word	0x08011561

08010648 <__d2b>:
 8010648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801064c:	460f      	mov	r7, r1
 801064e:	2101      	movs	r1, #1
 8010650:	ec59 8b10 	vmov	r8, r9, d0
 8010654:	4616      	mov	r6, r2
 8010656:	f7ff fcd5 	bl	8010004 <_Balloc>
 801065a:	4604      	mov	r4, r0
 801065c:	b930      	cbnz	r0, 801066c <__d2b+0x24>
 801065e:	4602      	mov	r2, r0
 8010660:	4b23      	ldr	r3, [pc, #140]	@ (80106f0 <__d2b+0xa8>)
 8010662:	4824      	ldr	r0, [pc, #144]	@ (80106f4 <__d2b+0xac>)
 8010664:	f240 310f 	movw	r1, #783	@ 0x30f
 8010668:	f000 fafc 	bl	8010c64 <__assert_func>
 801066c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010674:	b10d      	cbz	r5, 801067a <__d2b+0x32>
 8010676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801067a:	9301      	str	r3, [sp, #4]
 801067c:	f1b8 0300 	subs.w	r3, r8, #0
 8010680:	d023      	beq.n	80106ca <__d2b+0x82>
 8010682:	4668      	mov	r0, sp
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	f7ff fd84 	bl	8010192 <__lo0bits>
 801068a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801068e:	b1d0      	cbz	r0, 80106c6 <__d2b+0x7e>
 8010690:	f1c0 0320 	rsb	r3, r0, #32
 8010694:	fa02 f303 	lsl.w	r3, r2, r3
 8010698:	430b      	orrs	r3, r1
 801069a:	40c2      	lsrs	r2, r0
 801069c:	6163      	str	r3, [r4, #20]
 801069e:	9201      	str	r2, [sp, #4]
 80106a0:	9b01      	ldr	r3, [sp, #4]
 80106a2:	61a3      	str	r3, [r4, #24]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	bf0c      	ite	eq
 80106a8:	2201      	moveq	r2, #1
 80106aa:	2202      	movne	r2, #2
 80106ac:	6122      	str	r2, [r4, #16]
 80106ae:	b1a5      	cbz	r5, 80106da <__d2b+0x92>
 80106b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80106b4:	4405      	add	r5, r0
 80106b6:	603d      	str	r5, [r7, #0]
 80106b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80106bc:	6030      	str	r0, [r6, #0]
 80106be:	4620      	mov	r0, r4
 80106c0:	b003      	add	sp, #12
 80106c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106c6:	6161      	str	r1, [r4, #20]
 80106c8:	e7ea      	b.n	80106a0 <__d2b+0x58>
 80106ca:	a801      	add	r0, sp, #4
 80106cc:	f7ff fd61 	bl	8010192 <__lo0bits>
 80106d0:	9b01      	ldr	r3, [sp, #4]
 80106d2:	6163      	str	r3, [r4, #20]
 80106d4:	3020      	adds	r0, #32
 80106d6:	2201      	movs	r2, #1
 80106d8:	e7e8      	b.n	80106ac <__d2b+0x64>
 80106da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80106de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80106e2:	6038      	str	r0, [r7, #0]
 80106e4:	6918      	ldr	r0, [r3, #16]
 80106e6:	f7ff fd35 	bl	8010154 <__hi0bits>
 80106ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80106ee:	e7e5      	b.n	80106bc <__d2b+0x74>
 80106f0:	08011550 	.word	0x08011550
 80106f4:	08011561 	.word	0x08011561

080106f8 <__sfputc_r>:
 80106f8:	6893      	ldr	r3, [r2, #8]
 80106fa:	3b01      	subs	r3, #1
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	b410      	push	{r4}
 8010700:	6093      	str	r3, [r2, #8]
 8010702:	da08      	bge.n	8010716 <__sfputc_r+0x1e>
 8010704:	6994      	ldr	r4, [r2, #24]
 8010706:	42a3      	cmp	r3, r4
 8010708:	db01      	blt.n	801070e <__sfputc_r+0x16>
 801070a:	290a      	cmp	r1, #10
 801070c:	d103      	bne.n	8010716 <__sfputc_r+0x1e>
 801070e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010712:	f7fe bc10 	b.w	800ef36 <__swbuf_r>
 8010716:	6813      	ldr	r3, [r2, #0]
 8010718:	1c58      	adds	r0, r3, #1
 801071a:	6010      	str	r0, [r2, #0]
 801071c:	7019      	strb	r1, [r3, #0]
 801071e:	4608      	mov	r0, r1
 8010720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010724:	4770      	bx	lr

08010726 <__sfputs_r>:
 8010726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010728:	4606      	mov	r6, r0
 801072a:	460f      	mov	r7, r1
 801072c:	4614      	mov	r4, r2
 801072e:	18d5      	adds	r5, r2, r3
 8010730:	42ac      	cmp	r4, r5
 8010732:	d101      	bne.n	8010738 <__sfputs_r+0x12>
 8010734:	2000      	movs	r0, #0
 8010736:	e007      	b.n	8010748 <__sfputs_r+0x22>
 8010738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801073c:	463a      	mov	r2, r7
 801073e:	4630      	mov	r0, r6
 8010740:	f7ff ffda 	bl	80106f8 <__sfputc_r>
 8010744:	1c43      	adds	r3, r0, #1
 8010746:	d1f3      	bne.n	8010730 <__sfputs_r+0xa>
 8010748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801074c <_vfiprintf_r>:
 801074c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010750:	460d      	mov	r5, r1
 8010752:	b09d      	sub	sp, #116	@ 0x74
 8010754:	4614      	mov	r4, r2
 8010756:	4698      	mov	r8, r3
 8010758:	4606      	mov	r6, r0
 801075a:	b118      	cbz	r0, 8010764 <_vfiprintf_r+0x18>
 801075c:	6a03      	ldr	r3, [r0, #32]
 801075e:	b90b      	cbnz	r3, 8010764 <_vfiprintf_r+0x18>
 8010760:	f7fe faf8 	bl	800ed54 <__sinit>
 8010764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010766:	07d9      	lsls	r1, r3, #31
 8010768:	d405      	bmi.n	8010776 <_vfiprintf_r+0x2a>
 801076a:	89ab      	ldrh	r3, [r5, #12]
 801076c:	059a      	lsls	r2, r3, #22
 801076e:	d402      	bmi.n	8010776 <_vfiprintf_r+0x2a>
 8010770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010772:	f7fe fd50 	bl	800f216 <__retarget_lock_acquire_recursive>
 8010776:	89ab      	ldrh	r3, [r5, #12]
 8010778:	071b      	lsls	r3, r3, #28
 801077a:	d501      	bpl.n	8010780 <_vfiprintf_r+0x34>
 801077c:	692b      	ldr	r3, [r5, #16]
 801077e:	b99b      	cbnz	r3, 80107a8 <_vfiprintf_r+0x5c>
 8010780:	4629      	mov	r1, r5
 8010782:	4630      	mov	r0, r6
 8010784:	f7fe fc16 	bl	800efb4 <__swsetup_r>
 8010788:	b170      	cbz	r0, 80107a8 <_vfiprintf_r+0x5c>
 801078a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801078c:	07dc      	lsls	r4, r3, #31
 801078e:	d504      	bpl.n	801079a <_vfiprintf_r+0x4e>
 8010790:	f04f 30ff 	mov.w	r0, #4294967295
 8010794:	b01d      	add	sp, #116	@ 0x74
 8010796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801079a:	89ab      	ldrh	r3, [r5, #12]
 801079c:	0598      	lsls	r0, r3, #22
 801079e:	d4f7      	bmi.n	8010790 <_vfiprintf_r+0x44>
 80107a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107a2:	f7fe fd39 	bl	800f218 <__retarget_lock_release_recursive>
 80107a6:	e7f3      	b.n	8010790 <_vfiprintf_r+0x44>
 80107a8:	2300      	movs	r3, #0
 80107aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80107ac:	2320      	movs	r3, #32
 80107ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80107b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80107b6:	2330      	movs	r3, #48	@ 0x30
 80107b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010968 <_vfiprintf_r+0x21c>
 80107bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80107c0:	f04f 0901 	mov.w	r9, #1
 80107c4:	4623      	mov	r3, r4
 80107c6:	469a      	mov	sl, r3
 80107c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107cc:	b10a      	cbz	r2, 80107d2 <_vfiprintf_r+0x86>
 80107ce:	2a25      	cmp	r2, #37	@ 0x25
 80107d0:	d1f9      	bne.n	80107c6 <_vfiprintf_r+0x7a>
 80107d2:	ebba 0b04 	subs.w	fp, sl, r4
 80107d6:	d00b      	beq.n	80107f0 <_vfiprintf_r+0xa4>
 80107d8:	465b      	mov	r3, fp
 80107da:	4622      	mov	r2, r4
 80107dc:	4629      	mov	r1, r5
 80107de:	4630      	mov	r0, r6
 80107e0:	f7ff ffa1 	bl	8010726 <__sfputs_r>
 80107e4:	3001      	adds	r0, #1
 80107e6:	f000 80a7 	beq.w	8010938 <_vfiprintf_r+0x1ec>
 80107ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107ec:	445a      	add	r2, fp
 80107ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80107f0:	f89a 3000 	ldrb.w	r3, [sl]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	f000 809f 	beq.w	8010938 <_vfiprintf_r+0x1ec>
 80107fa:	2300      	movs	r3, #0
 80107fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010804:	f10a 0a01 	add.w	sl, sl, #1
 8010808:	9304      	str	r3, [sp, #16]
 801080a:	9307      	str	r3, [sp, #28]
 801080c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010810:	931a      	str	r3, [sp, #104]	@ 0x68
 8010812:	4654      	mov	r4, sl
 8010814:	2205      	movs	r2, #5
 8010816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801081a:	4853      	ldr	r0, [pc, #332]	@ (8010968 <_vfiprintf_r+0x21c>)
 801081c:	f7ef fd60 	bl	80002e0 <memchr>
 8010820:	9a04      	ldr	r2, [sp, #16]
 8010822:	b9d8      	cbnz	r0, 801085c <_vfiprintf_r+0x110>
 8010824:	06d1      	lsls	r1, r2, #27
 8010826:	bf44      	itt	mi
 8010828:	2320      	movmi	r3, #32
 801082a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801082e:	0713      	lsls	r3, r2, #28
 8010830:	bf44      	itt	mi
 8010832:	232b      	movmi	r3, #43	@ 0x2b
 8010834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010838:	f89a 3000 	ldrb.w	r3, [sl]
 801083c:	2b2a      	cmp	r3, #42	@ 0x2a
 801083e:	d015      	beq.n	801086c <_vfiprintf_r+0x120>
 8010840:	9a07      	ldr	r2, [sp, #28]
 8010842:	4654      	mov	r4, sl
 8010844:	2000      	movs	r0, #0
 8010846:	f04f 0c0a 	mov.w	ip, #10
 801084a:	4621      	mov	r1, r4
 801084c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010850:	3b30      	subs	r3, #48	@ 0x30
 8010852:	2b09      	cmp	r3, #9
 8010854:	d94b      	bls.n	80108ee <_vfiprintf_r+0x1a2>
 8010856:	b1b0      	cbz	r0, 8010886 <_vfiprintf_r+0x13a>
 8010858:	9207      	str	r2, [sp, #28]
 801085a:	e014      	b.n	8010886 <_vfiprintf_r+0x13a>
 801085c:	eba0 0308 	sub.w	r3, r0, r8
 8010860:	fa09 f303 	lsl.w	r3, r9, r3
 8010864:	4313      	orrs	r3, r2
 8010866:	9304      	str	r3, [sp, #16]
 8010868:	46a2      	mov	sl, r4
 801086a:	e7d2      	b.n	8010812 <_vfiprintf_r+0xc6>
 801086c:	9b03      	ldr	r3, [sp, #12]
 801086e:	1d19      	adds	r1, r3, #4
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	9103      	str	r1, [sp, #12]
 8010874:	2b00      	cmp	r3, #0
 8010876:	bfbb      	ittet	lt
 8010878:	425b      	neglt	r3, r3
 801087a:	f042 0202 	orrlt.w	r2, r2, #2
 801087e:	9307      	strge	r3, [sp, #28]
 8010880:	9307      	strlt	r3, [sp, #28]
 8010882:	bfb8      	it	lt
 8010884:	9204      	strlt	r2, [sp, #16]
 8010886:	7823      	ldrb	r3, [r4, #0]
 8010888:	2b2e      	cmp	r3, #46	@ 0x2e
 801088a:	d10a      	bne.n	80108a2 <_vfiprintf_r+0x156>
 801088c:	7863      	ldrb	r3, [r4, #1]
 801088e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010890:	d132      	bne.n	80108f8 <_vfiprintf_r+0x1ac>
 8010892:	9b03      	ldr	r3, [sp, #12]
 8010894:	1d1a      	adds	r2, r3, #4
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	9203      	str	r2, [sp, #12]
 801089a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801089e:	3402      	adds	r4, #2
 80108a0:	9305      	str	r3, [sp, #20]
 80108a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010978 <_vfiprintf_r+0x22c>
 80108a6:	7821      	ldrb	r1, [r4, #0]
 80108a8:	2203      	movs	r2, #3
 80108aa:	4650      	mov	r0, sl
 80108ac:	f7ef fd18 	bl	80002e0 <memchr>
 80108b0:	b138      	cbz	r0, 80108c2 <_vfiprintf_r+0x176>
 80108b2:	9b04      	ldr	r3, [sp, #16]
 80108b4:	eba0 000a 	sub.w	r0, r0, sl
 80108b8:	2240      	movs	r2, #64	@ 0x40
 80108ba:	4082      	lsls	r2, r0
 80108bc:	4313      	orrs	r3, r2
 80108be:	3401      	adds	r4, #1
 80108c0:	9304      	str	r3, [sp, #16]
 80108c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108c6:	4829      	ldr	r0, [pc, #164]	@ (801096c <_vfiprintf_r+0x220>)
 80108c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80108cc:	2206      	movs	r2, #6
 80108ce:	f7ef fd07 	bl	80002e0 <memchr>
 80108d2:	2800      	cmp	r0, #0
 80108d4:	d03f      	beq.n	8010956 <_vfiprintf_r+0x20a>
 80108d6:	4b26      	ldr	r3, [pc, #152]	@ (8010970 <_vfiprintf_r+0x224>)
 80108d8:	bb1b      	cbnz	r3, 8010922 <_vfiprintf_r+0x1d6>
 80108da:	9b03      	ldr	r3, [sp, #12]
 80108dc:	3307      	adds	r3, #7
 80108de:	f023 0307 	bic.w	r3, r3, #7
 80108e2:	3308      	adds	r3, #8
 80108e4:	9303      	str	r3, [sp, #12]
 80108e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108e8:	443b      	add	r3, r7
 80108ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80108ec:	e76a      	b.n	80107c4 <_vfiprintf_r+0x78>
 80108ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80108f2:	460c      	mov	r4, r1
 80108f4:	2001      	movs	r0, #1
 80108f6:	e7a8      	b.n	801084a <_vfiprintf_r+0xfe>
 80108f8:	2300      	movs	r3, #0
 80108fa:	3401      	adds	r4, #1
 80108fc:	9305      	str	r3, [sp, #20]
 80108fe:	4619      	mov	r1, r3
 8010900:	f04f 0c0a 	mov.w	ip, #10
 8010904:	4620      	mov	r0, r4
 8010906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801090a:	3a30      	subs	r2, #48	@ 0x30
 801090c:	2a09      	cmp	r2, #9
 801090e:	d903      	bls.n	8010918 <_vfiprintf_r+0x1cc>
 8010910:	2b00      	cmp	r3, #0
 8010912:	d0c6      	beq.n	80108a2 <_vfiprintf_r+0x156>
 8010914:	9105      	str	r1, [sp, #20]
 8010916:	e7c4      	b.n	80108a2 <_vfiprintf_r+0x156>
 8010918:	fb0c 2101 	mla	r1, ip, r1, r2
 801091c:	4604      	mov	r4, r0
 801091e:	2301      	movs	r3, #1
 8010920:	e7f0      	b.n	8010904 <_vfiprintf_r+0x1b8>
 8010922:	ab03      	add	r3, sp, #12
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	462a      	mov	r2, r5
 8010928:	4b12      	ldr	r3, [pc, #72]	@ (8010974 <_vfiprintf_r+0x228>)
 801092a:	a904      	add	r1, sp, #16
 801092c:	4630      	mov	r0, r6
 801092e:	f7fd fddf 	bl	800e4f0 <_printf_float>
 8010932:	4607      	mov	r7, r0
 8010934:	1c78      	adds	r0, r7, #1
 8010936:	d1d6      	bne.n	80108e6 <_vfiprintf_r+0x19a>
 8010938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801093a:	07d9      	lsls	r1, r3, #31
 801093c:	d405      	bmi.n	801094a <_vfiprintf_r+0x1fe>
 801093e:	89ab      	ldrh	r3, [r5, #12]
 8010940:	059a      	lsls	r2, r3, #22
 8010942:	d402      	bmi.n	801094a <_vfiprintf_r+0x1fe>
 8010944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010946:	f7fe fc67 	bl	800f218 <__retarget_lock_release_recursive>
 801094a:	89ab      	ldrh	r3, [r5, #12]
 801094c:	065b      	lsls	r3, r3, #25
 801094e:	f53f af1f 	bmi.w	8010790 <_vfiprintf_r+0x44>
 8010952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010954:	e71e      	b.n	8010794 <_vfiprintf_r+0x48>
 8010956:	ab03      	add	r3, sp, #12
 8010958:	9300      	str	r3, [sp, #0]
 801095a:	462a      	mov	r2, r5
 801095c:	4b05      	ldr	r3, [pc, #20]	@ (8010974 <_vfiprintf_r+0x228>)
 801095e:	a904      	add	r1, sp, #16
 8010960:	4630      	mov	r0, r6
 8010962:	f7fe f84d 	bl	800ea00 <_printf_i>
 8010966:	e7e4      	b.n	8010932 <_vfiprintf_r+0x1e6>
 8010968:	080115ba 	.word	0x080115ba
 801096c:	080115c4 	.word	0x080115c4
 8010970:	0800e4f1 	.word	0x0800e4f1
 8010974:	08010727 	.word	0x08010727
 8010978:	080115c0 	.word	0x080115c0

0801097c <__sflush_r>:
 801097c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010984:	0716      	lsls	r6, r2, #28
 8010986:	4605      	mov	r5, r0
 8010988:	460c      	mov	r4, r1
 801098a:	d454      	bmi.n	8010a36 <__sflush_r+0xba>
 801098c:	684b      	ldr	r3, [r1, #4]
 801098e:	2b00      	cmp	r3, #0
 8010990:	dc02      	bgt.n	8010998 <__sflush_r+0x1c>
 8010992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010994:	2b00      	cmp	r3, #0
 8010996:	dd48      	ble.n	8010a2a <__sflush_r+0xae>
 8010998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801099a:	2e00      	cmp	r6, #0
 801099c:	d045      	beq.n	8010a2a <__sflush_r+0xae>
 801099e:	2300      	movs	r3, #0
 80109a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80109a4:	682f      	ldr	r7, [r5, #0]
 80109a6:	6a21      	ldr	r1, [r4, #32]
 80109a8:	602b      	str	r3, [r5, #0]
 80109aa:	d030      	beq.n	8010a0e <__sflush_r+0x92>
 80109ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80109ae:	89a3      	ldrh	r3, [r4, #12]
 80109b0:	0759      	lsls	r1, r3, #29
 80109b2:	d505      	bpl.n	80109c0 <__sflush_r+0x44>
 80109b4:	6863      	ldr	r3, [r4, #4]
 80109b6:	1ad2      	subs	r2, r2, r3
 80109b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80109ba:	b10b      	cbz	r3, 80109c0 <__sflush_r+0x44>
 80109bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80109be:	1ad2      	subs	r2, r2, r3
 80109c0:	2300      	movs	r3, #0
 80109c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80109c4:	6a21      	ldr	r1, [r4, #32]
 80109c6:	4628      	mov	r0, r5
 80109c8:	47b0      	blx	r6
 80109ca:	1c43      	adds	r3, r0, #1
 80109cc:	89a3      	ldrh	r3, [r4, #12]
 80109ce:	d106      	bne.n	80109de <__sflush_r+0x62>
 80109d0:	6829      	ldr	r1, [r5, #0]
 80109d2:	291d      	cmp	r1, #29
 80109d4:	d82b      	bhi.n	8010a2e <__sflush_r+0xb2>
 80109d6:	4a2a      	ldr	r2, [pc, #168]	@ (8010a80 <__sflush_r+0x104>)
 80109d8:	40ca      	lsrs	r2, r1
 80109da:	07d6      	lsls	r6, r2, #31
 80109dc:	d527      	bpl.n	8010a2e <__sflush_r+0xb2>
 80109de:	2200      	movs	r2, #0
 80109e0:	6062      	str	r2, [r4, #4]
 80109e2:	04d9      	lsls	r1, r3, #19
 80109e4:	6922      	ldr	r2, [r4, #16]
 80109e6:	6022      	str	r2, [r4, #0]
 80109e8:	d504      	bpl.n	80109f4 <__sflush_r+0x78>
 80109ea:	1c42      	adds	r2, r0, #1
 80109ec:	d101      	bne.n	80109f2 <__sflush_r+0x76>
 80109ee:	682b      	ldr	r3, [r5, #0]
 80109f0:	b903      	cbnz	r3, 80109f4 <__sflush_r+0x78>
 80109f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80109f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80109f6:	602f      	str	r7, [r5, #0]
 80109f8:	b1b9      	cbz	r1, 8010a2a <__sflush_r+0xae>
 80109fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80109fe:	4299      	cmp	r1, r3
 8010a00:	d002      	beq.n	8010a08 <__sflush_r+0x8c>
 8010a02:	4628      	mov	r0, r5
 8010a04:	f7ff f9fe 	bl	800fe04 <_free_r>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a0c:	e00d      	b.n	8010a2a <__sflush_r+0xae>
 8010a0e:	2301      	movs	r3, #1
 8010a10:	4628      	mov	r0, r5
 8010a12:	47b0      	blx	r6
 8010a14:	4602      	mov	r2, r0
 8010a16:	1c50      	adds	r0, r2, #1
 8010a18:	d1c9      	bne.n	80109ae <__sflush_r+0x32>
 8010a1a:	682b      	ldr	r3, [r5, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d0c6      	beq.n	80109ae <__sflush_r+0x32>
 8010a20:	2b1d      	cmp	r3, #29
 8010a22:	d001      	beq.n	8010a28 <__sflush_r+0xac>
 8010a24:	2b16      	cmp	r3, #22
 8010a26:	d11e      	bne.n	8010a66 <__sflush_r+0xea>
 8010a28:	602f      	str	r7, [r5, #0]
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	e022      	b.n	8010a74 <__sflush_r+0xf8>
 8010a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a32:	b21b      	sxth	r3, r3
 8010a34:	e01b      	b.n	8010a6e <__sflush_r+0xf2>
 8010a36:	690f      	ldr	r7, [r1, #16]
 8010a38:	2f00      	cmp	r7, #0
 8010a3a:	d0f6      	beq.n	8010a2a <__sflush_r+0xae>
 8010a3c:	0793      	lsls	r3, r2, #30
 8010a3e:	680e      	ldr	r6, [r1, #0]
 8010a40:	bf08      	it	eq
 8010a42:	694b      	ldreq	r3, [r1, #20]
 8010a44:	600f      	str	r7, [r1, #0]
 8010a46:	bf18      	it	ne
 8010a48:	2300      	movne	r3, #0
 8010a4a:	eba6 0807 	sub.w	r8, r6, r7
 8010a4e:	608b      	str	r3, [r1, #8]
 8010a50:	f1b8 0f00 	cmp.w	r8, #0
 8010a54:	dde9      	ble.n	8010a2a <__sflush_r+0xae>
 8010a56:	6a21      	ldr	r1, [r4, #32]
 8010a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010a5a:	4643      	mov	r3, r8
 8010a5c:	463a      	mov	r2, r7
 8010a5e:	4628      	mov	r0, r5
 8010a60:	47b0      	blx	r6
 8010a62:	2800      	cmp	r0, #0
 8010a64:	dc08      	bgt.n	8010a78 <__sflush_r+0xfc>
 8010a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a6e:	81a3      	strh	r3, [r4, #12]
 8010a70:	f04f 30ff 	mov.w	r0, #4294967295
 8010a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a78:	4407      	add	r7, r0
 8010a7a:	eba8 0800 	sub.w	r8, r8, r0
 8010a7e:	e7e7      	b.n	8010a50 <__sflush_r+0xd4>
 8010a80:	20400001 	.word	0x20400001

08010a84 <_fflush_r>:
 8010a84:	b538      	push	{r3, r4, r5, lr}
 8010a86:	690b      	ldr	r3, [r1, #16]
 8010a88:	4605      	mov	r5, r0
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	b913      	cbnz	r3, 8010a94 <_fflush_r+0x10>
 8010a8e:	2500      	movs	r5, #0
 8010a90:	4628      	mov	r0, r5
 8010a92:	bd38      	pop	{r3, r4, r5, pc}
 8010a94:	b118      	cbz	r0, 8010a9e <_fflush_r+0x1a>
 8010a96:	6a03      	ldr	r3, [r0, #32]
 8010a98:	b90b      	cbnz	r3, 8010a9e <_fflush_r+0x1a>
 8010a9a:	f7fe f95b 	bl	800ed54 <__sinit>
 8010a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d0f3      	beq.n	8010a8e <_fflush_r+0xa>
 8010aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010aa8:	07d0      	lsls	r0, r2, #31
 8010aaa:	d404      	bmi.n	8010ab6 <_fflush_r+0x32>
 8010aac:	0599      	lsls	r1, r3, #22
 8010aae:	d402      	bmi.n	8010ab6 <_fflush_r+0x32>
 8010ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ab2:	f7fe fbb0 	bl	800f216 <__retarget_lock_acquire_recursive>
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	4621      	mov	r1, r4
 8010aba:	f7ff ff5f 	bl	801097c <__sflush_r>
 8010abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ac0:	07da      	lsls	r2, r3, #31
 8010ac2:	4605      	mov	r5, r0
 8010ac4:	d4e4      	bmi.n	8010a90 <_fflush_r+0xc>
 8010ac6:	89a3      	ldrh	r3, [r4, #12]
 8010ac8:	059b      	lsls	r3, r3, #22
 8010aca:	d4e1      	bmi.n	8010a90 <_fflush_r+0xc>
 8010acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ace:	f7fe fba3 	bl	800f218 <__retarget_lock_release_recursive>
 8010ad2:	e7dd      	b.n	8010a90 <_fflush_r+0xc>

08010ad4 <__swhatbuf_r>:
 8010ad4:	b570      	push	{r4, r5, r6, lr}
 8010ad6:	460c      	mov	r4, r1
 8010ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010adc:	2900      	cmp	r1, #0
 8010ade:	b096      	sub	sp, #88	@ 0x58
 8010ae0:	4615      	mov	r5, r2
 8010ae2:	461e      	mov	r6, r3
 8010ae4:	da0d      	bge.n	8010b02 <__swhatbuf_r+0x2e>
 8010ae6:	89a3      	ldrh	r3, [r4, #12]
 8010ae8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010aec:	f04f 0100 	mov.w	r1, #0
 8010af0:	bf14      	ite	ne
 8010af2:	2340      	movne	r3, #64	@ 0x40
 8010af4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010af8:	2000      	movs	r0, #0
 8010afa:	6031      	str	r1, [r6, #0]
 8010afc:	602b      	str	r3, [r5, #0]
 8010afe:	b016      	add	sp, #88	@ 0x58
 8010b00:	bd70      	pop	{r4, r5, r6, pc}
 8010b02:	466a      	mov	r2, sp
 8010b04:	f000 f87c 	bl	8010c00 <_fstat_r>
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	dbec      	blt.n	8010ae6 <__swhatbuf_r+0x12>
 8010b0c:	9901      	ldr	r1, [sp, #4]
 8010b0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b16:	4259      	negs	r1, r3
 8010b18:	4159      	adcs	r1, r3
 8010b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b1e:	e7eb      	b.n	8010af8 <__swhatbuf_r+0x24>

08010b20 <__smakebuf_r>:
 8010b20:	898b      	ldrh	r3, [r1, #12]
 8010b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b24:	079d      	lsls	r5, r3, #30
 8010b26:	4606      	mov	r6, r0
 8010b28:	460c      	mov	r4, r1
 8010b2a:	d507      	bpl.n	8010b3c <__smakebuf_r+0x1c>
 8010b2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b30:	6023      	str	r3, [r4, #0]
 8010b32:	6123      	str	r3, [r4, #16]
 8010b34:	2301      	movs	r3, #1
 8010b36:	6163      	str	r3, [r4, #20]
 8010b38:	b003      	add	sp, #12
 8010b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b3c:	ab01      	add	r3, sp, #4
 8010b3e:	466a      	mov	r2, sp
 8010b40:	f7ff ffc8 	bl	8010ad4 <__swhatbuf_r>
 8010b44:	9f00      	ldr	r7, [sp, #0]
 8010b46:	4605      	mov	r5, r0
 8010b48:	4639      	mov	r1, r7
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	f7ff f9ce 	bl	800feec <_malloc_r>
 8010b50:	b948      	cbnz	r0, 8010b66 <__smakebuf_r+0x46>
 8010b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b56:	059a      	lsls	r2, r3, #22
 8010b58:	d4ee      	bmi.n	8010b38 <__smakebuf_r+0x18>
 8010b5a:	f023 0303 	bic.w	r3, r3, #3
 8010b5e:	f043 0302 	orr.w	r3, r3, #2
 8010b62:	81a3      	strh	r3, [r4, #12]
 8010b64:	e7e2      	b.n	8010b2c <__smakebuf_r+0xc>
 8010b66:	89a3      	ldrh	r3, [r4, #12]
 8010b68:	6020      	str	r0, [r4, #0]
 8010b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b6e:	81a3      	strh	r3, [r4, #12]
 8010b70:	9b01      	ldr	r3, [sp, #4]
 8010b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010b76:	b15b      	cbz	r3, 8010b90 <__smakebuf_r+0x70>
 8010b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	f000 f851 	bl	8010c24 <_isatty_r>
 8010b82:	b128      	cbz	r0, 8010b90 <__smakebuf_r+0x70>
 8010b84:	89a3      	ldrh	r3, [r4, #12]
 8010b86:	f023 0303 	bic.w	r3, r3, #3
 8010b8a:	f043 0301 	orr.w	r3, r3, #1
 8010b8e:	81a3      	strh	r3, [r4, #12]
 8010b90:	89a3      	ldrh	r3, [r4, #12]
 8010b92:	431d      	orrs	r5, r3
 8010b94:	81a5      	strh	r5, [r4, #12]
 8010b96:	e7cf      	b.n	8010b38 <__smakebuf_r+0x18>

08010b98 <_putc_r>:
 8010b98:	b570      	push	{r4, r5, r6, lr}
 8010b9a:	460d      	mov	r5, r1
 8010b9c:	4614      	mov	r4, r2
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	b118      	cbz	r0, 8010baa <_putc_r+0x12>
 8010ba2:	6a03      	ldr	r3, [r0, #32]
 8010ba4:	b90b      	cbnz	r3, 8010baa <_putc_r+0x12>
 8010ba6:	f7fe f8d5 	bl	800ed54 <__sinit>
 8010baa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010bac:	07d8      	lsls	r0, r3, #31
 8010bae:	d405      	bmi.n	8010bbc <_putc_r+0x24>
 8010bb0:	89a3      	ldrh	r3, [r4, #12]
 8010bb2:	0599      	lsls	r1, r3, #22
 8010bb4:	d402      	bmi.n	8010bbc <_putc_r+0x24>
 8010bb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bb8:	f7fe fb2d 	bl	800f216 <__retarget_lock_acquire_recursive>
 8010bbc:	68a3      	ldr	r3, [r4, #8]
 8010bbe:	3b01      	subs	r3, #1
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	60a3      	str	r3, [r4, #8]
 8010bc4:	da05      	bge.n	8010bd2 <_putc_r+0x3a>
 8010bc6:	69a2      	ldr	r2, [r4, #24]
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	db12      	blt.n	8010bf2 <_putc_r+0x5a>
 8010bcc:	b2eb      	uxtb	r3, r5
 8010bce:	2b0a      	cmp	r3, #10
 8010bd0:	d00f      	beq.n	8010bf2 <_putc_r+0x5a>
 8010bd2:	6823      	ldr	r3, [r4, #0]
 8010bd4:	1c5a      	adds	r2, r3, #1
 8010bd6:	6022      	str	r2, [r4, #0]
 8010bd8:	701d      	strb	r5, [r3, #0]
 8010bda:	b2ed      	uxtb	r5, r5
 8010bdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010bde:	07da      	lsls	r2, r3, #31
 8010be0:	d405      	bmi.n	8010bee <_putc_r+0x56>
 8010be2:	89a3      	ldrh	r3, [r4, #12]
 8010be4:	059b      	lsls	r3, r3, #22
 8010be6:	d402      	bmi.n	8010bee <_putc_r+0x56>
 8010be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bea:	f7fe fb15 	bl	800f218 <__retarget_lock_release_recursive>
 8010bee:	4628      	mov	r0, r5
 8010bf0:	bd70      	pop	{r4, r5, r6, pc}
 8010bf2:	4629      	mov	r1, r5
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	4630      	mov	r0, r6
 8010bf8:	f7fe f99d 	bl	800ef36 <__swbuf_r>
 8010bfc:	4605      	mov	r5, r0
 8010bfe:	e7ed      	b.n	8010bdc <_putc_r+0x44>

08010c00 <_fstat_r>:
 8010c00:	b538      	push	{r3, r4, r5, lr}
 8010c02:	4d07      	ldr	r5, [pc, #28]	@ (8010c20 <_fstat_r+0x20>)
 8010c04:	2300      	movs	r3, #0
 8010c06:	4604      	mov	r4, r0
 8010c08:	4608      	mov	r0, r1
 8010c0a:	4611      	mov	r1, r2
 8010c0c:	602b      	str	r3, [r5, #0]
 8010c0e:	f7f4 f8e3 	bl	8004dd8 <_fstat>
 8010c12:	1c43      	adds	r3, r0, #1
 8010c14:	d102      	bne.n	8010c1c <_fstat_r+0x1c>
 8010c16:	682b      	ldr	r3, [r5, #0]
 8010c18:	b103      	cbz	r3, 8010c1c <_fstat_r+0x1c>
 8010c1a:	6023      	str	r3, [r4, #0]
 8010c1c:	bd38      	pop	{r3, r4, r5, pc}
 8010c1e:	bf00      	nop
 8010c20:	240055fc 	.word	0x240055fc

08010c24 <_isatty_r>:
 8010c24:	b538      	push	{r3, r4, r5, lr}
 8010c26:	4d06      	ldr	r5, [pc, #24]	@ (8010c40 <_isatty_r+0x1c>)
 8010c28:	2300      	movs	r3, #0
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	4608      	mov	r0, r1
 8010c2e:	602b      	str	r3, [r5, #0]
 8010c30:	f7f4 f8e2 	bl	8004df8 <_isatty>
 8010c34:	1c43      	adds	r3, r0, #1
 8010c36:	d102      	bne.n	8010c3e <_isatty_r+0x1a>
 8010c38:	682b      	ldr	r3, [r5, #0]
 8010c3a:	b103      	cbz	r3, 8010c3e <_isatty_r+0x1a>
 8010c3c:	6023      	str	r3, [r4, #0]
 8010c3e:	bd38      	pop	{r3, r4, r5, pc}
 8010c40:	240055fc 	.word	0x240055fc

08010c44 <_sbrk_r>:
 8010c44:	b538      	push	{r3, r4, r5, lr}
 8010c46:	4d06      	ldr	r5, [pc, #24]	@ (8010c60 <_sbrk_r+0x1c>)
 8010c48:	2300      	movs	r3, #0
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	4608      	mov	r0, r1
 8010c4e:	602b      	str	r3, [r5, #0]
 8010c50:	f7f4 f8ea 	bl	8004e28 <_sbrk>
 8010c54:	1c43      	adds	r3, r0, #1
 8010c56:	d102      	bne.n	8010c5e <_sbrk_r+0x1a>
 8010c58:	682b      	ldr	r3, [r5, #0]
 8010c5a:	b103      	cbz	r3, 8010c5e <_sbrk_r+0x1a>
 8010c5c:	6023      	str	r3, [r4, #0]
 8010c5e:	bd38      	pop	{r3, r4, r5, pc}
 8010c60:	240055fc 	.word	0x240055fc

08010c64 <__assert_func>:
 8010c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c66:	4614      	mov	r4, r2
 8010c68:	461a      	mov	r2, r3
 8010c6a:	4b09      	ldr	r3, [pc, #36]	@ (8010c90 <__assert_func+0x2c>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	4605      	mov	r5, r0
 8010c70:	68d8      	ldr	r0, [r3, #12]
 8010c72:	b14c      	cbz	r4, 8010c88 <__assert_func+0x24>
 8010c74:	4b07      	ldr	r3, [pc, #28]	@ (8010c94 <__assert_func+0x30>)
 8010c76:	9100      	str	r1, [sp, #0]
 8010c78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010c7c:	4906      	ldr	r1, [pc, #24]	@ (8010c98 <__assert_func+0x34>)
 8010c7e:	462b      	mov	r3, r5
 8010c80:	f000 f842 	bl	8010d08 <fiprintf>
 8010c84:	f000 f852 	bl	8010d2c <abort>
 8010c88:	4b04      	ldr	r3, [pc, #16]	@ (8010c9c <__assert_func+0x38>)
 8010c8a:	461c      	mov	r4, r3
 8010c8c:	e7f3      	b.n	8010c76 <__assert_func+0x12>
 8010c8e:	bf00      	nop
 8010c90:	2400008c 	.word	0x2400008c
 8010c94:	080115d5 	.word	0x080115d5
 8010c98:	080115e2 	.word	0x080115e2
 8010c9c:	08011610 	.word	0x08011610

08010ca0 <_calloc_r>:
 8010ca0:	b570      	push	{r4, r5, r6, lr}
 8010ca2:	fba1 5402 	umull	r5, r4, r1, r2
 8010ca6:	b934      	cbnz	r4, 8010cb6 <_calloc_r+0x16>
 8010ca8:	4629      	mov	r1, r5
 8010caa:	f7ff f91f 	bl	800feec <_malloc_r>
 8010cae:	4606      	mov	r6, r0
 8010cb0:	b928      	cbnz	r0, 8010cbe <_calloc_r+0x1e>
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	bd70      	pop	{r4, r5, r6, pc}
 8010cb6:	220c      	movs	r2, #12
 8010cb8:	6002      	str	r2, [r0, #0]
 8010cba:	2600      	movs	r6, #0
 8010cbc:	e7f9      	b.n	8010cb2 <_calloc_r+0x12>
 8010cbe:	462a      	mov	r2, r5
 8010cc0:	4621      	mov	r1, r4
 8010cc2:	f7fe f9cd 	bl	800f060 <memset>
 8010cc6:	e7f4      	b.n	8010cb2 <_calloc_r+0x12>

08010cc8 <__ascii_mbtowc>:
 8010cc8:	b082      	sub	sp, #8
 8010cca:	b901      	cbnz	r1, 8010cce <__ascii_mbtowc+0x6>
 8010ccc:	a901      	add	r1, sp, #4
 8010cce:	b142      	cbz	r2, 8010ce2 <__ascii_mbtowc+0x1a>
 8010cd0:	b14b      	cbz	r3, 8010ce6 <__ascii_mbtowc+0x1e>
 8010cd2:	7813      	ldrb	r3, [r2, #0]
 8010cd4:	600b      	str	r3, [r1, #0]
 8010cd6:	7812      	ldrb	r2, [r2, #0]
 8010cd8:	1e10      	subs	r0, r2, #0
 8010cda:	bf18      	it	ne
 8010cdc:	2001      	movne	r0, #1
 8010cde:	b002      	add	sp, #8
 8010ce0:	4770      	bx	lr
 8010ce2:	4610      	mov	r0, r2
 8010ce4:	e7fb      	b.n	8010cde <__ascii_mbtowc+0x16>
 8010ce6:	f06f 0001 	mvn.w	r0, #1
 8010cea:	e7f8      	b.n	8010cde <__ascii_mbtowc+0x16>

08010cec <__ascii_wctomb>:
 8010cec:	4603      	mov	r3, r0
 8010cee:	4608      	mov	r0, r1
 8010cf0:	b141      	cbz	r1, 8010d04 <__ascii_wctomb+0x18>
 8010cf2:	2aff      	cmp	r2, #255	@ 0xff
 8010cf4:	d904      	bls.n	8010d00 <__ascii_wctomb+0x14>
 8010cf6:	228a      	movs	r2, #138	@ 0x8a
 8010cf8:	601a      	str	r2, [r3, #0]
 8010cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8010cfe:	4770      	bx	lr
 8010d00:	700a      	strb	r2, [r1, #0]
 8010d02:	2001      	movs	r0, #1
 8010d04:	4770      	bx	lr
	...

08010d08 <fiprintf>:
 8010d08:	b40e      	push	{r1, r2, r3}
 8010d0a:	b503      	push	{r0, r1, lr}
 8010d0c:	4601      	mov	r1, r0
 8010d0e:	ab03      	add	r3, sp, #12
 8010d10:	4805      	ldr	r0, [pc, #20]	@ (8010d28 <fiprintf+0x20>)
 8010d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d16:	6800      	ldr	r0, [r0, #0]
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	f7ff fd17 	bl	801074c <_vfiprintf_r>
 8010d1e:	b002      	add	sp, #8
 8010d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d24:	b003      	add	sp, #12
 8010d26:	4770      	bx	lr
 8010d28:	2400008c 	.word	0x2400008c

08010d2c <abort>:
 8010d2c:	b508      	push	{r3, lr}
 8010d2e:	2006      	movs	r0, #6
 8010d30:	f000 f82c 	bl	8010d8c <raise>
 8010d34:	2001      	movs	r0, #1
 8010d36:	f7f4 f81b 	bl	8004d70 <_exit>

08010d3a <_raise_r>:
 8010d3a:	291f      	cmp	r1, #31
 8010d3c:	b538      	push	{r3, r4, r5, lr}
 8010d3e:	4605      	mov	r5, r0
 8010d40:	460c      	mov	r4, r1
 8010d42:	d904      	bls.n	8010d4e <_raise_r+0x14>
 8010d44:	2316      	movs	r3, #22
 8010d46:	6003      	str	r3, [r0, #0]
 8010d48:	f04f 30ff 	mov.w	r0, #4294967295
 8010d4c:	bd38      	pop	{r3, r4, r5, pc}
 8010d4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d50:	b112      	cbz	r2, 8010d58 <_raise_r+0x1e>
 8010d52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d56:	b94b      	cbnz	r3, 8010d6c <_raise_r+0x32>
 8010d58:	4628      	mov	r0, r5
 8010d5a:	f000 f831 	bl	8010dc0 <_getpid_r>
 8010d5e:	4622      	mov	r2, r4
 8010d60:	4601      	mov	r1, r0
 8010d62:	4628      	mov	r0, r5
 8010d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d68:	f000 b818 	b.w	8010d9c <_kill_r>
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	d00a      	beq.n	8010d86 <_raise_r+0x4c>
 8010d70:	1c59      	adds	r1, r3, #1
 8010d72:	d103      	bne.n	8010d7c <_raise_r+0x42>
 8010d74:	2316      	movs	r3, #22
 8010d76:	6003      	str	r3, [r0, #0]
 8010d78:	2001      	movs	r0, #1
 8010d7a:	e7e7      	b.n	8010d4c <_raise_r+0x12>
 8010d7c:	2100      	movs	r1, #0
 8010d7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d82:	4620      	mov	r0, r4
 8010d84:	4798      	blx	r3
 8010d86:	2000      	movs	r0, #0
 8010d88:	e7e0      	b.n	8010d4c <_raise_r+0x12>
	...

08010d8c <raise>:
 8010d8c:	4b02      	ldr	r3, [pc, #8]	@ (8010d98 <raise+0xc>)
 8010d8e:	4601      	mov	r1, r0
 8010d90:	6818      	ldr	r0, [r3, #0]
 8010d92:	f7ff bfd2 	b.w	8010d3a <_raise_r>
 8010d96:	bf00      	nop
 8010d98:	2400008c 	.word	0x2400008c

08010d9c <_kill_r>:
 8010d9c:	b538      	push	{r3, r4, r5, lr}
 8010d9e:	4d07      	ldr	r5, [pc, #28]	@ (8010dbc <_kill_r+0x20>)
 8010da0:	2300      	movs	r3, #0
 8010da2:	4604      	mov	r4, r0
 8010da4:	4608      	mov	r0, r1
 8010da6:	4611      	mov	r1, r2
 8010da8:	602b      	str	r3, [r5, #0]
 8010daa:	f7f3 ffd1 	bl	8004d50 <_kill>
 8010dae:	1c43      	adds	r3, r0, #1
 8010db0:	d102      	bne.n	8010db8 <_kill_r+0x1c>
 8010db2:	682b      	ldr	r3, [r5, #0]
 8010db4:	b103      	cbz	r3, 8010db8 <_kill_r+0x1c>
 8010db6:	6023      	str	r3, [r4, #0]
 8010db8:	bd38      	pop	{r3, r4, r5, pc}
 8010dba:	bf00      	nop
 8010dbc:	240055fc 	.word	0x240055fc

08010dc0 <_getpid_r>:
 8010dc0:	f7f3 bfbe 	b.w	8004d40 <_getpid>

08010dc4 <fmax>:
 8010dc4:	b508      	push	{r3, lr}
 8010dc6:	ed2d 8b04 	vpush	{d8-d9}
 8010dca:	eeb0 8b40 	vmov.f64	d8, d0
 8010dce:	eeb0 9b41 	vmov.f64	d9, d1
 8010dd2:	f000 f831 	bl	8010e38 <__fpclassifyd>
 8010dd6:	b930      	cbnz	r0, 8010de6 <fmax+0x22>
 8010dd8:	eeb0 8b49 	vmov.f64	d8, d9
 8010ddc:	eeb0 0b48 	vmov.f64	d0, d8
 8010de0:	ecbd 8b04 	vpop	{d8-d9}
 8010de4:	bd08      	pop	{r3, pc}
 8010de6:	eeb0 0b49 	vmov.f64	d0, d9
 8010dea:	f000 f825 	bl	8010e38 <__fpclassifyd>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d0f4      	beq.n	8010ddc <fmax+0x18>
 8010df2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dfa:	dded      	ble.n	8010dd8 <fmax+0x14>
 8010dfc:	e7ee      	b.n	8010ddc <fmax+0x18>

08010dfe <fmin>:
 8010dfe:	b508      	push	{r3, lr}
 8010e00:	ed2d 8b04 	vpush	{d8-d9}
 8010e04:	eeb0 8b40 	vmov.f64	d8, d0
 8010e08:	eeb0 9b41 	vmov.f64	d9, d1
 8010e0c:	f000 f814 	bl	8010e38 <__fpclassifyd>
 8010e10:	b930      	cbnz	r0, 8010e20 <fmin+0x22>
 8010e12:	eeb0 8b49 	vmov.f64	d8, d9
 8010e16:	eeb0 0b48 	vmov.f64	d0, d8
 8010e1a:	ecbd 8b04 	vpop	{d8-d9}
 8010e1e:	bd08      	pop	{r3, pc}
 8010e20:	eeb0 0b49 	vmov.f64	d0, d9
 8010e24:	f000 f808 	bl	8010e38 <__fpclassifyd>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d0f4      	beq.n	8010e16 <fmin+0x18>
 8010e2c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e34:	d5ed      	bpl.n	8010e12 <fmin+0x14>
 8010e36:	e7ee      	b.n	8010e16 <fmin+0x18>

08010e38 <__fpclassifyd>:
 8010e38:	ec51 0b10 	vmov	r0, r1, d0
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8010e42:	b510      	push	{r4, lr}
 8010e44:	d104      	bne.n	8010e50 <__fpclassifyd+0x18>
 8010e46:	2800      	cmp	r0, #0
 8010e48:	bf0c      	ite	eq
 8010e4a:	2002      	moveq	r0, #2
 8010e4c:	2003      	movne	r0, #3
 8010e4e:	bd10      	pop	{r4, pc}
 8010e50:	4a09      	ldr	r2, [pc, #36]	@ (8010e78 <__fpclassifyd+0x40>)
 8010e52:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8010e56:	4294      	cmp	r4, r2
 8010e58:	d908      	bls.n	8010e6c <__fpclassifyd+0x34>
 8010e5a:	4a08      	ldr	r2, [pc, #32]	@ (8010e7c <__fpclassifyd+0x44>)
 8010e5c:	4213      	tst	r3, r2
 8010e5e:	d007      	beq.n	8010e70 <__fpclassifyd+0x38>
 8010e60:	4291      	cmp	r1, r2
 8010e62:	d107      	bne.n	8010e74 <__fpclassifyd+0x3c>
 8010e64:	fab0 f080 	clz	r0, r0
 8010e68:	0940      	lsrs	r0, r0, #5
 8010e6a:	e7f0      	b.n	8010e4e <__fpclassifyd+0x16>
 8010e6c:	2004      	movs	r0, #4
 8010e6e:	e7ee      	b.n	8010e4e <__fpclassifyd+0x16>
 8010e70:	2003      	movs	r0, #3
 8010e72:	e7ec      	b.n	8010e4e <__fpclassifyd+0x16>
 8010e74:	2000      	movs	r0, #0
 8010e76:	e7ea      	b.n	8010e4e <__fpclassifyd+0x16>
 8010e78:	7fdfffff 	.word	0x7fdfffff
 8010e7c:	7ff00000 	.word	0x7ff00000

08010e80 <fmaxf>:
 8010e80:	b508      	push	{r3, lr}
 8010e82:	ed2d 8b02 	vpush	{d8}
 8010e86:	eeb0 8a40 	vmov.f32	s16, s0
 8010e8a:	eef0 8a60 	vmov.f32	s17, s1
 8010e8e:	f000 f815 	bl	8010ebc <__fpclassifyf>
 8010e92:	b930      	cbnz	r0, 8010ea2 <fmaxf+0x22>
 8010e94:	eeb0 8a68 	vmov.f32	s16, s17
 8010e98:	eeb0 0a48 	vmov.f32	s0, s16
 8010e9c:	ecbd 8b02 	vpop	{d8}
 8010ea0:	bd08      	pop	{r3, pc}
 8010ea2:	eeb0 0a68 	vmov.f32	s0, s17
 8010ea6:	f000 f809 	bl	8010ebc <__fpclassifyf>
 8010eaa:	2800      	cmp	r0, #0
 8010eac:	d0f4      	beq.n	8010e98 <fmaxf+0x18>
 8010eae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb6:	dded      	ble.n	8010e94 <fmaxf+0x14>
 8010eb8:	e7ee      	b.n	8010e98 <fmaxf+0x18>
	...

08010ebc <__fpclassifyf>:
 8010ebc:	ee10 3a10 	vmov	r3, s0
 8010ec0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010ec4:	d00d      	beq.n	8010ee2 <__fpclassifyf+0x26>
 8010ec6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010eca:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010ece:	d30a      	bcc.n	8010ee6 <__fpclassifyf+0x2a>
 8010ed0:	4b07      	ldr	r3, [pc, #28]	@ (8010ef0 <__fpclassifyf+0x34>)
 8010ed2:	1e42      	subs	r2, r0, #1
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d908      	bls.n	8010eea <__fpclassifyf+0x2e>
 8010ed8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010edc:	4258      	negs	r0, r3
 8010ede:	4158      	adcs	r0, r3
 8010ee0:	4770      	bx	lr
 8010ee2:	2002      	movs	r0, #2
 8010ee4:	4770      	bx	lr
 8010ee6:	2004      	movs	r0, #4
 8010ee8:	4770      	bx	lr
 8010eea:	2003      	movs	r0, #3
 8010eec:	4770      	bx	lr
 8010eee:	bf00      	nop
 8010ef0:	007ffffe 	.word	0x007ffffe

08010ef4 <sinf_poly>:
 8010ef4:	07cb      	lsls	r3, r1, #31
 8010ef6:	d412      	bmi.n	8010f1e <sinf_poly+0x2a>
 8010ef8:	ee21 5b00 	vmul.f64	d5, d1, d0
 8010efc:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8010f00:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8010f04:	eea6 7b01 	vfma.f64	d7, d6, d1
 8010f08:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8010f0c:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010f10:	eea6 0b05 	vfma.f64	d0, d6, d5
 8010f14:	eea7 0b01 	vfma.f64	d0, d7, d1
 8010f18:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010f1c:	4770      	bx	lr
 8010f1e:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8010f22:	ee21 5b01 	vmul.f64	d5, d1, d1
 8010f26:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8010f2a:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8010f2e:	eea1 7b06 	vfma.f64	d7, d1, d6
 8010f32:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8010f36:	eea1 0b06 	vfma.f64	d0, d1, d6
 8010f3a:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8010f3e:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010f42:	eea5 0b06 	vfma.f64	d0, d5, d6
 8010f46:	e7e5      	b.n	8010f14 <sinf_poly+0x20>

08010f48 <sinf>:
 8010f48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f4a:	ee10 4a10 	vmov	r4, s0
 8010f4e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8010f52:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8010f56:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8010f5a:	eef0 7a40 	vmov.f32	s15, s0
 8010f5e:	d218      	bcs.n	8010f92 <sinf+0x4a>
 8010f60:	ee26 1b06 	vmul.f64	d1, d6, d6
 8010f64:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8010f68:	d20a      	bcs.n	8010f80 <sinf+0x38>
 8010f6a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8010f6e:	d103      	bne.n	8010f78 <sinf+0x30>
 8010f70:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8010f74:	ed8d 1a01 	vstr	s2, [sp, #4]
 8010f78:	eeb0 0a67 	vmov.f32	s0, s15
 8010f7c:	b003      	add	sp, #12
 8010f7e:	bd30      	pop	{r4, r5, pc}
 8010f80:	483b      	ldr	r0, [pc, #236]	@ (8011070 <sinf+0x128>)
 8010f82:	eeb0 0b46 	vmov.f64	d0, d6
 8010f86:	2100      	movs	r1, #0
 8010f88:	b003      	add	sp, #12
 8010f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f8e:	f7ff bfb1 	b.w	8010ef4 <sinf_poly>
 8010f92:	f240 422e 	movw	r2, #1070	@ 0x42e
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d824      	bhi.n	8010fe4 <sinf+0x9c>
 8010f9a:	4b35      	ldr	r3, [pc, #212]	@ (8011070 <sinf+0x128>)
 8010f9c:	ed93 7b08 	vldr	d7, [r3, #32]
 8010fa0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010fa4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010fa8:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8010fac:	ee17 1a90 	vmov	r1, s15
 8010fb0:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8010fb4:	1609      	asrs	r1, r1, #24
 8010fb6:	ee07 1a90 	vmov	s15, r1
 8010fba:	f001 0203 	and.w	r2, r1, #3
 8010fbe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8010fc2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010fc6:	ed92 0b00 	vldr	d0, [r2]
 8010fca:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8010fce:	f011 0f02 	tst.w	r1, #2
 8010fd2:	eea5 6b47 	vfms.f64	d6, d5, d7
 8010fd6:	bf08      	it	eq
 8010fd8:	4618      	moveq	r0, r3
 8010fda:	ee26 1b06 	vmul.f64	d1, d6, d6
 8010fde:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010fe2:	e7d1      	b.n	8010f88 <sinf+0x40>
 8010fe4:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8010fe8:	d237      	bcs.n	801105a <sinf+0x112>
 8010fea:	4922      	ldr	r1, [pc, #136]	@ (8011074 <sinf+0x12c>)
 8010fec:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8010ff0:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8010ff4:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8010ff8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8010ffc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011000:	6a10      	ldr	r0, [r2, #32]
 8011002:	6912      	ldr	r2, [r2, #16]
 8011004:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011008:	40ab      	lsls	r3, r5
 801100a:	fba0 5003 	umull	r5, r0, r0, r3
 801100e:	4359      	muls	r1, r3
 8011010:	fbe3 0102 	umlal	r0, r1, r3, r2
 8011014:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8011018:	0f9d      	lsrs	r5, r3, #30
 801101a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801101e:	1ac9      	subs	r1, r1, r3
 8011020:	f7ef fb44 	bl	80006ac <__aeabi_l2d>
 8011024:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8011028:	4b11      	ldr	r3, [pc, #68]	@ (8011070 <sinf+0x128>)
 801102a:	f004 0203 	and.w	r2, r4, #3
 801102e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011032:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8011068 <sinf+0x120>
 8011036:	ed92 0b00 	vldr	d0, [r2]
 801103a:	ec41 0b17 	vmov	d7, r0, r1
 801103e:	f014 0f02 	tst.w	r4, #2
 8011042:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011046:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801104a:	4629      	mov	r1, r5
 801104c:	bf08      	it	eq
 801104e:	4618      	moveq	r0, r3
 8011050:	ee27 1b07 	vmul.f64	d1, d7, d7
 8011054:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011058:	e796      	b.n	8010f88 <sinf+0x40>
 801105a:	b003      	add	sp, #12
 801105c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011060:	f000 b8e4 	b.w	801122c <__math_invalidf>
 8011064:	f3af 8000 	nop.w
 8011068:	54442d18 	.word	0x54442d18
 801106c:	3c1921fb 	.word	0x3c1921fb
 8011070:	08011878 	.word	0x08011878
 8011074:	08011814 	.word	0x08011814

08011078 <sinf_poly>:
 8011078:	07cb      	lsls	r3, r1, #31
 801107a:	d412      	bmi.n	80110a2 <sinf_poly+0x2a>
 801107c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8011080:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8011084:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8011088:	eea6 7b01 	vfma.f64	d7, d6, d1
 801108c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8011090:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011094:	eea6 0b05 	vfma.f64	d0, d6, d5
 8011098:	eea7 0b01 	vfma.f64	d0, d7, d1
 801109c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80110a0:	4770      	bx	lr
 80110a2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80110a6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80110aa:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80110ae:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80110b2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80110b6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80110ba:	eea1 0b06 	vfma.f64	d0, d1, d6
 80110be:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80110c2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80110c6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80110ca:	e7e5      	b.n	8011098 <sinf_poly+0x20>
 80110cc:	0000      	movs	r0, r0
	...

080110d0 <cosf>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	ee10 4a10 	vmov	r4, s0
 80110d6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80110da:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80110de:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80110e2:	d21f      	bcs.n	8011124 <cosf+0x54>
 80110e4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80110e8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80110ec:	f0c0 8082 	bcc.w	80111f4 <cosf+0x124>
 80110f0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80110f4:	4b44      	ldr	r3, [pc, #272]	@ (8011208 <cosf+0x138>)
 80110f6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80110fa:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80110fe:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8011102:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011106:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801110a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801110e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8011112:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011116:	eea4 0b05 	vfma.f64	d0, d4, d5
 801111a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801111e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011122:	bd38      	pop	{r3, r4, r5, pc}
 8011124:	f240 422e 	movw	r2, #1070	@ 0x42e
 8011128:	4293      	cmp	r3, r2
 801112a:	d829      	bhi.n	8011180 <cosf+0xb0>
 801112c:	4b36      	ldr	r3, [pc, #216]	@ (8011208 <cosf+0x138>)
 801112e:	ed93 6b08 	vldr	d6, [r3, #32]
 8011132:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011136:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801113a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801113e:	ee16 1a90 	vmov	r1, s13
 8011142:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8011146:	1609      	asrs	r1, r1, #24
 8011148:	ee06 1a90 	vmov	s13, r1
 801114c:	f001 0203 	and.w	r2, r1, #3
 8011150:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011154:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8011158:	ed92 0b00 	vldr	d0, [r2]
 801115c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8011160:	f011 0f02 	tst.w	r1, #2
 8011164:	f081 0101 	eor.w	r1, r1, #1
 8011168:	eea5 7b46 	vfms.f64	d7, d5, d6
 801116c:	bf08      	it	eq
 801116e:	4618      	moveq	r0, r3
 8011170:	ee27 1b07 	vmul.f64	d1, d7, d7
 8011174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011178:	ee20 0b07 	vmul.f64	d0, d0, d7
 801117c:	f7ff bf7c 	b.w	8011078 <sinf_poly>
 8011180:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8011184:	d232      	bcs.n	80111ec <cosf+0x11c>
 8011186:	4921      	ldr	r1, [pc, #132]	@ (801120c <cosf+0x13c>)
 8011188:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801118c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8011190:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8011194:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8011198:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801119c:	6a10      	ldr	r0, [r2, #32]
 801119e:	6912      	ldr	r2, [r2, #16]
 80111a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80111a4:	40ab      	lsls	r3, r5
 80111a6:	fba0 5003 	umull	r5, r0, r0, r3
 80111aa:	4359      	muls	r1, r3
 80111ac:	fbe3 0102 	umlal	r0, r1, r3, r2
 80111b0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80111b4:	0f9d      	lsrs	r5, r3, #30
 80111b6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80111ba:	1ac9      	subs	r1, r1, r3
 80111bc:	f7ef fa76 	bl	80006ac <__aeabi_l2d>
 80111c0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80111c4:	4b10      	ldr	r3, [pc, #64]	@ (8011208 <cosf+0x138>)
 80111c6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8011200 <cosf+0x130>
 80111ca:	ec41 0b17 	vmov	d7, r0, r1
 80111ce:	f004 0203 	and.w	r2, r4, #3
 80111d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80111d6:	ed92 0b00 	vldr	d0, [r2]
 80111da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80111de:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80111e2:	f014 0f02 	tst.w	r4, #2
 80111e6:	f085 0101 	eor.w	r1, r5, #1
 80111ea:	e7bf      	b.n	801116c <cosf+0x9c>
 80111ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111f0:	f000 b81c 	b.w	801122c <__math_invalidf>
 80111f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80111f8:	e793      	b.n	8011122 <cosf+0x52>
 80111fa:	bf00      	nop
 80111fc:	f3af 8000 	nop.w
 8011200:	54442d18 	.word	0x54442d18
 8011204:	3c1921fb 	.word	0x3c1921fb
 8011208:	08011878 	.word	0x08011878
 801120c:	08011814 	.word	0x08011814

08011210 <with_errnof>:
 8011210:	b510      	push	{r4, lr}
 8011212:	ed2d 8b02 	vpush	{d8}
 8011216:	eeb0 8a40 	vmov.f32	s16, s0
 801121a:	4604      	mov	r4, r0
 801121c:	f7fd ffd0 	bl	800f1c0 <__errno>
 8011220:	eeb0 0a48 	vmov.f32	s0, s16
 8011224:	ecbd 8b02 	vpop	{d8}
 8011228:	6004      	str	r4, [r0, #0]
 801122a:	bd10      	pop	{r4, pc}

0801122c <__math_invalidf>:
 801122c:	eef0 7a40 	vmov.f32	s15, s0
 8011230:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011234:	eef4 7a67 	vcmp.f32	s15, s15
 8011238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8011240:	d602      	bvs.n	8011248 <__math_invalidf+0x1c>
 8011242:	2021      	movs	r0, #33	@ 0x21
 8011244:	f7ff bfe4 	b.w	8011210 <with_errnof>
 8011248:	4770      	bx	lr
	...

0801124c <_init>:
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124e:	bf00      	nop
 8011250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011252:	bc08      	pop	{r3}
 8011254:	469e      	mov	lr, r3
 8011256:	4770      	bx	lr

08011258 <_fini>:
 8011258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801125a:	bf00      	nop
 801125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801125e:	bc08      	pop	{r3}
 8011260:	469e      	mov	lr, r3
 8011262:	4770      	bx	lr
