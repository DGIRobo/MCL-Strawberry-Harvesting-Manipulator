
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d3c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08016fe0  08016fe0  00017fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080177e0  080177e0  000187e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080177e8  080177e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080177ec  080177ec  000187ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  080177f0  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000072c8  24000248  08017a38  00019248  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24007510  08017a38  00019510  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00019248  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dc44  00000000  00000000  00019276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005154  00000000  00000000  00046eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f50  00000000  00000000  0004c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001841  00000000  00000000  0004df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006420  00000000  00000000  0004f7a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027541  00000000  00000000  00055bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f3b2  00000000  00000000  0007d102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001fc4b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009afc  00000000  00000000  001fc56c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  00206068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  002060e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  00207187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016fc4 	.word	0x08016fc4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	08016fc4 	.word	0x08016fc4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b9c2 	b.w	8000cc0 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f840 	bl	80009c8 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__aeabi_d2lz>:
 8000954:	b508      	push	{r3, lr}
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
 800095e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	d403      	bmi.n	8000970 <__aeabi_d2lz+0x1c>
 8000968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800096c:	f000 b80c 	b.w	8000988 <__aeabi_d2ulz>
 8000970:	eeb1 7b47 	vneg.f64	d7, d7
 8000974:	ec51 0b17 	vmov	r0, r1, d7
 8000978:	f000 f806 	bl	8000988 <__aeabi_d2ulz>
 800097c:	4240      	negs	r0, r0
 800097e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000982:	bd08      	pop	{r3, pc}
 8000984:	0000      	movs	r0, r0
	...

08000988 <__aeabi_d2ulz>:
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80009b8 <__aeabi_d2ulz+0x30>
 800098c:	ec41 0b17 	vmov	d7, r0, r1
 8000990:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80009c0 <__aeabi_d2ulz+0x38>
 8000994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000998:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800099c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a8:	ee16 1a10 	vmov	r1, s12
 80009ac:	ee17 0a90 	vmov	r0, s15
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	3df00000 	.word	0x3df00000
 80009c0:	00000000 	.word	0x00000000
 80009c4:	41f00000 	.word	0x41f00000

080009c8 <__udivmoddi4>:
 80009c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009cc:	9d08      	ldr	r5, [sp, #32]
 80009ce:	468e      	mov	lr, r1
 80009d0:	4604      	mov	r4, r0
 80009d2:	4688      	mov	r8, r1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d14a      	bne.n	8000a6e <__udivmoddi4+0xa6>
 80009d8:	428a      	cmp	r2, r1
 80009da:	4617      	mov	r7, r2
 80009dc:	d962      	bls.n	8000aa4 <__udivmoddi4+0xdc>
 80009de:	fab2 f682 	clz	r6, r2
 80009e2:	b14e      	cbz	r6, 80009f8 <__udivmoddi4+0x30>
 80009e4:	f1c6 0320 	rsb	r3, r6, #32
 80009e8:	fa01 f806 	lsl.w	r8, r1, r6
 80009ec:	fa20 f303 	lsr.w	r3, r0, r3
 80009f0:	40b7      	lsls	r7, r6
 80009f2:	ea43 0808 	orr.w	r8, r3, r8
 80009f6:	40b4      	lsls	r4, r6
 80009f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009fc:	fa1f fc87 	uxth.w	ip, r7
 8000a00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x62>
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a1c:	f080 80ea 	bcs.w	8000bf4 <__udivmoddi4+0x22c>
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f240 80e7 	bls.w	8000bf4 <__udivmoddi4+0x22c>
 8000a26:	3902      	subs	r1, #2
 8000a28:	443b      	add	r3, r7
 8000a2a:	1a9a      	subs	r2, r3, r2
 8000a2c:	b2a3      	uxth	r3, r4
 8000a2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a3e:	459c      	cmp	ip, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x8e>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a48:	f080 80d6 	bcs.w	8000bf8 <__udivmoddi4+0x230>
 8000a4c:	459c      	cmp	ip, r3
 8000a4e:	f240 80d3 	bls.w	8000bf8 <__udivmoddi4+0x230>
 8000a52:	443b      	add	r3, r7
 8000a54:	3802      	subs	r0, #2
 8000a56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5a:	eba3 030c 	sub.w	r3, r3, ip
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa2>
 8000a62:	40f3      	lsrs	r3, r6
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xb6>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb0>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x14c>
 8000a86:	4573      	cmp	r3, lr
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xc8>
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	f200 8105 	bhi.w	8000c9a <__udivmoddi4+0x2d2>
 8000a90:	1a84      	subs	r4, r0, r2
 8000a92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d0e5      	beq.n	8000a6a <__udivmoddi4+0xa2>
 8000a9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa2:	e7e2      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f000 8090 	beq.w	8000bca <__udivmoddi4+0x202>
 8000aaa:	fab2 f682 	clz	r6, r2
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	f040 80a4 	bne.w	8000bfc <__udivmoddi4+0x234>
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	0c03      	lsrs	r3, r0, #16
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	b280      	uxth	r0, r0
 8000abe:	b2bc      	uxth	r4, r7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ac6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ace:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d907      	bls.n	8000ae6 <__udivmoddi4+0x11e>
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000adc:	d202      	bcs.n	8000ae4 <__udivmoddi4+0x11c>
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	f200 80e0 	bhi.w	8000ca4 <__udivmoddi4+0x2dc>
 8000ae4:	46c4      	mov	ip, r8
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af4:	fb02 f404 	mul.w	r4, r2, r4
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0x144>
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x142>
 8000b04:	429c      	cmp	r4, r3
 8000b06:	f200 80ca 	bhi.w	8000c9e <__udivmoddi4+0x2d6>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	1b1b      	subs	r3, r3, r4
 8000b0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x98>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa0e f401 	lsl.w	r4, lr, r1
 8000b24:	fa20 f306 	lsr.w	r3, r0, r6
 8000b28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b30:	4323      	orrs	r3, r4
 8000b32:	fa00 f801 	lsl.w	r8, r0, r1
 8000b36:	fa1f fc87 	uxth.w	ip, r7
 8000b3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000b3e:	0c1c      	lsrs	r4, r3, #16
 8000b40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x1a0>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b5a:	f080 809c 	bcs.w	8000c96 <__udivmoddi4+0x2ce>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8099 	bls.w	8000c96 <__udivmoddi4+0x2ce>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	eba4 040e 	sub.w	r4, r4, lr
 8000b6c:	fa1f fe83 	uxth.w	lr, r3
 8000b70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b74:	fb09 4413 	mls	r4, r9, r3, r4
 8000b78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1ce>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b8a:	f080 8082 	bcs.w	8000c92 <__udivmoddi4+0x2ca>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d97f      	bls.n	8000c92 <__udivmoddi4+0x2ca>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9a:	eba4 040c 	sub.w	r4, r4, ip
 8000b9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba2:	4564      	cmp	r4, ip
 8000ba4:	4673      	mov	r3, lr
 8000ba6:	46e1      	mov	r9, ip
 8000ba8:	d362      	bcc.n	8000c70 <__udivmoddi4+0x2a8>
 8000baa:	d05f      	beq.n	8000c6c <__udivmoddi4+0x2a4>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x1fe>
 8000bae:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	fa22 f301 	lsr.w	r3, r2, r1
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	40cc      	lsrs	r4, r1
 8000bc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	e74f      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000bca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bce:	0c01      	lsrs	r1, r0, #16
 8000bd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd4:	b280      	uxth	r0, r0
 8000bd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4638      	mov	r0, r7
 8000bde:	463c      	mov	r4, r7
 8000be0:	46b8      	mov	r8, r7
 8000be2:	46be      	mov	lr, r7
 8000be4:	2620      	movs	r6, #32
 8000be6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bea:	eba2 0208 	sub.w	r2, r2, r8
 8000bee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf2:	e766      	b.n	8000ac2 <__udivmoddi4+0xfa>
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	e718      	b.n	8000a2a <__udivmoddi4+0x62>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	e72c      	b.n	8000a56 <__udivmoddi4+0x8e>
 8000bfc:	f1c6 0220 	rsb	r2, r6, #32
 8000c00:	fa2e f302 	lsr.w	r3, lr, r2
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b1      	lsls	r1, r6
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	430a      	orrs	r2, r1
 8000c12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c16:	b2bc      	uxth	r4, r7
 8000c18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c22:	fb08 f904 	mul.w	r9, r8, r4
 8000c26:	40b0      	lsls	r0, r6
 8000c28:	4589      	cmp	r9, r1
 8000c2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c2e:	b280      	uxth	r0, r0
 8000c30:	d93e      	bls.n	8000cb0 <__udivmoddi4+0x2e8>
 8000c32:	1879      	adds	r1, r7, r1
 8000c34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c38:	d201      	bcs.n	8000c3e <__udivmoddi4+0x276>
 8000c3a:	4589      	cmp	r9, r1
 8000c3c:	d81f      	bhi.n	8000c7e <__udivmoddi4+0x2b6>
 8000c3e:	eba1 0109 	sub.w	r1, r1, r9
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	4542      	cmp	r2, r8
 8000c56:	d229      	bcs.n	8000cac <__udivmoddi4+0x2e4>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c5e:	d2c4      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d2c2      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c64:	f1a9 0102 	sub.w	r1, r9, #2
 8000c68:	443a      	add	r2, r7
 8000c6a:	e7be      	b.n	8000bea <__udivmoddi4+0x222>
 8000c6c:	45f0      	cmp	r8, lr
 8000c6e:	d29d      	bcs.n	8000bac <__udivmoddi4+0x1e4>
 8000c70:	ebbe 0302 	subs.w	r3, lr, r2
 8000c74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c78:	3801      	subs	r0, #1
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	e796      	b.n	8000bac <__udivmoddi4+0x1e4>
 8000c7e:	eba7 0909 	sub.w	r9, r7, r9
 8000c82:	4449      	add	r1, r9
 8000c84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8c:	fb09 f804 	mul.w	r8, r9, r4
 8000c90:	e7db      	b.n	8000c4a <__udivmoddi4+0x282>
 8000c92:	4673      	mov	r3, lr
 8000c94:	e77f      	b.n	8000b96 <__udivmoddi4+0x1ce>
 8000c96:	4650      	mov	r0, sl
 8000c98:	e766      	b.n	8000b68 <__udivmoddi4+0x1a0>
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e6fd      	b.n	8000a9a <__udivmoddi4+0xd2>
 8000c9e:	443b      	add	r3, r7
 8000ca0:	3a02      	subs	r2, #2
 8000ca2:	e733      	b.n	8000b0c <__udivmoddi4+0x144>
 8000ca4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	e71c      	b.n	8000ae6 <__udivmoddi4+0x11e>
 8000cac:	4649      	mov	r1, r9
 8000cae:	e79c      	b.n	8000bea <__udivmoddi4+0x222>
 8000cb0:	eba1 0109 	sub.w	r1, r1, r9
 8000cb4:	46c4      	mov	ip, r8
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	e7c4      	b.n	8000c4a <__udivmoddi4+0x282>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <dcache_invalidate_region>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
static inline void dcache_invalidate_region(void *addr, size_t len)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	@ 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  if (len == 0) return;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d032      	beq.n	8000d3a <dcache_invalidate_region+0x76>
  uint32_t a = ALIGN_DOWN_32(addr);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f023 031f 	bic.w	r3, r3, #31
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t e = ALIGN_UP_32((uint32_t)addr + len);
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	331f      	adds	r3, #31
 8000ce4:	f023 031f 	bic.w	r3, r3, #31
 8000ce8:	61bb      	str	r3, [r7, #24]
  SCB_InvalidateDCache_by_Addr((uint32_t*)a, e - a);
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	69b9      	ldr	r1, [r7, #24]
 8000cee:	69fa      	ldr	r2, [r7, #28]
 8000cf0:	1a8a      	subs	r2, r1, r2
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	613a      	str	r2, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	dd20      	ble.n	8000d3e <dcache_invalidate_region+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	f003 021f 	and.w	r2, r3, #31
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	4413      	add	r3, r2
 8000d06:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d0c:	f3bf 8f4f 	dsb	sy
}
 8000d10:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d12:	4a0e      	ldr	r2, [pc, #56]	@ (8000d4c <dcache_invalidate_region+0x88>)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	3320      	adds	r3, #32
 8000d1e:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3b20      	subs	r3, #32
 8000d24:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dcf2      	bgt.n	8000d12 <dcache_invalidate_region+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d2c:	f3bf 8f4f 	dsb	sy
}
 8000d30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d32:	f3bf 8f6f 	isb	sy
}
 8000d36:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000d38:	e001      	b.n	8000d3e <dcache_invalidate_region+0x7a>
  if (len == 0) return;
 8000d3a:	bf00      	nop
 8000d3c:	e000      	b.n	8000d40 <dcache_invalidate_region+0x7c>
 8000d3e:	bf00      	nop
}
 8000d40:	3724      	adds	r7, #36	@ 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <dcache_clean_region>:

static inline void dcache_clean_region(void *addr, size_t len)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  if (len == 0) return;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d032      	beq.n	8000dc6 <dcache_clean_region+0x76>
  uint32_t a = ALIGN_DOWN_32(addr);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f023 031f 	bic.w	r3, r3, #31
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t e = ALIGN_UP_32((uint32_t)addr + len);
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	331f      	adds	r3, #31
 8000d70:	f023 031f 	bic.w	r3, r3, #31
 8000d74:	61bb      	str	r3, [r7, #24]
  SCB_CleanDCache_by_Addr((uint32_t*)a, e - a);
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	69b9      	ldr	r1, [r7, #24]
 8000d7a:	69fa      	ldr	r2, [r7, #28]
 8000d7c:	1a8a      	subs	r2, r1, r2
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	613a      	str	r2, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	dd20      	ble.n	8000dca <dcache_clean_region+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f003 021f 	and.w	r2, r3, #31
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4413      	add	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d98:	f3bf 8f4f 	dsb	sy
}
 8000d9c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd8 <dcache_clean_region+0x88>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3320      	adds	r3, #32
 8000daa:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3b20      	subs	r3, #32
 8000db0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	dcf2      	bgt.n	8000d9e <dcache_clean_region+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000db8:	f3bf 8f4f 	dsb	sy
}
 8000dbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dbe:	f3bf 8f6f 	isb	sy
}
 8000dc2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000dc4:	e001      	b.n	8000dca <dcache_clean_region+0x7a>
  if (len == 0) return;
 8000dc6:	bf00      	nop
 8000dc8:	e000      	b.n	8000dcc <dcache_clean_region+0x7c>
 8000dca:	bf00      	nop
}
 8000dcc:	3724      	adds	r7, #36	@ 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <uart3_rx_circ_start>:

// 원형 DMA, 모든 DMA IRQ/IDLE IRQ 끄기
static void uart3_rx_circ_start(void){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  HAL_UART_Receive_DMA(&huart3, uart3_rx_dma, UART3_RX_DMA_SIZE);
 8000de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de4:	494b      	ldr	r1, [pc, #300]	@ (8000f14 <uart3_rx_circ_start+0x138>)
 8000de6:	484c      	ldr	r0, [pc, #304]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000de8:	f00c ff88 	bl	800dcfc <HAL_UART_Receive_DMA>
  __HAL_DMA_DISABLE_IT(huart3.hdmarx, DMA_IT_HT | DMA_IT_TC); // DMA RX 인터럽트 끔
 8000dec:	4b4a      	ldr	r3, [pc, #296]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a49      	ldr	r2, [pc, #292]	@ (8000f1c <uart3_rx_circ_start+0x140>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d068      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000dfa:	4b47      	ldr	r3, [pc, #284]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a47      	ldr	r2, [pc, #284]	@ (8000f20 <uart3_rx_circ_start+0x144>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d061      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e08:	4b43      	ldr	r3, [pc, #268]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a44      	ldr	r2, [pc, #272]	@ (8000f24 <uart3_rx_circ_start+0x148>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d05a      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e16:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a42      	ldr	r2, [pc, #264]	@ (8000f28 <uart3_rx_circ_start+0x14c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d053      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e24:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8000f2c <uart3_rx_circ_start+0x150>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d04c      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f30 <uart3_rx_circ_start+0x154>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d045      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e40:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a3a      	ldr	r2, [pc, #232]	@ (8000f34 <uart3_rx_circ_start+0x158>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d03e      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e4e:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a38      	ldr	r2, [pc, #224]	@ (8000f38 <uart3_rx_circ_start+0x15c>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d037      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a35      	ldr	r2, [pc, #212]	@ (8000f3c <uart3_rx_circ_start+0x160>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d030      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a33      	ldr	r2, [pc, #204]	@ (8000f40 <uart3_rx_circ_start+0x164>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d029      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e78:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a30      	ldr	r2, [pc, #192]	@ (8000f44 <uart3_rx_circ_start+0x168>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d022      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000f48 <uart3_rx_circ_start+0x16c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d01b      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f4c <uart3_rx_circ_start+0x170>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d014      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a29      	ldr	r2, [pc, #164]	@ (8000f50 <uart3_rx_circ_start+0x174>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00d      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a26      	ldr	r2, [pc, #152]	@ (8000f54 <uart3_rx_circ_start+0x178>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d006      	beq.n	8000ecc <uart3_rx_circ_start+0xf0>
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a24      	ldr	r2, [pc, #144]	@ (8000f58 <uart3_rx_circ_start+0x17c>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d10c      	bne.n	8000ee6 <uart3_rx_circ_start+0x10a>
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0218 	bic.w	r2, r2, #24
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	e00b      	b.n	8000efe <uart3_rx_circ_start+0x122>
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0206 	bic.w	r2, r2, #6
 8000efc:	601a      	str	r2, [r3, #0]
  __HAL_UART_DISABLE_IT(&huart3, UART_IT_IDLE);               // UART IDLE 끔
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <uart3_rx_circ_start+0x13c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f022 0210 	bic.w	r2, r2, #16
 8000f0c:	601a      	str	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	240004b4 	.word	0x240004b4
 8000f18:	24000328 	.word	0x24000328
 8000f1c:	40020010 	.word	0x40020010
 8000f20:	40020028 	.word	0x40020028
 8000f24:	40020040 	.word	0x40020040
 8000f28:	40020058 	.word	0x40020058
 8000f2c:	40020070 	.word	0x40020070
 8000f30:	40020088 	.word	0x40020088
 8000f34:	400200a0 	.word	0x400200a0
 8000f38:	400200b8 	.word	0x400200b8
 8000f3c:	40020410 	.word	0x40020410
 8000f40:	40020428 	.word	0x40020428
 8000f44:	40020440 	.word	0x40020440
 8000f48:	40020458 	.word	0x40020458
 8000f4c:	40020470 	.word	0x40020470
 8000f50:	40020488 	.word	0x40020488
 8000f54:	400204a0 	.word	0x400204a0
 8000f58:	400204b8 	.word	0x400204b8

08000f5c <uart3_rx_poll_from_dma>:

static uint16_t uart3_rx_dma_pos = 0; // 마지막 읽은 위치

// 주기적으로(예: 1~10ms) 새로 들어온 바이트를 링버퍼로 복사
static void uart3_rx_poll_from_dma(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
	uint16_t pos = UART3_RX_DMA_SIZE - __HAL_DMA_GET_COUNTER(huart3.hdmarx);
 8000f62:	4b91      	ldr	r3, [pc, #580]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a90      	ldr	r2, [pc, #576]	@ (80011ac <uart3_rx_poll_from_dma+0x250>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d068      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000f70:	4b8d      	ldr	r3, [pc, #564]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a8d      	ldr	r2, [pc, #564]	@ (80011b0 <uart3_rx_poll_from_dma+0x254>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d061      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000f7e:	4b8a      	ldr	r3, [pc, #552]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a8b      	ldr	r2, [pc, #556]	@ (80011b4 <uart3_rx_poll_from_dma+0x258>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d05a      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000f8c:	4b86      	ldr	r3, [pc, #536]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a88      	ldr	r2, [pc, #544]	@ (80011b8 <uart3_rx_poll_from_dma+0x25c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d053      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000f9a:	4b83      	ldr	r3, [pc, #524]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a86      	ldr	r2, [pc, #536]	@ (80011bc <uart3_rx_poll_from_dma+0x260>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d04c      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000fa8:	4b7f      	ldr	r3, [pc, #508]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a83      	ldr	r2, [pc, #524]	@ (80011c0 <uart3_rx_poll_from_dma+0x264>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d045      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a81      	ldr	r2, [pc, #516]	@ (80011c4 <uart3_rx_poll_from_dma+0x268>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d03e      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000fc4:	4b78      	ldr	r3, [pc, #480]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a7e      	ldr	r2, [pc, #504]	@ (80011c8 <uart3_rx_poll_from_dma+0x26c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d037      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000fd2:	4b75      	ldr	r3, [pc, #468]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7c      	ldr	r2, [pc, #496]	@ (80011cc <uart3_rx_poll_from_dma+0x270>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d030      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000fe0:	4b71      	ldr	r3, [pc, #452]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a79      	ldr	r2, [pc, #484]	@ (80011d0 <uart3_rx_poll_from_dma+0x274>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d029      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000fee:	4b6e      	ldr	r3, [pc, #440]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a77      	ldr	r2, [pc, #476]	@ (80011d4 <uart3_rx_poll_from_dma+0x278>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d022      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8000ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8000ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a74      	ldr	r2, [pc, #464]	@ (80011d8 <uart3_rx_poll_from_dma+0x27c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01b      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 800100a:	4b67      	ldr	r3, [pc, #412]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 800100c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a72      	ldr	r2, [pc, #456]	@ (80011dc <uart3_rx_poll_from_dma+0x280>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d014      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8001018:	4b63      	ldr	r3, [pc, #396]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 800101a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a6f      	ldr	r2, [pc, #444]	@ (80011e0 <uart3_rx_poll_from_dma+0x284>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8001026:	4b60      	ldr	r3, [pc, #384]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8001028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6d      	ldr	r2, [pc, #436]	@ (80011e4 <uart3_rx_poll_from_dma+0x288>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d006      	beq.n	8001042 <uart3_rx_poll_from_dma+0xe6>
 8001034:	4b5c      	ldr	r3, [pc, #368]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8001036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a6a      	ldr	r2, [pc, #424]	@ (80011e8 <uart3_rx_poll_from_dma+0x28c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d109      	bne.n	8001056 <uart3_rx_poll_from_dma+0xfa>
 8001042:	4b59      	ldr	r3, [pc, #356]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8001044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	b29b      	uxth	r3, r3
 800104e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001052:	b29b      	uxth	r3, r3
 8001054:	e008      	b.n	8001068 <uart3_rx_poll_from_dma+0x10c>
 8001056:	4b54      	ldr	r3, [pc, #336]	@ (80011a8 <uart3_rx_poll_from_dma+0x24c>)
 8001058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	b29b      	uxth	r3, r3
 8001062:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001066:	b29b      	uxth	r3, r3
 8001068:	817b      	strh	r3, [r7, #10]
	uint16_t len = (pos >= uart3_rx_dma_pos) ? (pos - uart3_rx_dma_pos)
 800106a:	4b60      	ldr	r3, [pc, #384]	@ (80011ec <uart3_rx_poll_from_dma+0x290>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	897a      	ldrh	r2, [r7, #10]
 8001070:	429a      	cmp	r2, r3
 8001072:	d305      	bcc.n	8001080 <uart3_rx_poll_from_dma+0x124>
 8001074:	4b5d      	ldr	r3, [pc, #372]	@ (80011ec <uart3_rx_poll_from_dma+0x290>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	897a      	ldrh	r2, [r7, #10]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	e007      	b.n	8001090 <uart3_rx_poll_from_dma+0x134>
										   : (UART3_RX_DMA_SIZE - uart3_rx_dma_pos + pos);
 8001080:	4b5a      	ldr	r3, [pc, #360]	@ (80011ec <uart3_rx_poll_from_dma+0x290>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	897a      	ldrh	r2, [r7, #10]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	b29b      	uxth	r3, r3
	uint16_t len = (pos >= uart3_rx_dma_pos) ? (pos - uart3_rx_dma_pos)
 800108a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800108e:	b29b      	uxth	r3, r3
 8001090:	813b      	strh	r3, [r7, #8]
	if (len == 0) return;
 8001092:	893b      	ldrh	r3, [r7, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 8083 	beq.w	80011a0 <uart3_rx_poll_from_dma+0x244>

	// 1st chunk (wrap 전)
	uint16_t first = (len <= (UART3_RX_DMA_SIZE - uart3_rx_dma_pos)) ? len
																   : (UART3_RX_DMA_SIZE - uart3_rx_dma_pos);
 800109a:	893a      	ldrh	r2, [r7, #8]
	uint16_t first = (len <= (UART3_RX_DMA_SIZE - uart3_rx_dma_pos)) ? len
 800109c:	4b53      	ldr	r3, [pc, #332]	@ (80011ec <uart3_rx_poll_from_dma+0x290>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
																   : (UART3_RX_DMA_SIZE - uart3_rx_dma_pos);
 80010a4:	4293      	cmp	r3, r2
 80010a6:	bfa8      	it	ge
 80010a8:	4613      	movge	r3, r2
	uint16_t first = (len <= (UART3_RX_DMA_SIZE - uart3_rx_dma_pos)) ? len
 80010aa:	80fb      	strh	r3, [r7, #6]
	// DMA가 갱신했을 수 있는 구간을 읽기 전에 Invalidate
	dcache_invalidate_region(&uart3_rx_dma[uart3_rx_dma_pos], first);
 80010ac:	4b4f      	ldr	r3, [pc, #316]	@ (80011ec <uart3_rx_poll_from_dma+0x290>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b4f      	ldr	r3, [pc, #316]	@ (80011f0 <uart3_rx_poll_from_dma+0x294>)
 80010b4:	4413      	add	r3, r2
 80010b6:	88fa      	ldrh	r2, [r7, #6]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe02 	bl	8000cc4 <dcache_invalidate_region>

	for (uint16_t i = 0; i < first; ++i) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	81fb      	strh	r3, [r7, #14]
 80010c4:	e02a      	b.n	800111c <uart3_rx_poll_from_dma+0x1c0>
		uint16_t next = (uart3_widx + 1) & (UART3_RBUF_SIZE - 1);
 80010c6:	4b4b      	ldr	r3, [pc, #300]	@ (80011f4 <uart3_rx_poll_from_dma+0x298>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3301      	adds	r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010d4:	803b      	strh	r3, [r7, #0]
		if (next == uart3_ridx) uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 80010d6:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <uart3_rx_poll_from_dma+0x29c>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	883a      	ldrh	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d109      	bne.n	80010f6 <uart3_rx_poll_from_dma+0x19a>
 80010e2:	4b45      	ldr	r3, [pc, #276]	@ (80011f8 <uart3_rx_poll_from_dma+0x29c>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b41      	ldr	r3, [pc, #260]	@ (80011f8 <uart3_rx_poll_from_dma+0x29c>)
 80010f4:	801a      	strh	r2, [r3, #0]
		uart3_rbuf[uart3_widx] = uart3_rx_dma[uart3_rx_dma_pos + i];
 80010f6:	4b3d      	ldr	r3, [pc, #244]	@ (80011ec <uart3_rx_poll_from_dma+0x290>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	4413      	add	r3, r2
 8001100:	4a3c      	ldr	r2, [pc, #240]	@ (80011f4 <uart3_rx_poll_from_dma+0x298>)
 8001102:	8812      	ldrh	r2, [r2, #0]
 8001104:	b292      	uxth	r2, r2
 8001106:	4611      	mov	r1, r2
 8001108:	4a39      	ldr	r2, [pc, #228]	@ (80011f0 <uart3_rx_poll_from_dma+0x294>)
 800110a:	5cd2      	ldrb	r2, [r2, r3]
 800110c:	4b3b      	ldr	r3, [pc, #236]	@ (80011fc <uart3_rx_poll_from_dma+0x2a0>)
 800110e:	545a      	strb	r2, [r3, r1]
		uart3_widx = next;
 8001110:	4a38      	ldr	r2, [pc, #224]	@ (80011f4 <uart3_rx_poll_from_dma+0x298>)
 8001112:	883b      	ldrh	r3, [r7, #0]
 8001114:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < first; ++i) {
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	3301      	adds	r3, #1
 800111a:	81fb      	strh	r3, [r7, #14]
 800111c:	89fa      	ldrh	r2, [r7, #14]
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3d0      	bcc.n	80010c6 <uart3_rx_poll_from_dma+0x16a>
	}

	// 2nd chunk (wrap 후)
	uint16_t second = len - first;
 8001124:	893a      	ldrh	r2, [r7, #8]
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	80bb      	strh	r3, [r7, #4]
	if (second) {
 800112c:	88bb      	ldrh	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d032      	beq.n	8001198 <uart3_rx_poll_from_dma+0x23c>
		dcache_invalidate_region(&uart3_rx_dma[0], second);
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	4619      	mov	r1, r3
 8001136:	482e      	ldr	r0, [pc, #184]	@ (80011f0 <uart3_rx_poll_from_dma+0x294>)
 8001138:	f7ff fdc4 	bl	8000cc4 <dcache_invalidate_region>
		for (uint16_t i = 0; i < second; ++i) {
 800113c:	2300      	movs	r3, #0
 800113e:	81bb      	strh	r3, [r7, #12]
 8001140:	e026      	b.n	8001190 <uart3_rx_poll_from_dma+0x234>
		  uint16_t next = (uart3_widx + 1) & (UART3_RBUF_SIZE - 1);
 8001142:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <uart3_rx_poll_from_dma+0x298>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	3301      	adds	r3, #1
 800114a:	b29b      	uxth	r3, r3
 800114c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001150:	807b      	strh	r3, [r7, #2]
		  if (next == uart3_ridx) uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 8001152:	4b29      	ldr	r3, [pc, #164]	@ (80011f8 <uart3_rx_poll_from_dma+0x29c>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	887a      	ldrh	r2, [r7, #2]
 800115a:	429a      	cmp	r2, r3
 800115c:	d109      	bne.n	8001172 <uart3_rx_poll_from_dma+0x216>
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <uart3_rx_poll_from_dma+0x29c>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	3301      	adds	r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <uart3_rx_poll_from_dma+0x29c>)
 8001170:	801a      	strh	r2, [r3, #0]
		  uart3_rbuf[uart3_widx] = uart3_rx_dma[i];
 8001172:	89bb      	ldrh	r3, [r7, #12]
 8001174:	4a1f      	ldr	r2, [pc, #124]	@ (80011f4 <uart3_rx_poll_from_dma+0x298>)
 8001176:	8812      	ldrh	r2, [r2, #0]
 8001178:	b292      	uxth	r2, r2
 800117a:	4611      	mov	r1, r2
 800117c:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <uart3_rx_poll_from_dma+0x294>)
 800117e:	5cd2      	ldrb	r2, [r2, r3]
 8001180:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <uart3_rx_poll_from_dma+0x2a0>)
 8001182:	545a      	strb	r2, [r3, r1]
		  uart3_widx = next;
 8001184:	4a1b      	ldr	r2, [pc, #108]	@ (80011f4 <uart3_rx_poll_from_dma+0x298>)
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	8013      	strh	r3, [r2, #0]
		for (uint16_t i = 0; i < second; ++i) {
 800118a:	89bb      	ldrh	r3, [r7, #12]
 800118c:	3301      	adds	r3, #1
 800118e:	81bb      	strh	r3, [r7, #12]
 8001190:	89ba      	ldrh	r2, [r7, #12]
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3d4      	bcc.n	8001142 <uart3_rx_poll_from_dma+0x1e6>
		}
	}
	uart3_rx_dma_pos = pos;
 8001198:	4a14      	ldr	r2, [pc, #80]	@ (80011ec <uart3_rx_poll_from_dma+0x290>)
 800119a:	897b      	ldrh	r3, [r7, #10]
 800119c:	8013      	strh	r3, [r2, #0]
 800119e:	e000      	b.n	80011a2 <uart3_rx_poll_from_dma+0x246>
	if (len == 0) return;
 80011a0:	bf00      	nop
}
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	24000328 	.word	0x24000328
 80011ac:	40020010 	.word	0x40020010
 80011b0:	40020028 	.word	0x40020028
 80011b4:	40020040 	.word	0x40020040
 80011b8:	40020058 	.word	0x40020058
 80011bc:	40020070 	.word	0x40020070
 80011c0:	40020088 	.word	0x40020088
 80011c4:	400200a0 	.word	0x400200a0
 80011c8:	400200b8 	.word	0x400200b8
 80011cc:	40020410 	.word	0x40020410
 80011d0:	40020428 	.word	0x40020428
 80011d4:	40020440 	.word	0x40020440
 80011d8:	40020458 	.word	0x40020458
 80011dc:	40020470 	.word	0x40020470
 80011e0:	40020488 	.word	0x40020488
 80011e4:	400204a0 	.word	0x400204a0
 80011e8:	400204b8 	.word	0x400204b8
 80011ec:	2400297c 	.word	0x2400297c
 80011f0:	240004b4 	.word	0x240004b4
 80011f4:	24000eb4 	.word	0x24000eb4
 80011f8:	24000eb6 	.word	0x24000eb6
 80011fc:	240006b4 	.word	0x240006b4

08001200 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	if (huart->Instance != USART3) return;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a4f      	ldr	r2, [pc, #316]	@ (800134c <HAL_UART_ErrorCallback+0x14c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	f040 8097 	bne.w	8001342 <HAL_UART_ErrorCallback+0x142>

	__HAL_UART_CLEAR_OREFLAG(huart);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2208      	movs	r2, #8
 800121a:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_FEFLAG(huart);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2202      	movs	r2, #2
 8001222:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2204      	movs	r2, #4
 800122a:	621a      	str	r2, [r3, #32]

	uart3_rx_circ_start();
 800122c:	f7ff fdd6 	bl	8000ddc <uart3_rx_circ_start>

	// ★ 현재 DMA write 위치로 맞춰서 ‘없는 데이터’를 읽지 않도록 동기화
	uart3_rx_dma_pos = UART3_RX_DMA_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a45      	ldr	r2, [pc, #276]	@ (8001350 <HAL_UART_ErrorCallback+0x150>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d068      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <HAL_UART_ErrorCallback+0x154>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d061      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a40      	ldr	r2, [pc, #256]	@ (8001358 <HAL_UART_ErrorCallback+0x158>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d05a      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a3e      	ldr	r2, [pc, #248]	@ (800135c <HAL_UART_ErrorCallback+0x15c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d053      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a3b      	ldr	r2, [pc, #236]	@ (8001360 <HAL_UART_ErrorCallback+0x160>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d04c      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a39      	ldr	r2, [pc, #228]	@ (8001364 <HAL_UART_ErrorCallback+0x164>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d045      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a36      	ldr	r2, [pc, #216]	@ (8001368 <HAL_UART_ErrorCallback+0x168>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d03e      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a34      	ldr	r2, [pc, #208]	@ (800136c <HAL_UART_ErrorCallback+0x16c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d037      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a31      	ldr	r2, [pc, #196]	@ (8001370 <HAL_UART_ErrorCallback+0x170>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d030      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001374 <HAL_UART_ErrorCallback+0x174>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d029      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001378 <HAL_UART_ErrorCallback+0x178>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d022      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2a      	ldr	r2, [pc, #168]	@ (800137c <HAL_UART_ErrorCallback+0x17c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01b      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a27      	ldr	r2, [pc, #156]	@ (8001380 <HAL_UART_ErrorCallback+0x180>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d014      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a25      	ldr	r2, [pc, #148]	@ (8001384 <HAL_UART_ErrorCallback+0x184>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d00d      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a22      	ldr	r2, [pc, #136]	@ (8001388 <HAL_UART_ErrorCallback+0x188>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d006      	beq.n	8001310 <HAL_UART_ErrorCallback+0x110>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a20      	ldr	r2, [pc, #128]	@ (800138c <HAL_UART_ErrorCallback+0x18c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d109      	bne.n	8001324 <HAL_UART_ErrorCallback+0x124>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	b29b      	uxth	r3, r3
 800131c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001320:	b29b      	uxth	r3, r3
 8001322:	e008      	b.n	8001336 <HAL_UART_ErrorCallback+0x136>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	b29b      	uxth	r3, r3
 8001330:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001334:	b29b      	uxth	r3, r3
 8001336:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <HAL_UART_ErrorCallback+0x190>)
 8001338:	8013      	strh	r3, [r2, #0]

	// 필요하면 조립중 라인도 초기화(선호)
	uart3_line_len = 0;
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <HAL_UART_ErrorCallback+0x194>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e000      	b.n	8001344 <HAL_UART_ErrorCallback+0x144>
	if (huart->Instance != USART3) return;
 8001342:	bf00      	nop
}
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40004800 	.word	0x40004800
 8001350:	40020010 	.word	0x40020010
 8001354:	40020028 	.word	0x40020028
 8001358:	40020040 	.word	0x40020040
 800135c:	40020058 	.word	0x40020058
 8001360:	40020070 	.word	0x40020070
 8001364:	40020088 	.word	0x40020088
 8001368:	400200a0 	.word	0x400200a0
 800136c:	400200b8 	.word	0x400200b8
 8001370:	40020410 	.word	0x40020410
 8001374:	40020428 	.word	0x40020428
 8001378:	40020440 	.word	0x40020440
 800137c:	40020458 	.word	0x40020458
 8001380:	40020470 	.word	0x40020470
 8001384:	40020488 	.word	0x40020488
 8001388:	400204a0 	.word	0x400204a0
 800138c:	400204b8 	.word	0x400204b8
 8001390:	2400297c 	.word	0x2400297c
 8001394:	240012b8 	.word	0x240012b8

08001398 <uart3_kick_tx_dma>:

static void uart3_kick_tx_dma(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	if (uart3_tx_busy) return;
 800139e:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <uart3_kick_tx_dma+0x98>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d13c      	bne.n	8001422 <uart3_kick_tx_dma+0x8a>
	if (uart3_tx_ridx == uart3_tx_widx) return;
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <uart3_kick_tx_dma+0x9c>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <uart3_kick_tx_dma+0xa0>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d036      	beq.n	8001426 <uart3_kick_tx_dma+0x8e>

	uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <uart3_kick_tx_dma+0xa0>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <uart3_kick_tx_dma+0x9c>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d308      	bcc.n	80013da <uart3_kick_tx_dma+0x42>
			   ? (uart3_tx_widx - uart3_tx_ridx)
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <uart3_kick_tx_dma+0xa0>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <uart3_kick_tx_dma+0x9c>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	b29b      	uxth	r3, r3
	uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	e005      	b.n	80013e6 <uart3_kick_tx_dma+0x4e>
			   : (UART3_TBUF_SIZE - uart3_tx_ridx);
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <uart3_kick_tx_dma+0x9c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
	uint16_t len = (uart3_tx_widx >= uart3_tx_ridx)
 80013e0:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	80fb      	strh	r3, [r7, #6]

	uart3_tx_last_len = len;
 80013e8:	4a14      	ldr	r2, [pc, #80]	@ (800143c <uart3_kick_tx_dma+0xa4>)
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	8013      	strh	r3, [r2, #0]
	uart3_tx_busy = 1;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <uart3_kick_tx_dma+0x98>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]

	// DMA가 읽을 연속 구간을 전송 직전에 Clean (캐시 → RAM 반영)
	dcache_clean_region(&uart3_tbuf[uart3_tx_ridx], len);
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <uart3_kick_tx_dma+0x9c>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <uart3_kick_tx_dma+0xa8>)
 80013fe:	4413      	add	r3, r2
 8001400:	88fa      	ldrh	r2, [r7, #6]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fca3 	bl	8000d50 <dcache_clean_region>

	HAL_UART_Transmit_DMA(&huart3, &uart3_tbuf[uart3_tx_ridx], len);
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <uart3_kick_tx_dma+0x9c>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <uart3_kick_tx_dma+0xa8>)
 8001414:	4413      	add	r3, r2
 8001416:	88fa      	ldrh	r2, [r7, #6]
 8001418:	4619      	mov	r1, r3
 800141a:	480a      	ldr	r0, [pc, #40]	@ (8001444 <uart3_kick_tx_dma+0xac>)
 800141c:	f00c fbee 	bl	800dbfc <HAL_UART_Transmit_DMA>
 8001420:	e002      	b.n	8001428 <uart3_kick_tx_dma+0x90>
	if (uart3_tx_busy) return;
 8001422:	bf00      	nop
 8001424:	e000      	b.n	8001428 <uart3_kick_tx_dma+0x90>
	if (uart3_tx_ridx == uart3_tx_widx) return;
 8001426:	bf00      	nop
}
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	240022c2 	.word	0x240022c2
 8001434:	240022be 	.word	0x240022be
 8001438:	240022bc 	.word	0x240022bc
 800143c:	240022c0 	.word	0x240022c0
 8001440:	240012bc 	.word	0x240012bc
 8001444:	24000328 	.word	0x24000328

08001448 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if (huart->Instance != USART3) return;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0c      	ldr	r2, [pc, #48]	@ (8001488 <HAL_UART_TxCpltCallback+0x40>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d112      	bne.n	8001480 <HAL_UART_TxCpltCallback+0x38>

  uart3_tx_ridx = (uart3_tx_ridx + uart3_tx_last_len) & (UART3_TBUF_SIZE - 1);
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_UART_TxCpltCallback+0x44>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	b29a      	uxth	r2, r3
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_UART_TxCpltCallback+0x48>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4413      	add	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146e:	b29a      	uxth	r2, r3
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_UART_TxCpltCallback+0x44>)
 8001472:	801a      	strh	r2, [r3, #0]
  uart3_tx_busy = 0;
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <HAL_UART_TxCpltCallback+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
  uart3_kick_tx_dma(); // 남은 데이터가 있으면 곧장 다음 덩어리 전송
 800147a:	f7ff ff8d 	bl	8001398 <uart3_kick_tx_dma>
 800147e:	e000      	b.n	8001482 <HAL_UART_TxCpltCallback+0x3a>
  if (huart->Instance != USART3) return;
 8001480:	bf00      	nop
}
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40004800 	.word	0x40004800
 800148c:	240022be 	.word	0x240022be
 8001490:	240022c0 	.word	0x240022c0
 8001494:	240022c2 	.word	0x240022c2

08001498 <uart3_tx_write>:

static size_t uart3_tx_write(const uint8_t *data, size_t len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  size_t w = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  while (w < len) {
 80014a6:	e05d      	b.n	8001564 <uart3_tx_write+0xcc>
    // 먼저 남은 공간 계산(논크리티컬)
    uint16_t r = uart3_tx_ridx;
 80014a8:	4b34      	ldr	r3, [pc, #208]	@ (800157c <uart3_tx_write+0xe4>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	837b      	strh	r3, [r7, #26]
    uint16_t w0 = uart3_tx_widx;
 80014ae:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <uart3_tx_write+0xe8>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	833b      	strh	r3, [r7, #24]
    uint16_t space = (r > w0) ? (r - w0 - 1) : (UART3_TBUF_SIZE - (w0 - r) - 1);
 80014b4:	8b7a      	ldrh	r2, [r7, #26]
 80014b6:	8b3b      	ldrh	r3, [r7, #24]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d906      	bls.n	80014ca <uart3_tx_write+0x32>
 80014bc:	8b7a      	ldrh	r2, [r7, #26]
 80014be:	8b3b      	ldrh	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3b01      	subs	r3, #1
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	e006      	b.n	80014d8 <uart3_tx_write+0x40>
 80014ca:	8b7a      	ldrh	r2, [r7, #26]
 80014cc:	8b3b      	ldrh	r3, [r7, #24]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	82fb      	strh	r3, [r7, #22]
    if (space == 0) break;
 80014da:	8afb      	ldrh	r3, [r7, #22]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d046      	beq.n	800156e <uart3_tx_write+0xd6>

    size_t chunk = (len - w < space) ? (len - w) : space;
 80014e0:	8afa      	ldrh	r2, [r7, #22]
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	1acb      	subs	r3, r1, r3
 80014e8:	4293      	cmp	r3, r2
 80014ea:	bf28      	it	cs
 80014ec:	4613      	movcs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
    size_t first = (w0 + chunk <= UART3_TBUF_SIZE) ? chunk : (UART3_TBUF_SIZE - w0);
 80014f0:	8b3a      	ldrh	r2, [r7, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4413      	add	r3, r2
 80014f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014fa:	d903      	bls.n	8001504 <uart3_tx_write+0x6c>
 80014fc:	8b3b      	ldrh	r3, [r7, #24]
 80014fe:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001502:	e000      	b.n	8001506 <uart3_tx_write+0x6e>
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	60fb      	str	r3, [r7, #12]

    memcpy(&uart3_tbuf[w0], &data[w], first);
 8001508:	8b3b      	ldrh	r3, [r7, #24]
 800150a:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <uart3_tx_write+0xec>)
 800150c:	1898      	adds	r0, r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	4413      	add	r3, r2
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4619      	mov	r1, r3
 8001518:	f013 f863 	bl	80145e2 <memcpy>
    if (chunk > first) memcpy(&uart3_tbuf[0], &data[w + first], chunk - first);
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d90b      	bls.n	800153c <uart3_tx_write+0xa4>
 8001524:	69fa      	ldr	r2, [r7, #28]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4413      	add	r3, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	18d1      	adds	r1, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4813      	ldr	r0, [pc, #76]	@ (8001584 <uart3_tx_write+0xec>)
 8001538:	f013 f853 	bl	80145e2 <memcpy>

    taskENTER_CRITICAL();
 800153c:	f010 fe94 	bl	8012268 <vPortEnterCritical>
    uart3_tx_widx = (w0 + chunk) & (UART3_TBUF_SIZE - 1);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	b29a      	uxth	r2, r3
 8001544:	8b3b      	ldrh	r3, [r7, #24]
 8001546:	4413      	add	r3, r2
 8001548:	b29b      	uxth	r3, r3
 800154a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <uart3_tx_write+0xe8>)
 8001552:	801a      	strh	r2, [r3, #0]
    uart3_kick_tx_dma();
 8001554:	f7ff ff20 	bl	8001398 <uart3_kick_tx_dma>
    taskEXIT_CRITICAL();
 8001558:	f010 feb8 	bl	80122cc <vPortExitCritical>

    w += chunk;
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4413      	add	r3, r2
 8001562:	61fb      	str	r3, [r7, #28]
  while (w < len) {
 8001564:	69fa      	ldr	r2, [r7, #28]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d39d      	bcc.n	80014a8 <uart3_tx_write+0x10>
 800156c:	e000      	b.n	8001570 <uart3_tx_write+0xd8>
    if (space == 0) break;
 800156e:	bf00      	nop
  }
  return w;
 8001570:	69fb      	ldr	r3, [r7, #28]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	240022be 	.word	0x240022be
 8001580:	240022bc 	.word	0x240022bc
 8001584:	240012bc 	.word	0x240012bc

08001588 <_write>:

int _write(int file, char *p, int len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  size_t pos = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  while (pos < (size_t)len) {
 8001598:	e01e      	b.n	80015d8 <_write+0x50>
    size_t n = uart3_tx_write((uint8_t*)p + pos, (size_t)len - pos);
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	18d0      	adds	r0, r2, r3
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff ff76 	bl	8001498 <uart3_tx_write>
 80015ac:	6138      	str	r0, [r7, #16]
    if (n == 0) {
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10d      	bne.n	80015d0 <_write+0x48>
      // 버퍼가 가득 → RT 제어를 막지 않게 즉시 양보
      if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 80015b4:	f010 f8ea 	bl	801178c <xTaskGetSchedulerState>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d10c      	bne.n	80015d8 <_write+0x50>
        taskYIELD();      // 또는 vTaskDelay(1) 등
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <_write+0x64>)
 80015c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f3bf 8f4f 	dsb	sy
 80015ca:	f3bf 8f6f 	isb	sy
 80015ce:	e003      	b.n	80015d8 <_write+0x50>
      } else {
        // 스케줄러 전이면 잠깐 회전
      }
    } else {
      pos += n;
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
  while (pos < (size_t)len) {
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3dc      	bcc.n	800159a <_write+0x12>
    }
  }
  return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000ed04 	.word	0xe000ed04

080015f0 <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_GPIO_EXTI_Callback+0x2c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d103      	bne.n	800160a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001604:	2201      	movs	r2, #1
 8001606:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 8001608:	e002      	b.n	8001610 <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <HAL_GPIO_EXTI_Callback+0x2c>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	2400230c 	.word	0x2400230c

08001620 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 8001630:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001634:	f7ff ffdc 	bl	80015f0 <HAL_GPIO_EXTI_Callback>
    }
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8001640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001644:	ed2d 8b02 	vpush	{d8}
 8001648:	b087      	sub	sp, #28
 800164a:	af00      	add	r7, sp, #0
 800164c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001650:	edc7 0a02 	vstr	s1, [r7, #8]
 8001654:	ed87 1a01 	vstr	s2, [r7, #4]
 8001658:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 800165a:	ed97 7a01 	vldr	s14, [r7, #4]
 800165e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001666:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 800166a:	ed97 7a03 	vldr	s14, [r7, #12]
 800166e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	d502      	bpl.n	8001682 <float32_t_to_uint+0x42>
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	60f9      	str	r1, [r7, #12]
 8001680:	e00a      	b.n	8001698 <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8001682:	ed97 7a03 	vldr	s14, [r7, #12]
 8001686:	edd7 7a01 	vldr	s15, [r7, #4]
 800168a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	dd01      	ble.n	8001698 <float32_t_to_uint+0x58>
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 8001698:	ed97 7a03 	vldr	s14, [r7, #12]
 800169c:	edd7 7a02 	vldr	s15, [r7, #8]
 80016a0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80016a4:	f04f 0001 	mov.w	r0, #1
 80016a8:	f04f 0100 	mov.w	r1, #0
 80016ac:	683c      	ldr	r4, [r7, #0]
 80016ae:	f1a4 0620 	sub.w	r6, r4, #32
 80016b2:	f1c4 0520 	rsb	r5, r4, #32
 80016b6:	fa01 f304 	lsl.w	r3, r1, r4
 80016ba:	fa00 f606 	lsl.w	r6, r0, r6
 80016be:	4333      	orrs	r3, r6
 80016c0:	fa20 f505 	lsr.w	r5, r0, r5
 80016c4:	432b      	orrs	r3, r5
 80016c6:	fa00 f204 	lsl.w	r2, r0, r4
 80016ca:	f112 38ff 	adds.w	r8, r2, #4294967295
 80016ce:	f143 39ff 	adc.w	r9, r3, #4294967295
 80016d2:	4640      	mov	r0, r8
 80016d4:	4649      	mov	r1, r9
 80016d6:	f7ff f8df 	bl	8000898 <__aeabi_ul2f>
 80016da:	ee06 0a90 	vmov	s13, r0
 80016de:	ed97 7a05 	vldr	s14, [r7, #20]
 80016e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ee:	ee17 3a90 	vmov	r3, s15
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	ecbd 8b02 	vpop	{d8}
 80016fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001700 <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8001700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001704:	ed2d 8b02 	vpush	{d8}
 8001708:	b087      	sub	sp, #28
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001712:	edc7 0a01 	vstr	s1, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 8001718:	ed97 7a01 	vldr	s14, [r7, #4]
 800171c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001724:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	ee07 1a90 	vmov	s15, r1
 8001732:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001736:	edd7 7a05 	vldr	s15, [r7, #20]
 800173a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800173e:	f04f 0001 	mov.w	r0, #1
 8001742:	f04f 0100 	mov.w	r1, #0
 8001746:	683c      	ldr	r4, [r7, #0]
 8001748:	f1a4 0620 	sub.w	r6, r4, #32
 800174c:	f1c4 0520 	rsb	r5, r4, #32
 8001750:	fa01 f304 	lsl.w	r3, r1, r4
 8001754:	fa00 f606 	lsl.w	r6, r0, r6
 8001758:	4333      	orrs	r3, r6
 800175a:	fa20 f505 	lsr.w	r5, r0, r5
 800175e:	432b      	orrs	r3, r5
 8001760:	fa00 f204 	lsl.w	r2, r0, r4
 8001764:	f112 38ff 	adds.w	r8, r2, #4294967295
 8001768:	f143 39ff 	adc.w	r9, r3, #4294967295
 800176c:	4640      	mov	r0, r8
 800176e:	4649      	mov	r1, r9
 8001770:	f7ff f892 	bl	8000898 <__aeabi_ul2f>
 8001774:	ee07 0a90 	vmov	s15, r0
 8001778:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800177c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001780:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	ecbd 8b02 	vpop	{d8}
 8001790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001794 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 800179e:	23ff      	movs	r3, #255	@ 0xff
 80017a0:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 80017a2:	23ff      	movs	r3, #255	@ 0xff
 80017a4:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 80017a6:	23ff      	movs	r3, #255	@ 0xff
 80017a8:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 80017aa:	23ff      	movs	r3, #255	@ 0xff
 80017ac:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 80017ae:	23ff      	movs	r3, #255	@ 0xff
 80017b0:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 80017b2:	23ff      	movs	r3, #255	@ 0xff
 80017b4:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 80017b6:	23ff      	movs	r3, #255	@ 0xff
 80017b8:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 80017ba:	23fe      	movs	r3, #254	@ 0xfe
 80017bc:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	4a16      	ldr	r2, [pc, #88]	@ (800181c <MIT_reset_origin+0x88>)
 80017c2:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80017c4:	4b15      	ldr	r3, [pc, #84]	@ (800181c <MIT_reset_origin+0x88>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <MIT_reset_origin+0x88>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <MIT_reset_origin+0x88>)
 80017d2:	2208      	movs	r2, #8
 80017d4:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MIT_reset_origin+0x88>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <MIT_reset_origin+0x88>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MIT_reset_origin+0x88>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MIT_reset_origin+0x88>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <MIT_reset_origin+0x88>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	461a      	mov	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	@ (800181c <MIT_reset_origin+0x88>)
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <MIT_reset_origin+0x8c>)
 80017fe:	f007 ff12 	bl	8009626 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <MIT_reset_origin+0x7e>
		sta = 1;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <MIT_reset_origin+0x90>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800180e:	f003 fee7 	bl	80055e0 <Error_Handler>
	}
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	24000264 	.word	0x24000264
 8001820:	24000288 	.word	0x24000288
 8001824:	24002978 	.word	0x24002978

08001828 <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8001832:	23ff      	movs	r3, #255	@ 0xff
 8001834:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8001836:	23ff      	movs	r3, #255	@ 0xff
 8001838:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 800183a:	23ff      	movs	r3, #255	@ 0xff
 800183c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 800183e:	23ff      	movs	r3, #255	@ 0xff
 8001840:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8001842:	23ff      	movs	r3, #255	@ 0xff
 8001844:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8001846:	23ff      	movs	r3, #255	@ 0xff
 8001848:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 800184a:	23ff      	movs	r3, #255	@ 0xff
 800184c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 800184e:	23fc      	movs	r3, #252	@ 0xfc
 8001850:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4a16      	ldr	r2, [pc, #88]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 8001856:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001858:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800185e:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 8001866:	2208      	movs	r2, #8
 8001868:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	461a      	mov	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <MIT_enter_control_mode+0x88>)
 8001890:	4808      	ldr	r0, [pc, #32]	@ (80018b4 <MIT_enter_control_mode+0x8c>)
 8001892:	f007 fec8 	bl	8009626 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <MIT_enter_control_mode+0x7e>
		sta = 1;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MIT_enter_control_mode+0x90>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80018a2:	f003 fe9d 	bl	80055e0 <Error_Handler>
	}
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	24000264 	.word	0x24000264
 80018b4:	24000288 	.word	0x24000288
 80018b8:	24002978 	.word	0x24002978

080018bc <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 80018c6:	23ff      	movs	r3, #255	@ 0xff
 80018c8:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 80018ca:	23ff      	movs	r3, #255	@ 0xff
 80018cc:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 80018ce:	23ff      	movs	r3, #255	@ 0xff
 80018d0:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 80018d2:	23ff      	movs	r3, #255	@ 0xff
 80018d4:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 80018d6:	23ff      	movs	r3, #255	@ 0xff
 80018d8:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 80018da:	23ff      	movs	r3, #255	@ 0xff
 80018dc:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 80018de:	23ff      	movs	r3, #255	@ 0xff
 80018e0:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 80018e2:	23fd      	movs	r3, #253	@ 0xfd
 80018e4:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4a16      	ldr	r2, [pc, #88]	@ (8001944 <MIT_exit_control_mode+0x88>)
 80018ea:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80018ec:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <MIT_exit_control_mode+0x88>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <MIT_exit_control_mode+0x88>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <MIT_exit_control_mode+0x88>)
 80018fa:	2208      	movs	r2, #8
 80018fc:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <MIT_exit_control_mode+0x88>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <MIT_exit_control_mode+0x88>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <MIT_exit_control_mode+0x88>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <MIT_exit_control_mode+0x88>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001916:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <MIT_exit_control_mode+0x88>)
 8001918:	2200      	movs	r2, #0
 800191a:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	461a      	mov	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <MIT_exit_control_mode+0x88>)
 8001924:	4808      	ldr	r0, [pc, #32]	@ (8001948 <MIT_exit_control_mode+0x8c>)
 8001926:	f007 fe7e 	bl	8009626 <HAL_FDCAN_AddMessageToTxFifoQ>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <MIT_exit_control_mode+0x7e>
		sta = 1;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MIT_exit_control_mode+0x90>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001936:	f003 fe53 	bl	80055e0 <Error_Handler>
	}
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	24000264 	.word	0x24000264
 8001948:	24000288 	.word	0x24000288
 800194c:	24002978 	.word	0x24002978

08001950 <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3301      	adds	r3, #1
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3302      	adds	r3, #2
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3303      	adds	r3, #3
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3305      	adds	r3, #5
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	121b      	asrs	r3, r3, #8
 800198e:	b2da      	uxtb	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3306      	adds	r3, #6
 8001994:	f002 020f 	and.w	r2, r2, #15
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3307      	adds	r3, #7
 80019a0:	887a      	ldrh	r2, [r7, #2]
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	ed87 0a00 	vstr	s0, [r7]
 80019c0:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 80019c2:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <MIT_Mode+0xd8>)
 80019c4:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 80019c6:	4b32      	ldr	r3, [pc, #200]	@ (8001a90 <MIT_Mode+0xdc>)
 80019c8:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 80019ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80019ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019d2:	edd7 6a00 	vldr	s13, [r7]
 80019d6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80019da:	eeb0 1b46 	vmov.f64	d1, d6
 80019de:	eeb0 0b47 	vmov.f64	d0, d7
 80019e2:	f015 f8a9 	bl	8016b38 <fmax>
 80019e6:	eeb0 6b40 	vmov.f64	d6, d0
 80019ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f2:	eeb0 1b47 	vmov.f64	d1, d7
 80019f6:	eeb0 0b46 	vmov.f64	d0, d6
 80019fa:	f015 f8ba 	bl	8016b72 <fmin>
 80019fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001a02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a06:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 8001a0a:	200c      	movs	r0, #12
 8001a0c:	ed97 1a06 	vldr	s2, [r7, #24]
 8001a10:	edd7 0a07 	vldr	s1, [r7, #28]
 8001a14:	ed97 0a00 	vldr	s0, [r7]
 8001a18:	f7ff fe12 	bl	8001640 <float32_t_to_uint>
 8001a1c:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	b21a      	sxth	r2, r3
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4611      	mov	r1, r2
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff91 	bl	8001950 <MIT_TxData>

	TxHeader.Identifier = motor_id;
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a32:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001a34:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a42:	2208      	movs	r2, #8
 8001a44:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001a46:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	461a      	mov	r2, r3
 8001a6a:	490a      	ldr	r1, [pc, #40]	@ (8001a94 <MIT_Mode+0xe0>)
 8001a6c:	480a      	ldr	r0, [pc, #40]	@ (8001a98 <MIT_Mode+0xe4>)
 8001a6e:	f007 fdda 	bl	8009626 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <MIT_Mode+0xce>
		sta = 1;
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <MIT_Mode+0xe8>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001a7e:	f003 fdaf 	bl	80055e0 <Error_Handler>
	}
}
 8001a82:	bf00      	nop
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	c1c80000 	.word	0xc1c80000
 8001a90:	41c80000 	.word	0x41c80000
 8001a94:	24000264 	.word	0x24000264
 8001a98:	24000288 	.word	0x24000288
 8001a9c:	24002978 	.word	0x24002978

08001aa0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b092      	sub	sp, #72	@ 0x48
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d04b      	beq.n	8001b4c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001ab4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	2140      	movs	r1, #64	@ 0x40
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f007 fe0c 	bl	80096dc <HAL_FDCAN_GetRxMessage>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 8001aca:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001acc:	2202      	movs	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
            Error_Handler();
 8001ad0:	f003 fd86 	bl	80055e0 <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 8001ad4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001ad8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001adc:	2300      	movs	r3, #0
 8001ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ae0:	e02b      	b.n	8001b3a <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b58 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ae6:	2198      	movs	r1, #152	@ 0x98
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3308      	adds	r3, #8
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d11c      	bne.n	8001b34 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 8001afe:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b02:	2198      	movs	r1, #152	@ 0x98
 8001b04:	fb01 f303 	mul.w	r3, r1, r3
 8001b08:	4413      	add	r3, r2
 8001b0a:	3310      	adds	r3, #16
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001b12:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001b16:	2300      	movs	r3, #0
 8001b18:	f00e fca8 	bl	801046c <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00f      	beq.n	8001b42 <HAL_FDCAN_RxFifo0Callback+0xa2>
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	f3bf 8f6f 	isb	sy
                break;
 8001b32:	e006      	b.n	8001b42 <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b36:	3301      	adds	r3, #1
 8001b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	ddd0      	ble.n	8001ae2 <HAL_FDCAN_RxFifo0Callback+0x42>
 8001b40:	e000      	b.n	8001b44 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 8001b42:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 8001b44:	2180      	movs	r1, #128	@ 0x80
 8001b46:	4806      	ldr	r0, [pc, #24]	@ (8001b60 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8001b48:	f008 fe97 	bl	800a87a <HAL_GPIO_TogglePin>
    }
}
 8001b4c:	bf00      	nop
 8001b4e:	3748      	adds	r7, #72	@ 0x48
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	24002978 	.word	0x24002978
 8001b58:	2400230c 	.word	0x2400230c
 8001b5c:	e000ed04 	.word	0xe000ed04
 8001b60:	58021000 	.word	0x58021000

08001b64 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b087      	sub	sp, #28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b72:	ed87 1a01 	vstr	s2, [r7, #4]
 8001b76:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 8001b7a:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001bf4 <tustin_derivative+0x90>
 8001b7e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b82:	edd7 7a00 	vldr	s15, [r7]
 8001b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 8001b9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bac:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001bf8 <tustin_derivative+0x94>
 8001bb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bcc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bd0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001bf8 <tustin_derivative+0x94>
 8001bd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bdc:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	ee07 3a90 	vmov	s15, r3
}
 8001be6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40490fd8 	.word	0x40490fd8
 8001bf8:	3b03126f 	.word	0x3b03126f

08001bfc <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	@ 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 8001c5a:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c60:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t buf[8], last[8]; int got = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while (xQueueReceive(m->canRxQueue, buf, 0) == pdPASS) { memcpy(last, buf, 8); got = 1; }
 8001c6a:	e009      	b.n	8001c80 <motor_encoder_read+0x84>
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	f107 0214 	add.w	r2, r7, #20
 8001c74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c78:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f107 0114 	add.w	r1, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00e fc8c 	bl	80105a8 <xQueueReceive>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d0ea      	beq.n	8001c6c <motor_encoder_read+0x70>
	if (got)
 8001c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01f      	beq.n	8001cdc <motor_encoder_read+0xe0>
	{
		// CAN 메시지가 이미 수신되었거나 1ms 이내 수신 성공 시
		unsigned int p_int = ((last[1]<<8)|last[2]);
 8001c9c:	7b7b      	ldrb	r3, [r7, #13]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	7bba      	ldrb	r2, [r7, #14]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	623b      	str	r3, [r7, #32]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8001cac:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001cb0:	6a38      	ldr	r0, [r7, #32]
 8001cb2:	f7ff fd25 	bl	8001700 <uint_to_float32_t>
 8001cb6:	ed87 0a07 	vstr	s0, [r7, #28]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 8001cba:	eddf 7a28 	vldr	s15, [pc, #160]	@ 8001d5c <motor_encoder_read+0x160>
 8001cbe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ccc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001cda:	e004      	b.n	8001ce6 <motor_encoder_read+0xea>
	}
	else
	{
		sta = 2;
 8001cdc:	4b20      	ldr	r3, [pc, #128]	@ (8001d60 <motor_encoder_read+0x164>)
 8001cde:	2202      	movs	r2, #2
 8001ce0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001ce2:	f003 fc7d 	bl	80055e0 <Error_Handler>
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		//m->pos = m->pos_old;
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	ed93 6a06 	vldr	s12, [r3, #24]
 8001cfe:	eef0 1a46 	vmov.f32	s3, s12
 8001d02:	eeb0 1a66 	vmov.f32	s2, s13
 8001d06:	eef0 0a47 	vmov.f32	s1, s14
 8001d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0e:	f7ff ff29 	bl	8001b64 <tustin_derivative>
 8001d12:	eef0 7a40 	vmov.f32	s15, s0
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	ed93 6a06 	vldr	s12, [r3, #24]
 8001d34:	eef0 1a46 	vmov.f32	s3, s12
 8001d38:	eeb0 1a66 	vmov.f32	s2, s13
 8001d3c:	eef0 0a47 	vmov.f32	s1, s14
 8001d40:	eeb0 0a67 	vmov.f32	s0, s15
 8001d44:	f7ff ff0e 	bl	8001b64 <tustin_derivative>
 8001d48:	eef0 7a40 	vmov.f32	s15, s0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8001d52:	bf00      	nop
 8001d54:	3730      	adds	r7, #48	@ 0x30
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40490fd8 	.word	0x40490fd8
 8001d60:	24002978 	.word	0x24002978

08001d64 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d76:	ed97 7a00 	vldr	s14, [r7]
 8001d7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001da4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	dd1a      	ble.n	8001de4 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d400      	bmi.n	8001dfc <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 8001dfa:	e01a      	b.n	8001e32 <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	@ 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	eeb0 0a67 	vmov.f32	s0, s15
 8001e56:	f014 ff33 	bl	8016cc0 <sinf>
 8001e5a:	ed87 0a08 	vstr	s0, [r7, #32]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6c:	f014 ffec 	bl	8016e48 <cosf>
 8001e70:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	eeb0 0a67 	vmov.f32	s0, s15
 8001e84:	f014 ff1c 	bl	8016cc0 <sinf>
 8001e88:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001e92:	3304      	adds	r3, #4
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9c:	f014 ffd4 	bl	8016e48 <cosf>
 8001ea0:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001eaa:	3308      	adds	r3, #8
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb4:	f014 ff04 	bl	8016cc0 <sinf>
 8001eb8:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001ec2:	3308      	adds	r3, #8
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f014 ffbc 	bl	8016e48 <cosf>
 8001ed0:	ed87 0a03 	vstr	s0, [r7, #12]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed8:	e02c      	b.n	8001f34 <robot_forward_kinematics_cal+0xf4>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	441a      	add	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	441a      	add	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	3301      	adds	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	ddcf      	ble.n	8001eda <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001f40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001f60:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001f92:	3304      	adds	r3, #4
 8001f94:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9c:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 8001fac:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001fcc:	3308      	adds	r3, #8
 8001fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd2:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f010 fcab 	bl	8012944 <arm_mat_mult_f32>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d004      	beq.n	8001ffe <robot_forward_kinematics_cal+0x1be>
 8001ff4:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <robot_forward_kinematics_cal+0x1c8>)
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	f003 faf1 	bl	80055e0 <Error_Handler>
}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	@ 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	24002978 	.word	0x24002978

0800200c <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b0f0      	sub	sp, #448	@ 0x1c0
 8002010:	af00      	add	r7, sp, #0
 8002012:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002016:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800201a:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 800201c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002020:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	eeb0 0a67 	vmov.f32	s0, s15
 8002032:	f014 fe45 	bl	8016cc0 <sinf>
 8002036:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 800203a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800203e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	eeb0 0a67 	vmov.f32	s0, s15
 8002050:	f014 fefa 	bl	8016e48 <cosf>
 8002054:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8002058:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800205c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002066:	3304      	adds	r3, #4
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	eeb0 0a67 	vmov.f32	s0, s15
 8002070:	f014 fe26 	bl	8016cc0 <sinf>
 8002074:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 8002078:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800207c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002086:	3304      	adds	r3, #4
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	eeb0 0a67 	vmov.f32	s0, s15
 8002090:	f014 feda 	bl	8016e48 <cosf>
 8002094:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8002098:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800209c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80020a6:	3308      	adds	r3, #8
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	eeb0 0a67 	vmov.f32	s0, s15
 80020b0:	f014 fe06 	bl	8016cc0 <sinf>
 80020b4:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 80020b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80020c6:	3308      	adds	r3, #8
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	eeb0 0a67 	vmov.f32	s0, s15
 80020d0:	f014 feba 	bl	8016e48 <cosf>
 80020d4:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 80020d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80020e6:	3308      	adds	r3, #8
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80020fa:	3304      	adds	r3, #4
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002104:	eeb0 0a67 	vmov.f32	s0, s15
 8002108:	f014 fdda 	bl	8016cc0 <sinf>
 800210c:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8002110:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002114:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800211e:	3308      	adds	r3, #8
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002128:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002132:	3304      	adds	r3, #4
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213c:	eeb0 0a67 	vmov.f32	s0, s15
 8002140:	f014 fe82 	bl	8016e48 <cosf>
 8002144:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 8002148:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800214c:	eeb1 7a67 	vneg.f32	s14, s15
 8002150:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002154:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 800215e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002162:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002166:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800216a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	ed93 6ac3 	vldr	s12, [r3, #780]	@ 0x30c
 8002174:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002178:	ee66 7a27 	vmul.f32	s15, s12, s15
 800217c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002180:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002184:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 800218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002192:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 8002196:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800219a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80021a4:	eeb1 7a67 	vneg.f32	s14, s15
 80021a8:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80021ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021b4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 80021be:	3304      	adds	r3, #4
 80021c0:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 80021cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80021da:	eeb1 7a67 	vneg.f32	s14, s15
 80021de:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80021e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021ea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 80021f4:	3308      	adds	r3, #8
 80021f6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 8002202:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002206:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002210:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002218:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800221c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8002226:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800222a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002232:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002236:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8002240:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002244:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 800225e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002262:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 800226c:	eeb1 7a67 	vneg.f32	s14, s15
 8002270:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002278:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800227c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8002286:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800228a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8002294:	3301      	adds	r3, #1
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800229e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a2:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 80022a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80022b4:	eeb1 7a67 	vneg.f32	s14, s15
 80022b8:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80022bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80022ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022d2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80022dc:	3302      	adds	r3, #2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 80022ee:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022f2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80022fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002300:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 8002314:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002318:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002322:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002326:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8002330:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002334:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	3304      	adds	r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234c:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 8002350:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002354:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 800235e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002362:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 800236c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002370:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 800237a:	3301      	adds	r3, #1
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002388:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 800238c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002390:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 800239a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800239e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f010 fa6c 	bl	8012888 <arm_mat_trans_f32>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <robot_model_param_cal+0x3bc>
 80023b6:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <robot_model_param_cal+0x3b8>)
 80023b8:	2204      	movs	r2, #4
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f003 f910 	bl	80055e0 <Error_Handler>
 80023c0:	e002      	b.n	80023c8 <robot_model_param_cal+0x3bc>
 80023c2:	bf00      	nop
 80023c4:	24002978 	.word	0x24002978

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 80023c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023cc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80023d6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80023da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	edd3 6ac8 	vldr	s13, [r3, #800]	@ 0x320
 80023ec:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80023f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f8:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 80023fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002400:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	ed93 7ac4 	vldr	s14, [r3, #784]	@ 0x310
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 800240a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800240e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	edd3 6abf 	vldr	s13, [r3, #764]	@ 0x2fc
 8002418:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800241c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8002426:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800242a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800242e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002432:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002436:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8002440:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002444:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800244c:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8002450:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002454:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 800245e:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8002462:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002466:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 800246a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 800246e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002472:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 800247c:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8002480:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8002484:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002488:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8002492:	eeb1 7a67 	vneg.f32	s14, s15
 8002496:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800249a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80024a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80024b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ba:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80024be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80024c6:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 80024ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 80024d8:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 80024dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80024ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024f2:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80024f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 80024fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024fe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8002508:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 800250a:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 800250e:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 8002512:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002516:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8002520:	eeb1 7a67 	vneg.f32	s14, s15
 8002524:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8002528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800252c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002530:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 800253a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800253e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002542:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800254c:	3308      	adds	r3, #8
 800254e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 800255a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800255e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8002568:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800256c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8002576:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800257a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	6852      	ldr	r2, [r2, #4]
 800258a:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 800258c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002590:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	ed93 7ac5 	vldr	s14, [r3, #788]	@ 0x314
											+ r->m3 * r->l2 * r->l2;
 800259a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800259e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 80025a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80025b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80025c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 80025cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 80025da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 80025e8:	3301      	adds	r3, #1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 80025ee:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 80025f2:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 80025f6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025fa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8002604:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002608:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002616:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800261a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8002624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002628:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800262c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8002636:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800263a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8002644:	3302      	adds	r3, #2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 8002656:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800265a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8002664:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002668:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8002672:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002676:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	6892      	ldr	r2, [r2, #8]
 8002686:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 8002688:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800268c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8002696:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800269a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 80026a4:	3302      	adds	r3, #2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	441a      	add	r2, r3
 80026aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 80026b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	3304      	adds	r3, #4
 80026ca:	440b      	add	r3, r1
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 80026d0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 80026de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 80026ec:	3301      	adds	r3, #1
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 80026f6:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	f8d2 2318 	ldr.w	r2, [r2, #792]	@ 0x318
 8002700:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8002702:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002706:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8002710:	eeb1 7a67 	vneg.f32	s14, s15
 8002714:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002718:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8002722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002726:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800272a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002748:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800274c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002756:	3304      	adds	r3, #4
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 8002760:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002764:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 800276e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002772:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 800277c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002780:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002784:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002788:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8002792:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002796:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800279a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800279e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 80027b0:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80027b4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 80027c6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80027ca:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80027ce:	ee36 6a27 	vadd.f32	s12, s12, s15
 80027d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80027e0:	3304      	adds	r3, #4
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 80027f8:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80027fc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002800:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002804:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800280e:	3308      	adds	r3, #8
 8002810:	ed93 5a00 	vldr	s10, [r3]
 8002814:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002818:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002822:	3304      	adds	r3, #4
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee75 7a67 	vsub.f32	s15, s10, s15
 800282c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002830:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 800283c:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 8002840:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002844:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800284e:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8002852:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002856:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
							 ) * r->qdot_bi.pData[0];
 8002860:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8002864:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 8002868:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800286c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8002876:	eeb1 7a67 	vneg.f32	s14, s15
 800287a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800287e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002890:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 800289a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800289e:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 80028a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80028b4:	3308      	adds	r3, #8
 80028b6:	edd3 6a00 	vldr	s13, [r3]
 80028ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80028c8:	3304      	adds	r3, #4
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028da:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80028e4:	3308      	adds	r3, #8
 80028e6:	edd3 6a00 	vldr	s13, [r3]
 80028ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80028f8:	3304      	adds	r3, #4
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002902:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002906:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002910:	3304      	adds	r3, #4
 8002912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002916:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 800291a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800291e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8002928:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800292c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800293e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8002948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800294c:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8002950:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002954:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002958:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002962:	3304      	adds	r3, #4
 8002964:	edd3 6a00 	vldr	s13, [r3]
 8002968:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800296c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002976:	3304      	adds	r3, #4
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002980:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002984:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800298e:	3308      	adds	r3, #8
 8002990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002994:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002998:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800299c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 80029ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	ed93 7abf 	vldr	s14, [r3, #764]	@ 0x2fc
 80029ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 80029da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80029e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002c0c <robot_model_param_cal+0xc00>
 80029f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002a06:	3304      	adds	r3, #4
 8002a08:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a10:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 8002a14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8002a22:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002c0c <robot_model_param_cal+0xc00>
 8002a26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a2a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a2e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8002a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a54:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 8002a58:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a5c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002a66:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8002a7c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a88:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 8002a8c:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 8002a90:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a98:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 8002a9c:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 8002aac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ab0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002aba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002abe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8002ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002acc:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002c10 <robot_model_param_cal+0xc04>
 8002ad0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002ad4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ad8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002ae2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ae6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8002af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002c14 <robot_model_param_cal+0xc08>
 8002af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afc:	eef0 0a67 	vmov.f32	s1, s15
 8002b00:	eeb0 0a66 	vmov.f32	s0, s13
 8002b04:	f014 f876 	bl	8016bf4 <fmaxf>
 8002b08:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 8002b0c:	4b42      	ldr	r3, [pc, #264]	@ (8002c18 <robot_model_param_cal+0xc0c>)
 8002b0e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 8002b12:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8002b16:	eef0 7ae7 	vabs.f32	s15, s15
 8002b1a:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 8002b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b26:	dc0b      	bgt.n	8002b40 <robot_model_param_cal+0xb34>
 8002b28:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002b2c:	eef0 7ae7 	vabs.f32	s15, s15
 8002b30:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 8002b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3c:	f340 82aa 	ble.w	8003094 <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 8002b40:	f107 0308 	add.w	r3, r7, #8
 8002b44:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8002b48:	2203      	movs	r2, #3
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	f010 f89c 	bl	8012c88 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 8002b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b54:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002b58:	2203      	movs	r2, #3
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	f010 f894 	bl	8012c88 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 8002b60:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002b64:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8002b68:	2203      	movs	r2, #3
 8002b6a:	2103      	movs	r1, #3
 8002b6c:	f010 f88c 	bl	8012c88 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002b70:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b74:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002b7e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b82:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8002b8c:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8002b90:	4619      	mov	r1, r3
 8002b92:	f00f fed7 	bl	8012944 <arm_mat_mult_f32>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <robot_model_param_cal+0xb9a>
 8002b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002c1c <robot_model_param_cal+0xc10>)
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f002 fd1d 	bl	80055e0 <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002ba6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002baa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bae:	ed93 7a00 	vldr	s14, [r3]
 8002bb2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bb6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bba:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bc6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bca:	edd3 7a08 	vldr	s15, [r3, #32]
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 8002bd6:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 8002bda:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002be2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002c10 <robot_model_param_cal+0xc04>
 8002be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bea:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002c20 <robot_model_param_cal+0xc14>
 8002bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf2:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 8002bf6:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002bfa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002bfe:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c08:	e023      	b.n	8002c52 <robot_model_param_cal+0xc46>
 8002c0a:	bf00      	nop
 8002c0c:	411ce80a 	.word	0x411ce80a
 8002c10:	358637bd 	.word	0x358637bd
 8002c14:	34000000 	.word	0x34000000
 8002c18:	358637bd 	.word	0x358637bd
 8002c1c:	24002978 	.word	0x24002978
 8002c20:	3d4ccccd 	.word	0x3d4ccccd
 8002c24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c28:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8002c2c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c3a:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 8002c3e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002c52:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	dde4      	ble.n	8002c24 <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 8002c5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c5e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c62:	ed93 7a00 	vldr	s14, [r3]
 8002c66:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c72:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c76:	edc3 7a00 	vstr	s15, [r3]
 8002c7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c7e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c82:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c86:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c92:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002c96:	edc3 7a04 	vstr	s15, [r3, #16]
 8002c9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002c9e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ca2:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ca6:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cb2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cb6:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002cba:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8002cbe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f00f fee1 	bl	8012a8c <arm_mat_inverse_f32>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <robot_model_param_cal+0xcce>
 8002cd0:	4b82      	ldr	r3, [pc, #520]	@ (8002edc <robot_model_param_cal+0xed0>)
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f002 fc83 	bl	80055e0 <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002cda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cde:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 8002ce8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002cec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002cf6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f00f fe22 	bl	8012944 <arm_mat_mult_f32>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <robot_model_param_cal+0xd04>
 8002d06:	4b75      	ldr	r3, [pc, #468]	@ (8002edc <robot_model_param_cal+0xed0>)
 8002d08:	2204      	movs	r2, #4
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f002 fc68 	bl	80055e0 <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002d10:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002d1e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d22:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f00f fdaa 	bl	8012888 <arm_mat_trans_f32>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <robot_model_param_cal+0xd38>
 8002d3a:	4b68      	ldr	r3, [pc, #416]	@ (8002edc <robot_model_param_cal+0xed0>)
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f002 fc4e 	bl	80055e0 <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 8002d44:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002d48:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	2103      	movs	r1, #3
 8002d50:	f00f ff9a 	bl	8012c88 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 8002d54:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002d58:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	2103      	movs	r1, #3
 8002d60:	f00f ff92 	bl	8012c88 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 8002d64:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002d68:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	2103      	movs	r1, #3
 8002d70:	f00f ff8a 	bl	8012c88 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 8002d74:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002d78:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	2103      	movs	r1, #3
 8002d80:	f00f ff82 	bl	8012c88 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 8002d84:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d88:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	2103      	movs	r1, #3
 8002d90:	f00f ff7a 	bl	8012c88 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002d94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002d98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 8002da2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00f fe6f 	bl	8012a8c <arm_mat_inverse_f32>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f040 80b2 	bne.w	8002f1a <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002db6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002dba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002dc4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002dc8:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00f fdb9 	bl	8012944 <arm_mat_mult_f32>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <robot_model_param_cal+0xdd6>
 8002dd8:	4b40      	ldr	r3, [pc, #256]	@ (8002edc <robot_model_param_cal+0xed0>)
 8002dda:	2204      	movs	r2, #4
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f002 fbff 	bl	80055e0 <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002de2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002de6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f503 715f 	add.w	r1, r3, #892	@ 0x37c
 8002df0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002df4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f00f fda3 	bl	8012944 <arm_mat_mult_f32>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <robot_model_param_cal+0xe02>
 8002e04:	4b35      	ldr	r3, [pc, #212]	@ (8002edc <robot_model_param_cal+0xed0>)
 8002e06:	2204      	movs	r2, #4
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	f002 fbe9 	bl	80055e0 <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002e14:	e016      	b.n	8002e44 <robot_model_param_cal+0xe38>
 8002e16:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e1a:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002e1e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e2c:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 8002e30:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002e44:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	dde4      	ble.n	8002e16 <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 8002e54:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e5c:	ed93 7a00 	vldr	s14, [r3]
 8002e60:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e68:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e70:	edc3 7a00 	vstr	s15, [r3]
 8002e74:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e7c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e80:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e90:	edc3 7a04 	vstr	s15, [r3, #16]
 8002e94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002e98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e9c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ea0:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002eac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002eb0:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002eb4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002eb8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f00f fde4 	bl	8012a8c <arm_mat_inverse_f32>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <robot_model_param_cal+0xec8>
 8002eca:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <robot_model_param_cal+0xed0>)
 8002ecc:	2204      	movs	r2, #4
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	f002 fb86 	bl	80055e0 <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002eda:	e01a      	b.n	8002f12 <robot_model_param_cal+0xf06>
 8002edc:	24002978 	.word	0x24002978
 8002ee0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ee4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002eee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002efa:	0092      	lsls	r2, r2, #2
 8002efc:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 8002f00:	443a      	add	r2, r7
 8002f02:	3ae0      	subs	r2, #224	@ 0xe0
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002f12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	dde2      	ble.n	8002ee0 <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8002f1a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f1e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002f28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002f3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002f48:	3304      	adds	r3, #4
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002f50:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f54:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002f5e:	3308      	adds	r3, #8
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002f66:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f6a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002f74:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f78:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8002f8c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f90:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002f9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002f9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002fa8:	3301      	adds	r3, #1
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fb2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002fbc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fc0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002fca:	3301      	adds	r3, #1
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002fd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002fe2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002fe6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002ffc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003000:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800300a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800300e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8003022:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003026:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8003030:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003034:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	3304      	adds	r3, #4
 8003042:	4413      	add	r3, r2
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 800304a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800304e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8003058:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800305c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8003066:	3301      	adds	r3, #1
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	441a      	add	r2, r3
 800306c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003070:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 800307a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800307e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8003088:	3301      	adds	r3, #1
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	601a      	str	r2, [r3, #0]
	{
 8003092:	e227      	b.n	80034e4 <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 8003094:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8003098:	eef1 6a67 	vneg.f32	s13, s15
 800309c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80030aa:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 80030ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 80030b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80030c4:	3304      	adds	r3, #4
 80030c6:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 80030ca:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 80030ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 80030d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80030da:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80030e4:	3308      	adds	r3, #8
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 80030ec:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80030f0:	eeb1 7a67 	vneg.f32	s14, s15
 80030f4:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80030f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80030fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003100:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800310a:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800310e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003112:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003116:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8003120:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003124:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003136:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 800313a:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800313e:	eeb1 7a67 	vneg.f32	s14, s15
 8003142:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8003146:	ee67 6a27 	vmul.f32	s13, s14, s15
 800314a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800314e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8003158:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800315c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003160:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003164:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800316e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003172:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800317c:	3301      	adds	r3, #1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003186:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 800318a:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800318e:	eef1 6a67 	vneg.f32	s13, s15
 8003192:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003196:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80031a0:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80031a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80031b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80031c4:	3302      	adds	r3, #2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ce:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 80031d2:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 80031d6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80031da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80031de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80031ec:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80031f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80031f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8003202:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003206:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003218:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 800321c:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8003220:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8003224:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003228:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800322c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8003236:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800323a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800323e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003242:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800324c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003250:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3304      	adds	r3, #4
 800325e:	4413      	add	r3, r2
 8003260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003264:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 8003268:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800326c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8003276:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800327a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800327e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003282:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800328c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003290:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800329a:	3301      	adds	r3, #1
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 80032a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a8:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80032ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 80032ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80032be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f00f fadc 	bl	8012888 <arm_mat_trans_f32>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <robot_model_param_cal+0x12d4>
 80032d6:	4b86      	ldr	r3, [pc, #536]	@ (80034f0 <robot_model_param_cal+0x14e4>)
 80032d8:	2204      	movs	r2, #4
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	f002 f980 	bl	80055e0 <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 80032e0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80032e4:	2224      	movs	r2, #36	@ 0x24
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f011 f83c 	bl	8014366 <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 80032ee:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80032f2:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80032f6:	2203      	movs	r2, #3
 80032f8:	2103      	movs	r1, #3
 80032fa:	f00f fcc5 	bl	8012c88 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80032fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003302:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f503 7075 	add.w	r0, r3, #980	@ 0x3d4
 800330c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003310:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800331a:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800331e:	4619      	mov	r1, r3
 8003320:	f00f fb10 	bl	8012944 <arm_mat_mult_f32>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d004      	beq.n	8003334 <robot_model_param_cal+0x1328>
 800332a:	4b71      	ldr	r3, [pc, #452]	@ (80034f0 <robot_model_param_cal+0x14e4>)
 800332c:	2204      	movs	r2, #4
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f002 f956 	bl	80055e0 <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003334:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003338:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8003342:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003346:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 8003350:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003354:	4619      	mov	r1, r3
 8003356:	f00f faf5 	bl	8012944 <arm_mat_mult_f32>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <robot_model_param_cal+0x135e>
 8003360:	4b63      	ldr	r3, [pc, #396]	@ (80034f0 <robot_model_param_cal+0x14e4>)
 8003362:	2204      	movs	r2, #4
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f002 f93b 	bl	80055e0 <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 800336a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800336e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8003378:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800337c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 800338a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800338e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8003398:	3304      	adds	r3, #4
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 80033a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80033ae:	3308      	adds	r3, #8
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 80033b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80033c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 80033dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80033ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80033ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 80033f8:	3301      	adds	r3, #1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	441a      	add	r2, r3
 80033fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003402:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 800340c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003410:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800341a:	3301      	adds	r3, #1
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8003424:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003428:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8003432:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003436:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8003440:	3302      	adds	r3, #2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 800344c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003450:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800345a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800345e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8003472:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003476:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8003480:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8003484:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	3304      	adds	r3, #4
 8003492:	4413      	add	r3, r2
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 800349a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800349e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80034a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 80034b6:	3301      	adds	r3, #1
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	441a      	add	r2, r3
 80034bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 80034ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80034ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80034d8:	3301      	adds	r3, #1
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	440b      	add	r3, r1
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	601a      	str	r2, [r3, #0]
	}
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	24002978 	.word	0x24002978

080034f4 <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80034fc:	2300      	movs	r3, #0
 80034fe:	61fb      	str	r3, [r7, #28]
 8003500:	e0cb      	b.n	800369a <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	3374      	adds	r3, #116	@ 0x74
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	ed93 7a00 	vldr	s14, [r3]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2198      	movs	r1, #152	@ 0x98
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	332c      	adds	r3, #44	@ 0x2c
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003526:	4bae      	ldr	r3, [pc, #696]	@ (80037e0 <robot_state_update+0x2ec>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003544:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3374      	adds	r3, #116	@ 0x74
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4413      	add	r3, r2
 8003552:	ed93 7a00 	vldr	s14, [r3]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2198      	movs	r1, #152	@ 0x98
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3330      	adds	r3, #48	@ 0x30
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800356c:	4b9c      	ldr	r3, [pc, #624]	@ (80037e0 <robot_state_update+0x2ec>)
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358a:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3374      	adds	r3, #116	@ 0x74
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	ed93 7a00 	vldr	s14, [r3]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	2198      	movs	r1, #152	@ 0x98
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	3334      	adds	r3, #52	@ 0x34
 80035aa:	edd3 7a00 	vldr	s15, [r3]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3374      	adds	r3, #116	@ 0x74
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	ed93 7a00 	vldr	s14, [r3]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2198      	movs	r1, #152	@ 0x98
 80035d6:	fb01 f303 	mul.w	r3, r1, r3
 80035da:	4413      	add	r3, r2
 80035dc:	3338      	adds	r3, #56	@ 0x38
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f2:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3374      	adds	r3, #116	@ 0x74
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	ed93 7a00 	vldr	s14, [r3]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2198      	movs	r1, #152	@ 0x98
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	333c      	adds	r3, #60	@ 0x3c
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3374      	adds	r3, #116	@ 0x74
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	ed93 7a00 	vldr	s14, [r3]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	2198      	movs	r1, #152	@ 0x98
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3340      	adds	r3, #64	@ 0x40
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365a:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	3374      	adds	r3, #116	@ 0x74
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	ed93 7a00 	vldr	s14, [r3]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	2198      	movs	r1, #152	@ 0x98
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	3304      	adds	r3, #4
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003690:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3301      	adds	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2b02      	cmp	r3, #2
 800369e:	f77f af30 	ble.w	8003502 <robot_state_update+0xe>
	}

	// 2. Range of Motion Checking
	r->q.pData[0] = r->q_bi.pData[0];
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	601a      	str	r2, [r3, #0]
	r->q.pData[1] = r->q_bi.pData[1];
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80036be:	3304      	adds	r3, #4
 80036c0:	6852      	ldr	r2, [r2, #4]
 80036c2:	601a      	str	r2, [r3, #0]
	r->q.pData[2] = r->q_bi.pData[2] - r->q_bi.pData[1];
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80036ca:	3308      	adds	r3, #8
 80036cc:	ed93 7a00 	vldr	s14, [r3]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80036d6:	3304      	adds	r3, #4
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80036e2:	3308      	adds	r3, #8
 80036e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e036      	b.n	8003760 <robot_state_update+0x26c>
		if (r->q.pData[i] > r->q_upper_ROM[i]) { sta=5; Error_Handler(); }
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	ed93 7a00 	vldr	s14, [r3]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	337c      	adds	r3, #124	@ 0x7c
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	dd05      	ble.n	8003726 <robot_state_update+0x232>
 800371a:	4b32      	ldr	r3, [pc, #200]	@ (80037e4 <robot_state_update+0x2f0>)
 800371c:	2205      	movs	r2, #5
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f001 ff5e 	bl	80055e0 <Error_Handler>
 8003724:	e019      	b.n	800375a <robot_state_update+0x266>
		else if (r->q.pData[i] < r->q_lower_ROM[i]) { sta=5; Error_Handler(); }
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	ed93 7a00 	vldr	s14, [r3]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	337e      	adds	r3, #126	@ 0x7e
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	d504      	bpl.n	800375a <robot_state_update+0x266>
 8003750:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <robot_state_update+0x2f0>)
 8003752:	2205      	movs	r2, #5
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f001 ff43 	bl	80055e0 <Error_Handler>
	for (int i = 0; i < NUM_MOTORS; ++i) {
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3301      	adds	r3, #1
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b02      	cmp	r3, #2
 8003764:	ddc5      	ble.n	80036f2 <robot_state_update+0x1fe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fe fc50 	bl	800200c <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fe fb67 	bl	8001e40 <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e02c      	b.n	80037d2 <robot_state_update+0x2de>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	441a      	add	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	@ 0x4d4
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	441a      	add	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	@ 0x510
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	3301      	adds	r3, #1
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	ddcf      	ble.n	8003778 <robot_state_update+0x284>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80037d8:	2300      	movs	r3, #0
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	e03f      	b.n	800385e <robot_state_update+0x36a>
 80037de:	bf00      	nop
 80037e0:	240022e8 	.word	0x240022e8
 80037e4:	24002978 	.word	0x24002978
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	441a      	add	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 1580 	ldr.w	r1, [r3, #1408]	@ 0x580
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	441a      	add	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	441a      	add	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	441a      	add	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	3301      	adds	r3, #1
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b02      	cmp	r3, #2
 8003862:	ddc1      	ble.n	80037e8 <robot_state_update+0x2f4>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e01e      	b.n	80038a8 <robot_state_update+0x3b4>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	441a      	add	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 165c 	ldr.w	r1, [r3, #1628]	@ 0x65c
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3301      	adds	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	dddd      	ble.n	800386a <robot_state_update+0x376>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f503 61c6 	add.w	r1, r3, #1584	@ 0x630
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 80038c0:	461a      	mov	r2, r3
 80038c2:	f00f f83f 	bl	8012944 <arm_mat_mult_f32>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <robot_state_update+0x3e2>
 80038cc:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <robot_state_update+0x3ec>)
 80038ce:	2204      	movs	r2, #4
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f001 fe85 	bl	80055e0 <Error_Handler>
}
 80038d6:	bf00      	nop
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24002978 	.word	0x24002978

080038e4 <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e040      	b.n	800397a <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4413      	add	r3, r2
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68f9      	ldr	r1, [r7, #12]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68f9      	ldr	r1, [r7, #12]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	4413      	add	r3, r2
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3304      	adds	r3, #4
 8003940:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	6a3a      	ldr	r2, [r7, #32]
 8003948:	4413      	add	r3, r2
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68f9      	ldr	r1, [r7, #12]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3304      	adds	r3, #4
 800395a:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003962:	4413      	add	r3, r2
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68f9      	ldr	r1, [r7, #12]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3301      	adds	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b02      	cmp	r3, #2
 800397e:	ddbb      	ble.n	80038f8 <robot_pos_pid_gain_setting+0x14>
	}
}
 8003980:	bf00      	nop
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e145      	b.n	8003c30 <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 80039a4:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 8003c68 <robot_pos_pid+0x2d8>
 80039a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	edd3 7a00 	vldr	s15, [r3]
 80039bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c8:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	ed93 7a00 	vldr	s14, [r3]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a14:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	ed93 7a00 	vldr	s14, [r3]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	edd3 7a00 	vldr	s15, [r3]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a48:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	3304      	adds	r3, #4
 8003a5a:	edd3 7a00 	vldr	s15, [r3]
 8003a5e:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003c6c <robot_pos_pid+0x2dc>
 8003a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a6a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 8003a6e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	ed93 7a00 	vldr	s14, [r3]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3304      	adds	r3, #4
 8003a90:	edd3 5a00 	vldr	s11, [r3]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	edd3 7a00 	vldr	s15, [r3]
 8003aa4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	edd3 7a00 	vldr	s15, [r3]
 8003abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	3304      	adds	r3, #4
 8003ace:	edd3 5a00 	vldr	s11, [r3]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aee:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b1a:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b32:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b36:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b3e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003b42:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8003c6c <robot_pos_pid+0x2dc>
 8003b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b4e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	ed93 7a00 	vldr	s14, [r3]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	edd3 7a00 	vldr	s15, [r3]
 8003b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b7a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003b7e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003c6c <robot_pos_pid+0x2dc>
 8003b82:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003b86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b92:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b9e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003ba2:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8003c6c <robot_pos_pid+0x2dc>
 8003ba6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003baa:	ee35 7b07 	vadd.f64	d7, d5, d7
 8003bae:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	edd3 7a00 	vldr	s15, [r3]
 8003bc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bca:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bde:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	ed93 7a00 	vldr	s14, [r3]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	edd3 7a00 	vldr	s15, [r3]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c26:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	f77f aeb6 	ble.w	80039a4 <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f503 61a9 	add.w	r1, r3, #1352	@ 0x548
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f00e fe7a 	bl	8012944 <arm_mat_mult_f32>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <robot_pos_pid+0x2d0>
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <robot_pos_pid+0x2e0>)
 8003c58:	2204      	movs	r2, #4
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	f001 fcc0 	bl	80055e0 <Error_Handler>
}
 8003c60:	bf00      	nop
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40490fd8 	.word	0x40490fd8
 8003c6c:	3b03126f 	.word	0x3b03126f
 8003c70:	24002978 	.word	0x24002978

08003c74 <uart3_rb_pop>:

// 링버퍼에서 1바이트 pop (읽을 게 없으면 0 반환)
static int uart3_rb_pop(uint8_t *out)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  if (uart3_ridx == uart3_widx) return 0;  // empty
 8003c7c:	4b11      	ldr	r3, [pc, #68]	@ (8003cc4 <uart3_rb_pop+0x50>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	4b11      	ldr	r3, [pc, #68]	@ (8003cc8 <uart3_rb_pop+0x54>)
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d101      	bne.n	8003c90 <uart3_rb_pop+0x1c>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e012      	b.n	8003cb6 <uart3_rb_pop+0x42>
  *out = uart3_rbuf[uart3_ridx];
 8003c90:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <uart3_rb_pop+0x50>)
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <uart3_rb_pop+0x58>)
 8003c9a:	5c9a      	ldrb	r2, [r3, r2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	701a      	strb	r2, [r3, #0]
  uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 8003ca0:	4b08      	ldr	r3, [pc, #32]	@ (8003cc4 <uart3_rb_pop+0x50>)
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <uart3_rb_pop+0x50>)
 8003cb2:	801a      	strh	r2, [r3, #0]
  return 1;
 8003cb4:	2301      	movs	r3, #1
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	24000eb6 	.word	0x24000eb6
 8003cc8:	24000eb4 	.word	0x24000eb4
 8003ccc:	240006b4 	.word	0x240006b4

08003cd0 <trim_spaces>:

// 좌우 공백 제거
static inline void trim_spaces(char *s) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  char *p = s;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	60fb      	str	r3, [r7, #12]
  while (*p==' ' || *p=='\t') ++p;
 8003cdc:	e002      	b.n	8003ce4 <trim_spaces+0x14>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d0f8      	beq.n	8003cde <trim_spaces+0xe>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b09      	cmp	r3, #9
 8003cf2:	d0f4      	beq.n	8003cde <trim_spaces+0xe>
  if (p!=s) memmove(s, p, strlen(p)+1);
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d009      	beq.n	8003d10 <trim_spaces+0x40>
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7fc fb3f 	bl	8000380 <strlen>
 8003d02:	4603      	mov	r3, r0
 8003d04:	3301      	adds	r3, #1
 8003d06:	461a      	mov	r2, r3
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f010 fb11 	bl	8014332 <memmove>
  for (int i=(int)strlen(s)-1; i>=0 && (s[i]==' ' || s[i]=='\t'); --i) s[i]='\0';
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7fc fb35 	bl	8000380 <strlen>
 8003d16:	4603      	mov	r3, r0
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	e007      	b.n	8003d2e <trim_spaces+0x5e>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	db0b      	blt.n	8003d4c <trim_spaces+0x7c>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d0ee      	beq.n	8003d1e <trim_spaces+0x4e>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b09      	cmp	r3, #9
 8003d4a:	d0e8      	beq.n	8003d1e <trim_spaces+0x4e>
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <parse_pc_line_to_floats>:

// 한 줄을 파싱: [ ... 19개 ... ] 에서 float들 추출
static int parse_pc_line_to_floats(char *line, float vals[], int maxn)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b08b      	sub	sp, #44	@ 0x2c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  // 대괄호 범위 찾기
  char *L = strchr(line, '[');
 8003d60:	215b      	movs	r1, #91	@ 0x5b
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f010 fb07 	bl	8014376 <strchr>
 8003d68:	61f8      	str	r0, [r7, #28]
  char *R = strrchr(line, ']');
 8003d6a:	215d      	movs	r1, #93	@ 0x5d
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f010 fb21 	bl	80143b4 <strrchr>
 8003d72:	61b8      	str	r0, [r7, #24]
  if (!L || !R || R <= L) return 0;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <parse_pc_line_to_floats+0x34>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <parse_pc_line_to_floats+0x34>
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d801      	bhi.n	8003d8c <parse_pc_line_to_floats+0x38>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e033      	b.n	8003df4 <parse_pc_line_to_floats+0xa0>

  *R = '\0';   // ']' 대신 문자열 끝
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
  ++L;         // '[' 다음부터
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]

  int count = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  char *save = NULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
  char *tok = strtok_r(L, ",", &save);
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	461a      	mov	r2, r3
 8003da6:	4915      	ldr	r1, [pc, #84]	@ (8003dfc <parse_pc_line_to_floats+0xa8>)
 8003da8:	69f8      	ldr	r0, [r7, #28]
 8003daa:	f010 fb41 	bl	8014430 <strtok_r>
 8003dae:	6238      	str	r0, [r7, #32]
  while (tok && count < maxn) {
 8003db0:	e018      	b.n	8003de4 <parse_pc_line_to_floats+0x90>
    trim_spaces(tok);
 8003db2:	6a38      	ldr	r0, [r7, #32]
 8003db4:	f7ff ff8c 	bl	8003cd0 <trim_spaces>
    vals[count++] = strtof(tok, NULL);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	18d4      	adds	r4, r2, r3
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	6a38      	ldr	r0, [r7, #32]
 8003dc8:	f00f fd1a 	bl	8013800 <strtof>
 8003dcc:	eef0 7a40 	vmov.f32	s15, s0
 8003dd0:	edc4 7a00 	vstr	s15, [r4]
    tok = strtok_r(NULL, ",", &save);
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4908      	ldr	r1, [pc, #32]	@ (8003dfc <parse_pc_line_to_floats+0xa8>)
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f010 fb27 	bl	8014430 <strtok_r>
 8003de2:	6238      	str	r0, [r7, #32]
  while (tok && count < maxn) {
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <parse_pc_line_to_floats+0x9e>
 8003dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	dbdf      	blt.n	8003db2 <parse_pc_line_to_floats+0x5e>
  }
  return count;
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	372c      	adds	r7, #44	@ 0x2c
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd90      	pop	{r4, r7, pc}
 8003dfc:	08016ff4 	.word	0x08016ff4

08003e00 <apply_pc_floats>:

// 파싱 결과를 시스템 파라미터에 반영 (요청대로 DataLoggingTask에서 직접 반영)
static void apply_pc_floats(const float v[PC_MSG_FIELDS])
{
 8003e00:	b480      	push	{r7}
 8003e02:	b097      	sub	sp, #92	@ 0x5c
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	// 인덱스 매핑
	const int T   = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	657b      	str	r3, [r7, #84]	@ 0x54
	const int tx  = 1,  ty  = 2,  tz  = 3;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e10:	2302      	movs	r3, #2
 8003e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e14:	2303      	movs	r3, #3
 8003e16:	64bb      	str	r3, [r7, #72]	@ 0x48
	const int xKp = 4,  xKi = 5,  xKd = 6,  xCf = 7,  xAw = 8;
 8003e18:	2304      	movs	r3, #4
 8003e1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e1c:	2305      	movs	r3, #5
 8003e1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e20:	2306      	movs	r3, #6
 8003e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e24:	2307      	movs	r3, #7
 8003e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e28:	2308      	movs	r3, #8
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
	const int yKp = 9,  yKi =10,  yKd =11,  yCf =12,  yAw =13;
 8003e2c:	2309      	movs	r3, #9
 8003e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e30:	230a      	movs	r3, #10
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e34:	230b      	movs	r3, #11
 8003e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e38:	230c      	movs	r3, #12
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3c:	230d      	movs	r3, #13
 8003e3e:	623b      	str	r3, [r7, #32]
	const int zKp =14,  zKi =15,  zKd =16,  zCf =17,  zAw =18;
 8003e40:	230e      	movs	r3, #14
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	230f      	movs	r3, #15
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	2310      	movs	r3, #16
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	2311      	movs	r3, #17
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	2312      	movs	r3, #18
 8003e52:	60fb      	str	r3, [r7, #12]

	// 간단한 유효성 (원하면 강화)
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 8003e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	edd3 7a00 	vldr	s15, [r3]
 8003e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e68:	d97f      	bls.n	8003f6a <apply_pc_floats+0x16a>
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	edd3 7a00 	vldr	s15, [r3]
 8003e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7e:	d974      	bls.n	8003f6a <apply_pc_floats+0x16a>
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e94:	d969      	bls.n	8003f6a <apply_pc_floats+0x16a>
	//  target_posXYZ.pData[0] = v[tx];
	//  target_posXYZ.pData[1] = v[ty];
	//  target_posXYZ.pData[2] = v[tz];

	// 3) XYZ 게인/컷오프/안티윈드업
	taskspace_p_gain[0]     	   = v[xKp];
 8003e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a35      	ldr	r2, [pc, #212]	@ (8003f78 <apply_pc_floats+0x178>)
 8003ea2:	6013      	str	r3, [r2, #0]
	taskspace_i_gain[0]     	   = v[xKi];
 8003ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a33      	ldr	r2, [pc, #204]	@ (8003f7c <apply_pc_floats+0x17c>)
 8003eb0:	6013      	str	r3, [r2, #0]
	taskspace_d_gain[0]     	   = v[xKd];
 8003eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	@ (8003f80 <apply_pc_floats+0x180>)
 8003ebe:	6013      	str	r3, [r2, #0]
	taskspace_pid_cutoff[0]        = v[xCf];
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2e      	ldr	r2, [pc, #184]	@ (8003f84 <apply_pc_floats+0x184>)
 8003ecc:	6013      	str	r3, [r2, #0]
	taskspace_windup_gain[0]       = v[xAw];
 8003ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f88 <apply_pc_floats+0x188>)
 8003eda:	6013      	str	r3, [r2, #0]

	taskspace_p_gain[1]     	   = v[yKp];
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a24      	ldr	r2, [pc, #144]	@ (8003f78 <apply_pc_floats+0x178>)
 8003ee8:	6053      	str	r3, [r2, #4]
	taskspace_i_gain[1]     	   = v[yKi];
 8003eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <apply_pc_floats+0x17c>)
 8003ef6:	6053      	str	r3, [r2, #4]
	taskspace_d_gain[1]     	   = v[yKd];
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1f      	ldr	r2, [pc, #124]	@ (8003f80 <apply_pc_floats+0x180>)
 8003f04:	6053      	str	r3, [r2, #4]
	taskspace_pid_cutoff[1]        = v[yCf];
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	@ (8003f84 <apply_pc_floats+0x184>)
 8003f12:	6053      	str	r3, [r2, #4]
	taskspace_windup_gain[1]       = v[yAw];
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f88 <apply_pc_floats+0x188>)
 8003f20:	6053      	str	r3, [r2, #4]

	taskspace_p_gain[2]     	   = v[zKp];
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a12      	ldr	r2, [pc, #72]	@ (8003f78 <apply_pc_floats+0x178>)
 8003f2e:	6093      	str	r3, [r2, #8]
	taskspace_i_gain[2]    	       = v[zKi];
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4413      	add	r3, r2
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a10      	ldr	r2, [pc, #64]	@ (8003f7c <apply_pc_floats+0x17c>)
 8003f3c:	6093      	str	r3, [r2, #8]
	taskspace_d_gain[2]     	   = v[zKd];
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0d      	ldr	r2, [pc, #52]	@ (8003f80 <apply_pc_floats+0x180>)
 8003f4a:	6093      	str	r3, [r2, #8]
	taskspace_pid_cutoff[2]        = v[zCf];
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a0b      	ldr	r2, [pc, #44]	@ (8003f84 <apply_pc_floats+0x184>)
 8003f58:	6093      	str	r3, [r2, #8]
	taskspace_windup_gain[2]       = v[zAw];
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a08      	ldr	r2, [pc, #32]	@ (8003f88 <apply_pc_floats+0x188>)
 8003f66:	6093      	str	r3, [r2, #8]
 8003f68:	e000      	b.n	8003f6c <apply_pc_floats+0x16c>
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 8003f6a:	bf00      	nop
}
 8003f6c:	375c      	adds	r7, #92	@ 0x5c
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	24000024 	.word	0x24000024
 8003f7c:	24000030 	.word	0x24000030
 8003f80:	2400003c 	.word	0x2400003c
 8003f84:	24000048 	.word	0x24000048
 8003f88:	24002300 	.word	0x24002300

08003f8c <uart3_poll_and_process_lines>:

// 링버퍼에서 줄 단위로 꺼내 처리 (CR 무시, LF로 완료)
static void uart3_poll_and_process_lines(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b096      	sub	sp, #88	@ 0x58
 8003f90:	af00      	add	r7, sp, #0
  uint8_t b;
  while (uart3_rb_pop(&b)) {
 8003f92:	e03b      	b.n	800400c <uart3_poll_and_process_lines+0x80>
    char c = (char)b;
 8003f94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003f98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (c == '\r') continue;
 8003f9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fa0:	2b0d      	cmp	r3, #13
 8003fa2:	d032      	beq.n	800400a <uart3_poll_and_process_lines+0x7e>

    if (c == '\n') {
 8003fa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003fa8:	2b0a      	cmp	r3, #10
 8003faa:	d11a      	bne.n	8003fe2 <uart3_poll_and_process_lines+0x56>
      if (uart3_line_len > 0) {
 8003fac:	4b1e      	ldr	r3, [pc, #120]	@ (8004028 <uart3_poll_and_process_lines+0x9c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d02b      	beq.n	800400c <uart3_poll_and_process_lines+0x80>
        uart3_line[uart3_line_len] = '\0';
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004028 <uart3_poll_and_process_lines+0x9c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800402c <uart3_poll_and_process_lines+0xa0>)
 8003fba:	2100      	movs	r1, #0
 8003fbc:	54d1      	strb	r1, [r2, r3]

        float vals[PC_MSG_FIELDS];
        int n = parse_pc_line_to_floats(uart3_line, vals, PC_MSG_FIELDS);
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	2213      	movs	r2, #19
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4819      	ldr	r0, [pc, #100]	@ (800402c <uart3_poll_and_process_lines+0xa0>)
 8003fc6:	f7ff fec5 	bl	8003d54 <parse_pc_line_to_floats>
 8003fca:	6538      	str	r0, [r7, #80]	@ 0x50
        if (n >= PC_MSG_FIELDS) {
 8003fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fce:	2b12      	cmp	r3, #18
 8003fd0:	dd03      	ble.n	8003fda <uart3_poll_and_process_lines+0x4e>
          apply_pc_floats(vals);
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff13 	bl	8003e00 <apply_pc_floats>
        } else {
          // 형식 불일치 시 무시(필요하면 printf로 경고)
          // printf("UART parse fail: got %d fields\r\n", n);
        }
        uart3_line_len = 0;
 8003fda:	4b13      	ldr	r3, [pc, #76]	@ (8004028 <uart3_poll_and_process_lines+0x9c>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e014      	b.n	800400c <uart3_poll_and_process_lines+0x80>
      }
    } else {
      if (uart3_line_len < UART3_LINE_MAX - 1) {
 8003fe2:	4b11      	ldr	r3, [pc, #68]	@ (8004028 <uart3_poll_and_process_lines+0x9c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d809      	bhi.n	8004002 <uart3_poll_and_process_lines+0x76>
        uart3_line[uart3_line_len++] = c;
 8003fee:	4b0e      	ldr	r3, [pc, #56]	@ (8004028 <uart3_poll_and_process_lines+0x9c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	490c      	ldr	r1, [pc, #48]	@ (8004028 <uart3_poll_and_process_lines+0x9c>)
 8003ff6:	600a      	str	r2, [r1, #0]
 8003ff8:	490c      	ldr	r1, [pc, #48]	@ (800402c <uart3_poll_and_process_lines+0xa0>)
 8003ffa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8003ffe:	54ca      	strb	r2, [r1, r3]
 8004000:	e004      	b.n	800400c <uart3_poll_and_process_lines+0x80>
      } else {
        // 라인 과길이 → 드롭 & 리셋
        uart3_line_len = 0;
 8004002:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <uart3_poll_and_process_lines+0x9c>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e000      	b.n	800400c <uart3_poll_and_process_lines+0x80>
    if (c == '\r') continue;
 800400a:	bf00      	nop
  while (uart3_rb_pop(&b)) {
 800400c:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fe2f 	bl	8003c74 <uart3_rb_pop>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1bb      	bne.n	8003f94 <uart3_poll_and_process_lines+0x8>
      }
    }
  }
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	3758      	adds	r7, #88	@ 0x58
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	240012b8 	.word	0x240012b8
 800402c:	24000eb8 	.word	0x24000eb8

08004030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	e060      	b.n	80040fe <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	49bf      	ldr	r1, [pc, #764]	@ (8004340 <main+0x310>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2098      	movs	r0, #152	@ 0x98
 8004046:	fb00 f303 	mul.w	r3, r0, r3
 800404a:	440b      	add	r3, r1
 800404c:	3308      	adds	r3, #8
 800404e:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 8004050:	4abb      	ldr	r2, [pc, #748]	@ (8004340 <main+0x310>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2198      	movs	r1, #152	@ 0x98
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	330c      	adds	r3, #12
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 8004062:	4ab7      	ldr	r2, [pc, #732]	@ (8004340 <main+0x310>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2198      	movs	r1, #152	@ 0x98
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	4413      	add	r3, r2
 800406e:	3314      	adds	r3, #20
 8004070:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8004074:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 8004076:	4ab2      	ldr	r2, [pc, #712]	@ (8004340 <main+0x310>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2198      	movs	r1, #152	@ 0x98
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	4413      	add	r3, r2
 8004082:	3318      	adds	r3, #24
 8004084:	4aaf      	ldr	r2, [pc, #700]	@ (8004344 <main+0x314>)
 8004086:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 8004088:	4aad      	ldr	r2, [pc, #692]	@ (8004340 <main+0x310>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2198      	movs	r1, #152	@ 0x98
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	331c      	adds	r3, #28
 8004096:	4aac      	ldr	r2, [pc, #688]	@ (8004348 <main+0x318>)
 8004098:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 800409a:	2200      	movs	r2, #0
 800409c:	2108      	movs	r1, #8
 800409e:	2008      	movs	r0, #8
 80040a0:	f00c f883 	bl	80101aa <xQueueGenericCreate>
 80040a4:	4602      	mov	r2, r0
 80040a6:	49a6      	ldr	r1, [pc, #664]	@ (8004340 <main+0x310>)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2098      	movs	r0, #152	@ 0x98
 80040ac:	fb00 f303 	mul.w	r3, r0, r3
 80040b0:	440b      	add	r3, r1
 80040b2:	3310      	adds	r3, #16
 80040b4:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 80040b6:	4aa2      	ldr	r2, [pc, #648]	@ (8004340 <main+0x310>)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2198      	movs	r1, #152	@ 0x98
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	3310      	adds	r3, #16
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <main+0xa4>
			sta = 3;
 80040ca:	4ba0      	ldr	r3, [pc, #640]	@ (800434c <main+0x31c>)
 80040cc:	2203      	movs	r2, #3
 80040ce:	601a      	str	r2, [r3, #0]
			Error_Handler();
 80040d0:	f001 fa86 	bl	80055e0 <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 80040d4:	4a9a      	ldr	r2, [pc, #616]	@ (8004340 <main+0x310>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2198      	movs	r1, #152	@ 0x98
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	3394      	adds	r3, #148	@ 0x94
 80040e2:	4a9b      	ldr	r2, [pc, #620]	@ (8004350 <main+0x320>)
 80040e4:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 80040e6:	4a96      	ldr	r2, [pc, #600]	@ (8004340 <main+0x310>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3301      	adds	r3, #1
 80040ec:	2198      	movs	r1, #152	@ 0x98
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	4a97      	ldr	r2, [pc, #604]	@ (8004354 <main+0x324>)
 80040f6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3301      	adds	r3, #1
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b02      	cmp	r3, #2
 8004102:	dd9b      	ble.n	800403c <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 8004104:	4b94      	ldr	r3, [pc, #592]	@ (8004358 <main+0x328>)
 8004106:	2201      	movs	r2, #1
 8004108:	2103      	movs	r1, #3
 800410a:	4894      	ldr	r0, [pc, #592]	@ (800435c <main+0x32c>)
 800410c:	f00e fdbc 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 8004110:	4b93      	ldr	r3, [pc, #588]	@ (8004360 <main+0x330>)
 8004112:	2201      	movs	r2, #1
 8004114:	2103      	movs	r1, #3
 8004116:	4893      	ldr	r0, [pc, #588]	@ (8004364 <main+0x334>)
 8004118:	f00e fdb6 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 800411c:	4b92      	ldr	r3, [pc, #584]	@ (8004368 <main+0x338>)
 800411e:	2201      	movs	r2, #1
 8004120:	2103      	movs	r1, #3
 8004122:	4892      	ldr	r0, [pc, #584]	@ (800436c <main+0x33c>)
 8004124:	f00e fdb0 	bl	8012c88 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 8004128:	4b85      	ldr	r3, [pc, #532]	@ (8004340 <main+0x310>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 800412e:	4b84      	ldr	r3, [pc, #528]	@ (8004340 <main+0x310>)
 8004130:	2200      	movs	r2, #0
 8004132:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 8004134:	4b82      	ldr	r3, [pc, #520]	@ (8004340 <main+0x310>)
 8004136:	4a8e      	ldr	r2, [pc, #568]	@ (8004370 <main+0x340>)
 8004138:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 800413c:	4b80      	ldr	r3, [pc, #512]	@ (8004340 <main+0x310>)
 800413e:	4a8c      	ldr	r2, [pc, #560]	@ (8004370 <main+0x340>)
 8004140:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 8004144:	4b7e      	ldr	r3, [pc, #504]	@ (8004340 <main+0x310>)
 8004146:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800414a:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi;
 800414e:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8004374 <main+0x344>
 8004152:	eef1 7a67 	vneg.f32	s15, s15
 8004156:	4b7a      	ldr	r3, [pc, #488]	@ (8004340 <main+0x310>)
 8004158:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi;
 800415c:	4a86      	ldr	r2, [pc, #536]	@ (8004378 <main+0x348>)
 800415e:	4b78      	ldr	r3, [pc, #480]	@ (8004340 <main+0x310>)
 8004160:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 8004164:	4b76      	ldr	r3, [pc, #472]	@ (8004340 <main+0x310>)
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 800416e:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8004374 <main+0x344>
 8004172:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800437c <main+0x34c>
 8004176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800417a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8004380 <main+0x350>
 800417e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004182:	4b6f      	ldr	r3, [pc, #444]	@ (8004340 <main+0x310>)
 8004184:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 8004188:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004374 <main+0x344>
 800418c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800437c <main+0x34c>
 8004190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004194:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8004384 <main+0x354>
 8004198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800419c:	4b68      	ldr	r3, [pc, #416]	@ (8004340 <main+0x310>)
 800419e:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 80041a2:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8004374 <main+0x344>
 80041a6:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800437c <main+0x34c>
 80041aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ae:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8004388 <main+0x358>
 80041b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b6:	4b62      	ldr	r3, [pc, #392]	@ (8004340 <main+0x310>)
 80041b8:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 80041bc:	4b60      	ldr	r3, [pc, #384]	@ (8004340 <main+0x310>)
 80041be:	4a73      	ldr	r2, [pc, #460]	@ (800438c <main+0x35c>)
 80041c0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	strawberry_robot.l2 = 0.46;
 80041c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004340 <main+0x310>)
 80041c6:	4a72      	ldr	r2, [pc, #456]	@ (8004390 <main+0x360>)
 80041c8:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	strawberry_robot.l3 = 0.46;
 80041cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004340 <main+0x310>)
 80041ce:	4a70      	ldr	r2, [pc, #448]	@ (8004390 <main+0x360>)
 80041d0:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

	// link mass setting
	strawberry_robot.m1 = 3.93949;
 80041d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004340 <main+0x310>)
 80041d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004394 <main+0x364>)
 80041d8:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
	strawberry_robot.m2 = 0;
 80041dc:	4b58      	ldr	r3, [pc, #352]	@ (8004340 <main+0x310>)
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
	strawberry_robot.m3 = 0;
 80041e6:	4b56      	ldr	r3, [pc, #344]	@ (8004340 <main+0x310>)
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300

	// link CoM position setting
	strawberry_robot.d2 = 0;
 80041f0:	4b53      	ldr	r3, [pc, #332]	@ (8004340 <main+0x310>)
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	strawberry_robot.d3 = 0;
 80041fa:	4b51      	ldr	r3, [pc, #324]	@ (8004340 <main+0x310>)
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

	// link inertia setting
	strawberry_robot.J1 = 0;
 8004204:	4b4e      	ldr	r3, [pc, #312]	@ (8004340 <main+0x310>)
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	strawberry_robot.J2 = 0;
 800420e:	4b4c      	ldr	r3, [pc, #304]	@ (8004340 <main+0x310>)
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	strawberry_robot.J3 = 0;
 8004218:	4b49      	ldr	r3, [pc, #292]	@ (8004340 <main+0x310>)
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 8004222:	4b5d      	ldr	r3, [pc, #372]	@ (8004398 <main+0x368>)
 8004224:	2201      	movs	r2, #1
 8004226:	2103      	movs	r1, #3
 8004228:	485c      	ldr	r0, [pc, #368]	@ (800439c <main+0x36c>)
 800422a:	f00e fd2d 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 800422e:	4b5c      	ldr	r3, [pc, #368]	@ (80043a0 <main+0x370>)
 8004230:	2201      	movs	r2, #1
 8004232:	2103      	movs	r1, #3
 8004234:	485b      	ldr	r0, [pc, #364]	@ (80043a4 <main+0x374>)
 8004236:	f00e fd27 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 800423a:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <main+0x378>)
 800423c:	2201      	movs	r2, #1
 800423e:	2103      	movs	r1, #3
 8004240:	485a      	ldr	r0, [pc, #360]	@ (80043ac <main+0x37c>)
 8004242:	f00e fd21 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 8004246:	4b5a      	ldr	r3, [pc, #360]	@ (80043b0 <main+0x380>)
 8004248:	2201      	movs	r2, #1
 800424a:	2103      	movs	r1, #3
 800424c:	4859      	ldr	r0, [pc, #356]	@ (80043b4 <main+0x384>)
 800424e:	f00e fd1b 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 8004252:	4b59      	ldr	r3, [pc, #356]	@ (80043b8 <main+0x388>)
 8004254:	2201      	movs	r2, #1
 8004256:	2103      	movs	r1, #3
 8004258:	4858      	ldr	r0, [pc, #352]	@ (80043bc <main+0x38c>)
 800425a:	f00e fd15 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 800425e:	4b58      	ldr	r3, [pc, #352]	@ (80043c0 <main+0x390>)
 8004260:	2201      	movs	r2, #1
 8004262:	2103      	movs	r1, #3
 8004264:	4857      	ldr	r0, [pc, #348]	@ (80043c4 <main+0x394>)
 8004266:	f00e fd0f 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 800426a:	4b57      	ldr	r3, [pc, #348]	@ (80043c8 <main+0x398>)
 800426c:	2201      	movs	r2, #1
 800426e:	2103      	movs	r1, #3
 8004270:	4856      	ldr	r0, [pc, #344]	@ (80043cc <main+0x39c>)
 8004272:	f00e fd09 	bl	8012c88 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 8004276:	4b56      	ldr	r3, [pc, #344]	@ (80043d0 <main+0x3a0>)
 8004278:	2201      	movs	r2, #1
 800427a:	2103      	movs	r1, #3
 800427c:	4855      	ldr	r0, [pc, #340]	@ (80043d4 <main+0x3a4>)
 800427e:	f00e fd03 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 8004282:	4b55      	ldr	r3, [pc, #340]	@ (80043d8 <main+0x3a8>)
 8004284:	2201      	movs	r2, #1
 8004286:	2103      	movs	r1, #3
 8004288:	4854      	ldr	r0, [pc, #336]	@ (80043dc <main+0x3ac>)
 800428a:	f00e fcfd 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 800428e:	4b54      	ldr	r3, [pc, #336]	@ (80043e0 <main+0x3b0>)
 8004290:	2201      	movs	r2, #1
 8004292:	2103      	movs	r1, #3
 8004294:	4853      	ldr	r0, [pc, #332]	@ (80043e4 <main+0x3b4>)
 8004296:	f00e fcf7 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 800429a:	4b53      	ldr	r3, [pc, #332]	@ (80043e8 <main+0x3b8>)
 800429c:	2201      	movs	r2, #1
 800429e:	2103      	movs	r1, #3
 80042a0:	4852      	ldr	r0, [pc, #328]	@ (80043ec <main+0x3bc>)
 80042a2:	f00e fcf1 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 80042a6:	4b52      	ldr	r3, [pc, #328]	@ (80043f0 <main+0x3c0>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	2103      	movs	r1, #3
 80042ac:	4851      	ldr	r0, [pc, #324]	@ (80043f4 <main+0x3c4>)
 80042ae:	f00e fceb 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 80042b2:	4b51      	ldr	r3, [pc, #324]	@ (80043f8 <main+0x3c8>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	2103      	movs	r1, #3
 80042b8:	4850      	ldr	r0, [pc, #320]	@ (80043fc <main+0x3cc>)
 80042ba:	f00e fce5 	bl	8012c88 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 80042be:	4b50      	ldr	r3, [pc, #320]	@ (8004400 <main+0x3d0>)
 80042c0:	2203      	movs	r2, #3
 80042c2:	2103      	movs	r1, #3
 80042c4:	484f      	ldr	r0, [pc, #316]	@ (8004404 <main+0x3d4>)
 80042c6:	f00e fcdf 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 80042ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004408 <main+0x3d8>)
 80042cc:	2203      	movs	r2, #3
 80042ce:	2103      	movs	r1, #3
 80042d0:	484e      	ldr	r0, [pc, #312]	@ (800440c <main+0x3dc>)
 80042d2:	f00e fcd9 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 80042d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004410 <main+0x3e0>)
 80042d8:	2203      	movs	r2, #3
 80042da:	2103      	movs	r1, #3
 80042dc:	484d      	ldr	r0, [pc, #308]	@ (8004414 <main+0x3e4>)
 80042de:	f00e fcd3 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 80042e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004418 <main+0x3e8>)
 80042e4:	2203      	movs	r2, #3
 80042e6:	2103      	movs	r1, #3
 80042e8:	484c      	ldr	r0, [pc, #304]	@ (800441c <main+0x3ec>)
 80042ea:	f00e fccd 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 80042ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004420 <main+0x3f0>)
 80042f0:	2203      	movs	r2, #3
 80042f2:	2103      	movs	r1, #3
 80042f4:	484b      	ldr	r0, [pc, #300]	@ (8004424 <main+0x3f4>)
 80042f6:	f00e fcc7 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 80042fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004428 <main+0x3f8>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	2103      	movs	r1, #3
 8004300:	484a      	ldr	r0, [pc, #296]	@ (800442c <main+0x3fc>)
 8004302:	f00e fcc1 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 8004306:	4b4a      	ldr	r3, [pc, #296]	@ (8004430 <main+0x400>)
 8004308:	2201      	movs	r2, #1
 800430a:	2103      	movs	r1, #3
 800430c:	4849      	ldr	r0, [pc, #292]	@ (8004434 <main+0x404>)
 800430e:	f00e fcbb 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 8004312:	4b49      	ldr	r3, [pc, #292]	@ (8004438 <main+0x408>)
 8004314:	2203      	movs	r2, #3
 8004316:	2103      	movs	r1, #3
 8004318:	4848      	ldr	r0, [pc, #288]	@ (800443c <main+0x40c>)
 800431a:	f00e fcb5 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 800431e:	4b48      	ldr	r3, [pc, #288]	@ (8004440 <main+0x410>)
 8004320:	2203      	movs	r2, #3
 8004322:	2103      	movs	r1, #3
 8004324:	4847      	ldr	r0, [pc, #284]	@ (8004444 <main+0x414>)
 8004326:	f00e fcaf 	bl	8012c88 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 800432a:	4b47      	ldr	r3, [pc, #284]	@ (8004448 <main+0x418>)
 800432c:	2201      	movs	r2, #1
 800432e:	2103      	movs	r1, #3
 8004330:	4846      	ldr	r0, [pc, #280]	@ (800444c <main+0x41c>)
 8004332:	f00e fca9 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 8004336:	4b46      	ldr	r3, [pc, #280]	@ (8004450 <main+0x420>)
 8004338:	2201      	movs	r2, #1
 800433a:	2103      	movs	r1, #3
 800433c:	e08a      	b.n	8004454 <main+0x424>
 800433e:	bf00      	nop
 8004340:	2400230c 	.word	0x2400230c
 8004344:	41200000 	.word	0x41200000
 8004348:	3dfbe76d 	.word	0x3dfbe76d
 800434c:	24002978 	.word	0x24002978
 8004350:	40e66666 	.word	0x40e66666
 8004354:	c0e66666 	.word	0xc0e66666
 8004358:	24000000 	.word	0x24000000
 800435c:	240022e8 	.word	0x240022e8
 8004360:	2400000c 	.word	0x2400000c
 8004364:	240022f0 	.word	0x240022f0
 8004368:	24000018 	.word	0x24000018
 800436c:	240022f8 	.word	0x240022f8
 8004370:	bf800000 	.word	0xbf800000
 8004374:	40490fd8 	.word	0x40490fd8
 8004378:	40490fd8 	.word	0x40490fd8
 800437c:	43340000 	.word	0x43340000
 8004380:	42aa0000 	.word	0x42aa0000
 8004384:	c3200000 	.word	0xc3200000
 8004388:	c2200000 	.word	0xc2200000
 800438c:	3e343958 	.word	0x3e343958
 8004390:	3eeb851f 	.word	0x3eeb851f
 8004394:	407c209b 	.word	0x407c209b
 8004398:	240024f0 	.word	0x240024f0
 800439c:	240024e8 	.word	0x240024e8
 80043a0:	2400251c 	.word	0x2400251c
 80043a4:	24002514 	.word	0x24002514
 80043a8:	24002530 	.word	0x24002530
 80043ac:	24002528 	.word	0x24002528
 80043b0:	24002544 	.word	0x24002544
 80043b4:	2400253c 	.word	0x2400253c
 80043b8:	24002558 	.word	0x24002558
 80043bc:	24002550 	.word	0x24002550
 80043c0:	2400256c 	.word	0x2400256c
 80043c4:	24002564 	.word	0x24002564
 80043c8:	24002580 	.word	0x24002580
 80043cc:	24002578 	.word	0x24002578
 80043d0:	24002594 	.word	0x24002594
 80043d4:	2400258c 	.word	0x2400258c
 80043d8:	240025a8 	.word	0x240025a8
 80043dc:	240025a0 	.word	0x240025a0
 80043e0:	240025bc 	.word	0x240025bc
 80043e4:	240025b4 	.word	0x240025b4
 80043e8:	240025d0 	.word	0x240025d0
 80043ec:	240025c8 	.word	0x240025c8
 80043f0:	240025e4 	.word	0x240025e4
 80043f4:	240025dc 	.word	0x240025dc
 80043f8:	240025f8 	.word	0x240025f8
 80043fc:	240025f0 	.word	0x240025f0
 8004400:	24002638 	.word	0x24002638
 8004404:	24002630 	.word	0x24002630
 8004408:	24002664 	.word	0x24002664
 800440c:	2400265c 	.word	0x2400265c
 8004410:	24002690 	.word	0x24002690
 8004414:	24002688 	.word	0x24002688
 8004418:	240026bc 	.word	0x240026bc
 800441c:	240026b4 	.word	0x240026b4
 8004420:	240026e8 	.word	0x240026e8
 8004424:	240026e0 	.word	0x240026e0
 8004428:	24002714 	.word	0x24002714
 800442c:	2400270c 	.word	0x2400270c
 8004430:	24002728 	.word	0x24002728
 8004434:	24002720 	.word	0x24002720
 8004438:	2400273c 	.word	0x2400273c
 800443c:	24002734 	.word	0x24002734
 8004440:	24002768 	.word	0x24002768
 8004444:	24002760 	.word	0x24002760
 8004448:	240027d0 	.word	0x240027d0
 800444c:	240027c8 	.word	0x240027c8
 8004450:	240027e4 	.word	0x240027e4
 8004454:	4853      	ldr	r0, [pc, #332]	@ (80045a4 <main+0x574>)
 8004456:	f00e fc17 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 800445a:	4b53      	ldr	r3, [pc, #332]	@ (80045a8 <main+0x578>)
 800445c:	2201      	movs	r2, #1
 800445e:	2103      	movs	r1, #3
 8004460:	4852      	ldr	r0, [pc, #328]	@ (80045ac <main+0x57c>)
 8004462:	f00e fc11 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 8004466:	4b52      	ldr	r3, [pc, #328]	@ (80045b0 <main+0x580>)
 8004468:	2201      	movs	r2, #1
 800446a:	2103      	movs	r1, #3
 800446c:	4851      	ldr	r0, [pc, #324]	@ (80045b4 <main+0x584>)
 800446e:	f00e fc0b 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 8004472:	4b51      	ldr	r3, [pc, #324]	@ (80045b8 <main+0x588>)
 8004474:	2201      	movs	r2, #1
 8004476:	2103      	movs	r1, #3
 8004478:	4850      	ldr	r0, [pc, #320]	@ (80045bc <main+0x58c>)
 800447a:	f00e fc05 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 800447e:	4b50      	ldr	r3, [pc, #320]	@ (80045c0 <main+0x590>)
 8004480:	2201      	movs	r2, #1
 8004482:	2103      	movs	r1, #3
 8004484:	484f      	ldr	r0, [pc, #316]	@ (80045c4 <main+0x594>)
 8004486:	f00e fbff 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 800448a:	4b4f      	ldr	r3, [pc, #316]	@ (80045c8 <main+0x598>)
 800448c:	2201      	movs	r2, #1
 800448e:	2103      	movs	r1, #3
 8004490:	484e      	ldr	r0, [pc, #312]	@ (80045cc <main+0x59c>)
 8004492:	f00e fbf9 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 8004496:	4b4e      	ldr	r3, [pc, #312]	@ (80045d0 <main+0x5a0>)
 8004498:	2201      	movs	r2, #1
 800449a:	2103      	movs	r1, #3
 800449c:	484d      	ldr	r0, [pc, #308]	@ (80045d4 <main+0x5a4>)
 800449e:	f00e fbf3 	bl	8012c88 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 80044a2:	4b4d      	ldr	r3, [pc, #308]	@ (80045d8 <main+0x5a8>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	2103      	movs	r1, #3
 80044a8:	484c      	ldr	r0, [pc, #304]	@ (80045dc <main+0x5ac>)
 80044aa:	f00e fbed 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 80044ae:	4b4c      	ldr	r3, [pc, #304]	@ (80045e0 <main+0x5b0>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	2103      	movs	r1, #3
 80044b4:	484b      	ldr	r0, [pc, #300]	@ (80045e4 <main+0x5b4>)
 80044b6:	f00e fbe7 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 80044ba:	4b4b      	ldr	r3, [pc, #300]	@ (80045e8 <main+0x5b8>)
 80044bc:	2201      	movs	r2, #1
 80044be:	2103      	movs	r1, #3
 80044c0:	484a      	ldr	r0, [pc, #296]	@ (80045ec <main+0x5bc>)
 80044c2:	f00e fbe1 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 80044c6:	4b4a      	ldr	r3, [pc, #296]	@ (80045f0 <main+0x5c0>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	2103      	movs	r1, #3
 80044cc:	4849      	ldr	r0, [pc, #292]	@ (80045f4 <main+0x5c4>)
 80044ce:	f00e fbdb 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 80044d2:	4b49      	ldr	r3, [pc, #292]	@ (80045f8 <main+0x5c8>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	2103      	movs	r1, #3
 80044d8:	4848      	ldr	r0, [pc, #288]	@ (80045fc <main+0x5cc>)
 80044da:	f00e fbd5 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 80044de:	4b48      	ldr	r3, [pc, #288]	@ (8004600 <main+0x5d0>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	2103      	movs	r1, #3
 80044e4:	4847      	ldr	r0, [pc, #284]	@ (8004604 <main+0x5d4>)
 80044e6:	f00e fbcf 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 80044ea:	4b47      	ldr	r3, [pc, #284]	@ (8004608 <main+0x5d8>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	2103      	movs	r1, #3
 80044f0:	4846      	ldr	r0, [pc, #280]	@ (800460c <main+0x5dc>)
 80044f2:	f00e fbc9 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 80044f6:	4b46      	ldr	r3, [pc, #280]	@ (8004610 <main+0x5e0>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	2103      	movs	r1, #3
 80044fc:	4845      	ldr	r0, [pc, #276]	@ (8004614 <main+0x5e4>)
 80044fe:	f00e fbc3 	bl	8012c88 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 8004502:	4b45      	ldr	r3, [pc, #276]	@ (8004618 <main+0x5e8>)
 8004504:	2201      	movs	r2, #1
 8004506:	2103      	movs	r1, #3
 8004508:	4844      	ldr	r0, [pc, #272]	@ (800461c <main+0x5ec>)
 800450a:	f00e fbbd 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 800450e:	4b44      	ldr	r3, [pc, #272]	@ (8004620 <main+0x5f0>)
 8004510:	2201      	movs	r2, #1
 8004512:	2103      	movs	r1, #3
 8004514:	4843      	ldr	r0, [pc, #268]	@ (8004624 <main+0x5f4>)
 8004516:	f00e fbb7 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 800451a:	4b43      	ldr	r3, [pc, #268]	@ (8004628 <main+0x5f8>)
 800451c:	2201      	movs	r2, #1
 800451e:	2103      	movs	r1, #3
 8004520:	4842      	ldr	r0, [pc, #264]	@ (800462c <main+0x5fc>)
 8004522:	f00e fbb1 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 8004526:	4b42      	ldr	r3, [pc, #264]	@ (8004630 <main+0x600>)
 8004528:	2201      	movs	r2, #1
 800452a:	2103      	movs	r1, #3
 800452c:	4841      	ldr	r0, [pc, #260]	@ (8004634 <main+0x604>)
 800452e:	f00e fbab 	bl	8012c88 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 8004532:	4b41      	ldr	r3, [pc, #260]	@ (8004638 <main+0x608>)
 8004534:	2201      	movs	r2, #1
 8004536:	2103      	movs	r1, #3
 8004538:	4840      	ldr	r0, [pc, #256]	@ (800463c <main+0x60c>)
 800453a:	f00e fba5 	bl	8012c88 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800453e:	f001 f811 	bl	8005564 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004542:	f001 fde3 	bl	800610c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004546:	f000 f887 	bl	8004658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800454a:	f000 fa1d 	bl	8004988 <MX_GPIO_Init>
  MX_DMA_Init();
 800454e:	f000 f9f3 	bl	8004938 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8004552:	f000 f8fb 	bl	800474c <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8004556:	f000 f9a1 	bl	800489c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // UART3 1바이트 인터럽트 수신 시작
  uart3_rx_circ_start();
 800455a:	f7fc fc3f 	bl	8000ddc <uart3_rx_circ_start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800455e:	f00b fb79 	bl	800fc54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8004562:	4a37      	ldr	r2, [pc, #220]	@ (8004640 <main+0x610>)
 8004564:	2100      	movs	r1, #0
 8004566:	4837      	ldr	r0, [pc, #220]	@ (8004644 <main+0x614>)
 8004568:	f00b fbbe 	bl	800fce8 <osThreadNew>
 800456c:	4603      	mov	r3, r0
 800456e:	4a36      	ldr	r2, [pc, #216]	@ (8004648 <main+0x618>)
 8004570:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 8004572:	4a36      	ldr	r2, [pc, #216]	@ (800464c <main+0x61c>)
 8004574:	2100      	movs	r1, #0
 8004576:	4836      	ldr	r0, [pc, #216]	@ (8004650 <main+0x620>)
 8004578:	f00b fbb6 	bl	800fce8 <osThreadNew>
 800457c:	4603      	mov	r3, r0
 800457e:	4a35      	ldr	r2, [pc, #212]	@ (8004654 <main+0x624>)
 8004580:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8004582:	2000      	movs	r0, #0
 8004584:	f001 fcc0 	bl	8005f08 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004588:	2001      	movs	r0, #1
 800458a:	f001 fcbd 	bl	8005f08 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800458e:	2002      	movs	r0, #2
 8004590:	f001 fcba 	bl	8005f08 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8004594:	2101      	movs	r1, #1
 8004596:	2000      	movs	r0, #0
 8004598:	f001 fd2c 	bl	8005ff4 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 800459c:	f00b fb7e 	bl	800fc9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <main+0x570>
 80045a4:	240027dc 	.word	0x240027dc
 80045a8:	240027f8 	.word	0x240027f8
 80045ac:	240027f0 	.word	0x240027f0
 80045b0:	2400280c 	.word	0x2400280c
 80045b4:	24002804 	.word	0x24002804
 80045b8:	24002820 	.word	0x24002820
 80045bc:	24002818 	.word	0x24002818
 80045c0:	24002834 	.word	0x24002834
 80045c4:	2400282c 	.word	0x2400282c
 80045c8:	24002848 	.word	0x24002848
 80045cc:	24002840 	.word	0x24002840
 80045d0:	2400285c 	.word	0x2400285c
 80045d4:	24002854 	.word	0x24002854
 80045d8:	2400287c 	.word	0x2400287c
 80045dc:	24002874 	.word	0x24002874
 80045e0:	24002890 	.word	0x24002890
 80045e4:	24002888 	.word	0x24002888
 80045e8:	240028a4 	.word	0x240028a4
 80045ec:	2400289c 	.word	0x2400289c
 80045f0:	240028b8 	.word	0x240028b8
 80045f4:	240028b0 	.word	0x240028b0
 80045f8:	240028cc 	.word	0x240028cc
 80045fc:	240028c4 	.word	0x240028c4
 8004600:	240028e0 	.word	0x240028e0
 8004604:	240028d8 	.word	0x240028d8
 8004608:	240028f4 	.word	0x240028f4
 800460c:	240028ec 	.word	0x240028ec
 8004610:	24002908 	.word	0x24002908
 8004614:	24002900 	.word	0x24002900
 8004618:	2400291c 	.word	0x2400291c
 800461c:	24002914 	.word	0x24002914
 8004620:	24002930 	.word	0x24002930
 8004624:	24002928 	.word	0x24002928
 8004628:	24002944 	.word	0x24002944
 800462c:	2400293c 	.word	0x2400293c
 8004630:	24002958 	.word	0x24002958
 8004634:	24002950 	.word	0x24002950
 8004638:	2400296c 	.word	0x2400296c
 800463c:	24002964 	.word	0x24002964
 8004640:	080171d0 	.word	0x080171d0
 8004644:	08004ad5 	.word	0x08004ad5
 8004648:	240004ac 	.word	0x240004ac
 800464c:	080171f4 	.word	0x080171f4
 8004650:	08005271 	.word	0x08005271
 8004654:	240004b0 	.word	0x240004b0

08004658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b09c      	sub	sp, #112	@ 0x70
 800465c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800465e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004662:	224c      	movs	r2, #76	@ 0x4c
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f00f fe7d 	bl	8014366 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	2220      	movs	r2, #32
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f00f fe77 	bl	8014366 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004678:	2002      	movs	r0, #2
 800467a:	f006 f919 	bl	800a8b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800467e:	2300      	movs	r3, #0
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4b30      	ldr	r3, [pc, #192]	@ (8004744 <SystemClock_Config+0xec>)
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	4a2f      	ldr	r2, [pc, #188]	@ (8004744 <SystemClock_Config+0xec>)
 8004688:	f023 0301 	bic.w	r3, r3, #1
 800468c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800468e:	4b2d      	ldr	r3, [pc, #180]	@ (8004744 <SystemClock_Config+0xec>)
 8004690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	603b      	str	r3, [r7, #0]
 8004698:	4b2b      	ldr	r3, [pc, #172]	@ (8004748 <SystemClock_Config+0xf0>)
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	4a2a      	ldr	r2, [pc, #168]	@ (8004748 <SystemClock_Config+0xf0>)
 800469e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046a2:	6193      	str	r3, [r2, #24]
 80046a4:	4b28      	ldr	r3, [pc, #160]	@ (8004748 <SystemClock_Config+0xf0>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80046b0:	bf00      	nop
 80046b2:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <SystemClock_Config+0xf0>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046be:	d1f8      	bne.n	80046b2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046ca:	2302      	movs	r3, #2
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046ce:	2302      	movs	r3, #2
 80046d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80046d2:	2301      	movs	r3, #1
 80046d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 80046d6:	2364      	movs	r3, #100	@ 0x64
 80046d8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80046da:	2302      	movs	r3, #2
 80046dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 80046de:	2310      	movs	r3, #16
 80046e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80046e2:	2302      	movs	r3, #2
 80046e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80046e6:	230c      	movs	r3, #12
 80046e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80046ea:	2300      	movs	r3, #0
 80046ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046f6:	4618      	mov	r0, r3
 80046f8:	f006 f914 	bl	800a924 <HAL_RCC_OscConfig>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004702:	f000 ff6d 	bl	80055e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004706:	233f      	movs	r3, #63	@ 0x3f
 8004708:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800470a:	2303      	movs	r3, #3
 800470c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004712:	2308      	movs	r3, #8
 8004714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004716:	2340      	movs	r3, #64	@ 0x40
 8004718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800471a:	2340      	movs	r3, #64	@ 0x40
 800471c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800471e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004722:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004724:	2340      	movs	r3, #64	@ 0x40
 8004726:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	2102      	movs	r1, #2
 800472c:	4618      	mov	r0, r3
 800472e:	f006 fd53 	bl	800b1d8 <HAL_RCC_ClockConfig>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8004738:	f000 ff52 	bl	80055e0 <Error_Handler>
  }
}
 800473c:	bf00      	nop
 800473e:	3770      	adds	r7, #112	@ 0x70
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58000400 	.word	0x58000400
 8004748:	58024800 	.word	0x58024800

0800474c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004752:	4b4e      	ldr	r3, [pc, #312]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004754:	4a4e      	ldr	r2, [pc, #312]	@ (8004890 <MX_FDCAN1_Init+0x144>)
 8004756:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004758:	4b4c      	ldr	r3, [pc, #304]	@ (800488c <MX_FDCAN1_Init+0x140>)
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800475e:	4b4b      	ldr	r3, [pc, #300]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004760:	2200      	movs	r2, #0
 8004762:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8004764:	4b49      	ldr	r3, [pc, #292]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004766:	2201      	movs	r2, #1
 8004768:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800476a:	4b48      	ldr	r3, [pc, #288]	@ (800488c <MX_FDCAN1_Init+0x140>)
 800476c:	2200      	movs	r2, #0
 800476e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004770:	4b46      	ldr	r3, [pc, #280]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004772:	2200      	movs	r2, #0
 8004774:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8004776:	4b45      	ldr	r3, [pc, #276]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004778:	2201      	movs	r2, #1
 800477a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 800477c:	4b43      	ldr	r3, [pc, #268]	@ (800488c <MX_FDCAN1_Init+0x140>)
 800477e:	2208      	movs	r2, #8
 8004780:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8004782:	4b42      	ldr	r3, [pc, #264]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004784:	221f      	movs	r2, #31
 8004786:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8004788:	4b40      	ldr	r3, [pc, #256]	@ (800488c <MX_FDCAN1_Init+0x140>)
 800478a:	2208      	movs	r2, #8
 800478c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800478e:	4b3f      	ldr	r3, [pc, #252]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004790:	2201      	movs	r2, #1
 8004792:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8004794:	4b3d      	ldr	r3, [pc, #244]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004796:	2204      	movs	r2, #4
 8004798:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800479a:	4b3c      	ldr	r3, [pc, #240]	@ (800488c <MX_FDCAN1_Init+0x140>)
 800479c:	2205      	movs	r2, #5
 800479e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80047a0:	4b3a      	ldr	r3, [pc, #232]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047a2:	2204      	movs	r2, #4
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80047a6:	4b39      	ldr	r3, [pc, #228]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80047ac:	4b37      	ldr	r3, [pc, #220]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80047b2:	4b36      	ldr	r3, [pc, #216]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80047b8:	4b34      	ldr	r3, [pc, #208]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047ba:	2240      	movs	r2, #64	@ 0x40
 80047bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80047be:	4b33      	ldr	r3, [pc, #204]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047c0:	2204      	movs	r2, #4
 80047c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80047c4:	4b31      	ldr	r3, [pc, #196]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80047ca:	4b30      	ldr	r3, [pc, #192]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047cc:	2204      	movs	r2, #4
 80047ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 80047d0:	4b2e      	ldr	r3, [pc, #184]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047d2:	2204      	movs	r2, #4
 80047d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80047d6:	4b2d      	ldr	r3, [pc, #180]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047d8:	2204      	movs	r2, #4
 80047da:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 80047dc:	4b2b      	ldr	r3, [pc, #172]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047de:	2210      	movs	r2, #16
 80047e0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 80047e2:	4b2a      	ldr	r3, [pc, #168]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047e4:	2210      	movs	r2, #16
 80047e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80047e8:	4b28      	ldr	r3, [pc, #160]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047ea:	2220      	movs	r2, #32
 80047ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80047ee:	4b27      	ldr	r3, [pc, #156]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047f6:	2204      	movs	r2, #4
 80047f8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80047fa:	4824      	ldr	r0, [pc, #144]	@ (800488c <MX_FDCAN1_Init+0x140>)
 80047fc:	f004 fd0a 	bl	8009214 <HAL_FDCAN_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8004806:	f000 feeb 	bl	80055e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 800480a:	2200      	movs	r2, #0
 800480c:	2101      	movs	r1, #1
 800480e:	481f      	ldr	r0, [pc, #124]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004810:	f005 f8e2 	bl	80099d8 <HAL_FDCAN_ActivateNotification>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 800481a:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <MX_FDCAN1_Init+0x148>)
 800481c:	2203      	movs	r2, #3
 800481e:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8004820:	f000 fede 	bl	80055e0 <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8004824:	4819      	ldr	r0, [pc, #100]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004826:	f004 fed3 	bl	80095d0 <HAL_FDCAN_Start>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8004830:	4b18      	ldr	r3, [pc, #96]	@ (8004894 <MX_FDCAN1_Init+0x148>)
 8004832:	2203      	movs	r2, #3
 8004834:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8004836:	f000 fed3 	bl	80055e0 <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	e01d      	b.n	800487c <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004840:	4812      	ldr	r0, [pc, #72]	@ (800488c <MX_FDCAN1_Init+0x140>)
 8004842:	f005 f8b7 	bl	80099b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d014      	beq.n	8004876 <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 800484c:	4a12      	ldr	r2, [pc, #72]	@ (8004898 <MX_FDCAN1_Init+0x14c>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2198      	movs	r1, #152	@ 0x98
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	4413      	add	r3, r2
 8004858:	3308      	adds	r3, #8
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd f82c 	bl	80018bc <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 8004864:	4a0c      	ldr	r2, [pc, #48]	@ (8004898 <MX_FDCAN1_Init+0x14c>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2198      	movs	r1, #152	@ 0x98
 800486a:	fb01 f303 	mul.w	r3, r1, r3
 800486e:	4413      	add	r3, r2
 8004870:	330c      	adds	r3, #12
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3301      	adds	r3, #1
 800487a:	607b      	str	r3, [r7, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b02      	cmp	r3, #2
 8004880:	ddde      	ble.n	8004840 <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	24000288 	.word	0x24000288
 8004890:	4000a000 	.word	0x4000a000
 8004894:	24002978 	.word	0x24002978
 8004898:	2400230c 	.word	0x2400230c

0800489c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80048a0:	4b23      	ldr	r3, [pc, #140]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048a2:	4a24      	ldr	r2, [pc, #144]	@ (8004934 <MX_USART3_UART_Init+0x98>)
 80048a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 80048a6:	4b22      	ldr	r3, [pc, #136]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048a8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80048ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048ae:	4b20      	ldr	r3, [pc, #128]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048bc:	2200      	movs	r2, #0
 80048be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048c2:	220c      	movs	r2, #12
 80048c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048cc:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048d2:	4b17      	ldr	r3, [pc, #92]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048d8:	4b15      	ldr	r3, [pc, #84]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048da:	2200      	movs	r2, #0
 80048dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048de:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048e4:	4812      	ldr	r0, [pc, #72]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048e6:	f009 f939 	bl	800db5c <HAL_UART_Init>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80048f0:	f000 fe76 	bl	80055e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 80048f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80048f8:	480d      	ldr	r0, [pc, #52]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 80048fa:	f00b f89d 	bl	800fa38 <HAL_UARTEx_SetTxFifoThreshold>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8004904:	f000 fe6c 	bl	80055e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8004908:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800490c:	4808      	ldr	r0, [pc, #32]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 800490e:	f00b f8d1 	bl	800fab4 <HAL_UARTEx_SetRxFifoThreshold>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_USART3_UART_Init+0x80>
  {
    Error_Handler();
 8004918:	f000 fe62 	bl	80055e0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 800491c:	4804      	ldr	r0, [pc, #16]	@ (8004930 <MX_USART3_UART_Init+0x94>)
 800491e:	f00b f850 	bl	800f9c2 <HAL_UARTEx_EnableFifoMode>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <MX_USART3_UART_Init+0x90>
  {
    Error_Handler();
 8004928:	f000 fe5a 	bl	80055e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800492c:	bf00      	nop
 800492e:	bd80      	pop	{r7, pc}
 8004930:	24000328 	.word	0x24000328
 8004934:	40004800 	.word	0x40004800

08004938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800493e:	4b11      	ldr	r3, [pc, #68]	@ (8004984 <MX_DMA_Init+0x4c>)
 8004940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004944:	4a0f      	ldr	r2, [pc, #60]	@ (8004984 <MX_DMA_Init+0x4c>)
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <MX_DMA_Init+0x4c>)
 8004950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	607b      	str	r3, [r7, #4]
 800495a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 8, 0);
 800495c:	2200      	movs	r2, #0
 800495e:	2108      	movs	r1, #8
 8004960:	200b      	movs	r0, #11
 8004962:	f001 fd17 	bl	8006394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004966:	200b      	movs	r0, #11
 8004968:	f001 fd2e 	bl	80063c8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 8, 0);
 800496c:	2200      	movs	r2, #0
 800496e:	2108      	movs	r1, #8
 8004970:	200c      	movs	r0, #12
 8004972:	f001 fd0f 	bl	8006394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004976:	200c      	movs	r0, #12
 8004978:	f001 fd26 	bl	80063c8 <HAL_NVIC_EnableIRQ>

}
 800497c:	bf00      	nop
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	58024400 	.word	0x58024400

08004988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08c      	sub	sp, #48	@ 0x30
 800498c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498e:	f107 031c 	add.w	r3, r7, #28
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800499e:	4b49      	ldr	r3, [pc, #292]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049a4:	4a47      	ldr	r2, [pc, #284]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049a6:	f043 0304 	orr.w	r3, r3, #4
 80049aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049ae:	4b45      	ldr	r3, [pc, #276]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049bc:	4b41      	ldr	r3, [pc, #260]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049c2:	4a40      	ldr	r2, [pc, #256]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049cc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049da:	4b3a      	ldr	r3, [pc, #232]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049e0:	4a38      	ldr	r2, [pc, #224]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049e2:	f043 0302 	orr.w	r3, r3, #2
 80049e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049ea:	4b36      	ldr	r3, [pc, #216]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049f8:	4b32      	ldr	r3, [pc, #200]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 80049fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049fe:	4a31      	ldr	r2, [pc, #196]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 8004a00:	f043 0308 	orr.w	r3, r3, #8
 8004a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a08:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 8004a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 8004a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a26:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 8004a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a34:	4b23      	ldr	r3, [pc, #140]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 8004a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a3a:	4a22      	ldr	r2, [pc, #136]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 8004a3c:	f043 0310 	orr.w	r3, r3, #16
 8004a40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a44:	4b1f      	ldr	r3, [pc, #124]	@ (8004ac4 <MX_GPIO_Init+0x13c>)
 8004a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	607b      	str	r3, [r7, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8004a52:	2200      	movs	r2, #0
 8004a54:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004a58:	481b      	ldr	r0, [pc, #108]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 8004a5a:	f005 fef5 	bl	800a848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2102      	movs	r1, #2
 8004a62:	481a      	ldr	r0, [pc, #104]	@ (8004acc <MX_GPIO_Init+0x144>)
 8004a64:	f005 fef0 	bl	800a848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a76:	f107 031c 	add.w	r3, r7, #28
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4814      	ldr	r0, [pc, #80]	@ (8004ad0 <MX_GPIO_Init+0x148>)
 8004a7e:	f005 fd33 	bl	800a4e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8004a82:	f244 0301 	movw	r3, #16385	@ 0x4001
 8004a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a90:	2300      	movs	r3, #0
 8004a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a94:	f107 031c 	add.w	r3, r7, #28
 8004a98:	4619      	mov	r1, r3
 8004a9a:	480b      	ldr	r0, [pc, #44]	@ (8004ac8 <MX_GPIO_Init+0x140>)
 8004a9c:	f005 fd24 	bl	800a4e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aac:	2300      	movs	r3, #0
 8004aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004ab0:	f107 031c 	add.w	r3, r7, #28
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4805      	ldr	r0, [pc, #20]	@ (8004acc <MX_GPIO_Init+0x144>)
 8004ab8:	f005 fd16 	bl	800a4e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004abc:	bf00      	nop
 8004abe:	3730      	adds	r7, #48	@ 0x30
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	58020400 	.word	0x58020400
 8004acc:	58021000 	.word	0x58021000
 8004ad0:	58020800 	.word	0x58020800

08004ad4 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	ed2d 8b02 	vpush	{d8}
 8004ada:	b090      	sub	sp, #64	@ 0x40
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 8004ae0:	f00c fb0c 	bl	80110fc <xTaskGetTickCount>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8004ae8:	2301      	movs	r3, #1
 8004aea:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004aec:	f107 0314 	add.w	r3, r7, #20
 8004af0:	69b9      	ldr	r1, [r7, #24]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f00c f966 	bl	8010dc4 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 8004af8:	4b85      	ldr	r3, [pc, #532]	@ (8004d10 <ControlTask+0x23c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a85      	ldr	r2, [pc, #532]	@ (8004d14 <ControlTask+0x240>)
 8004afe:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	005a      	lsls	r2, r3, #1
 8004b04:	4b82      	ldr	r3, [pc, #520]	@ (8004d10 <ControlTask+0x23c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4413      	add	r3, r2
 8004b0a:	4a81      	ldr	r2, [pc, #516]	@ (8004d10 <ControlTask+0x23c>)
 8004b0c:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4881      	ldr	r0, [pc, #516]	@ (8004d18 <ControlTask+0x244>)
 8004b12:	f005 feb2 	bl	800a87a <HAL_GPIO_TogglePin>

		// 6) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 8004b16:	4b81      	ldr	r3, [pc, #516]	@ (8004d1c <ControlTask+0x248>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	f040 80ef 	bne.w	8004cfe <ControlTask+0x22a>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 8004b20:	4b7e      	ldr	r3, [pc, #504]	@ (8004d1c <ControlTask+0x248>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d152      	bne.n	8004bce <ControlTask+0xfa>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b2c:	e048      	b.n	8004bc0 <ControlTask+0xec>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004b2e:	2180      	movs	r1, #128	@ 0x80
 8004b30:	4879      	ldr	r0, [pc, #484]	@ (8004d18 <ControlTask+0x244>)
 8004b32:	f005 fea2 	bl	800a87a <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8004b36:	4a79      	ldr	r2, [pc, #484]	@ (8004d1c <ControlTask+0x248>)
 8004b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3a:	2198      	movs	r1, #152	@ 0x98
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	338c      	adds	r3, #140	@ 0x8c
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004b4a:	4875      	ldr	r0, [pc, #468]	@ (8004d20 <ControlTask+0x24c>)
 8004b4c:	f004 ff32 	bl	80099b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d016      	beq.n	8004b84 <ControlTask+0xb0>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004b56:	4a71      	ldr	r2, [pc, #452]	@ (8004d1c <ControlTask+0x248>)
 8004b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5a:	2198      	movs	r1, #152	@ 0x98
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	3308      	adds	r3, #8
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	496c      	ldr	r1, [pc, #432]	@ (8004d1c <ControlTask+0x248>)
 8004b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b6c:	2098      	movs	r0, #152	@ 0x98
 8004b6e:	fb00 f303 	mul.w	r3, r0, r3
 8004b72:	440b      	add	r3, r1
 8004b74:	338c      	adds	r3, #140	@ 0x8c
 8004b76:	edd3 7a00 	vldr	s15, [r3]
 8004b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7fc ff18 	bl	80019b4 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004b84:	4866      	ldr	r0, [pc, #408]	@ (8004d20 <ControlTask+0x24c>)
 8004b86:	f004 ff15 	bl	80099b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d014      	beq.n	8004bba <ControlTask+0xe6>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8004b90:	4a62      	ldr	r2, [pc, #392]	@ (8004d1c <ControlTask+0x248>)
 8004b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b94:	2198      	movs	r1, #152	@ 0x98
 8004b96:	fb01 f303 	mul.w	r3, r1, r3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fc fe8a 	bl	80018bc <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 8004ba8:	4a5c      	ldr	r2, [pc, #368]	@ (8004d1c <ControlTask+0x248>)
 8004baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bac:	2198      	movs	r1, #152	@ 0x98
 8004bae:	fb01 f303 	mul.w	r3, r1, r3
 8004bb2:	4413      	add	r3, r2
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	ddb3      	ble.n	8004b2e <ControlTask+0x5a>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 8004bc6:	4b55      	ldr	r3, [pc, #340]	@ (8004d1c <ControlTask+0x248>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e78e      	b.n	8004aec <ControlTask+0x18>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004bce:	2300      	movs	r3, #0
 8004bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd2:	e00e      	b.n	8004bf2 <ControlTask+0x11e>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd6:	2298      	movs	r2, #152	@ 0x98
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	3308      	adds	r3, #8
 8004bde:	4a4f      	ldr	r2, [pc, #316]	@ (8004d1c <ControlTask+0x248>)
 8004be0:	4413      	add	r3, r2
 8004be2:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8004d24 <ControlTask+0x250>
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fd f808 	bl	8001bfc <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bee:	3301      	adds	r3, #1
 8004bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	dded      	ble.n	8004bd4 <ControlTask+0x100>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 8004bf8:	4848      	ldr	r0, [pc, #288]	@ (8004d1c <ControlTask+0x248>)
 8004bfa:	f7fe fc7b 	bl	80034f4 <robot_state_update>
				// 2. 여기서 PC로부터 들어온 task space PID Gain값과 Target Trajectory를 반영
				uart3_rx_poll_from_dma();
 8004bfe:	f7fc f9ad 	bl	8000f5c <uart3_rx_poll_from_dma>
				uart3_poll_and_process_lines();
 8004c02:	f7ff f9c3 	bl	8003f8c <uart3_poll_and_process_lines>
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 8004c06:	4b48      	ldr	r3, [pc, #288]	@ (8004d28 <ControlTask+0x254>)
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	4b48      	ldr	r3, [pc, #288]	@ (8004d2c <ControlTask+0x258>)
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	4b48      	ldr	r3, [pc, #288]	@ (8004d30 <ControlTask+0x25c>)
 8004c10:	4a48      	ldr	r2, [pc, #288]	@ (8004d34 <ControlTask+0x260>)
 8004c12:	4949      	ldr	r1, [pc, #292]	@ (8004d38 <ControlTask+0x264>)
 8004c14:	4841      	ldr	r0, [pc, #260]	@ (8004d1c <ControlTask+0x248>)
 8004c16:	f7fe fe65 	bl	80038e4 <robot_pos_pid_gain_setting>
				// 3. 로봇의 Control Input 계산
				target_posXYZ.pData[0] = homing_posXYZ.pData[0] + 0.2f * sinf(2.0f * pi * 5.0f * ((float32_t)ctrl_time_ms) / 1000.0f);
 8004c1a:	4b48      	ldr	r3, [pc, #288]	@ (8004d3c <ControlTask+0x268>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	ed93 8a00 	vldr	s16, [r3]
 8004c22:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8004d40 <ControlTask+0x26c>
 8004c26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004c2a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004c2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004c32:	4b37      	ldr	r3, [pc, #220]	@ (8004d10 <ControlTask+0x23c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c42:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8004d44 <ControlTask+0x270>
 8004c46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8004c4e:	f012 f837 	bl	8016cc0 <sinf>
 8004c52:	eef0 7a40 	vmov.f32	s15, s0
 8004c56:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8004d48 <ControlTask+0x274>
 8004c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d4c <ControlTask+0x278>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004c66:	edc3 7a00 	vstr	s15, [r3]
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 8004c6a:	4b38      	ldr	r3, [pc, #224]	@ (8004d4c <ControlTask+0x278>)
 8004c6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004c70:	482a      	ldr	r0, [pc, #168]	@ (8004d1c <ControlTask+0x248>)
 8004c72:	f7fe fe8d 	bl	8003990 <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004c76:	2300      	movs	r3, #0
 8004c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c7a:	e03c      	b.n	8004cf6 <ControlTask+0x222>
				{
					// 4. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 8004c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c7e:	2298      	movs	r2, #152	@ 0x98
 8004c80:	fb02 f303 	mul.w	r3, r2, r3
 8004c84:	3308      	adds	r3, #8
 8004c86:	4a25      	ldr	r2, [pc, #148]	@ (8004d1c <ControlTask+0x248>)
 8004c88:	1899      	adds	r1, r3, r2
 8004c8a:	4b24      	ldr	r3, [pc, #144]	@ (8004d1c <ControlTask+0x248>)
 8004c8c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8004c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	ed93 7a00 	vldr	s14, [r3]
 8004c9a:	4a20      	ldr	r2, [pc, #128]	@ (8004d1c <ControlTask+0x248>)
 8004c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9e:	3374      	adds	r3, #116	@ 0x74
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	edd3 7a00 	vldr	s15, [r3]
 8004ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cac:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb0:	4608      	mov	r0, r1
 8004cb2:	f7fd f857 	bl	8001d64 <motor_feedforward_torque>
					// 5. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004cb6:	481a      	ldr	r0, [pc, #104]	@ (8004d20 <ControlTask+0x24c>)
 8004cb8:	f004 fe7c 	bl	80099b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <ControlTask+0x21c>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004cc2:	4a16      	ldr	r2, [pc, #88]	@ (8004d1c <ControlTask+0x248>)
 8004cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc6:	2198      	movs	r1, #152	@ 0x98
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	3308      	adds	r3, #8
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	4911      	ldr	r1, [pc, #68]	@ (8004d1c <ControlTask+0x248>)
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	2098      	movs	r0, #152	@ 0x98
 8004cda:	fb00 f303 	mul.w	r3, r0, r3
 8004cde:	440b      	add	r3, r1
 8004ce0:	338c      	adds	r3, #140	@ 0x8c
 8004ce2:	edd3 7a00 	vldr	s15, [r3]
 8004ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cea:	4610      	mov	r0, r2
 8004cec:	f7fc fe62 	bl	80019b4 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	ddbf      	ble.n	8004c7c <ControlTask+0x1a8>
 8004cfc:	e6f6      	b.n	8004aec <ControlTask+0x18>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 8004cfe:	4b07      	ldr	r3, [pc, #28]	@ (8004d1c <ControlTask+0x248>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	f47f aef2 	bne.w	8004aec <ControlTask+0x18>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d0c:	e1ed      	b.n	80050ea <ControlTask+0x616>
 8004d0e:	bf00      	nop
 8004d10:	240022c4 	.word	0x240022c4
 8004d14:	240022c8 	.word	0x240022c8
 8004d18:	58020400 	.word	0x58020400
 8004d1c:	2400230c 	.word	0x2400230c
 8004d20:	24000288 	.word	0x24000288
 8004d24:	428c0000 	.word	0x428c0000
 8004d28:	24000048 	.word	0x24000048
 8004d2c:	24002300 	.word	0x24002300
 8004d30:	24000030 	.word	0x24000030
 8004d34:	2400003c 	.word	0x2400003c
 8004d38:	24000024 	.word	0x24000024
 8004d3c:	240022f0 	.word	0x240022f0
 8004d40:	40490fd8 	.word	0x40490fd8
 8004d44:	447a0000 	.word	0x447a0000
 8004d48:	3e4ccccd 	.word	0x3e4ccccd
 8004d4c:	240022f8 	.word	0x240022f8
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004d50:	2180      	movs	r1, #128	@ 0x80
 8004d52:	48bf      	ldr	r0, [pc, #764]	@ (8005050 <ControlTask+0x57c>)
 8004d54:	f005 fd91 	bl	800a87a <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 8004d58:	4bbe      	ldr	r3, [pc, #760]	@ (8005054 <ControlTask+0x580>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8004d5e:	4bbe      	ldr	r3, [pc, #760]	@ (8005058 <ControlTask+0x584>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004d64:	48bd      	ldr	r0, [pc, #756]	@ (800505c <ControlTask+0x588>)
 8004d66:	f004 fe25 	bl	80099b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <ControlTask+0x2b4>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8004d70:	4abb      	ldr	r2, [pc, #748]	@ (8005060 <ControlTask+0x58c>)
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	2198      	movs	r1, #152	@ 0x98
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc fd06 	bl	8001794 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 8004d88:	bf00      	nop
 8004d8a:	4ab5      	ldr	r2, [pc, #724]	@ (8005060 <ControlTask+0x58c>)
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8e:	2198      	movs	r1, #152	@ 0x98
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	3310      	adds	r3, #16
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f107 010c 	add.w	r1, r7, #12
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f00b fc01 	bl	80105a8 <xQueueReceive>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d0ee      	beq.n	8004d8a <ControlTask+0x2b6>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004dac:	48ab      	ldr	r0, [pc, #684]	@ (800505c <ControlTask+0x588>)
 8004dae:	f004 fe01 	bl	80099b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d014      	beq.n	8004de2 <ControlTask+0x30e>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 8004db8:	4aa9      	ldr	r2, [pc, #676]	@ (8005060 <ControlTask+0x58c>)
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	2198      	movs	r1, #152	@ 0x98
 8004dbe:	fb01 f303 	mul.w	r3, r1, r3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fc fd2c 	bl	8001828 <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 8004dd0:	4aa3      	ldr	r2, [pc, #652]	@ (8005060 <ControlTask+0x58c>)
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	2198      	movs	r1, #152	@ 0x98
 8004dd6:	fb01 f303 	mul.w	r3, r1, r3
 8004dda:	4413      	add	r3, r2
 8004ddc:	330c      	adds	r3, #12
 8004dde:	2201      	movs	r2, #1
 8004de0:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8004de2:	4a9f      	ldr	r2, [pc, #636]	@ (8005060 <ControlTask+0x58c>)
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	2198      	movs	r1, #152	@ 0x98
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	338c      	adds	r3, #140	@ 0x8c
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 8004df6:	4a9a      	ldr	r2, [pc, #616]	@ (8005060 <ControlTask+0x58c>)
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	2198      	movs	r1, #152	@ 0x98
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	4413      	add	r3, r2
 8004e02:	3390      	adds	r3, #144	@ 0x90
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 8004e0a:	4a95      	ldr	r2, [pc, #596]	@ (8005060 <ControlTask+0x58c>)
 8004e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0e:	3301      	adds	r3, #1
 8004e10:	2198      	movs	r1, #152	@ 0x98
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	4413      	add	r3, r2
 8004e18:	3304      	adds	r3, #4
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 8004e20:	4a8f      	ldr	r2, [pc, #572]	@ (8005060 <ControlTask+0x58c>)
 8004e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e24:	2198      	movs	r1, #152	@ 0x98
 8004e26:	fb01 f303 	mul.w	r3, r1, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	332c      	adds	r3, #44	@ 0x2c
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 8004e34:	4a8a      	ldr	r2, [pc, #552]	@ (8005060 <ControlTask+0x58c>)
 8004e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e38:	2198      	movs	r1, #152	@ 0x98
 8004e3a:	fb01 f303 	mul.w	r3, r1, r3
 8004e3e:	4413      	add	r3, r2
 8004e40:	332c      	adds	r3, #44	@ 0x2c
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4986      	ldr	r1, [pc, #536]	@ (8005060 <ControlTask+0x58c>)
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	2098      	movs	r0, #152	@ 0x98
 8004e4a:	fb00 f303 	mul.w	r3, r0, r3
 8004e4e:	440b      	add	r3, r1
 8004e50:	3330      	adds	r3, #48	@ 0x30
 8004e52:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 8004e54:	4a82      	ldr	r2, [pc, #520]	@ (8005060 <ControlTask+0x58c>)
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e58:	2198      	movs	r1, #152	@ 0x98
 8004e5a:	fb01 f303 	mul.w	r3, r1, r3
 8004e5e:	4413      	add	r3, r2
 8004e60:	3334      	adds	r3, #52	@ 0x34
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 8004e68:	4a7d      	ldr	r2, [pc, #500]	@ (8005060 <ControlTask+0x58c>)
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	2198      	movs	r1, #152	@ 0x98
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	4413      	add	r3, r2
 8004e74:	3334      	adds	r3, #52	@ 0x34
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4979      	ldr	r1, [pc, #484]	@ (8005060 <ControlTask+0x58c>)
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	2098      	movs	r0, #152	@ 0x98
 8004e7e:	fb00 f303 	mul.w	r3, r0, r3
 8004e82:	440b      	add	r3, r1
 8004e84:	3338      	adds	r3, #56	@ 0x38
 8004e86:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 8004e88:	4a76      	ldr	r2, [pc, #472]	@ (8005064 <ControlTask+0x590>)
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4973      	ldr	r1, [pc, #460]	@ (8005060 <ControlTask+0x58c>)
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	2098      	movs	r0, #152	@ 0x98
 8004e98:	fb00 f303 	mul.w	r3, r0, r3
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3324      	adds	r3, #36	@ 0x24
 8004ea0:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 8004ea2:	4a71      	ldr	r2, [pc, #452]	@ (8005068 <ControlTask+0x594>)
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	496c      	ldr	r1, [pc, #432]	@ (8005060 <ControlTask+0x58c>)
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	2098      	movs	r0, #152	@ 0x98
 8004eb2:	fb00 f303 	mul.w	r3, r0, r3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3328      	adds	r3, #40	@ 0x28
 8004eba:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 8004ebc:	4a68      	ldr	r2, [pc, #416]	@ (8005060 <ControlTask+0x58c>)
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	2198      	movs	r1, #152	@ 0x98
 8004ec2:	fb01 f303 	mul.w	r3, r1, r3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	3324      	adds	r3, #36	@ 0x24
 8004eca:	ed93 7a00 	vldr	s14, [r3]
 8004ece:	4a64      	ldr	r2, [pc, #400]	@ (8005060 <ControlTask+0x58c>)
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	2198      	movs	r1, #152	@ 0x98
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	332c      	adds	r3, #44	@ 0x2c
 8004edc:	edd3 7a00 	vldr	s15, [r3]
 8004ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8005060 <ControlTask+0x58c>)
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	2198      	movs	r1, #152	@ 0x98
 8004eea:	fb01 f303 	mul.w	r3, r1, r3
 8004eee:	4413      	add	r3, r2
 8004ef0:	3344      	adds	r3, #68	@ 0x44
 8004ef2:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 8004ef6:	4a5a      	ldr	r2, [pc, #360]	@ (8005060 <ControlTask+0x58c>)
 8004ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efa:	2198      	movs	r1, #152	@ 0x98
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	4413      	add	r3, r2
 8004f02:	3344      	adds	r3, #68	@ 0x44
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4956      	ldr	r1, [pc, #344]	@ (8005060 <ControlTask+0x58c>)
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	2098      	movs	r0, #152	@ 0x98
 8004f0c:	fb00 f303 	mul.w	r3, r0, r3
 8004f10:	440b      	add	r3, r1
 8004f12:	3348      	adds	r3, #72	@ 0x48
 8004f14:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 8004f16:	4a52      	ldr	r2, [pc, #328]	@ (8005060 <ControlTask+0x58c>)
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	2198      	movs	r1, #152	@ 0x98
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	334c      	adds	r3, #76	@ 0x4c
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 8004f2a:	4a4d      	ldr	r2, [pc, #308]	@ (8005060 <ControlTask+0x58c>)
 8004f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2e:	2198      	movs	r1, #152	@ 0x98
 8004f30:	fb01 f303 	mul.w	r3, r1, r3
 8004f34:	4413      	add	r3, r2
 8004f36:	3350      	adds	r3, #80	@ 0x50
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term_old = strawberry_robot.motors[i].pos_I_term;
 8004f3e:	4a48      	ldr	r2, [pc, #288]	@ (8005060 <ControlTask+0x58c>)
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	2198      	movs	r1, #152	@ 0x98
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	4413      	add	r3, r2
 8004f4a:	3350      	adds	r3, #80	@ 0x50
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4944      	ldr	r1, [pc, #272]	@ (8005060 <ControlTask+0x58c>)
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	2098      	movs	r0, #152	@ 0x98
 8004f54:	fb00 f303 	mul.w	r3, r0, r3
 8004f58:	440b      	add	r3, r1
 8004f5a:	3354      	adds	r3, #84	@ 0x54
 8004f5c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8004f5e:	4a40      	ldr	r2, [pc, #256]	@ (8005060 <ControlTask+0x58c>)
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	2198      	movs	r1, #152	@ 0x98
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	4413      	add	r3, r2
 8004f6a:	3358      	adds	r3, #88	@ 0x58
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term_old = strawberry_robot.motors[i].pos_D_term;
 8004f72:	4a3b      	ldr	r2, [pc, #236]	@ (8005060 <ControlTask+0x58c>)
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	2198      	movs	r1, #152	@ 0x98
 8004f78:	fb01 f303 	mul.w	r3, r1, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3358      	adds	r3, #88	@ 0x58
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4937      	ldr	r1, [pc, #220]	@ (8005060 <ControlTask+0x58c>)
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	2098      	movs	r0, #152	@ 0x98
 8004f88:	fb00 f303 	mul.w	r3, r0, r3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	335c      	adds	r3, #92	@ 0x5c
 8004f90:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 8004f92:	4a33      	ldr	r2, [pc, #204]	@ (8005060 <ControlTask+0x58c>)
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f96:	2198      	movs	r1, #152	@ 0x98
 8004f98:	fb01 f303 	mul.w	r3, r1, r3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	3328      	adds	r3, #40	@ 0x28
 8004fa0:	ed93 7a00 	vldr	s14, [r3]
 8004fa4:	4a2e      	ldr	r2, [pc, #184]	@ (8005060 <ControlTask+0x58c>)
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	2198      	movs	r1, #152	@ 0x98
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	3334      	adds	r3, #52	@ 0x34
 8004fb2:	edd3 7a00 	vldr	s15, [r3]
 8004fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fba:	4a29      	ldr	r2, [pc, #164]	@ (8005060 <ControlTask+0x58c>)
 8004fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbe:	2198      	movs	r1, #152	@ 0x98
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3360      	adds	r3, #96	@ 0x60
 8004fc8:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 8004fcc:	4a24      	ldr	r2, [pc, #144]	@ (8005060 <ControlTask+0x58c>)
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	2198      	movs	r1, #152	@ 0x98
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3360      	adds	r3, #96	@ 0x60
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4920      	ldr	r1, [pc, #128]	@ (8005060 <ControlTask+0x58c>)
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	2098      	movs	r0, #152	@ 0x98
 8004fe2:	fb00 f303 	mul.w	r3, r0, r3
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3364      	adds	r3, #100	@ 0x64
 8004fea:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 8004fec:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <ControlTask+0x58c>)
 8004fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff0:	2198      	movs	r1, #152	@ 0x98
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3368      	adds	r3, #104	@ 0x68
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 8005000:	4a17      	ldr	r2, [pc, #92]	@ (8005060 <ControlTask+0x58c>)
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	2198      	movs	r1, #152	@ 0x98
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	4413      	add	r3, r2
 800500c:	336c      	adds	r3, #108	@ 0x6c
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 8005014:	4a12      	ldr	r2, [pc, #72]	@ (8005060 <ControlTask+0x58c>)
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	2198      	movs	r1, #152	@ 0x98
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	4413      	add	r3, r2
 8005020:	336c      	adds	r3, #108	@ 0x6c
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	490e      	ldr	r1, [pc, #56]	@ (8005060 <ControlTask+0x58c>)
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	2098      	movs	r0, #152	@ 0x98
 800502a:	fb00 f303 	mul.w	r3, r0, r3
 800502e:	440b      	add	r3, r1
 8005030:	3370      	adds	r3, #112	@ 0x70
 8005032:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 8005034:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <ControlTask+0x58c>)
 8005036:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 800503a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 8005046:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <ControlTask+0x58c>)
 8005048:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 800504c:	e00e      	b.n	800506c <ControlTask+0x598>
 800504e:	bf00      	nop
 8005050:	58020400 	.word	0x58020400
 8005054:	240022c4 	.word	0x240022c4
 8005058:	240022c8 	.word	0x240022c8
 800505c:	24000288 	.word	0x24000288
 8005060:	2400230c 	.word	0x2400230c
 8005064:	240022d0 	.word	0x240022d0
 8005068:	240022dc 	.word	0x240022dc
 800506c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 8005078:	4b7b      	ldr	r3, [pc, #492]	@ (8005268 <ControlTask+0x794>)
 800507a:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 800508a:	4b77      	ldr	r3, [pc, #476]	@ (8005268 <ControlTask+0x794>)
 800508c:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8005090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 800509c:	4b72      	ldr	r3, [pc, #456]	@ (8005268 <ControlTask+0x794>)
 800509e:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 80050ae:	4b6e      	ldr	r3, [pc, #440]	@ (8005268 <ControlTask+0x794>)
 80050b0:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 80050c0:	4b69      	ldr	r3, [pc, #420]	@ (8005268 <ControlTask+0x794>)
 80050c2:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	f04f 0200 	mov.w	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 80050d2:	4b65      	ldr	r3, [pc, #404]	@ (8005268 <ControlTask+0x794>)
 80050d4:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80050e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e6:	3301      	adds	r3, #1
 80050e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	f77f ae2f 	ble.w	8004d50 <ControlTask+0x27c>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 80050f2:	2300      	movs	r3, #0
 80050f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f6:	e060      	b.n	80051ba <ControlTask+0x6e6>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = target_posXYZ.pData[i];
 80050f8:	4b5c      	ldr	r3, [pc, #368]	@ (800526c <ControlTask+0x798>)
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	4b59      	ldr	r3, [pc, #356]	@ (8005268 <ControlTask+0x794>)
 8005104:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 8005112:	4b55      	ldr	r3, [pc, #340]	@ (8005268 <ControlTask+0x794>)
 8005114:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 8005124:	4b50      	ldr	r3, [pc, #320]	@ (8005268 <ControlTask+0x794>)
 8005126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 8005136:	4b4c      	ldr	r3, [pc, #304]	@ (8005268 <ControlTask+0x794>)
 8005138:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 800513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 8005148:	4b47      	ldr	r3, [pc, #284]	@ (8005268 <ControlTask+0x794>)
 800514a:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 800515a:	4b43      	ldr	r3, [pc, #268]	@ (8005268 <ControlTask+0x794>)
 800515c:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 800516c:	4b3e      	ldr	r3, [pc, #248]	@ (8005268 <ControlTask+0x794>)
 800516e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 800517e:	4b3a      	ldr	r3, [pc, #232]	@ (8005268 <ControlTask+0x794>)
 8005180:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 8005190:	4b35      	ldr	r3, [pc, #212]	@ (8005268 <ControlTask+0x794>)
 8005192:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 80051a2:	4b31      	ldr	r3, [pc, #196]	@ (8005268 <ControlTask+0x794>)
 80051a4:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 80051b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b6:	3301      	adds	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	2b02      	cmp	r3, #2
 80051be:	dd9b      	ble.n	80050f8 <ControlTask+0x624>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 80051c0:	2300      	movs	r3, #0
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	e00b      	b.n	80051de <ControlTask+0x70a>
 80051c6:	4b28      	ldr	r3, [pc, #160]	@ (8005268 <ControlTask+0x794>)
 80051c8:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	3301      	adds	r3, #1
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	ddf0      	ble.n	80051c6 <ControlTask+0x6f2>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 80051e4:	4b20      	ldr	r3, [pc, #128]	@ (8005268 <ControlTask+0x794>)
 80051e6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80051ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80051ee:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 80051f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005268 <ControlTask+0x794>)
 80051f2:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80051f6:	3310      	adds	r3, #16
 80051f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80051fc:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 80051fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005268 <ControlTask+0x794>)
 8005200:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8005204:	3320      	adds	r3, #32
 8005206:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800520a:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 800520c:	2300      	movs	r3, #0
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	e00b      	b.n	800522a <ControlTask+0x756>
 8005212:	4b15      	ldr	r3, [pc, #84]	@ (8005268 <ControlTask+0x794>)
 8005214:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	3301      	adds	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b08      	cmp	r3, #8
 800522e:	ddf0      	ble.n	8005212 <ControlTask+0x73e>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 8005230:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <ControlTask+0x794>)
 8005232:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8005236:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800523a:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 800523c:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <ControlTask+0x794>)
 800523e:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8005242:	3310      	adds	r3, #16
 8005244:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005248:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 800524a:	4b07      	ldr	r3, [pc, #28]	@ (8005268 <ControlTask+0x794>)
 800524c:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8005250:	3320      	adds	r3, #32
 8005252:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005256:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 8005258:	4803      	ldr	r0, [pc, #12]	@ (8005268 <ControlTask+0x794>)
 800525a:	f7fe f94b 	bl	80034f4 <robot_state_update>
				// 15. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 800525e:	4b02      	ldr	r3, [pc, #8]	@ (8005268 <ControlTask+0x794>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8005264:	e442      	b.n	8004aec <ControlTask+0x18>
 8005266:	bf00      	nop
 8005268:	2400230c 	.word	0x2400230c
 800526c:	240022f8 	.word	0x240022f8

08005270 <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	ed2d 8b10 	vpush	{d8-d15}
 8005276:	b0a9      	sub	sp, #164	@ 0xa4
 8005278:	af24      	add	r7, sp, #144	@ 0x90
 800527a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 800527c:	f00b ff3e 	bl	80110fc <xTaskGetTickCount>
 8005280:	4603      	mov	r3, r0
 8005282:	60bb      	str	r3, [r7, #8]

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(5);  // 5 ms
 8005284:	2302      	movs	r3, #2
 8005286:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 10 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8005288:	f107 0308 	add.w	r3, r7, #8
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	4618      	mov	r0, r3
 8005290:	f00b fd98 	bl	8010dc4 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	005a      	lsls	r2, r3, #1
 8005298:	4bad      	ldr	r3, [pc, #692]	@ (8005550 <DataLoggingTask+0x2e0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4413      	add	r3, r2
 800529e:	4aac      	ldr	r2, [pc, #688]	@ (8005550 <DataLoggingTask+0x2e0>)
 80052a0:	6013      	str	r3, [r2, #0]

			// 5) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 80052a2:	4bac      	ldr	r3, [pc, #688]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	f040 80a9 	bne.w	80053fe <DataLoggingTask+0x18e>
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 80052ac:	4baa      	ldr	r3, [pc, #680]	@ (8005558 <DataLoggingTask+0x2e8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052b8:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 800555c <DataLoggingTask+0x2ec>
 80052bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80052c0:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 80052c4:	4ba3      	ldr	r3, [pc, #652]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4aa2      	ldr	r2, [pc, #648]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052ca:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 80052cc:	49a1      	ldr	r1, [pc, #644]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052ce:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80052d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80052d6:	499f      	ldr	r1, [pc, #636]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052d8:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 80052dc:	489d      	ldr	r0, [pc, #628]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052de:	edd0 6a49 	vldr	s13, [r0, #292]	@ 0x124
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80052e2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80052e6:	489b      	ldr	r0, [pc, #620]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052e8:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 80052ec:	4c99      	ldr	r4, [pc, #612]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052ee:	edd4 5a6f 	vldr	s11, [r4, #444]	@ 0x1bc
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80052f2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 80052f6:	4c97      	ldr	r4, [pc, #604]	@ (8005554 <DataLoggingTask+0x2e4>)
 80052f8:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 80052fc:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005300:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005304:	4c93      	ldr	r4, [pc, #588]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005306:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 800530a:	3404      	adds	r4, #4
 800530c:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005310:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005314:	4c8f      	ldr	r4, [pc, #572]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005316:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 800531a:	3408      	adds	r4, #8
 800531c:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005320:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005324:	4c8b      	ldr	r4, [pc, #556]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005326:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 800532a:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800532e:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005332:	4c88      	ldr	r4, [pc, #544]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005334:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005338:	3404      	adds	r4, #4
 800533a:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800533e:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005342:	4c84      	ldr	r4, [pc, #528]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005344:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8005348:	3408      	adds	r4, #8
 800534a:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800534e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005352:	4c80      	ldr	r4, [pc, #512]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005354:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005358:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800535c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005360:	4c7c      	ldr	r4, [pc, #496]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005362:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005366:	3404      	adds	r4, #4
 8005368:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800536c:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8005370:	4c78      	ldr	r4, [pc, #480]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005372:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8005376:	3408      	adds	r4, #8
 8005378:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800537c:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8005380:	4c74      	ldr	r4, [pc, #464]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005382:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8005386:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800538a:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 800538e:	4c71      	ldr	r4, [pc, #452]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005390:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8005394:	3404      	adds	r4, #4
 8005396:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 800539a:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 800539e:	4c6d      	ldr	r4, [pc, #436]	@ (8005554 <DataLoggingTask+0x2e4>)
 80053a0:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 80053a4:	3408      	adds	r4, #8
 80053a6:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80053aa:	eeb7 eace 	vcvt.f64.f32	d14, s28
 80053ae:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 80053b2:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 80053b6:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 80053ba:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 80053be:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 80053c2:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 80053c6:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 80053ca:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 80053ce:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 80053d2:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 80053d6:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 80053da:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 80053de:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 80053e2:	9008      	str	r0, [sp, #32]
 80053e4:	ed8d 6b06 	vstr	d6, [sp, #24]
 80053e8:	9104      	str	r1, [sp, #16]
 80053ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80053ee:	9201      	str	r2, [sp, #4]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	ec53 2b1f 	vmov	r2, r3, d15
 80053f6:	485a      	ldr	r0, [pc, #360]	@ (8005560 <DataLoggingTask+0x2f0>)
 80053f8:	f00e ff46 	bl	8014288 <iprintf>
 80053fc:	e744      	b.n	8005288 <DataLoggingTask+0x18>
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 80053fe:	4b56      	ldr	r3, [pc, #344]	@ (8005558 <DataLoggingTask+0x2e8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800540a:	eddf 6a54 	vldr	s13, [pc, #336]	@ 800555c <DataLoggingTask+0x2ec>
 800540e:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005412:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 8005416:	4b4f      	ldr	r3, [pc, #316]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a4e      	ldr	r2, [pc, #312]	@ (8005554 <DataLoggingTask+0x2e4>)
 800541c:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 800541e:	494d      	ldr	r1, [pc, #308]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005420:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005424:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005428:	494a      	ldr	r1, [pc, #296]	@ (8005554 <DataLoggingTask+0x2e4>)
 800542a:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 800542e:	4849      	ldr	r0, [pc, #292]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005430:	edd0 6a49 	vldr	s13, [r0, #292]	@ 0x124
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005434:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8005438:	4846      	ldr	r0, [pc, #280]	@ (8005554 <DataLoggingTask+0x2e4>)
 800543a:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 800543e:	4c45      	ldr	r4, [pc, #276]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005440:	edd4 5a6f 	vldr	s11, [r4, #444]	@ 0x1bc
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005444:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005448:	4c42      	ldr	r4, [pc, #264]	@ (8005554 <DataLoggingTask+0x2e4>)
 800544a:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 800544e:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005452:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005456:	4c3f      	ldr	r4, [pc, #252]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005458:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 800545c:	3404      	adds	r4, #4
 800545e:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005462:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8005466:	4c3b      	ldr	r4, [pc, #236]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005468:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 800546c:	3408      	adds	r4, #8
 800546e:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005472:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005476:	4c37      	ldr	r4, [pc, #220]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005478:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 800547c:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005480:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005484:	4c33      	ldr	r4, [pc, #204]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005486:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 800548a:	3404      	adds	r4, #4
 800548c:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8005490:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8005494:	4c2f      	ldr	r4, [pc, #188]	@ (8005554 <DataLoggingTask+0x2e4>)
 8005496:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 800549a:	3408      	adds	r4, #8
 800549c:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80054a0:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 80054a4:	4c2b      	ldr	r4, [pc, #172]	@ (8005554 <DataLoggingTask+0x2e4>)
 80054a6:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 80054aa:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80054ae:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 80054b2:	4c28      	ldr	r4, [pc, #160]	@ (8005554 <DataLoggingTask+0x2e4>)
 80054b4:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 80054b8:	3404      	adds	r4, #4
 80054ba:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80054be:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 80054c2:	4c24      	ldr	r4, [pc, #144]	@ (8005554 <DataLoggingTask+0x2e4>)
 80054c4:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 80054c8:	3408      	adds	r4, #8
 80054ca:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80054ce:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 80054d2:	4c20      	ldr	r4, [pc, #128]	@ (8005554 <DataLoggingTask+0x2e4>)
 80054d4:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 80054d8:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80054dc:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 80054e0:	4c1c      	ldr	r4, [pc, #112]	@ (8005554 <DataLoggingTask+0x2e4>)
 80054e2:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 80054e6:	3404      	adds	r4, #4
 80054e8:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80054ec:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 80054f0:	4c18      	ldr	r4, [pc, #96]	@ (8005554 <DataLoggingTask+0x2e4>)
 80054f2:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 80054f6:	3408      	adds	r4, #8
 80054f8:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80054fc:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8005500:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8005504:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8005508:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 800550c:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 8005510:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 8005514:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 8005518:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 800551c:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 8005520:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 8005524:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 8005528:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 800552c:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 8005530:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8005534:	9008      	str	r0, [sp, #32]
 8005536:	ed8d 6b06 	vstr	d6, [sp, #24]
 800553a:	9104      	str	r1, [sp, #16]
 800553c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005540:	9201      	str	r2, [sp, #4]
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	ec53 2b1f 	vmov	r2, r3, d15
 8005548:	4805      	ldr	r0, [pc, #20]	@ (8005560 <DataLoggingTask+0x2f0>)
 800554a:	f00e fe9d 	bl	8014288 <iprintf>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 800554e:	e69b      	b.n	8005288 <DataLoggingTask+0x18>
 8005550:	240022cc 	.word	0x240022cc
 8005554:	2400230c 	.word	0x2400230c
 8005558:	240022c4 	.word	0x240022c4
 800555c:	447a0000 	.word	0x447a0000
 8005560:	08016ff8 	.word	0x08016ff8

08005564 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800556a:	463b      	mov	r3, r7
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	609a      	str	r2, [r3, #8]
 8005574:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005576:	f000 ff35 	bl	80063e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800557a:	2301      	movs	r3, #1
 800557c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800557e:	2300      	movs	r3, #0
 8005580:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005582:	2300      	movs	r3, #0
 8005584:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005586:	231f      	movs	r3, #31
 8005588:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800558a:	2387      	movs	r3, #135	@ 0x87
 800558c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800558e:	2300      	movs	r3, #0
 8005590:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005592:	2300      	movs	r3, #0
 8005594:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005596:	2301      	movs	r3, #1
 8005598:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800559a:	2301      	movs	r3, #1
 800559c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800559e:	2300      	movs	r3, #0
 80055a0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80055a6:	463b      	mov	r3, r7
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 ff53 	bl	8006454 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80055ae:	2004      	movs	r0, #4
 80055b0:	f000 ff30 	bl	8006414 <HAL_MPU_Enable>

}
 80055b4:	bf00      	nop
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a04      	ldr	r2, [pc, #16]	@ (80055dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80055ce:	f000 fdd9 	bl	8006184 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40001400 	.word	0x40001400

080055e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 80055e6:	4b52      	ldr	r3, [pc, #328]	@ (8005730 <Error_Handler+0x150>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d148      	bne.n	8005680 <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 80055ee:	2300      	movs	r3, #0
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	e03f      	b.n	8005674 <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 80055f4:	2180      	movs	r1, #128	@ 0x80
 80055f6:	484f      	ldr	r0, [pc, #316]	@ (8005734 <Error_Handler+0x154>)
 80055f8:	f005 f93f 	bl	800a87a <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 80055fc:	4a4c      	ldr	r2, [pc, #304]	@ (8005730 <Error_Handler+0x150>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2198      	movs	r1, #152	@ 0x98
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	4413      	add	r3, r2
 8005608:	338c      	adds	r3, #140	@ 0x8c
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8005610:	4849      	ldr	r0, [pc, #292]	@ (8005738 <Error_Handler+0x158>)
 8005612:	f004 f9cf 	bl	80099b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d016      	beq.n	800564a <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 800561c:	4a44      	ldr	r2, [pc, #272]	@ (8005730 <Error_Handler+0x150>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2198      	movs	r1, #152	@ 0x98
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	4413      	add	r3, r2
 8005628:	3308      	adds	r3, #8
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	b29a      	uxth	r2, r3
 800562e:	4940      	ldr	r1, [pc, #256]	@ (8005730 <Error_Handler+0x150>)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2098      	movs	r0, #152	@ 0x98
 8005634:	fb00 f303 	mul.w	r3, r0, r3
 8005638:	440b      	add	r3, r1
 800563a:	338c      	adds	r3, #140	@ 0x8c
 800563c:	edd3 7a00 	vldr	s15, [r3]
 8005640:	eeb0 0a67 	vmov.f32	s0, s15
 8005644:	4610      	mov	r0, r2
 8005646:	f7fc f9b5 	bl	80019b4 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 800564a:	483b      	ldr	r0, [pc, #236]	@ (8005738 <Error_Handler+0x158>)
 800564c:	f004 f9b2 	bl	80099b4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00b      	beq.n	800566e <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8005656:	4a36      	ldr	r2, [pc, #216]	@ (8005730 <Error_Handler+0x150>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2198      	movs	r1, #152	@ 0x98
 800565c:	fb01 f303 	mul.w	r3, r1, r3
 8005660:	4413      	add	r3, r2
 8005662:	3308      	adds	r3, #8
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	4618      	mov	r0, r3
 800566a:	f7fc f927 	bl	80018bc <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3301      	adds	r3, #1
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b02      	cmp	r3, #2
 8005678:	ddbc      	ble.n	80055f4 <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 800567a:	4b2d      	ldr	r3, [pc, #180]	@ (8005730 <Error_Handler+0x150>)
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 8005680:	4b2e      	ldr	r3, [pc, #184]	@ (800573c <Error_Handler+0x15c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3b01      	subs	r3, #1
 8005686:	2b04      	cmp	r3, #4
 8005688:	d82f      	bhi.n	80056ea <Error_Handler+0x10a>
 800568a:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <Error_Handler+0xb0>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056a5 	.word	0x080056a5
 8005694:	080056b3 	.word	0x080056b3
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056cf 	.word	0x080056cf
 80056a0:	080056dd 	.word	0x080056dd
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 80056a4:	4b25      	ldr	r3, [pc, #148]	@ (800573c <Error_Handler+0x15c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4619      	mov	r1, r3
 80056aa:	4825      	ldr	r0, [pc, #148]	@ (8005740 <Error_Handler+0x160>)
 80056ac:	f00e fdec 	bl	8014288 <iprintf>
 80056b0:	e01e      	b.n	80056f0 <Error_Handler+0x110>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 80056b2:	4b22      	ldr	r3, [pc, #136]	@ (800573c <Error_Handler+0x15c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4619      	mov	r1, r3
 80056b8:	4822      	ldr	r0, [pc, #136]	@ (8005744 <Error_Handler+0x164>)
 80056ba:	f00e fde5 	bl	8014288 <iprintf>
 80056be:	e017      	b.n	80056f0 <Error_Handler+0x110>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 80056c0:	4b1e      	ldr	r3, [pc, #120]	@ (800573c <Error_Handler+0x15c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4619      	mov	r1, r3
 80056c6:	4820      	ldr	r0, [pc, #128]	@ (8005748 <Error_Handler+0x168>)
 80056c8:	f00e fdde 	bl	8014288 <iprintf>
 80056cc:	e010      	b.n	80056f0 <Error_Handler+0x110>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 80056ce:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <Error_Handler+0x15c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	481d      	ldr	r0, [pc, #116]	@ (800574c <Error_Handler+0x16c>)
 80056d6:	f00e fdd7 	bl	8014288 <iprintf>
 80056da:	e009      	b.n	80056f0 <Error_Handler+0x110>
	  case 5: printf("Error Code: %d, This is Range of Motion Error.\r\n", sta); break;
 80056dc:	4b17      	ldr	r3, [pc, #92]	@ (800573c <Error_Handler+0x15c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4619      	mov	r1, r3
 80056e2:	481b      	ldr	r0, [pc, #108]	@ (8005750 <Error_Handler+0x170>)
 80056e4:	f00e fdd0 	bl	8014288 <iprintf>
 80056e8:	e002      	b.n	80056f0 <Error_Handler+0x110>
	  default: printf("Error Code: Unknown");
 80056ea:	481a      	ldr	r0, [pc, #104]	@ (8005754 <Error_Handler+0x174>)
 80056ec:	f00e fdcc 	bl	8014288 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 80056f0:	2300      	movs	r3, #0
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	e012      	b.n	800571c <Error_Handler+0x13c>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 80056f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056fa:	480e      	ldr	r0, [pc, #56]	@ (8005734 <Error_Handler+0x154>)
 80056fc:	f005 f8bd 	bl	800a87a <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 8005700:	20c8      	movs	r0, #200	@ 0xc8
 8005702:	f000 fd5f 	bl	80061c4 <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 8005706:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800570a:	480a      	ldr	r0, [pc, #40]	@ (8005734 <Error_Handler+0x154>)
 800570c:	f005 f8b5 	bl	800a87a <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 8005710:	20c8      	movs	r0, #200	@ 0xc8
 8005712:	f000 fd57 	bl	80061c4 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	3301      	adds	r3, #1
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4b07      	ldr	r3, [pc, #28]	@ (800573c <Error_Handler+0x15c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	dbe7      	blt.n	80056f6 <Error_Handler+0x116>
	  }
	  HAL_Delay(1000);
 8005726:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800572a:	f000 fd4b 	bl	80061c4 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 800572e:	e7df      	b.n	80056f0 <Error_Handler+0x110>
 8005730:	2400230c 	.word	0x2400230c
 8005734:	58020400 	.word	0x58020400
 8005738:	24000288 	.word	0x24000288
 800573c:	24002978 	.word	0x24002978
 8005740:	0801706c 	.word	0x0801706c
 8005744:	08017094 	.word	0x08017094
 8005748:	080170bc 	.word	0x080170bc
 800574c:	080170f0 	.word	0x080170f0
 8005750:	08017124 	.word	0x08017124
 8005754:	08017158 	.word	0x08017158

08005758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800575e:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <HAL_MspInit+0x38>)
 8005760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005764:	4a0a      	ldr	r2, [pc, #40]	@ (8005790 <HAL_MspInit+0x38>)
 8005766:	f043 0302 	orr.w	r3, r3, #2
 800576a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800576e:	4b08      	ldr	r3, [pc, #32]	@ (8005790 <HAL_MspInit+0x38>)
 8005770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	607b      	str	r3, [r7, #4]
 800577a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800577c:	2200      	movs	r2, #0
 800577e:	210f      	movs	r1, #15
 8005780:	f06f 0001 	mvn.w	r0, #1
 8005784:	f000 fe06 	bl	8006394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	58024400 	.word	0x58024400

08005794 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b0ba      	sub	sp, #232	@ 0xe8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	22c0      	movs	r2, #192	@ 0xc0
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f00e fdd6 	bl	8014366 <memset>
  if(hfdcan->Instance==FDCAN1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a37      	ldr	r2, [pc, #220]	@ (800589c <HAL_FDCAN_MspInit+0x108>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d166      	bne.n	8005892 <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80057c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80057d0:	2301      	movs	r3, #1
 80057d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 80057d4:	2364      	movs	r3, #100	@ 0x64
 80057d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80057d8:	2302      	movs	r3, #2
 80057da:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 80057dc:	2314      	movs	r3, #20
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80057e0:	2302      	movs	r3, #2
 80057e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80057e4:	23c0      	movs	r3, #192	@ 0xc0
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80057f0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80057f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057f8:	f107 0310 	add.w	r3, r7, #16
 80057fc:	4618      	mov	r0, r3
 80057fe:	f006 f8b9 	bl	800b974 <HAL_RCCEx_PeriphCLKConfig>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8005808:	f7ff feea 	bl	80055e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800580c:	4b24      	ldr	r3, [pc, #144]	@ (80058a0 <HAL_FDCAN_MspInit+0x10c>)
 800580e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005812:	4a23      	ldr	r2, [pc, #140]	@ (80058a0 <HAL_FDCAN_MspInit+0x10c>)
 8005814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005818:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800581c:	4b20      	ldr	r3, [pc, #128]	@ (80058a0 <HAL_FDCAN_MspInit+0x10c>)
 800581e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8005822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800582a:	4b1d      	ldr	r3, [pc, #116]	@ (80058a0 <HAL_FDCAN_MspInit+0x10c>)
 800582c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005830:	4a1b      	ldr	r2, [pc, #108]	@ (80058a0 <HAL_FDCAN_MspInit+0x10c>)
 8005832:	f043 0308 	orr.w	r3, r3, #8
 8005836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800583a:	4b19      	ldr	r3, [pc, #100]	@ (80058a0 <HAL_FDCAN_MspInit+0x10c>)
 800583c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005848:	2303      	movs	r3, #3
 800584a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584e:	2302      	movs	r3, #2
 8005850:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800585a:	2302      	movs	r3, #2
 800585c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005860:	2309      	movs	r3, #9
 8005862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005866:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800586a:	4619      	mov	r1, r3
 800586c:	480d      	ldr	r0, [pc, #52]	@ (80058a4 <HAL_FDCAN_MspInit+0x110>)
 800586e:	f004 fe3b 	bl	800a4e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 6, 0);
 8005872:	2200      	movs	r2, #0
 8005874:	2106      	movs	r1, #6
 8005876:	2013      	movs	r0, #19
 8005878:	f000 fd8c 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800587c:	2013      	movs	r0, #19
 800587e:	f000 fda3 	bl	80063c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 6, 0);
 8005882:	2200      	movs	r2, #0
 8005884:	2106      	movs	r1, #6
 8005886:	2015      	movs	r0, #21
 8005888:	f000 fd84 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800588c:	2015      	movs	r0, #21
 800588e:	f000 fd9b 	bl	80063c8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8005892:	bf00      	nop
 8005894:	37e8      	adds	r7, #232	@ 0xe8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	4000a000 	.word	0x4000a000
 80058a0:	58024400 	.word	0x58024400
 80058a4:	58020c00 	.word	0x58020c00

080058a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b0ba      	sub	sp, #232	@ 0xe8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	609a      	str	r2, [r3, #8]
 80058bc:	60da      	str	r2, [r3, #12]
 80058be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058c0:	f107 0310 	add.w	r3, r7, #16
 80058c4:	22c0      	movs	r2, #192	@ 0xc0
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f00e fd4c 	bl	8014366 <memset>
  if(huart->Instance==USART3)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a59      	ldr	r2, [pc, #356]	@ (8005a38 <HAL_UART_MspInit+0x190>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	f040 80aa 	bne.w	8005a2e <HAL_UART_MspInit+0x186>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80058da:	f04f 0202 	mov.w	r2, #2
 80058de:	f04f 0300 	mov.w	r3, #0
 80058e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80058e6:	2300      	movs	r3, #0
 80058e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	4618      	mov	r0, r3
 80058f2:	f006 f83f 	bl	800b974 <HAL_RCCEx_PeriphCLKConfig>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80058fc:	f7ff fe70 	bl	80055e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005900:	4b4e      	ldr	r3, [pc, #312]	@ (8005a3c <HAL_UART_MspInit+0x194>)
 8005902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005906:	4a4d      	ldr	r2, [pc, #308]	@ (8005a3c <HAL_UART_MspInit+0x194>)
 8005908:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800590c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005910:	4b4a      	ldr	r3, [pc, #296]	@ (8005a3c <HAL_UART_MspInit+0x194>)
 8005912:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800591e:	4b47      	ldr	r3, [pc, #284]	@ (8005a3c <HAL_UART_MspInit+0x194>)
 8005920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005924:	4a45      	ldr	r2, [pc, #276]	@ (8005a3c <HAL_UART_MspInit+0x194>)
 8005926:	f043 0308 	orr.w	r3, r3, #8
 800592a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800592e:	4b43      	ldr	r3, [pc, #268]	@ (8005a3c <HAL_UART_MspInit+0x194>)
 8005930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800593c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005940:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005944:	2302      	movs	r3, #2
 8005946:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005950:	2300      	movs	r3, #0
 8005952:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005956:	2307      	movs	r3, #7
 8005958:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800595c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005960:	4619      	mov	r1, r3
 8005962:	4837      	ldr	r0, [pc, #220]	@ (8005a40 <HAL_UART_MspInit+0x198>)
 8005964:	f004 fdc0 	bl	800a4e8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8005968:	4b36      	ldr	r3, [pc, #216]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 800596a:	4a37      	ldr	r2, [pc, #220]	@ (8005a48 <HAL_UART_MspInit+0x1a0>)
 800596c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800596e:	4b35      	ldr	r3, [pc, #212]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 8005970:	222d      	movs	r2, #45	@ 0x2d
 8005972:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005974:	4b33      	ldr	r3, [pc, #204]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 8005976:	2200      	movs	r2, #0
 8005978:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800597a:	4b32      	ldr	r3, [pc, #200]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 800597c:	2200      	movs	r2, #0
 800597e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005980:	4b30      	ldr	r3, [pc, #192]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 8005982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005986:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005988:	4b2e      	ldr	r3, [pc, #184]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 800598a:	2200      	movs	r2, #0
 800598c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800598e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 8005990:	2200      	movs	r2, #0
 8005992:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005994:	4b2b      	ldr	r3, [pc, #172]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 8005996:	2200      	movs	r2, #0
 8005998:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800599a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 800599c:	2200      	movs	r2, #0
 800599e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059a0:	4b28      	ldr	r3, [pc, #160]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80059a6:	4827      	ldr	r0, [pc, #156]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 80059a8:	f000 fd94 	bl	80064d4 <HAL_DMA_Init>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80059b2:	f7ff fe15 	bl	80055e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a22      	ldr	r2, [pc, #136]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 80059ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80059be:	4a21      	ldr	r2, [pc, #132]	@ (8005a44 <HAL_UART_MspInit+0x19c>)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80059c4:	4b21      	ldr	r3, [pc, #132]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059c6:	4a22      	ldr	r2, [pc, #136]	@ (8005a50 <HAL_UART_MspInit+0x1a8>)
 80059c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80059ca:	4b20      	ldr	r3, [pc, #128]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059cc:	222e      	movs	r2, #46	@ 0x2e
 80059ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059d0:	4b1e      	ldr	r3, [pc, #120]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059d2:	2240      	movs	r2, #64	@ 0x40
 80059d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059d6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059dc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059e4:	4b19      	ldr	r3, [pc, #100]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059ea:	4b18      	ldr	r3, [pc, #96]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80059f0:	4b16      	ldr	r3, [pc, #88]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80059f6:	4b15      	ldr	r3, [pc, #84]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059fc:	4b13      	ldr	r3, [pc, #76]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005a02:	4812      	ldr	r0, [pc, #72]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 8005a04:	f000 fd66 	bl	80064d4 <HAL_DMA_Init>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8005a0e:	f7ff fde7 	bl	80055e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a0d      	ldr	r2, [pc, #52]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 8005a16:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005a18:	4a0c      	ldr	r2, [pc, #48]	@ (8005a4c <HAL_UART_MspInit+0x1a4>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2108      	movs	r1, #8
 8005a22:	2027      	movs	r0, #39	@ 0x27
 8005a24:	f000 fcb6 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a28:	2027      	movs	r0, #39	@ 0x27
 8005a2a:	f000 fccd 	bl	80063c8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8005a2e:	bf00      	nop
 8005a30:	37e8      	adds	r7, #232	@ 0xe8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40004800 	.word	0x40004800
 8005a3c:	58024400 	.word	0x58024400
 8005a40:	58020c00 	.word	0x58020c00
 8005a44:	240003bc 	.word	0x240003bc
 8005a48:	40020010 	.word	0x40020010
 8005a4c:	24000434 	.word	0x24000434
 8005a50:	40020028 	.word	0x40020028

08005a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b090      	sub	sp, #64	@ 0x40
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d827      	bhi.n	8005ab2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8005a62:	2200      	movs	r2, #0
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	2037      	movs	r0, #55	@ 0x37
 8005a68:	f000 fc94 	bl	8006394 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005a6c:	2037      	movs	r0, #55	@ 0x37
 8005a6e:	f000 fcab 	bl	80063c8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8005a72:	4a29      	ldr	r2, [pc, #164]	@ (8005b18 <HAL_InitTick+0xc4>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8005a78:	4b28      	ldr	r3, [pc, #160]	@ (8005b1c <HAL_InitTick+0xc8>)
 8005a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a7e:	4a27      	ldr	r2, [pc, #156]	@ (8005b1c <HAL_InitTick+0xc8>)
 8005a80:	f043 0320 	orr.w	r3, r3, #32
 8005a84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005a88:	4b24      	ldr	r3, [pc, #144]	@ (8005b1c <HAL_InitTick+0xc8>)
 8005a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a96:	f107 0210 	add.w	r2, r7, #16
 8005a9a:	f107 0314 	add.w	r3, r7, #20
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f005 ff25 	bl	800b8f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d106      	bne.n	8005abe <HAL_InitTick+0x6a>
 8005ab0:	e001      	b.n	8005ab6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e02b      	b.n	8005b0e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f005 feef 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 8005aba:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8005abc:	e004      	b.n	8005ac8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005abe:	f005 feeb 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aca:	4a15      	ldr	r2, [pc, #84]	@ (8005b20 <HAL_InitTick+0xcc>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	0c9b      	lsrs	r3, r3, #18
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005ad6:	4b13      	ldr	r3, [pc, #76]	@ (8005b24 <HAL_InitTick+0xd0>)
 8005ad8:	4a13      	ldr	r2, [pc, #76]	@ (8005b28 <HAL_InitTick+0xd4>)
 8005ada:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8005adc:	4b11      	ldr	r3, [pc, #68]	@ (8005b24 <HAL_InitTick+0xd0>)
 8005ade:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005ae2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8005b24 <HAL_InitTick+0xd0>)
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8005aea:	4b0e      	ldr	r3, [pc, #56]	@ (8005b24 <HAL_InitTick+0xd0>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005af0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b24 <HAL_InitTick+0xd0>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005af6:	480b      	ldr	r0, [pc, #44]	@ (8005b24 <HAL_InitTick+0xd0>)
 8005af8:	f007 fd68 	bl	800d5cc <HAL_TIM_Base_Init>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8005b02:	4808      	ldr	r0, [pc, #32]	@ (8005b24 <HAL_InitTick+0xd0>)
 8005b04:	f007 fdc4 	bl	800d690 <HAL_TIM_Base_Start_IT>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	e000      	b.n	8005b0e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3740      	adds	r7, #64	@ 0x40
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	24000074 	.word	0x24000074
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	431bde83 	.word	0x431bde83
 8005b24:	24002980 	.word	0x24002980
 8005b28:	40001400 	.word	0x40001400

08005b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005b30:	bf00      	nop
 8005b32:	e7fd      	b.n	8005b30 <NMI_Handler+0x4>

08005b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <HardFault_Handler+0x4>

08005b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <MemManage_Handler+0x4>

08005b44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <BusFault_Handler+0x4>

08005b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <UsageFault_Handler+0x4>

08005b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005b68:	4802      	ldr	r0, [pc, #8]	@ (8005b74 <DMA1_Stream0_IRQHandler+0x10>)
 8005b6a:	f001 ffdd 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	240003bc 	.word	0x240003bc

08005b78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005b7c:	4802      	ldr	r0, [pc, #8]	@ (8005b88 <DMA1_Stream1_IRQHandler+0x10>)
 8005b7e:	f001 ffd3 	bl	8007b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	24000434 	.word	0x24000434

08005b8c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005b90:	4802      	ldr	r0, [pc, #8]	@ (8005b9c <FDCAN1_IT0_IRQHandler+0x10>)
 8005b92:	f003 ff9b 	bl	8009acc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	24000288 	.word	0x24000288

08005ba0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005ba4:	4802      	ldr	r0, [pc, #8]	@ (8005bb0 <FDCAN1_IT1_IRQHandler+0x10>)
 8005ba6:	f003 ff91 	bl	8009acc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8005baa:	bf00      	nop
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	24000288 	.word	0x24000288

08005bb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005bb8:	4802      	ldr	r0, [pc, #8]	@ (8005bc4 <USART3_IRQHandler+0x10>)
 8005bba:	f008 f8eb 	bl	800dd94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005bbe:	bf00      	nop
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	24000328 	.word	0x24000328

08005bc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8005bcc:	2000      	movs	r0, #0
 8005bce:	f000 fa83 	bl	80060d8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005bd2:	bf00      	nop
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005bdc:	4802      	ldr	r0, [pc, #8]	@ (8005be8 <TIM7_IRQHandler+0x10>)
 8005bde:	f007 fdcf 	bl	800d780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	24002980 	.word	0x24002980

08005bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return 1;
 8005bf0:	2301      	movs	r3, #1
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <_kill>:

int _kill(int pid, int sig)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c06:	f00e fcbf 	bl	8014588 <__errno>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2216      	movs	r2, #22
 8005c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_exit>:

void _exit (int status)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005c24:	f04f 31ff 	mov.w	r1, #4294967295
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ffe7 	bl	8005bfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <_exit+0x12>

08005c32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	e00a      	b.n	8005c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005c44:	f3af 8000 	nop.w
 8005c48:	4601      	mov	r1, r0
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	60ba      	str	r2, [r7, #8]
 8005c50:	b2ca      	uxtb	r2, r1
 8005c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3301      	adds	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	dbf0      	blt.n	8005c44 <_read+0x12>
  }

  return len;
 8005c62:	687b      	ldr	r3, [r7, #4]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <_close>:
  }
  return len;
}

int _close(int file)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005c94:	605a      	str	r2, [r3, #4]
  return 0;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <_isatty>:

int _isatty(int file)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005cac:	2301      	movs	r3, #1
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cdc:	4a14      	ldr	r2, [pc, #80]	@ (8005d30 <_sbrk+0x5c>)
 8005cde:	4b15      	ldr	r3, [pc, #84]	@ (8005d34 <_sbrk+0x60>)
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ce8:	4b13      	ldr	r3, [pc, #76]	@ (8005d38 <_sbrk+0x64>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005cf0:	4b11      	ldr	r3, [pc, #68]	@ (8005d38 <_sbrk+0x64>)
 8005cf2:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <_sbrk+0x68>)
 8005cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cf6:	4b10      	ldr	r3, [pc, #64]	@ (8005d38 <_sbrk+0x64>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d207      	bcs.n	8005d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d04:	f00e fc40 	bl	8014588 <__errno>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	220c      	movs	r2, #12
 8005d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d12:	e009      	b.n	8005d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d14:	4b08      	ldr	r3, [pc, #32]	@ (8005d38 <_sbrk+0x64>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d1a:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <_sbrk+0x64>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4413      	add	r3, r2
 8005d22:	4a05      	ldr	r2, [pc, #20]	@ (8005d38 <_sbrk+0x64>)
 8005d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d26:	68fb      	ldr	r3, [r7, #12]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	24080000 	.word	0x24080000
 8005d34:	00000400 	.word	0x00000400
 8005d38:	240029cc 	.word	0x240029cc
 8005d3c:	24007510 	.word	0x24007510

08005d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005d44:	4b43      	ldr	r3, [pc, #268]	@ (8005e54 <SystemInit+0x114>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d4a:	4a42      	ldr	r2, [pc, #264]	@ (8005e54 <SystemInit+0x114>)
 8005d4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005d54:	4b40      	ldr	r3, [pc, #256]	@ (8005e58 <SystemInit+0x118>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d807      	bhi.n	8005d70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005d60:	4b3d      	ldr	r3, [pc, #244]	@ (8005e58 <SystemInit+0x118>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 030f 	bic.w	r3, r3, #15
 8005d68:	4a3b      	ldr	r2, [pc, #236]	@ (8005e58 <SystemInit+0x118>)
 8005d6a:	f043 0307 	orr.w	r3, r3, #7
 8005d6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005d70:	4b3a      	ldr	r3, [pc, #232]	@ (8005e5c <SystemInit+0x11c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a39      	ldr	r2, [pc, #228]	@ (8005e5c <SystemInit+0x11c>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005d7c:	4b37      	ldr	r3, [pc, #220]	@ (8005e5c <SystemInit+0x11c>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005d82:	4b36      	ldr	r3, [pc, #216]	@ (8005e5c <SystemInit+0x11c>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4935      	ldr	r1, [pc, #212]	@ (8005e5c <SystemInit+0x11c>)
 8005d88:	4b35      	ldr	r3, [pc, #212]	@ (8005e60 <SystemInit+0x120>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005d8e:	4b32      	ldr	r3, [pc, #200]	@ (8005e58 <SystemInit+0x118>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e58 <SystemInit+0x118>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 030f 	bic.w	r3, r3, #15
 8005da2:	4a2d      	ldr	r2, [pc, #180]	@ (8005e58 <SystemInit+0x118>)
 8005da4:	f043 0307 	orr.w	r3, r3, #7
 8005da8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005daa:	4b2c      	ldr	r3, [pc, #176]	@ (8005e5c <SystemInit+0x11c>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005db0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e5c <SystemInit+0x11c>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005db6:	4b29      	ldr	r3, [pc, #164]	@ (8005e5c <SystemInit+0x11c>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005dbc:	4b27      	ldr	r3, [pc, #156]	@ (8005e5c <SystemInit+0x11c>)
 8005dbe:	4a29      	ldr	r2, [pc, #164]	@ (8005e64 <SystemInit+0x124>)
 8005dc0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005dc2:	4b26      	ldr	r3, [pc, #152]	@ (8005e5c <SystemInit+0x11c>)
 8005dc4:	4a28      	ldr	r2, [pc, #160]	@ (8005e68 <SystemInit+0x128>)
 8005dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005dc8:	4b24      	ldr	r3, [pc, #144]	@ (8005e5c <SystemInit+0x11c>)
 8005dca:	4a28      	ldr	r2, [pc, #160]	@ (8005e6c <SystemInit+0x12c>)
 8005dcc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005dce:	4b23      	ldr	r3, [pc, #140]	@ (8005e5c <SystemInit+0x11c>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005dd4:	4b21      	ldr	r3, [pc, #132]	@ (8005e5c <SystemInit+0x11c>)
 8005dd6:	4a25      	ldr	r2, [pc, #148]	@ (8005e6c <SystemInit+0x12c>)
 8005dd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005dda:	4b20      	ldr	r3, [pc, #128]	@ (8005e5c <SystemInit+0x11c>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005de0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e5c <SystemInit+0x11c>)
 8005de2:	4a22      	ldr	r2, [pc, #136]	@ (8005e6c <SystemInit+0x12c>)
 8005de4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005de6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e5c <SystemInit+0x11c>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005dec:	4b1b      	ldr	r3, [pc, #108]	@ (8005e5c <SystemInit+0x11c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e5c <SystemInit+0x11c>)
 8005df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005df6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005df8:	4b18      	ldr	r3, [pc, #96]	@ (8005e5c <SystemInit+0x11c>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8005e70 <SystemInit+0x130>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4b1c      	ldr	r3, [pc, #112]	@ (8005e74 <SystemInit+0x134>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e0a:	d202      	bcs.n	8005e12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005e78 <SystemInit+0x138>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8005e12:	4b12      	ldr	r3, [pc, #72]	@ (8005e5c <SystemInit+0x11c>)
 8005e14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d113      	bne.n	8005e48 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005e20:	4b0e      	ldr	r3, [pc, #56]	@ (8005e5c <SystemInit+0x11c>)
 8005e22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005e26:	4a0d      	ldr	r2, [pc, #52]	@ (8005e5c <SystemInit+0x11c>)
 8005e28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005e30:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <SystemInit+0x13c>)
 8005e32:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005e36:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005e38:	4b08      	ldr	r3, [pc, #32]	@ (8005e5c <SystemInit+0x11c>)
 8005e3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005e3e:	4a07      	ldr	r2, [pc, #28]	@ (8005e5c <SystemInit+0x11c>)
 8005e40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	e000ed00 	.word	0xe000ed00
 8005e58:	52002000 	.word	0x52002000
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	eaf6ed7f 	.word	0xeaf6ed7f
 8005e64:	02020200 	.word	0x02020200
 8005e68:	01ff0000 	.word	0x01ff0000
 8005e6c:	01010280 	.word	0x01010280
 8005e70:	5c001000 	.word	0x5c001000
 8005e74:	ffff0000 	.word	0xffff0000
 8005e78:	51008108 	.word	0x51008108
 8005e7c:	52004000 	.word	0x52004000

08005e80 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8005e84:	4b09      	ldr	r3, [pc, #36]	@ (8005eac <ExitRun0Mode+0x2c>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4a08      	ldr	r2, [pc, #32]	@ (8005eac <ExitRun0Mode+0x2c>)
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8005e90:	bf00      	nop
 8005e92:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <ExitRun0Mode+0x2c>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f9      	beq.n	8005e92 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	58024800 	.word	0x58024800

08005eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005eb0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005eec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8005eb4:	f7ff ffe4 	bl	8005e80 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005eb8:	f7ff ff42 	bl	8005d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ebc:	480c      	ldr	r0, [pc, #48]	@ (8005ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005ebe:	490d      	ldr	r1, [pc, #52]	@ (8005ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ec4:	e002      	b.n	8005ecc <LoopCopyDataInit>

08005ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005eca:	3304      	adds	r3, #4

08005ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ed0:	d3f9      	bcc.n	8005ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8005efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8005f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ed8:	e001      	b.n	8005ede <LoopFillZerobss>

08005eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005edc:	3204      	adds	r2, #4

08005ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ee0:	d3fb      	bcc.n	8005eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005ee2:	f00e fb57 	bl	8014594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ee6:	f7fe f8a3 	bl	8004030 <main>
  bx  lr
 8005eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005eec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005ef0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005ef4:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 8005ef8:	080177f0 	.word	0x080177f0
  ldr r2, =_sbss
 8005efc:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8005f00:	24007510 	.word	0x24007510

08005f04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f04:	e7fe      	b.n	8005f04 <ADC3_IRQHandler>
	...

08005f08 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08c      	sub	sp, #48	@ 0x30
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8005f16:	79fb      	ldrb	r3, [r7, #7]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <BSP_LED_Init+0x28>
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d006      	beq.n	8005f30 <BSP_LED_Init+0x28>
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d003      	beq.n	8005f30 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005f28:	f06f 0301 	mvn.w	r3, #1
 8005f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f2e:	e055      	b.n	8005fdc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10f      	bne.n	8005f56 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8005f36:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f3e:	f043 0302 	orr.w	r3, r3, #2
 8005f42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f46:	4b28      	ldr	r3, [pc, #160]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	e021      	b.n	8005f9a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d10f      	bne.n	8005f7c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8005f5c:	4b22      	ldr	r3, [pc, #136]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f62:	4a21      	ldr	r2, [pc, #132]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	e00e      	b.n	8005f9a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f82:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f84:	f043 0302 	orr.w	r3, r3, #2
 8005f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f8c:	4b16      	ldr	r3, [pc, #88]	@ (8005fe8 <BSP_LED_Init+0xe0>)
 8005f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	4a13      	ldr	r2, [pc, #76]	@ (8005fec <BSP_LED_Init+0xe4>)
 8005f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fac:	2303      	movs	r3, #3
 8005fae:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8005fb0:	79fb      	ldrb	r3, [r7, #7]
 8005fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff0 <BSP_LED_Init+0xe8>)
 8005fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb8:	f107 0218 	add.w	r2, r7, #24
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f004 fa92 	bl	800a4e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff0 <BSP_LED_Init+0xe8>)
 8005fc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	4a07      	ldr	r2, [pc, #28]	@ (8005fec <BSP_LED_Init+0xe4>)
 8005fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f004 fc36 	bl	800a848 <HAL_GPIO_WritePin>
  }

  return ret;
 8005fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3730      	adds	r7, #48	@ 0x30
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	08017228 	.word	0x08017228
 8005ff0:	2400005c 	.word	0x2400005c

08005ff4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	460a      	mov	r2, r1
 8005ffe:	71fb      	strb	r3, [r7, #7]
 8006000:	4613      	mov	r3, r2
 8006002:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8006004:	4b2e      	ldr	r3, [pc, #184]	@ (80060c0 <BSP_PB_Init+0xcc>)
 8006006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800600a:	4a2d      	ldr	r2, [pc, #180]	@ (80060c0 <BSP_PB_Init+0xcc>)
 800600c:	f043 0304 	orr.w	r3, r3, #4
 8006010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006014:	4b2a      	ldr	r3, [pc, #168]	@ (80060c0 <BSP_PB_Init+0xcc>)
 8006016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8006022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006026:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8006028:	2302      	movs	r3, #2
 800602a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800602c:	2302      	movs	r3, #2
 800602e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8006030:	79bb      	ldrb	r3, [r7, #6]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800603a:	79fb      	ldrb	r3, [r7, #7]
 800603c:	4a21      	ldr	r2, [pc, #132]	@ (80060c4 <BSP_PB_Init+0xd0>)
 800603e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006042:	f107 020c 	add.w	r2, r7, #12
 8006046:	4611      	mov	r1, r2
 8006048:	4618      	mov	r0, r3
 800604a:	f004 fa4d 	bl	800a4e8 <HAL_GPIO_Init>
 800604e:	e031      	b.n	80060b4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8006050:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006054:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	4a1a      	ldr	r2, [pc, #104]	@ (80060c4 <BSP_PB_Init+0xd0>)
 800605a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605e:	f107 020c 	add.w	r2, r7, #12
 8006062:	4611      	mov	r1, r2
 8006064:	4618      	mov	r0, r3
 8006066:	f004 fa3f 	bl	800a4e8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4a16      	ldr	r2, [pc, #88]	@ (80060c8 <BSP_PB_Init+0xd4>)
 8006070:	441a      	add	r2, r3
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	4915      	ldr	r1, [pc, #84]	@ (80060cc <BSP_PB_Init+0xd8>)
 8006076:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f003 f884 	bl	800918a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8006082:	79fb      	ldrb	r3, [r7, #7]
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <BSP_PB_Init+0xd4>)
 8006088:	1898      	adds	r0, r3, r2
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	4a10      	ldr	r2, [pc, #64]	@ (80060d0 <BSP_PB_Init+0xdc>)
 800608e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006092:	461a      	mov	r2, r3
 8006094:	2100      	movs	r1, #0
 8006096:	f003 f859 	bl	800914c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800609a:	2028      	movs	r0, #40	@ 0x28
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	4a0d      	ldr	r2, [pc, #52]	@ (80060d4 <BSP_PB_Init+0xe0>)
 80060a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060a4:	2200      	movs	r2, #0
 80060a6:	4619      	mov	r1, r3
 80060a8:	f000 f974 	bl	8006394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80060ac:	2328      	movs	r3, #40	@ 0x28
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 f98a 	bl	80063c8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	58024400 	.word	0x58024400
 80060c4:	24000068 	.word	0x24000068
 80060c8:	240029d0 	.word	0x240029d0
 80060cc:	08017230 	.word	0x08017230
 80060d0:	2400006c 	.word	0x2400006c
 80060d4:	24000070 	.word	0x24000070

080060d8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4a04      	ldr	r2, [pc, #16]	@ (80060f8 <BSP_PB_IRQHandler+0x20>)
 80060e8:	4413      	add	r3, r2
 80060ea:	4618      	mov	r0, r3
 80060ec:	f003 f862 	bl	80091b4 <HAL_EXTI_IRQHandler>
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	240029d0 	.word	0x240029d0

080060fc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8006100:	2000      	movs	r0, #0
 8006102:	f7fb fa8d 	bl	8001620 <BSP_PB_Callback>
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006112:	2003      	movs	r0, #3
 8006114:	f000 f933 	bl	800637e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006118:	f005 fa14 	bl	800b544 <HAL_RCC_GetSysClockFreq>
 800611c:	4602      	mov	r2, r0
 800611e:	4b15      	ldr	r3, [pc, #84]	@ (8006174 <HAL_Init+0x68>)
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	4913      	ldr	r1, [pc, #76]	@ (8006178 <HAL_Init+0x6c>)
 800612a:	5ccb      	ldrb	r3, [r1, r3]
 800612c:	f003 031f 	and.w	r3, r3, #31
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
 8006134:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006136:	4b0f      	ldr	r3, [pc, #60]	@ (8006174 <HAL_Init+0x68>)
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	4a0e      	ldr	r2, [pc, #56]	@ (8006178 <HAL_Init+0x6c>)
 8006140:	5cd3      	ldrb	r3, [r2, r3]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	fa22 f303 	lsr.w	r3, r2, r3
 800614c:	4a0b      	ldr	r2, [pc, #44]	@ (800617c <HAL_Init+0x70>)
 800614e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006150:	4a0b      	ldr	r2, [pc, #44]	@ (8006180 <HAL_Init+0x74>)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006156:	200f      	movs	r0, #15
 8006158:	f7ff fc7c 	bl	8005a54 <HAL_InitTick>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e002      	b.n	800616c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006166:	f7ff faf7 	bl	8005758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	58024400 	.word	0x58024400
 8006178:	08017218 	.word	0x08017218
 800617c:	24000058 	.word	0x24000058
 8006180:	24000054 	.word	0x24000054

08006184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_IncTick+0x20>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <HAL_IncTick+0x24>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4413      	add	r3, r2
 8006194:	4a04      	ldr	r2, [pc, #16]	@ (80061a8 <HAL_IncTick+0x24>)
 8006196:	6013      	str	r3, [r2, #0]
}
 8006198:	bf00      	nop
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	24000078 	.word	0x24000078
 80061a8:	240029d8 	.word	0x240029d8

080061ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  return uwTick;
 80061b0:	4b03      	ldr	r3, [pc, #12]	@ (80061c0 <HAL_GetTick+0x14>)
 80061b2:	681b      	ldr	r3, [r3, #0]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	240029d8 	.word	0x240029d8

080061c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061cc:	f7ff ffee 	bl	80061ac <HAL_GetTick>
 80061d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d005      	beq.n	80061ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061de:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <HAL_Delay+0x44>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	461a      	mov	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4413      	add	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061ea:	bf00      	nop
 80061ec:	f7ff ffde 	bl	80061ac <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d8f7      	bhi.n	80061ec <HAL_Delay+0x28>
  {
  }
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	24000078 	.word	0x24000078

0800620c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006210:	4b03      	ldr	r3, [pc, #12]	@ (8006220 <HAL_GetREVID+0x14>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	0c1b      	lsrs	r3, r3, #16
}
 8006216:	4618      	mov	r0, r3
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	5c001000 	.word	0x5c001000

08006224 <__NVIC_SetPriorityGrouping>:
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006234:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <__NVIC_SetPriorityGrouping+0x40>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006240:	4013      	ands	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800624c:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <__NVIC_SetPriorityGrouping+0x44>)
 800624e:	4313      	orrs	r3, r2
 8006250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006252:	4a04      	ldr	r2, [pc, #16]	@ (8006264 <__NVIC_SetPriorityGrouping+0x40>)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	60d3      	str	r3, [r2, #12]
}
 8006258:	bf00      	nop
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	e000ed00 	.word	0xe000ed00
 8006268:	05fa0000 	.word	0x05fa0000

0800626c <__NVIC_GetPriorityGrouping>:
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006270:	4b04      	ldr	r3, [pc, #16]	@ (8006284 <__NVIC_GetPriorityGrouping+0x18>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	0a1b      	lsrs	r3, r3, #8
 8006276:	f003 0307 	and.w	r3, r3, #7
}
 800627a:	4618      	mov	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	e000ed00 	.word	0xe000ed00

08006288 <__NVIC_EnableIRQ>:
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006296:	2b00      	cmp	r3, #0
 8006298:	db0b      	blt.n	80062b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	f003 021f 	and.w	r2, r3, #31
 80062a0:	4907      	ldr	r1, [pc, #28]	@ (80062c0 <__NVIC_EnableIRQ+0x38>)
 80062a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2001      	movs	r0, #1
 80062aa:	fa00 f202 	lsl.w	r2, r0, r2
 80062ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	e000e100 	.word	0xe000e100

080062c4 <__NVIC_SetPriority>:
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80062d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	db0a      	blt.n	80062ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	490c      	ldr	r1, [pc, #48]	@ (8006310 <__NVIC_SetPriority+0x4c>)
 80062de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062e2:	0112      	lsls	r2, r2, #4
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	440b      	add	r3, r1
 80062e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80062ec:	e00a      	b.n	8006304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	4908      	ldr	r1, [pc, #32]	@ (8006314 <__NVIC_SetPriority+0x50>)
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	3b04      	subs	r3, #4
 80062fc:	0112      	lsls	r2, r2, #4
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	440b      	add	r3, r1
 8006302:	761a      	strb	r2, [r3, #24]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	e000e100 	.word	0xe000e100
 8006314:	e000ed00 	.word	0xe000ed00

08006318 <NVIC_EncodePriority>:
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	@ 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f1c3 0307 	rsb	r3, r3, #7
 8006332:	2b04      	cmp	r3, #4
 8006334:	bf28      	it	cs
 8006336:	2304      	movcs	r3, #4
 8006338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	3304      	adds	r3, #4
 800633e:	2b06      	cmp	r3, #6
 8006340:	d902      	bls.n	8006348 <NVIC_EncodePriority+0x30>
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	3b03      	subs	r3, #3
 8006346:	e000      	b.n	800634a <NVIC_EncodePriority+0x32>
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800634c:	f04f 32ff 	mov.w	r2, #4294967295
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	fa02 f303 	lsl.w	r3, r2, r3
 8006356:	43da      	mvns	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	401a      	ands	r2, r3
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006360:	f04f 31ff 	mov.w	r1, #4294967295
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	fa01 f303 	lsl.w	r3, r1, r3
 800636a:	43d9      	mvns	r1, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006370:	4313      	orrs	r3, r2
}
 8006372:	4618      	mov	r0, r3
 8006374:	3724      	adds	r7, #36	@ 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff ff4c 	bl	8006224 <__NVIC_SetPriorityGrouping>
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80063a2:	f7ff ff63 	bl	800626c <__NVIC_GetPriorityGrouping>
 80063a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	6978      	ldr	r0, [r7, #20]
 80063ae:	f7ff ffb3 	bl	8006318 <NVIC_EncodePriority>
 80063b2:	4602      	mov	r2, r0
 80063b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80063b8:	4611      	mov	r1, r2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff ff82 	bl	80062c4 <__NVIC_SetPriority>
}
 80063c0:	bf00      	nop
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff ff56 	bl	8006288 <__NVIC_EnableIRQ>
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80063e8:	f3bf 8f5f 	dmb	sy
}
 80063ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80063ee:	4b07      	ldr	r3, [pc, #28]	@ (800640c <HAL_MPU_Disable+0x28>)
 80063f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f2:	4a06      	ldr	r2, [pc, #24]	@ (800640c <HAL_MPU_Disable+0x28>)
 80063f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80063fa:	4b05      	ldr	r3, [pc, #20]	@ (8006410 <HAL_MPU_Disable+0x2c>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	605a      	str	r2, [r3, #4]
}
 8006400:	bf00      	nop
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	e000ed00 	.word	0xe000ed00
 8006410:	e000ed90 	.word	0xe000ed90

08006414 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800641c:	4a0b      	ldr	r2, [pc, #44]	@ (800644c <HAL_MPU_Enable+0x38>)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006426:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <HAL_MPU_Enable+0x3c>)
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	4a09      	ldr	r2, [pc, #36]	@ (8006450 <HAL_MPU_Enable+0x3c>)
 800642c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006430:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006432:	f3bf 8f4f 	dsb	sy
}
 8006436:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006438:	f3bf 8f6f 	isb	sy
}
 800643c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	e000ed90 	.word	0xe000ed90
 8006450:	e000ed00 	.word	0xe000ed00

08006454 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	785a      	ldrb	r2, [r3, #1]
 8006460:	4b1b      	ldr	r3, [pc, #108]	@ (80064d0 <HAL_MPU_ConfigRegion+0x7c>)
 8006462:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006464:	4b1a      	ldr	r3, [pc, #104]	@ (80064d0 <HAL_MPU_ConfigRegion+0x7c>)
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	4a19      	ldr	r2, [pc, #100]	@ (80064d0 <HAL_MPU_ConfigRegion+0x7c>)
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006470:	4a17      	ldr	r2, [pc, #92]	@ (80064d0 <HAL_MPU_ConfigRegion+0x7c>)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7b1b      	ldrb	r3, [r3, #12]
 800647c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	7adb      	ldrb	r3, [r3, #11]
 8006482:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	7a9b      	ldrb	r3, [r3, #10]
 800648a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800648c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7b5b      	ldrb	r3, [r3, #13]
 8006492:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	7b9b      	ldrb	r3, [r3, #14]
 800649a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800649c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	7bdb      	ldrb	r3, [r3, #15]
 80064a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80064a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	7a5b      	ldrb	r3, [r3, #9]
 80064aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80064ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	7a1b      	ldrb	r3, [r3, #8]
 80064b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80064b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	7812      	ldrb	r2, [r2, #0]
 80064ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80064bc:	4a04      	ldr	r2, [pc, #16]	@ (80064d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80064be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80064c0:	6113      	str	r3, [r2, #16]
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	e000ed90 	.word	0xe000ed90

080064d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80064dc:	f7ff fe66 	bl	80061ac <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e316      	b.n	8006b1a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a66      	ldr	r2, [pc, #408]	@ (800668c <HAL_DMA_Init+0x1b8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d04a      	beq.n	800658c <HAL_DMA_Init+0xb8>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a65      	ldr	r2, [pc, #404]	@ (8006690 <HAL_DMA_Init+0x1bc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d045      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a63      	ldr	r2, [pc, #396]	@ (8006694 <HAL_DMA_Init+0x1c0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d040      	beq.n	800658c <HAL_DMA_Init+0xb8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a62      	ldr	r2, [pc, #392]	@ (8006698 <HAL_DMA_Init+0x1c4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d03b      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a60      	ldr	r2, [pc, #384]	@ (800669c <HAL_DMA_Init+0x1c8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d036      	beq.n	800658c <HAL_DMA_Init+0xb8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a5f      	ldr	r2, [pc, #380]	@ (80066a0 <HAL_DMA_Init+0x1cc>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d031      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a5d      	ldr	r2, [pc, #372]	@ (80066a4 <HAL_DMA_Init+0x1d0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d02c      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a5c      	ldr	r2, [pc, #368]	@ (80066a8 <HAL_DMA_Init+0x1d4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d027      	beq.n	800658c <HAL_DMA_Init+0xb8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a5a      	ldr	r2, [pc, #360]	@ (80066ac <HAL_DMA_Init+0x1d8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d022      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a59      	ldr	r2, [pc, #356]	@ (80066b0 <HAL_DMA_Init+0x1dc>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d01d      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a57      	ldr	r2, [pc, #348]	@ (80066b4 <HAL_DMA_Init+0x1e0>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d018      	beq.n	800658c <HAL_DMA_Init+0xb8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a56      	ldr	r2, [pc, #344]	@ (80066b8 <HAL_DMA_Init+0x1e4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a54      	ldr	r2, [pc, #336]	@ (80066bc <HAL_DMA_Init+0x1e8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00e      	beq.n	800658c <HAL_DMA_Init+0xb8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a53      	ldr	r2, [pc, #332]	@ (80066c0 <HAL_DMA_Init+0x1ec>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d009      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a51      	ldr	r2, [pc, #324]	@ (80066c4 <HAL_DMA_Init+0x1f0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_DMA_Init+0xb8>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a50      	ldr	r2, [pc, #320]	@ (80066c8 <HAL_DMA_Init+0x1f4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d101      	bne.n	8006590 <HAL_DMA_Init+0xbc>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_DMA_Init+0xbe>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 813b 	beq.w	800680e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a37      	ldr	r2, [pc, #220]	@ (800668c <HAL_DMA_Init+0x1b8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d04a      	beq.n	8006648 <HAL_DMA_Init+0x174>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a36      	ldr	r2, [pc, #216]	@ (8006690 <HAL_DMA_Init+0x1bc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d045      	beq.n	8006648 <HAL_DMA_Init+0x174>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a34      	ldr	r2, [pc, #208]	@ (8006694 <HAL_DMA_Init+0x1c0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d040      	beq.n	8006648 <HAL_DMA_Init+0x174>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a33      	ldr	r2, [pc, #204]	@ (8006698 <HAL_DMA_Init+0x1c4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d03b      	beq.n	8006648 <HAL_DMA_Init+0x174>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a31      	ldr	r2, [pc, #196]	@ (800669c <HAL_DMA_Init+0x1c8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d036      	beq.n	8006648 <HAL_DMA_Init+0x174>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a30      	ldr	r2, [pc, #192]	@ (80066a0 <HAL_DMA_Init+0x1cc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d031      	beq.n	8006648 <HAL_DMA_Init+0x174>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a2e      	ldr	r2, [pc, #184]	@ (80066a4 <HAL_DMA_Init+0x1d0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d02c      	beq.n	8006648 <HAL_DMA_Init+0x174>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a2d      	ldr	r2, [pc, #180]	@ (80066a8 <HAL_DMA_Init+0x1d4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d027      	beq.n	8006648 <HAL_DMA_Init+0x174>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a2b      	ldr	r2, [pc, #172]	@ (80066ac <HAL_DMA_Init+0x1d8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d022      	beq.n	8006648 <HAL_DMA_Init+0x174>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a2a      	ldr	r2, [pc, #168]	@ (80066b0 <HAL_DMA_Init+0x1dc>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d01d      	beq.n	8006648 <HAL_DMA_Init+0x174>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a28      	ldr	r2, [pc, #160]	@ (80066b4 <HAL_DMA_Init+0x1e0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d018      	beq.n	8006648 <HAL_DMA_Init+0x174>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a27      	ldr	r2, [pc, #156]	@ (80066b8 <HAL_DMA_Init+0x1e4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <HAL_DMA_Init+0x174>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a25      	ldr	r2, [pc, #148]	@ (80066bc <HAL_DMA_Init+0x1e8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00e      	beq.n	8006648 <HAL_DMA_Init+0x174>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a24      	ldr	r2, [pc, #144]	@ (80066c0 <HAL_DMA_Init+0x1ec>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_DMA_Init+0x174>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a22      	ldr	r2, [pc, #136]	@ (80066c4 <HAL_DMA_Init+0x1f0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_DMA_Init+0x174>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a21      	ldr	r2, [pc, #132]	@ (80066c8 <HAL_DMA_Init+0x1f4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d108      	bne.n	800665a <HAL_DMA_Init+0x186>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	601a      	str	r2, [r3, #0]
 8006658:	e007      	b.n	800666a <HAL_DMA_Init+0x196>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800666a:	e02f      	b.n	80066cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800666c:	f7ff fd9e 	bl	80061ac <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b05      	cmp	r3, #5
 8006678:	d928      	bls.n	80066cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2203      	movs	r2, #3
 8006684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e246      	b.n	8006b1a <HAL_DMA_Init+0x646>
 800668c:	40020010 	.word	0x40020010
 8006690:	40020028 	.word	0x40020028
 8006694:	40020040 	.word	0x40020040
 8006698:	40020058 	.word	0x40020058
 800669c:	40020070 	.word	0x40020070
 80066a0:	40020088 	.word	0x40020088
 80066a4:	400200a0 	.word	0x400200a0
 80066a8:	400200b8 	.word	0x400200b8
 80066ac:	40020410 	.word	0x40020410
 80066b0:	40020428 	.word	0x40020428
 80066b4:	40020440 	.word	0x40020440
 80066b8:	40020458 	.word	0x40020458
 80066bc:	40020470 	.word	0x40020470
 80066c0:	40020488 	.word	0x40020488
 80066c4:	400204a0 	.word	0x400204a0
 80066c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1c8      	bne.n	800666c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4b83      	ldr	r3, [pc, #524]	@ (80068f4 <HAL_DMA_Init+0x420>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80066f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800670a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671c:	2b04      	cmp	r3, #4
 800671e:	d107      	bne.n	8006730 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006728:	4313      	orrs	r3, r2
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006730:	4b71      	ldr	r3, [pc, #452]	@ (80068f8 <HAL_DMA_Init+0x424>)
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b71      	ldr	r3, [pc, #452]	@ (80068fc <HAL_DMA_Init+0x428>)
 8006736:	4013      	ands	r3, r2
 8006738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800673c:	d328      	bcc.n	8006790 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b28      	cmp	r3, #40	@ 0x28
 8006744:	d903      	bls.n	800674e <HAL_DMA_Init+0x27a>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b2e      	cmp	r3, #46	@ 0x2e
 800674c:	d917      	bls.n	800677e <HAL_DMA_Init+0x2aa>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	2b3e      	cmp	r3, #62	@ 0x3e
 8006754:	d903      	bls.n	800675e <HAL_DMA_Init+0x28a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	2b42      	cmp	r3, #66	@ 0x42
 800675c:	d90f      	bls.n	800677e <HAL_DMA_Init+0x2aa>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b46      	cmp	r3, #70	@ 0x46
 8006764:	d903      	bls.n	800676e <HAL_DMA_Init+0x29a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b48      	cmp	r3, #72	@ 0x48
 800676c:	d907      	bls.n	800677e <HAL_DMA_Init+0x2aa>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2b4e      	cmp	r3, #78	@ 0x4e
 8006774:	d905      	bls.n	8006782 <HAL_DMA_Init+0x2ae>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b52      	cmp	r3, #82	@ 0x52
 800677c:	d801      	bhi.n	8006782 <HAL_DMA_Init+0x2ae>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <HAL_DMA_Init+0x2b0>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800678e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f023 0307 	bic.w	r3, r3, #7
 80067a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d117      	bne.n	80067ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00e      	beq.n	80067ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f002 fb33 	bl	8008e38 <DMA_CheckFifoParam>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2240      	movs	r2, #64	@ 0x40
 80067dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e197      	b.n	8006b1a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f002 fa6e 	bl	8008cd4 <DMA_CalcBaseAndBitshift>
 80067f8:	4603      	mov	r3, r0
 80067fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006800:	f003 031f 	and.w	r3, r3, #31
 8006804:	223f      	movs	r2, #63	@ 0x3f
 8006806:	409a      	lsls	r2, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	609a      	str	r2, [r3, #8]
 800680c:	e0cd      	b.n	80069aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a3b      	ldr	r2, [pc, #236]	@ (8006900 <HAL_DMA_Init+0x42c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d022      	beq.n	800685e <HAL_DMA_Init+0x38a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a39      	ldr	r2, [pc, #228]	@ (8006904 <HAL_DMA_Init+0x430>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01d      	beq.n	800685e <HAL_DMA_Init+0x38a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a38      	ldr	r2, [pc, #224]	@ (8006908 <HAL_DMA_Init+0x434>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d018      	beq.n	800685e <HAL_DMA_Init+0x38a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a36      	ldr	r2, [pc, #216]	@ (800690c <HAL_DMA_Init+0x438>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <HAL_DMA_Init+0x38a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a35      	ldr	r2, [pc, #212]	@ (8006910 <HAL_DMA_Init+0x43c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00e      	beq.n	800685e <HAL_DMA_Init+0x38a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a33      	ldr	r2, [pc, #204]	@ (8006914 <HAL_DMA_Init+0x440>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d009      	beq.n	800685e <HAL_DMA_Init+0x38a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a32      	ldr	r2, [pc, #200]	@ (8006918 <HAL_DMA_Init+0x444>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d004      	beq.n	800685e <HAL_DMA_Init+0x38a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a30      	ldr	r2, [pc, #192]	@ (800691c <HAL_DMA_Init+0x448>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d101      	bne.n	8006862 <HAL_DMA_Init+0x38e>
 800685e:	2301      	movs	r3, #1
 8006860:	e000      	b.n	8006864 <HAL_DMA_Init+0x390>
 8006862:	2300      	movs	r3, #0
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8097 	beq.w	8006998 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a24      	ldr	r2, [pc, #144]	@ (8006900 <HAL_DMA_Init+0x42c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d021      	beq.n	80068b8 <HAL_DMA_Init+0x3e4>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a22      	ldr	r2, [pc, #136]	@ (8006904 <HAL_DMA_Init+0x430>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d01c      	beq.n	80068b8 <HAL_DMA_Init+0x3e4>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a21      	ldr	r2, [pc, #132]	@ (8006908 <HAL_DMA_Init+0x434>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d017      	beq.n	80068b8 <HAL_DMA_Init+0x3e4>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a1f      	ldr	r2, [pc, #124]	@ (800690c <HAL_DMA_Init+0x438>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d012      	beq.n	80068b8 <HAL_DMA_Init+0x3e4>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1e      	ldr	r2, [pc, #120]	@ (8006910 <HAL_DMA_Init+0x43c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00d      	beq.n	80068b8 <HAL_DMA_Init+0x3e4>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006914 <HAL_DMA_Init+0x440>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d008      	beq.n	80068b8 <HAL_DMA_Init+0x3e4>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <HAL_DMA_Init+0x444>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <HAL_DMA_Init+0x3e4>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a19      	ldr	r2, [pc, #100]	@ (800691c <HAL_DMA_Init+0x448>)
 80068b6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4b13      	ldr	r3, [pc, #76]	@ (8006920 <HAL_DMA_Init+0x44c>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b40      	cmp	r3, #64	@ 0x40
 80068de:	d021      	beq.n	8006924 <HAL_DMA_Init+0x450>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	2b80      	cmp	r3, #128	@ 0x80
 80068e6:	d102      	bne.n	80068ee <HAL_DMA_Init+0x41a>
 80068e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80068ec:	e01b      	b.n	8006926 <HAL_DMA_Init+0x452>
 80068ee:	2300      	movs	r3, #0
 80068f0:	e019      	b.n	8006926 <HAL_DMA_Init+0x452>
 80068f2:	bf00      	nop
 80068f4:	fe10803f 	.word	0xfe10803f
 80068f8:	5c001000 	.word	0x5c001000
 80068fc:	ffff0000 	.word	0xffff0000
 8006900:	58025408 	.word	0x58025408
 8006904:	5802541c 	.word	0x5802541c
 8006908:	58025430 	.word	0x58025430
 800690c:	58025444 	.word	0x58025444
 8006910:	58025458 	.word	0x58025458
 8006914:	5802546c 	.word	0x5802546c
 8006918:	58025480 	.word	0x58025480
 800691c:	58025494 	.word	0x58025494
 8006920:	fffe000f 	.word	0xfffe000f
 8006924:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68d2      	ldr	r2, [r2, #12]
 800692a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800692c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006934:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800693c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800694c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006954:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	4b6e      	ldr	r3, [pc, #440]	@ (8006b24 <HAL_DMA_Init+0x650>)
 800696c:	4413      	add	r3, r2
 800696e:	4a6e      	ldr	r2, [pc, #440]	@ (8006b28 <HAL_DMA_Init+0x654>)
 8006970:	fba2 2303 	umull	r2, r3, r2, r3
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	009a      	lsls	r2, r3, #2
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f002 f9a9 	bl	8008cd4 <DMA_CalcBaseAndBitshift>
 8006982:	4603      	mov	r3, r0
 8006984:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	2201      	movs	r2, #1
 8006990:	409a      	lsls	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]
 8006996:	e008      	b.n	80069aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2240      	movs	r2, #64	@ 0x40
 800699c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2203      	movs	r2, #3
 80069a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e0b7      	b.n	8006b1a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a5f      	ldr	r2, [pc, #380]	@ (8006b2c <HAL_DMA_Init+0x658>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d072      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a5d      	ldr	r2, [pc, #372]	@ (8006b30 <HAL_DMA_Init+0x65c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d06d      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a5c      	ldr	r2, [pc, #368]	@ (8006b34 <HAL_DMA_Init+0x660>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d068      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a5a      	ldr	r2, [pc, #360]	@ (8006b38 <HAL_DMA_Init+0x664>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d063      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a59      	ldr	r2, [pc, #356]	@ (8006b3c <HAL_DMA_Init+0x668>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d05e      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a57      	ldr	r2, [pc, #348]	@ (8006b40 <HAL_DMA_Init+0x66c>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d059      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a56      	ldr	r2, [pc, #344]	@ (8006b44 <HAL_DMA_Init+0x670>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d054      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a54      	ldr	r2, [pc, #336]	@ (8006b48 <HAL_DMA_Init+0x674>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d04f      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a53      	ldr	r2, [pc, #332]	@ (8006b4c <HAL_DMA_Init+0x678>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d04a      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a51      	ldr	r2, [pc, #324]	@ (8006b50 <HAL_DMA_Init+0x67c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d045      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a50      	ldr	r2, [pc, #320]	@ (8006b54 <HAL_DMA_Init+0x680>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d040      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a4e      	ldr	r2, [pc, #312]	@ (8006b58 <HAL_DMA_Init+0x684>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d03b      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a4d      	ldr	r2, [pc, #308]	@ (8006b5c <HAL_DMA_Init+0x688>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d036      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a4b      	ldr	r2, [pc, #300]	@ (8006b60 <HAL_DMA_Init+0x68c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d031      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006b64 <HAL_DMA_Init+0x690>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d02c      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a48      	ldr	r2, [pc, #288]	@ (8006b68 <HAL_DMA_Init+0x694>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d027      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a47      	ldr	r2, [pc, #284]	@ (8006b6c <HAL_DMA_Init+0x698>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d022      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a45      	ldr	r2, [pc, #276]	@ (8006b70 <HAL_DMA_Init+0x69c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01d      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a44      	ldr	r2, [pc, #272]	@ (8006b74 <HAL_DMA_Init+0x6a0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d018      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a42      	ldr	r2, [pc, #264]	@ (8006b78 <HAL_DMA_Init+0x6a4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a41      	ldr	r2, [pc, #260]	@ (8006b7c <HAL_DMA_Init+0x6a8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00e      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a3f      	ldr	r2, [pc, #252]	@ (8006b80 <HAL_DMA_Init+0x6ac>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d009      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8006b84 <HAL_DMA_Init+0x6b0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d004      	beq.n	8006a9a <HAL_DMA_Init+0x5c6>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a3c      	ldr	r2, [pc, #240]	@ (8006b88 <HAL_DMA_Init+0x6b4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d101      	bne.n	8006a9e <HAL_DMA_Init+0x5ca>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <HAL_DMA_Init+0x5cc>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d032      	beq.n	8006b0a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f002 fa43 	bl	8008f30 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b80      	cmp	r3, #128	@ 0x80
 8006ab0:	d102      	bne.n	8006ab8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006acc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d010      	beq.n	8006af8 <HAL_DMA_Init+0x624>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d80c      	bhi.n	8006af8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f002 fac0 	bl	8009064 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006af4:	605a      	str	r2, [r3, #4]
 8006af6:	e008      	b.n	8006b0a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	a7fdabf8 	.word	0xa7fdabf8
 8006b28:	cccccccd 	.word	0xcccccccd
 8006b2c:	40020010 	.word	0x40020010
 8006b30:	40020028 	.word	0x40020028
 8006b34:	40020040 	.word	0x40020040
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	40020070 	.word	0x40020070
 8006b40:	40020088 	.word	0x40020088
 8006b44:	400200a0 	.word	0x400200a0
 8006b48:	400200b8 	.word	0x400200b8
 8006b4c:	40020410 	.word	0x40020410
 8006b50:	40020428 	.word	0x40020428
 8006b54:	40020440 	.word	0x40020440
 8006b58:	40020458 	.word	0x40020458
 8006b5c:	40020470 	.word	0x40020470
 8006b60:	40020488 	.word	0x40020488
 8006b64:	400204a0 	.word	0x400204a0
 8006b68:	400204b8 	.word	0x400204b8
 8006b6c:	58025408 	.word	0x58025408
 8006b70:	5802541c 	.word	0x5802541c
 8006b74:	58025430 	.word	0x58025430
 8006b78:	58025444 	.word	0x58025444
 8006b7c:	58025458 	.word	0x58025458
 8006b80:	5802546c 	.word	0x5802546c
 8006b84:	58025480 	.word	0x58025480
 8006b88:	58025494 	.word	0x58025494

08006b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e226      	b.n	8006ff6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_DMA_Start_IT+0x2a>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e21f      	b.n	8006ff6 <HAL_DMA_Start_IT+0x46a>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	f040 820a 	bne.w	8006fe0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a68      	ldr	r2, [pc, #416]	@ (8006d80 <HAL_DMA_Start_IT+0x1f4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d04a      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a66      	ldr	r2, [pc, #408]	@ (8006d84 <HAL_DMA_Start_IT+0x1f8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d045      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a65      	ldr	r2, [pc, #404]	@ (8006d88 <HAL_DMA_Start_IT+0x1fc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d040      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a63      	ldr	r2, [pc, #396]	@ (8006d8c <HAL_DMA_Start_IT+0x200>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d03b      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a62      	ldr	r2, [pc, #392]	@ (8006d90 <HAL_DMA_Start_IT+0x204>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d036      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a60      	ldr	r2, [pc, #384]	@ (8006d94 <HAL_DMA_Start_IT+0x208>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d031      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8006d98 <HAL_DMA_Start_IT+0x20c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d02c      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a5d      	ldr	r2, [pc, #372]	@ (8006d9c <HAL_DMA_Start_IT+0x210>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d027      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8006da0 <HAL_DMA_Start_IT+0x214>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d022      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a5a      	ldr	r2, [pc, #360]	@ (8006da4 <HAL_DMA_Start_IT+0x218>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01d      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a59      	ldr	r2, [pc, #356]	@ (8006da8 <HAL_DMA_Start_IT+0x21c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d018      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a57      	ldr	r2, [pc, #348]	@ (8006dac <HAL_DMA_Start_IT+0x220>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a56      	ldr	r2, [pc, #344]	@ (8006db0 <HAL_DMA_Start_IT+0x224>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00e      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a54      	ldr	r2, [pc, #336]	@ (8006db4 <HAL_DMA_Start_IT+0x228>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a53      	ldr	r2, [pc, #332]	@ (8006db8 <HAL_DMA_Start_IT+0x22c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <HAL_DMA_Start_IT+0xee>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a51      	ldr	r2, [pc, #324]	@ (8006dbc <HAL_DMA_Start_IT+0x230>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d108      	bne.n	8006c8c <HAL_DMA_Start_IT+0x100>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0201 	bic.w	r2, r2, #1
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	e007      	b.n	8006c9c <HAL_DMA_Start_IT+0x110>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0201 	bic.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f001 fe6a 	bl	800897c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a34      	ldr	r2, [pc, #208]	@ (8006d80 <HAL_DMA_Start_IT+0x1f4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d04a      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a33      	ldr	r2, [pc, #204]	@ (8006d84 <HAL_DMA_Start_IT+0x1f8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d045      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a31      	ldr	r2, [pc, #196]	@ (8006d88 <HAL_DMA_Start_IT+0x1fc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d040      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a30      	ldr	r2, [pc, #192]	@ (8006d8c <HAL_DMA_Start_IT+0x200>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d03b      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8006d90 <HAL_DMA_Start_IT+0x204>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d036      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2d      	ldr	r2, [pc, #180]	@ (8006d94 <HAL_DMA_Start_IT+0x208>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d031      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d98 <HAL_DMA_Start_IT+0x20c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d02c      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8006d9c <HAL_DMA_Start_IT+0x210>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d027      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a28      	ldr	r2, [pc, #160]	@ (8006da0 <HAL_DMA_Start_IT+0x214>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d022      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a27      	ldr	r2, [pc, #156]	@ (8006da4 <HAL_DMA_Start_IT+0x218>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d01d      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a25      	ldr	r2, [pc, #148]	@ (8006da8 <HAL_DMA_Start_IT+0x21c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a24      	ldr	r2, [pc, #144]	@ (8006dac <HAL_DMA_Start_IT+0x220>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d013      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a22      	ldr	r2, [pc, #136]	@ (8006db0 <HAL_DMA_Start_IT+0x224>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a21      	ldr	r2, [pc, #132]	@ (8006db4 <HAL_DMA_Start_IT+0x228>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1f      	ldr	r2, [pc, #124]	@ (8006db8 <HAL_DMA_Start_IT+0x22c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_DMA_Start_IT+0x1bc>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1e      	ldr	r2, [pc, #120]	@ (8006dbc <HAL_DMA_Start_IT+0x230>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d101      	bne.n	8006d4c <HAL_DMA_Start_IT+0x1c0>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <HAL_DMA_Start_IT+0x1c2>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d036      	beq.n	8006dc0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f023 021e 	bic.w	r2, r3, #30
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0216 	orr.w	r2, r2, #22
 8006d64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d03e      	beq.n	8006dec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0208 	orr.w	r2, r2, #8
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	e035      	b.n	8006dec <HAL_DMA_Start_IT+0x260>
 8006d80:	40020010 	.word	0x40020010
 8006d84:	40020028 	.word	0x40020028
 8006d88:	40020040 	.word	0x40020040
 8006d8c:	40020058 	.word	0x40020058
 8006d90:	40020070 	.word	0x40020070
 8006d94:	40020088 	.word	0x40020088
 8006d98:	400200a0 	.word	0x400200a0
 8006d9c:	400200b8 	.word	0x400200b8
 8006da0:	40020410 	.word	0x40020410
 8006da4:	40020428 	.word	0x40020428
 8006da8:	40020440 	.word	0x40020440
 8006dac:	40020458 	.word	0x40020458
 8006db0:	40020470 	.word	0x40020470
 8006db4:	40020488 	.word	0x40020488
 8006db8:	400204a0 	.word	0x400204a0
 8006dbc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f023 020e 	bic.w	r2, r3, #14
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 020a 	orr.w	r2, r2, #10
 8006dd2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0204 	orr.w	r2, r2, #4
 8006dea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a83      	ldr	r2, [pc, #524]	@ (8007000 <HAL_DMA_Start_IT+0x474>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d072      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a82      	ldr	r2, [pc, #520]	@ (8007004 <HAL_DMA_Start_IT+0x478>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d06d      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a80      	ldr	r2, [pc, #512]	@ (8007008 <HAL_DMA_Start_IT+0x47c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d068      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a7f      	ldr	r2, [pc, #508]	@ (800700c <HAL_DMA_Start_IT+0x480>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d063      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7d      	ldr	r2, [pc, #500]	@ (8007010 <HAL_DMA_Start_IT+0x484>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d05e      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a7c      	ldr	r2, [pc, #496]	@ (8007014 <HAL_DMA_Start_IT+0x488>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d059      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a7a      	ldr	r2, [pc, #488]	@ (8007018 <HAL_DMA_Start_IT+0x48c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d054      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a79      	ldr	r2, [pc, #484]	@ (800701c <HAL_DMA_Start_IT+0x490>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d04f      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a77      	ldr	r2, [pc, #476]	@ (8007020 <HAL_DMA_Start_IT+0x494>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d04a      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a76      	ldr	r2, [pc, #472]	@ (8007024 <HAL_DMA_Start_IT+0x498>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d045      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a74      	ldr	r2, [pc, #464]	@ (8007028 <HAL_DMA_Start_IT+0x49c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d040      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a73      	ldr	r2, [pc, #460]	@ (800702c <HAL_DMA_Start_IT+0x4a0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d03b      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a71      	ldr	r2, [pc, #452]	@ (8007030 <HAL_DMA_Start_IT+0x4a4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d036      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a70      	ldr	r2, [pc, #448]	@ (8007034 <HAL_DMA_Start_IT+0x4a8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d031      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8007038 <HAL_DMA_Start_IT+0x4ac>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d02c      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6d      	ldr	r2, [pc, #436]	@ (800703c <HAL_DMA_Start_IT+0x4b0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d027      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6b      	ldr	r2, [pc, #428]	@ (8007040 <HAL_DMA_Start_IT+0x4b4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d022      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6a      	ldr	r2, [pc, #424]	@ (8007044 <HAL_DMA_Start_IT+0x4b8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d01d      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a68      	ldr	r2, [pc, #416]	@ (8007048 <HAL_DMA_Start_IT+0x4bc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d018      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a67      	ldr	r2, [pc, #412]	@ (800704c <HAL_DMA_Start_IT+0x4c0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d013      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a65      	ldr	r2, [pc, #404]	@ (8007050 <HAL_DMA_Start_IT+0x4c4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d00e      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a64      	ldr	r2, [pc, #400]	@ (8007054 <HAL_DMA_Start_IT+0x4c8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d009      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a62      	ldr	r2, [pc, #392]	@ (8007058 <HAL_DMA_Start_IT+0x4cc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <HAL_DMA_Start_IT+0x350>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a61      	ldr	r2, [pc, #388]	@ (800705c <HAL_DMA_Start_IT+0x4d0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d101      	bne.n	8006ee0 <HAL_DMA_Start_IT+0x354>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <HAL_DMA_Start_IT+0x356>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01a      	beq.n	8006f1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d007      	beq.n	8006f04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006efe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a37      	ldr	r2, [pc, #220]	@ (8007000 <HAL_DMA_Start_IT+0x474>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d04a      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a36      	ldr	r2, [pc, #216]	@ (8007004 <HAL_DMA_Start_IT+0x478>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d045      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a34      	ldr	r2, [pc, #208]	@ (8007008 <HAL_DMA_Start_IT+0x47c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d040      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a33      	ldr	r2, [pc, #204]	@ (800700c <HAL_DMA_Start_IT+0x480>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d03b      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a31      	ldr	r2, [pc, #196]	@ (8007010 <HAL_DMA_Start_IT+0x484>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d036      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a30      	ldr	r2, [pc, #192]	@ (8007014 <HAL_DMA_Start_IT+0x488>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d031      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8007018 <HAL_DMA_Start_IT+0x48c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d02c      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2d      	ldr	r2, [pc, #180]	@ (800701c <HAL_DMA_Start_IT+0x490>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d027      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a2b      	ldr	r2, [pc, #172]	@ (8007020 <HAL_DMA_Start_IT+0x494>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d022      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8007024 <HAL_DMA_Start_IT+0x498>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d01d      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a28      	ldr	r2, [pc, #160]	@ (8007028 <HAL_DMA_Start_IT+0x49c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d018      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a27      	ldr	r2, [pc, #156]	@ (800702c <HAL_DMA_Start_IT+0x4a0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d013      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a25      	ldr	r2, [pc, #148]	@ (8007030 <HAL_DMA_Start_IT+0x4a4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00e      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a24      	ldr	r2, [pc, #144]	@ (8007034 <HAL_DMA_Start_IT+0x4a8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d009      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a22      	ldr	r2, [pc, #136]	@ (8007038 <HAL_DMA_Start_IT+0x4ac>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d004      	beq.n	8006fbc <HAL_DMA_Start_IT+0x430>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a21      	ldr	r2, [pc, #132]	@ (800703c <HAL_DMA_Start_IT+0x4b0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d108      	bne.n	8006fce <HAL_DMA_Start_IT+0x442>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e012      	b.n	8006ff4 <HAL_DMA_Start_IT+0x468>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 0201 	orr.w	r2, r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e009      	b.n	8006ff4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fe6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40020010 	.word	0x40020010
 8007004:	40020028 	.word	0x40020028
 8007008:	40020040 	.word	0x40020040
 800700c:	40020058 	.word	0x40020058
 8007010:	40020070 	.word	0x40020070
 8007014:	40020088 	.word	0x40020088
 8007018:	400200a0 	.word	0x400200a0
 800701c:	400200b8 	.word	0x400200b8
 8007020:	40020410 	.word	0x40020410
 8007024:	40020428 	.word	0x40020428
 8007028:	40020440 	.word	0x40020440
 800702c:	40020458 	.word	0x40020458
 8007030:	40020470 	.word	0x40020470
 8007034:	40020488 	.word	0x40020488
 8007038:	400204a0 	.word	0x400204a0
 800703c:	400204b8 	.word	0x400204b8
 8007040:	58025408 	.word	0x58025408
 8007044:	5802541c 	.word	0x5802541c
 8007048:	58025430 	.word	0x58025430
 800704c:	58025444 	.word	0x58025444
 8007050:	58025458 	.word	0x58025458
 8007054:	5802546c 	.word	0x5802546c
 8007058:	58025480 	.word	0x58025480
 800705c:	58025494 	.word	0x58025494

08007060 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007068:	f7ff f8a0 	bl	80061ac <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e2dc      	b.n	8007632 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d008      	beq.n	8007096 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2280      	movs	r2, #128	@ 0x80
 8007088:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e2cd      	b.n	8007632 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a76      	ldr	r2, [pc, #472]	@ (8007274 <HAL_DMA_Abort+0x214>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d04a      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a74      	ldr	r2, [pc, #464]	@ (8007278 <HAL_DMA_Abort+0x218>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d045      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a73      	ldr	r2, [pc, #460]	@ (800727c <HAL_DMA_Abort+0x21c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d040      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a71      	ldr	r2, [pc, #452]	@ (8007280 <HAL_DMA_Abort+0x220>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d03b      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a70      	ldr	r2, [pc, #448]	@ (8007284 <HAL_DMA_Abort+0x224>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d036      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a6e      	ldr	r2, [pc, #440]	@ (8007288 <HAL_DMA_Abort+0x228>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d031      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a6d      	ldr	r2, [pc, #436]	@ (800728c <HAL_DMA_Abort+0x22c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d02c      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a6b      	ldr	r2, [pc, #428]	@ (8007290 <HAL_DMA_Abort+0x230>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d027      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a6a      	ldr	r2, [pc, #424]	@ (8007294 <HAL_DMA_Abort+0x234>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d022      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a68      	ldr	r2, [pc, #416]	@ (8007298 <HAL_DMA_Abort+0x238>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01d      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a67      	ldr	r2, [pc, #412]	@ (800729c <HAL_DMA_Abort+0x23c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a65      	ldr	r2, [pc, #404]	@ (80072a0 <HAL_DMA_Abort+0x240>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d013      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a64      	ldr	r2, [pc, #400]	@ (80072a4 <HAL_DMA_Abort+0x244>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a62      	ldr	r2, [pc, #392]	@ (80072a8 <HAL_DMA_Abort+0x248>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a61      	ldr	r2, [pc, #388]	@ (80072ac <HAL_DMA_Abort+0x24c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_DMA_Abort+0xd6>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a5f      	ldr	r2, [pc, #380]	@ (80072b0 <HAL_DMA_Abort+0x250>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d101      	bne.n	800713a <HAL_DMA_Abort+0xda>
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <HAL_DMA_Abort+0xdc>
 800713a:	2300      	movs	r3, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d013      	beq.n	8007168 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 021e 	bic.w	r2, r2, #30
 800714e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695a      	ldr	r2, [r3, #20]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800715e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	e00a      	b.n	800717e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 020e 	bic.w	r2, r2, #14
 8007176:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a3c      	ldr	r2, [pc, #240]	@ (8007274 <HAL_DMA_Abort+0x214>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d072      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a3a      	ldr	r2, [pc, #232]	@ (8007278 <HAL_DMA_Abort+0x218>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d06d      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a39      	ldr	r2, [pc, #228]	@ (800727c <HAL_DMA_Abort+0x21c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d068      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a37      	ldr	r2, [pc, #220]	@ (8007280 <HAL_DMA_Abort+0x220>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d063      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a36      	ldr	r2, [pc, #216]	@ (8007284 <HAL_DMA_Abort+0x224>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d05e      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a34      	ldr	r2, [pc, #208]	@ (8007288 <HAL_DMA_Abort+0x228>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d059      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a33      	ldr	r2, [pc, #204]	@ (800728c <HAL_DMA_Abort+0x22c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d054      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a31      	ldr	r2, [pc, #196]	@ (8007290 <HAL_DMA_Abort+0x230>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d04f      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a30      	ldr	r2, [pc, #192]	@ (8007294 <HAL_DMA_Abort+0x234>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d04a      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2e      	ldr	r2, [pc, #184]	@ (8007298 <HAL_DMA_Abort+0x238>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d045      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2d      	ldr	r2, [pc, #180]	@ (800729c <HAL_DMA_Abort+0x23c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d040      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2b      	ldr	r2, [pc, #172]	@ (80072a0 <HAL_DMA_Abort+0x240>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d03b      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2a      	ldr	r2, [pc, #168]	@ (80072a4 <HAL_DMA_Abort+0x244>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d036      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a28      	ldr	r2, [pc, #160]	@ (80072a8 <HAL_DMA_Abort+0x248>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d031      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a27      	ldr	r2, [pc, #156]	@ (80072ac <HAL_DMA_Abort+0x24c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d02c      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a25      	ldr	r2, [pc, #148]	@ (80072b0 <HAL_DMA_Abort+0x250>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d027      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a24      	ldr	r2, [pc, #144]	@ (80072b4 <HAL_DMA_Abort+0x254>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a22      	ldr	r2, [pc, #136]	@ (80072b8 <HAL_DMA_Abort+0x258>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a21      	ldr	r2, [pc, #132]	@ (80072bc <HAL_DMA_Abort+0x25c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1f      	ldr	r2, [pc, #124]	@ (80072c0 <HAL_DMA_Abort+0x260>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1e      	ldr	r2, [pc, #120]	@ (80072c4 <HAL_DMA_Abort+0x264>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <HAL_DMA_Abort+0x268>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1b      	ldr	r2, [pc, #108]	@ (80072cc <HAL_DMA_Abort+0x26c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <HAL_DMA_Abort+0x20e>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a19      	ldr	r2, [pc, #100]	@ (80072d0 <HAL_DMA_Abort+0x270>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d132      	bne.n	80072d4 <HAL_DMA_Abort+0x274>
 800726e:	2301      	movs	r3, #1
 8007270:	e031      	b.n	80072d6 <HAL_DMA_Abort+0x276>
 8007272:	bf00      	nop
 8007274:	40020010 	.word	0x40020010
 8007278:	40020028 	.word	0x40020028
 800727c:	40020040 	.word	0x40020040
 8007280:	40020058 	.word	0x40020058
 8007284:	40020070 	.word	0x40020070
 8007288:	40020088 	.word	0x40020088
 800728c:	400200a0 	.word	0x400200a0
 8007290:	400200b8 	.word	0x400200b8
 8007294:	40020410 	.word	0x40020410
 8007298:	40020428 	.word	0x40020428
 800729c:	40020440 	.word	0x40020440
 80072a0:	40020458 	.word	0x40020458
 80072a4:	40020470 	.word	0x40020470
 80072a8:	40020488 	.word	0x40020488
 80072ac:	400204a0 	.word	0x400204a0
 80072b0:	400204b8 	.word	0x400204b8
 80072b4:	58025408 	.word	0x58025408
 80072b8:	5802541c 	.word	0x5802541c
 80072bc:	58025430 	.word	0x58025430
 80072c0:	58025444 	.word	0x58025444
 80072c4:	58025458 	.word	0x58025458
 80072c8:	5802546c 	.word	0x5802546c
 80072cc:	58025480 	.word	0x58025480
 80072d0:	58025494 	.word	0x58025494
 80072d4:	2300      	movs	r3, #0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a6d      	ldr	r2, [pc, #436]	@ (80074a4 <HAL_DMA_Abort+0x444>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d04a      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a6b      	ldr	r2, [pc, #428]	@ (80074a8 <HAL_DMA_Abort+0x448>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d045      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a6a      	ldr	r2, [pc, #424]	@ (80074ac <HAL_DMA_Abort+0x44c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d040      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a68      	ldr	r2, [pc, #416]	@ (80074b0 <HAL_DMA_Abort+0x450>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d03b      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a67      	ldr	r2, [pc, #412]	@ (80074b4 <HAL_DMA_Abort+0x454>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d036      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a65      	ldr	r2, [pc, #404]	@ (80074b8 <HAL_DMA_Abort+0x458>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d031      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a64      	ldr	r2, [pc, #400]	@ (80074bc <HAL_DMA_Abort+0x45c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d02c      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a62      	ldr	r2, [pc, #392]	@ (80074c0 <HAL_DMA_Abort+0x460>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d027      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a61      	ldr	r2, [pc, #388]	@ (80074c4 <HAL_DMA_Abort+0x464>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a5f      	ldr	r2, [pc, #380]	@ (80074c8 <HAL_DMA_Abort+0x468>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a5e      	ldr	r2, [pc, #376]	@ (80074cc <HAL_DMA_Abort+0x46c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a5c      	ldr	r2, [pc, #368]	@ (80074d0 <HAL_DMA_Abort+0x470>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a5b      	ldr	r2, [pc, #364]	@ (80074d4 <HAL_DMA_Abort+0x474>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a59      	ldr	r2, [pc, #356]	@ (80074d8 <HAL_DMA_Abort+0x478>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a58      	ldr	r2, [pc, #352]	@ (80074dc <HAL_DMA_Abort+0x47c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_DMA_Abort+0x32a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a56      	ldr	r2, [pc, #344]	@ (80074e0 <HAL_DMA_Abort+0x480>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d108      	bne.n	800739c <HAL_DMA_Abort+0x33c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0201 	bic.w	r2, r2, #1
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	e007      	b.n	80073ac <HAL_DMA_Abort+0x34c>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0201 	bic.w	r2, r2, #1
 80073aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80073ac:	e013      	b.n	80073d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073ae:	f7fe fefd 	bl	80061ac <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b05      	cmp	r3, #5
 80073ba:	d90c      	bls.n	80073d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2203      	movs	r2, #3
 80073c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e12d      	b.n	8007632 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e5      	bne.n	80073ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a2f      	ldr	r2, [pc, #188]	@ (80074a4 <HAL_DMA_Abort+0x444>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d04a      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a2d      	ldr	r2, [pc, #180]	@ (80074a8 <HAL_DMA_Abort+0x448>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d045      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a2c      	ldr	r2, [pc, #176]	@ (80074ac <HAL_DMA_Abort+0x44c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d040      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a2a      	ldr	r2, [pc, #168]	@ (80074b0 <HAL_DMA_Abort+0x450>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d03b      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a29      	ldr	r2, [pc, #164]	@ (80074b4 <HAL_DMA_Abort+0x454>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d036      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a27      	ldr	r2, [pc, #156]	@ (80074b8 <HAL_DMA_Abort+0x458>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d031      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a26      	ldr	r2, [pc, #152]	@ (80074bc <HAL_DMA_Abort+0x45c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d02c      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a24      	ldr	r2, [pc, #144]	@ (80074c0 <HAL_DMA_Abort+0x460>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d027      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a23      	ldr	r2, [pc, #140]	@ (80074c4 <HAL_DMA_Abort+0x464>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d022      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a21      	ldr	r2, [pc, #132]	@ (80074c8 <HAL_DMA_Abort+0x468>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d01d      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a20      	ldr	r2, [pc, #128]	@ (80074cc <HAL_DMA_Abort+0x46c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d018      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1e      	ldr	r2, [pc, #120]	@ (80074d0 <HAL_DMA_Abort+0x470>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d013      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1d      	ldr	r2, [pc, #116]	@ (80074d4 <HAL_DMA_Abort+0x474>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00e      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1b      	ldr	r2, [pc, #108]	@ (80074d8 <HAL_DMA_Abort+0x478>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d009      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1a      	ldr	r2, [pc, #104]	@ (80074dc <HAL_DMA_Abort+0x47c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d004      	beq.n	8007482 <HAL_DMA_Abort+0x422>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a18      	ldr	r2, [pc, #96]	@ (80074e0 <HAL_DMA_Abort+0x480>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d101      	bne.n	8007486 <HAL_DMA_Abort+0x426>
 8007482:	2301      	movs	r3, #1
 8007484:	e000      	b.n	8007488 <HAL_DMA_Abort+0x428>
 8007486:	2300      	movs	r3, #0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d02b      	beq.n	80074e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007490:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007496:	f003 031f 	and.w	r3, r3, #31
 800749a:	223f      	movs	r2, #63	@ 0x3f
 800749c:	409a      	lsls	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	609a      	str	r2, [r3, #8]
 80074a2:	e02a      	b.n	80074fa <HAL_DMA_Abort+0x49a>
 80074a4:	40020010 	.word	0x40020010
 80074a8:	40020028 	.word	0x40020028
 80074ac:	40020040 	.word	0x40020040
 80074b0:	40020058 	.word	0x40020058
 80074b4:	40020070 	.word	0x40020070
 80074b8:	40020088 	.word	0x40020088
 80074bc:	400200a0 	.word	0x400200a0
 80074c0:	400200b8 	.word	0x400200b8
 80074c4:	40020410 	.word	0x40020410
 80074c8:	40020428 	.word	0x40020428
 80074cc:	40020440 	.word	0x40020440
 80074d0:	40020458 	.word	0x40020458
 80074d4:	40020470 	.word	0x40020470
 80074d8:	40020488 	.word	0x40020488
 80074dc:	400204a0 	.word	0x400204a0
 80074e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ee:	f003 031f 	and.w	r3, r3, #31
 80074f2:	2201      	movs	r2, #1
 80074f4:	409a      	lsls	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a4f      	ldr	r2, [pc, #316]	@ (800763c <HAL_DMA_Abort+0x5dc>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d072      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a4d      	ldr	r2, [pc, #308]	@ (8007640 <HAL_DMA_Abort+0x5e0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d06d      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a4c      	ldr	r2, [pc, #304]	@ (8007644 <HAL_DMA_Abort+0x5e4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d068      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a4a      	ldr	r2, [pc, #296]	@ (8007648 <HAL_DMA_Abort+0x5e8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d063      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a49      	ldr	r2, [pc, #292]	@ (800764c <HAL_DMA_Abort+0x5ec>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d05e      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a47      	ldr	r2, [pc, #284]	@ (8007650 <HAL_DMA_Abort+0x5f0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d059      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a46      	ldr	r2, [pc, #280]	@ (8007654 <HAL_DMA_Abort+0x5f4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d054      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a44      	ldr	r2, [pc, #272]	@ (8007658 <HAL_DMA_Abort+0x5f8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d04f      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a43      	ldr	r2, [pc, #268]	@ (800765c <HAL_DMA_Abort+0x5fc>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d04a      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a41      	ldr	r2, [pc, #260]	@ (8007660 <HAL_DMA_Abort+0x600>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d045      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a40      	ldr	r2, [pc, #256]	@ (8007664 <HAL_DMA_Abort+0x604>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d040      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a3e      	ldr	r2, [pc, #248]	@ (8007668 <HAL_DMA_Abort+0x608>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d03b      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a3d      	ldr	r2, [pc, #244]	@ (800766c <HAL_DMA_Abort+0x60c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d036      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a3b      	ldr	r2, [pc, #236]	@ (8007670 <HAL_DMA_Abort+0x610>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d031      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a3a      	ldr	r2, [pc, #232]	@ (8007674 <HAL_DMA_Abort+0x614>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d02c      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a38      	ldr	r2, [pc, #224]	@ (8007678 <HAL_DMA_Abort+0x618>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d027      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a37      	ldr	r2, [pc, #220]	@ (800767c <HAL_DMA_Abort+0x61c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d022      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a35      	ldr	r2, [pc, #212]	@ (8007680 <HAL_DMA_Abort+0x620>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d01d      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a34      	ldr	r2, [pc, #208]	@ (8007684 <HAL_DMA_Abort+0x624>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d018      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a32      	ldr	r2, [pc, #200]	@ (8007688 <HAL_DMA_Abort+0x628>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a31      	ldr	r2, [pc, #196]	@ (800768c <HAL_DMA_Abort+0x62c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00e      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007690 <HAL_DMA_Abort+0x630>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d009      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2e      	ldr	r2, [pc, #184]	@ (8007694 <HAL_DMA_Abort+0x634>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d004      	beq.n	80075ea <HAL_DMA_Abort+0x58a>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007698 <HAL_DMA_Abort+0x638>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d101      	bne.n	80075ee <HAL_DMA_Abort+0x58e>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <HAL_DMA_Abort+0x590>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d015      	beq.n	8007620 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80075fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00c      	beq.n	8007620 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007614:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800761e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	40020010 	.word	0x40020010
 8007640:	40020028 	.word	0x40020028
 8007644:	40020040 	.word	0x40020040
 8007648:	40020058 	.word	0x40020058
 800764c:	40020070 	.word	0x40020070
 8007650:	40020088 	.word	0x40020088
 8007654:	400200a0 	.word	0x400200a0
 8007658:	400200b8 	.word	0x400200b8
 800765c:	40020410 	.word	0x40020410
 8007660:	40020428 	.word	0x40020428
 8007664:	40020440 	.word	0x40020440
 8007668:	40020458 	.word	0x40020458
 800766c:	40020470 	.word	0x40020470
 8007670:	40020488 	.word	0x40020488
 8007674:	400204a0 	.word	0x400204a0
 8007678:	400204b8 	.word	0x400204b8
 800767c:	58025408 	.word	0x58025408
 8007680:	5802541c 	.word	0x5802541c
 8007684:	58025430 	.word	0x58025430
 8007688:	58025444 	.word	0x58025444
 800768c:	58025458 	.word	0x58025458
 8007690:	5802546c 	.word	0x5802546c
 8007694:	58025480 	.word	0x58025480
 8007698:	58025494 	.word	0x58025494

0800769c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e237      	b.n	8007b1e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d004      	beq.n	80076c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2280      	movs	r2, #128	@ 0x80
 80076be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e22c      	b.n	8007b1e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a5c      	ldr	r2, [pc, #368]	@ (800783c <HAL_DMA_Abort_IT+0x1a0>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d04a      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a5b      	ldr	r2, [pc, #364]	@ (8007840 <HAL_DMA_Abort_IT+0x1a4>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d045      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a59      	ldr	r2, [pc, #356]	@ (8007844 <HAL_DMA_Abort_IT+0x1a8>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d040      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a58      	ldr	r2, [pc, #352]	@ (8007848 <HAL_DMA_Abort_IT+0x1ac>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d03b      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a56      	ldr	r2, [pc, #344]	@ (800784c <HAL_DMA_Abort_IT+0x1b0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d036      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a55      	ldr	r2, [pc, #340]	@ (8007850 <HAL_DMA_Abort_IT+0x1b4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d031      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a53      	ldr	r2, [pc, #332]	@ (8007854 <HAL_DMA_Abort_IT+0x1b8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d02c      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a52      	ldr	r2, [pc, #328]	@ (8007858 <HAL_DMA_Abort_IT+0x1bc>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d027      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a50      	ldr	r2, [pc, #320]	@ (800785c <HAL_DMA_Abort_IT+0x1c0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d022      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4f      	ldr	r2, [pc, #316]	@ (8007860 <HAL_DMA_Abort_IT+0x1c4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d01d      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a4d      	ldr	r2, [pc, #308]	@ (8007864 <HAL_DMA_Abort_IT+0x1c8>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d018      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a4c      	ldr	r2, [pc, #304]	@ (8007868 <HAL_DMA_Abort_IT+0x1cc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a4a      	ldr	r2, [pc, #296]	@ (800786c <HAL_DMA_Abort_IT+0x1d0>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00e      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a49      	ldr	r2, [pc, #292]	@ (8007870 <HAL_DMA_Abort_IT+0x1d4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a47      	ldr	r2, [pc, #284]	@ (8007874 <HAL_DMA_Abort_IT+0x1d8>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_DMA_Abort_IT+0xc8>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a46      	ldr	r2, [pc, #280]	@ (8007878 <HAL_DMA_Abort_IT+0x1dc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d101      	bne.n	8007768 <HAL_DMA_Abort_IT+0xcc>
 8007764:	2301      	movs	r3, #1
 8007766:	e000      	b.n	800776a <HAL_DMA_Abort_IT+0xce>
 8007768:	2300      	movs	r3, #0
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8086 	beq.w	800787c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2204      	movs	r2, #4
 8007774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a2f      	ldr	r2, [pc, #188]	@ (800783c <HAL_DMA_Abort_IT+0x1a0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d04a      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a2e      	ldr	r2, [pc, #184]	@ (8007840 <HAL_DMA_Abort_IT+0x1a4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d045      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a2c      	ldr	r2, [pc, #176]	@ (8007844 <HAL_DMA_Abort_IT+0x1a8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d040      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a2b      	ldr	r2, [pc, #172]	@ (8007848 <HAL_DMA_Abort_IT+0x1ac>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d03b      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a29      	ldr	r2, [pc, #164]	@ (800784c <HAL_DMA_Abort_IT+0x1b0>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d036      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a28      	ldr	r2, [pc, #160]	@ (8007850 <HAL_DMA_Abort_IT+0x1b4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d031      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a26      	ldr	r2, [pc, #152]	@ (8007854 <HAL_DMA_Abort_IT+0x1b8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d02c      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a25      	ldr	r2, [pc, #148]	@ (8007858 <HAL_DMA_Abort_IT+0x1bc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d027      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a23      	ldr	r2, [pc, #140]	@ (800785c <HAL_DMA_Abort_IT+0x1c0>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d022      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a22      	ldr	r2, [pc, #136]	@ (8007860 <HAL_DMA_Abort_IT+0x1c4>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d01d      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a20      	ldr	r2, [pc, #128]	@ (8007864 <HAL_DMA_Abort_IT+0x1c8>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d018      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007868 <HAL_DMA_Abort_IT+0x1cc>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d013      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1d      	ldr	r2, [pc, #116]	@ (800786c <HAL_DMA_Abort_IT+0x1d0>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00e      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007870 <HAL_DMA_Abort_IT+0x1d4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d009      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a1a      	ldr	r2, [pc, #104]	@ (8007874 <HAL_DMA_Abort_IT+0x1d8>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d004      	beq.n	8007818 <HAL_DMA_Abort_IT+0x17c>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a19      	ldr	r2, [pc, #100]	@ (8007878 <HAL_DMA_Abort_IT+0x1dc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d108      	bne.n	800782a <HAL_DMA_Abort_IT+0x18e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0201 	bic.w	r2, r2, #1
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	e178      	b.n	8007b1c <HAL_DMA_Abort_IT+0x480>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	e16f      	b.n	8007b1c <HAL_DMA_Abort_IT+0x480>
 800783c:	40020010 	.word	0x40020010
 8007840:	40020028 	.word	0x40020028
 8007844:	40020040 	.word	0x40020040
 8007848:	40020058 	.word	0x40020058
 800784c:	40020070 	.word	0x40020070
 8007850:	40020088 	.word	0x40020088
 8007854:	400200a0 	.word	0x400200a0
 8007858:	400200b8 	.word	0x400200b8
 800785c:	40020410 	.word	0x40020410
 8007860:	40020428 	.word	0x40020428
 8007864:	40020440 	.word	0x40020440
 8007868:	40020458 	.word	0x40020458
 800786c:	40020470 	.word	0x40020470
 8007870:	40020488 	.word	0x40020488
 8007874:	400204a0 	.word	0x400204a0
 8007878:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 020e 	bic.w	r2, r2, #14
 800788a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a6c      	ldr	r2, [pc, #432]	@ (8007a44 <HAL_DMA_Abort_IT+0x3a8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d04a      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a6b      	ldr	r2, [pc, #428]	@ (8007a48 <HAL_DMA_Abort_IT+0x3ac>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d045      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a69      	ldr	r2, [pc, #420]	@ (8007a4c <HAL_DMA_Abort_IT+0x3b0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d040      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a68      	ldr	r2, [pc, #416]	@ (8007a50 <HAL_DMA_Abort_IT+0x3b4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d03b      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a66      	ldr	r2, [pc, #408]	@ (8007a54 <HAL_DMA_Abort_IT+0x3b8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d036      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a65      	ldr	r2, [pc, #404]	@ (8007a58 <HAL_DMA_Abort_IT+0x3bc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d031      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a63      	ldr	r2, [pc, #396]	@ (8007a5c <HAL_DMA_Abort_IT+0x3c0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d02c      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a62      	ldr	r2, [pc, #392]	@ (8007a60 <HAL_DMA_Abort_IT+0x3c4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d027      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a60      	ldr	r2, [pc, #384]	@ (8007a64 <HAL_DMA_Abort_IT+0x3c8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d022      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a5f      	ldr	r2, [pc, #380]	@ (8007a68 <HAL_DMA_Abort_IT+0x3cc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d01d      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a5d      	ldr	r2, [pc, #372]	@ (8007a6c <HAL_DMA_Abort_IT+0x3d0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d018      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a5c      	ldr	r2, [pc, #368]	@ (8007a70 <HAL_DMA_Abort_IT+0x3d4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a5a      	ldr	r2, [pc, #360]	@ (8007a74 <HAL_DMA_Abort_IT+0x3d8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00e      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a59      	ldr	r2, [pc, #356]	@ (8007a78 <HAL_DMA_Abort_IT+0x3dc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a57      	ldr	r2, [pc, #348]	@ (8007a7c <HAL_DMA_Abort_IT+0x3e0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_DMA_Abort_IT+0x290>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a56      	ldr	r2, [pc, #344]	@ (8007a80 <HAL_DMA_Abort_IT+0x3e4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d108      	bne.n	800793e <HAL_DMA_Abort_IT+0x2a2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0201 	bic.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e007      	b.n	800794e <HAL_DMA_Abort_IT+0x2b2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a3c      	ldr	r2, [pc, #240]	@ (8007a44 <HAL_DMA_Abort_IT+0x3a8>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d072      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a3a      	ldr	r2, [pc, #232]	@ (8007a48 <HAL_DMA_Abort_IT+0x3ac>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d06d      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a39      	ldr	r2, [pc, #228]	@ (8007a4c <HAL_DMA_Abort_IT+0x3b0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d068      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a37      	ldr	r2, [pc, #220]	@ (8007a50 <HAL_DMA_Abort_IT+0x3b4>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d063      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a36      	ldr	r2, [pc, #216]	@ (8007a54 <HAL_DMA_Abort_IT+0x3b8>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d05e      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a34      	ldr	r2, [pc, #208]	@ (8007a58 <HAL_DMA_Abort_IT+0x3bc>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d059      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a33      	ldr	r2, [pc, #204]	@ (8007a5c <HAL_DMA_Abort_IT+0x3c0>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d054      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a31      	ldr	r2, [pc, #196]	@ (8007a60 <HAL_DMA_Abort_IT+0x3c4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d04f      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a30      	ldr	r2, [pc, #192]	@ (8007a64 <HAL_DMA_Abort_IT+0x3c8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d04a      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a2e      	ldr	r2, [pc, #184]	@ (8007a68 <HAL_DMA_Abort_IT+0x3cc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d045      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a2d      	ldr	r2, [pc, #180]	@ (8007a6c <HAL_DMA_Abort_IT+0x3d0>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d040      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007a70 <HAL_DMA_Abort_IT+0x3d4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d03b      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007a74 <HAL_DMA_Abort_IT+0x3d8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d036      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a28      	ldr	r2, [pc, #160]	@ (8007a78 <HAL_DMA_Abort_IT+0x3dc>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d031      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a27      	ldr	r2, [pc, #156]	@ (8007a7c <HAL_DMA_Abort_IT+0x3e0>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d02c      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a25      	ldr	r2, [pc, #148]	@ (8007a80 <HAL_DMA_Abort_IT+0x3e4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d027      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a24      	ldr	r2, [pc, #144]	@ (8007a84 <HAL_DMA_Abort_IT+0x3e8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d022      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a22      	ldr	r2, [pc, #136]	@ (8007a88 <HAL_DMA_Abort_IT+0x3ec>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d01d      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a21      	ldr	r2, [pc, #132]	@ (8007a8c <HAL_DMA_Abort_IT+0x3f0>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d018      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a1f      	ldr	r2, [pc, #124]	@ (8007a90 <HAL_DMA_Abort_IT+0x3f4>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d013      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a94 <HAL_DMA_Abort_IT+0x3f8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00e      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a1c      	ldr	r2, [pc, #112]	@ (8007a98 <HAL_DMA_Abort_IT+0x3fc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d009      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007a9c <HAL_DMA_Abort_IT+0x400>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d004      	beq.n	8007a3e <HAL_DMA_Abort_IT+0x3a2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a19      	ldr	r2, [pc, #100]	@ (8007aa0 <HAL_DMA_Abort_IT+0x404>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d132      	bne.n	8007aa4 <HAL_DMA_Abort_IT+0x408>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e031      	b.n	8007aa6 <HAL_DMA_Abort_IT+0x40a>
 8007a42:	bf00      	nop
 8007a44:	40020010 	.word	0x40020010
 8007a48:	40020028 	.word	0x40020028
 8007a4c:	40020040 	.word	0x40020040
 8007a50:	40020058 	.word	0x40020058
 8007a54:	40020070 	.word	0x40020070
 8007a58:	40020088 	.word	0x40020088
 8007a5c:	400200a0 	.word	0x400200a0
 8007a60:	400200b8 	.word	0x400200b8
 8007a64:	40020410 	.word	0x40020410
 8007a68:	40020428 	.word	0x40020428
 8007a6c:	40020440 	.word	0x40020440
 8007a70:	40020458 	.word	0x40020458
 8007a74:	40020470 	.word	0x40020470
 8007a78:	40020488 	.word	0x40020488
 8007a7c:	400204a0 	.word	0x400204a0
 8007a80:	400204b8 	.word	0x400204b8
 8007a84:	58025408 	.word	0x58025408
 8007a88:	5802541c 	.word	0x5802541c
 8007a8c:	58025430 	.word	0x58025430
 8007a90:	58025444 	.word	0x58025444
 8007a94:	58025458 	.word	0x58025458
 8007a98:	5802546c 	.word	0x5802546c
 8007a9c:	58025480 	.word	0x58025480
 8007aa0:	58025494 	.word	0x58025494
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d028      	beq.n	8007afc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ab4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ab8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007abe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac4:	f003 031f 	and.w	r3, r3, #31
 8007ac8:	2201      	movs	r2, #1
 8007aca:	409a      	lsls	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007ad8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007af0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007afa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d003      	beq.n	8007b1c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop

08007b28 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	@ 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007b34:	4b67      	ldr	r3, [pc, #412]	@ (8007cd4 <HAL_DMA_IRQHandler+0x1ac>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a67      	ldr	r2, [pc, #412]	@ (8007cd8 <HAL_DMA_IRQHandler+0x1b0>)
 8007b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3e:	0a9b      	lsrs	r3, r3, #10
 8007b40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b46:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a5f      	ldr	r2, [pc, #380]	@ (8007cdc <HAL_DMA_IRQHandler+0x1b4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d04a      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a5d      	ldr	r2, [pc, #372]	@ (8007ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d045      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a5c      	ldr	r2, [pc, #368]	@ (8007ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d040      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8007ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d03b      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a59      	ldr	r2, [pc, #356]	@ (8007cec <HAL_DMA_IRQHandler+0x1c4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d036      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a57      	ldr	r2, [pc, #348]	@ (8007cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d031      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a56      	ldr	r2, [pc, #344]	@ (8007cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d02c      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a54      	ldr	r2, [pc, #336]	@ (8007cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d027      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a53      	ldr	r2, [pc, #332]	@ (8007cfc <HAL_DMA_IRQHandler+0x1d4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d022      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a51      	ldr	r2, [pc, #324]	@ (8007d00 <HAL_DMA_IRQHandler+0x1d8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d01d      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a50      	ldr	r2, [pc, #320]	@ (8007d04 <HAL_DMA_IRQHandler+0x1dc>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d018      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8007d08 <HAL_DMA_IRQHandler+0x1e0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d013      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a4d      	ldr	r2, [pc, #308]	@ (8007d0c <HAL_DMA_IRQHandler+0x1e4>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00e      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a4b      	ldr	r2, [pc, #300]	@ (8007d10 <HAL_DMA_IRQHandler+0x1e8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d009      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a4a      	ldr	r2, [pc, #296]	@ (8007d14 <HAL_DMA_IRQHandler+0x1ec>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d004      	beq.n	8007bfa <HAL_DMA_IRQHandler+0xd2>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a48      	ldr	r2, [pc, #288]	@ (8007d18 <HAL_DMA_IRQHandler+0x1f0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d101      	bne.n	8007bfe <HAL_DMA_IRQHandler+0xd6>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <HAL_DMA_IRQHandler+0xd8>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 842b 	beq.w	800845c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c0a:	f003 031f 	and.w	r3, r3, #31
 8007c0e:	2208      	movs	r2, #8
 8007c10:	409a      	lsls	r2, r3
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	4013      	ands	r3, r2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 80a2 	beq.w	8007d60 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a2e      	ldr	r2, [pc, #184]	@ (8007cdc <HAL_DMA_IRQHandler+0x1b4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d04a      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8007ce0 <HAL_DMA_IRQHandler+0x1b8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d045      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a2b      	ldr	r2, [pc, #172]	@ (8007ce4 <HAL_DMA_IRQHandler+0x1bc>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d040      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8007ce8 <HAL_DMA_IRQHandler+0x1c0>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d03b      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a28      	ldr	r2, [pc, #160]	@ (8007cec <HAL_DMA_IRQHandler+0x1c4>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d036      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a27      	ldr	r2, [pc, #156]	@ (8007cf0 <HAL_DMA_IRQHandler+0x1c8>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d031      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a25      	ldr	r2, [pc, #148]	@ (8007cf4 <HAL_DMA_IRQHandler+0x1cc>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d02c      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a24      	ldr	r2, [pc, #144]	@ (8007cf8 <HAL_DMA_IRQHandler+0x1d0>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d027      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a22      	ldr	r2, [pc, #136]	@ (8007cfc <HAL_DMA_IRQHandler+0x1d4>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d022      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a21      	ldr	r2, [pc, #132]	@ (8007d00 <HAL_DMA_IRQHandler+0x1d8>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d01d      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1f      	ldr	r2, [pc, #124]	@ (8007d04 <HAL_DMA_IRQHandler+0x1dc>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d018      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007d08 <HAL_DMA_IRQHandler+0x1e0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d013      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1c      	ldr	r2, [pc, #112]	@ (8007d0c <HAL_DMA_IRQHandler+0x1e4>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00e      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d10 <HAL_DMA_IRQHandler+0x1e8>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d009      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a19      	ldr	r2, [pc, #100]	@ (8007d14 <HAL_DMA_IRQHandler+0x1ec>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d004      	beq.n	8007cbc <HAL_DMA_IRQHandler+0x194>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a18      	ldr	r2, [pc, #96]	@ (8007d18 <HAL_DMA_IRQHandler+0x1f0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d12f      	bne.n	8007d1c <HAL_DMA_IRQHandler+0x1f4>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0304 	and.w	r3, r3, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bf14      	ite	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	2300      	moveq	r3, #0
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	e02e      	b.n	8007d30 <HAL_DMA_IRQHandler+0x208>
 8007cd2:	bf00      	nop
 8007cd4:	24000054 	.word	0x24000054
 8007cd8:	1b4e81b5 	.word	0x1b4e81b5
 8007cdc:	40020010 	.word	0x40020010
 8007ce0:	40020028 	.word	0x40020028
 8007ce4:	40020040 	.word	0x40020040
 8007ce8:	40020058 	.word	0x40020058
 8007cec:	40020070 	.word	0x40020070
 8007cf0:	40020088 	.word	0x40020088
 8007cf4:	400200a0 	.word	0x400200a0
 8007cf8:	400200b8 	.word	0x400200b8
 8007cfc:	40020410 	.word	0x40020410
 8007d00:	40020428 	.word	0x40020428
 8007d04:	40020440 	.word	0x40020440
 8007d08:	40020458 	.word	0x40020458
 8007d0c:	40020470 	.word	0x40020470
 8007d10:	40020488 	.word	0x40020488
 8007d14:	400204a0 	.word	0x400204a0
 8007d18:	400204b8 	.word	0x400204b8
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0308 	and.w	r3, r3, #8
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bf14      	ite	ne
 8007d2a:	2301      	movne	r3, #1
 8007d2c:	2300      	moveq	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d015      	beq.n	8007d60 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0204 	bic.w	r2, r2, #4
 8007d42:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d48:	f003 031f 	and.w	r3, r3, #31
 8007d4c:	2208      	movs	r2, #8
 8007d4e:	409a      	lsls	r2, r3
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d58:	f043 0201 	orr.w	r2, r3, #1
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d64:	f003 031f 	and.w	r3, r3, #31
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d06e      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a69      	ldr	r2, [pc, #420]	@ (8007f20 <HAL_DMA_IRQHandler+0x3f8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d04a      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a67      	ldr	r2, [pc, #412]	@ (8007f24 <HAL_DMA_IRQHandler+0x3fc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d045      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a66      	ldr	r2, [pc, #408]	@ (8007f28 <HAL_DMA_IRQHandler+0x400>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d040      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a64      	ldr	r2, [pc, #400]	@ (8007f2c <HAL_DMA_IRQHandler+0x404>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d03b      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a63      	ldr	r2, [pc, #396]	@ (8007f30 <HAL_DMA_IRQHandler+0x408>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d036      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a61      	ldr	r2, [pc, #388]	@ (8007f34 <HAL_DMA_IRQHandler+0x40c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d031      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a60      	ldr	r2, [pc, #384]	@ (8007f38 <HAL_DMA_IRQHandler+0x410>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d02c      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a5e      	ldr	r2, [pc, #376]	@ (8007f3c <HAL_DMA_IRQHandler+0x414>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d027      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a5d      	ldr	r2, [pc, #372]	@ (8007f40 <HAL_DMA_IRQHandler+0x418>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d022      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a5b      	ldr	r2, [pc, #364]	@ (8007f44 <HAL_DMA_IRQHandler+0x41c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d01d      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a5a      	ldr	r2, [pc, #360]	@ (8007f48 <HAL_DMA_IRQHandler+0x420>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d018      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a58      	ldr	r2, [pc, #352]	@ (8007f4c <HAL_DMA_IRQHandler+0x424>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d013      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a57      	ldr	r2, [pc, #348]	@ (8007f50 <HAL_DMA_IRQHandler+0x428>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00e      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a55      	ldr	r2, [pc, #340]	@ (8007f54 <HAL_DMA_IRQHandler+0x42c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d009      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a54      	ldr	r2, [pc, #336]	@ (8007f58 <HAL_DMA_IRQHandler+0x430>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d004      	beq.n	8007e16 <HAL_DMA_IRQHandler+0x2ee>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a52      	ldr	r2, [pc, #328]	@ (8007f5c <HAL_DMA_IRQHandler+0x434>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d10a      	bne.n	8007e2c <HAL_DMA_IRQHandler+0x304>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bf14      	ite	ne
 8007e24:	2301      	movne	r3, #1
 8007e26:	2300      	moveq	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	e003      	b.n	8007e34 <HAL_DMA_IRQHandler+0x30c>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2300      	movs	r3, #0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00d      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e3c:	f003 031f 	and.w	r3, r3, #31
 8007e40:	2201      	movs	r2, #1
 8007e42:	409a      	lsls	r2, r3
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e4c:	f043 0202 	orr.w	r2, r3, #2
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	2204      	movs	r2, #4
 8007e5e:	409a      	lsls	r2, r3
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	4013      	ands	r3, r2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 808f 	beq.w	8007f88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f20 <HAL_DMA_IRQHandler+0x3f8>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d04a      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a2a      	ldr	r2, [pc, #168]	@ (8007f24 <HAL_DMA_IRQHandler+0x3fc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d045      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a29      	ldr	r2, [pc, #164]	@ (8007f28 <HAL_DMA_IRQHandler+0x400>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d040      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a27      	ldr	r2, [pc, #156]	@ (8007f2c <HAL_DMA_IRQHandler+0x404>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d03b      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a26      	ldr	r2, [pc, #152]	@ (8007f30 <HAL_DMA_IRQHandler+0x408>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d036      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a24      	ldr	r2, [pc, #144]	@ (8007f34 <HAL_DMA_IRQHandler+0x40c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d031      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a23      	ldr	r2, [pc, #140]	@ (8007f38 <HAL_DMA_IRQHandler+0x410>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d02c      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a21      	ldr	r2, [pc, #132]	@ (8007f3c <HAL_DMA_IRQHandler+0x414>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d027      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a20      	ldr	r2, [pc, #128]	@ (8007f40 <HAL_DMA_IRQHandler+0x418>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d022      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8007f44 <HAL_DMA_IRQHandler+0x41c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d01d      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f48 <HAL_DMA_IRQHandler+0x420>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d018      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f4c <HAL_DMA_IRQHandler+0x424>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d013      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f50 <HAL_DMA_IRQHandler+0x428>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00e      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a18      	ldr	r2, [pc, #96]	@ (8007f54 <HAL_DMA_IRQHandler+0x42c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d009      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a17      	ldr	r2, [pc, #92]	@ (8007f58 <HAL_DMA_IRQHandler+0x430>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d004      	beq.n	8007f0a <HAL_DMA_IRQHandler+0x3e2>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a15      	ldr	r2, [pc, #84]	@ (8007f5c <HAL_DMA_IRQHandler+0x434>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d12a      	bne.n	8007f60 <HAL_DMA_IRQHandler+0x438>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	bf14      	ite	ne
 8007f18:	2301      	movne	r3, #1
 8007f1a:	2300      	moveq	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	e023      	b.n	8007f68 <HAL_DMA_IRQHandler+0x440>
 8007f20:	40020010 	.word	0x40020010
 8007f24:	40020028 	.word	0x40020028
 8007f28:	40020040 	.word	0x40020040
 8007f2c:	40020058 	.word	0x40020058
 8007f30:	40020070 	.word	0x40020070
 8007f34:	40020088 	.word	0x40020088
 8007f38:	400200a0 	.word	0x400200a0
 8007f3c:	400200b8 	.word	0x400200b8
 8007f40:	40020410 	.word	0x40020410
 8007f44:	40020428 	.word	0x40020428
 8007f48:	40020440 	.word	0x40020440
 8007f4c:	40020458 	.word	0x40020458
 8007f50:	40020470 	.word	0x40020470
 8007f54:	40020488 	.word	0x40020488
 8007f58:	400204a0 	.word	0x400204a0
 8007f5c:	400204b8 	.word	0x400204b8
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2300      	movs	r3, #0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00d      	beq.n	8007f88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	2204      	movs	r2, #4
 8007f76:	409a      	lsls	r2, r3
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f80:	f043 0204 	orr.w	r2, r3, #4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	2210      	movs	r2, #16
 8007f92:	409a      	lsls	r2, r3
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	4013      	ands	r3, r2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80a6 	beq.w	80080ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a85      	ldr	r2, [pc, #532]	@ (80081b8 <HAL_DMA_IRQHandler+0x690>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d04a      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a83      	ldr	r2, [pc, #524]	@ (80081bc <HAL_DMA_IRQHandler+0x694>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d045      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a82      	ldr	r2, [pc, #520]	@ (80081c0 <HAL_DMA_IRQHandler+0x698>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d040      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a80      	ldr	r2, [pc, #512]	@ (80081c4 <HAL_DMA_IRQHandler+0x69c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d03b      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a7f      	ldr	r2, [pc, #508]	@ (80081c8 <HAL_DMA_IRQHandler+0x6a0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d036      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a7d      	ldr	r2, [pc, #500]	@ (80081cc <HAL_DMA_IRQHandler+0x6a4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d031      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a7c      	ldr	r2, [pc, #496]	@ (80081d0 <HAL_DMA_IRQHandler+0x6a8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d02c      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a7a      	ldr	r2, [pc, #488]	@ (80081d4 <HAL_DMA_IRQHandler+0x6ac>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d027      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a79      	ldr	r2, [pc, #484]	@ (80081d8 <HAL_DMA_IRQHandler+0x6b0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d022      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a77      	ldr	r2, [pc, #476]	@ (80081dc <HAL_DMA_IRQHandler+0x6b4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d01d      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a76      	ldr	r2, [pc, #472]	@ (80081e0 <HAL_DMA_IRQHandler+0x6b8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d018      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a74      	ldr	r2, [pc, #464]	@ (80081e4 <HAL_DMA_IRQHandler+0x6bc>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d013      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a73      	ldr	r2, [pc, #460]	@ (80081e8 <HAL_DMA_IRQHandler+0x6c0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d00e      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a71      	ldr	r2, [pc, #452]	@ (80081ec <HAL_DMA_IRQHandler+0x6c4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d009      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a70      	ldr	r2, [pc, #448]	@ (80081f0 <HAL_DMA_IRQHandler+0x6c8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d004      	beq.n	800803e <HAL_DMA_IRQHandler+0x516>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a6e      	ldr	r2, [pc, #440]	@ (80081f4 <HAL_DMA_IRQHandler+0x6cc>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d10a      	bne.n	8008054 <HAL_DMA_IRQHandler+0x52c>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	bf14      	ite	ne
 800804c:	2301      	movne	r3, #1
 800804e:	2300      	moveq	r3, #0
 8008050:	b2db      	uxtb	r3, r3
 8008052:	e009      	b.n	8008068 <HAL_DMA_IRQHandler+0x540>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	bf14      	ite	ne
 8008062:	2301      	movne	r3, #1
 8008064:	2300      	moveq	r3, #0
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d03e      	beq.n	80080ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	2210      	movs	r2, #16
 8008076:	409a      	lsls	r2, r3
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d018      	beq.n	80080bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d108      	bne.n	80080aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d024      	beq.n	80080ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
 80080a8:	e01f      	b.n	80080ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01b      	beq.n	80080ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
 80080ba:	e016      	b.n	80080ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 0208 	bic.w	r2, r2, #8
 80080d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080ee:	f003 031f 	and.w	r3, r3, #31
 80080f2:	2220      	movs	r2, #32
 80080f4:	409a      	lsls	r2, r3
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 8110 	beq.w	8008320 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2c      	ldr	r2, [pc, #176]	@ (80081b8 <HAL_DMA_IRQHandler+0x690>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d04a      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a2b      	ldr	r2, [pc, #172]	@ (80081bc <HAL_DMA_IRQHandler+0x694>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d045      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a29      	ldr	r2, [pc, #164]	@ (80081c0 <HAL_DMA_IRQHandler+0x698>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d040      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a28      	ldr	r2, [pc, #160]	@ (80081c4 <HAL_DMA_IRQHandler+0x69c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d03b      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a26      	ldr	r2, [pc, #152]	@ (80081c8 <HAL_DMA_IRQHandler+0x6a0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d036      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a25      	ldr	r2, [pc, #148]	@ (80081cc <HAL_DMA_IRQHandler+0x6a4>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d031      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a23      	ldr	r2, [pc, #140]	@ (80081d0 <HAL_DMA_IRQHandler+0x6a8>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d02c      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a22      	ldr	r2, [pc, #136]	@ (80081d4 <HAL_DMA_IRQHandler+0x6ac>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d027      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a20      	ldr	r2, [pc, #128]	@ (80081d8 <HAL_DMA_IRQHandler+0x6b0>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d022      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1f      	ldr	r2, [pc, #124]	@ (80081dc <HAL_DMA_IRQHandler+0x6b4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d01d      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1d      	ldr	r2, [pc, #116]	@ (80081e0 <HAL_DMA_IRQHandler+0x6b8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d018      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1c      	ldr	r2, [pc, #112]	@ (80081e4 <HAL_DMA_IRQHandler+0x6bc>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1a      	ldr	r2, [pc, #104]	@ (80081e8 <HAL_DMA_IRQHandler+0x6c0>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a19      	ldr	r2, [pc, #100]	@ (80081ec <HAL_DMA_IRQHandler+0x6c4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a17      	ldr	r2, [pc, #92]	@ (80081f0 <HAL_DMA_IRQHandler+0x6c8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_DMA_IRQHandler+0x678>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a16      	ldr	r2, [pc, #88]	@ (80081f4 <HAL_DMA_IRQHandler+0x6cc>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d12b      	bne.n	80081f8 <HAL_DMA_IRQHandler+0x6d0>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0310 	and.w	r3, r3, #16
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bf14      	ite	ne
 80081ae:	2301      	movne	r3, #1
 80081b0:	2300      	moveq	r3, #0
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	e02a      	b.n	800820c <HAL_DMA_IRQHandler+0x6e4>
 80081b6:	bf00      	nop
 80081b8:	40020010 	.word	0x40020010
 80081bc:	40020028 	.word	0x40020028
 80081c0:	40020040 	.word	0x40020040
 80081c4:	40020058 	.word	0x40020058
 80081c8:	40020070 	.word	0x40020070
 80081cc:	40020088 	.word	0x40020088
 80081d0:	400200a0 	.word	0x400200a0
 80081d4:	400200b8 	.word	0x400200b8
 80081d8:	40020410 	.word	0x40020410
 80081dc:	40020428 	.word	0x40020428
 80081e0:	40020440 	.word	0x40020440
 80081e4:	40020458 	.word	0x40020458
 80081e8:	40020470 	.word	0x40020470
 80081ec:	40020488 	.word	0x40020488
 80081f0:	400204a0 	.word	0x400204a0
 80081f4:	400204b8 	.word	0x400204b8
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	bf14      	ite	ne
 8008206:	2301      	movne	r3, #1
 8008208:	2300      	moveq	r3, #0
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8087 	beq.w	8008320 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008216:	f003 031f 	and.w	r3, r3, #31
 800821a:	2220      	movs	r2, #32
 800821c:	409a      	lsls	r2, r3
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b04      	cmp	r3, #4
 800822c:	d139      	bne.n	80082a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0216 	bic.w	r2, r2, #22
 800823c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695a      	ldr	r2, [r3, #20]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800824c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <HAL_DMA_IRQHandler+0x736>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0208 	bic.w	r2, r2, #8
 800826c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008272:	f003 031f 	and.w	r3, r3, #31
 8008276:	223f      	movs	r2, #63	@ 0x3f
 8008278:	409a      	lsls	r2, r3
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 834a 	beq.w	800892c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
          }
          return;
 80082a0:	e344      	b.n	800892c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d018      	beq.n	80082e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d108      	bne.n	80082d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d02c      	beq.n	8008320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
 80082ce:	e027      	b.n	8008320 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d023      	beq.n	8008320 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	4798      	blx	r3
 80082e0:	e01e      	b.n	8008320 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10f      	bne.n	8008310 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0210 	bic.w	r2, r2, #16
 80082fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 8306 	beq.w	8008936 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8088 	beq.w	8008448 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2204      	movs	r2, #4
 800833c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a7a      	ldr	r2, [pc, #488]	@ (8008530 <HAL_DMA_IRQHandler+0xa08>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d04a      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a79      	ldr	r2, [pc, #484]	@ (8008534 <HAL_DMA_IRQHandler+0xa0c>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d045      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a77      	ldr	r2, [pc, #476]	@ (8008538 <HAL_DMA_IRQHandler+0xa10>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d040      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a76      	ldr	r2, [pc, #472]	@ (800853c <HAL_DMA_IRQHandler+0xa14>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d03b      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a74      	ldr	r2, [pc, #464]	@ (8008540 <HAL_DMA_IRQHandler+0xa18>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d036      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a73      	ldr	r2, [pc, #460]	@ (8008544 <HAL_DMA_IRQHandler+0xa1c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d031      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a71      	ldr	r2, [pc, #452]	@ (8008548 <HAL_DMA_IRQHandler+0xa20>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d02c      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a70      	ldr	r2, [pc, #448]	@ (800854c <HAL_DMA_IRQHandler+0xa24>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d027      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a6e      	ldr	r2, [pc, #440]	@ (8008550 <HAL_DMA_IRQHandler+0xa28>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d022      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a6d      	ldr	r2, [pc, #436]	@ (8008554 <HAL_DMA_IRQHandler+0xa2c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d01d      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a6b      	ldr	r2, [pc, #428]	@ (8008558 <HAL_DMA_IRQHandler+0xa30>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d018      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a6a      	ldr	r2, [pc, #424]	@ (800855c <HAL_DMA_IRQHandler+0xa34>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d013      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a68      	ldr	r2, [pc, #416]	@ (8008560 <HAL_DMA_IRQHandler+0xa38>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d00e      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a67      	ldr	r2, [pc, #412]	@ (8008564 <HAL_DMA_IRQHandler+0xa3c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d009      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a65      	ldr	r2, [pc, #404]	@ (8008568 <HAL_DMA_IRQHandler+0xa40>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d004      	beq.n	80083e0 <HAL_DMA_IRQHandler+0x8b8>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a64      	ldr	r2, [pc, #400]	@ (800856c <HAL_DMA_IRQHandler+0xa44>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d108      	bne.n	80083f2 <HAL_DMA_IRQHandler+0x8ca>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0201 	bic.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	e007      	b.n	8008402 <HAL_DMA_IRQHandler+0x8da>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 0201 	bic.w	r2, r2, #1
 8008400:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3301      	adds	r3, #1
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800840a:	429a      	cmp	r2, r3
 800840c:	d307      	bcc.n	800841e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1f2      	bne.n	8008402 <HAL_DMA_IRQHandler+0x8da>
 800841c:	e000      	b.n	8008420 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800841e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d004      	beq.n	8008438 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2203      	movs	r2, #3
 8008432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008436:	e003      	b.n	8008440 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 8272 	beq.w	8008936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	4798      	blx	r3
 800845a:	e26c      	b.n	8008936 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a43      	ldr	r2, [pc, #268]	@ (8008570 <HAL_DMA_IRQHandler+0xa48>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d022      	beq.n	80084ac <HAL_DMA_IRQHandler+0x984>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a42      	ldr	r2, [pc, #264]	@ (8008574 <HAL_DMA_IRQHandler+0xa4c>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d01d      	beq.n	80084ac <HAL_DMA_IRQHandler+0x984>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a40      	ldr	r2, [pc, #256]	@ (8008578 <HAL_DMA_IRQHandler+0xa50>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d018      	beq.n	80084ac <HAL_DMA_IRQHandler+0x984>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a3f      	ldr	r2, [pc, #252]	@ (800857c <HAL_DMA_IRQHandler+0xa54>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d013      	beq.n	80084ac <HAL_DMA_IRQHandler+0x984>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a3d      	ldr	r2, [pc, #244]	@ (8008580 <HAL_DMA_IRQHandler+0xa58>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00e      	beq.n	80084ac <HAL_DMA_IRQHandler+0x984>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a3c      	ldr	r2, [pc, #240]	@ (8008584 <HAL_DMA_IRQHandler+0xa5c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d009      	beq.n	80084ac <HAL_DMA_IRQHandler+0x984>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a3a      	ldr	r2, [pc, #232]	@ (8008588 <HAL_DMA_IRQHandler+0xa60>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d004      	beq.n	80084ac <HAL_DMA_IRQHandler+0x984>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a39      	ldr	r2, [pc, #228]	@ (800858c <HAL_DMA_IRQHandler+0xa64>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d101      	bne.n	80084b0 <HAL_DMA_IRQHandler+0x988>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <HAL_DMA_IRQHandler+0x98a>
 80084b0:	2300      	movs	r3, #0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 823f 	beq.w	8008936 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084c4:	f003 031f 	and.w	r3, r3, #31
 80084c8:	2204      	movs	r2, #4
 80084ca:	409a      	lsls	r2, r3
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4013      	ands	r3, r2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 80cd 	beq.w	8008670 <HAL_DMA_IRQHandler+0xb48>
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80c7 	beq.w	8008670 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	2204      	movs	r2, #4
 80084ec:	409a      	lsls	r2, r3
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d049      	beq.n	8008590 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8210 	beq.w	8008930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008518:	e20a      	b.n	8008930 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 8206 	beq.w	8008930 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800852c:	e200      	b.n	8008930 <HAL_DMA_IRQHandler+0xe08>
 800852e:	bf00      	nop
 8008530:	40020010 	.word	0x40020010
 8008534:	40020028 	.word	0x40020028
 8008538:	40020040 	.word	0x40020040
 800853c:	40020058 	.word	0x40020058
 8008540:	40020070 	.word	0x40020070
 8008544:	40020088 	.word	0x40020088
 8008548:	400200a0 	.word	0x400200a0
 800854c:	400200b8 	.word	0x400200b8
 8008550:	40020410 	.word	0x40020410
 8008554:	40020428 	.word	0x40020428
 8008558:	40020440 	.word	0x40020440
 800855c:	40020458 	.word	0x40020458
 8008560:	40020470 	.word	0x40020470
 8008564:	40020488 	.word	0x40020488
 8008568:	400204a0 	.word	0x400204a0
 800856c:	400204b8 	.word	0x400204b8
 8008570:	58025408 	.word	0x58025408
 8008574:	5802541c 	.word	0x5802541c
 8008578:	58025430 	.word	0x58025430
 800857c:	58025444 	.word	0x58025444
 8008580:	58025458 	.word	0x58025458
 8008584:	5802546c 	.word	0x5802546c
 8008588:	58025480 	.word	0x58025480
 800858c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	d160      	bne.n	800865c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a7f      	ldr	r2, [pc, #508]	@ (800879c <HAL_DMA_IRQHandler+0xc74>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d04a      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a7d      	ldr	r2, [pc, #500]	@ (80087a0 <HAL_DMA_IRQHandler+0xc78>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d045      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a7c      	ldr	r2, [pc, #496]	@ (80087a4 <HAL_DMA_IRQHandler+0xc7c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d040      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a7a      	ldr	r2, [pc, #488]	@ (80087a8 <HAL_DMA_IRQHandler+0xc80>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d03b      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a79      	ldr	r2, [pc, #484]	@ (80087ac <HAL_DMA_IRQHandler+0xc84>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d036      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a77      	ldr	r2, [pc, #476]	@ (80087b0 <HAL_DMA_IRQHandler+0xc88>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d031      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a76      	ldr	r2, [pc, #472]	@ (80087b4 <HAL_DMA_IRQHandler+0xc8c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d02c      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a74      	ldr	r2, [pc, #464]	@ (80087b8 <HAL_DMA_IRQHandler+0xc90>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d027      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a73      	ldr	r2, [pc, #460]	@ (80087bc <HAL_DMA_IRQHandler+0xc94>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d022      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a71      	ldr	r2, [pc, #452]	@ (80087c0 <HAL_DMA_IRQHandler+0xc98>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d01d      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a70      	ldr	r2, [pc, #448]	@ (80087c4 <HAL_DMA_IRQHandler+0xc9c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d018      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a6e      	ldr	r2, [pc, #440]	@ (80087c8 <HAL_DMA_IRQHandler+0xca0>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d013      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a6d      	ldr	r2, [pc, #436]	@ (80087cc <HAL_DMA_IRQHandler+0xca4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d00e      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a6b      	ldr	r2, [pc, #428]	@ (80087d0 <HAL_DMA_IRQHandler+0xca8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d009      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a6a      	ldr	r2, [pc, #424]	@ (80087d4 <HAL_DMA_IRQHandler+0xcac>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d004      	beq.n	800863a <HAL_DMA_IRQHandler+0xb12>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a68      	ldr	r2, [pc, #416]	@ (80087d8 <HAL_DMA_IRQHandler+0xcb0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d108      	bne.n	800864c <HAL_DMA_IRQHandler+0xb24>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0208 	bic.w	r2, r2, #8
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	e007      	b.n	800865c <HAL_DMA_IRQHandler+0xb34>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0204 	bic.w	r2, r2, #4
 800865a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 8165 	beq.w	8008930 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800866e:	e15f      	b.n	8008930 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008674:	f003 031f 	and.w	r3, r3, #31
 8008678:	2202      	movs	r2, #2
 800867a:	409a      	lsls	r2, r3
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	4013      	ands	r3, r2
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 80c5 	beq.w	8008810 <HAL_DMA_IRQHandler+0xce8>
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80bf 	beq.w	8008810 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	2202      	movs	r2, #2
 800869c:	409a      	lsls	r2, r3
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d018      	beq.n	80086de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d109      	bne.n	80086ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 813a 	beq.w	8008934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086c8:	e134      	b.n	8008934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 8130 	beq.w	8008934 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086dc:	e12a      	b.n	8008934 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f040 8089 	bne.w	80087fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a2b      	ldr	r2, [pc, #172]	@ (800879c <HAL_DMA_IRQHandler+0xc74>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d04a      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a29      	ldr	r2, [pc, #164]	@ (80087a0 <HAL_DMA_IRQHandler+0xc78>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d045      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a28      	ldr	r2, [pc, #160]	@ (80087a4 <HAL_DMA_IRQHandler+0xc7c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d040      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a26      	ldr	r2, [pc, #152]	@ (80087a8 <HAL_DMA_IRQHandler+0xc80>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d03b      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a25      	ldr	r2, [pc, #148]	@ (80087ac <HAL_DMA_IRQHandler+0xc84>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d036      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a23      	ldr	r2, [pc, #140]	@ (80087b0 <HAL_DMA_IRQHandler+0xc88>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d031      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a22      	ldr	r2, [pc, #136]	@ (80087b4 <HAL_DMA_IRQHandler+0xc8c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d02c      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a20      	ldr	r2, [pc, #128]	@ (80087b8 <HAL_DMA_IRQHandler+0xc90>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d027      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a1f      	ldr	r2, [pc, #124]	@ (80087bc <HAL_DMA_IRQHandler+0xc94>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d022      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a1d      	ldr	r2, [pc, #116]	@ (80087c0 <HAL_DMA_IRQHandler+0xc98>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d01d      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a1c      	ldr	r2, [pc, #112]	@ (80087c4 <HAL_DMA_IRQHandler+0xc9c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d018      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1a      	ldr	r2, [pc, #104]	@ (80087c8 <HAL_DMA_IRQHandler+0xca0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a19      	ldr	r2, [pc, #100]	@ (80087cc <HAL_DMA_IRQHandler+0xca4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00e      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a17      	ldr	r2, [pc, #92]	@ (80087d0 <HAL_DMA_IRQHandler+0xca8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d009      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a16      	ldr	r2, [pc, #88]	@ (80087d4 <HAL_DMA_IRQHandler+0xcac>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_DMA_IRQHandler+0xc62>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a14      	ldr	r2, [pc, #80]	@ (80087d8 <HAL_DMA_IRQHandler+0xcb0>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d128      	bne.n	80087dc <HAL_DMA_IRQHandler+0xcb4>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0214 	bic.w	r2, r2, #20
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	e027      	b.n	80087ec <HAL_DMA_IRQHandler+0xcc4>
 800879c:	40020010 	.word	0x40020010
 80087a0:	40020028 	.word	0x40020028
 80087a4:	40020040 	.word	0x40020040
 80087a8:	40020058 	.word	0x40020058
 80087ac:	40020070 	.word	0x40020070
 80087b0:	40020088 	.word	0x40020088
 80087b4:	400200a0 	.word	0x400200a0
 80087b8:	400200b8 	.word	0x400200b8
 80087bc:	40020410 	.word	0x40020410
 80087c0:	40020428 	.word	0x40020428
 80087c4:	40020440 	.word	0x40020440
 80087c8:	40020458 	.word	0x40020458
 80087cc:	40020470 	.word	0x40020470
 80087d0:	40020488 	.word	0x40020488
 80087d4:	400204a0 	.word	0x400204a0
 80087d8:	400204b8 	.word	0x400204b8
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 020a 	bic.w	r2, r2, #10
 80087ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 8097 	beq.w	8008934 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800880e:	e091      	b.n	8008934 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008814:	f003 031f 	and.w	r3, r3, #31
 8008818:	2208      	movs	r2, #8
 800881a:	409a      	lsls	r2, r3
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	4013      	ands	r3, r2
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8088 	beq.w	8008936 <HAL_DMA_IRQHandler+0xe0e>
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f003 0308 	and.w	r3, r3, #8
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 8082 	beq.w	8008936 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a41      	ldr	r2, [pc, #260]	@ (800893c <HAL_DMA_IRQHandler+0xe14>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d04a      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a3f      	ldr	r2, [pc, #252]	@ (8008940 <HAL_DMA_IRQHandler+0xe18>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d045      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a3e      	ldr	r2, [pc, #248]	@ (8008944 <HAL_DMA_IRQHandler+0xe1c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d040      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a3c      	ldr	r2, [pc, #240]	@ (8008948 <HAL_DMA_IRQHandler+0xe20>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d03b      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a3b      	ldr	r2, [pc, #236]	@ (800894c <HAL_DMA_IRQHandler+0xe24>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d036      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a39      	ldr	r2, [pc, #228]	@ (8008950 <HAL_DMA_IRQHandler+0xe28>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d031      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a38      	ldr	r2, [pc, #224]	@ (8008954 <HAL_DMA_IRQHandler+0xe2c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d02c      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a36      	ldr	r2, [pc, #216]	@ (8008958 <HAL_DMA_IRQHandler+0xe30>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d027      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a35      	ldr	r2, [pc, #212]	@ (800895c <HAL_DMA_IRQHandler+0xe34>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d022      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a33      	ldr	r2, [pc, #204]	@ (8008960 <HAL_DMA_IRQHandler+0xe38>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d01d      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a32      	ldr	r2, [pc, #200]	@ (8008964 <HAL_DMA_IRQHandler+0xe3c>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d018      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a30      	ldr	r2, [pc, #192]	@ (8008968 <HAL_DMA_IRQHandler+0xe40>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d013      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a2f      	ldr	r2, [pc, #188]	@ (800896c <HAL_DMA_IRQHandler+0xe44>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00e      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a2d      	ldr	r2, [pc, #180]	@ (8008970 <HAL_DMA_IRQHandler+0xe48>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d009      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008974 <HAL_DMA_IRQHandler+0xe4c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d004      	beq.n	80088d2 <HAL_DMA_IRQHandler+0xdaa>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a2a      	ldr	r2, [pc, #168]	@ (8008978 <HAL_DMA_IRQHandler+0xe50>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d108      	bne.n	80088e4 <HAL_DMA_IRQHandler+0xdbc>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 021c 	bic.w	r2, r2, #28
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e007      	b.n	80088f4 <HAL_DMA_IRQHandler+0xdcc>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 020e 	bic.w	r2, r2, #14
 80088f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088f8:	f003 031f 	and.w	r3, r3, #31
 80088fc:	2201      	movs	r2, #1
 80088fe:	409a      	lsls	r2, r3
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800891e:	2b00      	cmp	r3, #0
 8008920:	d009      	beq.n	8008936 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	4798      	blx	r3
 800892a:	e004      	b.n	8008936 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800892c:	bf00      	nop
 800892e:	e002      	b.n	8008936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008930:	bf00      	nop
 8008932:	e000      	b.n	8008936 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008934:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008936:	3728      	adds	r7, #40	@ 0x28
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	40020010 	.word	0x40020010
 8008940:	40020028 	.word	0x40020028
 8008944:	40020040 	.word	0x40020040
 8008948:	40020058 	.word	0x40020058
 800894c:	40020070 	.word	0x40020070
 8008950:	40020088 	.word	0x40020088
 8008954:	400200a0 	.word	0x400200a0
 8008958:	400200b8 	.word	0x400200b8
 800895c:	40020410 	.word	0x40020410
 8008960:	40020428 	.word	0x40020428
 8008964:	40020440 	.word	0x40020440
 8008968:	40020458 	.word	0x40020458
 800896c:	40020470 	.word	0x40020470
 8008970:	40020488 	.word	0x40020488
 8008974:	400204a0 	.word	0x400204a0
 8008978:	400204b8 	.word	0x400204b8

0800897c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800898e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008994:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a7f      	ldr	r2, [pc, #508]	@ (8008b98 <DMA_SetConfig+0x21c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d072      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a7d      	ldr	r2, [pc, #500]	@ (8008b9c <DMA_SetConfig+0x220>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d06d      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a7c      	ldr	r2, [pc, #496]	@ (8008ba0 <DMA_SetConfig+0x224>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d068      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a7a      	ldr	r2, [pc, #488]	@ (8008ba4 <DMA_SetConfig+0x228>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d063      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a79      	ldr	r2, [pc, #484]	@ (8008ba8 <DMA_SetConfig+0x22c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d05e      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a77      	ldr	r2, [pc, #476]	@ (8008bac <DMA_SetConfig+0x230>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d059      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a76      	ldr	r2, [pc, #472]	@ (8008bb0 <DMA_SetConfig+0x234>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d054      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a74      	ldr	r2, [pc, #464]	@ (8008bb4 <DMA_SetConfig+0x238>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d04f      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a73      	ldr	r2, [pc, #460]	@ (8008bb8 <DMA_SetConfig+0x23c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d04a      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a71      	ldr	r2, [pc, #452]	@ (8008bbc <DMA_SetConfig+0x240>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d045      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a70      	ldr	r2, [pc, #448]	@ (8008bc0 <DMA_SetConfig+0x244>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d040      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a6e      	ldr	r2, [pc, #440]	@ (8008bc4 <DMA_SetConfig+0x248>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d03b      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a6d      	ldr	r2, [pc, #436]	@ (8008bc8 <DMA_SetConfig+0x24c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d036      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a6b      	ldr	r2, [pc, #428]	@ (8008bcc <DMA_SetConfig+0x250>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d031      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a6a      	ldr	r2, [pc, #424]	@ (8008bd0 <DMA_SetConfig+0x254>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d02c      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a68      	ldr	r2, [pc, #416]	@ (8008bd4 <DMA_SetConfig+0x258>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d027      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a67      	ldr	r2, [pc, #412]	@ (8008bd8 <DMA_SetConfig+0x25c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d022      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a65      	ldr	r2, [pc, #404]	@ (8008bdc <DMA_SetConfig+0x260>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d01d      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a64      	ldr	r2, [pc, #400]	@ (8008be0 <DMA_SetConfig+0x264>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d018      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a62      	ldr	r2, [pc, #392]	@ (8008be4 <DMA_SetConfig+0x268>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d013      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a61      	ldr	r2, [pc, #388]	@ (8008be8 <DMA_SetConfig+0x26c>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00e      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a5f      	ldr	r2, [pc, #380]	@ (8008bec <DMA_SetConfig+0x270>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d009      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a5e      	ldr	r2, [pc, #376]	@ (8008bf0 <DMA_SetConfig+0x274>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d004      	beq.n	8008a86 <DMA_SetConfig+0x10a>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a5c      	ldr	r2, [pc, #368]	@ (8008bf4 <DMA_SetConfig+0x278>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d101      	bne.n	8008a8a <DMA_SetConfig+0x10e>
 8008a86:	2301      	movs	r3, #1
 8008a88:	e000      	b.n	8008a8c <DMA_SetConfig+0x110>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00d      	beq.n	8008aac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008a98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d004      	beq.n	8008aac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008aaa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a39      	ldr	r2, [pc, #228]	@ (8008b98 <DMA_SetConfig+0x21c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d04a      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a38      	ldr	r2, [pc, #224]	@ (8008b9c <DMA_SetConfig+0x220>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d045      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a36      	ldr	r2, [pc, #216]	@ (8008ba0 <DMA_SetConfig+0x224>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d040      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a35      	ldr	r2, [pc, #212]	@ (8008ba4 <DMA_SetConfig+0x228>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d03b      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a33      	ldr	r2, [pc, #204]	@ (8008ba8 <DMA_SetConfig+0x22c>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d036      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a32      	ldr	r2, [pc, #200]	@ (8008bac <DMA_SetConfig+0x230>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d031      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a30      	ldr	r2, [pc, #192]	@ (8008bb0 <DMA_SetConfig+0x234>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d02c      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a2f      	ldr	r2, [pc, #188]	@ (8008bb4 <DMA_SetConfig+0x238>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d027      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a2d      	ldr	r2, [pc, #180]	@ (8008bb8 <DMA_SetConfig+0x23c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d022      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bbc <DMA_SetConfig+0x240>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d01d      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a2a      	ldr	r2, [pc, #168]	@ (8008bc0 <DMA_SetConfig+0x244>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d018      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a29      	ldr	r2, [pc, #164]	@ (8008bc4 <DMA_SetConfig+0x248>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d013      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a27      	ldr	r2, [pc, #156]	@ (8008bc8 <DMA_SetConfig+0x24c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00e      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a26      	ldr	r2, [pc, #152]	@ (8008bcc <DMA_SetConfig+0x250>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d009      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a24      	ldr	r2, [pc, #144]	@ (8008bd0 <DMA_SetConfig+0x254>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d004      	beq.n	8008b4c <DMA_SetConfig+0x1d0>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a23      	ldr	r2, [pc, #140]	@ (8008bd4 <DMA_SetConfig+0x258>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d101      	bne.n	8008b50 <DMA_SetConfig+0x1d4>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <DMA_SetConfig+0x1d6>
 8008b50:	2300      	movs	r3, #0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d059      	beq.n	8008c0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b5a:	f003 031f 	and.w	r3, r3, #31
 8008b5e:	223f      	movs	r2, #63	@ 0x3f
 8008b60:	409a      	lsls	r2, r3
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	683a      	ldr	r2, [r7, #0]
 8008b7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	2b40      	cmp	r3, #64	@ 0x40
 8008b84:	d138      	bne.n	8008bf8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008b96:	e086      	b.n	8008ca6 <DMA_SetConfig+0x32a>
 8008b98:	40020010 	.word	0x40020010
 8008b9c:	40020028 	.word	0x40020028
 8008ba0:	40020040 	.word	0x40020040
 8008ba4:	40020058 	.word	0x40020058
 8008ba8:	40020070 	.word	0x40020070
 8008bac:	40020088 	.word	0x40020088
 8008bb0:	400200a0 	.word	0x400200a0
 8008bb4:	400200b8 	.word	0x400200b8
 8008bb8:	40020410 	.word	0x40020410
 8008bbc:	40020428 	.word	0x40020428
 8008bc0:	40020440 	.word	0x40020440
 8008bc4:	40020458 	.word	0x40020458
 8008bc8:	40020470 	.word	0x40020470
 8008bcc:	40020488 	.word	0x40020488
 8008bd0:	400204a0 	.word	0x400204a0
 8008bd4:	400204b8 	.word	0x400204b8
 8008bd8:	58025408 	.word	0x58025408
 8008bdc:	5802541c 	.word	0x5802541c
 8008be0:	58025430 	.word	0x58025430
 8008be4:	58025444 	.word	0x58025444
 8008be8:	58025458 	.word	0x58025458
 8008bec:	5802546c 	.word	0x5802546c
 8008bf0:	58025480 	.word	0x58025480
 8008bf4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	60da      	str	r2, [r3, #12]
}
 8008c08:	e04d      	b.n	8008ca6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a29      	ldr	r2, [pc, #164]	@ (8008cb4 <DMA_SetConfig+0x338>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d022      	beq.n	8008c5a <DMA_SetConfig+0x2de>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a27      	ldr	r2, [pc, #156]	@ (8008cb8 <DMA_SetConfig+0x33c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d01d      	beq.n	8008c5a <DMA_SetConfig+0x2de>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a26      	ldr	r2, [pc, #152]	@ (8008cbc <DMA_SetConfig+0x340>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d018      	beq.n	8008c5a <DMA_SetConfig+0x2de>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a24      	ldr	r2, [pc, #144]	@ (8008cc0 <DMA_SetConfig+0x344>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d013      	beq.n	8008c5a <DMA_SetConfig+0x2de>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a23      	ldr	r2, [pc, #140]	@ (8008cc4 <DMA_SetConfig+0x348>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00e      	beq.n	8008c5a <DMA_SetConfig+0x2de>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a21      	ldr	r2, [pc, #132]	@ (8008cc8 <DMA_SetConfig+0x34c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d009      	beq.n	8008c5a <DMA_SetConfig+0x2de>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a20      	ldr	r2, [pc, #128]	@ (8008ccc <DMA_SetConfig+0x350>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d004      	beq.n	8008c5a <DMA_SetConfig+0x2de>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1e      	ldr	r2, [pc, #120]	@ (8008cd0 <DMA_SetConfig+0x354>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d101      	bne.n	8008c5e <DMA_SetConfig+0x2e2>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e000      	b.n	8008c60 <DMA_SetConfig+0x2e4>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d020      	beq.n	8008ca6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	409a      	lsls	r2, r3
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	2b40      	cmp	r3, #64	@ 0x40
 8008c82:	d108      	bne.n	8008c96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	60da      	str	r2, [r3, #12]
}
 8008c94:	e007      	b.n	8008ca6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	60da      	str	r2, [r3, #12]
}
 8008ca6:	bf00      	nop
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	58025408 	.word	0x58025408
 8008cb8:	5802541c 	.word	0x5802541c
 8008cbc:	58025430 	.word	0x58025430
 8008cc0:	58025444 	.word	0x58025444
 8008cc4:	58025458 	.word	0x58025458
 8008cc8:	5802546c 	.word	0x5802546c
 8008ccc:	58025480 	.word	0x58025480
 8008cd0:	58025494 	.word	0x58025494

08008cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a42      	ldr	r2, [pc, #264]	@ (8008dec <DMA_CalcBaseAndBitshift+0x118>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d04a      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a41      	ldr	r2, [pc, #260]	@ (8008df0 <DMA_CalcBaseAndBitshift+0x11c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d045      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8008df4 <DMA_CalcBaseAndBitshift+0x120>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d040      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a3e      	ldr	r2, [pc, #248]	@ (8008df8 <DMA_CalcBaseAndBitshift+0x124>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d03b      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a3c      	ldr	r2, [pc, #240]	@ (8008dfc <DMA_CalcBaseAndBitshift+0x128>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d036      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a3b      	ldr	r2, [pc, #236]	@ (8008e00 <DMA_CalcBaseAndBitshift+0x12c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d031      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a39      	ldr	r2, [pc, #228]	@ (8008e04 <DMA_CalcBaseAndBitshift+0x130>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d02c      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a38      	ldr	r2, [pc, #224]	@ (8008e08 <DMA_CalcBaseAndBitshift+0x134>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d027      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a36      	ldr	r2, [pc, #216]	@ (8008e0c <DMA_CalcBaseAndBitshift+0x138>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d022      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a35      	ldr	r2, [pc, #212]	@ (8008e10 <DMA_CalcBaseAndBitshift+0x13c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d01d      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a33      	ldr	r2, [pc, #204]	@ (8008e14 <DMA_CalcBaseAndBitshift+0x140>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d018      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a32      	ldr	r2, [pc, #200]	@ (8008e18 <DMA_CalcBaseAndBitshift+0x144>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d013      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a30      	ldr	r2, [pc, #192]	@ (8008e1c <DMA_CalcBaseAndBitshift+0x148>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00e      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a2f      	ldr	r2, [pc, #188]	@ (8008e20 <DMA_CalcBaseAndBitshift+0x14c>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d009      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8008e24 <DMA_CalcBaseAndBitshift+0x150>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d004      	beq.n	8008d7c <DMA_CalcBaseAndBitshift+0xa8>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a2c      	ldr	r2, [pc, #176]	@ (8008e28 <DMA_CalcBaseAndBitshift+0x154>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d101      	bne.n	8008d80 <DMA_CalcBaseAndBitshift+0xac>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <DMA_CalcBaseAndBitshift+0xae>
 8008d80:	2300      	movs	r3, #0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d024      	beq.n	8008dd0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	3b10      	subs	r3, #16
 8008d8e:	4a27      	ldr	r2, [pc, #156]	@ (8008e2c <DMA_CalcBaseAndBitshift+0x158>)
 8008d90:	fba2 2303 	umull	r2, r3, r2, r3
 8008d94:	091b      	lsrs	r3, r3, #4
 8008d96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f003 0307 	and.w	r3, r3, #7
 8008d9e:	4a24      	ldr	r2, [pc, #144]	@ (8008e30 <DMA_CalcBaseAndBitshift+0x15c>)
 8008da0:	5cd3      	ldrb	r3, [r2, r3]
 8008da2:	461a      	mov	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d908      	bls.n	8008dc0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	4b1f      	ldr	r3, [pc, #124]	@ (8008e34 <DMA_CalcBaseAndBitshift+0x160>)
 8008db6:	4013      	ands	r3, r2
 8008db8:	1d1a      	adds	r2, r3, #4
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	659a      	str	r2, [r3, #88]	@ 0x58
 8008dbe:	e00d      	b.n	8008ddc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e34 <DMA_CalcBaseAndBitshift+0x160>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dce:	e005      	b.n	8008ddc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	40020010 	.word	0x40020010
 8008df0:	40020028 	.word	0x40020028
 8008df4:	40020040 	.word	0x40020040
 8008df8:	40020058 	.word	0x40020058
 8008dfc:	40020070 	.word	0x40020070
 8008e00:	40020088 	.word	0x40020088
 8008e04:	400200a0 	.word	0x400200a0
 8008e08:	400200b8 	.word	0x400200b8
 8008e0c:	40020410 	.word	0x40020410
 8008e10:	40020428 	.word	0x40020428
 8008e14:	40020440 	.word	0x40020440
 8008e18:	40020458 	.word	0x40020458
 8008e1c:	40020470 	.word	0x40020470
 8008e20:	40020488 	.word	0x40020488
 8008e24:	400204a0 	.word	0x400204a0
 8008e28:	400204b8 	.word	0x400204b8
 8008e2c:	aaaaaaab 	.word	0xaaaaaaab
 8008e30:	08017234 	.word	0x08017234
 8008e34:	fffffc00 	.word	0xfffffc00

08008e38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d120      	bne.n	8008e8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d858      	bhi.n	8008f06 <DMA_CheckFifoParam+0xce>
 8008e54:	a201      	add	r2, pc, #4	@ (adr r2, 8008e5c <DMA_CheckFifoParam+0x24>)
 8008e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5a:	bf00      	nop
 8008e5c:	08008e6d 	.word	0x08008e6d
 8008e60:	08008e7f 	.word	0x08008e7f
 8008e64:	08008e6d 	.word	0x08008e6d
 8008e68:	08008f07 	.word	0x08008f07
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d048      	beq.n	8008f0a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e7c:	e045      	b.n	8008f0a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008e86:	d142      	bne.n	8008f0e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e8c:	e03f      	b.n	8008f0e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e96:	d123      	bne.n	8008ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d838      	bhi.n	8008f12 <DMA_CheckFifoParam+0xda>
 8008ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ea8 <DMA_CheckFifoParam+0x70>)
 8008ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea6:	bf00      	nop
 8008ea8:	08008eb9 	.word	0x08008eb9
 8008eac:	08008ebf 	.word	0x08008ebf
 8008eb0:	08008eb9 	.word	0x08008eb9
 8008eb4:	08008ed1 	.word	0x08008ed1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	73fb      	strb	r3, [r7, #15]
        break;
 8008ebc:	e030      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d025      	beq.n	8008f16 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ece:	e022      	b.n	8008f16 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ed8:	d11f      	bne.n	8008f1a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ede:	e01c      	b.n	8008f1a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d902      	bls.n	8008eee <DMA_CheckFifoParam+0xb6>
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d003      	beq.n	8008ef4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008eec:	e018      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8008ef2:	e015      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00e      	beq.n	8008f1e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
    break;
 8008f04:	e00b      	b.n	8008f1e <DMA_CheckFifoParam+0xe6>
        break;
 8008f06:	bf00      	nop
 8008f08:	e00a      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
        break;
 8008f0a:	bf00      	nop
 8008f0c:	e008      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
        break;
 8008f0e:	bf00      	nop
 8008f10:	e006      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
        break;
 8008f12:	bf00      	nop
 8008f14:	e004      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
        break;
 8008f16:	bf00      	nop
 8008f18:	e002      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
        break;
 8008f1a:	bf00      	nop
 8008f1c:	e000      	b.n	8008f20 <DMA_CheckFifoParam+0xe8>
    break;
 8008f1e:	bf00      	nop
    }
  }

  return status;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop

08008f30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a38      	ldr	r2, [pc, #224]	@ (8009024 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d022      	beq.n	8008f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a36      	ldr	r2, [pc, #216]	@ (8009028 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d01d      	beq.n	8008f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a35      	ldr	r2, [pc, #212]	@ (800902c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d018      	beq.n	8008f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a33      	ldr	r2, [pc, #204]	@ (8009030 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d013      	beq.n	8008f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a32      	ldr	r2, [pc, #200]	@ (8009034 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d00e      	beq.n	8008f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a30      	ldr	r2, [pc, #192]	@ (8009038 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d009      	beq.n	8008f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800903c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d004      	beq.n	8008f8e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a2d      	ldr	r2, [pc, #180]	@ (8009040 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d101      	bne.n	8008f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008f92:	2300      	movs	r3, #0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01a      	beq.n	8008fce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	3b08      	subs	r3, #8
 8008fa0:	4a28      	ldr	r2, [pc, #160]	@ (8009044 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa6:	091b      	lsrs	r3, r3, #4
 8008fa8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4b26      	ldr	r3, [pc, #152]	@ (8009048 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a24      	ldr	r2, [pc, #144]	@ (800904c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008fbc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f003 031f 	and.w	r3, r3, #31
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	409a      	lsls	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008fcc:	e024      	b.n	8009018 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	3b10      	subs	r3, #16
 8008fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8009050 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fdc:	091b      	lsrs	r3, r3, #4
 8008fde:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8009054 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d806      	bhi.n	8008ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	4a1b      	ldr	r2, [pc, #108]	@ (8009058 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d902      	bls.n	8008ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4b18      	ldr	r3, [pc, #96]	@ (800905c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	461a      	mov	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a16      	ldr	r2, [pc, #88]	@ (8009060 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009008:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	2201      	movs	r2, #1
 8009012:	409a      	lsls	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009018:	bf00      	nop
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	58025408 	.word	0x58025408
 8009028:	5802541c 	.word	0x5802541c
 800902c:	58025430 	.word	0x58025430
 8009030:	58025444 	.word	0x58025444
 8009034:	58025458 	.word	0x58025458
 8009038:	5802546c 	.word	0x5802546c
 800903c:	58025480 	.word	0x58025480
 8009040:	58025494 	.word	0x58025494
 8009044:	cccccccd 	.word	0xcccccccd
 8009048:	16009600 	.word	0x16009600
 800904c:	58025880 	.word	0x58025880
 8009050:	aaaaaaab 	.word	0xaaaaaaab
 8009054:	400204b8 	.word	0x400204b8
 8009058:	4002040f 	.word	0x4002040f
 800905c:	10008200 	.word	0x10008200
 8009060:	40020880 	.word	0x40020880

08009064 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d04a      	beq.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b08      	cmp	r3, #8
 800907e:	d847      	bhi.n	8009110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a25      	ldr	r2, [pc, #148]	@ (800911c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d022      	beq.n	80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a24      	ldr	r2, [pc, #144]	@ (8009120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d01d      	beq.n	80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a22      	ldr	r2, [pc, #136]	@ (8009124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d018      	beq.n	80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a21      	ldr	r2, [pc, #132]	@ (8009128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d013      	beq.n	80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a1f      	ldr	r2, [pc, #124]	@ (800912c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d00e      	beq.n	80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d009      	beq.n	80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a1c      	ldr	r2, [pc, #112]	@ (8009134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d004      	beq.n	80090d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d101      	bne.n	80090d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e000      	b.n	80090d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80090d4:	2300      	movs	r3, #0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	4b17      	ldr	r3, [pc, #92]	@ (800913c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80090de:	4413      	add	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	461a      	mov	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a15      	ldr	r2, [pc, #84]	@ (8009140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80090ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80090ee:	e009      	b.n	8009104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4b14      	ldr	r3, [pc, #80]	@ (8009144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	461a      	mov	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a11      	ldr	r2, [pc, #68]	@ (8009148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009102:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3b01      	subs	r3, #1
 8009108:	2201      	movs	r2, #1
 800910a:	409a      	lsls	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8009110:	bf00      	nop
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	58025408 	.word	0x58025408
 8009120:	5802541c 	.word	0x5802541c
 8009124:	58025430 	.word	0x58025430
 8009128:	58025444 	.word	0x58025444
 800912c:	58025458 	.word	0x58025458
 8009130:	5802546c 	.word	0x5802546c
 8009134:	58025480 	.word	0x58025480
 8009138:	58025494 	.word	0x58025494
 800913c:	1600963f 	.word	0x1600963f
 8009140:	58025940 	.word	0x58025940
 8009144:	1000823f 	.word	0x1000823f
 8009148:	40020940 	.word	0x40020940

0800914c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	460b      	mov	r3, r1
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e00a      	b.n	800917e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d103      	bne.n	8009176 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	605a      	str	r2, [r3, #4]
      break;
 8009174:	e002      	b.n	800917c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	75fb      	strb	r3, [r7, #23]
      break;
 800917a:	bf00      	nop
  }

  return status;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
}
 800917e:	4618      	mov	r0, r3
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e003      	b.n	80091a6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80091a4:	2300      	movs	r3, #0
  }
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
	...

080091b4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	0c1b      	lsrs	r3, r3, #16
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	2201      	movs	r2, #1
 80091d2:	fa02 f303 	lsl.w	r3, r2, r3
 80091d6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	011a      	lsls	r2, r3, #4
 80091dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009210 <HAL_EXTI_IRQHandler+0x5c>)
 80091de:	4413      	add	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	4013      	ands	r3, r2
 80091ea:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d009      	beq.n	8009206 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	4798      	blx	r3
    }
  }
}
 8009206:	bf00      	nop
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	58000088 	.word	0x58000088

08009214 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b098      	sub	sp, #96	@ 0x60
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800921c:	4a84      	ldr	r2, [pc, #528]	@ (8009430 <HAL_FDCAN_Init+0x21c>)
 800921e:	f107 030c 	add.w	r3, r7, #12
 8009222:	4611      	mov	r1, r2
 8009224:	224c      	movs	r2, #76	@ 0x4c
 8009226:	4618      	mov	r0, r3
 8009228:	f00b f9db 	bl	80145e2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e1c6      	b.n	80095c4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a7e      	ldr	r2, [pc, #504]	@ (8009434 <HAL_FDCAN_Init+0x220>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d106      	bne.n	800924e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009248:	461a      	mov	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009254:	b2db      	uxtb	r3, r3
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7fc fa96 	bl	8005794 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 0210 	bic.w	r2, r2, #16
 8009276:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009278:	f7fc ff98 	bl	80061ac <HAL_GetTick>
 800927c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800927e:	e014      	b.n	80092aa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009280:	f7fc ff94 	bl	80061ac <HAL_GetTick>
 8009284:	4602      	mov	r2, r0
 8009286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	2b0a      	cmp	r3, #10
 800928c:	d90d      	bls.n	80092aa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009294:	f043 0201 	orr.w	r2, r3, #1
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2203      	movs	r2, #3
 80092a2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e18c      	b.n	80095c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d0e3      	beq.n	8009280 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699a      	ldr	r2, [r3, #24]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0201 	orr.w	r2, r2, #1
 80092c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092c8:	f7fc ff70 	bl	80061ac <HAL_GetTick>
 80092cc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80092ce:	e014      	b.n	80092fa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80092d0:	f7fc ff6c 	bl	80061ac <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b0a      	cmp	r3, #10
 80092dc:	d90d      	bls.n	80092fa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092e4:	f043 0201 	orr.w	r2, r3, #1
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2203      	movs	r2, #3
 80092f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e164      	b.n	80095c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0e3      	beq.n	80092d0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f042 0202 	orr.w	r2, r2, #2
 8009316:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	7c1b      	ldrb	r3, [r3, #16]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d108      	bne.n	8009332 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699a      	ldr	r2, [r3, #24]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800932e:	619a      	str	r2, [r3, #24]
 8009330:	e007      	b.n	8009342 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	699a      	ldr	r2, [r3, #24]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009340:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	7c5b      	ldrb	r3, [r3, #17]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d108      	bne.n	800935c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	699a      	ldr	r2, [r3, #24]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009358:	619a      	str	r2, [r3, #24]
 800935a:	e007      	b.n	800936c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800936a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	7c9b      	ldrb	r3, [r3, #18]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d108      	bne.n	8009386 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699a      	ldr	r2, [r3, #24]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009382:	619a      	str	r2, [r3, #24]
 8009384:	e007      	b.n	8009396 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699a      	ldr	r2, [r3, #24]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009394:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	430a      	orrs	r2, r1
 80093aa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80093ba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691a      	ldr	r2, [r3, #16]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f022 0210 	bic.w	r2, r2, #16
 80093ca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d108      	bne.n	80093e6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699a      	ldr	r2, [r3, #24]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0204 	orr.w	r2, r2, #4
 80093e2:	619a      	str	r2, [r3, #24]
 80093e4:	e030      	b.n	8009448 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d02c      	beq.n	8009448 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d020      	beq.n	8009438 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	699a      	ldr	r2, [r3, #24]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009404:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	691a      	ldr	r2, [r3, #16]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0210 	orr.w	r2, r2, #16
 8009414:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	2b03      	cmp	r3, #3
 800941c:	d114      	bne.n	8009448 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699a      	ldr	r2, [r3, #24]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f042 0220 	orr.w	r2, r2, #32
 800942c:	619a      	str	r2, [r3, #24]
 800942e:	e00b      	b.n	8009448 <HAL_FDCAN_Init+0x234>
 8009430:	0801716c 	.word	0x0801716c
 8009434:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	699a      	ldr	r2, [r3, #24]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0220 	orr.w	r2, r2, #32
 8009446:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	3b01      	subs	r3, #1
 800944e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	3b01      	subs	r3, #1
 8009456:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009458:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009460:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	3b01      	subs	r3, #1
 800946a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009470:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009472:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800947c:	d115      	bne.n	80094aa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009482:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	3b01      	subs	r3, #1
 800948a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800948c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009492:	3b01      	subs	r3, #1
 8009494:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009496:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949e:	3b01      	subs	r3, #1
 80094a0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80094a6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80094a8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094d0:	4413      	add	r3, r2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d011      	beq.n	80094fa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80094de:	f023 0107 	bic.w	r1, r3, #7
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	3360      	adds	r3, #96	@ 0x60
 80094ea:	443b      	add	r3, r7
 80094ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	430a      	orrs	r2, r1
 80094f6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d011      	beq.n	8009526 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800950a:	f023 0107 	bic.w	r1, r3, #7
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	3360      	adds	r3, #96	@ 0x60
 8009516:	443b      	add	r3, r7
 8009518:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800952a:	2b00      	cmp	r3, #0
 800952c:	d012      	beq.n	8009554 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009536:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	3360      	adds	r3, #96	@ 0x60
 8009542:	443b      	add	r3, r7
 8009544:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009548:	011a      	lsls	r2, r3, #4
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009558:	2b00      	cmp	r3, #0
 800955a:	d012      	beq.n	8009582 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009564:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	3360      	adds	r3, #96	@ 0x60
 8009570:	443b      	add	r3, r7
 8009572:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009576:	021a      	lsls	r2, r3, #8
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a11      	ldr	r2, [pc, #68]	@ (80095cc <HAL_FDCAN_Init+0x3b8>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d107      	bne.n	800959c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	689a      	ldr	r2, [r3, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f022 0203 	bic.w	r2, r2, #3
 800959a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fd93 	bl	800a0e0 <FDCAN_CalcultateRamBlockAddresses>
 80095ba:	4603      	mov	r3, r0
 80095bc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80095c0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3760      	adds	r7, #96	@ 0x60
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	4000a000 	.word	0x4000a000

080095d0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d111      	bne.n	8009608 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	699a      	ldr	r2, [r3, #24]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0201 	bic.w	r2, r2, #1
 80095fa:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	e008      	b.n	800961a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800960e:	f043 0204 	orr.w	r2, r3, #4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
  }
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b086      	sub	sp, #24
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b02      	cmp	r3, #2
 800963c:	d141      	bne.n	80096c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009646:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d109      	bne.n	8009662 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009654:	f043 0220 	orr.w	r2, r3, #32
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800965e:	2301      	movs	r3, #1
 8009660:	e038      	b.n	80096d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800966a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d009      	beq.n	8009686 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009678:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e026      	b.n	80096d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800968e:	0c1b      	lsrs	r3, r3, #16
 8009690:	f003 031f 	and.w	r3, r3, #31
 8009694:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 fea5 	bl	800a3ec <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2101      	movs	r1, #1
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	fa01 f202 	lsl.w	r2, r1, r2
 80096ae:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80096b2:	2201      	movs	r2, #1
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	409a      	lsls	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	e008      	b.n	80096d4 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096c8:	f043 0208 	orr.w	r2, r3, #8
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
  }
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80096dc:	b480      	push	{r7}
 80096de:	b08b      	sub	sp, #44	@ 0x2c
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80096ea:	2300      	movs	r3, #0
 80096ec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80096f4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80096f6:	7efb      	ldrb	r3, [r7, #27]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	f040 8149 	bne.w	8009990 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b40      	cmp	r3, #64	@ 0x40
 8009702:	d14c      	bne.n	800979e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800970c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d109      	bne.n	8009728 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800971a:	f043 0220 	orr.w	r2, r3, #32
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e13c      	b.n	80099a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009734:	2b00      	cmp	r3, #0
 8009736:	d109      	bne.n	800974c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800973e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e12a      	b.n	80099a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800975c:	d10a      	bne.n	8009774 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800976a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800976e:	d101      	bne.n	8009774 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009770:	2301      	movs	r3, #1
 8009772:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800977c:	0a1b      	lsrs	r3, r3, #8
 800977e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	4413      	add	r3, r2
 8009786:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009790:	69f9      	ldr	r1, [r7, #28]
 8009792:	fb01 f303 	mul.w	r3, r1, r3
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	627b      	str	r3, [r7, #36]	@ 0x24
 800979c:	e068      	b.n	8009870 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b41      	cmp	r3, #65	@ 0x41
 80097a2:	d14c      	bne.n	800983e <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80097ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d109      	bne.n	80097c8 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097ba:	f043 0220 	orr.w	r2, r3, #32
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e0ec      	b.n	80099a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d109      	bne.n	80097ec <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e0da      	b.n	80099a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097fc:	d10a      	bne.n	8009814 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009806:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800980a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800980e:	d101      	bne.n	8009814 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009810:	2301      	movs	r3, #1
 8009812:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800981c:	0a1b      	lsrs	r3, r3, #8
 800981e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009830:	69f9      	ldr	r1, [r7, #28]
 8009832:	fb01 f303 	mul.w	r3, r1, r3
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	627b      	str	r3, [r7, #36]	@ 0x24
 800983c:	e018      	b.n	8009870 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	429a      	cmp	r2, r3
 8009846:	d309      	bcc.n	800985c <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800984e:	f043 0220 	orr.w	r2, r3, #32
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e0a2      	b.n	80099a2 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009864:	68b9      	ldr	r1, [r7, #8]
 8009866:	fb01 f303 	mul.w	r3, r1, r3
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8009870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d107      	bne.n	8009894 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	0c9b      	lsrs	r3, r3, #18
 800988a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	601a      	str	r2, [r3, #0]
 8009892:	e005      	b.n	80098a0 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ba:	3304      	adds	r3, #4
 80098bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	0c1b      	lsrs	r3, r3, #16
 80098ce:	f003 020f 	and.w	r2, r3, #15
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80098e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80098ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	0e1b      	lsrs	r3, r3, #24
 80098f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80098fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	0fda      	lsrs	r2, r3, #31
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009908:	3304      	adds	r3, #4
 800990a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800990c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990e:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009910:	2300      	movs	r3, #0
 8009912:	623b      	str	r3, [r7, #32]
 8009914:	e00a      	b.n	800992c <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	441a      	add	r2, r3
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	440b      	add	r3, r1
 8009922:	7812      	ldrb	r2, [r2, #0]
 8009924:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	3301      	adds	r3, #1
 800992a:	623b      	str	r3, [r7, #32]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	4a1f      	ldr	r2, [pc, #124]	@ (80099b0 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8009932:	5cd3      	ldrb	r3, [r2, r3]
 8009934:	461a      	mov	r2, r3
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	4293      	cmp	r3, r2
 800993a:	d3ec      	bcc.n	8009916 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b40      	cmp	r3, #64	@ 0x40
 8009940:	d105      	bne.n	800994e <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	69fa      	ldr	r2, [r7, #28]
 8009948:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800994c:	e01e      	b.n	800998c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b41      	cmp	r3, #65	@ 0x41
 8009952:	d105      	bne.n	8009960 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800995e:	e015      	b.n	800998c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	2b1f      	cmp	r3, #31
 8009964:	d808      	bhi.n	8009978 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2101      	movs	r1, #1
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	fa01 f202 	lsl.w	r2, r1, r2
 8009972:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009976:	e009      	b.n	800998c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f003 021f 	and.w	r2, r3, #31
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2101      	movs	r1, #1
 8009984:	fa01 f202 	lsl.w	r2, r1, r2
 8009988:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	e008      	b.n	80099a2 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009996:	f043 0208 	orr.w	r2, r3, #8
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
  }
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	372c      	adds	r7, #44	@ 0x2c
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	0801723c 	.word	0x0801723c

080099b4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80099c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099c8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80099ca:	68fb      	ldr	r3, [r7, #12]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3714      	adds	r7, #20
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80099ea:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80099ec:	7dfb      	ldrb	r3, [r7, #23]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d002      	beq.n	80099f8 <HAL_FDCAN_ActivateNotification+0x20>
 80099f2:	7dfb      	ldrb	r3, [r7, #23]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d155      	bne.n	8009aa4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	4013      	ands	r3, r2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d108      	bne.n	8009a18 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f042 0201 	orr.w	r2, r2, #1
 8009a14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009a16:	e014      	b.n	8009a42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	4013      	ands	r3, r2
 8009a22:	68ba      	ldr	r2, [r7, #8]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d108      	bne.n	8009a3a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0202 	orr.w	r2, r2, #2
 8009a36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009a38:	e003      	b.n	8009a42 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2203      	movs	r2, #3
 8009a40:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d009      	beq.n	8009a60 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac4 <HAL_FDCAN_ActivateNotification+0xec>)
 8009a88:	4013      	ands	r3, r2
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	6812      	ldr	r2, [r2, #0]
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a92:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009a94:	695a      	ldr	r2, [r3, #20]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	0f9b      	lsrs	r3, r3, #30
 8009a9a:	490b      	ldr	r1, [pc, #44]	@ (8009ac8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e008      	b.n	8009ab6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009aaa:	f043 0202 	orr.w	r2, r3, #2
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
  }
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	371c      	adds	r7, #28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	3fcfffff 	.word	0x3fcfffff
 8009ac8:	4000a800 	.word	0x4000a800

08009acc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b096      	sub	sp, #88	@ 0x58
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8009ad4:	4b9a      	ldr	r3, [pc, #616]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	079b      	lsls	r3, r3, #30
 8009ada:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8009adc:	4b98      	ldr	r3, [pc, #608]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	079b      	lsls	r3, r3, #30
 8009ae2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009af2:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009afa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009afc:	4013      	ands	r3, r2
 8009afe:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b06:	f003 030f 	and.w	r3, r3, #15
 8009b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b14:	4013      	ands	r3, r2
 8009b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b36:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8009b3a:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b44:	4013      	ands	r3, r2
 8009b46:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b4e:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8009b52:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b72:	0a1b      	lsrs	r3, r3, #8
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d010      	beq.n	8009b9e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7e:	0a1b      	lsrs	r3, r3, #8
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00a      	beq.n	8009b9e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b90:	651a      	str	r2, [r3, #80]	@ 0x50
 8009b92:	4b6b      	ldr	r3, [pc, #428]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fa54 	bl	800a046 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba0:	0a9b      	lsrs	r3, r3, #10
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d01d      	beq.n	8009be6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	0a9b      	lsrs	r3, r3, #10
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d017      	beq.n	8009be6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009bbe:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bca:	4013      	ands	r3, r2
 8009bcc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8009bd8:	4b59      	ldr	r3, [pc, #356]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009bde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fa07 	bl	8009ff4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8009be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00d      	beq.n	8009c08 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bf2:	4b54      	ldr	r3, [pc, #336]	@ (8009d44 <HAL_FDCAN_IRQHandler+0x278>)
 8009bf4:	400b      	ands	r3, r1
 8009bf6:	6513      	str	r3, [r2, #80]	@ 0x50
 8009bf8:	4a51      	ldr	r2, [pc, #324]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bfc:	0f9b      	lsrs	r3, r3, #30
 8009bfe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8009c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f9c0 	bl	8009f88 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00d      	beq.n	8009c2a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c14:	4b4b      	ldr	r3, [pc, #300]	@ (8009d44 <HAL_FDCAN_IRQHandler+0x278>)
 8009c16:	400b      	ands	r3, r1
 8009c18:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c1a:	4a49      	ldr	r2, [pc, #292]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009c1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c1e:	0f9b      	lsrs	r3, r3, #30
 8009c20:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009c22:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f9ba 	bl	8009f9e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00d      	beq.n	8009c4c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009c36:	4b43      	ldr	r3, [pc, #268]	@ (8009d44 <HAL_FDCAN_IRQHandler+0x278>)
 8009c38:	400b      	ands	r3, r1
 8009c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c3c:	4a40      	ldr	r2, [pc, #256]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c40:	0f9b      	lsrs	r3, r3, #30
 8009c42:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009c44:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7f7 ff2a 	bl	8001aa0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009c58:	4b3a      	ldr	r3, [pc, #232]	@ (8009d44 <HAL_FDCAN_IRQHandler+0x278>)
 8009c5a:	400b      	ands	r3, r1
 8009c5c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c5e:	4a38      	ldr	r2, [pc, #224]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c62:	0f9b      	lsrs	r3, r3, #30
 8009c64:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009c66:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f9a3 	bl	8009fb4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c70:	0adb      	lsrs	r3, r3, #11
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d010      	beq.n	8009c9c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c7c:	0adb      	lsrs	r3, r3, #11
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c8e:	651a      	str	r2, [r3, #80]	@ 0x50
 8009c90:	4b2b      	ldr	r3, [pc, #172]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f997 	bl	8009fca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c9e:	0a5b      	lsrs	r3, r3, #9
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d01d      	beq.n	8009ce4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009caa:	0a5b      	lsrs	r3, r3, #9
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d017      	beq.n	8009ce4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009cbc:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cc8:	4013      	ands	r3, r2
 8009cca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009cd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8009cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009cdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f97d 	bl	8009fde <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce6:	0cdb      	lsrs	r3, r3, #19
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d010      	beq.n	8009d12 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf2:	0cdb      	lsrs	r3, r3, #19
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00a      	beq.n	8009d12 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009d04:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d06:	4b0e      	ldr	r3, [pc, #56]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f97c 	bl	800a00a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d14:	0c1b      	lsrs	r3, r3, #16
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d016      	beq.n	8009d4c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d20:	0c1b      	lsrs	r3, r3, #16
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d010      	beq.n	8009d4c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009d32:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d34:	4b02      	ldr	r3, [pc, #8]	@ (8009d40 <HAL_FDCAN_IRQHandler+0x274>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	e004      	b.n	8009d48 <HAL_FDCAN_IRQHandler+0x27c>
 8009d3e:	bf00      	nop
 8009d40:	4000a800 	.word	0x4000a800
 8009d44:	3fcfffff 	.word	0x3fcfffff
 8009d48:	f000 f969 	bl	800a01e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d4e:	0c9b      	lsrs	r3, r3, #18
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d010      	beq.n	8009d7a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8009d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5a:	0c9b      	lsrs	r3, r3, #18
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00a      	beq.n	8009d7a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009d6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d6e:	4b83      	ldr	r3, [pc, #524]	@ (8009f7c <HAL_FDCAN_IRQHandler+0x4b0>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f95c 	bl	800a032 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7c:	0c5b      	lsrs	r3, r3, #17
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d015      	beq.n	8009db2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d88:	0c5b      	lsrs	r3, r3, #17
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d00f      	beq.n	8009db2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009d9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d9c:	4b77      	ldr	r3, [pc, #476]	@ (8009f7c <HAL_FDCAN_IRQHandler+0x4b0>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009da8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009db2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00d      	beq.n	8009dd4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dbe:	4b70      	ldr	r3, [pc, #448]	@ (8009f80 <HAL_FDCAN_IRQHandler+0x4b4>)
 8009dc0:	400b      	ands	r3, r1
 8009dc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8009dc4:	4a6d      	ldr	r2, [pc, #436]	@ (8009f7c <HAL_FDCAN_IRQHandler+0x4b0>)
 8009dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dc8:	0f9b      	lsrs	r3, r3, #30
 8009dca:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009dcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f94d 	bl	800a06e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d011      	beq.n	8009dfe <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009de0:	4b67      	ldr	r3, [pc, #412]	@ (8009f80 <HAL_FDCAN_IRQHandler+0x4b4>)
 8009de2:	400b      	ands	r3, r1
 8009de4:	6513      	str	r3, [r2, #80]	@ 0x50
 8009de6:	4a65      	ldr	r2, [pc, #404]	@ (8009f7c <HAL_FDCAN_IRQHandler+0x4b0>)
 8009de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dea:	0f9b      	lsrs	r3, r3, #30
 8009dec:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009df4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009df6:	431a      	orrs	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a60      	ldr	r2, [pc, #384]	@ (8009f84 <HAL_FDCAN_IRQHandler+0x4b8>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	f040 80ac 	bne.w	8009f62 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f003 0303 	and.w	r3, r3, #3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 80a4 	beq.w	8009f62 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	6a1b      	ldr	r3, [r3, #32]
 8009e20:	f003 030f 	and.w	r3, r3, #15
 8009e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e2e:	4013      	ands	r3, r2
 8009e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e46:	4013      	ands	r3, r2
 8009e48:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8009e54:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e5e:	4013      	ands	r3, r2
 8009e60:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8009e6c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e74:	6a3a      	ldr	r2, [r7, #32]
 8009e76:	4013      	ands	r3, r2
 8009e78:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
 8009e80:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8009e84:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8c:	69fa      	ldr	r2, [r7, #28]
 8009e8e:	4013      	ands	r3, r2
 8009e90:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e98:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8009ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d007      	beq.n	8009eb8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eae:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8009eb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f8e6 	bl	800a084 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d007      	beq.n	8009ece <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ec4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8009ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f8e6 	bl	800a09a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	099b      	lsrs	r3, r3, #6
 8009ed2:	f003 0301 	and.w	r3, r3, #1
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d01a      	beq.n	8009f10 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	099b      	lsrs	r3, r3, #6
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d014      	beq.n	8009f10 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eec:	0c1b      	lsrs	r3, r3, #16
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009efc:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	2240      	movs	r2, #64	@ 0x40
 8009f04:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	6939      	ldr	r1, [r7, #16]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8d0 	bl	800a0b0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8009f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f1c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8009f1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f8d1 	bl	800a0c8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00b      	beq.n	8009f44 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	6a3a      	ldr	r2, [r7, #32]
 8009f32:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00b      	beq.n	8009f62 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f874 	bl	800a05a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009f72:	bf00      	nop
 8009f74:	3758      	adds	r7, #88	@ 0x58
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	4000a800 	.word	0x4000a800
 8009f80:	3fcfffff 	.word	0x3fcfffff
 8009f84:	4000a000 	.word	0x4000a000

08009f88 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8009f92:	bf00      	nop
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009fbe:	bf00      	nop
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr

08009fde <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800a012:	bf00      	nop
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a032:	b480      	push	{r7}
 800a034:	b083      	sub	sp, #12
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800a03a:	bf00      	nop
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800a04e:	bf00      	nop
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800a062:	bf00      	nop
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b083      	sub	sp, #12
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a0f6:	4ba7      	ldr	r3, [pc, #668]	@ (800a394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	0091      	lsls	r1, r2, #2
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6812      	ldr	r2, [r2, #0]
 800a102:	430b      	orrs	r3, r1
 800a104:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a110:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a118:	041a      	lsls	r2, r3, #16
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	4413      	add	r3, r2
 800a12c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a136:	4b97      	ldr	r3, [pc, #604]	@ (800a394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a138:	4013      	ands	r3, r2
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	0091      	lsls	r1, r2, #2
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	6812      	ldr	r2, [r2, #0]
 800a142:	430b      	orrs	r3, r1
 800a144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a150:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a158:	041a      	lsls	r2, r3, #16
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	430a      	orrs	r2, r1
 800a160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	4413      	add	r3, r2
 800a16e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a178:	4b86      	ldr	r3, [pc, #536]	@ (800a394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	0091      	lsls	r1, r2, #2
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	6812      	ldr	r2, [r2, #0]
 800a184:	430b      	orrs	r3, r1
 800a186:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a192:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19a:	041a      	lsls	r2, r3, #16
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a1ae:	fb02 f303 	mul.w	r3, r2, r3
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a1c0:	4b74      	ldr	r3, [pc, #464]	@ (800a394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	0091      	lsls	r1, r2, #2
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	6812      	ldr	r2, [r2, #0]
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1da:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1e2:	041a      	lsls	r2, r3, #16
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a1f6:	fb02 f303 	mul.w	r3, r2, r3
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800a208:	4b62      	ldr	r3, [pc, #392]	@ (800a394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a20a:	4013      	ands	r3, r2
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	0091      	lsls	r1, r2, #2
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6812      	ldr	r2, [r2, #0]
 800a214:	430b      	orrs	r3, r1
 800a216:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	4413      	add	r3, r2
 800a22a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a234:	4b57      	ldr	r3, [pc, #348]	@ (800a394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a236:	4013      	ands	r3, r2
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	0091      	lsls	r1, r2, #2
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6812      	ldr	r2, [r2, #0]
 800a240:	430b      	orrs	r3, r1
 800a242:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a24e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a256:	041a      	lsls	r2, r3, #16
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	430a      	orrs	r2, r1
 800a25e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	4413      	add	r3, r2
 800a26c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800a276:	4b47      	ldr	r3, [pc, #284]	@ (800a394 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a278:	4013      	ands	r3, r2
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	0091      	lsls	r1, r2, #2
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	6812      	ldr	r2, [r2, #0]
 800a282:	430b      	orrs	r3, r1
 800a284:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a290:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a298:	041a      	lsls	r2, r3, #16
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a2ac:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2b4:	061a      	lsls	r2, r3, #24
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2c4:	4b34      	ldr	r3, [pc, #208]	@ (800a398 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a2c6:	4413      	add	r3, r2
 800a2c8:	009a      	lsls	r2, r3, #2
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	441a      	add	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	441a      	add	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800a2fa:	fb01 f303 	mul.w	r3, r1, r3
 800a2fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a300:	441a      	add	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800a312:	fb01 f303 	mul.w	r3, r1, r3
 800a316:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a318:	441a      	add	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800a32a:	fb01 f303 	mul.w	r3, r1, r3
 800a32e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a330:	441a      	add	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	441a      	add	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a35a:	fb01 f303 	mul.w	r3, r1, r3
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	441a      	add	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a376:	fb01 f303 	mul.w	r3, r1, r3
 800a37a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a37c:	441a      	add	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a38a:	4a04      	ldr	r2, [pc, #16]	@ (800a39c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d915      	bls.n	800a3bc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800a390:	e006      	b.n	800a3a0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800a392:	bf00      	nop
 800a394:	ffff0003 	.word	0xffff0003
 800a398:	10002b00 	.word	0x10002b00
 800a39c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3a6:	f043 0220 	orr.w	r2, r3, #32
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2203      	movs	r2, #3
 800a3b4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e010      	b.n	800a3de <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3c0:	60fb      	str	r3, [r7, #12]
 800a3c2:	e005      	b.n	800a3d0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d3f3      	bcc.n	800a3c4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop

0800a3ec <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b089      	sub	sp, #36	@ 0x24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10a      	bne.n	800a418 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800a40a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a412:	4313      	orrs	r3, r2
 800a414:	61fb      	str	r3, [r7, #28]
 800a416:	e00a      	b.n	800a42e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800a420:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800a426:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a42c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a438:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a43e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a444:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a44c:	4313      	orrs	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	fb01 f303 	mul.w	r3, r1, r3
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	4413      	add	r3, r2
 800a464:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	69fa      	ldr	r2, [r7, #28]
 800a46a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a46c:	69bb      	ldr	r3, [r7, #24]
 800a46e:	3304      	adds	r3, #4
 800a470:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	3304      	adds	r3, #4
 800a47c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	e020      	b.n	800a4c6 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	3303      	adds	r3, #3
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	4413      	add	r3, r2
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	3302      	adds	r3, #2
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	440b      	add	r3, r1
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a49c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	440b      	add	r3, r1
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a4aa:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a4ac:	6879      	ldr	r1, [r7, #4]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	440a      	add	r2, r1
 800a4b2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a4b4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	4a06      	ldr	r2, [pc, #24]	@ (800a4e4 <FDCAN_CopyMessageToRAM+0xf8>)
 800a4cc:	5cd3      	ldrb	r3, [r2, r3]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d3d6      	bcc.n	800a484 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800a4d6:	bf00      	nop
 800a4d8:	bf00      	nop
 800a4da:	3724      	adds	r7, #36	@ 0x24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	0801723c 	.word	0x0801723c

0800a4e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b089      	sub	sp, #36	@ 0x24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a4f6:	4b89      	ldr	r3, [pc, #548]	@ (800a71c <HAL_GPIO_Init+0x234>)
 800a4f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a4fa:	e194      	b.n	800a826 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	2101      	movs	r1, #1
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	fa01 f303 	lsl.w	r3, r1, r3
 800a508:	4013      	ands	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 8186 	beq.w	800a820 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d005      	beq.n	800a52c <HAL_GPIO_Init+0x44>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f003 0303 	and.w	r3, r3, #3
 800a528:	2b02      	cmp	r3, #2
 800a52a:	d130      	bne.n	800a58e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	005b      	lsls	r3, r3, #1
 800a536:	2203      	movs	r2, #3
 800a538:	fa02 f303 	lsl.w	r3, r2, r3
 800a53c:	43db      	mvns	r3, r3
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	4013      	ands	r3, r2
 800a542:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	68da      	ldr	r2, [r3, #12]
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	fa02 f303 	lsl.w	r3, r2, r3
 800a550:	69ba      	ldr	r2, [r7, #24]
 800a552:	4313      	orrs	r3, r2
 800a554:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	69ba      	ldr	r2, [r7, #24]
 800a55a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a562:	2201      	movs	r2, #1
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	fa02 f303 	lsl.w	r3, r2, r3
 800a56a:	43db      	mvns	r3, r3
 800a56c:	69ba      	ldr	r2, [r7, #24]
 800a56e:	4013      	ands	r3, r2
 800a570:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	091b      	lsrs	r3, r3, #4
 800a578:	f003 0201 	and.w	r2, r3, #1
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	fa02 f303 	lsl.w	r3, r2, r3
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	4313      	orrs	r3, r2
 800a586:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	69ba      	ldr	r2, [r7, #24]
 800a58c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	2b03      	cmp	r3, #3
 800a598:	d017      	beq.n	800a5ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5aa:	43db      	mvns	r3, r3
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a5be:	69ba      	ldr	r2, [r7, #24]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f003 0303 	and.w	r3, r3, #3
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d123      	bne.n	800a61e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	08da      	lsrs	r2, r3, #3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	3208      	adds	r2, #8
 800a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	f003 0307 	and.w	r3, r3, #7
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	220f      	movs	r2, #15
 800a5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	691a      	ldr	r2, [r3, #16]
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	f003 0307 	and.w	r3, r3, #7
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	fa02 f303 	lsl.w	r3, r2, r3
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	08da      	lsrs	r2, r3, #3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3208      	adds	r2, #8
 800a618:	69b9      	ldr	r1, [r7, #24]
 800a61a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	2203      	movs	r2, #3
 800a62a:	fa02 f303 	lsl.w	r3, r2, r3
 800a62e:	43db      	mvns	r3, r3
 800a630:	69ba      	ldr	r2, [r7, #24]
 800a632:	4013      	ands	r3, r2
 800a634:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f003 0203 	and.w	r2, r3, #3
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	69ba      	ldr	r2, [r7, #24]
 800a648:	4313      	orrs	r3, r2
 800a64a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	69ba      	ldr	r2, [r7, #24]
 800a650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f000 80e0 	beq.w	800a820 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a660:	4b2f      	ldr	r3, [pc, #188]	@ (800a720 <HAL_GPIO_Init+0x238>)
 800a662:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a666:	4a2e      	ldr	r2, [pc, #184]	@ (800a720 <HAL_GPIO_Init+0x238>)
 800a668:	f043 0302 	orr.w	r3, r3, #2
 800a66c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a670:	4b2b      	ldr	r3, [pc, #172]	@ (800a720 <HAL_GPIO_Init+0x238>)
 800a672:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a676:	f003 0302 	and.w	r3, r3, #2
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a67e:	4a29      	ldr	r2, [pc, #164]	@ (800a724 <HAL_GPIO_Init+0x23c>)
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	089b      	lsrs	r3, r3, #2
 800a684:	3302      	adds	r3, #2
 800a686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a68a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	220f      	movs	r2, #15
 800a696:	fa02 f303 	lsl.w	r3, r2, r3
 800a69a:	43db      	mvns	r3, r3
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	4013      	ands	r3, r2
 800a6a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a20      	ldr	r2, [pc, #128]	@ (800a728 <HAL_GPIO_Init+0x240>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d052      	beq.n	800a750 <HAL_GPIO_Init+0x268>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a1f      	ldr	r2, [pc, #124]	@ (800a72c <HAL_GPIO_Init+0x244>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d031      	beq.n	800a716 <HAL_GPIO_Init+0x22e>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a730 <HAL_GPIO_Init+0x248>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d02b      	beq.n	800a712 <HAL_GPIO_Init+0x22a>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a734 <HAL_GPIO_Init+0x24c>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d025      	beq.n	800a70e <HAL_GPIO_Init+0x226>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a738 <HAL_GPIO_Init+0x250>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d01f      	beq.n	800a70a <HAL_GPIO_Init+0x222>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a73c <HAL_GPIO_Init+0x254>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d019      	beq.n	800a706 <HAL_GPIO_Init+0x21e>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a1a      	ldr	r2, [pc, #104]	@ (800a740 <HAL_GPIO_Init+0x258>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d013      	beq.n	800a702 <HAL_GPIO_Init+0x21a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a19      	ldr	r2, [pc, #100]	@ (800a744 <HAL_GPIO_Init+0x25c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d00d      	beq.n	800a6fe <HAL_GPIO_Init+0x216>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4a18      	ldr	r2, [pc, #96]	@ (800a748 <HAL_GPIO_Init+0x260>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d007      	beq.n	800a6fa <HAL_GPIO_Init+0x212>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4a17      	ldr	r2, [pc, #92]	@ (800a74c <HAL_GPIO_Init+0x264>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d101      	bne.n	800a6f6 <HAL_GPIO_Init+0x20e>
 800a6f2:	2309      	movs	r3, #9
 800a6f4:	e02d      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a6f6:	230a      	movs	r3, #10
 800a6f8:	e02b      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a6fa:	2308      	movs	r3, #8
 800a6fc:	e029      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a6fe:	2307      	movs	r3, #7
 800a700:	e027      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a702:	2306      	movs	r3, #6
 800a704:	e025      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a706:	2305      	movs	r3, #5
 800a708:	e023      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a70a:	2304      	movs	r3, #4
 800a70c:	e021      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a70e:	2303      	movs	r3, #3
 800a710:	e01f      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a712:	2302      	movs	r3, #2
 800a714:	e01d      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a716:	2301      	movs	r3, #1
 800a718:	e01b      	b.n	800a752 <HAL_GPIO_Init+0x26a>
 800a71a:	bf00      	nop
 800a71c:	58000080 	.word	0x58000080
 800a720:	58024400 	.word	0x58024400
 800a724:	58000400 	.word	0x58000400
 800a728:	58020000 	.word	0x58020000
 800a72c:	58020400 	.word	0x58020400
 800a730:	58020800 	.word	0x58020800
 800a734:	58020c00 	.word	0x58020c00
 800a738:	58021000 	.word	0x58021000
 800a73c:	58021400 	.word	0x58021400
 800a740:	58021800 	.word	0x58021800
 800a744:	58021c00 	.word	0x58021c00
 800a748:	58022000 	.word	0x58022000
 800a74c:	58022400 	.word	0x58022400
 800a750:	2300      	movs	r3, #0
 800a752:	69fa      	ldr	r2, [r7, #28]
 800a754:	f002 0203 	and.w	r2, r2, #3
 800a758:	0092      	lsls	r2, r2, #2
 800a75a:	4093      	lsls	r3, r2
 800a75c:	69ba      	ldr	r2, [r7, #24]
 800a75e:	4313      	orrs	r3, r2
 800a760:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a762:	4938      	ldr	r1, [pc, #224]	@ (800a844 <HAL_GPIO_Init+0x35c>)
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	089b      	lsrs	r3, r3, #2
 800a768:	3302      	adds	r3, #2
 800a76a:	69ba      	ldr	r2, [r7, #24]
 800a76c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	43db      	mvns	r3, r3
 800a77c:	69ba      	ldr	r2, [r7, #24]
 800a77e:	4013      	ands	r3, r2
 800a780:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a78e:	69ba      	ldr	r2, [r7, #24]
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	4313      	orrs	r3, r2
 800a794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a796:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a79e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	43db      	mvns	r3, r3
 800a7aa:	69ba      	ldr	r2, [r7, #24]
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a7bc:	69ba      	ldr	r2, [r7, #24]
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a7c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	4013      	ands	r3, r2
 800a7da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	43db      	mvns	r3, r3
 800a800:	69ba      	ldr	r2, [r7, #24]
 800a802:	4013      	ands	r3, r2
 800a804:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	4313      	orrs	r3, r2
 800a818:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	3301      	adds	r3, #1
 800a824:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	fa22 f303 	lsr.w	r3, r2, r3
 800a830:	2b00      	cmp	r3, #0
 800a832:	f47f ae63 	bne.w	800a4fc <HAL_GPIO_Init+0x14>
  }
}
 800a836:	bf00      	nop
 800a838:	bf00      	nop
 800a83a:	3724      	adds	r7, #36	@ 0x24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	58000400 	.word	0x58000400

0800a848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	460b      	mov	r3, r1
 800a852:	807b      	strh	r3, [r7, #2]
 800a854:	4613      	mov	r3, r2
 800a856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a858:	787b      	ldrb	r3, [r7, #1]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a85e:	887a      	ldrh	r2, [r7, #2]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a864:	e003      	b.n	800a86e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a866:	887b      	ldrh	r3, [r7, #2]
 800a868:	041a      	lsls	r2, r3, #16
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	619a      	str	r2, [r3, #24]
}
 800a86e:	bf00      	nop
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a88c:	887a      	ldrh	r2, [r7, #2]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4013      	ands	r3, r2
 800a892:	041a      	lsls	r2, r3, #16
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	43d9      	mvns	r1, r3
 800a898:	887b      	ldrh	r3, [r7, #2]
 800a89a:	400b      	ands	r3, r1
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	619a      	str	r2, [r3, #24]
}
 800a8a2:	bf00      	nop
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
	...

0800a8b0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a8b8:	4b19      	ldr	r3, [pc, #100]	@ (800a920 <HAL_PWREx_ConfigSupply+0x70>)
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d00a      	beq.n	800a8da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a8c4:	4b16      	ldr	r3, [pc, #88]	@ (800a920 <HAL_PWREx_ConfigSupply+0x70>)
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f003 0307 	and.w	r3, r3, #7
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d001      	beq.n	800a8d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e01f      	b.n	800a916 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e01d      	b.n	800a916 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a8da:	4b11      	ldr	r3, [pc, #68]	@ (800a920 <HAL_PWREx_ConfigSupply+0x70>)
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	f023 0207 	bic.w	r2, r3, #7
 800a8e2:	490f      	ldr	r1, [pc, #60]	@ (800a920 <HAL_PWREx_ConfigSupply+0x70>)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a8ea:	f7fb fc5f 	bl	80061ac <HAL_GetTick>
 800a8ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a8f0:	e009      	b.n	800a906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a8f2:	f7fb fc5b 	bl	80061ac <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a900:	d901      	bls.n	800a906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e007      	b.n	800a916 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a906:	4b06      	ldr	r3, [pc, #24]	@ (800a920 <HAL_PWREx_ConfigSupply+0x70>)
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a90e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a912:	d1ee      	bne.n	800a8f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	58024800 	.word	0x58024800

0800a924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08c      	sub	sp, #48	@ 0x30
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	f000 bc48 	b.w	800b1c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 8088 	beq.w	800aa56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a946:	4b99      	ldr	r3, [pc, #612]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a94e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a950:	4b96      	ldr	r3, [pc, #600]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a954:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a958:	2b10      	cmp	r3, #16
 800a95a:	d007      	beq.n	800a96c <HAL_RCC_OscConfig+0x48>
 800a95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95e:	2b18      	cmp	r3, #24
 800a960:	d111      	bne.n	800a986 <HAL_RCC_OscConfig+0x62>
 800a962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d10c      	bne.n	800a986 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a96c:	4b8f      	ldr	r3, [pc, #572]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d06d      	beq.n	800aa54 <HAL_RCC_OscConfig+0x130>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d169      	bne.n	800aa54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	f000 bc21 	b.w	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a98e:	d106      	bne.n	800a99e <HAL_RCC_OscConfig+0x7a>
 800a990:	4b86      	ldr	r3, [pc, #536]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a85      	ldr	r2, [pc, #532]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	e02e      	b.n	800a9fc <HAL_RCC_OscConfig+0xd8>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10c      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x9c>
 800a9a6:	4b81      	ldr	r3, [pc, #516]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a80      	ldr	r2, [pc, #512]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	4b7e      	ldr	r3, [pc, #504]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a7d      	ldr	r2, [pc, #500]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	e01d      	b.n	800a9fc <HAL_RCC_OscConfig+0xd8>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9c8:	d10c      	bne.n	800a9e4 <HAL_RCC_OscConfig+0xc0>
 800a9ca:	4b78      	ldr	r3, [pc, #480]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a77      	ldr	r2, [pc, #476]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	4b75      	ldr	r3, [pc, #468]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a74      	ldr	r2, [pc, #464]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9e0:	6013      	str	r3, [r2, #0]
 800a9e2:	e00b      	b.n	800a9fc <HAL_RCC_OscConfig+0xd8>
 800a9e4:	4b71      	ldr	r3, [pc, #452]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4a70      	ldr	r2, [pc, #448]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	4b6e      	ldr	r3, [pc, #440]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a6d      	ldr	r2, [pc, #436]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800a9f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d013      	beq.n	800aa2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa04:	f7fb fbd2 	bl	80061ac <HAL_GetTick>
 800aa08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa0a:	e008      	b.n	800aa1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa0c:	f7fb fbce 	bl	80061ac <HAL_GetTick>
 800aa10:	4602      	mov	r2, r0
 800aa12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	2b64      	cmp	r3, #100	@ 0x64
 800aa18:	d901      	bls.n	800aa1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e3d4      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa1e:	4b63      	ldr	r3, [pc, #396]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d0f0      	beq.n	800aa0c <HAL_RCC_OscConfig+0xe8>
 800aa2a:	e014      	b.n	800aa56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa2c:	f7fb fbbe 	bl	80061ac <HAL_GetTick>
 800aa30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa32:	e008      	b.n	800aa46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa34:	f7fb fbba 	bl	80061ac <HAL_GetTick>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	2b64      	cmp	r3, #100	@ 0x64
 800aa40:	d901      	bls.n	800aa46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e3c0      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa46:	4b59      	ldr	r3, [pc, #356]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1f0      	bne.n	800aa34 <HAL_RCC_OscConfig+0x110>
 800aa52:	e000      	b.n	800aa56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	f000 80ca 	beq.w	800abf8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa64:	4b51      	ldr	r3, [pc, #324]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa6e:	4b4f      	ldr	r3, [pc, #316]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aa70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d007      	beq.n	800aa8a <HAL_RCC_OscConfig+0x166>
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	2b18      	cmp	r3, #24
 800aa7e:	d156      	bne.n	800ab2e <HAL_RCC_OscConfig+0x20a>
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d151      	bne.n	800ab2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa8a:	4b48      	ldr	r3, [pc, #288]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 0304 	and.w	r3, r3, #4
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d005      	beq.n	800aaa2 <HAL_RCC_OscConfig+0x17e>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d101      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e392      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aaa2:	4b42      	ldr	r3, [pc, #264]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f023 0219 	bic.w	r2, r3, #25
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	493f      	ldr	r1, [pc, #252]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aab0:	4313      	orrs	r3, r2
 800aab2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aab4:	f7fb fb7a 	bl	80061ac <HAL_GetTick>
 800aab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aaba:	e008      	b.n	800aace <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aabc:	f7fb fb76 	bl	80061ac <HAL_GetTick>
 800aac0:	4602      	mov	r2, r0
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d901      	bls.n	800aace <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e37c      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aace:	4b37      	ldr	r3, [pc, #220]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d0f0      	beq.n	800aabc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aada:	f7fb fb97 	bl	800620c <HAL_GetREVID>
 800aade:	4603      	mov	r3, r0
 800aae0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d817      	bhi.n	800ab18 <HAL_RCC_OscConfig+0x1f4>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	2b40      	cmp	r3, #64	@ 0x40
 800aaee:	d108      	bne.n	800ab02 <HAL_RCC_OscConfig+0x1de>
 800aaf0:	4b2e      	ldr	r3, [pc, #184]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800aaf8:	4a2c      	ldr	r2, [pc, #176]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aafa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aafe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab00:	e07a      	b.n	800abf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab02:	4b2a      	ldr	r3, [pc, #168]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	031b      	lsls	r3, r3, #12
 800ab10:	4926      	ldr	r1, [pc, #152]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab16:	e06f      	b.n	800abf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab18:	4b24      	ldr	r3, [pc, #144]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	061b      	lsls	r3, r3, #24
 800ab26:	4921      	ldr	r1, [pc, #132]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab2c:	e064      	b.n	800abf8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d047      	beq.n	800abc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab36:	4b1d      	ldr	r3, [pc, #116]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f023 0219 	bic.w	r2, r3, #25
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	491a      	ldr	r1, [pc, #104]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab48:	f7fb fb30 	bl	80061ac <HAL_GetTick>
 800ab4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab4e:	e008      	b.n	800ab62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab50:	f7fb fb2c 	bl	80061ac <HAL_GetTick>
 800ab54:	4602      	mov	r2, r0
 800ab56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab58:	1ad3      	subs	r3, r2, r3
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d901      	bls.n	800ab62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	e332      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab62:	4b12      	ldr	r3, [pc, #72]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0304 	and.w	r3, r3, #4
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d0f0      	beq.n	800ab50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab6e:	f7fb fb4d 	bl	800620c <HAL_GetREVID>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d819      	bhi.n	800abb0 <HAL_RCC_OscConfig+0x28c>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	2b40      	cmp	r3, #64	@ 0x40
 800ab82:	d108      	bne.n	800ab96 <HAL_RCC_OscConfig+0x272>
 800ab84:	4b09      	ldr	r3, [pc, #36]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ab8c:	4a07      	ldr	r2, [pc, #28]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab92:	6053      	str	r3, [r2, #4]
 800ab94:	e030      	b.n	800abf8 <HAL_RCC_OscConfig+0x2d4>
 800ab96:	4b05      	ldr	r3, [pc, #20]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	691b      	ldr	r3, [r3, #16]
 800aba2:	031b      	lsls	r3, r3, #12
 800aba4:	4901      	ldr	r1, [pc, #4]	@ (800abac <HAL_RCC_OscConfig+0x288>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	604b      	str	r3, [r1, #4]
 800abaa:	e025      	b.n	800abf8 <HAL_RCC_OscConfig+0x2d4>
 800abac:	58024400 	.word	0x58024400
 800abb0:	4b9a      	ldr	r3, [pc, #616]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	061b      	lsls	r3, r3, #24
 800abbe:	4997      	ldr	r1, [pc, #604]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800abc0:	4313      	orrs	r3, r2
 800abc2:	604b      	str	r3, [r1, #4]
 800abc4:	e018      	b.n	800abf8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abc6:	4b95      	ldr	r3, [pc, #596]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a94      	ldr	r2, [pc, #592]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800abcc:	f023 0301 	bic.w	r3, r3, #1
 800abd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abd2:	f7fb faeb 	bl	80061ac <HAL_GetTick>
 800abd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800abd8:	e008      	b.n	800abec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abda:	f7fb fae7 	bl	80061ac <HAL_GetTick>
 800abde:	4602      	mov	r2, r0
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d901      	bls.n	800abec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e2ed      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800abec:	4b8b      	ldr	r3, [pc, #556]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 0304 	and.w	r3, r3, #4
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1f0      	bne.n	800abda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f003 0310 	and.w	r3, r3, #16
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 80a9 	beq.w	800ad58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac06:	4b85      	ldr	r3, [pc, #532]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac10:	4b82      	ldr	r3, [pc, #520]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	d007      	beq.n	800ac2c <HAL_RCC_OscConfig+0x308>
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	2b18      	cmp	r3, #24
 800ac20:	d13a      	bne.n	800ac98 <HAL_RCC_OscConfig+0x374>
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d135      	bne.n	800ac98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac2c:	4b7b      	ldr	r3, [pc, #492]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <HAL_RCC_OscConfig+0x320>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	69db      	ldr	r3, [r3, #28]
 800ac3c:	2b80      	cmp	r3, #128	@ 0x80
 800ac3e:	d001      	beq.n	800ac44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e2c1      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac44:	f7fb fae2 	bl	800620c <HAL_GetREVID>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d817      	bhi.n	800ac82 <HAL_RCC_OscConfig+0x35e>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	2b20      	cmp	r3, #32
 800ac58:	d108      	bne.n	800ac6c <HAL_RCC_OscConfig+0x348>
 800ac5a:	4b70      	ldr	r3, [pc, #448]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ac62:	4a6e      	ldr	r2, [pc, #440]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac6a:	e075      	b.n	800ad58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac6c:	4b6b      	ldr	r3, [pc, #428]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a1b      	ldr	r3, [r3, #32]
 800ac78:	069b      	lsls	r3, r3, #26
 800ac7a:	4968      	ldr	r1, [pc, #416]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac80:	e06a      	b.n	800ad58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac82:	4b66      	ldr	r3, [pc, #408]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	061b      	lsls	r3, r3, #24
 800ac90:	4962      	ldr	r1, [pc, #392]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ac92:	4313      	orrs	r3, r2
 800ac94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac96:	e05f      	b.n	800ad58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d042      	beq.n	800ad26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aca0:	4b5e      	ldr	r3, [pc, #376]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a5d      	ldr	r2, [pc, #372]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800aca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acac:	f7fb fa7e 	bl	80061ac <HAL_GetTick>
 800acb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acb2:	e008      	b.n	800acc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800acb4:	f7fb fa7a 	bl	80061ac <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d901      	bls.n	800acc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e280      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acc6:	4b55      	ldr	r3, [pc, #340]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0f0      	beq.n	800acb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acd2:	f7fb fa9b 	bl	800620c <HAL_GetREVID>
 800acd6:	4603      	mov	r3, r0
 800acd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800acdc:	4293      	cmp	r3, r2
 800acde:	d817      	bhi.n	800ad10 <HAL_RCC_OscConfig+0x3ec>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	2b20      	cmp	r3, #32
 800ace6:	d108      	bne.n	800acfa <HAL_RCC_OscConfig+0x3d6>
 800ace8:	4b4c      	ldr	r3, [pc, #304]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800acf0:	4a4a      	ldr	r2, [pc, #296]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800acf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800acf6:	6053      	str	r3, [r2, #4]
 800acf8:	e02e      	b.n	800ad58 <HAL_RCC_OscConfig+0x434>
 800acfa:	4b48      	ldr	r3, [pc, #288]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	069b      	lsls	r3, r3, #26
 800ad08:	4944      	ldr	r1, [pc, #272]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	604b      	str	r3, [r1, #4]
 800ad0e:	e023      	b.n	800ad58 <HAL_RCC_OscConfig+0x434>
 800ad10:	4b42      	ldr	r3, [pc, #264]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	061b      	lsls	r3, r3, #24
 800ad1e:	493f      	ldr	r1, [pc, #252]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad20:	4313      	orrs	r3, r2
 800ad22:	60cb      	str	r3, [r1, #12]
 800ad24:	e018      	b.n	800ad58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ad26:	4b3d      	ldr	r3, [pc, #244]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a3c      	ldr	r2, [pc, #240]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad32:	f7fb fa3b 	bl	80061ac <HAL_GetTick>
 800ad36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad38:	e008      	b.n	800ad4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad3a:	f7fb fa37 	bl	80061ac <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d901      	bls.n	800ad4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e23d      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad4c:	4b33      	ldr	r3, [pc, #204]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1f0      	bne.n	800ad3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d036      	beq.n	800add2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d019      	beq.n	800ada0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad6c:	4b2b      	ldr	r3, [pc, #172]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad70:	4a2a      	ldr	r2, [pc, #168]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad72:	f043 0301 	orr.w	r3, r3, #1
 800ad76:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad78:	f7fb fa18 	bl	80061ac <HAL_GetTick>
 800ad7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad7e:	e008      	b.n	800ad92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad80:	f7fb fa14 	bl	80061ac <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e21a      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad92:	4b22      	ldr	r3, [pc, #136]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ad94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0f0      	beq.n	800ad80 <HAL_RCC_OscConfig+0x45c>
 800ad9e:	e018      	b.n	800add2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ada0:	4b1e      	ldr	r3, [pc, #120]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ada2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ada4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ada6:	f023 0301 	bic.w	r3, r3, #1
 800adaa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adac:	f7fb f9fe 	bl	80061ac <HAL_GetTick>
 800adb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800adb2:	e008      	b.n	800adc6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adb4:	f7fb f9fa 	bl	80061ac <HAL_GetTick>
 800adb8:	4602      	mov	r2, r0
 800adba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d901      	bls.n	800adc6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e200      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800adc6:	4b15      	ldr	r3, [pc, #84]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800adc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1f0      	bne.n	800adb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b00      	cmp	r3, #0
 800addc:	d039      	beq.n	800ae52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d01c      	beq.n	800ae20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ade6:	4b0d      	ldr	r3, [pc, #52]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a0c      	ldr	r2, [pc, #48]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800adec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800adf0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800adf2:	f7fb f9db 	bl	80061ac <HAL_GetTick>
 800adf6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800adf8:	e008      	b.n	800ae0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800adfa:	f7fb f9d7 	bl	80061ac <HAL_GetTick>
 800adfe:	4602      	mov	r2, r0
 800ae00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d901      	bls.n	800ae0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e1dd      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae0c:	4b03      	ldr	r3, [pc, #12]	@ (800ae1c <HAL_RCC_OscConfig+0x4f8>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d0f0      	beq.n	800adfa <HAL_RCC_OscConfig+0x4d6>
 800ae18:	e01b      	b.n	800ae52 <HAL_RCC_OscConfig+0x52e>
 800ae1a:	bf00      	nop
 800ae1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ae20:	4b9b      	ldr	r3, [pc, #620]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a9a      	ldr	r2, [pc, #616]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800ae26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae2c:	f7fb f9be 	bl	80061ac <HAL_GetTick>
 800ae30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae34:	f7fb f9ba 	bl	80061ac <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e1c0      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae46:	4b92      	ldr	r3, [pc, #584]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f0      	bne.n	800ae34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0304 	and.w	r3, r3, #4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f000 8081 	beq.w	800af62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ae60:	4b8c      	ldr	r3, [pc, #560]	@ (800b094 <HAL_RCC_OscConfig+0x770>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a8b      	ldr	r2, [pc, #556]	@ (800b094 <HAL_RCC_OscConfig+0x770>)
 800ae66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae6c:	f7fb f99e 	bl	80061ac <HAL_GetTick>
 800ae70:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae72:	e008      	b.n	800ae86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae74:	f7fb f99a 	bl	80061ac <HAL_GetTick>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	2b64      	cmp	r3, #100	@ 0x64
 800ae80:	d901      	bls.n	800ae86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e1a0      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae86:	4b83      	ldr	r3, [pc, #524]	@ (800b094 <HAL_RCC_OscConfig+0x770>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d0f0      	beq.n	800ae74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d106      	bne.n	800aea8 <HAL_RCC_OscConfig+0x584>
 800ae9a:	4b7d      	ldr	r3, [pc, #500]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800ae9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae9e:	4a7c      	ldr	r2, [pc, #496]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aea0:	f043 0301 	orr.w	r3, r3, #1
 800aea4:	6713      	str	r3, [r2, #112]	@ 0x70
 800aea6:	e02d      	b.n	800af04 <HAL_RCC_OscConfig+0x5e0>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10c      	bne.n	800aeca <HAL_RCC_OscConfig+0x5a6>
 800aeb0:	4b77      	ldr	r3, [pc, #476]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aeb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeb4:	4a76      	ldr	r2, [pc, #472]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aeb6:	f023 0301 	bic.w	r3, r3, #1
 800aeba:	6713      	str	r3, [r2, #112]	@ 0x70
 800aebc:	4b74      	ldr	r3, [pc, #464]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aec0:	4a73      	ldr	r2, [pc, #460]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aec2:	f023 0304 	bic.w	r3, r3, #4
 800aec6:	6713      	str	r3, [r2, #112]	@ 0x70
 800aec8:	e01c      	b.n	800af04 <HAL_RCC_OscConfig+0x5e0>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	2b05      	cmp	r3, #5
 800aed0:	d10c      	bne.n	800aeec <HAL_RCC_OscConfig+0x5c8>
 800aed2:	4b6f      	ldr	r3, [pc, #444]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aed6:	4a6e      	ldr	r2, [pc, #440]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aed8:	f043 0304 	orr.w	r3, r3, #4
 800aedc:	6713      	str	r3, [r2, #112]	@ 0x70
 800aede:	4b6c      	ldr	r3, [pc, #432]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aee2:	4a6b      	ldr	r2, [pc, #428]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aee4:	f043 0301 	orr.w	r3, r3, #1
 800aee8:	6713      	str	r3, [r2, #112]	@ 0x70
 800aeea:	e00b      	b.n	800af04 <HAL_RCC_OscConfig+0x5e0>
 800aeec:	4b68      	ldr	r3, [pc, #416]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aeee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aef0:	4a67      	ldr	r2, [pc, #412]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aef2:	f023 0301 	bic.w	r3, r3, #1
 800aef6:	6713      	str	r3, [r2, #112]	@ 0x70
 800aef8:	4b65      	ldr	r3, [pc, #404]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aefa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aefc:	4a64      	ldr	r2, [pc, #400]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800aefe:	f023 0304 	bic.w	r3, r3, #4
 800af02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d015      	beq.n	800af38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af0c:	f7fb f94e 	bl	80061ac <HAL_GetTick>
 800af10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af12:	e00a      	b.n	800af2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af14:	f7fb f94a 	bl	80061ac <HAL_GetTick>
 800af18:	4602      	mov	r2, r0
 800af1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af22:	4293      	cmp	r3, r2
 800af24:	d901      	bls.n	800af2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e14e      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af2a:	4b59      	ldr	r3, [pc, #356]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800af2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0ee      	beq.n	800af14 <HAL_RCC_OscConfig+0x5f0>
 800af36:	e014      	b.n	800af62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af38:	f7fb f938 	bl	80061ac <HAL_GetTick>
 800af3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af3e:	e00a      	b.n	800af56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af40:	f7fb f934 	bl	80061ac <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af4e:	4293      	cmp	r3, r2
 800af50:	d901      	bls.n	800af56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	e138      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af56:	4b4e      	ldr	r3, [pc, #312]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800af58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af5a:	f003 0302 	and.w	r3, r3, #2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1ee      	bne.n	800af40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 812d 	beq.w	800b1c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800af6c:	4b48      	ldr	r3, [pc, #288]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af74:	2b18      	cmp	r3, #24
 800af76:	f000 80bd 	beq.w	800b0f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af7e:	2b02      	cmp	r3, #2
 800af80:	f040 809e 	bne.w	800b0c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af84:	4b42      	ldr	r3, [pc, #264]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a41      	ldr	r2, [pc, #260]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800af8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af90:	f7fb f90c 	bl	80061ac <HAL_GetTick>
 800af94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af96:	e008      	b.n	800afaa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af98:	f7fb f908 	bl	80061ac <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d901      	bls.n	800afaa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e10e      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afaa:	4b39      	ldr	r3, [pc, #228]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1f0      	bne.n	800af98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800afb6:	4b36      	ldr	r3, [pc, #216]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800afb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afba:	4b37      	ldr	r3, [pc, #220]	@ (800b098 <HAL_RCC_OscConfig+0x774>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800afc6:	0112      	lsls	r2, r2, #4
 800afc8:	430a      	orrs	r2, r1
 800afca:	4931      	ldr	r1, [pc, #196]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800afcc:	4313      	orrs	r3, r2
 800afce:	628b      	str	r3, [r1, #40]	@ 0x28
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd4:	3b01      	subs	r3, #1
 800afd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afde:	3b01      	subs	r3, #1
 800afe0:	025b      	lsls	r3, r3, #9
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	431a      	orrs	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afea:	3b01      	subs	r3, #1
 800afec:	041b      	lsls	r3, r3, #16
 800afee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aff2:	431a      	orrs	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff8:	3b01      	subs	r3, #1
 800affa:	061b      	lsls	r3, r3, #24
 800affc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b000:	4923      	ldr	r1, [pc, #140]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b002:	4313      	orrs	r3, r2
 800b004:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b006:	4b22      	ldr	r3, [pc, #136]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00a:	4a21      	ldr	r2, [pc, #132]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b00c:	f023 0301 	bic.w	r3, r3, #1
 800b010:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b012:	4b1f      	ldr	r3, [pc, #124]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b016:	4b21      	ldr	r3, [pc, #132]	@ (800b09c <HAL_RCC_OscConfig+0x778>)
 800b018:	4013      	ands	r3, r2
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b01e:	00d2      	lsls	r2, r2, #3
 800b020:	491b      	ldr	r1, [pc, #108]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b022:	4313      	orrs	r3, r2
 800b024:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b026:	4b1a      	ldr	r3, [pc, #104]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b02a:	f023 020c 	bic.w	r2, r3, #12
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b032:	4917      	ldr	r1, [pc, #92]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b034:	4313      	orrs	r3, r2
 800b036:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b038:	4b15      	ldr	r3, [pc, #84]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b03c:	f023 0202 	bic.w	r2, r3, #2
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b044:	4912      	ldr	r1, [pc, #72]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b046:	4313      	orrs	r3, r2
 800b048:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b04a:	4b11      	ldr	r3, [pc, #68]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04e:	4a10      	ldr	r2, [pc, #64]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b054:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b056:	4b0e      	ldr	r3, [pc, #56]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05a:	4a0d      	ldr	r2, [pc, #52]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b05c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b062:	4b0b      	ldr	r3, [pc, #44]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b066:	4a0a      	ldr	r2, [pc, #40]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b06c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b06e:	4b08      	ldr	r3, [pc, #32]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b072:	4a07      	ldr	r2, [pc, #28]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b074:	f043 0301 	orr.w	r3, r3, #1
 800b078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b07a:	4b05      	ldr	r3, [pc, #20]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a04      	ldr	r2, [pc, #16]	@ (800b090 <HAL_RCC_OscConfig+0x76c>)
 800b080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b086:	f7fb f891 	bl	80061ac <HAL_GetTick>
 800b08a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b08c:	e011      	b.n	800b0b2 <HAL_RCC_OscConfig+0x78e>
 800b08e:	bf00      	nop
 800b090:	58024400 	.word	0x58024400
 800b094:	58024800 	.word	0x58024800
 800b098:	fffffc0c 	.word	0xfffffc0c
 800b09c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0a0:	f7fb f884 	bl	80061ac <HAL_GetTick>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d901      	bls.n	800b0b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e08a      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0b2:	4b47      	ldr	r3, [pc, #284]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0f0      	beq.n	800b0a0 <HAL_RCC_OscConfig+0x77c>
 800b0be:	e082      	b.n	800b1c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0c0:	4b43      	ldr	r3, [pc, #268]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a42      	ldr	r2, [pc, #264]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b0c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0cc:	f7fb f86e 	bl	80061ac <HAL_GetTick>
 800b0d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0d2:	e008      	b.n	800b0e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0d4:	f7fb f86a 	bl	80061ac <HAL_GetTick>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	1ad3      	subs	r3, r2, r3
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d901      	bls.n	800b0e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	e070      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0e6:	4b3a      	ldr	r3, [pc, #232]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1f0      	bne.n	800b0d4 <HAL_RCC_OscConfig+0x7b0>
 800b0f2:	e068      	b.n	800b1c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b0f4:	4b36      	ldr	r3, [pc, #216]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b0fa:	4b35      	ldr	r3, [pc, #212]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b104:	2b01      	cmp	r3, #1
 800b106:	d031      	beq.n	800b16c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	f003 0203 	and.w	r2, r3, #3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b112:	429a      	cmp	r2, r3
 800b114:	d12a      	bne.n	800b16c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	091b      	lsrs	r3, r3, #4
 800b11a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b122:	429a      	cmp	r2, r3
 800b124:	d122      	bne.n	800b16c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b130:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b132:	429a      	cmp	r2, r3
 800b134:	d11a      	bne.n	800b16c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	0a5b      	lsrs	r3, r3, #9
 800b13a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b142:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b144:	429a      	cmp	r2, r3
 800b146:	d111      	bne.n	800b16c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	0c1b      	lsrs	r3, r3, #16
 800b14c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b154:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b156:	429a      	cmp	r2, r3
 800b158:	d108      	bne.n	800b16c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	0e1b      	lsrs	r3, r3, #24
 800b15e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b166:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b168:	429a      	cmp	r2, r3
 800b16a:	d001      	beq.n	800b170 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e02b      	b.n	800b1c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b170:	4b17      	ldr	r3, [pc, #92]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b174:	08db      	lsrs	r3, r3, #3
 800b176:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b17a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	429a      	cmp	r2, r3
 800b184:	d01f      	beq.n	800b1c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b186:	4b12      	ldr	r3, [pc, #72]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b18a:	4a11      	ldr	r2, [pc, #68]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b18c:	f023 0301 	bic.w	r3, r3, #1
 800b190:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b192:	f7fb f80b 	bl	80061ac <HAL_GetTick>
 800b196:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b198:	bf00      	nop
 800b19a:	f7fb f807 	bl	80061ac <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d0f9      	beq.n	800b19a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b1a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <HAL_RCC_OscConfig+0x8b0>)
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b1b2:	00d2      	lsls	r2, r2, #3
 800b1b4:	4906      	ldr	r1, [pc, #24]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b1ba:	4b05      	ldr	r3, [pc, #20]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1be:	4a04      	ldr	r2, [pc, #16]	@ (800b1d0 <HAL_RCC_OscConfig+0x8ac>)
 800b1c0:	f043 0301 	orr.w	r3, r3, #1
 800b1c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3730      	adds	r7, #48	@ 0x30
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	ffff0007 	.word	0xffff0007

0800b1d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e19c      	b.n	800b526 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1ec:	4b8a      	ldr	r3, [pc, #552]	@ (800b418 <HAL_RCC_ClockConfig+0x240>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 030f 	and.w	r3, r3, #15
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d910      	bls.n	800b21c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1fa:	4b87      	ldr	r3, [pc, #540]	@ (800b418 <HAL_RCC_ClockConfig+0x240>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f023 020f 	bic.w	r2, r3, #15
 800b202:	4985      	ldr	r1, [pc, #532]	@ (800b418 <HAL_RCC_ClockConfig+0x240>)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	4313      	orrs	r3, r2
 800b208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b20a:	4b83      	ldr	r3, [pc, #524]	@ (800b418 <HAL_RCC_ClockConfig+0x240>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 030f 	and.w	r3, r3, #15
 800b212:	683a      	ldr	r2, [r7, #0]
 800b214:	429a      	cmp	r2, r3
 800b216:	d001      	beq.n	800b21c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e184      	b.n	800b526 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 0304 	and.w	r3, r3, #4
 800b224:	2b00      	cmp	r3, #0
 800b226:	d010      	beq.n	800b24a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	691a      	ldr	r2, [r3, #16]
 800b22c:	4b7b      	ldr	r3, [pc, #492]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b234:	429a      	cmp	r2, r3
 800b236:	d908      	bls.n	800b24a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b238:	4b78      	ldr	r3, [pc, #480]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	4975      	ldr	r1, [pc, #468]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b246:	4313      	orrs	r3, r2
 800b248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0308 	and.w	r3, r3, #8
 800b252:	2b00      	cmp	r3, #0
 800b254:	d010      	beq.n	800b278 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	695a      	ldr	r2, [r3, #20]
 800b25a:	4b70      	ldr	r3, [pc, #448]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b262:	429a      	cmp	r2, r3
 800b264:	d908      	bls.n	800b278 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b266:	4b6d      	ldr	r3, [pc, #436]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	695b      	ldr	r3, [r3, #20]
 800b272:	496a      	ldr	r1, [pc, #424]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b274:	4313      	orrs	r3, r2
 800b276:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 0310 	and.w	r3, r3, #16
 800b280:	2b00      	cmp	r3, #0
 800b282:	d010      	beq.n	800b2a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	699a      	ldr	r2, [r3, #24]
 800b288:	4b64      	ldr	r3, [pc, #400]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b290:	429a      	cmp	r2, r3
 800b292:	d908      	bls.n	800b2a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b294:	4b61      	ldr	r3, [pc, #388]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	495e      	ldr	r1, [pc, #376]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 0320 	and.w	r3, r3, #32
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d010      	beq.n	800b2d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	69da      	ldr	r2, [r3, #28]
 800b2b6:	4b59      	ldr	r3, [pc, #356]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d908      	bls.n	800b2d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b2c2:	4b56      	ldr	r3, [pc, #344]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	4953      	ldr	r1, [pc, #332]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d010      	beq.n	800b302 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	68da      	ldr	r2, [r3, #12]
 800b2e4:	4b4d      	ldr	r3, [pc, #308]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b2e6:	699b      	ldr	r3, [r3, #24]
 800b2e8:	f003 030f 	and.w	r3, r3, #15
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d908      	bls.n	800b302 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2f0:	4b4a      	ldr	r3, [pc, #296]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b2f2:	699b      	ldr	r3, [r3, #24]
 800b2f4:	f023 020f 	bic.w	r2, r3, #15
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	4947      	ldr	r1, [pc, #284]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d055      	beq.n	800b3ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b30e:	4b43      	ldr	r3, [pc, #268]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b310:	699b      	ldr	r3, [r3, #24]
 800b312:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	4940      	ldr	r1, [pc, #256]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b31c:	4313      	orrs	r3, r2
 800b31e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d107      	bne.n	800b338 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b328:	4b3c      	ldr	r3, [pc, #240]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d121      	bne.n	800b378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e0f6      	b.n	800b526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d107      	bne.n	800b350 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b340:	4b36      	ldr	r3, [pc, #216]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d115      	bne.n	800b378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e0ea      	b.n	800b526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d107      	bne.n	800b368 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b358:	4b30      	ldr	r3, [pc, #192]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	e0de      	b.n	800b526 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b368:	4b2c      	ldr	r3, [pc, #176]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 0304 	and.w	r3, r3, #4
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e0d6      	b.n	800b526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b378:	4b28      	ldr	r3, [pc, #160]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	f023 0207 	bic.w	r2, r3, #7
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	4925      	ldr	r1, [pc, #148]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b386:	4313      	orrs	r3, r2
 800b388:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b38a:	f7fa ff0f 	bl	80061ac <HAL_GetTick>
 800b38e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b390:	e00a      	b.n	800b3a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b392:	f7fa ff0b 	bl	80061ac <HAL_GetTick>
 800b396:	4602      	mov	r2, r0
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d901      	bls.n	800b3a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e0be      	b.n	800b526 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3a8:	4b1c      	ldr	r3, [pc, #112]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	00db      	lsls	r3, r3, #3
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d1eb      	bne.n	800b392 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d010      	beq.n	800b3e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68da      	ldr	r2, [r3, #12]
 800b3ca:	4b14      	ldr	r3, [pc, #80]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	f003 030f 	and.w	r3, r3, #15
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d208      	bcs.n	800b3e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3d6:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	f023 020f 	bic.w	r2, r3, #15
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	490e      	ldr	r1, [pc, #56]	@ (800b41c <HAL_RCC_ClockConfig+0x244>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b418 <HAL_RCC_ClockConfig+0x240>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 030f 	and.w	r3, r3, #15
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d214      	bcs.n	800b420 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3f6:	4b08      	ldr	r3, [pc, #32]	@ (800b418 <HAL_RCC_ClockConfig+0x240>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f023 020f 	bic.w	r2, r3, #15
 800b3fe:	4906      	ldr	r1, [pc, #24]	@ (800b418 <HAL_RCC_ClockConfig+0x240>)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	4313      	orrs	r3, r2
 800b404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b406:	4b04      	ldr	r3, [pc, #16]	@ (800b418 <HAL_RCC_ClockConfig+0x240>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 030f 	and.w	r3, r3, #15
 800b40e:	683a      	ldr	r2, [r7, #0]
 800b410:	429a      	cmp	r2, r3
 800b412:	d005      	beq.n	800b420 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e086      	b.n	800b526 <HAL_RCC_ClockConfig+0x34e>
 800b418:	52002000 	.word	0x52002000
 800b41c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d010      	beq.n	800b44e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	691a      	ldr	r2, [r3, #16]
 800b430:	4b3f      	ldr	r3, [pc, #252]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b432:	699b      	ldr	r3, [r3, #24]
 800b434:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b438:	429a      	cmp	r2, r3
 800b43a:	d208      	bcs.n	800b44e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b43c:	4b3c      	ldr	r3, [pc, #240]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	4939      	ldr	r1, [pc, #228]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 0308 	and.w	r3, r3, #8
 800b456:	2b00      	cmp	r3, #0
 800b458:	d010      	beq.n	800b47c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	695a      	ldr	r2, [r3, #20]
 800b45e:	4b34      	ldr	r3, [pc, #208]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b466:	429a      	cmp	r2, r3
 800b468:	d208      	bcs.n	800b47c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b46a:	4b31      	ldr	r3, [pc, #196]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	492e      	ldr	r1, [pc, #184]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b478:	4313      	orrs	r3, r2
 800b47a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0310 	and.w	r3, r3, #16
 800b484:	2b00      	cmp	r3, #0
 800b486:	d010      	beq.n	800b4aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	699a      	ldr	r2, [r3, #24]
 800b48c:	4b28      	ldr	r3, [pc, #160]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b48e:	69db      	ldr	r3, [r3, #28]
 800b490:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b494:	429a      	cmp	r2, r3
 800b496:	d208      	bcs.n	800b4aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b498:	4b25      	ldr	r3, [pc, #148]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	4922      	ldr	r1, [pc, #136]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 0320 	and.w	r3, r3, #32
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d010      	beq.n	800b4d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	69da      	ldr	r2, [r3, #28]
 800b4ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d208      	bcs.n	800b4d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b4c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b4c8:	6a1b      	ldr	r3, [r3, #32]
 800b4ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	69db      	ldr	r3, [r3, #28]
 800b4d2:	4917      	ldr	r1, [pc, #92]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b4d8:	f000 f834 	bl	800b544 <HAL_RCC_GetSysClockFreq>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	4b14      	ldr	r3, [pc, #80]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	0a1b      	lsrs	r3, r3, #8
 800b4e4:	f003 030f 	and.w	r3, r3, #15
 800b4e8:	4912      	ldr	r1, [pc, #72]	@ (800b534 <HAL_RCC_ClockConfig+0x35c>)
 800b4ea:	5ccb      	ldrb	r3, [r1, r3]
 800b4ec:	f003 031f 	and.w	r3, r3, #31
 800b4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b4f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b530 <HAL_RCC_ClockConfig+0x358>)
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	f003 030f 	and.w	r3, r3, #15
 800b4fe:	4a0d      	ldr	r2, [pc, #52]	@ (800b534 <HAL_RCC_ClockConfig+0x35c>)
 800b500:	5cd3      	ldrb	r3, [r2, r3]
 800b502:	f003 031f 	and.w	r3, r3, #31
 800b506:	693a      	ldr	r2, [r7, #16]
 800b508:	fa22 f303 	lsr.w	r3, r2, r3
 800b50c:	4a0a      	ldr	r2, [pc, #40]	@ (800b538 <HAL_RCC_ClockConfig+0x360>)
 800b50e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b510:	4a0a      	ldr	r2, [pc, #40]	@ (800b53c <HAL_RCC_ClockConfig+0x364>)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b516:	4b0a      	ldr	r3, [pc, #40]	@ (800b540 <HAL_RCC_ClockConfig+0x368>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fa fa9a 	bl	8005a54 <HAL_InitTick>
 800b520:	4603      	mov	r3, r0
 800b522:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	58024400 	.word	0x58024400
 800b534:	08017218 	.word	0x08017218
 800b538:	24000058 	.word	0x24000058
 800b53c:	24000054 	.word	0x24000054
 800b540:	24000074 	.word	0x24000074

0800b544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b544:	b480      	push	{r7}
 800b546:	b089      	sub	sp, #36	@ 0x24
 800b548:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b54a:	4bb3      	ldr	r3, [pc, #716]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b552:	2b18      	cmp	r3, #24
 800b554:	f200 8155 	bhi.w	800b802 <HAL_RCC_GetSysClockFreq+0x2be>
 800b558:	a201      	add	r2, pc, #4	@ (adr r2, 800b560 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55e:	bf00      	nop
 800b560:	0800b5c5 	.word	0x0800b5c5
 800b564:	0800b803 	.word	0x0800b803
 800b568:	0800b803 	.word	0x0800b803
 800b56c:	0800b803 	.word	0x0800b803
 800b570:	0800b803 	.word	0x0800b803
 800b574:	0800b803 	.word	0x0800b803
 800b578:	0800b803 	.word	0x0800b803
 800b57c:	0800b803 	.word	0x0800b803
 800b580:	0800b5eb 	.word	0x0800b5eb
 800b584:	0800b803 	.word	0x0800b803
 800b588:	0800b803 	.word	0x0800b803
 800b58c:	0800b803 	.word	0x0800b803
 800b590:	0800b803 	.word	0x0800b803
 800b594:	0800b803 	.word	0x0800b803
 800b598:	0800b803 	.word	0x0800b803
 800b59c:	0800b803 	.word	0x0800b803
 800b5a0:	0800b5f1 	.word	0x0800b5f1
 800b5a4:	0800b803 	.word	0x0800b803
 800b5a8:	0800b803 	.word	0x0800b803
 800b5ac:	0800b803 	.word	0x0800b803
 800b5b0:	0800b803 	.word	0x0800b803
 800b5b4:	0800b803 	.word	0x0800b803
 800b5b8:	0800b803 	.word	0x0800b803
 800b5bc:	0800b803 	.word	0x0800b803
 800b5c0:	0800b5f7 	.word	0x0800b5f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5c4:	4b94      	ldr	r3, [pc, #592]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0320 	and.w	r3, r3, #32
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d009      	beq.n	800b5e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5d0:	4b91      	ldr	r3, [pc, #580]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	08db      	lsrs	r3, r3, #3
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	4a90      	ldr	r2, [pc, #576]	@ (800b81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b5e2:	e111      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b5e4:	4b8d      	ldr	r3, [pc, #564]	@ (800b81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5e6:	61bb      	str	r3, [r7, #24]
      break;
 800b5e8:	e10e      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b5ea:	4b8d      	ldr	r3, [pc, #564]	@ (800b820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b5ec:	61bb      	str	r3, [r7, #24]
      break;
 800b5ee:	e10b      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b5f0:	4b8c      	ldr	r3, [pc, #560]	@ (800b824 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b5f2:	61bb      	str	r3, [r7, #24]
      break;
 800b5f4:	e108      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5f6:	4b88      	ldr	r3, [pc, #544]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5fa:	f003 0303 	and.w	r3, r3, #3
 800b5fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b600:	4b85      	ldr	r3, [pc, #532]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b604:	091b      	lsrs	r3, r3, #4
 800b606:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b60a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b60c:	4b82      	ldr	r3, [pc, #520]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b616:	4b80      	ldr	r3, [pc, #512]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b61a:	08db      	lsrs	r3, r3, #3
 800b61c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	fb02 f303 	mul.w	r3, r2, r3
 800b626:	ee07 3a90 	vmov	s15, r3
 800b62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 80e1 	beq.w	800b7fc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	f000 8083 	beq.w	800b748 <HAL_RCC_GetSysClockFreq+0x204>
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b02      	cmp	r3, #2
 800b646:	f200 80a1 	bhi.w	800b78c <HAL_RCC_GetSysClockFreq+0x248>
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d003      	beq.n	800b658 <HAL_RCC_GetSysClockFreq+0x114>
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d056      	beq.n	800b704 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b656:	e099      	b.n	800b78c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b658:	4b6f      	ldr	r3, [pc, #444]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0320 	and.w	r3, r3, #32
 800b660:	2b00      	cmp	r3, #0
 800b662:	d02d      	beq.n	800b6c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b664:	4b6c      	ldr	r3, [pc, #432]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	08db      	lsrs	r3, r3, #3
 800b66a:	f003 0303 	and.w	r3, r3, #3
 800b66e:	4a6b      	ldr	r2, [pc, #428]	@ (800b81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b670:	fa22 f303 	lsr.w	r3, r2, r3
 800b674:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	ee07 3a90 	vmov	s15, r3
 800b67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	ee07 3a90 	vmov	s15, r3
 800b686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b68e:	4b62      	ldr	r3, [pc, #392]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b69e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b6be:	e087      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	ee07 3a90 	vmov	s15, r3
 800b6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b82c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6d2:	4b51      	ldr	r3, [pc, #324]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6da:	ee07 3a90 	vmov	s15, r3
 800b6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b702:	e065      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	ee07 3a90 	vmov	s15, r3
 800b70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b830 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b716:	4b40      	ldr	r3, [pc, #256]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71e:	ee07 3a90 	vmov	s15, r3
 800b722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b726:	ed97 6a02 	vldr	s12, [r7, #8]
 800b72a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b746:	e043      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b752:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b834 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b75a:	4b2f      	ldr	r3, [pc, #188]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b762:	ee07 3a90 	vmov	s15, r3
 800b766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b76a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b76e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b77a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b78a:	e021      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	ee07 3a90 	vmov	s15, r3
 800b792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b796:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b830 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79e:	4b1e      	ldr	r3, [pc, #120]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a6:	ee07 3a90 	vmov	s15, r3
 800b7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b7d0:	4b11      	ldr	r3, [pc, #68]	@ (800b818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7d4:	0a5b      	lsrs	r3, r3, #9
 800b7d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7da:	3301      	adds	r3, #1
 800b7dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	ee07 3a90 	vmov	s15, r3
 800b7e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7f4:	ee17 3a90 	vmov	r3, s15
 800b7f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b7fa:	e005      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	61bb      	str	r3, [r7, #24]
      break;
 800b800:	e002      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b802:	4b07      	ldr	r3, [pc, #28]	@ (800b820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b804:	61bb      	str	r3, [r7, #24]
      break;
 800b806:	bf00      	nop
  }

  return sysclockfreq;
 800b808:	69bb      	ldr	r3, [r7, #24]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3724      	adds	r7, #36	@ 0x24
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	58024400 	.word	0x58024400
 800b81c:	03d09000 	.word	0x03d09000
 800b820:	003d0900 	.word	0x003d0900
 800b824:	007a1200 	.word	0x007a1200
 800b828:	46000000 	.word	0x46000000
 800b82c:	4c742400 	.word	0x4c742400
 800b830:	4a742400 	.word	0x4a742400
 800b834:	4af42400 	.word	0x4af42400

0800b838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b83e:	f7ff fe81 	bl	800b544 <HAL_RCC_GetSysClockFreq>
 800b842:	4602      	mov	r2, r0
 800b844:	4b10      	ldr	r3, [pc, #64]	@ (800b888 <HAL_RCC_GetHCLKFreq+0x50>)
 800b846:	699b      	ldr	r3, [r3, #24]
 800b848:	0a1b      	lsrs	r3, r3, #8
 800b84a:	f003 030f 	and.w	r3, r3, #15
 800b84e:	490f      	ldr	r1, [pc, #60]	@ (800b88c <HAL_RCC_GetHCLKFreq+0x54>)
 800b850:	5ccb      	ldrb	r3, [r1, r3]
 800b852:	f003 031f 	and.w	r3, r3, #31
 800b856:	fa22 f303 	lsr.w	r3, r2, r3
 800b85a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b85c:	4b0a      	ldr	r3, [pc, #40]	@ (800b888 <HAL_RCC_GetHCLKFreq+0x50>)
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	f003 030f 	and.w	r3, r3, #15
 800b864:	4a09      	ldr	r2, [pc, #36]	@ (800b88c <HAL_RCC_GetHCLKFreq+0x54>)
 800b866:	5cd3      	ldrb	r3, [r2, r3]
 800b868:	f003 031f 	and.w	r3, r3, #31
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	fa22 f303 	lsr.w	r3, r2, r3
 800b872:	4a07      	ldr	r2, [pc, #28]	@ (800b890 <HAL_RCC_GetHCLKFreq+0x58>)
 800b874:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b876:	4a07      	ldr	r2, [pc, #28]	@ (800b894 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b87c:	4b04      	ldr	r3, [pc, #16]	@ (800b890 <HAL_RCC_GetHCLKFreq+0x58>)
 800b87e:	681b      	ldr	r3, [r3, #0]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	58024400 	.word	0x58024400
 800b88c:	08017218 	.word	0x08017218
 800b890:	24000058 	.word	0x24000058
 800b894:	24000054 	.word	0x24000054

0800b898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b89c:	f7ff ffcc 	bl	800b838 <HAL_RCC_GetHCLKFreq>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	4b06      	ldr	r3, [pc, #24]	@ (800b8bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8a4:	69db      	ldr	r3, [r3, #28]
 800b8a6:	091b      	lsrs	r3, r3, #4
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	4904      	ldr	r1, [pc, #16]	@ (800b8c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8ae:	5ccb      	ldrb	r3, [r1, r3]
 800b8b0:	f003 031f 	and.w	r3, r3, #31
 800b8b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	58024400 	.word	0x58024400
 800b8c0:	08017218 	.word	0x08017218

0800b8c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b8c8:	f7ff ffb6 	bl	800b838 <HAL_RCC_GetHCLKFreq>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	4b06      	ldr	r3, [pc, #24]	@ (800b8e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	0a1b      	lsrs	r3, r3, #8
 800b8d4:	f003 0307 	and.w	r3, r3, #7
 800b8d8:	4904      	ldr	r1, [pc, #16]	@ (800b8ec <HAL_RCC_GetPCLK2Freq+0x28>)
 800b8da:	5ccb      	ldrb	r3, [r1, r3]
 800b8dc:	f003 031f 	and.w	r3, r3, #31
 800b8e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	58024400 	.word	0x58024400
 800b8ec:	08017218 	.word	0x08017218

0800b8f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	223f      	movs	r2, #63	@ 0x3f
 800b8fe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b900:	4b1a      	ldr	r3, [pc, #104]	@ (800b96c <HAL_RCC_GetClockConfig+0x7c>)
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	f003 0207 	and.w	r2, r3, #7
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b90c:	4b17      	ldr	r3, [pc, #92]	@ (800b96c <HAL_RCC_GetClockConfig+0x7c>)
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b918:	4b14      	ldr	r3, [pc, #80]	@ (800b96c <HAL_RCC_GetClockConfig+0x7c>)
 800b91a:	699b      	ldr	r3, [r3, #24]
 800b91c:	f003 020f 	and.w	r2, r3, #15
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b924:	4b11      	ldr	r3, [pc, #68]	@ (800b96c <HAL_RCC_GetClockConfig+0x7c>)
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b930:	4b0e      	ldr	r3, [pc, #56]	@ (800b96c <HAL_RCC_GetClockConfig+0x7c>)
 800b932:	69db      	ldr	r3, [r3, #28]
 800b934:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b93c:	4b0b      	ldr	r3, [pc, #44]	@ (800b96c <HAL_RCC_GetClockConfig+0x7c>)
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b948:	4b08      	ldr	r3, [pc, #32]	@ (800b96c <HAL_RCC_GetClockConfig+0x7c>)
 800b94a:	6a1b      	ldr	r3, [r3, #32]
 800b94c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b954:	4b06      	ldr	r3, [pc, #24]	@ (800b970 <HAL_RCC_GetClockConfig+0x80>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 020f 	and.w	r2, r3, #15
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	601a      	str	r2, [r3, #0]
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	58024400 	.word	0x58024400
 800b970:	52002000 	.word	0x52002000

0800b974 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b978:	b0ca      	sub	sp, #296	@ 0x128
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b980:	2300      	movs	r3, #0
 800b982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b986:	2300      	movs	r3, #0
 800b988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b98c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b998:	2500      	movs	r5, #0
 800b99a:	ea54 0305 	orrs.w	r3, r4, r5
 800b99e:	d049      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b9a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9aa:	d02f      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b9ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9b0:	d828      	bhi.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b9b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9b6:	d01a      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b9b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9bc:	d822      	bhi.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b9c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9c6:	d007      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b9c8:	e01c      	b.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ca:	4bb8      	ldr	r3, [pc, #736]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ce:	4ab7      	ldr	r2, [pc, #732]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9d6:	e01a      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9dc:	3308      	adds	r3, #8
 800b9de:	2102      	movs	r1, #2
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 fc8f 	bl	800d304 <RCCEx_PLL2_Config>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9ec:	e00f      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b9f2:	3328      	adds	r3, #40	@ 0x28
 800b9f4:	2102      	movs	r1, #2
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f001 fd36 	bl	800d468 <RCCEx_PLL3_Config>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba02:	e004      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ba0a:	e000      	b.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ba0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10a      	bne.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba16:	4ba5      	ldr	r3, [pc, #660]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ba1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ba24:	4aa1      	ldr	r2, [pc, #644]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba26:	430b      	orrs	r3, r1
 800ba28:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba2a:	e003      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ba30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ba40:	f04f 0900 	mov.w	r9, #0
 800ba44:	ea58 0309 	orrs.w	r3, r8, r9
 800ba48:	d047      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba50:	2b04      	cmp	r3, #4
 800ba52:	d82a      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba54:	a201      	add	r2, pc, #4	@ (adr r2, 800ba5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5a:	bf00      	nop
 800ba5c:	0800ba71 	.word	0x0800ba71
 800ba60:	0800ba7f 	.word	0x0800ba7f
 800ba64:	0800ba95 	.word	0x0800ba95
 800ba68:	0800bab3 	.word	0x0800bab3
 800ba6c:	0800bab3 	.word	0x0800bab3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba70:	4b8e      	ldr	r3, [pc, #568]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba74:	4a8d      	ldr	r2, [pc, #564]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ba76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba7c:	e01a      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba82:	3308      	adds	r3, #8
 800ba84:	2100      	movs	r1, #0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f001 fc3c 	bl	800d304 <RCCEx_PLL2_Config>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba92:	e00f      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ba98:	3328      	adds	r3, #40	@ 0x28
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f001 fce3 	bl	800d468 <RCCEx_PLL3_Config>
 800baa2:	4603      	mov	r3, r0
 800baa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800baa8:	e004      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bab0:	e000      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800babc:	4b7b      	ldr	r3, [pc, #492]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800babe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bac0:	f023 0107 	bic.w	r1, r3, #7
 800bac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800baca:	4a78      	ldr	r2, [pc, #480]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bacc:	430b      	orrs	r3, r1
 800bace:	6513      	str	r3, [r2, #80]	@ 0x50
 800bad0:	e003      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bad6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800bae6:	f04f 0b00 	mov.w	fp, #0
 800baea:	ea5a 030b 	orrs.w	r3, sl, fp
 800baee:	d04c      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800baf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800baf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bafa:	d030      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800bafc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb00:	d829      	bhi.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb02:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb04:	d02d      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bb06:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb08:	d825      	bhi.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb0a:	2b80      	cmp	r3, #128	@ 0x80
 800bb0c:	d018      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800bb0e:	2b80      	cmp	r3, #128	@ 0x80
 800bb10:	d821      	bhi.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800bb16:	2b40      	cmp	r3, #64	@ 0x40
 800bb18:	d007      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800bb1a:	e01c      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb1c:	4b63      	ldr	r3, [pc, #396]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb20:	4a62      	ldr	r2, [pc, #392]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb28:	e01c      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb2e:	3308      	adds	r3, #8
 800bb30:	2100      	movs	r1, #0
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 fbe6 	bl	800d304 <RCCEx_PLL2_Config>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb3e:	e011      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb44:	3328      	adds	r3, #40	@ 0x28
 800bb46:	2100      	movs	r1, #0
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f001 fc8d 	bl	800d468 <RCCEx_PLL3_Config>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800bb54:	e006      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb56:	2301      	movs	r3, #1
 800bb58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bb5c:	e002      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bb5e:	bf00      	nop
 800bb60:	e000      	b.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800bb62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10a      	bne.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bb6c:	4b4f      	ldr	r3, [pc, #316]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb70:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800bb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb7a:	4a4c      	ldr	r2, [pc, #304]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bb7c:	430b      	orrs	r3, r1
 800bb7e:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb80:	e003      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bb86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800bb96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800bba0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800bba4:	460b      	mov	r3, r1
 800bba6:	4313      	orrs	r3, r2
 800bba8:	d053      	beq.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bbb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbb6:	d035      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800bbb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbbc:	d82e      	bhi.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bbbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bbc2:	d031      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800bbc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bbc8:	d828      	bhi.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bbca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bbce:	d01a      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800bbd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bbd4:	d822      	bhi.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d003      	beq.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800bbda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bbde:	d007      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800bbe0:	e01c      	b.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbe2:	4b32      	ldr	r3, [pc, #200]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe6:	4a31      	ldr	r2, [pc, #196]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bbe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbee:	e01c      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f001 fb83 	bl	800d304 <RCCEx_PLL2_Config>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bc04:	e011      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc0a:	3328      	adds	r3, #40	@ 0x28
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f001 fc2a 	bl	800d468 <RCCEx_PLL3_Config>
 800bc14:	4603      	mov	r3, r0
 800bc16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc1a:	e006      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bc22:	e002      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bc24:	bf00      	nop
 800bc26:	e000      	b.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800bc28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d10b      	bne.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bc32:	4b1e      	ldr	r3, [pc, #120]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc36:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc42:	4a1a      	ldr	r2, [pc, #104]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc44:	430b      	orrs	r3, r1
 800bc46:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc48:	e003      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bc4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bc5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bc62:	2300      	movs	r3, #0
 800bc64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bc68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	d056      	beq.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bc7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc7e:	d038      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bc80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc84:	d831      	bhi.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bc86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc8a:	d034      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800bc8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc90:	d82b      	bhi.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bc92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc96:	d01d      	beq.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800bc98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc9c:	d825      	bhi.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d006      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800bca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bca6:	d00a      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800bca8:	e01f      	b.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800bcaa:	bf00      	nop
 800bcac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb0:	4ba2      	ldr	r3, [pc, #648]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb4:	4aa1      	ldr	r2, [pc, #644]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bcb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bcbc:	e01c      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcc2:	3308      	adds	r3, #8
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f001 fb1c 	bl	800d304 <RCCEx_PLL2_Config>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bcd2:	e011      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bcd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bcd8:	3328      	adds	r3, #40	@ 0x28
 800bcda:	2100      	movs	r1, #0
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f001 fbc3 	bl	800d468 <RCCEx_PLL3_Config>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bce8:	e006      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bcf0:	e002      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800bcf2:	bf00      	nop
 800bcf4:	e000      	b.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800bcf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10b      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bd00:	4b8e      	ldr	r3, [pc, #568]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bd08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bd10:	4a8a      	ldr	r2, [pc, #552]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd12:	430b      	orrs	r3, r1
 800bd14:	6593      	str	r3, [r2, #88]	@ 0x58
 800bd16:	e003      	b.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bd20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bd2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bd30:	2300      	movs	r3, #0
 800bd32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	d03a      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800bd40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd46:	2b30      	cmp	r3, #48	@ 0x30
 800bd48:	d01f      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800bd4a:	2b30      	cmp	r3, #48	@ 0x30
 800bd4c:	d819      	bhi.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bd4e:	2b20      	cmp	r3, #32
 800bd50:	d00c      	beq.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	d815      	bhi.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d019      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bd5a:	2b10      	cmp	r3, #16
 800bd5c:	d111      	bne.n	800bd82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd5e:	4b77      	ldr	r3, [pc, #476]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd62:	4a76      	ldr	r2, [pc, #472]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bd6a:	e011      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bd70:	3308      	adds	r3, #8
 800bd72:	2102      	movs	r1, #2
 800bd74:	4618      	mov	r0, r3
 800bd76:	f001 fac5 	bl	800d304 <RCCEx_PLL2_Config>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800bd80:	e006      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bd88:	e002      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bd8a:	bf00      	nop
 800bd8c:	e000      	b.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800bd8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bd98:	4b68      	ldr	r3, [pc, #416]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bd9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd9c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bda4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bda6:	4a65      	ldr	r2, [pc, #404]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bdac:	e003      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bdb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bdc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bdcc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	d051      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bdd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bdda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bddc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bde0:	d035      	beq.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800bde2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bde6:	d82e      	bhi.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bde8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bdec:	d031      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800bdee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bdf2:	d828      	bhi.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800bdf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdf8:	d01a      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800bdfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bdfe:	d822      	bhi.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800be00:	2b00      	cmp	r3, #0
 800be02:	d003      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800be04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be08:	d007      	beq.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800be0a:	e01c      	b.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be0c:	4b4b      	ldr	r3, [pc, #300]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be10:	4a4a      	ldr	r2, [pc, #296]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be18:	e01c      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be1e:	3308      	adds	r3, #8
 800be20:	2100      	movs	r1, #0
 800be22:	4618      	mov	r0, r3
 800be24:	f001 fa6e 	bl	800d304 <RCCEx_PLL2_Config>
 800be28:	4603      	mov	r3, r0
 800be2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be2e:	e011      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be34:	3328      	adds	r3, #40	@ 0x28
 800be36:	2100      	movs	r1, #0
 800be38:	4618      	mov	r0, r3
 800be3a:	f001 fb15 	bl	800d468 <RCCEx_PLL3_Config>
 800be3e:	4603      	mov	r3, r0
 800be40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800be44:	e006      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800be4c:	e002      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800be4e:	bf00      	nop
 800be50:	e000      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800be52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d10a      	bne.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800be5c:	4b37      	ldr	r3, [pc, #220]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be60:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800be64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be6a:	4a34      	ldr	r2, [pc, #208]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800be6c:	430b      	orrs	r3, r1
 800be6e:	6513      	str	r3, [r2, #80]	@ 0x50
 800be70:	e003      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800be76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800be7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800be86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800be8a:	2300      	movs	r3, #0
 800be8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800be90:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800be94:	460b      	mov	r3, r1
 800be96:	4313      	orrs	r3, r2
 800be98:	d056      	beq.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800be9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800be9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bea4:	d033      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800bea6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800beaa:	d82c      	bhi.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800beac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800beb0:	d02f      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800beb2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800beb6:	d826      	bhi.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800beb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bebc:	d02b      	beq.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800bebe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bec2:	d820      	bhi.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bec4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bec8:	d012      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800beca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bece:	d81a      	bhi.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d022      	beq.n	800bf1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bed8:	d115      	bne.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800beda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bede:	3308      	adds	r3, #8
 800bee0:	2101      	movs	r1, #1
 800bee2:	4618      	mov	r0, r3
 800bee4:	f001 fa0e 	bl	800d304 <RCCEx_PLL2_Config>
 800bee8:	4603      	mov	r3, r0
 800beea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800beee:	e015      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bef4:	3328      	adds	r3, #40	@ 0x28
 800bef6:	2101      	movs	r1, #1
 800bef8:	4618      	mov	r0, r3
 800befa:	f001 fab5 	bl	800d468 <RCCEx_PLL3_Config>
 800befe:	4603      	mov	r3, r0
 800bf00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bf04:	e00a      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bf0c:	e006      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf0e:	bf00      	nop
 800bf10:	e004      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf12:	bf00      	nop
 800bf14:	e002      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf16:	bf00      	nop
 800bf18:	e000      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800bf1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10d      	bne.n	800bf40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bf24:	4b05      	ldr	r3, [pc, #20]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bf2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf32:	4a02      	ldr	r2, [pc, #8]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800bf34:	430b      	orrs	r3, r1
 800bf36:	6513      	str	r3, [r2, #80]	@ 0x50
 800bf38:	e006      	b.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bf3a:	bf00      	nop
 800bf3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bf44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bf48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bf54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bf5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bf62:	460b      	mov	r3, r1
 800bf64:	4313      	orrs	r3, r2
 800bf66:	d055      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bf68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bf6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bf70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf74:	d033      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800bf76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf7a:	d82c      	bhi.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bf7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf80:	d02f      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800bf82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf86:	d826      	bhi.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bf88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf8c:	d02b      	beq.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800bf8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf92:	d820      	bhi.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bf94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf98:	d012      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800bf9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf9e:	d81a      	bhi.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d022      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x676>
 800bfa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfa8:	d115      	bne.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfae:	3308      	adds	r3, #8
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f001 f9a6 	bl	800d304 <RCCEx_PLL2_Config>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bfbe:	e015      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bfc4:	3328      	adds	r3, #40	@ 0x28
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f001 fa4d 	bl	800d468 <RCCEx_PLL3_Config>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bfd4:	e00a      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800bfdc:	e006      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bfde:	bf00      	nop
 800bfe0:	e004      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bfe2:	bf00      	nop
 800bfe4:	e002      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bfe6:	bf00      	nop
 800bfe8:	e000      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800bfea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10b      	bne.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bff4:	4ba3      	ldr	r3, [pc, #652]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bff8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c000:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c004:	4a9f      	ldr	r2, [pc, #636]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c006:	430b      	orrs	r3, r1
 800c008:	6593      	str	r3, [r2, #88]	@ 0x58
 800c00a:	e003      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c00c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c020:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c024:	2300      	movs	r3, #0
 800c026:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c02a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c02e:	460b      	mov	r3, r1
 800c030:	4313      	orrs	r3, r2
 800c032:	d037      	beq.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c03a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c03e:	d00e      	beq.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800c040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c044:	d816      	bhi.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800c046:	2b00      	cmp	r3, #0
 800c048:	d018      	beq.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800c04a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c04e:	d111      	bne.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c050:	4b8c      	ldr	r3, [pc, #560]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c054:	4a8b      	ldr	r2, [pc, #556]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c05a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c05c:	e00f      	b.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c062:	3308      	adds	r3, #8
 800c064:	2101      	movs	r1, #1
 800c066:	4618      	mov	r0, r3
 800c068:	f001 f94c 	bl	800d304 <RCCEx_PLL2_Config>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c072:	e004      	b.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c07a:	e000      	b.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800c07c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c07e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10a      	bne.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c086:	4b7f      	ldr	r3, [pc, #508]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c088:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c08a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c094:	4a7b      	ldr	r2, [pc, #492]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c096:	430b      	orrs	r3, r1
 800c098:	6513      	str	r3, [r2, #80]	@ 0x50
 800c09a:	e003      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c09c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c0a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c0b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	d039      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d81c      	bhi.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800c0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800c0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d4:	0800c111 	.word	0x0800c111
 800c0d8:	0800c0e5 	.word	0x0800c0e5
 800c0dc:	0800c0f3 	.word	0x0800c0f3
 800c0e0:	0800c111 	.word	0x0800c111
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e4:	4b67      	ldr	r3, [pc, #412]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e8:	4a66      	ldr	r2, [pc, #408]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c0ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c0ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c0f0:	e00f      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	2102      	movs	r1, #2
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f001 f902 	bl	800d304 <RCCEx_PLL2_Config>
 800c100:	4603      	mov	r3, r0
 800c102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c106:	e004      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c10e:	e000      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800c110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c11a:	4b5a      	ldr	r3, [pc, #360]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c11c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c11e:	f023 0103 	bic.w	r1, r3, #3
 800c122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c128:	4a56      	ldr	r2, [pc, #344]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c12a:	430b      	orrs	r3, r1
 800c12c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c12e:	e003      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c144:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c148:	2300      	movs	r3, #0
 800c14a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c14e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c152:	460b      	mov	r3, r1
 800c154:	4313      	orrs	r3, r2
 800c156:	f000 809f 	beq.w	800c298 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c15a:	4b4b      	ldr	r3, [pc, #300]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a4a      	ldr	r2, [pc, #296]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c164:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c166:	f7fa f821 	bl	80061ac <HAL_GetTick>
 800c16a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c16e:	e00b      	b.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c170:	f7fa f81c 	bl	80061ac <HAL_GetTick>
 800c174:	4602      	mov	r2, r0
 800c176:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	2b64      	cmp	r3, #100	@ 0x64
 800c17e:	d903      	bls.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800c180:	2303      	movs	r3, #3
 800c182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c186:	e005      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c188:	4b3f      	ldr	r3, [pc, #252]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c190:	2b00      	cmp	r3, #0
 800c192:	d0ed      	beq.n	800c170 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800c194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d179      	bne.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c19c:	4b39      	ldr	r3, [pc, #228]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c19e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c1a8:	4053      	eors	r3, r2
 800c1aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d015      	beq.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c1b2:	4b34      	ldr	r3, [pc, #208]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c1be:	4b31      	ldr	r3, [pc, #196]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1c2:	4a30      	ldr	r2, [pc, #192]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c1ca:	4b2e      	ldr	r3, [pc, #184]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ce:	4a2d      	ldr	r2, [pc, #180]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c1d6:	4a2b      	ldr	r2, [pc, #172]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c1d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c1dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c1e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c1e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1ea:	d118      	bne.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1ec:	f7f9 ffde 	bl	80061ac <HAL_GetTick>
 800c1f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1f4:	e00d      	b.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1f6:	f7f9 ffd9 	bl	80061ac <HAL_GetTick>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c200:	1ad2      	subs	r2, r2, r3
 800c202:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c206:	429a      	cmp	r2, r3
 800c208:	d903      	bls.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800c210:	e005      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c212:	4b1c      	ldr	r3, [pc, #112]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c216:	f003 0302 	and.w	r3, r3, #2
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d0eb      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800c21e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c222:	2b00      	cmp	r3, #0
 800c224:	d129      	bne.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c22a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c22e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c236:	d10e      	bne.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800c238:	4b12      	ldr	r3, [pc, #72]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c244:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c248:	091a      	lsrs	r2, r3, #4
 800c24a:	4b10      	ldr	r3, [pc, #64]	@ (800c28c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800c24c:	4013      	ands	r3, r2
 800c24e:	4a0d      	ldr	r2, [pc, #52]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c250:	430b      	orrs	r3, r1
 800c252:	6113      	str	r3, [r2, #16]
 800c254:	e005      	b.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800c256:	4b0b      	ldr	r3, [pc, #44]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	4a0a      	ldr	r2, [pc, #40]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c25c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c260:	6113      	str	r3, [r2, #16]
 800c262:	4b08      	ldr	r3, [pc, #32]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c264:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c26a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c26e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c272:	4a04      	ldr	r2, [pc, #16]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800c274:	430b      	orrs	r3, r1
 800c276:	6713      	str	r3, [r2, #112]	@ 0x70
 800c278:	e00e      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c27a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c27e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800c282:	e009      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800c284:	58024400 	.word	0x58024400
 800c288:	58024800 	.word	0x58024800
 800c28c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	f002 0301 	and.w	r3, r2, #1
 800c2a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	f000 8089 	beq.w	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c2c0:	2b28      	cmp	r3, #40	@ 0x28
 800c2c2:	d86b      	bhi.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800c2c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ca:	bf00      	nop
 800c2cc:	0800c3a5 	.word	0x0800c3a5
 800c2d0:	0800c39d 	.word	0x0800c39d
 800c2d4:	0800c39d 	.word	0x0800c39d
 800c2d8:	0800c39d 	.word	0x0800c39d
 800c2dc:	0800c39d 	.word	0x0800c39d
 800c2e0:	0800c39d 	.word	0x0800c39d
 800c2e4:	0800c39d 	.word	0x0800c39d
 800c2e8:	0800c39d 	.word	0x0800c39d
 800c2ec:	0800c371 	.word	0x0800c371
 800c2f0:	0800c39d 	.word	0x0800c39d
 800c2f4:	0800c39d 	.word	0x0800c39d
 800c2f8:	0800c39d 	.word	0x0800c39d
 800c2fc:	0800c39d 	.word	0x0800c39d
 800c300:	0800c39d 	.word	0x0800c39d
 800c304:	0800c39d 	.word	0x0800c39d
 800c308:	0800c39d 	.word	0x0800c39d
 800c30c:	0800c387 	.word	0x0800c387
 800c310:	0800c39d 	.word	0x0800c39d
 800c314:	0800c39d 	.word	0x0800c39d
 800c318:	0800c39d 	.word	0x0800c39d
 800c31c:	0800c39d 	.word	0x0800c39d
 800c320:	0800c39d 	.word	0x0800c39d
 800c324:	0800c39d 	.word	0x0800c39d
 800c328:	0800c39d 	.word	0x0800c39d
 800c32c:	0800c3a5 	.word	0x0800c3a5
 800c330:	0800c39d 	.word	0x0800c39d
 800c334:	0800c39d 	.word	0x0800c39d
 800c338:	0800c39d 	.word	0x0800c39d
 800c33c:	0800c39d 	.word	0x0800c39d
 800c340:	0800c39d 	.word	0x0800c39d
 800c344:	0800c39d 	.word	0x0800c39d
 800c348:	0800c39d 	.word	0x0800c39d
 800c34c:	0800c3a5 	.word	0x0800c3a5
 800c350:	0800c39d 	.word	0x0800c39d
 800c354:	0800c39d 	.word	0x0800c39d
 800c358:	0800c39d 	.word	0x0800c39d
 800c35c:	0800c39d 	.word	0x0800c39d
 800c360:	0800c39d 	.word	0x0800c39d
 800c364:	0800c39d 	.word	0x0800c39d
 800c368:	0800c39d 	.word	0x0800c39d
 800c36c:	0800c3a5 	.word	0x0800c3a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c374:	3308      	adds	r3, #8
 800c376:	2101      	movs	r1, #1
 800c378:	4618      	mov	r0, r3
 800c37a:	f000 ffc3 	bl	800d304 <RCCEx_PLL2_Config>
 800c37e:	4603      	mov	r3, r0
 800c380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c384:	e00f      	b.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c38a:	3328      	adds	r3, #40	@ 0x28
 800c38c:	2101      	movs	r1, #1
 800c38e:	4618      	mov	r0, r3
 800c390:	f001 f86a 	bl	800d468 <RCCEx_PLL3_Config>
 800c394:	4603      	mov	r3, r0
 800c396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c39a:	e004      	b.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c3a2:	e000      	b.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800c3a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10a      	bne.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c3ae:	4bbf      	ldr	r3, [pc, #764]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3bc:	4abb      	ldr	r2, [pc, #748]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c3be:	430b      	orrs	r3, r1
 800c3c0:	6553      	str	r3, [r2, #84]	@ 0x54
 800c3c2:	e003      	b.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c3c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c3cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d4:	f002 0302 	and.w	r3, r2, #2
 800c3d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c3e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	d041      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c3f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3f2:	2b05      	cmp	r3, #5
 800c3f4:	d824      	bhi.n	800c440 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800c3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800c3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fc:	0800c449 	.word	0x0800c449
 800c400:	0800c415 	.word	0x0800c415
 800c404:	0800c42b 	.word	0x0800c42b
 800c408:	0800c449 	.word	0x0800c449
 800c40c:	0800c449 	.word	0x0800c449
 800c410:	0800c449 	.word	0x0800c449
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c418:	3308      	adds	r3, #8
 800c41a:	2101      	movs	r1, #1
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 ff71 	bl	800d304 <RCCEx_PLL2_Config>
 800c422:	4603      	mov	r3, r0
 800c424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c428:	e00f      	b.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c42e:	3328      	adds	r3, #40	@ 0x28
 800c430:	2101      	movs	r1, #1
 800c432:	4618      	mov	r0, r3
 800c434:	f001 f818 	bl	800d468 <RCCEx_PLL3_Config>
 800c438:	4603      	mov	r3, r0
 800c43a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c43e:	e004      	b.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c446:	e000      	b.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800c448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c44a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10a      	bne.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c452:	4b96      	ldr	r3, [pc, #600]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c456:	f023 0107 	bic.w	r1, r3, #7
 800c45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c45e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c460:	4a92      	ldr	r2, [pc, #584]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c462:	430b      	orrs	r3, r1
 800c464:	6553      	str	r3, [r2, #84]	@ 0x54
 800c466:	e003      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c46c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c478:	f002 0304 	and.w	r3, r2, #4
 800c47c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c480:	2300      	movs	r3, #0
 800c482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c486:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c48a:	460b      	mov	r3, r1
 800c48c:	4313      	orrs	r3, r2
 800c48e:	d044      	beq.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c498:	2b05      	cmp	r3, #5
 800c49a:	d825      	bhi.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800c49c:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800c49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a2:	bf00      	nop
 800c4a4:	0800c4f1 	.word	0x0800c4f1
 800c4a8:	0800c4bd 	.word	0x0800c4bd
 800c4ac:	0800c4d3 	.word	0x0800c4d3
 800c4b0:	0800c4f1 	.word	0x0800c4f1
 800c4b4:	0800c4f1 	.word	0x0800c4f1
 800c4b8:	0800c4f1 	.word	0x0800c4f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4c0:	3308      	adds	r3, #8
 800c4c2:	2101      	movs	r1, #1
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f000 ff1d 	bl	800d304 <RCCEx_PLL2_Config>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c4d0:	e00f      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c4d6:	3328      	adds	r3, #40	@ 0x28
 800c4d8:	2101      	movs	r1, #1
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 ffc4 	bl	800d468 <RCCEx_PLL3_Config>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c4e6:	e004      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c4ee:	e000      	b.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800c4f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10b      	bne.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c4fa:	4b6c      	ldr	r3, [pc, #432]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c4fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4fe:	f023 0107 	bic.w	r1, r3, #7
 800c502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c50a:	4a68      	ldr	r2, [pc, #416]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c50c:	430b      	orrs	r3, r1
 800c50e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c510:	e003      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	f002 0320 	and.w	r3, r2, #32
 800c526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c52a:	2300      	movs	r3, #0
 800c52c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c534:	460b      	mov	r3, r1
 800c536:	4313      	orrs	r3, r2
 800c538:	d055      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c542:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c546:	d033      	beq.n	800c5b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800c548:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c54c:	d82c      	bhi.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c54e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c552:	d02f      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800c554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c558:	d826      	bhi.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c55a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c55e:	d02b      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800c560:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c564:	d820      	bhi.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c56a:	d012      	beq.n	800c592 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800c56c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c570:	d81a      	bhi.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800c572:	2b00      	cmp	r3, #0
 800c574:	d022      	beq.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800c576:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c57a:	d115      	bne.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c580:	3308      	adds	r3, #8
 800c582:	2100      	movs	r1, #0
 800c584:	4618      	mov	r0, r3
 800c586:	f000 febd 	bl	800d304 <RCCEx_PLL2_Config>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c590:	e015      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c596:	3328      	adds	r3, #40	@ 0x28
 800c598:	2102      	movs	r1, #2
 800c59a:	4618      	mov	r0, r3
 800c59c:	f000 ff64 	bl	800d468 <RCCEx_PLL3_Config>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c5a6:	e00a      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c5ae:	e006      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5b0:	bf00      	nop
 800c5b2:	e004      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5b4:	bf00      	nop
 800c5b6:	e002      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5b8:	bf00      	nop
 800c5ba:	e000      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c5bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10b      	bne.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c5c6:	4b39      	ldr	r3, [pc, #228]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d6:	4a35      	ldr	r2, [pc, #212]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c5d8:	430b      	orrs	r3, r1
 800c5da:	6553      	str	r3, [r2, #84]	@ 0x54
 800c5dc:	e003      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c5e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c5f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c5fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c600:	460b      	mov	r3, r1
 800c602:	4313      	orrs	r3, r2
 800c604:	d058      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c60a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c60e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c612:	d033      	beq.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c614:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c618:	d82c      	bhi.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c61a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c61e:	d02f      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c624:	d826      	bhi.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c626:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c62a:	d02b      	beq.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c62c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c630:	d820      	bhi.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c632:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c636:	d012      	beq.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c63c:	d81a      	bhi.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d022      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c646:	d115      	bne.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c64c:	3308      	adds	r3, #8
 800c64e:	2100      	movs	r1, #0
 800c650:	4618      	mov	r0, r3
 800c652:	f000 fe57 	bl	800d304 <RCCEx_PLL2_Config>
 800c656:	4603      	mov	r3, r0
 800c658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c65c:	e015      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c65e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c662:	3328      	adds	r3, #40	@ 0x28
 800c664:	2102      	movs	r1, #2
 800c666:	4618      	mov	r0, r3
 800c668:	f000 fefe 	bl	800d468 <RCCEx_PLL3_Config>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c672:	e00a      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c67a:	e006      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c67c:	bf00      	nop
 800c67e:	e004      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c680:	bf00      	nop
 800c682:	e002      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c684:	bf00      	nop
 800c686:	e000      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c68a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d10e      	bne.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c692:	4b06      	ldr	r3, [pc, #24]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c696:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c69a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c69e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c6a2:	4a02      	ldr	r2, [pc, #8]	@ (800c6ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c6a8:	e006      	b.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c6aa:	bf00      	nop
 800c6ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c6b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c6c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	d055      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c6dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c6e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c6e4:	d033      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c6e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c6ea:	d82c      	bhi.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c6ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6f0:	d02f      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c6f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c6f6:	d826      	bhi.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c6f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c6fc:	d02b      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c6fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c702:	d820      	bhi.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c704:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c708:	d012      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c70a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c70e:	d81a      	bhi.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c710:	2b00      	cmp	r3, #0
 800c712:	d022      	beq.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c718:	d115      	bne.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c71e:	3308      	adds	r3, #8
 800c720:	2100      	movs	r1, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f000 fdee 	bl	800d304 <RCCEx_PLL2_Config>
 800c728:	4603      	mov	r3, r0
 800c72a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c72e:	e015      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c734:	3328      	adds	r3, #40	@ 0x28
 800c736:	2102      	movs	r1, #2
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 fe95 	bl	800d468 <RCCEx_PLL3_Config>
 800c73e:	4603      	mov	r3, r0
 800c740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c744:	e00a      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c74c:	e006      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c74e:	bf00      	nop
 800c750:	e004      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c752:	bf00      	nop
 800c754:	e002      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c756:	bf00      	nop
 800c758:	e000      	b.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c75a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c75c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10b      	bne.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c764:	4ba1      	ldr	r3, [pc, #644]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c768:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c774:	4a9d      	ldr	r2, [pc, #628]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c776:	430b      	orrs	r3, r1
 800c778:	6593      	str	r3, [r2, #88]	@ 0x58
 800c77a:	e003      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c77c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	f002 0308 	and.w	r3, r2, #8
 800c790:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c794:	2300      	movs	r3, #0
 800c796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c79a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c79e:	460b      	mov	r3, r1
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	d01e      	beq.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c7b0:	d10c      	bne.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7b6:	3328      	adds	r3, #40	@ 0x28
 800c7b8:	2102      	movs	r1, #2
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 fe54 	bl	800d468 <RCCEx_PLL3_Config>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c7cc:	4b87      	ldr	r3, [pc, #540]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c7ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7dc:	4a83      	ldr	r2, [pc, #524]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c7de:	430b      	orrs	r3, r1
 800c7e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ea:	f002 0310 	and.w	r3, r2, #16
 800c7ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c7f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	4313      	orrs	r3, r2
 800c800:	d01e      	beq.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c80a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c80e:	d10c      	bne.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c814:	3328      	adds	r3, #40	@ 0x28
 800c816:	2102      	movs	r1, #2
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 fe25 	bl	800d468 <RCCEx_PLL3_Config>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c82a:	4b70      	ldr	r3, [pc, #448]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c82c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c82e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c836:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c83a:	4a6c      	ldr	r2, [pc, #432]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c83c:	430b      	orrs	r3, r1
 800c83e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c84c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c850:	2300      	movs	r3, #0
 800c852:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c856:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c85a:	460b      	mov	r3, r1
 800c85c:	4313      	orrs	r3, r2
 800c85e:	d03e      	beq.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c864:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c86c:	d022      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c86e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c872:	d81b      	bhi.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c87c:	d00b      	beq.n	800c896 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c87e:	e015      	b.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c884:	3308      	adds	r3, #8
 800c886:	2100      	movs	r1, #0
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 fd3b 	bl	800d304 <RCCEx_PLL2_Config>
 800c88e:	4603      	mov	r3, r0
 800c890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c894:	e00f      	b.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c89a:	3328      	adds	r3, #40	@ 0x28
 800c89c:	2102      	movs	r1, #2
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 fde2 	bl	800d468 <RCCEx_PLL3_Config>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c8aa:	e004      	b.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c8b2:	e000      	b.n	800c8b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c8b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10b      	bne.n	800c8d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c8be:	4b4b      	ldr	r3, [pc, #300]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c8c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c8ce:	4a47      	ldr	r2, [pc, #284]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c8d0:	430b      	orrs	r3, r1
 800c8d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8d4:	e003      	b.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c8da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c8ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c8f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	d03b      	beq.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c8fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c902:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c906:	d01f      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c908:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c90c:	d818      	bhi.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c90e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c912:	d003      	beq.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c914:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c918:	d007      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c91a:	e011      	b.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c91c:	4b33      	ldr	r3, [pc, #204]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c920:	4a32      	ldr	r2, [pc, #200]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c928:	e00f      	b.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c92e:	3328      	adds	r3, #40	@ 0x28
 800c930:	2101      	movs	r1, #1
 800c932:	4618      	mov	r0, r3
 800c934:	f000 fd98 	bl	800d468 <RCCEx_PLL3_Config>
 800c938:	4603      	mov	r3, r0
 800c93a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c93e:	e004      	b.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c946:	e000      	b.n	800c94a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c94a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10b      	bne.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c952:	4b26      	ldr	r3, [pc, #152]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c956:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c95e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c962:	4a22      	ldr	r2, [pc, #136]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c964:	430b      	orrs	r3, r1
 800c966:	6553      	str	r3, [r2, #84]	@ 0x54
 800c968:	e003      	b.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c96a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c96e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c97e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c980:	2300      	movs	r3, #0
 800c982:	677b      	str	r3, [r7, #116]	@ 0x74
 800c984:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c988:	460b      	mov	r3, r1
 800c98a:	4313      	orrs	r3, r2
 800c98c:	d034      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c994:	2b00      	cmp	r3, #0
 800c996:	d003      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c99c:	d007      	beq.n	800c9ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c99e:	e011      	b.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9a0:	4b12      	ldr	r3, [pc, #72]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a4:	4a11      	ldr	r2, [pc, #68]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c9ac:	e00e      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	2102      	movs	r1, #2
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 fca4 	bl	800d304 <RCCEx_PLL2_Config>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c9c2:	e003      	b.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800c9ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10d      	bne.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c9d4:	4b05      	ldr	r3, [pc, #20]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9e2:	4a02      	ldr	r2, [pc, #8]	@ (800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c9e4:	430b      	orrs	r3, r1
 800c9e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c9e8:	e006      	b.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c9ea:	bf00      	nop
 800c9ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800c9f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ca04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca06:	2300      	movs	r3, #0
 800ca08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4313      	orrs	r3, r2
 800ca12:	d00c      	beq.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ca14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca18:	3328      	adds	r3, #40	@ 0x28
 800ca1a:	2102      	movs	r1, #2
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 fd23 	bl	800d468 <RCCEx_PLL3_Config>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ca2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ca3a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ca44:	460b      	mov	r3, r1
 800ca46:	4313      	orrs	r3, r2
 800ca48:	d038      	beq.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ca4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ca4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca56:	d018      	beq.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ca58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca5c:	d811      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ca5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca62:	d014      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ca64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca68:	d80b      	bhi.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d011      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ca6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca72:	d106      	bne.n	800ca82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca74:	4bc3      	ldr	r3, [pc, #780]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ca76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca78:	4ac2      	ldr	r2, [pc, #776]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ca7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ca80:	e008      	b.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ca88:	e004      	b.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ca8a:	bf00      	nop
 800ca8c:	e002      	b.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ca8e:	bf00      	nop
 800ca90:	e000      	b.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ca92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10b      	bne.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ca9c:	4bb9      	ldr	r3, [pc, #740]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ca9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caa0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800caa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800caac:	4ab5      	ldr	r2, [pc, #724]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800caae:	430b      	orrs	r3, r1
 800cab0:	6553      	str	r3, [r2, #84]	@ 0x54
 800cab2:	e003      	b.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800cac8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caca:	2300      	movs	r3, #0
 800cacc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cace:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800cad2:	460b      	mov	r3, r1
 800cad4:	4313      	orrs	r3, r2
 800cad6:	d009      	beq.n	800caec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cad8:	4baa      	ldr	r3, [pc, #680]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cadc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cae6:	4aa7      	ldr	r2, [pc, #668]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cae8:	430b      	orrs	r3, r1
 800caea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800caec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800caf8:	653b      	str	r3, [r7, #80]	@ 0x50
 800cafa:	2300      	movs	r3, #0
 800cafc:	657b      	str	r3, [r7, #84]	@ 0x54
 800cafe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800cb02:	460b      	mov	r3, r1
 800cb04:	4313      	orrs	r3, r2
 800cb06:	d00a      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cb08:	4b9e      	ldr	r3, [pc, #632]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800cb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cb18:	4a9a      	ldr	r2, [pc, #616]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb1a:	430b      	orrs	r3, r1
 800cb1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cb2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cb34:	460b      	mov	r3, r1
 800cb36:	4313      	orrs	r3, r2
 800cb38:	d009      	beq.n	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cb3a:	4b92      	ldr	r3, [pc, #584]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb48:	4a8e      	ldr	r2, [pc, #568]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb4a:	430b      	orrs	r3, r1
 800cb4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cb5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cb64:	460b      	mov	r3, r1
 800cb66:	4313      	orrs	r3, r2
 800cb68:	d00e      	beq.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb6a:	4b86      	ldr	r3, [pc, #536]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	4a85      	ldr	r2, [pc, #532]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cb74:	6113      	str	r3, [r2, #16]
 800cb76:	4b83      	ldr	r3, [pc, #524]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb78:	6919      	ldr	r1, [r3, #16]
 800cb7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cb82:	4a80      	ldr	r2, [pc, #512]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cb84:	430b      	orrs	r3, r1
 800cb86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cb88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cb94:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb96:	2300      	movs	r3, #0
 800cb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4313      	orrs	r3, r2
 800cba2:	d009      	beq.n	800cbb8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cba4:	4b77      	ldr	r3, [pc, #476]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cba8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cbac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbb2:	4a74      	ldr	r2, [pc, #464]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbb4:	430b      	orrs	r3, r1
 800cbb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cbc4:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	d00a      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cbd4:	4b6b      	ldr	r3, [pc, #428]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbe4:	4a67      	ldr	r2, [pc, #412]	@ (800cd84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800cbe6:	430b      	orrs	r3, r1
 800cbe8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cbf6:	f003 0301 	and.w	r3, r3, #1
 800cbfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cbfc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cc00:	460b      	mov	r3, r1
 800cc02:	4313      	orrs	r3, r2
 800cc04:	d011      	beq.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f000 fb78 	bl	800d304 <RCCEx_PLL2_Config>
 800cc14:	4603      	mov	r3, r0
 800cc16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cc1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d003      	beq.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	2100      	movs	r1, #0
 800cc34:	6239      	str	r1, [r7, #32]
 800cc36:	f003 0302 	and.w	r3, r3, #2
 800cc3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cc40:	460b      	mov	r3, r1
 800cc42:	4313      	orrs	r3, r2
 800cc44:	d011      	beq.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc4a:	3308      	adds	r3, #8
 800cc4c:	2101      	movs	r1, #1
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 fb58 	bl	800d304 <RCCEx_PLL2_Config>
 800cc54:	4603      	mov	r3, r0
 800cc56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cc5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc72:	2100      	movs	r1, #0
 800cc74:	61b9      	str	r1, [r7, #24]
 800cc76:	f003 0304 	and.w	r3, r3, #4
 800cc7a:	61fb      	str	r3, [r7, #28]
 800cc7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cc80:	460b      	mov	r3, r1
 800cc82:	4313      	orrs	r3, r2
 800cc84:	d011      	beq.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cc8a:	3308      	adds	r3, #8
 800cc8c:	2102      	movs	r1, #2
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 fb38 	bl	800d304 <RCCEx_PLL2_Config>
 800cc94:	4603      	mov	r3, r0
 800cc96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cc9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d003      	beq.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ccaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	6139      	str	r1, [r7, #16]
 800ccb6:	f003 0308 	and.w	r3, r3, #8
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	d011      	beq.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccca:	3328      	adds	r3, #40	@ 0x28
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 fbca 	bl	800d468 <RCCEx_PLL3_Config>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800ccda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d003      	beq.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ccea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ccee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	f003 0310 	and.w	r3, r3, #16
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cd00:	460b      	mov	r3, r1
 800cd02:	4313      	orrs	r3, r2
 800cd04:	d011      	beq.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd0a:	3328      	adds	r3, #40	@ 0x28
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f000 fbaa 	bl	800d468 <RCCEx_PLL3_Config>
 800cd14:	4603      	mov	r3, r0
 800cd16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cd1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d003      	beq.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	2100      	movs	r1, #0
 800cd34:	6039      	str	r1, [r7, #0]
 800cd36:	f003 0320 	and.w	r3, r3, #32
 800cd3a:	607b      	str	r3, [r7, #4]
 800cd3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cd40:	460b      	mov	r3, r1
 800cd42:	4313      	orrs	r3, r2
 800cd44:	d011      	beq.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cd46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800cd4a:	3328      	adds	r3, #40	@ 0x28
 800cd4c:	2102      	movs	r1, #2
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 fb8a 	bl	800d468 <RCCEx_PLL3_Config>
 800cd54:	4603      	mov	r3, r0
 800cd56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800cd5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800cd66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800cd6a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d101      	bne.n	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	e000      	b.n	800cd78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd84:	58024400 	.word	0x58024400

0800cd88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cd8c:	f7fe fd54 	bl	800b838 <HAL_RCC_GetHCLKFreq>
 800cd90:	4602      	mov	r2, r0
 800cd92:	4b06      	ldr	r3, [pc, #24]	@ (800cdac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cd94:	6a1b      	ldr	r3, [r3, #32]
 800cd96:	091b      	lsrs	r3, r3, #4
 800cd98:	f003 0307 	and.w	r3, r3, #7
 800cd9c:	4904      	ldr	r1, [pc, #16]	@ (800cdb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cd9e:	5ccb      	ldrb	r3, [r1, r3]
 800cda0:	f003 031f 	and.w	r3, r3, #31
 800cda4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	58024400 	.word	0x58024400
 800cdb0:	08017218 	.word	0x08017218

0800cdb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b089      	sub	sp, #36	@ 0x24
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cdbc:	4ba1      	ldr	r3, [pc, #644]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc0:	f003 0303 	and.w	r3, r3, #3
 800cdc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cdc6:	4b9f      	ldr	r3, [pc, #636]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdca:	0b1b      	lsrs	r3, r3, #12
 800cdcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cdd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cdd2:	4b9c      	ldr	r3, [pc, #624]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd6:	091b      	lsrs	r3, r3, #4
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cdde:	4b99      	ldr	r3, [pc, #612]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cde0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cde2:	08db      	lsrs	r3, r3, #3
 800cde4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cde8:	693a      	ldr	r2, [r7, #16]
 800cdea:	fb02 f303 	mul.w	r3, r2, r3
 800cdee:	ee07 3a90 	vmov	s15, r3
 800cdf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f000 8111 	beq.w	800d024 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	f000 8083 	beq.w	800cf10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	f200 80a1 	bhi.w	800cf54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d003      	beq.n	800ce20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d056      	beq.n	800cecc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ce1e:	e099      	b.n	800cf54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce20:	4b88      	ldr	r3, [pc, #544]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 0320 	and.w	r3, r3, #32
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d02d      	beq.n	800ce88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce2c:	4b85      	ldr	r3, [pc, #532]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	08db      	lsrs	r3, r3, #3
 800ce32:	f003 0303 	and.w	r3, r3, #3
 800ce36:	4a84      	ldr	r2, [pc, #528]	@ (800d048 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ce38:	fa22 f303 	lsr.w	r3, r2, r3
 800ce3c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	ee07 3a90 	vmov	s15, r3
 800ce44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	ee07 3a90 	vmov	s15, r3
 800ce4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce56:	4b7b      	ldr	r3, [pc, #492]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce5e:	ee07 3a90 	vmov	s15, r3
 800ce62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce86:	e087      	b.n	800cf98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	ee07 3a90 	vmov	s15, r3
 800ce8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d050 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ce96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce9a:	4b6a      	ldr	r3, [pc, #424]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ceae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ceb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ceb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ceba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceca:	e065      	b.n	800cf98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	ee07 3a90 	vmov	s15, r3
 800ced2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ceda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cede:	4b59      	ldr	r3, [pc, #356]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cee6:	ee07 3a90 	vmov	s15, r3
 800ceea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceee:	ed97 6a03 	vldr	s12, [r7, #12]
 800cef2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cefa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cefe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf0e:	e043      	b.n	800cf98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	ee07 3a90 	vmov	s15, r3
 800cf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf22:	4b48      	ldr	r3, [pc, #288]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf2a:	ee07 3a90 	vmov	s15, r3
 800cf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf52:	e021      	b.n	800cf98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	ee07 3a90 	vmov	s15, r3
 800cf5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d054 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cf62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf66:	4b37      	ldr	r3, [pc, #220]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf6e:	ee07 3a90 	vmov	s15, r3
 800cf72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf76:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d04c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cf8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cf98:	4b2a      	ldr	r3, [pc, #168]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf9c:	0a5b      	lsrs	r3, r3, #9
 800cf9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfa2:	ee07 3a90 	vmov	s15, r3
 800cfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cfae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfbe:	ee17 2a90 	vmov	r2, s15
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cfc6:	4b1f      	ldr	r3, [pc, #124]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfca:	0c1b      	lsrs	r3, r3, #16
 800cfcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfd0:	ee07 3a90 	vmov	s15, r3
 800cfd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cfdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfec:	ee17 2a90 	vmov	r2, s15
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cff4:	4b13      	ldr	r3, [pc, #76]	@ (800d044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cff8:	0e1b      	lsrs	r3, r3, #24
 800cffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cffe:	ee07 3a90 	vmov	s15, r3
 800d002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d00a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d00e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d01a:	ee17 2a90 	vmov	r2, s15
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d022:	e008      	b.n	800d036 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2200      	movs	r2, #0
 800d02e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	609a      	str	r2, [r3, #8]
}
 800d036:	bf00      	nop
 800d038:	3724      	adds	r7, #36	@ 0x24
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	58024400 	.word	0x58024400
 800d048:	03d09000 	.word	0x03d09000
 800d04c:	46000000 	.word	0x46000000
 800d050:	4c742400 	.word	0x4c742400
 800d054:	4a742400 	.word	0x4a742400
 800d058:	4af42400 	.word	0x4af42400

0800d05c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b089      	sub	sp, #36	@ 0x24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d064:	4ba1      	ldr	r3, [pc, #644]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d068:	f003 0303 	and.w	r3, r3, #3
 800d06c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d06e:	4b9f      	ldr	r3, [pc, #636]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d072:	0d1b      	lsrs	r3, r3, #20
 800d074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d078:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d07a:	4b9c      	ldr	r3, [pc, #624]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d07e:	0a1b      	lsrs	r3, r3, #8
 800d080:	f003 0301 	and.w	r3, r3, #1
 800d084:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d086:	4b99      	ldr	r3, [pc, #612]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d08a:	08db      	lsrs	r3, r3, #3
 800d08c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d090:	693a      	ldr	r2, [r7, #16]
 800d092:	fb02 f303 	mul.w	r3, r2, r3
 800d096:	ee07 3a90 	vmov	s15, r3
 800d09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 8111 	beq.w	800d2cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	f000 8083 	beq.w	800d1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	f200 80a1 	bhi.w	800d1fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d0ba:	69bb      	ldr	r3, [r7, #24]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d056      	beq.n	800d174 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d0c6:	e099      	b.n	800d1fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0c8:	4b88      	ldr	r3, [pc, #544]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d02d      	beq.n	800d130 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0d4:	4b85      	ldr	r3, [pc, #532]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	08db      	lsrs	r3, r3, #3
 800d0da:	f003 0303 	and.w	r3, r3, #3
 800d0de:	4a84      	ldr	r2, [pc, #528]	@ (800d2f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	ee07 3a90 	vmov	s15, r3
 800d0ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	ee07 3a90 	vmov	s15, r3
 800d0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0fe:	4b7b      	ldr	r3, [pc, #492]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d112:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d11e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d12a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d12e:	e087      	b.n	800d240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d130:	697b      	ldr	r3, [r7, #20]
 800d132:	ee07 3a90 	vmov	s15, r3
 800d136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d13a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d142:	4b6a      	ldr	r3, [pc, #424]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d14a:	ee07 3a90 	vmov	s15, r3
 800d14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d152:	ed97 6a03 	vldr	s12, [r7, #12]
 800d156:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d16e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d172:	e065      	b.n	800d240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	ee07 3a90 	vmov	s15, r3
 800d17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d17e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d2fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d186:	4b59      	ldr	r3, [pc, #356]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d196:	ed97 6a03 	vldr	s12, [r7, #12]
 800d19a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1b6:	e043      	b.n	800d240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	ee07 3a90 	vmov	s15, r3
 800d1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d300 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ca:	4b48      	ldr	r3, [pc, #288]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1fa:	e021      	b.n	800d240 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	ee07 3a90 	vmov	s15, r3
 800d202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d206:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d2fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d20e:	4b37      	ldr	r3, [pc, #220]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d216:	ee07 3a90 	vmov	s15, r3
 800d21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d222:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d23e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d240:	4b2a      	ldr	r3, [pc, #168]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d244:	0a5b      	lsrs	r3, r3, #9
 800d246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d24a:	ee07 3a90 	vmov	s15, r3
 800d24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d252:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d25a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d25e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d266:	ee17 2a90 	vmov	r2, s15
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d26e:	4b1f      	ldr	r3, [pc, #124]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d272:	0c1b      	lsrs	r3, r3, #16
 800d274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d278:	ee07 3a90 	vmov	s15, r3
 800d27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d280:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d284:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d288:	edd7 6a07 	vldr	s13, [r7, #28]
 800d28c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d294:	ee17 2a90 	vmov	r2, s15
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d29c:	4b13      	ldr	r3, [pc, #76]	@ (800d2ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d29e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2a0:	0e1b      	lsrs	r3, r3, #24
 800d2a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2a6:	ee07 3a90 	vmov	s15, r3
 800d2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d2b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2c2:	ee17 2a90 	vmov	r2, s15
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d2ca:	e008      	b.n	800d2de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	609a      	str	r2, [r3, #8]
}
 800d2de:	bf00      	nop
 800d2e0:	3724      	adds	r7, #36	@ 0x24
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	58024400 	.word	0x58024400
 800d2f0:	03d09000 	.word	0x03d09000
 800d2f4:	46000000 	.word	0x46000000
 800d2f8:	4c742400 	.word	0x4c742400
 800d2fc:	4a742400 	.word	0x4a742400
 800d300:	4af42400 	.word	0x4af42400

0800d304 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d312:	4b53      	ldr	r3, [pc, #332]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d316:	f003 0303 	and.w	r3, r3, #3
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d101      	bne.n	800d322 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e099      	b.n	800d456 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d322:	4b4f      	ldr	r3, [pc, #316]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a4e      	ldr	r2, [pc, #312]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d328:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d32e:	f7f8 ff3d 	bl	80061ac <HAL_GetTick>
 800d332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d334:	e008      	b.n	800d348 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d336:	f7f8 ff39 	bl	80061ac <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b02      	cmp	r3, #2
 800d342:	d901      	bls.n	800d348 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e086      	b.n	800d456 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d348:	4b45      	ldr	r3, [pc, #276]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1f0      	bne.n	800d336 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d354:	4b42      	ldr	r3, [pc, #264]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d358:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	031b      	lsls	r3, r3, #12
 800d362:	493f      	ldr	r1, [pc, #252]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d364:	4313      	orrs	r3, r2
 800d366:	628b      	str	r3, [r1, #40]	@ 0x28
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	3b01      	subs	r3, #1
 800d36e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	3b01      	subs	r3, #1
 800d378:	025b      	lsls	r3, r3, #9
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	431a      	orrs	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	3b01      	subs	r3, #1
 800d384:	041b      	lsls	r3, r3, #16
 800d386:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d38a:	431a      	orrs	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	3b01      	subs	r3, #1
 800d392:	061b      	lsls	r3, r3, #24
 800d394:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d398:	4931      	ldr	r1, [pc, #196]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d39a:	4313      	orrs	r3, r2
 800d39c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d39e:	4b30      	ldr	r3, [pc, #192]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	492d      	ldr	r1, [pc, #180]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d3b0:	4b2b      	ldr	r3, [pc, #172]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3b4:	f023 0220 	bic.w	r2, r3, #32
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	4928      	ldr	r1, [pc, #160]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d3c2:	4b27      	ldr	r3, [pc, #156]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3c6:	4a26      	ldr	r2, [pc, #152]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3c8:	f023 0310 	bic.w	r3, r3, #16
 800d3cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d3ce:	4b24      	ldr	r3, [pc, #144]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3d2:	4b24      	ldr	r3, [pc, #144]	@ (800d464 <RCCEx_PLL2_Config+0x160>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	69d2      	ldr	r2, [r2, #28]
 800d3da:	00d2      	lsls	r2, r2, #3
 800d3dc:	4920      	ldr	r1, [pc, #128]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d3e2:	4b1f      	ldr	r3, [pc, #124]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e6:	4a1e      	ldr	r2, [pc, #120]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3e8:	f043 0310 	orr.w	r3, r3, #16
 800d3ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d106      	bne.n	800d402 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d3f4:	4b1a      	ldr	r3, [pc, #104]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f8:	4a19      	ldr	r2, [pc, #100]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d3fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d3fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d400:	e00f      	b.n	800d422 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d106      	bne.n	800d416 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d408:	4b15      	ldr	r3, [pc, #84]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40c:	4a14      	ldr	r2, [pc, #80]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d40e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d412:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d414:	e005      	b.n	800d422 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d416:	4b12      	ldr	r3, [pc, #72]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41a:	4a11      	ldr	r2, [pc, #68]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d41c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d420:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d422:	4b0f      	ldr	r3, [pc, #60]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a0e      	ldr	r2, [pc, #56]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d428:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d42c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d42e:	f7f8 febd 	bl	80061ac <HAL_GetTick>
 800d432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d434:	e008      	b.n	800d448 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d436:	f7f8 feb9 	bl	80061ac <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	2b02      	cmp	r3, #2
 800d442:	d901      	bls.n	800d448 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d444:	2303      	movs	r3, #3
 800d446:	e006      	b.n	800d456 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d448:	4b05      	ldr	r3, [pc, #20]	@ (800d460 <RCCEx_PLL2_Config+0x15c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0f0      	beq.n	800d436 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d454:	7bfb      	ldrb	r3, [r7, #15]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	58024400 	.word	0x58024400
 800d464:	ffff0007 	.word	0xffff0007

0800d468 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d476:	4b53      	ldr	r3, [pc, #332]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d47a:	f003 0303 	and.w	r3, r3, #3
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d101      	bne.n	800d486 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	e099      	b.n	800d5ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d486:	4b4f      	ldr	r3, [pc, #316]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	4a4e      	ldr	r2, [pc, #312]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d48c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d492:	f7f8 fe8b 	bl	80061ac <HAL_GetTick>
 800d496:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d498:	e008      	b.n	800d4ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d49a:	f7f8 fe87 	bl	80061ac <HAL_GetTick>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	1ad3      	subs	r3, r2, r3
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d901      	bls.n	800d4ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e086      	b.n	800d5ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d4ac:	4b45      	ldr	r3, [pc, #276]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d1f0      	bne.n	800d49a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d4b8:	4b42      	ldr	r3, [pc, #264]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	051b      	lsls	r3, r3, #20
 800d4c6:	493f      	ldr	r1, [pc, #252]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	628b      	str	r3, [r1, #40]	@ 0x28
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	3b01      	subs	r3, #1
 800d4dc:	025b      	lsls	r3, r3, #9
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	431a      	orrs	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	041b      	lsls	r3, r3, #16
 800d4ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d4ee:	431a      	orrs	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	3b01      	subs	r3, #1
 800d4f6:	061b      	lsls	r3, r3, #24
 800d4f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d4fc:	4931      	ldr	r1, [pc, #196]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d4fe:	4313      	orrs	r3, r2
 800d500:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d502:	4b30      	ldr	r3, [pc, #192]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d506:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	695b      	ldr	r3, [r3, #20]
 800d50e:	492d      	ldr	r1, [pc, #180]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d510:	4313      	orrs	r3, r2
 800d512:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d514:	4b2b      	ldr	r3, [pc, #172]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d518:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	699b      	ldr	r3, [r3, #24]
 800d520:	4928      	ldr	r1, [pc, #160]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d522:	4313      	orrs	r3, r2
 800d524:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d526:	4b27      	ldr	r3, [pc, #156]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d52a:	4a26      	ldr	r2, [pc, #152]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d52c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d530:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d532:	4b24      	ldr	r3, [pc, #144]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d536:	4b24      	ldr	r3, [pc, #144]	@ (800d5c8 <RCCEx_PLL3_Config+0x160>)
 800d538:	4013      	ands	r3, r2
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	69d2      	ldr	r2, [r2, #28]
 800d53e:	00d2      	lsls	r2, r2, #3
 800d540:	4920      	ldr	r1, [pc, #128]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d542:	4313      	orrs	r3, r2
 800d544:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d546:	4b1f      	ldr	r3, [pc, #124]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d54a:	4a1e      	ldr	r2, [pc, #120]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d54c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d550:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d106      	bne.n	800d566 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d558:	4b1a      	ldr	r3, [pc, #104]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d55a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55c:	4a19      	ldr	r2, [pc, #100]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d55e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d562:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d564:	e00f      	b.n	800d586 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d106      	bne.n	800d57a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d56c:	4b15      	ldr	r3, [pc, #84]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d570:	4a14      	ldr	r2, [pc, #80]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d572:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d576:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d578:	e005      	b.n	800d586 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d57a:	4b12      	ldr	r3, [pc, #72]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57e:	4a11      	ldr	r2, [pc, #68]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d584:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d586:	4b0f      	ldr	r3, [pc, #60]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a0e      	ldr	r2, [pc, #56]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d58c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d592:	f7f8 fe0b 	bl	80061ac <HAL_GetTick>
 800d596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d598:	e008      	b.n	800d5ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d59a:	f7f8 fe07 	bl	80061ac <HAL_GetTick>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d901      	bls.n	800d5ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e006      	b.n	800d5ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d5ac:	4b05      	ldr	r3, [pc, #20]	@ (800d5c4 <RCCEx_PLL3_Config+0x15c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d0f0      	beq.n	800d59a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	58024400 	.word	0x58024400
 800d5c8:	ffff0007 	.word	0xffff0007

0800d5cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d101      	bne.n	800d5de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e049      	b.n	800d672 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d106      	bne.n	800d5f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 f841 	bl	800d67a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2202      	movs	r2, #2
 800d5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	3304      	adds	r3, #4
 800d608:	4619      	mov	r1, r3
 800d60a:	4610      	mov	r0, r2
 800d60c:	f000 f9e8 	bl	800d9e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2201      	movs	r2, #1
 800d614:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2201      	movs	r2, #1
 800d63c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2201      	movs	r2, #1
 800d654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2201      	movs	r2, #1
 800d66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d67a:	b480      	push	{r7}
 800d67c:	b083      	sub	sp, #12
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d682:	bf00      	nop
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
	...

0800d690 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d001      	beq.n	800d6a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e054      	b.n	800d752 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	68da      	ldr	r2, [r3, #12]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f042 0201 	orr.w	r2, r2, #1
 800d6be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a26      	ldr	r2, [pc, #152]	@ (800d760 <HAL_TIM_Base_Start_IT+0xd0>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d022      	beq.n	800d710 <HAL_TIM_Base_Start_IT+0x80>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6d2:	d01d      	beq.n	800d710 <HAL_TIM_Base_Start_IT+0x80>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a22      	ldr	r2, [pc, #136]	@ (800d764 <HAL_TIM_Base_Start_IT+0xd4>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d018      	beq.n	800d710 <HAL_TIM_Base_Start_IT+0x80>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a21      	ldr	r2, [pc, #132]	@ (800d768 <HAL_TIM_Base_Start_IT+0xd8>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d013      	beq.n	800d710 <HAL_TIM_Base_Start_IT+0x80>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a1f      	ldr	r2, [pc, #124]	@ (800d76c <HAL_TIM_Base_Start_IT+0xdc>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d00e      	beq.n	800d710 <HAL_TIM_Base_Start_IT+0x80>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a1e      	ldr	r2, [pc, #120]	@ (800d770 <HAL_TIM_Base_Start_IT+0xe0>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d009      	beq.n	800d710 <HAL_TIM_Base_Start_IT+0x80>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a1c      	ldr	r2, [pc, #112]	@ (800d774 <HAL_TIM_Base_Start_IT+0xe4>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d004      	beq.n	800d710 <HAL_TIM_Base_Start_IT+0x80>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a1b      	ldr	r2, [pc, #108]	@ (800d778 <HAL_TIM_Base_Start_IT+0xe8>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d115      	bne.n	800d73c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	689a      	ldr	r2, [r3, #8]
 800d716:	4b19      	ldr	r3, [pc, #100]	@ (800d77c <HAL_TIM_Base_Start_IT+0xec>)
 800d718:	4013      	ands	r3, r2
 800d71a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2b06      	cmp	r3, #6
 800d720:	d015      	beq.n	800d74e <HAL_TIM_Base_Start_IT+0xbe>
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d728:	d011      	beq.n	800d74e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	681a      	ldr	r2, [r3, #0]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f042 0201 	orr.w	r2, r2, #1
 800d738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d73a:	e008      	b.n	800d74e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f042 0201 	orr.w	r2, r2, #1
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	e000      	b.n	800d750 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d74e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3714      	adds	r7, #20
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	40010000 	.word	0x40010000
 800d764:	40000400 	.word	0x40000400
 800d768:	40000800 	.word	0x40000800
 800d76c:	40000c00 	.word	0x40000c00
 800d770:	40010400 	.word	0x40010400
 800d774:	40001800 	.word	0x40001800
 800d778:	40014000 	.word	0x40014000
 800d77c:	00010007 	.word	0x00010007

0800d780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	f003 0302 	and.w	r3, r3, #2
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d020      	beq.n	800d7e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f003 0302 	and.w	r3, r3, #2
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d01b      	beq.n	800d7e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f06f 0202 	mvn.w	r2, #2
 800d7b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	f003 0303 	and.w	r3, r3, #3
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d003      	beq.n	800d7d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 f8e9 	bl	800d9a2 <HAL_TIM_IC_CaptureCallback>
 800d7d0:	e005      	b.n	800d7de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 f8db 	bl	800d98e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f8ec 	bl	800d9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	f003 0304 	and.w	r3, r3, #4
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d020      	beq.n	800d830 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f003 0304 	and.w	r3, r3, #4
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d01b      	beq.n	800d830 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f06f 0204 	mvn.w	r2, #4
 800d800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2202      	movs	r2, #2
 800d806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	699b      	ldr	r3, [r3, #24]
 800d80e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d812:	2b00      	cmp	r3, #0
 800d814:	d003      	beq.n	800d81e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f8c3 	bl	800d9a2 <HAL_TIM_IC_CaptureCallback>
 800d81c:	e005      	b.n	800d82a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f8b5 	bl	800d98e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 f8c6 	bl	800d9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	f003 0308 	and.w	r3, r3, #8
 800d836:	2b00      	cmp	r3, #0
 800d838:	d020      	beq.n	800d87c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f003 0308 	and.w	r3, r3, #8
 800d840:	2b00      	cmp	r3, #0
 800d842:	d01b      	beq.n	800d87c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f06f 0208 	mvn.w	r2, #8
 800d84c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2204      	movs	r2, #4
 800d852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	69db      	ldr	r3, [r3, #28]
 800d85a:	f003 0303 	and.w	r3, r3, #3
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d003      	beq.n	800d86a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f89d 	bl	800d9a2 <HAL_TIM_IC_CaptureCallback>
 800d868:	e005      	b.n	800d876 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f88f 	bl	800d98e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 f8a0 	bl	800d9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2200      	movs	r2, #0
 800d87a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	f003 0310 	and.w	r3, r3, #16
 800d882:	2b00      	cmp	r3, #0
 800d884:	d020      	beq.n	800d8c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f003 0310 	and.w	r3, r3, #16
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d01b      	beq.n	800d8c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f06f 0210 	mvn.w	r2, #16
 800d898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2208      	movs	r2, #8
 800d89e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	69db      	ldr	r3, [r3, #28]
 800d8a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 f877 	bl	800d9a2 <HAL_TIM_IC_CaptureCallback>
 800d8b4:	e005      	b.n	800d8c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f869 	bl	800d98e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f87a 	bl	800d9b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	f003 0301 	and.w	r3, r3, #1
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00c      	beq.n	800d8ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f003 0301 	and.w	r3, r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d007      	beq.n	800d8ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f06f 0201 	mvn.w	r2, #1
 800d8e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7f7 fe68 	bl	80055bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d104      	bne.n	800d900 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d00c      	beq.n	800d91a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d906:	2b00      	cmp	r3, #0
 800d908:	d007      	beq.n	800d91a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f90d 	bl	800db34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00c      	beq.n	800d93e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d007      	beq.n	800d93e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 f905 	bl	800db48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00c      	beq.n	800d962 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d007      	beq.n	800d962 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 f834 	bl	800d9ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	f003 0320 	and.w	r3, r3, #32
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00c      	beq.n	800d986 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f003 0320 	and.w	r3, r3, #32
 800d972:	2b00      	cmp	r3, #0
 800d974:	d007      	beq.n	800d986 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f06f 0220 	mvn.w	r2, #32
 800d97e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f8cd 	bl	800db20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d986:	bf00      	nop
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d98e:	b480      	push	{r7}
 800d990:	b083      	sub	sp, #12
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d996:	bf00      	nop
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d9aa:	bf00      	nop
 800d9ac:	370c      	adds	r7, #12
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr

0800d9b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d9b6:	b480      	push	{r7}
 800d9b8:	b083      	sub	sp, #12
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d9be:	bf00      	nop
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d9ca:	b480      	push	{r7}
 800d9cc:	b083      	sub	sp, #12
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d9d2:	bf00      	nop
 800d9d4:	370c      	adds	r7, #12
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
	...

0800d9e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a43      	ldr	r2, [pc, #268]	@ (800db00 <TIM_Base_SetConfig+0x120>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d013      	beq.n	800da20 <TIM_Base_SetConfig+0x40>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9fe:	d00f      	beq.n	800da20 <TIM_Base_SetConfig+0x40>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a40      	ldr	r2, [pc, #256]	@ (800db04 <TIM_Base_SetConfig+0x124>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d00b      	beq.n	800da20 <TIM_Base_SetConfig+0x40>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	4a3f      	ldr	r2, [pc, #252]	@ (800db08 <TIM_Base_SetConfig+0x128>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d007      	beq.n	800da20 <TIM_Base_SetConfig+0x40>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	4a3e      	ldr	r2, [pc, #248]	@ (800db0c <TIM_Base_SetConfig+0x12c>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d003      	beq.n	800da20 <TIM_Base_SetConfig+0x40>
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a3d      	ldr	r2, [pc, #244]	@ (800db10 <TIM_Base_SetConfig+0x130>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d108      	bne.n	800da32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	4313      	orrs	r3, r2
 800da30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4a32      	ldr	r2, [pc, #200]	@ (800db00 <TIM_Base_SetConfig+0x120>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d01f      	beq.n	800da7a <TIM_Base_SetConfig+0x9a>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da40:	d01b      	beq.n	800da7a <TIM_Base_SetConfig+0x9a>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a2f      	ldr	r2, [pc, #188]	@ (800db04 <TIM_Base_SetConfig+0x124>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d017      	beq.n	800da7a <TIM_Base_SetConfig+0x9a>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4a2e      	ldr	r2, [pc, #184]	@ (800db08 <TIM_Base_SetConfig+0x128>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d013      	beq.n	800da7a <TIM_Base_SetConfig+0x9a>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4a2d      	ldr	r2, [pc, #180]	@ (800db0c <TIM_Base_SetConfig+0x12c>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d00f      	beq.n	800da7a <TIM_Base_SetConfig+0x9a>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a2c      	ldr	r2, [pc, #176]	@ (800db10 <TIM_Base_SetConfig+0x130>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d00b      	beq.n	800da7a <TIM_Base_SetConfig+0x9a>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a2b      	ldr	r2, [pc, #172]	@ (800db14 <TIM_Base_SetConfig+0x134>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d007      	beq.n	800da7a <TIM_Base_SetConfig+0x9a>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4a2a      	ldr	r2, [pc, #168]	@ (800db18 <TIM_Base_SetConfig+0x138>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d003      	beq.n	800da7a <TIM_Base_SetConfig+0x9a>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a29      	ldr	r2, [pc, #164]	@ (800db1c <TIM_Base_SetConfig+0x13c>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d108      	bne.n	800da8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	4313      	orrs	r3, r2
 800da8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	4313      	orrs	r3, r2
 800da98:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	689a      	ldr	r2, [r3, #8]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4a14      	ldr	r2, [pc, #80]	@ (800db00 <TIM_Base_SetConfig+0x120>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d00f      	beq.n	800dad2 <TIM_Base_SetConfig+0xf2>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a16      	ldr	r2, [pc, #88]	@ (800db10 <TIM_Base_SetConfig+0x130>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d00b      	beq.n	800dad2 <TIM_Base_SetConfig+0xf2>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a15      	ldr	r2, [pc, #84]	@ (800db14 <TIM_Base_SetConfig+0x134>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d007      	beq.n	800dad2 <TIM_Base_SetConfig+0xf2>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a14      	ldr	r2, [pc, #80]	@ (800db18 <TIM_Base_SetConfig+0x138>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d003      	beq.n	800dad2 <TIM_Base_SetConfig+0xf2>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a13      	ldr	r2, [pc, #76]	@ (800db1c <TIM_Base_SetConfig+0x13c>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d103      	bne.n	800dada <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	691a      	ldr	r2, [r3, #16]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f043 0204 	orr.w	r2, r3, #4
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2201      	movs	r2, #1
 800daea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	601a      	str	r2, [r3, #0]
}
 800daf2:	bf00      	nop
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	40010000 	.word	0x40010000
 800db04:	40000400 	.word	0x40000400
 800db08:	40000800 	.word	0x40000800
 800db0c:	40000c00 	.word	0x40000c00
 800db10:	40010400 	.word	0x40010400
 800db14:	40014000 	.word	0x40014000
 800db18:	40014400 	.word	0x40014400
 800db1c:	40014800 	.word	0x40014800

0800db20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db50:	bf00      	nop
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d101      	bne.n	800db6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	e042      	b.n	800dbf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f7f7 fe91 	bl	80058a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2224      	movs	r2, #36	@ 0x24
 800db8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f022 0201 	bic.w	r2, r2, #1
 800db9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d002      	beq.n	800dbac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f001 fa5c 	bl	800f064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fcf1 	bl	800e594 <UART_SetConfig>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d101      	bne.n	800dbbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e01b      	b.n	800dbf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	685a      	ldr	r2, [r3, #4]
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dbca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	689a      	ldr	r2, [r3, #8]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dbda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f042 0201 	orr.w	r2, r2, #1
 800dbea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f001 fadb 	bl	800f1a8 <UART_CheckIdleState>
 800dbf2:	4603      	mov	r3, r0
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b08a      	sub	sp, #40	@ 0x28
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	4613      	mov	r3, r2
 800dc08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc10:	2b20      	cmp	r3, #32
 800dc12:	d167      	bne.n	800dce4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <HAL_UART_Transmit_DMA+0x24>
 800dc1a:	88fb      	ldrh	r3, [r7, #6]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d101      	bne.n	800dc24 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800dc20:	2301      	movs	r3, #1
 800dc22:	e060      	b.n	800dce6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	88fa      	ldrh	r2, [r7, #6]
 800dc2e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	88fa      	ldrh	r2, [r7, #6]
 800dc36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2221      	movs	r2, #33	@ 0x21
 800dc46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d028      	beq.n	800dca4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc56:	4a26      	ldr	r2, [pc, #152]	@ (800dcf0 <HAL_UART_Transmit_DMA+0xf4>)
 800dc58:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc5e:	4a25      	ldr	r2, [pc, #148]	@ (800dcf4 <HAL_UART_Transmit_DMA+0xf8>)
 800dc60:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc66:	4a24      	ldr	r2, [pc, #144]	@ (800dcf8 <HAL_UART_Transmit_DMA+0xfc>)
 800dc68:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dc6e:	2200      	movs	r2, #0
 800dc70:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3328      	adds	r3, #40	@ 0x28
 800dc82:	461a      	mov	r2, r3
 800dc84:	88fb      	ldrh	r3, [r7, #6]
 800dc86:	f7f8 ff81 	bl	8006b8c <HAL_DMA_Start_IT>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d009      	beq.n	800dca4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2210      	movs	r2, #16
 800dc94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2220      	movs	r2, #32
 800dc9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e020      	b.n	800dce6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	2240      	movs	r2, #64	@ 0x40
 800dcaa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	e853 3f00 	ldrex	r3, [r3]
 800dcba:	613b      	str	r3, [r7, #16]
   return(result);
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	3308      	adds	r3, #8
 800dcca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dccc:	623a      	str	r2, [r7, #32]
 800dcce:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd0:	69f9      	ldr	r1, [r7, #28]
 800dcd2:	6a3a      	ldr	r2, [r7, #32]
 800dcd4:	e841 2300 	strex	r3, r2, [r1]
 800dcd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1e5      	bne.n	800dcac <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	e000      	b.n	800dce6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800dce4:	2302      	movs	r3, #2
  }
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3728      	adds	r7, #40	@ 0x28
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	0800f675 	.word	0x0800f675
 800dcf4:	0800f70b 	.word	0x0800f70b
 800dcf8:	0800f88d 	.word	0x0800f88d

0800dcfc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08a      	sub	sp, #40	@ 0x28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	4613      	mov	r3, r2
 800dd08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd10:	2b20      	cmp	r3, #32
 800dd12:	d137      	bne.n	800dd84 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <HAL_UART_Receive_DMA+0x24>
 800dd1a:	88fb      	ldrh	r3, [r7, #6]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e030      	b.n	800dd86 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a18      	ldr	r2, [pc, #96]	@ (800dd90 <HAL_UART_Receive_DMA+0x94>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d01f      	beq.n	800dd74 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d018      	beq.n	800dd74 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	e853 3f00 	ldrex	r3, [r3]
 800dd4e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd56:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd60:	623b      	str	r3, [r7, #32]
 800dd62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd64:	69f9      	ldr	r1, [r7, #28]
 800dd66:	6a3a      	ldr	r2, [r7, #32]
 800dd68:	e841 2300 	strex	r3, r2, [r1]
 800dd6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1e6      	bne.n	800dd42 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dd74:	88fb      	ldrh	r3, [r7, #6]
 800dd76:	461a      	mov	r2, r3
 800dd78:	68b9      	ldr	r1, [r7, #8]
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f001 fb2c 	bl	800f3d8 <UART_Start_Receive_DMA>
 800dd80:	4603      	mov	r3, r0
 800dd82:	e000      	b.n	800dd86 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800dd84:	2302      	movs	r3, #2
  }
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3728      	adds	r7, #40	@ 0x28
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	58000c00 	.word	0x58000c00

0800dd94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b0ba      	sub	sp, #232	@ 0xe8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	69db      	ldr	r3, [r3, #28]
 800dda2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	689b      	ldr	r3, [r3, #8]
 800ddb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ddba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ddbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ddc2:	4013      	ands	r3, r2
 800ddc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ddc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d11b      	bne.n	800de08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ddd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ddd4:	f003 0320 	and.w	r3, r3, #32
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d015      	beq.n	800de08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dde0:	f003 0320 	and.w	r3, r3, #32
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d105      	bne.n	800ddf4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dde8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d009      	beq.n	800de08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f000 8393 	beq.w	800e524 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	4798      	blx	r3
      }
      return;
 800de06:	e38d      	b.n	800e524 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800de08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 8123 	beq.w	800e058 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800de12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800de16:	4b8d      	ldr	r3, [pc, #564]	@ (800e04c <HAL_UART_IRQHandler+0x2b8>)
 800de18:	4013      	ands	r3, r2
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d106      	bne.n	800de2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800de1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800de22:	4b8b      	ldr	r3, [pc, #556]	@ (800e050 <HAL_UART_IRQHandler+0x2bc>)
 800de24:	4013      	ands	r3, r2
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 8116 	beq.w	800e058 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800de2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d011      	beq.n	800de5c <HAL_UART_IRQHandler+0xc8>
 800de38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800de3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00b      	beq.n	800de5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2201      	movs	r2, #1
 800de4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de52:	f043 0201 	orr.w	r2, r3, #1
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de60:	f003 0302 	and.w	r3, r3, #2
 800de64:	2b00      	cmp	r3, #0
 800de66:	d011      	beq.n	800de8c <HAL_UART_IRQHandler+0xf8>
 800de68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de6c:	f003 0301 	and.w	r3, r3, #1
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00b      	beq.n	800de8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2202      	movs	r2, #2
 800de7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de82:	f043 0204 	orr.w	r2, r3, #4
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de90:	f003 0304 	and.w	r3, r3, #4
 800de94:	2b00      	cmp	r3, #0
 800de96:	d011      	beq.n	800debc <HAL_UART_IRQHandler+0x128>
 800de98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d00b      	beq.n	800debc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2204      	movs	r2, #4
 800deaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800deb2:	f043 0202 	orr.w	r2, r3, #2
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800debc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dec0:	f003 0308 	and.w	r3, r3, #8
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d017      	beq.n	800def8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800decc:	f003 0320 	and.w	r3, r3, #32
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d105      	bne.n	800dee0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ded4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ded8:	4b5c      	ldr	r3, [pc, #368]	@ (800e04c <HAL_UART_IRQHandler+0x2b8>)
 800deda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00b      	beq.n	800def8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2208      	movs	r2, #8
 800dee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800deee:	f043 0208 	orr.w	r2, r3, #8
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800def8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800defc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800df00:	2b00      	cmp	r3, #0
 800df02:	d012      	beq.n	800df2a <HAL_UART_IRQHandler+0x196>
 800df04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00c      	beq.n	800df2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800df18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df20:	f043 0220 	orr.w	r2, r3, #32
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df30:	2b00      	cmp	r3, #0
 800df32:	f000 82f9 	beq.w	800e528 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800df36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df3a:	f003 0320 	and.w	r3, r3, #32
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d013      	beq.n	800df6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800df42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df46:	f003 0320 	and.w	r3, r3, #32
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d105      	bne.n	800df5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800df4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800df56:	2b00      	cmp	r3, #0
 800df58:	d007      	beq.n	800df6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d003      	beq.n	800df6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df7e:	2b40      	cmp	r3, #64	@ 0x40
 800df80:	d005      	beq.n	800df8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d054      	beq.n	800e038 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f001 fb0a 	bl	800f5a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df9e:	2b40      	cmp	r3, #64	@ 0x40
 800dfa0:	d146      	bne.n	800e030 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dfb0:	e853 3f00 	ldrex	r3, [r3]
 800dfb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800dfb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dfbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	3308      	adds	r3, #8
 800dfca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800dfce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dfd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800dfda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dfde:	e841 2300 	strex	r3, r2, [r1]
 800dfe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800dfe6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1d9      	bne.n	800dfa2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d017      	beq.n	800e028 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dffe:	4a15      	ldr	r2, [pc, #84]	@ (800e054 <HAL_UART_IRQHandler+0x2c0>)
 800e000:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e008:	4618      	mov	r0, r3
 800e00a:	f7f9 fb47 	bl	800769c <HAL_DMA_Abort_IT>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d019      	beq.n	800e048 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e01a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e022:	4610      	mov	r0, r2
 800e024:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e026:	e00f      	b.n	800e048 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7f3 f8e9 	bl	8001200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e02e:	e00b      	b.n	800e048 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7f3 f8e5 	bl	8001200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e036:	e007      	b.n	800e048 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f7f3 f8e1 	bl	8001200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e046:	e26f      	b.n	800e528 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e048:	bf00      	nop
    return;
 800e04a:	e26d      	b.n	800e528 <HAL_UART_IRQHandler+0x794>
 800e04c:	10000001 	.word	0x10000001
 800e050:	04000120 	.word	0x04000120
 800e054:	0800f90d 	.word	0x0800f90d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	f040 8203 	bne.w	800e468 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e066:	f003 0310 	and.w	r3, r3, #16
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	f000 81fc 	beq.w	800e468 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e074:	f003 0310 	and.w	r3, r3, #16
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f000 81f5 	beq.w	800e468 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	2210      	movs	r2, #16
 800e084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e090:	2b40      	cmp	r3, #64	@ 0x40
 800e092:	f040 816d 	bne.w	800e370 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4aa4      	ldr	r2, [pc, #656]	@ (800e330 <HAL_UART_IRQHandler+0x59c>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d068      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4aa1      	ldr	r2, [pc, #644]	@ (800e334 <HAL_UART_IRQHandler+0x5a0>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d061      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a9f      	ldr	r2, [pc, #636]	@ (800e338 <HAL_UART_IRQHandler+0x5a4>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d05a      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a9c      	ldr	r2, [pc, #624]	@ (800e33c <HAL_UART_IRQHandler+0x5a8>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d053      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	4a9a      	ldr	r2, [pc, #616]	@ (800e340 <HAL_UART_IRQHandler+0x5ac>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d04c      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a97      	ldr	r2, [pc, #604]	@ (800e344 <HAL_UART_IRQHandler+0x5b0>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d045      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a95      	ldr	r2, [pc, #596]	@ (800e348 <HAL_UART_IRQHandler+0x5b4>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d03e      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a92      	ldr	r2, [pc, #584]	@ (800e34c <HAL_UART_IRQHandler+0x5b8>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d037      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a90      	ldr	r2, [pc, #576]	@ (800e350 <HAL_UART_IRQHandler+0x5bc>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d030      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a8d      	ldr	r2, [pc, #564]	@ (800e354 <HAL_UART_IRQHandler+0x5c0>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d029      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a8b      	ldr	r2, [pc, #556]	@ (800e358 <HAL_UART_IRQHandler+0x5c4>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d022      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a88      	ldr	r2, [pc, #544]	@ (800e35c <HAL_UART_IRQHandler+0x5c8>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d01b      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a86      	ldr	r2, [pc, #536]	@ (800e360 <HAL_UART_IRQHandler+0x5cc>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d014      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a83      	ldr	r2, [pc, #524]	@ (800e364 <HAL_UART_IRQHandler+0x5d0>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d00d      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a81      	ldr	r2, [pc, #516]	@ (800e368 <HAL_UART_IRQHandler+0x5d4>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d006      	beq.n	800e176 <HAL_UART_IRQHandler+0x3e2>
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	4a7e      	ldr	r2, [pc, #504]	@ (800e36c <HAL_UART_IRQHandler+0x5d8>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d106      	bne.n	800e184 <HAL_UART_IRQHandler+0x3f0>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	b29b      	uxth	r3, r3
 800e182:	e005      	b.n	800e190 <HAL_UART_IRQHandler+0x3fc>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 80ad 	beq.w	800e2f8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e1a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	f080 80a5 	bcs.w	800e2f8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e1b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e1be:	69db      	ldr	r3, [r3, #28]
 800e1c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1c4:	f000 8087 	beq.w	800e2d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e1d4:	e853 3f00 	ldrex	r3, [r3]
 800e1d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e1dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e1e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e1f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e1f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e1fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e202:	e841 2300 	strex	r3, r2, [r1]
 800e206:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e20a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1da      	bne.n	800e1c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	3308      	adds	r3, #8
 800e218:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e21a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e21c:	e853 3f00 	ldrex	r3, [r3]
 800e220:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e224:	f023 0301 	bic.w	r3, r3, #1
 800e228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	3308      	adds	r3, #8
 800e232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e236:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e23a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e23c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e23e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e242:	e841 2300 	strex	r3, r2, [r1]
 800e246:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1e1      	bne.n	800e212 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	3308      	adds	r3, #8
 800e254:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e258:	e853 3f00 	ldrex	r3, [r3]
 800e25c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e25e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	3308      	adds	r3, #8
 800e26e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e272:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e274:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e276:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e278:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e27a:	e841 2300 	strex	r3, r2, [r1]
 800e27e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1e3      	bne.n	800e24e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2220      	movs	r2, #32
 800e28a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e29a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e29c:	e853 3f00 	ldrex	r3, [r3]
 800e2a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e2a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2a4:	f023 0310 	bic.w	r3, r3, #16
 800e2a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e2b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e2b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e2bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e2be:	e841 2300 	strex	r3, r2, [r1]
 800e2c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e2c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d1e4      	bne.n	800e294 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f8 fec5 	bl	8007060 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2202      	movs	r2, #2
 800e2da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e2e8:	b29b      	uxth	r3, r3
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	4619      	mov	r1, r3
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 f943 	bl	800e57c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e2f6:	e119      	b.n	800e52c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e2fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e302:	429a      	cmp	r2, r3
 800e304:	f040 8112 	bne.w	800e52c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e30e:	69db      	ldr	r3, [r3, #28]
 800e310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e314:	f040 810a 	bne.w	800e52c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2202      	movs	r2, #2
 800e31c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e324:	4619      	mov	r1, r3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 f928 	bl	800e57c <HAL_UARTEx_RxEventCallback>
      return;
 800e32c:	e0fe      	b.n	800e52c <HAL_UART_IRQHandler+0x798>
 800e32e:	bf00      	nop
 800e330:	40020010 	.word	0x40020010
 800e334:	40020028 	.word	0x40020028
 800e338:	40020040 	.word	0x40020040
 800e33c:	40020058 	.word	0x40020058
 800e340:	40020070 	.word	0x40020070
 800e344:	40020088 	.word	0x40020088
 800e348:	400200a0 	.word	0x400200a0
 800e34c:	400200b8 	.word	0x400200b8
 800e350:	40020410 	.word	0x40020410
 800e354:	40020428 	.word	0x40020428
 800e358:	40020440 	.word	0x40020440
 800e35c:	40020458 	.word	0x40020458
 800e360:	40020470 	.word	0x40020470
 800e364:	40020488 	.word	0x40020488
 800e368:	400204a0 	.word	0x400204a0
 800e36c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	1ad3      	subs	r3, r2, r3
 800e380:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f000 80cf 	beq.w	800e530 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800e392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e396:	2b00      	cmp	r3, #0
 800e398:	f000 80ca 	beq.w	800e530 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a4:	e853 3f00 	ldrex	r3, [r3]
 800e3a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e3aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e3b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3be:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e3c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e3c6:	e841 2300 	strex	r3, r2, [r1]
 800e3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e3cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1e4      	bne.n	800e39c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3dc:	e853 3f00 	ldrex	r3, [r3]
 800e3e0:	623b      	str	r3, [r7, #32]
   return(result);
 800e3e2:	6a3a      	ldr	r2, [r7, #32]
 800e3e4:	4b55      	ldr	r3, [pc, #340]	@ (800e53c <HAL_UART_IRQHandler+0x7a8>)
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3308      	adds	r3, #8
 800e3f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e3f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e3fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3fe:	e841 2300 	strex	r3, r2, [r1]
 800e402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e406:	2b00      	cmp	r3, #0
 800e408:	d1e3      	bne.n	800e3d2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2220      	movs	r2, #32
 800e40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	e853 3f00 	ldrex	r3, [r3]
 800e42a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	f023 0310 	bic.w	r3, r3, #16
 800e432:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	461a      	mov	r2, r3
 800e43c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e440:	61fb      	str	r3, [r7, #28]
 800e442:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e444:	69b9      	ldr	r1, [r7, #24]
 800e446:	69fa      	ldr	r2, [r7, #28]
 800e448:	e841 2300 	strex	r3, r2, [r1]
 800e44c:	617b      	str	r3, [r7, #20]
   return(result);
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d1e4      	bne.n	800e41e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2202      	movs	r2, #2
 800e458:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e45a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 f88b 	bl	800e57c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e466:	e063      	b.n	800e530 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e46c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00e      	beq.n	800e492 <HAL_UART_IRQHandler+0x6fe>
 800e474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d008      	beq.n	800e492 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e488:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f001 fa7b 	bl	800f986 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e490:	e051      	b.n	800e536 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d014      	beq.n	800e4c8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e49e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d105      	bne.n	800e4b6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e4aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e4ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d008      	beq.n	800e4c8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d03a      	beq.n	800e534 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	4798      	blx	r3
    }
    return;
 800e4c6:	e035      	b.n	800e534 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d009      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x754>
 800e4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d003      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f001 fa25 	bl	800f930 <UART_EndTransmit_IT>
    return;
 800e4e6:	e026      	b.n	800e536 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e4ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d009      	beq.n	800e508 <HAL_UART_IRQHandler+0x774>
 800e4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e4f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d003      	beq.n	800e508 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f001 fa54 	bl	800f9ae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e506:	e016      	b.n	800e536 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e50c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d010      	beq.n	800e536 <HAL_UART_IRQHandler+0x7a2>
 800e514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	da0c      	bge.n	800e536 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f001 fa3c 	bl	800f99a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e522:	e008      	b.n	800e536 <HAL_UART_IRQHandler+0x7a2>
      return;
 800e524:	bf00      	nop
 800e526:	e006      	b.n	800e536 <HAL_UART_IRQHandler+0x7a2>
    return;
 800e528:	bf00      	nop
 800e52a:	e004      	b.n	800e536 <HAL_UART_IRQHandler+0x7a2>
      return;
 800e52c:	bf00      	nop
 800e52e:	e002      	b.n	800e536 <HAL_UART_IRQHandler+0x7a2>
      return;
 800e530:	bf00      	nop
 800e532:	e000      	b.n	800e536 <HAL_UART_IRQHandler+0x7a2>
    return;
 800e534:	bf00      	nop
  }
}
 800e536:	37e8      	adds	r7, #232	@ 0xe8
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	effffffe 	.word	0xeffffffe

0800e540 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e540:	b480      	push	{r7}
 800e542:	b083      	sub	sp, #12
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e548:	bf00      	nop
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e570:	bf00      	nop
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	460b      	mov	r3, r1
 800e586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e588:	bf00      	nop
 800e58a:	370c      	adds	r7, #12
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e598:	b092      	sub	sp, #72	@ 0x48
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	689a      	ldr	r2, [r3, #8]
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	691b      	ldr	r3, [r3, #16]
 800e5ac:	431a      	orrs	r2, r3
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	431a      	orrs	r2, r3
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	69db      	ldr	r3, [r3, #28]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	4bbe      	ldr	r3, [pc, #760]	@ (800e8bc <UART_SetConfig+0x328>)
 800e5c4:	4013      	ands	r3, r2
 800e5c6:	697a      	ldr	r2, [r7, #20]
 800e5c8:	6812      	ldr	r2, [r2, #0]
 800e5ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e5cc:	430b      	orrs	r3, r1
 800e5ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	68da      	ldr	r2, [r3, #12]
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	430a      	orrs	r2, r1
 800e5e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	699b      	ldr	r3, [r3, #24]
 800e5ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4ab3      	ldr	r2, [pc, #716]	@ (800e8c0 <UART_SetConfig+0x32c>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d004      	beq.n	800e600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	6a1b      	ldr	r3, [r3, #32]
 800e5fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	689a      	ldr	r2, [r3, #8]
 800e606:	4baf      	ldr	r3, [pc, #700]	@ (800e8c4 <UART_SetConfig+0x330>)
 800e608:	4013      	ands	r3, r2
 800e60a:	697a      	ldr	r2, [r7, #20]
 800e60c:	6812      	ldr	r2, [r2, #0]
 800e60e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e610:	430b      	orrs	r3, r1
 800e612:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e61a:	f023 010f 	bic.w	r1, r3, #15
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	430a      	orrs	r2, r1
 800e628:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4aa6      	ldr	r2, [pc, #664]	@ (800e8c8 <UART_SetConfig+0x334>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d177      	bne.n	800e724 <UART_SetConfig+0x190>
 800e634:	4ba5      	ldr	r3, [pc, #660]	@ (800e8cc <UART_SetConfig+0x338>)
 800e636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e638:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e63c:	2b28      	cmp	r3, #40	@ 0x28
 800e63e:	d86d      	bhi.n	800e71c <UART_SetConfig+0x188>
 800e640:	a201      	add	r2, pc, #4	@ (adr r2, 800e648 <UART_SetConfig+0xb4>)
 800e642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e646:	bf00      	nop
 800e648:	0800e6ed 	.word	0x0800e6ed
 800e64c:	0800e71d 	.word	0x0800e71d
 800e650:	0800e71d 	.word	0x0800e71d
 800e654:	0800e71d 	.word	0x0800e71d
 800e658:	0800e71d 	.word	0x0800e71d
 800e65c:	0800e71d 	.word	0x0800e71d
 800e660:	0800e71d 	.word	0x0800e71d
 800e664:	0800e71d 	.word	0x0800e71d
 800e668:	0800e6f5 	.word	0x0800e6f5
 800e66c:	0800e71d 	.word	0x0800e71d
 800e670:	0800e71d 	.word	0x0800e71d
 800e674:	0800e71d 	.word	0x0800e71d
 800e678:	0800e71d 	.word	0x0800e71d
 800e67c:	0800e71d 	.word	0x0800e71d
 800e680:	0800e71d 	.word	0x0800e71d
 800e684:	0800e71d 	.word	0x0800e71d
 800e688:	0800e6fd 	.word	0x0800e6fd
 800e68c:	0800e71d 	.word	0x0800e71d
 800e690:	0800e71d 	.word	0x0800e71d
 800e694:	0800e71d 	.word	0x0800e71d
 800e698:	0800e71d 	.word	0x0800e71d
 800e69c:	0800e71d 	.word	0x0800e71d
 800e6a0:	0800e71d 	.word	0x0800e71d
 800e6a4:	0800e71d 	.word	0x0800e71d
 800e6a8:	0800e705 	.word	0x0800e705
 800e6ac:	0800e71d 	.word	0x0800e71d
 800e6b0:	0800e71d 	.word	0x0800e71d
 800e6b4:	0800e71d 	.word	0x0800e71d
 800e6b8:	0800e71d 	.word	0x0800e71d
 800e6bc:	0800e71d 	.word	0x0800e71d
 800e6c0:	0800e71d 	.word	0x0800e71d
 800e6c4:	0800e71d 	.word	0x0800e71d
 800e6c8:	0800e70d 	.word	0x0800e70d
 800e6cc:	0800e71d 	.word	0x0800e71d
 800e6d0:	0800e71d 	.word	0x0800e71d
 800e6d4:	0800e71d 	.word	0x0800e71d
 800e6d8:	0800e71d 	.word	0x0800e71d
 800e6dc:	0800e71d 	.word	0x0800e71d
 800e6e0:	0800e71d 	.word	0x0800e71d
 800e6e4:	0800e71d 	.word	0x0800e71d
 800e6e8:	0800e715 	.word	0x0800e715
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6f2:	e222      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e6f4:	2304      	movs	r3, #4
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e6fa:	e21e      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e6fc:	2308      	movs	r3, #8
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e702:	e21a      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e704:	2310      	movs	r3, #16
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e70a:	e216      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e70c:	2320      	movs	r3, #32
 800e70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e712:	e212      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e714:	2340      	movs	r3, #64	@ 0x40
 800e716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e71a:	e20e      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e71c:	2380      	movs	r3, #128	@ 0x80
 800e71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e722:	e20a      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4a69      	ldr	r2, [pc, #420]	@ (800e8d0 <UART_SetConfig+0x33c>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d130      	bne.n	800e790 <UART_SetConfig+0x1fc>
 800e72e:	4b67      	ldr	r3, [pc, #412]	@ (800e8cc <UART_SetConfig+0x338>)
 800e730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e732:	f003 0307 	and.w	r3, r3, #7
 800e736:	2b05      	cmp	r3, #5
 800e738:	d826      	bhi.n	800e788 <UART_SetConfig+0x1f4>
 800e73a:	a201      	add	r2, pc, #4	@ (adr r2, 800e740 <UART_SetConfig+0x1ac>)
 800e73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e740:	0800e759 	.word	0x0800e759
 800e744:	0800e761 	.word	0x0800e761
 800e748:	0800e769 	.word	0x0800e769
 800e74c:	0800e771 	.word	0x0800e771
 800e750:	0800e779 	.word	0x0800e779
 800e754:	0800e781 	.word	0x0800e781
 800e758:	2300      	movs	r3, #0
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e75e:	e1ec      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e760:	2304      	movs	r3, #4
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e766:	e1e8      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e768:	2308      	movs	r3, #8
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e76e:	e1e4      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e770:	2310      	movs	r3, #16
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e776:	e1e0      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e778:	2320      	movs	r3, #32
 800e77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e77e:	e1dc      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e780:	2340      	movs	r3, #64	@ 0x40
 800e782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e786:	e1d8      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e788:	2380      	movs	r3, #128	@ 0x80
 800e78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e78e:	e1d4      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a4f      	ldr	r2, [pc, #316]	@ (800e8d4 <UART_SetConfig+0x340>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d130      	bne.n	800e7fc <UART_SetConfig+0x268>
 800e79a:	4b4c      	ldr	r3, [pc, #304]	@ (800e8cc <UART_SetConfig+0x338>)
 800e79c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e79e:	f003 0307 	and.w	r3, r3, #7
 800e7a2:	2b05      	cmp	r3, #5
 800e7a4:	d826      	bhi.n	800e7f4 <UART_SetConfig+0x260>
 800e7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e7ac <UART_SetConfig+0x218>)
 800e7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7ac:	0800e7c5 	.word	0x0800e7c5
 800e7b0:	0800e7cd 	.word	0x0800e7cd
 800e7b4:	0800e7d5 	.word	0x0800e7d5
 800e7b8:	0800e7dd 	.word	0x0800e7dd
 800e7bc:	0800e7e5 	.word	0x0800e7e5
 800e7c0:	0800e7ed 	.word	0x0800e7ed
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ca:	e1b6      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e7cc:	2304      	movs	r3, #4
 800e7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7d2:	e1b2      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e7d4:	2308      	movs	r3, #8
 800e7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7da:	e1ae      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e7dc:	2310      	movs	r3, #16
 800e7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7e2:	e1aa      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e7e4:	2320      	movs	r3, #32
 800e7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7ea:	e1a6      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e7ec:	2340      	movs	r3, #64	@ 0x40
 800e7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7f2:	e1a2      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e7f4:	2380      	movs	r3, #128	@ 0x80
 800e7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e7fa:	e19e      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a35      	ldr	r2, [pc, #212]	@ (800e8d8 <UART_SetConfig+0x344>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d130      	bne.n	800e868 <UART_SetConfig+0x2d4>
 800e806:	4b31      	ldr	r3, [pc, #196]	@ (800e8cc <UART_SetConfig+0x338>)
 800e808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e80a:	f003 0307 	and.w	r3, r3, #7
 800e80e:	2b05      	cmp	r3, #5
 800e810:	d826      	bhi.n	800e860 <UART_SetConfig+0x2cc>
 800e812:	a201      	add	r2, pc, #4	@ (adr r2, 800e818 <UART_SetConfig+0x284>)
 800e814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e818:	0800e831 	.word	0x0800e831
 800e81c:	0800e839 	.word	0x0800e839
 800e820:	0800e841 	.word	0x0800e841
 800e824:	0800e849 	.word	0x0800e849
 800e828:	0800e851 	.word	0x0800e851
 800e82c:	0800e859 	.word	0x0800e859
 800e830:	2300      	movs	r3, #0
 800e832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e836:	e180      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e838:	2304      	movs	r3, #4
 800e83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e83e:	e17c      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e840:	2308      	movs	r3, #8
 800e842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e846:	e178      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e848:	2310      	movs	r3, #16
 800e84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e84e:	e174      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e850:	2320      	movs	r3, #32
 800e852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e856:	e170      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e858:	2340      	movs	r3, #64	@ 0x40
 800e85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e85e:	e16c      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e860:	2380      	movs	r3, #128	@ 0x80
 800e862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e866:	e168      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a1b      	ldr	r2, [pc, #108]	@ (800e8dc <UART_SetConfig+0x348>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d142      	bne.n	800e8f8 <UART_SetConfig+0x364>
 800e872:	4b16      	ldr	r3, [pc, #88]	@ (800e8cc <UART_SetConfig+0x338>)
 800e874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e876:	f003 0307 	and.w	r3, r3, #7
 800e87a:	2b05      	cmp	r3, #5
 800e87c:	d838      	bhi.n	800e8f0 <UART_SetConfig+0x35c>
 800e87e:	a201      	add	r2, pc, #4	@ (adr r2, 800e884 <UART_SetConfig+0x2f0>)
 800e880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e884:	0800e89d 	.word	0x0800e89d
 800e888:	0800e8a5 	.word	0x0800e8a5
 800e88c:	0800e8ad 	.word	0x0800e8ad
 800e890:	0800e8b5 	.word	0x0800e8b5
 800e894:	0800e8e1 	.word	0x0800e8e1
 800e898:	0800e8e9 	.word	0x0800e8e9
 800e89c:	2300      	movs	r3, #0
 800e89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8a2:	e14a      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e8a4:	2304      	movs	r3, #4
 800e8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8aa:	e146      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e8ac:	2308      	movs	r3, #8
 800e8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8b2:	e142      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e8b4:	2310      	movs	r3, #16
 800e8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ba:	e13e      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e8bc:	cfff69f3 	.word	0xcfff69f3
 800e8c0:	58000c00 	.word	0x58000c00
 800e8c4:	11fff4ff 	.word	0x11fff4ff
 800e8c8:	40011000 	.word	0x40011000
 800e8cc:	58024400 	.word	0x58024400
 800e8d0:	40004400 	.word	0x40004400
 800e8d4:	40004800 	.word	0x40004800
 800e8d8:	40004c00 	.word	0x40004c00
 800e8dc:	40005000 	.word	0x40005000
 800e8e0:	2320      	movs	r3, #32
 800e8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8e6:	e128      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e8e8:	2340      	movs	r3, #64	@ 0x40
 800e8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8ee:	e124      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e8f0:	2380      	movs	r3, #128	@ 0x80
 800e8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e8f6:	e120      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4acb      	ldr	r2, [pc, #812]	@ (800ec2c <UART_SetConfig+0x698>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d176      	bne.n	800e9f0 <UART_SetConfig+0x45c>
 800e902:	4bcb      	ldr	r3, [pc, #812]	@ (800ec30 <UART_SetConfig+0x69c>)
 800e904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e906:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e90a:	2b28      	cmp	r3, #40	@ 0x28
 800e90c:	d86c      	bhi.n	800e9e8 <UART_SetConfig+0x454>
 800e90e:	a201      	add	r2, pc, #4	@ (adr r2, 800e914 <UART_SetConfig+0x380>)
 800e910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e914:	0800e9b9 	.word	0x0800e9b9
 800e918:	0800e9e9 	.word	0x0800e9e9
 800e91c:	0800e9e9 	.word	0x0800e9e9
 800e920:	0800e9e9 	.word	0x0800e9e9
 800e924:	0800e9e9 	.word	0x0800e9e9
 800e928:	0800e9e9 	.word	0x0800e9e9
 800e92c:	0800e9e9 	.word	0x0800e9e9
 800e930:	0800e9e9 	.word	0x0800e9e9
 800e934:	0800e9c1 	.word	0x0800e9c1
 800e938:	0800e9e9 	.word	0x0800e9e9
 800e93c:	0800e9e9 	.word	0x0800e9e9
 800e940:	0800e9e9 	.word	0x0800e9e9
 800e944:	0800e9e9 	.word	0x0800e9e9
 800e948:	0800e9e9 	.word	0x0800e9e9
 800e94c:	0800e9e9 	.word	0x0800e9e9
 800e950:	0800e9e9 	.word	0x0800e9e9
 800e954:	0800e9c9 	.word	0x0800e9c9
 800e958:	0800e9e9 	.word	0x0800e9e9
 800e95c:	0800e9e9 	.word	0x0800e9e9
 800e960:	0800e9e9 	.word	0x0800e9e9
 800e964:	0800e9e9 	.word	0x0800e9e9
 800e968:	0800e9e9 	.word	0x0800e9e9
 800e96c:	0800e9e9 	.word	0x0800e9e9
 800e970:	0800e9e9 	.word	0x0800e9e9
 800e974:	0800e9d1 	.word	0x0800e9d1
 800e978:	0800e9e9 	.word	0x0800e9e9
 800e97c:	0800e9e9 	.word	0x0800e9e9
 800e980:	0800e9e9 	.word	0x0800e9e9
 800e984:	0800e9e9 	.word	0x0800e9e9
 800e988:	0800e9e9 	.word	0x0800e9e9
 800e98c:	0800e9e9 	.word	0x0800e9e9
 800e990:	0800e9e9 	.word	0x0800e9e9
 800e994:	0800e9d9 	.word	0x0800e9d9
 800e998:	0800e9e9 	.word	0x0800e9e9
 800e99c:	0800e9e9 	.word	0x0800e9e9
 800e9a0:	0800e9e9 	.word	0x0800e9e9
 800e9a4:	0800e9e9 	.word	0x0800e9e9
 800e9a8:	0800e9e9 	.word	0x0800e9e9
 800e9ac:	0800e9e9 	.word	0x0800e9e9
 800e9b0:	0800e9e9 	.word	0x0800e9e9
 800e9b4:	0800e9e1 	.word	0x0800e9e1
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9be:	e0bc      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e9c0:	2304      	movs	r3, #4
 800e9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9c6:	e0b8      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e9c8:	2308      	movs	r3, #8
 800e9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ce:	e0b4      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e9d0:	2310      	movs	r3, #16
 800e9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9d6:	e0b0      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e9d8:	2320      	movs	r3, #32
 800e9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9de:	e0ac      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e9e0:	2340      	movs	r3, #64	@ 0x40
 800e9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9e6:	e0a8      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e9e8:	2380      	movs	r3, #128	@ 0x80
 800e9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e9ee:	e0a4      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a8f      	ldr	r2, [pc, #572]	@ (800ec34 <UART_SetConfig+0x6a0>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d130      	bne.n	800ea5c <UART_SetConfig+0x4c8>
 800e9fa:	4b8d      	ldr	r3, [pc, #564]	@ (800ec30 <UART_SetConfig+0x69c>)
 800e9fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9fe:	f003 0307 	and.w	r3, r3, #7
 800ea02:	2b05      	cmp	r3, #5
 800ea04:	d826      	bhi.n	800ea54 <UART_SetConfig+0x4c0>
 800ea06:	a201      	add	r2, pc, #4	@ (adr r2, 800ea0c <UART_SetConfig+0x478>)
 800ea08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea0c:	0800ea25 	.word	0x0800ea25
 800ea10:	0800ea2d 	.word	0x0800ea2d
 800ea14:	0800ea35 	.word	0x0800ea35
 800ea18:	0800ea3d 	.word	0x0800ea3d
 800ea1c:	0800ea45 	.word	0x0800ea45
 800ea20:	0800ea4d 	.word	0x0800ea4d
 800ea24:	2300      	movs	r3, #0
 800ea26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea2a:	e086      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800ea2c:	2304      	movs	r3, #4
 800ea2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea32:	e082      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800ea34:	2308      	movs	r3, #8
 800ea36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea3a:	e07e      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800ea3c:	2310      	movs	r3, #16
 800ea3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea42:	e07a      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800ea44:	2320      	movs	r3, #32
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea4a:	e076      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800ea4c:	2340      	movs	r3, #64	@ 0x40
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea52:	e072      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800ea54:	2380      	movs	r3, #128	@ 0x80
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea5a:	e06e      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a75      	ldr	r2, [pc, #468]	@ (800ec38 <UART_SetConfig+0x6a4>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d130      	bne.n	800eac8 <UART_SetConfig+0x534>
 800ea66:	4b72      	ldr	r3, [pc, #456]	@ (800ec30 <UART_SetConfig+0x69c>)
 800ea68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea6a:	f003 0307 	and.w	r3, r3, #7
 800ea6e:	2b05      	cmp	r3, #5
 800ea70:	d826      	bhi.n	800eac0 <UART_SetConfig+0x52c>
 800ea72:	a201      	add	r2, pc, #4	@ (adr r2, 800ea78 <UART_SetConfig+0x4e4>)
 800ea74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea78:	0800ea91 	.word	0x0800ea91
 800ea7c:	0800ea99 	.word	0x0800ea99
 800ea80:	0800eaa1 	.word	0x0800eaa1
 800ea84:	0800eaa9 	.word	0x0800eaa9
 800ea88:	0800eab1 	.word	0x0800eab1
 800ea8c:	0800eab9 	.word	0x0800eab9
 800ea90:	2300      	movs	r3, #0
 800ea92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea96:	e050      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800ea98:	2304      	movs	r3, #4
 800ea9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ea9e:	e04c      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eaa0:	2308      	movs	r3, #8
 800eaa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaa6:	e048      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eaa8:	2310      	movs	r3, #16
 800eaaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eaae:	e044      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eab0:	2320      	movs	r3, #32
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eab6:	e040      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eab8:	2340      	movs	r3, #64	@ 0x40
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eabe:	e03c      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eac0:	2380      	movs	r3, #128	@ 0x80
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eac6:	e038      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4a5b      	ldr	r2, [pc, #364]	@ (800ec3c <UART_SetConfig+0x6a8>)
 800eace:	4293      	cmp	r3, r2
 800ead0:	d130      	bne.n	800eb34 <UART_SetConfig+0x5a0>
 800ead2:	4b57      	ldr	r3, [pc, #348]	@ (800ec30 <UART_SetConfig+0x69c>)
 800ead4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ead6:	f003 0307 	and.w	r3, r3, #7
 800eada:	2b05      	cmp	r3, #5
 800eadc:	d826      	bhi.n	800eb2c <UART_SetConfig+0x598>
 800eade:	a201      	add	r2, pc, #4	@ (adr r2, 800eae4 <UART_SetConfig+0x550>)
 800eae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae4:	0800eafd 	.word	0x0800eafd
 800eae8:	0800eb05 	.word	0x0800eb05
 800eaec:	0800eb0d 	.word	0x0800eb0d
 800eaf0:	0800eb15 	.word	0x0800eb15
 800eaf4:	0800eb1d 	.word	0x0800eb1d
 800eaf8:	0800eb25 	.word	0x0800eb25
 800eafc:	2302      	movs	r3, #2
 800eafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb02:	e01a      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eb04:	2304      	movs	r3, #4
 800eb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb0a:	e016      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eb0c:	2308      	movs	r3, #8
 800eb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb12:	e012      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eb14:	2310      	movs	r3, #16
 800eb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb1a:	e00e      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eb1c:	2320      	movs	r3, #32
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb22:	e00a      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eb24:	2340      	movs	r3, #64	@ 0x40
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb2a:	e006      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eb2c:	2380      	movs	r3, #128	@ 0x80
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb32:	e002      	b.n	800eb3a <UART_SetConfig+0x5a6>
 800eb34:	2380      	movs	r3, #128	@ 0x80
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	4a3f      	ldr	r2, [pc, #252]	@ (800ec3c <UART_SetConfig+0x6a8>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	f040 80f8 	bne.w	800ed36 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800eb46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eb4a:	2b20      	cmp	r3, #32
 800eb4c:	dc46      	bgt.n	800ebdc <UART_SetConfig+0x648>
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	f2c0 8082 	blt.w	800ec58 <UART_SetConfig+0x6c4>
 800eb54:	3b02      	subs	r3, #2
 800eb56:	2b1e      	cmp	r3, #30
 800eb58:	d87e      	bhi.n	800ec58 <UART_SetConfig+0x6c4>
 800eb5a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb60 <UART_SetConfig+0x5cc>)
 800eb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb60:	0800ebe3 	.word	0x0800ebe3
 800eb64:	0800ec59 	.word	0x0800ec59
 800eb68:	0800ebeb 	.word	0x0800ebeb
 800eb6c:	0800ec59 	.word	0x0800ec59
 800eb70:	0800ec59 	.word	0x0800ec59
 800eb74:	0800ec59 	.word	0x0800ec59
 800eb78:	0800ebfb 	.word	0x0800ebfb
 800eb7c:	0800ec59 	.word	0x0800ec59
 800eb80:	0800ec59 	.word	0x0800ec59
 800eb84:	0800ec59 	.word	0x0800ec59
 800eb88:	0800ec59 	.word	0x0800ec59
 800eb8c:	0800ec59 	.word	0x0800ec59
 800eb90:	0800ec59 	.word	0x0800ec59
 800eb94:	0800ec59 	.word	0x0800ec59
 800eb98:	0800ec0b 	.word	0x0800ec0b
 800eb9c:	0800ec59 	.word	0x0800ec59
 800eba0:	0800ec59 	.word	0x0800ec59
 800eba4:	0800ec59 	.word	0x0800ec59
 800eba8:	0800ec59 	.word	0x0800ec59
 800ebac:	0800ec59 	.word	0x0800ec59
 800ebb0:	0800ec59 	.word	0x0800ec59
 800ebb4:	0800ec59 	.word	0x0800ec59
 800ebb8:	0800ec59 	.word	0x0800ec59
 800ebbc:	0800ec59 	.word	0x0800ec59
 800ebc0:	0800ec59 	.word	0x0800ec59
 800ebc4:	0800ec59 	.word	0x0800ec59
 800ebc8:	0800ec59 	.word	0x0800ec59
 800ebcc:	0800ec59 	.word	0x0800ec59
 800ebd0:	0800ec59 	.word	0x0800ec59
 800ebd4:	0800ec59 	.word	0x0800ec59
 800ebd8:	0800ec4b 	.word	0x0800ec4b
 800ebdc:	2b40      	cmp	r3, #64	@ 0x40
 800ebde:	d037      	beq.n	800ec50 <UART_SetConfig+0x6bc>
 800ebe0:	e03a      	b.n	800ec58 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ebe2:	f7fe f8d1 	bl	800cd88 <HAL_RCCEx_GetD3PCLK1Freq>
 800ebe6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ebe8:	e03c      	b.n	800ec64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fe f8e0 	bl	800cdb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ebf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ebf8:	e034      	b.n	800ec64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebfa:	f107 0318 	add.w	r3, r7, #24
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe fa2c 	bl	800d05c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec08:	e02c      	b.n	800ec64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec0a:	4b09      	ldr	r3, [pc, #36]	@ (800ec30 <UART_SetConfig+0x69c>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f003 0320 	and.w	r3, r3, #32
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d016      	beq.n	800ec44 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec16:	4b06      	ldr	r3, [pc, #24]	@ (800ec30 <UART_SetConfig+0x69c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	08db      	lsrs	r3, r3, #3
 800ec1c:	f003 0303 	and.w	r3, r3, #3
 800ec20:	4a07      	ldr	r2, [pc, #28]	@ (800ec40 <UART_SetConfig+0x6ac>)
 800ec22:	fa22 f303 	lsr.w	r3, r2, r3
 800ec26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec28:	e01c      	b.n	800ec64 <UART_SetConfig+0x6d0>
 800ec2a:	bf00      	nop
 800ec2c:	40011400 	.word	0x40011400
 800ec30:	58024400 	.word	0x58024400
 800ec34:	40007800 	.word	0x40007800
 800ec38:	40007c00 	.word	0x40007c00
 800ec3c:	58000c00 	.word	0x58000c00
 800ec40:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ec44:	4b9d      	ldr	r3, [pc, #628]	@ (800eebc <UART_SetConfig+0x928>)
 800ec46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec48:	e00c      	b.n	800ec64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec4a:	4b9d      	ldr	r3, [pc, #628]	@ (800eec0 <UART_SetConfig+0x92c>)
 800ec4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec4e:	e009      	b.n	800ec64 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec56:	e005      	b.n	800ec64 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ec62:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ec64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 81de 	beq.w	800f028 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec70:	4a94      	ldr	r2, [pc, #592]	@ (800eec4 <UART_SetConfig+0x930>)
 800ec72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec76:	461a      	mov	r2, r3
 800ec78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec7e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	4613      	mov	r3, r2
 800ec86:	005b      	lsls	r3, r3, #1
 800ec88:	4413      	add	r3, r2
 800ec8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d305      	bcc.n	800ec9c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ec96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d903      	bls.n	800eca4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eca2:	e1c1      	b.n	800f028 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eca6:	2200      	movs	r2, #0
 800eca8:	60bb      	str	r3, [r7, #8]
 800ecaa:	60fa      	str	r2, [r7, #12]
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb0:	4a84      	ldr	r2, [pc, #528]	@ (800eec4 <UART_SetConfig+0x930>)
 800ecb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	2200      	movs	r2, #0
 800ecba:	603b      	str	r3, [r7, #0]
 800ecbc:	607a      	str	r2, [r7, #4]
 800ecbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ecc6:	f7f1 fe2d 	bl	8000924 <__aeabi_uldivmod>
 800ecca:	4602      	mov	r2, r0
 800eccc:	460b      	mov	r3, r1
 800ecce:	4610      	mov	r0, r2
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	f04f 0200 	mov.w	r2, #0
 800ecd6:	f04f 0300 	mov.w	r3, #0
 800ecda:	020b      	lsls	r3, r1, #8
 800ecdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ece0:	0202      	lsls	r2, r0, #8
 800ece2:	6979      	ldr	r1, [r7, #20]
 800ece4:	6849      	ldr	r1, [r1, #4]
 800ece6:	0849      	lsrs	r1, r1, #1
 800ece8:	2000      	movs	r0, #0
 800ecea:	460c      	mov	r4, r1
 800ecec:	4605      	mov	r5, r0
 800ecee:	eb12 0804 	adds.w	r8, r2, r4
 800ecf2:	eb43 0905 	adc.w	r9, r3, r5
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	469a      	mov	sl, r3
 800ecfe:	4693      	mov	fp, r2
 800ed00:	4652      	mov	r2, sl
 800ed02:	465b      	mov	r3, fp
 800ed04:	4640      	mov	r0, r8
 800ed06:	4649      	mov	r1, r9
 800ed08:	f7f1 fe0c 	bl	8000924 <__aeabi_uldivmod>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	4613      	mov	r3, r2
 800ed12:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ed14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed1a:	d308      	bcc.n	800ed2e <UART_SetConfig+0x79a>
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ed22:	d204      	bcs.n	800ed2e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed2a:	60da      	str	r2, [r3, #12]
 800ed2c:	e17c      	b.n	800f028 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ed34:	e178      	b.n	800f028 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	69db      	ldr	r3, [r3, #28]
 800ed3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed3e:	f040 80c5 	bne.w	800eecc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ed42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ed46:	2b20      	cmp	r3, #32
 800ed48:	dc48      	bgt.n	800eddc <UART_SetConfig+0x848>
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	db7b      	blt.n	800ee46 <UART_SetConfig+0x8b2>
 800ed4e:	2b20      	cmp	r3, #32
 800ed50:	d879      	bhi.n	800ee46 <UART_SetConfig+0x8b2>
 800ed52:	a201      	add	r2, pc, #4	@ (adr r2, 800ed58 <UART_SetConfig+0x7c4>)
 800ed54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed58:	0800ede3 	.word	0x0800ede3
 800ed5c:	0800edeb 	.word	0x0800edeb
 800ed60:	0800ee47 	.word	0x0800ee47
 800ed64:	0800ee47 	.word	0x0800ee47
 800ed68:	0800edf3 	.word	0x0800edf3
 800ed6c:	0800ee47 	.word	0x0800ee47
 800ed70:	0800ee47 	.word	0x0800ee47
 800ed74:	0800ee47 	.word	0x0800ee47
 800ed78:	0800ee03 	.word	0x0800ee03
 800ed7c:	0800ee47 	.word	0x0800ee47
 800ed80:	0800ee47 	.word	0x0800ee47
 800ed84:	0800ee47 	.word	0x0800ee47
 800ed88:	0800ee47 	.word	0x0800ee47
 800ed8c:	0800ee47 	.word	0x0800ee47
 800ed90:	0800ee47 	.word	0x0800ee47
 800ed94:	0800ee47 	.word	0x0800ee47
 800ed98:	0800ee13 	.word	0x0800ee13
 800ed9c:	0800ee47 	.word	0x0800ee47
 800eda0:	0800ee47 	.word	0x0800ee47
 800eda4:	0800ee47 	.word	0x0800ee47
 800eda8:	0800ee47 	.word	0x0800ee47
 800edac:	0800ee47 	.word	0x0800ee47
 800edb0:	0800ee47 	.word	0x0800ee47
 800edb4:	0800ee47 	.word	0x0800ee47
 800edb8:	0800ee47 	.word	0x0800ee47
 800edbc:	0800ee47 	.word	0x0800ee47
 800edc0:	0800ee47 	.word	0x0800ee47
 800edc4:	0800ee47 	.word	0x0800ee47
 800edc8:	0800ee47 	.word	0x0800ee47
 800edcc:	0800ee47 	.word	0x0800ee47
 800edd0:	0800ee47 	.word	0x0800ee47
 800edd4:	0800ee47 	.word	0x0800ee47
 800edd8:	0800ee39 	.word	0x0800ee39
 800eddc:	2b40      	cmp	r3, #64	@ 0x40
 800edde:	d02e      	beq.n	800ee3e <UART_SetConfig+0x8aa>
 800ede0:	e031      	b.n	800ee46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ede2:	f7fc fd59 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800ede6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ede8:	e033      	b.n	800ee52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800edea:	f7fc fd6b 	bl	800b8c4 <HAL_RCC_GetPCLK2Freq>
 800edee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800edf0:	e02f      	b.n	800ee52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fd ffdc 	bl	800cdb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800edfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee00:	e027      	b.n	800ee52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee02:	f107 0318 	add.w	r3, r7, #24
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fe f928 	bl	800d05c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee10:	e01f      	b.n	800ee52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee12:	4b2d      	ldr	r3, [pc, #180]	@ (800eec8 <UART_SetConfig+0x934>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f003 0320 	and.w	r3, r3, #32
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d009      	beq.n	800ee32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee1e:	4b2a      	ldr	r3, [pc, #168]	@ (800eec8 <UART_SetConfig+0x934>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	08db      	lsrs	r3, r3, #3
 800ee24:	f003 0303 	and.w	r3, r3, #3
 800ee28:	4a24      	ldr	r2, [pc, #144]	@ (800eebc <UART_SetConfig+0x928>)
 800ee2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee30:	e00f      	b.n	800ee52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ee32:	4b22      	ldr	r3, [pc, #136]	@ (800eebc <UART_SetConfig+0x928>)
 800ee34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee36:	e00c      	b.n	800ee52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee38:	4b21      	ldr	r3, [pc, #132]	@ (800eec0 <UART_SetConfig+0x92c>)
 800ee3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee3c:	e009      	b.n	800ee52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee44:	e005      	b.n	800ee52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ee46:	2300      	movs	r3, #0
 800ee48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ee50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ee52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f000 80e7 	beq.w	800f028 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee5e:	4a19      	ldr	r2, [pc, #100]	@ (800eec4 <UART_SetConfig+0x930>)
 800ee60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee64:	461a      	mov	r2, r3
 800ee66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee68:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee6c:	005a      	lsls	r2, r3, #1
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	085b      	lsrs	r3, r3, #1
 800ee74:	441a      	add	r2, r3
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee82:	2b0f      	cmp	r3, #15
 800ee84:	d916      	bls.n	800eeb4 <UART_SetConfig+0x920>
 800ee86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee8c:	d212      	bcs.n	800eeb4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ee8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	f023 030f 	bic.w	r3, r3, #15
 800ee96:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ee98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9a:	085b      	lsrs	r3, r3, #1
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	f003 0307 	and.w	r3, r3, #7
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800eea6:	4313      	orrs	r3, r2
 800eea8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800eeb0:	60da      	str	r2, [r3, #12]
 800eeb2:	e0b9      	b.n	800f028 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800eeba:	e0b5      	b.n	800f028 <UART_SetConfig+0xa94>
 800eebc:	03d09000 	.word	0x03d09000
 800eec0:	003d0900 	.word	0x003d0900
 800eec4:	0801724c 	.word	0x0801724c
 800eec8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800eecc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800eed0:	2b20      	cmp	r3, #32
 800eed2:	dc49      	bgt.n	800ef68 <UART_SetConfig+0x9d4>
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	db7c      	blt.n	800efd2 <UART_SetConfig+0xa3e>
 800eed8:	2b20      	cmp	r3, #32
 800eeda:	d87a      	bhi.n	800efd2 <UART_SetConfig+0xa3e>
 800eedc:	a201      	add	r2, pc, #4	@ (adr r2, 800eee4 <UART_SetConfig+0x950>)
 800eede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee2:	bf00      	nop
 800eee4:	0800ef6f 	.word	0x0800ef6f
 800eee8:	0800ef77 	.word	0x0800ef77
 800eeec:	0800efd3 	.word	0x0800efd3
 800eef0:	0800efd3 	.word	0x0800efd3
 800eef4:	0800ef7f 	.word	0x0800ef7f
 800eef8:	0800efd3 	.word	0x0800efd3
 800eefc:	0800efd3 	.word	0x0800efd3
 800ef00:	0800efd3 	.word	0x0800efd3
 800ef04:	0800ef8f 	.word	0x0800ef8f
 800ef08:	0800efd3 	.word	0x0800efd3
 800ef0c:	0800efd3 	.word	0x0800efd3
 800ef10:	0800efd3 	.word	0x0800efd3
 800ef14:	0800efd3 	.word	0x0800efd3
 800ef18:	0800efd3 	.word	0x0800efd3
 800ef1c:	0800efd3 	.word	0x0800efd3
 800ef20:	0800efd3 	.word	0x0800efd3
 800ef24:	0800ef9f 	.word	0x0800ef9f
 800ef28:	0800efd3 	.word	0x0800efd3
 800ef2c:	0800efd3 	.word	0x0800efd3
 800ef30:	0800efd3 	.word	0x0800efd3
 800ef34:	0800efd3 	.word	0x0800efd3
 800ef38:	0800efd3 	.word	0x0800efd3
 800ef3c:	0800efd3 	.word	0x0800efd3
 800ef40:	0800efd3 	.word	0x0800efd3
 800ef44:	0800efd3 	.word	0x0800efd3
 800ef48:	0800efd3 	.word	0x0800efd3
 800ef4c:	0800efd3 	.word	0x0800efd3
 800ef50:	0800efd3 	.word	0x0800efd3
 800ef54:	0800efd3 	.word	0x0800efd3
 800ef58:	0800efd3 	.word	0x0800efd3
 800ef5c:	0800efd3 	.word	0x0800efd3
 800ef60:	0800efd3 	.word	0x0800efd3
 800ef64:	0800efc5 	.word	0x0800efc5
 800ef68:	2b40      	cmp	r3, #64	@ 0x40
 800ef6a:	d02e      	beq.n	800efca <UART_SetConfig+0xa36>
 800ef6c:	e031      	b.n	800efd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef6e:	f7fc fc93 	bl	800b898 <HAL_RCC_GetPCLK1Freq>
 800ef72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ef74:	e033      	b.n	800efde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef76:	f7fc fca5 	bl	800b8c4 <HAL_RCC_GetPCLK2Freq>
 800ef7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ef7c:	e02f      	b.n	800efde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fd ff16 	bl	800cdb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef8c:	e027      	b.n	800efde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef8e:	f107 0318 	add.w	r3, r7, #24
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7fe f862 	bl	800d05c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef9c:	e01f      	b.n	800efde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef9e:	4b2d      	ldr	r3, [pc, #180]	@ (800f054 <UART_SetConfig+0xac0>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f003 0320 	and.w	r3, r3, #32
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d009      	beq.n	800efbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efaa:	4b2a      	ldr	r3, [pc, #168]	@ (800f054 <UART_SetConfig+0xac0>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	08db      	lsrs	r3, r3, #3
 800efb0:	f003 0303 	and.w	r3, r3, #3
 800efb4:	4a28      	ldr	r2, [pc, #160]	@ (800f058 <UART_SetConfig+0xac4>)
 800efb6:	fa22 f303 	lsr.w	r3, r2, r3
 800efba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efbc:	e00f      	b.n	800efde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800efbe:	4b26      	ldr	r3, [pc, #152]	@ (800f058 <UART_SetConfig+0xac4>)
 800efc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efc2:	e00c      	b.n	800efde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efc4:	4b25      	ldr	r3, [pc, #148]	@ (800f05c <UART_SetConfig+0xac8>)
 800efc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efc8:	e009      	b.n	800efde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800efce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efd0:	e005      	b.n	800efde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800efd2:	2300      	movs	r3, #0
 800efd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800efdc:	bf00      	nop
    }

    if (pclk != 0U)
 800efde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d021      	beq.n	800f028 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe8:	4a1d      	ldr	r2, [pc, #116]	@ (800f060 <UART_SetConfig+0xacc>)
 800efea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efee:	461a      	mov	r2, r3
 800eff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eff2:	fbb3 f2f2 	udiv	r2, r3, r2
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	085b      	lsrs	r3, r3, #1
 800effc:	441a      	add	r2, r3
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	fbb2 f3f3 	udiv	r3, r2, r3
 800f006:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f00a:	2b0f      	cmp	r3, #15
 800f00c:	d909      	bls.n	800f022 <UART_SetConfig+0xa8e>
 800f00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f014:	d205      	bcs.n	800f022 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f018:	b29a      	uxth	r2, r3
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	60da      	str	r2, [r3, #12]
 800f020:	e002      	b.n	800f028 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f022:	2301      	movs	r3, #1
 800f024:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	2201      	movs	r2, #1
 800f034:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	2200      	movs	r2, #0
 800f03c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	2200      	movs	r2, #0
 800f042:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f044:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3748      	adds	r7, #72	@ 0x48
 800f04c:	46bd      	mov	sp, r7
 800f04e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f052:	bf00      	nop
 800f054:	58024400 	.word	0x58024400
 800f058:	03d09000 	.word	0x03d09000
 800f05c:	003d0900 	.word	0x003d0900
 800f060:	0801724c 	.word	0x0801724c

0800f064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f070:	f003 0308 	and.w	r3, r3, #8
 800f074:	2b00      	cmp	r3, #0
 800f076:	d00a      	beq.n	800f08e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	430a      	orrs	r2, r1
 800f08c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f092:	f003 0301 	and.w	r3, r3, #1
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00a      	beq.n	800f0b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0b4:	f003 0302 	and.w	r3, r3, #2
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00a      	beq.n	800f0d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	685b      	ldr	r3, [r3, #4]
 800f0c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	430a      	orrs	r2, r1
 800f0d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0d6:	f003 0304 	and.w	r3, r3, #4
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00a      	beq.n	800f0f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	430a      	orrs	r2, r1
 800f0f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0f8:	f003 0310 	and.w	r3, r3, #16
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d00a      	beq.n	800f116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	430a      	orrs	r2, r1
 800f114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f11a:	f003 0320 	and.w	r3, r3, #32
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00a      	beq.n	800f138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	430a      	orrs	r2, r1
 800f136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f140:	2b00      	cmp	r3, #0
 800f142:	d01a      	beq.n	800f17a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	430a      	orrs	r2, r1
 800f158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f15e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f162:	d10a      	bne.n	800f17a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	430a      	orrs	r2, r1
 800f178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f182:	2b00      	cmp	r3, #0
 800f184:	d00a      	beq.n	800f19c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	430a      	orrs	r2, r1
 800f19a:	605a      	str	r2, [r3, #4]
  }
}
 800f19c:	bf00      	nop
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b098      	sub	sp, #96	@ 0x60
 800f1ac:	af02      	add	r7, sp, #8
 800f1ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f1b8:	f7f6 fff8 	bl	80061ac <HAL_GetTick>
 800f1bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f003 0308 	and.w	r3, r3, #8
 800f1c8:	2b08      	cmp	r3, #8
 800f1ca:	d12f      	bne.n	800f22c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f1d0:	9300      	str	r3, [sp, #0]
 800f1d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 f88e 	bl	800f2fc <UART_WaitOnFlagUntilTimeout>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d022      	beq.n	800f22c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ee:	e853 3f00 	ldrex	r3, [r3]
 800f1f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f1fa:	653b      	str	r3, [r7, #80]	@ 0x50
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	461a      	mov	r2, r3
 800f202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f204:	647b      	str	r3, [r7, #68]	@ 0x44
 800f206:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f20a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f20c:	e841 2300 	strex	r3, r2, [r1]
 800f210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f214:	2b00      	cmp	r3, #0
 800f216:	d1e6      	bne.n	800f1e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2220      	movs	r2, #32
 800f21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f228:	2303      	movs	r3, #3
 800f22a:	e063      	b.n	800f2f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f003 0304 	and.w	r3, r3, #4
 800f236:	2b04      	cmp	r3, #4
 800f238:	d149      	bne.n	800f2ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f23a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f23e:	9300      	str	r3, [sp, #0]
 800f240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f242:	2200      	movs	r2, #0
 800f244:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f857 	bl	800f2fc <UART_WaitOnFlagUntilTimeout>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	d03c      	beq.n	800f2ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25c:	e853 3f00 	ldrex	r3, [r3]
 800f260:	623b      	str	r3, [r7, #32]
   return(result);
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f268:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	461a      	mov	r2, r3
 800f270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f272:	633b      	str	r3, [r7, #48]	@ 0x30
 800f274:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f27a:	e841 2300 	strex	r3, r2, [r1]
 800f27e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1e6      	bne.n	800f254 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	3308      	adds	r3, #8
 800f28c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f28e:	693b      	ldr	r3, [r7, #16]
 800f290:	e853 3f00 	ldrex	r3, [r3]
 800f294:	60fb      	str	r3, [r7, #12]
   return(result);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f023 0301 	bic.w	r3, r3, #1
 800f29c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	3308      	adds	r3, #8
 800f2a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f2a6:	61fa      	str	r2, [r7, #28]
 800f2a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2aa:	69b9      	ldr	r1, [r7, #24]
 800f2ac:	69fa      	ldr	r2, [r7, #28]
 800f2ae:	e841 2300 	strex	r3, r2, [r1]
 800f2b2:	617b      	str	r3, [r7, #20]
   return(result);
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1e5      	bne.n	800f286 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2220      	movs	r2, #32
 800f2be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f2ca:	2303      	movs	r3, #3
 800f2cc:	e012      	b.n	800f2f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2220      	movs	r2, #32
 800f2d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2220      	movs	r2, #32
 800f2da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f2f2:	2300      	movs	r3, #0
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3758      	adds	r7, #88	@ 0x58
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	603b      	str	r3, [r7, #0]
 800f308:	4613      	mov	r3, r2
 800f30a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f30c:	e04f      	b.n	800f3ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f314:	d04b      	beq.n	800f3ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f316:	f7f6 ff49 	bl	80061ac <HAL_GetTick>
 800f31a:	4602      	mov	r2, r0
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	1ad3      	subs	r3, r2, r3
 800f320:	69ba      	ldr	r2, [r7, #24]
 800f322:	429a      	cmp	r2, r3
 800f324:	d302      	bcc.n	800f32c <UART_WaitOnFlagUntilTimeout+0x30>
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f32c:	2303      	movs	r3, #3
 800f32e:	e04e      	b.n	800f3ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f003 0304 	and.w	r3, r3, #4
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d037      	beq.n	800f3ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	2b80      	cmp	r3, #128	@ 0x80
 800f342:	d034      	beq.n	800f3ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	2b40      	cmp	r3, #64	@ 0x40
 800f348:	d031      	beq.n	800f3ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	69db      	ldr	r3, [r3, #28]
 800f350:	f003 0308 	and.w	r3, r3, #8
 800f354:	2b08      	cmp	r3, #8
 800f356:	d110      	bne.n	800f37a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2208      	movs	r2, #8
 800f35e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f000 f921 	bl	800f5a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2208      	movs	r2, #8
 800f36a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2200      	movs	r2, #0
 800f372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f376:	2301      	movs	r3, #1
 800f378:	e029      	b.n	800f3ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	69db      	ldr	r3, [r3, #28]
 800f380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f388:	d111      	bne.n	800f3ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 f907 	bl	800f5a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2220      	movs	r2, #32
 800f39e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	e00f      	b.n	800f3ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	69da      	ldr	r2, [r3, #28]
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	4013      	ands	r3, r2
 800f3b8:	68ba      	ldr	r2, [r7, #8]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	bf0c      	ite	eq
 800f3be:	2301      	moveq	r3, #1
 800f3c0:	2300      	movne	r3, #0
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	79fb      	ldrb	r3, [r7, #7]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d0a0      	beq.n	800f30e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f3cc:	2300      	movs	r3, #0
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
	...

0800f3d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b096      	sub	sp, #88	@ 0x58
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	88fa      	ldrh	r2, [r7, #6]
 800f3f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2222      	movs	r2, #34	@ 0x22
 800f400:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d02d      	beq.n	800f46a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f414:	4a40      	ldr	r2, [pc, #256]	@ (800f518 <UART_Start_Receive_DMA+0x140>)
 800f416:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f41e:	4a3f      	ldr	r2, [pc, #252]	@ (800f51c <UART_Start_Receive_DMA+0x144>)
 800f420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f428:	4a3d      	ldr	r2, [pc, #244]	@ (800f520 <UART_Start_Receive_DMA+0x148>)
 800f42a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f432:	2200      	movs	r2, #0
 800f434:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	3324      	adds	r3, #36	@ 0x24
 800f442:	4619      	mov	r1, r3
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f448:	461a      	mov	r2, r3
 800f44a:	88fb      	ldrh	r3, [r7, #6]
 800f44c:	f7f7 fb9e 	bl	8006b8c <HAL_DMA_Start_IT>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d009      	beq.n	800f46a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2210      	movs	r2, #16
 800f45a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2220      	movs	r2, #32
 800f462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800f466:	2301      	movs	r3, #1
 800f468:	e051      	b.n	800f50e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	691b      	ldr	r3, [r3, #16]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d018      	beq.n	800f4a4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f47a:	e853 3f00 	ldrex	r3, [r3]
 800f47e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f486:	657b      	str	r3, [r7, #84]	@ 0x54
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	461a      	mov	r2, r3
 800f48e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f490:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f492:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f494:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f496:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f498:	e841 2300 	strex	r3, r2, [r1]
 800f49c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f49e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d1e6      	bne.n	800f472 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	3308      	adds	r3, #8
 800f4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ae:	e853 3f00 	ldrex	r3, [r3]
 800f4b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b6:	f043 0301 	orr.w	r3, r3, #1
 800f4ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	3308      	adds	r3, #8
 800f4c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f4c4:	637a      	str	r2, [r7, #52]	@ 0x34
 800f4c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f4ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4cc:	e841 2300 	strex	r3, r2, [r1]
 800f4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1e5      	bne.n	800f4a4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	3308      	adds	r3, #8
 800f4de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	e853 3f00 	ldrex	r3, [r3]
 800f4e6:	613b      	str	r3, [r7, #16]
   return(result);
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	3308      	adds	r3, #8
 800f4f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f4f8:	623a      	str	r2, [r7, #32]
 800f4fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4fc:	69f9      	ldr	r1, [r7, #28]
 800f4fe:	6a3a      	ldr	r2, [r7, #32]
 800f500:	e841 2300 	strex	r3, r2, [r1]
 800f504:	61bb      	str	r3, [r7, #24]
   return(result);
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d1e5      	bne.n	800f4d8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800f50c:	2300      	movs	r3, #0
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3758      	adds	r7, #88	@ 0x58
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	0800f727 	.word	0x0800f727
 800f51c:	0800f84f 	.word	0x0800f84f
 800f520:	0800f88d 	.word	0x0800f88d

0800f524 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f524:	b480      	push	{r7}
 800f526:	b08f      	sub	sp, #60	@ 0x3c
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	e853 3f00 	ldrex	r3, [r3]
 800f538:	61fb      	str	r3, [r7, #28]
   return(result);
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f540:	637b      	str	r3, [r7, #52]	@ 0x34
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f54c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f552:	e841 2300 	strex	r3, r2, [r1]
 800f556:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1e6      	bne.n	800f52c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	3308      	adds	r3, #8
 800f564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	e853 3f00 	ldrex	r3, [r3]
 800f56c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800f574:	633b      	str	r3, [r7, #48]	@ 0x30
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	3308      	adds	r3, #8
 800f57c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f57e:	61ba      	str	r2, [r7, #24]
 800f580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f582:	6979      	ldr	r1, [r7, #20]
 800f584:	69ba      	ldr	r2, [r7, #24]
 800f586:	e841 2300 	strex	r3, r2, [r1]
 800f58a:	613b      	str	r3, [r7, #16]
   return(result);
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1e5      	bne.n	800f55e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2220      	movs	r2, #32
 800f596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800f59a:	bf00      	nop
 800f59c:	373c      	adds	r7, #60	@ 0x3c
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
	...

0800f5a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b095      	sub	sp, #84	@ 0x54
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5b8:	e853 3f00 	ldrex	r3, [r3]
 800f5bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f5d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f5d6:	e841 2300 	strex	r3, r2, [r1]
 800f5da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1e6      	bne.n	800f5b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3308      	adds	r3, #8
 800f5e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ea:	6a3b      	ldr	r3, [r7, #32]
 800f5ec:	e853 3f00 	ldrex	r3, [r3]
 800f5f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5f2:	69fa      	ldr	r2, [r7, #28]
 800f5f4:	4b1e      	ldr	r3, [pc, #120]	@ (800f670 <UART_EndRxTransfer+0xc8>)
 800f5f6:	4013      	ands	r3, r2
 800f5f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3308      	adds	r3, #8
 800f600:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f602:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f604:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f60a:	e841 2300 	strex	r3, r2, [r1]
 800f60e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f612:	2b00      	cmp	r3, #0
 800f614:	d1e5      	bne.n	800f5e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d118      	bne.n	800f650 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	e853 3f00 	ldrex	r3, [r3]
 800f62a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	f023 0310 	bic.w	r3, r3, #16
 800f632:	647b      	str	r3, [r7, #68]	@ 0x44
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	461a      	mov	r2, r3
 800f63a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f63c:	61bb      	str	r3, [r7, #24]
 800f63e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f640:	6979      	ldr	r1, [r7, #20]
 800f642:	69ba      	ldr	r2, [r7, #24]
 800f644:	e841 2300 	strex	r3, r2, [r1]
 800f648:	613b      	str	r3, [r7, #16]
   return(result);
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d1e6      	bne.n	800f61e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2220      	movs	r2, #32
 800f654:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2200      	movs	r2, #0
 800f65c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f664:	bf00      	nop
 800f666:	3754      	adds	r7, #84	@ 0x54
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr
 800f670:	effffffe 	.word	0xeffffffe

0800f674 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b090      	sub	sp, #64	@ 0x40
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f680:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	69db      	ldr	r3, [r3, #28]
 800f686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f68a:	d037      	beq.n	800f6fc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f68e:	2200      	movs	r2, #0
 800f690:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3308      	adds	r3, #8
 800f69a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f69e:	e853 3f00 	ldrex	r3, [r3]
 800f6a2:	623b      	str	r3, [r7, #32]
   return(result);
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f6b4:	633a      	str	r2, [r7, #48]	@ 0x30
 800f6b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6bc:	e841 2300 	strex	r3, r2, [r1]
 800f6c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1e5      	bne.n	800f694 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	e853 3f00 	ldrex	r3, [r3]
 800f6d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6e6:	61fb      	str	r3, [r7, #28]
 800f6e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ea:	69b9      	ldr	r1, [r7, #24]
 800f6ec:	69fa      	ldr	r2, [r7, #28]
 800f6ee:	e841 2300 	strex	r3, r2, [r1]
 800f6f2:	617b      	str	r3, [r7, #20]
   return(result);
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1e6      	bne.n	800f6c8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f6fa:	e002      	b.n	800f702 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800f6fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f6fe:	f7f1 fea3 	bl	8001448 <HAL_UART_TxCpltCallback>
}
 800f702:	bf00      	nop
 800f704:	3740      	adds	r7, #64	@ 0x40
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b084      	sub	sp, #16
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f716:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	f7fe ff11 	bl	800e540 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f71e:	bf00      	nop
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b09c      	sub	sp, #112	@ 0x70
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f732:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	69db      	ldr	r3, [r3, #28]
 800f738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f73c:	d071      	beq.n	800f822 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f73e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f740:	2200      	movs	r2, #0
 800f742:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f746:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f74c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f74e:	e853 3f00 	ldrex	r3, [r3]
 800f752:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f756:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f75a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f75c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	461a      	mov	r2, r3
 800f762:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f764:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f766:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f768:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f76a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f76c:	e841 2300 	strex	r3, r2, [r1]
 800f770:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f774:	2b00      	cmp	r3, #0
 800f776:	d1e6      	bne.n	800f746 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	3308      	adds	r3, #8
 800f77e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f782:	e853 3f00 	ldrex	r3, [r3]
 800f786:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f78a:	f023 0301 	bic.w	r3, r3, #1
 800f78e:	667b      	str	r3, [r7, #100]	@ 0x64
 800f790:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	3308      	adds	r3, #8
 800f796:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f798:	647a      	str	r2, [r7, #68]	@ 0x44
 800f79a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f79c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f79e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7a0:	e841 2300 	strex	r3, r2, [r1]
 800f7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d1e5      	bne.n	800f778 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	3308      	adds	r3, #8
 800f7b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7b6:	e853 3f00 	ldrex	r3, [r3]
 800f7ba:	623b      	str	r3, [r7, #32]
   return(result);
 800f7bc:	6a3b      	ldr	r3, [r7, #32]
 800f7be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800f7c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3308      	adds	r3, #8
 800f7ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f7cc:	633a      	str	r2, [r7, #48]	@ 0x30
 800f7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f7d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7d4:	e841 2300 	strex	r3, r2, [r1]
 800f7d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1e5      	bne.n	800f7ac <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f7e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f7e2:	2220      	movs	r2, #32
 800f7e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f7ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d118      	bne.n	800f822 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	e853 3f00 	ldrex	r3, [r3]
 800f7fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f023 0310 	bic.w	r3, r3, #16
 800f804:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	461a      	mov	r2, r3
 800f80c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f80e:	61fb      	str	r3, [r7, #28]
 800f810:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f812:	69b9      	ldr	r1, [r7, #24]
 800f814:	69fa      	ldr	r2, [r7, #28]
 800f816:	e841 2300 	strex	r3, r2, [r1]
 800f81a:	617b      	str	r3, [r7, #20]
   return(result);
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d1e6      	bne.n	800f7f0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f824:	2200      	movs	r2, #0
 800f826:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f82a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f82c:	2b01      	cmp	r3, #1
 800f82e:	d107      	bne.n	800f840 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f836:	4619      	mov	r1, r3
 800f838:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f83a:	f7fe fe9f 	bl	800e57c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f83e:	e002      	b.n	800f846 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800f840:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f842:	f7fe fe87 	bl	800e554 <HAL_UART_RxCpltCallback>
}
 800f846:	bf00      	nop
 800f848:	3770      	adds	r7, #112	@ 0x70
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f84e:	b580      	push	{r7, lr}
 800f850:	b084      	sub	sp, #16
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f85a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2201      	movs	r2, #1
 800f860:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f866:	2b01      	cmp	r3, #1
 800f868:	d109      	bne.n	800f87e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f870:	085b      	lsrs	r3, r3, #1
 800f872:	b29b      	uxth	r3, r3
 800f874:	4619      	mov	r1, r3
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7fe fe80 	bl	800e57c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f87c:	e002      	b.n	800f884 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800f87e:	68f8      	ldr	r0, [r7, #12]
 800f880:	f7fe fe72 	bl	800e568 <HAL_UART_RxHalfCpltCallback>
}
 800f884:	bf00      	nop
 800f886:	3710      	adds	r7, #16
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f898:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f8a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f8b4:	2b80      	cmp	r3, #128	@ 0x80
 800f8b6:	d109      	bne.n	800f8cc <UART_DMAError+0x40>
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	2b21      	cmp	r3, #33	@ 0x21
 800f8bc:	d106      	bne.n	800f8cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800f8c6:	6978      	ldr	r0, [r7, #20]
 800f8c8:	f7ff fe2c 	bl	800f524 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8d6:	2b40      	cmp	r3, #64	@ 0x40
 800f8d8:	d109      	bne.n	800f8ee <UART_DMAError+0x62>
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2b22      	cmp	r3, #34	@ 0x22
 800f8de:	d106      	bne.n	800f8ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800f8e8:	6978      	ldr	r0, [r7, #20]
 800f8ea:	f7ff fe5d 	bl	800f5a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8f4:	f043 0210 	orr.w	r2, r3, #16
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f8fe:	6978      	ldr	r0, [r7, #20]
 800f900:	f7f1 fc7e 	bl	8001200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f904:	bf00      	nop
 800f906:	3718      	adds	r7, #24
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2200      	movs	r2, #0
 800f91e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f922:	68f8      	ldr	r0, [r7, #12]
 800f924:	f7f1 fc6c 	bl	8001200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f928:	bf00      	nop
 800f92a:	3710      	adds	r7, #16
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b088      	sub	sp, #32
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	e853 3f00 	ldrex	r3, [r3]
 800f944:	60bb      	str	r3, [r7, #8]
   return(result);
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f94c:	61fb      	str	r3, [r7, #28]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	461a      	mov	r2, r3
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	61bb      	str	r3, [r7, #24]
 800f958:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f95a:	6979      	ldr	r1, [r7, #20]
 800f95c:	69ba      	ldr	r2, [r7, #24]
 800f95e:	e841 2300 	strex	r3, r2, [r1]
 800f962:	613b      	str	r3, [r7, #16]
   return(result);
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d1e6      	bne.n	800f938 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2220      	movs	r2, #32
 800f96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2200      	movs	r2, #0
 800f976:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f7f1 fd65 	bl	8001448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f97e:	bf00      	nop
 800f980:	3720      	adds	r7, #32
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f986:	b480      	push	{r7}
 800f988:	b083      	sub	sp, #12
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f98e:	bf00      	nop
 800f990:	370c      	adds	r7, #12
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f99a:	b480      	push	{r7}
 800f99c:	b083      	sub	sp, #12
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f9a2:	bf00      	nop
 800f9a4:	370c      	adds	r7, #12
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr

0800f9ae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f9ae:	b480      	push	{r7}
 800f9b0:	b083      	sub	sp, #12
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f9b6:	bf00      	nop
 800f9b8:	370c      	adds	r7, #12
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr

0800f9c2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d101      	bne.n	800f9d8 <HAL_UARTEx_EnableFifoMode+0x16>
 800f9d4:	2302      	movs	r3, #2
 800f9d6:	e02b      	b.n	800fa30 <HAL_UARTEx_EnableFifoMode+0x6e>
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2224      	movs	r2, #36	@ 0x24
 800f9e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	f022 0201 	bic.w	r2, r2, #1
 800f9fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fa06:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800fa0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 f889 	bl	800fb30 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2220      	movs	r2, #32
 800fa22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa2e:	2300      	movs	r3, #0
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d101      	bne.n	800fa50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa4c:	2302      	movs	r3, #2
 800fa4e:	e02d      	b.n	800faac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2224      	movs	r2, #36	@ 0x24
 800fa5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	f022 0201 	bic.w	r2, r2, #1
 800fa76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	430a      	orrs	r2, r1
 800fa8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 f84f 	bl	800fb30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2220      	movs	r2, #32
 800fa9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2200      	movs	r2, #0
 800faa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3710      	adds	r7, #16
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d101      	bne.n	800facc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fac8:	2302      	movs	r3, #2
 800faca:	e02d      	b.n	800fb28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2224      	movs	r2, #36	@ 0x24
 800fad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f022 0201 	bic.w	r2, r2, #1
 800faf2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	689b      	ldr	r3, [r3, #8]
 800fafa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	683a      	ldr	r2, [r7, #0]
 800fb04:	430a      	orrs	r2, r1
 800fb06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f000 f811 	bl	800fb30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2220      	movs	r2, #32
 800fb1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2200      	movs	r2, #0
 800fb22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb26:	2300      	movs	r3, #0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b085      	sub	sp, #20
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d108      	bne.n	800fb52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb50:	e031      	b.n	800fbb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb52:	2310      	movs	r3, #16
 800fb54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb56:	2310      	movs	r3, #16
 800fb58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	0e5b      	lsrs	r3, r3, #25
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	f003 0307 	and.w	r3, r3, #7
 800fb68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	0f5b      	lsrs	r3, r3, #29
 800fb72:	b2db      	uxtb	r3, r3
 800fb74:	f003 0307 	and.w	r3, r3, #7
 800fb78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb7a:	7bbb      	ldrb	r3, [r7, #14]
 800fb7c:	7b3a      	ldrb	r2, [r7, #12]
 800fb7e:	4911      	ldr	r1, [pc, #68]	@ (800fbc4 <UARTEx_SetNbDataToProcess+0x94>)
 800fb80:	5c8a      	ldrb	r2, [r1, r2]
 800fb82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb86:	7b3a      	ldrb	r2, [r7, #12]
 800fb88:	490f      	ldr	r1, [pc, #60]	@ (800fbc8 <UARTEx_SetNbDataToProcess+0x98>)
 800fb8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	7b7a      	ldrb	r2, [r7, #13]
 800fb9c:	4909      	ldr	r1, [pc, #36]	@ (800fbc4 <UARTEx_SetNbDataToProcess+0x94>)
 800fb9e:	5c8a      	ldrb	r2, [r1, r2]
 800fba0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fba4:	7b7a      	ldrb	r2, [r7, #13]
 800fba6:	4908      	ldr	r1, [pc, #32]	@ (800fbc8 <UARTEx_SetNbDataToProcess+0x98>)
 800fba8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fbb6:	bf00      	nop
 800fbb8:	3714      	adds	r7, #20
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc0:	4770      	bx	lr
 800fbc2:	bf00      	nop
 800fbc4:	08017264 	.word	0x08017264
 800fbc8:	0801726c 	.word	0x0801726c

0800fbcc <__NVIC_SetPriority>:
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	6039      	str	r1, [r7, #0]
 800fbd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fbd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	db0a      	blt.n	800fbf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	b2da      	uxtb	r2, r3
 800fbe4:	490c      	ldr	r1, [pc, #48]	@ (800fc18 <__NVIC_SetPriority+0x4c>)
 800fbe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbea:	0112      	lsls	r2, r2, #4
 800fbec:	b2d2      	uxtb	r2, r2
 800fbee:	440b      	add	r3, r1
 800fbf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800fbf4:	e00a      	b.n	800fc0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	4908      	ldr	r1, [pc, #32]	@ (800fc1c <__NVIC_SetPriority+0x50>)
 800fbfc:	88fb      	ldrh	r3, [r7, #6]
 800fbfe:	f003 030f 	and.w	r3, r3, #15
 800fc02:	3b04      	subs	r3, #4
 800fc04:	0112      	lsls	r2, r2, #4
 800fc06:	b2d2      	uxtb	r2, r2
 800fc08:	440b      	add	r3, r1
 800fc0a:	761a      	strb	r2, [r3, #24]
}
 800fc0c:	bf00      	nop
 800fc0e:	370c      	adds	r7, #12
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	e000e100 	.word	0xe000e100
 800fc1c:	e000ed00 	.word	0xe000ed00

0800fc20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fc20:	b580      	push	{r7, lr}
 800fc22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fc24:	4b05      	ldr	r3, [pc, #20]	@ (800fc3c <SysTick_Handler+0x1c>)
 800fc26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fc28:	f001 fdb0 	bl	801178c <xTaskGetSchedulerState>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d001      	beq.n	800fc36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fc32:	f002 fba9 	bl	8012388 <xPortSysTickHandler>
  }
}
 800fc36:	bf00      	nop
 800fc38:	bd80      	pop	{r7, pc}
 800fc3a:	bf00      	nop
 800fc3c:	e000e010 	.word	0xe000e010

0800fc40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fc40:	b580      	push	{r7, lr}
 800fc42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fc44:	2100      	movs	r1, #0
 800fc46:	f06f 0004 	mvn.w	r0, #4
 800fc4a:	f7ff ffbf 	bl	800fbcc <__NVIC_SetPriority>
#endif
}
 800fc4e:	bf00      	nop
 800fc50:	bd80      	pop	{r7, pc}
	...

0800fc54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fc54:	b480      	push	{r7}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc5a:	f3ef 8305 	mrs	r3, IPSR
 800fc5e:	603b      	str	r3, [r7, #0]
  return(result);
 800fc60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d003      	beq.n	800fc6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fc66:	f06f 0305 	mvn.w	r3, #5
 800fc6a:	607b      	str	r3, [r7, #4]
 800fc6c:	e00c      	b.n	800fc88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fc6e:	4b0a      	ldr	r3, [pc, #40]	@ (800fc98 <osKernelInitialize+0x44>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d105      	bne.n	800fc82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fc76:	4b08      	ldr	r3, [pc, #32]	@ (800fc98 <osKernelInitialize+0x44>)
 800fc78:	2201      	movs	r2, #1
 800fc7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	607b      	str	r3, [r7, #4]
 800fc80:	e002      	b.n	800fc88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fc82:	f04f 33ff 	mov.w	r3, #4294967295
 800fc86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fc88:	687b      	ldr	r3, [r7, #4]
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	370c      	adds	r7, #12
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	240029dc 	.word	0x240029dc

0800fc9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fca2:	f3ef 8305 	mrs	r3, IPSR
 800fca6:	603b      	str	r3, [r7, #0]
  return(result);
 800fca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d003      	beq.n	800fcb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800fcae:	f06f 0305 	mvn.w	r3, #5
 800fcb2:	607b      	str	r3, [r7, #4]
 800fcb4:	e010      	b.n	800fcd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fcb6:	4b0b      	ldr	r3, [pc, #44]	@ (800fce4 <osKernelStart+0x48>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d109      	bne.n	800fcd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fcbe:	f7ff ffbf 	bl	800fc40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fcc2:	4b08      	ldr	r3, [pc, #32]	@ (800fce4 <osKernelStart+0x48>)
 800fcc4:	2202      	movs	r2, #2
 800fcc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fcc8:	f001 f8fc 	bl	8010ec4 <vTaskStartScheduler>
      stat = osOK;
 800fccc:	2300      	movs	r3, #0
 800fcce:	607b      	str	r3, [r7, #4]
 800fcd0:	e002      	b.n	800fcd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fcd8:	687b      	ldr	r3, [r7, #4]
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	240029dc 	.word	0x240029dc

0800fce8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b08e      	sub	sp, #56	@ 0x38
 800fcec:	af04      	add	r7, sp, #16
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcf8:	f3ef 8305 	mrs	r3, IPSR
 800fcfc:	617b      	str	r3, [r7, #20]
  return(result);
 800fcfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d17e      	bne.n	800fe02 <osThreadNew+0x11a>
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d07b      	beq.n	800fe02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fd0a:	2380      	movs	r3, #128	@ 0x80
 800fd0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fd0e:	2318      	movs	r3, #24
 800fd10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fd12:	2300      	movs	r3, #0
 800fd14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800fd16:	f04f 33ff 	mov.w	r3, #4294967295
 800fd1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d045      	beq.n	800fdae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <osThreadNew+0x48>
        name = attr->name;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	699b      	ldr	r3, [r3, #24]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d002      	beq.n	800fd3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	699b      	ldr	r3, [r3, #24]
 800fd3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d008      	beq.n	800fd56 <osThreadNew+0x6e>
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	2b38      	cmp	r3, #56	@ 0x38
 800fd48:	d805      	bhi.n	800fd56 <osThreadNew+0x6e>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	f003 0301 	and.w	r3, r3, #1
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d001      	beq.n	800fd5a <osThreadNew+0x72>
        return (NULL);
 800fd56:	2300      	movs	r3, #0
 800fd58:	e054      	b.n	800fe04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	695b      	ldr	r3, [r3, #20]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d003      	beq.n	800fd6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	695b      	ldr	r3, [r3, #20]
 800fd66:	089b      	lsrs	r3, r3, #2
 800fd68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	689b      	ldr	r3, [r3, #8]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d00e      	beq.n	800fd90 <osThreadNew+0xa8>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	2ba7      	cmp	r3, #167	@ 0xa7
 800fd78:	d90a      	bls.n	800fd90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d006      	beq.n	800fd90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d002      	beq.n	800fd90 <osThreadNew+0xa8>
        mem = 1;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	61bb      	str	r3, [r7, #24]
 800fd8e:	e010      	b.n	800fdb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10c      	bne.n	800fdb2 <osThreadNew+0xca>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d108      	bne.n	800fdb2 <osThreadNew+0xca>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d104      	bne.n	800fdb2 <osThreadNew+0xca>
          mem = 0;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	61bb      	str	r3, [r7, #24]
 800fdac:	e001      	b.n	800fdb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d110      	bne.n	800fdda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fdc0:	9202      	str	r2, [sp, #8]
 800fdc2:	9301      	str	r3, [sp, #4]
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	6a3a      	ldr	r2, [r7, #32]
 800fdcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f000 fe3a 	bl	8010a48 <xTaskCreateStatic>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	613b      	str	r3, [r7, #16]
 800fdd8:	e013      	b.n	800fe02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fdda:	69bb      	ldr	r3, [r7, #24]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d110      	bne.n	800fe02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	f107 0310 	add.w	r3, r7, #16
 800fde8:	9301      	str	r3, [sp, #4]
 800fdea:	69fb      	ldr	r3, [r7, #28]
 800fdec:	9300      	str	r3, [sp, #0]
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fdf2:	68f8      	ldr	r0, [r7, #12]
 800fdf4:	f000 fe88 	bl	8010b08 <xTaskCreate>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d001      	beq.n	800fe02 <osThreadNew+0x11a>
            hTask = NULL;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fe02:	693b      	ldr	r3, [r7, #16]
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3728      	adds	r7, #40	@ 0x28
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fe0c:	b480      	push	{r7}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	4a07      	ldr	r2, [pc, #28]	@ (800fe38 <vApplicationGetIdleTaskMemory+0x2c>)
 800fe1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	4a06      	ldr	r2, [pc, #24]	@ (800fe3c <vApplicationGetIdleTaskMemory+0x30>)
 800fe22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2280      	movs	r2, #128	@ 0x80
 800fe28:	601a      	str	r2, [r3, #0]
}
 800fe2a:	bf00      	nop
 800fe2c:	3714      	adds	r7, #20
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	240029e0 	.word	0x240029e0
 800fe3c:	24002a88 	.word	0x24002a88

0800fe40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fe40:	b480      	push	{r7}
 800fe42:	b085      	sub	sp, #20
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	4a07      	ldr	r2, [pc, #28]	@ (800fe6c <vApplicationGetTimerTaskMemory+0x2c>)
 800fe50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	4a06      	ldr	r2, [pc, #24]	@ (800fe70 <vApplicationGetTimerTaskMemory+0x30>)
 800fe56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fe5e:	601a      	str	r2, [r3, #0]
}
 800fe60:	bf00      	nop
 800fe62:	3714      	adds	r7, #20
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr
 800fe6c:	24002c88 	.word	0x24002c88
 800fe70:	24002d30 	.word	0x24002d30

0800fe74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f103 0208 	add.w	r2, r3, #8
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f04f 32ff 	mov.w	r2, #4294967295
 800fe8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f103 0208 	add.w	r2, r3, #8
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f103 0208 	add.w	r2, r3, #8
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fec2:	bf00      	nop
 800fec4:	370c      	adds	r7, #12
 800fec6:	46bd      	mov	sp, r7
 800fec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fecc:	4770      	bx	lr

0800fece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fece:	b480      	push	{r7}
 800fed0:	b085      	sub	sp, #20
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
 800fed6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	68fa      	ldr	r2, [r7, #12]
 800fee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	689a      	ldr	r2, [r3, #8]
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	683a      	ldr	r2, [r7, #0]
 800fef2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	683a      	ldr	r2, [r7, #0]
 800fef8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	1c5a      	adds	r2, r3, #1
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	601a      	str	r2, [r3, #0]
}
 800ff0a:	bf00      	nop
 800ff0c:	3714      	adds	r7, #20
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff16:	b480      	push	{r7}
 800ff18:	b085      	sub	sp, #20
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
 800ff1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff2c:	d103      	bne.n	800ff36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	60fb      	str	r3, [r7, #12]
 800ff34:	e00c      	b.n	800ff50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	3308      	adds	r3, #8
 800ff3a:	60fb      	str	r3, [r7, #12]
 800ff3c:	e002      	b.n	800ff44 <vListInsert+0x2e>
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	60fb      	str	r3, [r7, #12]
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	68ba      	ldr	r2, [r7, #8]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d2f6      	bcs.n	800ff3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	685a      	ldr	r2, [r3, #4]
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	683a      	ldr	r2, [r7, #0]
 800ff5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	68fa      	ldr	r2, [r7, #12]
 800ff64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	683a      	ldr	r2, [r7, #0]
 800ff6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	601a      	str	r2, [r3, #0]
}
 800ff7c:	bf00      	nop
 800ff7e:	3714      	adds	r7, #20
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	691b      	ldr	r3, [r3, #16]
 800ff94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	6892      	ldr	r2, [r2, #8]
 800ff9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	6852      	ldr	r2, [r2, #4]
 800ffa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d103      	bne.n	800ffbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	689a      	ldr	r2, [r3, #8]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	1e5a      	subs	r2, r3, #1
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3714      	adds	r7, #20
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b084      	sub	sp, #16
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d10b      	bne.n	8010008 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fff4:	f383 8811 	msr	BASEPRI, r3
 800fff8:	f3bf 8f6f 	isb	sy
 800fffc:	f3bf 8f4f 	dsb	sy
 8010000:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010002:	bf00      	nop
 8010004:	bf00      	nop
 8010006:	e7fd      	b.n	8010004 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010008:	f002 f92e 	bl	8012268 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010014:	68f9      	ldr	r1, [r7, #12]
 8010016:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010018:	fb01 f303 	mul.w	r3, r1, r3
 801001c:	441a      	add	r2, r3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2200      	movs	r2, #0
 8010026:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010038:	3b01      	subs	r3, #1
 801003a:	68f9      	ldr	r1, [r7, #12]
 801003c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801003e:	fb01 f303 	mul.w	r3, r1, r3
 8010042:	441a      	add	r2, r3
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	22ff      	movs	r2, #255	@ 0xff
 801004c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	22ff      	movs	r2, #255	@ 0xff
 8010054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d114      	bne.n	8010088 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	691b      	ldr	r3, [r3, #16]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d01a      	beq.n	801009c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3310      	adds	r3, #16
 801006a:	4618      	mov	r0, r3
 801006c:	f001 f9c8 	bl	8011400 <xTaskRemoveFromEventList>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d012      	beq.n	801009c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010076:	4b0d      	ldr	r3, [pc, #52]	@ (80100ac <xQueueGenericReset+0xd0>)
 8010078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	f3bf 8f4f 	dsb	sy
 8010082:	f3bf 8f6f 	isb	sy
 8010086:	e009      	b.n	801009c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	3310      	adds	r3, #16
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff fef1 	bl	800fe74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	3324      	adds	r3, #36	@ 0x24
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff feec 	bl	800fe74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801009c:	f002 f916 	bl	80122cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80100a0:	2301      	movs	r3, #1
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	e000ed04 	.word	0xe000ed04

080100b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b08e      	sub	sp, #56	@ 0x38
 80100b4:	af02      	add	r7, sp, #8
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	607a      	str	r2, [r7, #4]
 80100bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d10b      	bne.n	80100dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80100c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c8:	f383 8811 	msr	BASEPRI, r3
 80100cc:	f3bf 8f6f 	isb	sy
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80100d6:	bf00      	nop
 80100d8:	bf00      	nop
 80100da:	e7fd      	b.n	80100d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d10b      	bne.n	80100fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80100e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100e6:	f383 8811 	msr	BASEPRI, r3
 80100ea:	f3bf 8f6f 	isb	sy
 80100ee:	f3bf 8f4f 	dsb	sy
 80100f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80100f4:	bf00      	nop
 80100f6:	bf00      	nop
 80100f8:	e7fd      	b.n	80100f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <xQueueGenericCreateStatic+0x56>
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d001      	beq.n	801010a <xQueueGenericCreateStatic+0x5a>
 8010106:	2301      	movs	r3, #1
 8010108:	e000      	b.n	801010c <xQueueGenericCreateStatic+0x5c>
 801010a:	2300      	movs	r3, #0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10b      	bne.n	8010128 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	623b      	str	r3, [r7, #32]
}
 8010122:	bf00      	nop
 8010124:	bf00      	nop
 8010126:	e7fd      	b.n	8010124 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d102      	bne.n	8010134 <xQueueGenericCreateStatic+0x84>
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d101      	bne.n	8010138 <xQueueGenericCreateStatic+0x88>
 8010134:	2301      	movs	r3, #1
 8010136:	e000      	b.n	801013a <xQueueGenericCreateStatic+0x8a>
 8010138:	2300      	movs	r3, #0
 801013a:	2b00      	cmp	r3, #0
 801013c:	d10b      	bne.n	8010156 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 801013e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	61fb      	str	r3, [r7, #28]
}
 8010150:	bf00      	nop
 8010152:	bf00      	nop
 8010154:	e7fd      	b.n	8010152 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010156:	2350      	movs	r3, #80	@ 0x50
 8010158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	2b50      	cmp	r3, #80	@ 0x50
 801015e:	d00b      	beq.n	8010178 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	61bb      	str	r3, [r7, #24]
}
 8010172:	bf00      	nop
 8010174:	bf00      	nop
 8010176:	e7fd      	b.n	8010174 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010178:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801017e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010180:	2b00      	cmp	r3, #0
 8010182:	d00d      	beq.n	80101a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010186:	2201      	movs	r2, #1
 8010188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801018c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	4613      	mov	r3, r2
 8010196:	687a      	ldr	r2, [r7, #4]
 8010198:	68b9      	ldr	r1, [r7, #8]
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f000 f840 	bl	8010220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80101a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3730      	adds	r7, #48	@ 0x30
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b08a      	sub	sp, #40	@ 0x28
 80101ae:	af02      	add	r7, sp, #8
 80101b0:	60f8      	str	r0, [r7, #12]
 80101b2:	60b9      	str	r1, [r7, #8]
 80101b4:	4613      	mov	r3, r2
 80101b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d10b      	bne.n	80101d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80101be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101c2:	f383 8811 	msr	BASEPRI, r3
 80101c6:	f3bf 8f6f 	isb	sy
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	613b      	str	r3, [r7, #16]
}
 80101d0:	bf00      	nop
 80101d2:	bf00      	nop
 80101d4:	e7fd      	b.n	80101d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	68ba      	ldr	r2, [r7, #8]
 80101da:	fb02 f303 	mul.w	r3, r2, r3
 80101de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	3350      	adds	r3, #80	@ 0x50
 80101e4:	4618      	mov	r0, r3
 80101e6:	f002 f961 	bl	80124ac <pvPortMalloc>
 80101ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d011      	beq.n	8010216 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	3350      	adds	r3, #80	@ 0x50
 80101fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	2200      	movs	r2, #0
 8010200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010204:	79fa      	ldrb	r2, [r7, #7]
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	4613      	mov	r3, r2
 801020c:	697a      	ldr	r2, [r7, #20]
 801020e:	68b9      	ldr	r1, [r7, #8]
 8010210:	68f8      	ldr	r0, [r7, #12]
 8010212:	f000 f805 	bl	8010220 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010216:	69bb      	ldr	r3, [r7, #24]
	}
 8010218:	4618      	mov	r0, r3
 801021a:	3720      	adds	r7, #32
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b084      	sub	sp, #16
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
 801022c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d103      	bne.n	801023c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	69ba      	ldr	r2, [r7, #24]
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	e002      	b.n	8010242 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	68ba      	ldr	r2, [r7, #8]
 801024c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801024e:	2101      	movs	r1, #1
 8010250:	69b8      	ldr	r0, [r7, #24]
 8010252:	f7ff fec3 	bl	800ffdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	78fa      	ldrb	r2, [r7, #3]
 801025a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801025e:	bf00      	nop
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
	...

08010268 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b08e      	sub	sp, #56	@ 0x38
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
 8010274:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010276:	2300      	movs	r3, #0
 8010278:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801027e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010280:	2b00      	cmp	r3, #0
 8010282:	d10b      	bne.n	801029c <xQueueGenericSend+0x34>
	__asm volatile
 8010284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010288:	f383 8811 	msr	BASEPRI, r3
 801028c:	f3bf 8f6f 	isb	sy
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010296:	bf00      	nop
 8010298:	bf00      	nop
 801029a:	e7fd      	b.n	8010298 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d103      	bne.n	80102aa <xQueueGenericSend+0x42>
 80102a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <xQueueGenericSend+0x46>
 80102aa:	2301      	movs	r3, #1
 80102ac:	e000      	b.n	80102b0 <xQueueGenericSend+0x48>
 80102ae:	2300      	movs	r3, #0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d10b      	bne.n	80102cc <xQueueGenericSend+0x64>
	__asm volatile
 80102b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b8:	f383 8811 	msr	BASEPRI, r3
 80102bc:	f3bf 8f6f 	isb	sy
 80102c0:	f3bf 8f4f 	dsb	sy
 80102c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80102c6:	bf00      	nop
 80102c8:	bf00      	nop
 80102ca:	e7fd      	b.n	80102c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d103      	bne.n	80102da <xQueueGenericSend+0x72>
 80102d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	d101      	bne.n	80102de <xQueueGenericSend+0x76>
 80102da:	2301      	movs	r3, #1
 80102dc:	e000      	b.n	80102e0 <xQueueGenericSend+0x78>
 80102de:	2300      	movs	r3, #0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d10b      	bne.n	80102fc <xQueueGenericSend+0x94>
	__asm volatile
 80102e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e8:	f383 8811 	msr	BASEPRI, r3
 80102ec:	f3bf 8f6f 	isb	sy
 80102f0:	f3bf 8f4f 	dsb	sy
 80102f4:	623b      	str	r3, [r7, #32]
}
 80102f6:	bf00      	nop
 80102f8:	bf00      	nop
 80102fa:	e7fd      	b.n	80102f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102fc:	f001 fa46 	bl	801178c <xTaskGetSchedulerState>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d102      	bne.n	801030c <xQueueGenericSend+0xa4>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d101      	bne.n	8010310 <xQueueGenericSend+0xa8>
 801030c:	2301      	movs	r3, #1
 801030e:	e000      	b.n	8010312 <xQueueGenericSend+0xaa>
 8010310:	2300      	movs	r3, #0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10b      	bne.n	801032e <xQueueGenericSend+0xc6>
	__asm volatile
 8010316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801031a:	f383 8811 	msr	BASEPRI, r3
 801031e:	f3bf 8f6f 	isb	sy
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	61fb      	str	r3, [r7, #28]
}
 8010328:	bf00      	nop
 801032a:	bf00      	nop
 801032c:	e7fd      	b.n	801032a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801032e:	f001 ff9b 	bl	8012268 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801033a:	429a      	cmp	r2, r3
 801033c:	d302      	bcc.n	8010344 <xQueueGenericSend+0xdc>
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	2b02      	cmp	r3, #2
 8010342:	d129      	bne.n	8010398 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010344:	683a      	ldr	r2, [r7, #0]
 8010346:	68b9      	ldr	r1, [r7, #8]
 8010348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801034a:	f000 fa0f 	bl	801076c <prvCopyDataToQueue>
 801034e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010354:	2b00      	cmp	r3, #0
 8010356:	d010      	beq.n	801037a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801035a:	3324      	adds	r3, #36	@ 0x24
 801035c:	4618      	mov	r0, r3
 801035e:	f001 f84f 	bl	8011400 <xTaskRemoveFromEventList>
 8010362:	4603      	mov	r3, r0
 8010364:	2b00      	cmp	r3, #0
 8010366:	d013      	beq.n	8010390 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010368:	4b3f      	ldr	r3, [pc, #252]	@ (8010468 <xQueueGenericSend+0x200>)
 801036a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801036e:	601a      	str	r2, [r3, #0]
 8010370:	f3bf 8f4f 	dsb	sy
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	e00a      	b.n	8010390 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801037a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801037c:	2b00      	cmp	r3, #0
 801037e:	d007      	beq.n	8010390 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010380:	4b39      	ldr	r3, [pc, #228]	@ (8010468 <xQueueGenericSend+0x200>)
 8010382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010386:	601a      	str	r2, [r3, #0]
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010390:	f001 ff9c 	bl	80122cc <vPortExitCritical>
				return pdPASS;
 8010394:	2301      	movs	r3, #1
 8010396:	e063      	b.n	8010460 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d103      	bne.n	80103a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801039e:	f001 ff95 	bl	80122cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80103a2:	2300      	movs	r3, #0
 80103a4:	e05c      	b.n	8010460 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80103a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d106      	bne.n	80103ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103ac:	f107 0314 	add.w	r3, r7, #20
 80103b0:	4618      	mov	r0, r3
 80103b2:	f001 f889 	bl	80114c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103b6:	2301      	movs	r3, #1
 80103b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80103ba:	f001 ff87 	bl	80122cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80103be:	f000 fdf1 	bl	8010fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103c2:	f001 ff51 	bl	8012268 <vPortEnterCritical>
 80103c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80103cc:	b25b      	sxtb	r3, r3
 80103ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d2:	d103      	bne.n	80103dc <xQueueGenericSend+0x174>
 80103d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d6:	2200      	movs	r2, #0
 80103d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80103dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80103e2:	b25b      	sxtb	r3, r3
 80103e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e8:	d103      	bne.n	80103f2 <xQueueGenericSend+0x18a>
 80103ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ec:	2200      	movs	r2, #0
 80103ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80103f2:	f001 ff6b 	bl	80122cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103f6:	1d3a      	adds	r2, r7, #4
 80103f8:	f107 0314 	add.w	r3, r7, #20
 80103fc:	4611      	mov	r1, r2
 80103fe:	4618      	mov	r0, r3
 8010400:	f001 f878 	bl	80114f4 <xTaskCheckForTimeOut>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d124      	bne.n	8010454 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801040a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801040c:	f000 faa6 	bl	801095c <prvIsQueueFull>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d018      	beq.n	8010448 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010418:	3310      	adds	r3, #16
 801041a:	687a      	ldr	r2, [r7, #4]
 801041c:	4611      	mov	r1, r2
 801041e:	4618      	mov	r0, r3
 8010420:	f000 ff9c 	bl	801135c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010426:	f000 fa31 	bl	801088c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801042a:	f000 fdc9 	bl	8010fc0 <xTaskResumeAll>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	f47f af7c 	bne.w	801032e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010436:	4b0c      	ldr	r3, [pc, #48]	@ (8010468 <xQueueGenericSend+0x200>)
 8010438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801043c:	601a      	str	r2, [r3, #0]
 801043e:	f3bf 8f4f 	dsb	sy
 8010442:	f3bf 8f6f 	isb	sy
 8010446:	e772      	b.n	801032e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801044a:	f000 fa1f 	bl	801088c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801044e:	f000 fdb7 	bl	8010fc0 <xTaskResumeAll>
 8010452:	e76c      	b.n	801032e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010456:	f000 fa19 	bl	801088c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801045a:	f000 fdb1 	bl	8010fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801045e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010460:	4618      	mov	r0, r3
 8010462:	3738      	adds	r7, #56	@ 0x38
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	e000ed04 	.word	0xe000ed04

0801046c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b090      	sub	sp, #64	@ 0x40
 8010470:	af00      	add	r7, sp, #0
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	60b9      	str	r1, [r7, #8]
 8010476:	607a      	str	r2, [r7, #4]
 8010478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801047e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10b      	bne.n	801049c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010488:	f383 8811 	msr	BASEPRI, r3
 801048c:	f3bf 8f6f 	isb	sy
 8010490:	f3bf 8f4f 	dsb	sy
 8010494:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010496:	bf00      	nop
 8010498:	bf00      	nop
 801049a:	e7fd      	b.n	8010498 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d103      	bne.n	80104aa <xQueueGenericSendFromISR+0x3e>
 80104a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <xQueueGenericSendFromISR+0x42>
 80104aa:	2301      	movs	r3, #1
 80104ac:	e000      	b.n	80104b0 <xQueueGenericSendFromISR+0x44>
 80104ae:	2300      	movs	r3, #0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d10b      	bne.n	80104cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80104b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104b8:	f383 8811 	msr	BASEPRI, r3
 80104bc:	f3bf 8f6f 	isb	sy
 80104c0:	f3bf 8f4f 	dsb	sy
 80104c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80104c6:	bf00      	nop
 80104c8:	bf00      	nop
 80104ca:	e7fd      	b.n	80104c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	d103      	bne.n	80104da <xQueueGenericSendFromISR+0x6e>
 80104d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d101      	bne.n	80104de <xQueueGenericSendFromISR+0x72>
 80104da:	2301      	movs	r3, #1
 80104dc:	e000      	b.n	80104e0 <xQueueGenericSendFromISR+0x74>
 80104de:	2300      	movs	r3, #0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d10b      	bne.n	80104fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80104e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104e8:	f383 8811 	msr	BASEPRI, r3
 80104ec:	f3bf 8f6f 	isb	sy
 80104f0:	f3bf 8f4f 	dsb	sy
 80104f4:	623b      	str	r3, [r7, #32]
}
 80104f6:	bf00      	nop
 80104f8:	bf00      	nop
 80104fa:	e7fd      	b.n	80104f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104fc:	f001 ff94 	bl	8012428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010500:	f3ef 8211 	mrs	r2, BASEPRI
 8010504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010508:	f383 8811 	msr	BASEPRI, r3
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	61fa      	str	r2, [r7, #28]
 8010516:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010518:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801051a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801051c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801051e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010524:	429a      	cmp	r2, r3
 8010526:	d302      	bcc.n	801052e <xQueueGenericSendFromISR+0xc2>
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	2b02      	cmp	r3, #2
 801052c:	d12f      	bne.n	801058e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801052e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010534:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801053a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801053c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	68b9      	ldr	r1, [r7, #8]
 8010542:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010544:	f000 f912 	bl	801076c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010548:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801054c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010550:	d112      	bne.n	8010578 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010556:	2b00      	cmp	r3, #0
 8010558:	d016      	beq.n	8010588 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801055a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801055c:	3324      	adds	r3, #36	@ 0x24
 801055e:	4618      	mov	r0, r3
 8010560:	f000 ff4e 	bl	8011400 <xTaskRemoveFromEventList>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00e      	beq.n	8010588 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d00b      	beq.n	8010588 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2201      	movs	r2, #1
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	e007      	b.n	8010588 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010578:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801057c:	3301      	adds	r3, #1
 801057e:	b2db      	uxtb	r3, r3
 8010580:	b25a      	sxtb	r2, r3
 8010582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010588:	2301      	movs	r3, #1
 801058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 801058c:	e001      	b.n	8010592 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801058e:	2300      	movs	r3, #0
 8010590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010594:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801059c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801059e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3740      	adds	r7, #64	@ 0x40
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b08c      	sub	sp, #48	@ 0x30
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	60f8      	str	r0, [r7, #12]
 80105b0:	60b9      	str	r1, [r7, #8]
 80105b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80105b4:	2300      	movs	r3, #0
 80105b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80105bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d10b      	bne.n	80105da <xQueueReceive+0x32>
	__asm volatile
 80105c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105c6:	f383 8811 	msr	BASEPRI, r3
 80105ca:	f3bf 8f6f 	isb	sy
 80105ce:	f3bf 8f4f 	dsb	sy
 80105d2:	623b      	str	r3, [r7, #32]
}
 80105d4:	bf00      	nop
 80105d6:	bf00      	nop
 80105d8:	e7fd      	b.n	80105d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d103      	bne.n	80105e8 <xQueueReceive+0x40>
 80105e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d101      	bne.n	80105ec <xQueueReceive+0x44>
 80105e8:	2301      	movs	r3, #1
 80105ea:	e000      	b.n	80105ee <xQueueReceive+0x46>
 80105ec:	2300      	movs	r3, #0
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d10b      	bne.n	801060a <xQueueReceive+0x62>
	__asm volatile
 80105f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105f6:	f383 8811 	msr	BASEPRI, r3
 80105fa:	f3bf 8f6f 	isb	sy
 80105fe:	f3bf 8f4f 	dsb	sy
 8010602:	61fb      	str	r3, [r7, #28]
}
 8010604:	bf00      	nop
 8010606:	bf00      	nop
 8010608:	e7fd      	b.n	8010606 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801060a:	f001 f8bf 	bl	801178c <xTaskGetSchedulerState>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d102      	bne.n	801061a <xQueueReceive+0x72>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d101      	bne.n	801061e <xQueueReceive+0x76>
 801061a:	2301      	movs	r3, #1
 801061c:	e000      	b.n	8010620 <xQueueReceive+0x78>
 801061e:	2300      	movs	r3, #0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10b      	bne.n	801063c <xQueueReceive+0x94>
	__asm volatile
 8010624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	61bb      	str	r3, [r7, #24]
}
 8010636:	bf00      	nop
 8010638:	bf00      	nop
 801063a:	e7fd      	b.n	8010638 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801063c:	f001 fe14 	bl	8012268 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010644:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010648:	2b00      	cmp	r3, #0
 801064a:	d01f      	beq.n	801068c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801064c:	68b9      	ldr	r1, [r7, #8]
 801064e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010650:	f000 f8f6 	bl	8010840 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010656:	1e5a      	subs	r2, r3, #1
 8010658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801065a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801065c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801065e:	691b      	ldr	r3, [r3, #16]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00f      	beq.n	8010684 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010666:	3310      	adds	r3, #16
 8010668:	4618      	mov	r0, r3
 801066a:	f000 fec9 	bl	8011400 <xTaskRemoveFromEventList>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d007      	beq.n	8010684 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010674:	4b3c      	ldr	r3, [pc, #240]	@ (8010768 <xQueueReceive+0x1c0>)
 8010676:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801067a:	601a      	str	r2, [r3, #0]
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010684:	f001 fe22 	bl	80122cc <vPortExitCritical>
				return pdPASS;
 8010688:	2301      	movs	r3, #1
 801068a:	e069      	b.n	8010760 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d103      	bne.n	801069a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010692:	f001 fe1b 	bl	80122cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010696:	2300      	movs	r3, #0
 8010698:	e062      	b.n	8010760 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801069a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801069c:	2b00      	cmp	r3, #0
 801069e:	d106      	bne.n	80106ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80106a0:	f107 0310 	add.w	r3, r7, #16
 80106a4:	4618      	mov	r0, r3
 80106a6:	f000 ff0f 	bl	80114c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80106aa:	2301      	movs	r3, #1
 80106ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80106ae:	f001 fe0d 	bl	80122cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80106b2:	f000 fc77 	bl	8010fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106b6:	f001 fdd7 	bl	8012268 <vPortEnterCritical>
 80106ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80106c0:	b25b      	sxtb	r3, r3
 80106c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c6:	d103      	bne.n	80106d0 <xQueueReceive+0x128>
 80106c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ca:	2200      	movs	r2, #0
 80106cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80106d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80106d6:	b25b      	sxtb	r3, r3
 80106d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106dc:	d103      	bne.n	80106e6 <xQueueReceive+0x13e>
 80106de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106e0:	2200      	movs	r2, #0
 80106e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80106e6:	f001 fdf1 	bl	80122cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106ea:	1d3a      	adds	r2, r7, #4
 80106ec:	f107 0310 	add.w	r3, r7, #16
 80106f0:	4611      	mov	r1, r2
 80106f2:	4618      	mov	r0, r3
 80106f4:	f000 fefe 	bl	80114f4 <xTaskCheckForTimeOut>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d123      	bne.n	8010746 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010700:	f000 f916 	bl	8010930 <prvIsQueueEmpty>
 8010704:	4603      	mov	r3, r0
 8010706:	2b00      	cmp	r3, #0
 8010708:	d017      	beq.n	801073a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801070a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801070c:	3324      	adds	r3, #36	@ 0x24
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	4611      	mov	r1, r2
 8010712:	4618      	mov	r0, r3
 8010714:	f000 fe22 	bl	801135c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801071a:	f000 f8b7 	bl	801088c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801071e:	f000 fc4f 	bl	8010fc0 <xTaskResumeAll>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d189      	bne.n	801063c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010728:	4b0f      	ldr	r3, [pc, #60]	@ (8010768 <xQueueReceive+0x1c0>)
 801072a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801072e:	601a      	str	r2, [r3, #0]
 8010730:	f3bf 8f4f 	dsb	sy
 8010734:	f3bf 8f6f 	isb	sy
 8010738:	e780      	b.n	801063c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801073a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801073c:	f000 f8a6 	bl	801088c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010740:	f000 fc3e 	bl	8010fc0 <xTaskResumeAll>
 8010744:	e77a      	b.n	801063c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010748:	f000 f8a0 	bl	801088c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801074c:	f000 fc38 	bl	8010fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010750:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010752:	f000 f8ed 	bl	8010930 <prvIsQueueEmpty>
 8010756:	4603      	mov	r3, r0
 8010758:	2b00      	cmp	r3, #0
 801075a:	f43f af6f 	beq.w	801063c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801075e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010760:	4618      	mov	r0, r3
 8010762:	3730      	adds	r7, #48	@ 0x30
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	e000ed04 	.word	0xe000ed04

0801076c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b086      	sub	sp, #24
 8010770:	af00      	add	r7, sp, #0
 8010772:	60f8      	str	r0, [r7, #12]
 8010774:	60b9      	str	r1, [r7, #8]
 8010776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010778:	2300      	movs	r3, #0
 801077a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10d      	bne.n	80107a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d14d      	bne.n	801082e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	4618      	mov	r0, r3
 8010798:	f001 f816 	bl	80117c8 <xTaskPriorityDisinherit>
 801079c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2200      	movs	r2, #0
 80107a2:	609a      	str	r2, [r3, #8]
 80107a4:	e043      	b.n	801082e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d119      	bne.n	80107e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6858      	ldr	r0, [r3, #4]
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107b4:	461a      	mov	r2, r3
 80107b6:	68b9      	ldr	r1, [r7, #8]
 80107b8:	f003 ff13 	bl	80145e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	685a      	ldr	r2, [r3, #4]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107c4:	441a      	add	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	685a      	ldr	r2, [r3, #4]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	689b      	ldr	r3, [r3, #8]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d32b      	bcc.n	801082e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	605a      	str	r2, [r3, #4]
 80107de:	e026      	b.n	801082e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	68d8      	ldr	r0, [r3, #12]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107e8:	461a      	mov	r2, r3
 80107ea:	68b9      	ldr	r1, [r7, #8]
 80107ec:	f003 fef9 	bl	80145e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68da      	ldr	r2, [r3, #12]
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107f8:	425b      	negs	r3, r3
 80107fa:	441a      	add	r2, r3
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	68da      	ldr	r2, [r3, #12]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	429a      	cmp	r2, r3
 801080a:	d207      	bcs.n	801081c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	689a      	ldr	r2, [r3, #8]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010814:	425b      	negs	r3, r3
 8010816:	441a      	add	r2, r3
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b02      	cmp	r3, #2
 8010820:	d105      	bne.n	801082e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	3b01      	subs	r3, #1
 801082c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	1c5a      	adds	r2, r3, #1
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010836:	697b      	ldr	r3, [r7, #20]
}
 8010838:	4618      	mov	r0, r3
 801083a:	3718      	adds	r7, #24
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801084e:	2b00      	cmp	r3, #0
 8010850:	d018      	beq.n	8010884 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	68da      	ldr	r2, [r3, #12]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801085a:	441a      	add	r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	68da      	ldr	r2, [r3, #12]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	429a      	cmp	r2, r3
 801086a:	d303      	bcc.n	8010874 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	68d9      	ldr	r1, [r3, #12]
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801087c:	461a      	mov	r2, r3
 801087e:	6838      	ldr	r0, [r7, #0]
 8010880:	f003 feaf 	bl	80145e2 <memcpy>
	}
}
 8010884:	bf00      	nop
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010894:	f001 fce8 	bl	8012268 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801089e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108a0:	e011      	b.n	80108c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d012      	beq.n	80108d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	3324      	adds	r3, #36	@ 0x24
 80108ae:	4618      	mov	r0, r3
 80108b0:	f000 fda6 	bl	8011400 <xTaskRemoveFromEventList>
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d001      	beq.n	80108be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80108ba:	f000 fe7f 	bl	80115bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	3b01      	subs	r3, #1
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	dce9      	bgt.n	80108a2 <prvUnlockQueue+0x16>
 80108ce:	e000      	b.n	80108d2 <prvUnlockQueue+0x46>
					break;
 80108d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	22ff      	movs	r2, #255	@ 0xff
 80108d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80108da:	f001 fcf7 	bl	80122cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80108de:	f001 fcc3 	bl	8012268 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80108e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108ea:	e011      	b.n	8010910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	691b      	ldr	r3, [r3, #16]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d012      	beq.n	801091a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3310      	adds	r3, #16
 80108f8:	4618      	mov	r0, r3
 80108fa:	f000 fd81 	bl	8011400 <xTaskRemoveFromEventList>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d001      	beq.n	8010908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010904:	f000 fe5a 	bl	80115bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010908:	7bbb      	ldrb	r3, [r7, #14]
 801090a:	3b01      	subs	r3, #1
 801090c:	b2db      	uxtb	r3, r3
 801090e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010914:	2b00      	cmp	r3, #0
 8010916:	dce9      	bgt.n	80108ec <prvUnlockQueue+0x60>
 8010918:	e000      	b.n	801091c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801091a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	22ff      	movs	r2, #255	@ 0xff
 8010920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010924:	f001 fcd2 	bl	80122cc <vPortExitCritical>
}
 8010928:	bf00      	nop
 801092a:	3710      	adds	r7, #16
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010938:	f001 fc96 	bl	8012268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010940:	2b00      	cmp	r3, #0
 8010942:	d102      	bne.n	801094a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010944:	2301      	movs	r3, #1
 8010946:	60fb      	str	r3, [r7, #12]
 8010948:	e001      	b.n	801094e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801094a:	2300      	movs	r3, #0
 801094c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801094e:	f001 fcbd 	bl	80122cc <vPortExitCritical>

	return xReturn;
 8010952:	68fb      	ldr	r3, [r7, #12]
}
 8010954:	4618      	mov	r0, r3
 8010956:	3710      	adds	r7, #16
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}

0801095c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b084      	sub	sp, #16
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010964:	f001 fc80 	bl	8012268 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010970:	429a      	cmp	r2, r3
 8010972:	d102      	bne.n	801097a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010974:	2301      	movs	r3, #1
 8010976:	60fb      	str	r3, [r7, #12]
 8010978:	e001      	b.n	801097e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801097a:	2300      	movs	r3, #0
 801097c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801097e:	f001 fca5 	bl	80122cc <vPortExitCritical>

	return xReturn;
 8010982:	68fb      	ldr	r3, [r7, #12]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3710      	adds	r7, #16
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801098c:	b480      	push	{r7}
 801098e:	b085      	sub	sp, #20
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010996:	2300      	movs	r3, #0
 8010998:	60fb      	str	r3, [r7, #12]
 801099a:	e014      	b.n	80109c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801099c:	4a0f      	ldr	r2, [pc, #60]	@ (80109dc <vQueueAddToRegistry+0x50>)
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d10b      	bne.n	80109c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80109a8:	490c      	ldr	r1, [pc, #48]	@ (80109dc <vQueueAddToRegistry+0x50>)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	683a      	ldr	r2, [r7, #0]
 80109ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80109b2:	4a0a      	ldr	r2, [pc, #40]	@ (80109dc <vQueueAddToRegistry+0x50>)
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	4413      	add	r3, r2
 80109ba:	687a      	ldr	r2, [r7, #4]
 80109bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80109be:	e006      	b.n	80109ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	3301      	adds	r3, #1
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2b07      	cmp	r3, #7
 80109ca:	d9e7      	bls.n	801099c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80109cc:	bf00      	nop
 80109ce:	bf00      	nop
 80109d0:	3714      	adds	r7, #20
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr
 80109da:	bf00      	nop
 80109dc:	24003130 	.word	0x24003130

080109e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	60b9      	str	r1, [r7, #8]
 80109ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80109f0:	f001 fc3a 	bl	8012268 <vPortEnterCritical>
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80109fa:	b25b      	sxtb	r3, r3
 80109fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a00:	d103      	bne.n	8010a0a <vQueueWaitForMessageRestricted+0x2a>
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	2200      	movs	r2, #0
 8010a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010a10:	b25b      	sxtb	r3, r3
 8010a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a16:	d103      	bne.n	8010a20 <vQueueWaitForMessageRestricted+0x40>
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010a20:	f001 fc54 	bl	80122cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d106      	bne.n	8010a3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	3324      	adds	r3, #36	@ 0x24
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	68b9      	ldr	r1, [r7, #8]
 8010a34:	4618      	mov	r0, r3
 8010a36:	f000 fcb7 	bl	80113a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010a3a:	6978      	ldr	r0, [r7, #20]
 8010a3c:	f7ff ff26 	bl	801088c <prvUnlockQueue>
	}
 8010a40:	bf00      	nop
 8010a42:	3718      	adds	r7, #24
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b08e      	sub	sp, #56	@ 0x38
 8010a4c:	af04      	add	r7, sp, #16
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d10b      	bne.n	8010a74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a60:	f383 8811 	msr	BASEPRI, r3
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	f3bf 8f4f 	dsb	sy
 8010a6c:	623b      	str	r3, [r7, #32]
}
 8010a6e:	bf00      	nop
 8010a70:	bf00      	nop
 8010a72:	e7fd      	b.n	8010a70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10b      	bne.n	8010a92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8010a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	61fb      	str	r3, [r7, #28]
}
 8010a8c:	bf00      	nop
 8010a8e:	bf00      	nop
 8010a90:	e7fd      	b.n	8010a8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010a92:	23a8      	movs	r3, #168	@ 0xa8
 8010a94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	2ba8      	cmp	r3, #168	@ 0xa8
 8010a9a:	d00b      	beq.n	8010ab4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
 8010aac:	61bb      	str	r3, [r7, #24]
}
 8010aae:	bf00      	nop
 8010ab0:	bf00      	nop
 8010ab2:	e7fd      	b.n	8010ab0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010ab4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d01e      	beq.n	8010afa <xTaskCreateStatic+0xb2>
 8010abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d01b      	beq.n	8010afa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ac4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010aca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ace:	2202      	movs	r2, #2
 8010ad0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	9303      	str	r3, [sp, #12]
 8010ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ada:	9302      	str	r3, [sp, #8]
 8010adc:	f107 0314 	add.w	r3, r7, #20
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	687a      	ldr	r2, [r7, #4]
 8010aea:	68b9      	ldr	r1, [r7, #8]
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f000 f851 	bl	8010b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010af2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010af4:	f000 f8f6 	bl	8010ce4 <prvAddNewTaskToReadyList>
 8010af8:	e001      	b.n	8010afe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010afa:	2300      	movs	r3, #0
 8010afc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010afe:	697b      	ldr	r3, [r7, #20]
	}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3728      	adds	r7, #40	@ 0x28
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08c      	sub	sp, #48	@ 0x30
 8010b0c:	af04      	add	r7, sp, #16
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	603b      	str	r3, [r7, #0]
 8010b14:	4613      	mov	r3, r2
 8010b16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010b18:	88fb      	ldrh	r3, [r7, #6]
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f001 fcc5 	bl	80124ac <pvPortMalloc>
 8010b22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d00e      	beq.n	8010b48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010b2a:	20a8      	movs	r0, #168	@ 0xa8
 8010b2c:	f001 fcbe 	bl	80124ac <pvPortMalloc>
 8010b30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d003      	beq.n	8010b40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	697a      	ldr	r2, [r7, #20]
 8010b3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8010b3e:	e005      	b.n	8010b4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b40:	6978      	ldr	r0, [r7, #20]
 8010b42:	f001 fd81 	bl	8012648 <vPortFree>
 8010b46:	e001      	b.n	8010b4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d017      	beq.n	8010b82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b5a:	88fa      	ldrh	r2, [r7, #6]
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	9303      	str	r3, [sp, #12]
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	9302      	str	r3, [sp, #8]
 8010b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b66:	9301      	str	r3, [sp, #4]
 8010b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	68b9      	ldr	r1, [r7, #8]
 8010b70:	68f8      	ldr	r0, [r7, #12]
 8010b72:	f000 f80f 	bl	8010b94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b76:	69f8      	ldr	r0, [r7, #28]
 8010b78:	f000 f8b4 	bl	8010ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	61bb      	str	r3, [r7, #24]
 8010b80:	e002      	b.n	8010b88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b82:	f04f 33ff 	mov.w	r3, #4294967295
 8010b86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010b88:	69bb      	ldr	r3, [r7, #24]
	}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3720      	adds	r7, #32
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
	...

08010b94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b088      	sub	sp, #32
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	60f8      	str	r0, [r7, #12]
 8010b9c:	60b9      	str	r1, [r7, #8]
 8010b9e:	607a      	str	r2, [r7, #4]
 8010ba0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	009b      	lsls	r3, r3, #2
 8010baa:	461a      	mov	r2, r3
 8010bac:	21a5      	movs	r1, #165	@ 0xa5
 8010bae:	f003 fbda 	bl	8014366 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010bb6:	6879      	ldr	r1, [r7, #4]
 8010bb8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8010bbc:	440b      	add	r3, r1
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	4413      	add	r3, r2
 8010bc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	f023 0307 	bic.w	r3, r3, #7
 8010bca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	f003 0307 	and.w	r3, r3, #7
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d00b      	beq.n	8010bee <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bda:	f383 8811 	msr	BASEPRI, r3
 8010bde:	f3bf 8f6f 	isb	sy
 8010be2:	f3bf 8f4f 	dsb	sy
 8010be6:	617b      	str	r3, [r7, #20]
}
 8010be8:	bf00      	nop
 8010bea:	bf00      	nop
 8010bec:	e7fd      	b.n	8010bea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d01f      	beq.n	8010c34 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	61fb      	str	r3, [r7, #28]
 8010bf8:	e012      	b.n	8010c20 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010bfa:	68ba      	ldr	r2, [r7, #8]
 8010bfc:	69fb      	ldr	r3, [r7, #28]
 8010bfe:	4413      	add	r3, r2
 8010c00:	7819      	ldrb	r1, [r3, #0]
 8010c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	4413      	add	r3, r2
 8010c08:	3334      	adds	r3, #52	@ 0x34
 8010c0a:	460a      	mov	r2, r1
 8010c0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	4413      	add	r3, r2
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d006      	beq.n	8010c28 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	61fb      	str	r3, [r7, #28]
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	2b0f      	cmp	r3, #15
 8010c24:	d9e9      	bls.n	8010bfa <prvInitialiseNewTask+0x66>
 8010c26:	e000      	b.n	8010c2a <prvInitialiseNewTask+0x96>
			{
				break;
 8010c28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010c32:	e003      	b.n	8010c3c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c3e:	2b37      	cmp	r3, #55	@ 0x37
 8010c40:	d901      	bls.n	8010c46 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c42:	2337      	movs	r3, #55	@ 0x37
 8010c44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c50:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c54:	2200      	movs	r2, #0
 8010c56:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c5a:	3304      	adds	r3, #4
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff f929 	bl	800feb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c64:	3318      	adds	r3, #24
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7ff f924 	bl	800feb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c84:	2200      	movs	r2, #0
 8010c86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c94:	3354      	adds	r3, #84	@ 0x54
 8010c96:	224c      	movs	r2, #76	@ 0x4c
 8010c98:	2100      	movs	r1, #0
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f003 fb63 	bl	8014366 <memset>
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8010cd8 <prvInitialiseNewTask+0x144>)
 8010ca4:	659a      	str	r2, [r3, #88]	@ 0x58
 8010ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8010cdc <prvInitialiseNewTask+0x148>)
 8010caa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cae:	4a0c      	ldr	r2, [pc, #48]	@ (8010ce0 <prvInitialiseNewTask+0x14c>)
 8010cb0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	68f9      	ldr	r1, [r7, #12]
 8010cb6:	69b8      	ldr	r0, [r7, #24]
 8010cb8:	f001 f9a4 	bl	8012004 <pxPortInitialiseStack>
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d002      	beq.n	8010cce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ccc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cce:	bf00      	nop
 8010cd0:	3720      	adds	r7, #32
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	240073c4 	.word	0x240073c4
 8010cdc:	2400742c 	.word	0x2400742c
 8010ce0:	24007494 	.word	0x24007494

08010ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010cec:	f001 fabc 	bl	8012268 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8010da8 <prvAddNewTaskToReadyList+0xc4>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8010da8 <prvAddNewTaskToReadyList+0xc4>)
 8010cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8010dac <prvAddNewTaskToReadyList+0xc8>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d109      	bne.n	8010d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d02:	4a2a      	ldr	r2, [pc, #168]	@ (8010dac <prvAddNewTaskToReadyList+0xc8>)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010d08:	4b27      	ldr	r3, [pc, #156]	@ (8010da8 <prvAddNewTaskToReadyList+0xc4>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d110      	bne.n	8010d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010d10:	f000 fc78 	bl	8011604 <prvInitialiseTaskLists>
 8010d14:	e00d      	b.n	8010d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010d16:	4b26      	ldr	r3, [pc, #152]	@ (8010db0 <prvAddNewTaskToReadyList+0xcc>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d109      	bne.n	8010d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d1e:	4b23      	ldr	r3, [pc, #140]	@ (8010dac <prvAddNewTaskToReadyList+0xc8>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d802      	bhi.n	8010d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8010dac <prvAddNewTaskToReadyList+0xc8>)
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010d32:	4b20      	ldr	r3, [pc, #128]	@ (8010db4 <prvAddNewTaskToReadyList+0xd0>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	3301      	adds	r3, #1
 8010d38:	4a1e      	ldr	r2, [pc, #120]	@ (8010db4 <prvAddNewTaskToReadyList+0xd0>)
 8010d3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8010db4 <prvAddNewTaskToReadyList+0xd0>)
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d48:	4b1b      	ldr	r3, [pc, #108]	@ (8010db8 <prvAddNewTaskToReadyList+0xd4>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d903      	bls.n	8010d58 <prvAddNewTaskToReadyList+0x74>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d54:	4a18      	ldr	r2, [pc, #96]	@ (8010db8 <prvAddNewTaskToReadyList+0xd4>)
 8010d56:	6013      	str	r3, [r2, #0]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	009b      	lsls	r3, r3, #2
 8010d60:	4413      	add	r3, r2
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	4a15      	ldr	r2, [pc, #84]	@ (8010dbc <prvAddNewTaskToReadyList+0xd8>)
 8010d66:	441a      	add	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	3304      	adds	r3, #4
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	4610      	mov	r0, r2
 8010d70:	f7ff f8ad 	bl	800fece <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d74:	f001 faaa 	bl	80122cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d78:	4b0d      	ldr	r3, [pc, #52]	@ (8010db0 <prvAddNewTaskToReadyList+0xcc>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00e      	beq.n	8010d9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d80:	4b0a      	ldr	r3, [pc, #40]	@ (8010dac <prvAddNewTaskToReadyList+0xc8>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	d207      	bcs.n	8010d9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8010dc0 <prvAddNewTaskToReadyList+0xdc>)
 8010d90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d94:	601a      	str	r2, [r3, #0]
 8010d96:	f3bf 8f4f 	dsb	sy
 8010d9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d9e:	bf00      	nop
 8010da0:	3708      	adds	r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	24003644 	.word	0x24003644
 8010dac:	24003170 	.word	0x24003170
 8010db0:	24003650 	.word	0x24003650
 8010db4:	24003660 	.word	0x24003660
 8010db8:	2400364c 	.word	0x2400364c
 8010dbc:	24003174 	.word	0x24003174
 8010dc0:	e000ed04 	.word	0xe000ed04

08010dc4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b08a      	sub	sp, #40	@ 0x28
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d10b      	bne.n	8010df0 <vTaskDelayUntil+0x2c>
	__asm volatile
 8010dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	617b      	str	r3, [r7, #20]
}
 8010dea:	bf00      	nop
 8010dec:	bf00      	nop
 8010dee:	e7fd      	b.n	8010dec <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d10b      	bne.n	8010e0e <vTaskDelayUntil+0x4a>
	__asm volatile
 8010df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dfa:	f383 8811 	msr	BASEPRI, r3
 8010dfe:	f3bf 8f6f 	isb	sy
 8010e02:	f3bf 8f4f 	dsb	sy
 8010e06:	613b      	str	r3, [r7, #16]
}
 8010e08:	bf00      	nop
 8010e0a:	bf00      	nop
 8010e0c:	e7fd      	b.n	8010e0a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8010e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8010eb8 <vTaskDelayUntil+0xf4>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00b      	beq.n	8010e2e <vTaskDelayUntil+0x6a>
	__asm volatile
 8010e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e1a:	f383 8811 	msr	BASEPRI, r3
 8010e1e:	f3bf 8f6f 	isb	sy
 8010e22:	f3bf 8f4f 	dsb	sy
 8010e26:	60fb      	str	r3, [r7, #12]
}
 8010e28:	bf00      	nop
 8010e2a:	bf00      	nop
 8010e2c:	e7fd      	b.n	8010e2a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8010e2e:	f000 f8b9 	bl	8010fa4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010e32:	4b22      	ldr	r3, [pc, #136]	@ (8010ebc <vTaskDelayUntil+0xf8>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	683a      	ldr	r2, [r7, #0]
 8010e3e:	4413      	add	r3, r2
 8010e40:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6a3a      	ldr	r2, [r7, #32]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d20b      	bcs.n	8010e64 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	69fa      	ldr	r2, [r7, #28]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d211      	bcs.n	8010e7a <vTaskDelayUntil+0xb6>
 8010e56:	69fa      	ldr	r2, [r7, #28]
 8010e58:	6a3b      	ldr	r3, [r7, #32]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d90d      	bls.n	8010e7a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010e5e:	2301      	movs	r3, #1
 8010e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e62:	e00a      	b.n	8010e7a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	69fa      	ldr	r2, [r7, #28]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d303      	bcc.n	8010e76 <vTaskDelayUntil+0xb2>
 8010e6e:	69fa      	ldr	r2, [r7, #28]
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d901      	bls.n	8010e7a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8010e76:	2301      	movs	r3, #1
 8010e78:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	69fa      	ldr	r2, [r7, #28]
 8010e7e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d006      	beq.n	8010e94 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010e86:	69fa      	ldr	r2, [r7, #28]
 8010e88:	6a3b      	ldr	r3, [r7, #32]
 8010e8a:	1ad3      	subs	r3, r2, r3
 8010e8c:	2100      	movs	r1, #0
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f000 fd0a 	bl	80118a8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010e94:	f000 f894 	bl	8010fc0 <xTaskResumeAll>
 8010e98:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d107      	bne.n	8010eb0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8010ea0:	4b07      	ldr	r3, [pc, #28]	@ (8010ec0 <vTaskDelayUntil+0xfc>)
 8010ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ea6:	601a      	str	r2, [r3, #0]
 8010ea8:	f3bf 8f4f 	dsb	sy
 8010eac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010eb0:	bf00      	nop
 8010eb2:	3728      	adds	r7, #40	@ 0x28
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	2400366c 	.word	0x2400366c
 8010ebc:	24003648 	.word	0x24003648
 8010ec0:	e000ed04 	.word	0xe000ed04

08010ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b08a      	sub	sp, #40	@ 0x28
 8010ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010ed2:	463a      	mov	r2, r7
 8010ed4:	1d39      	adds	r1, r7, #4
 8010ed6:	f107 0308 	add.w	r3, r7, #8
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fe ff96 	bl	800fe0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010ee0:	6839      	ldr	r1, [r7, #0]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	68ba      	ldr	r2, [r7, #8]
 8010ee6:	9202      	str	r2, [sp, #8]
 8010ee8:	9301      	str	r3, [sp, #4]
 8010eea:	2300      	movs	r3, #0
 8010eec:	9300      	str	r3, [sp, #0]
 8010eee:	2300      	movs	r3, #0
 8010ef0:	460a      	mov	r2, r1
 8010ef2:	4924      	ldr	r1, [pc, #144]	@ (8010f84 <vTaskStartScheduler+0xc0>)
 8010ef4:	4824      	ldr	r0, [pc, #144]	@ (8010f88 <vTaskStartScheduler+0xc4>)
 8010ef6:	f7ff fda7 	bl	8010a48 <xTaskCreateStatic>
 8010efa:	4603      	mov	r3, r0
 8010efc:	4a23      	ldr	r2, [pc, #140]	@ (8010f8c <vTaskStartScheduler+0xc8>)
 8010efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010f00:	4b22      	ldr	r3, [pc, #136]	@ (8010f8c <vTaskStartScheduler+0xc8>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d002      	beq.n	8010f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010f08:	2301      	movs	r3, #1
 8010f0a:	617b      	str	r3, [r7, #20]
 8010f0c:	e001      	b.n	8010f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d102      	bne.n	8010f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010f18:	f000 fd1a 	bl	8011950 <xTimerCreateTimerTask>
 8010f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d11b      	bne.n	8010f5c <vTaskStartScheduler+0x98>
	__asm volatile
 8010f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f28:	f383 8811 	msr	BASEPRI, r3
 8010f2c:	f3bf 8f6f 	isb	sy
 8010f30:	f3bf 8f4f 	dsb	sy
 8010f34:	613b      	str	r3, [r7, #16]
}
 8010f36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010f38:	4b15      	ldr	r3, [pc, #84]	@ (8010f90 <vTaskStartScheduler+0xcc>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	3354      	adds	r3, #84	@ 0x54
 8010f3e:	4a15      	ldr	r2, [pc, #84]	@ (8010f94 <vTaskStartScheduler+0xd0>)
 8010f40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010f42:	4b15      	ldr	r3, [pc, #84]	@ (8010f98 <vTaskStartScheduler+0xd4>)
 8010f44:	f04f 32ff 	mov.w	r2, #4294967295
 8010f48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010f4a:	4b14      	ldr	r3, [pc, #80]	@ (8010f9c <vTaskStartScheduler+0xd8>)
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010f50:	4b13      	ldr	r3, [pc, #76]	@ (8010fa0 <vTaskStartScheduler+0xdc>)
 8010f52:	2200      	movs	r2, #0
 8010f54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010f56:	f001 f8e3 	bl	8012120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010f5a:	e00f      	b.n	8010f7c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f62:	d10b      	bne.n	8010f7c <vTaskStartScheduler+0xb8>
	__asm volatile
 8010f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f68:	f383 8811 	msr	BASEPRI, r3
 8010f6c:	f3bf 8f6f 	isb	sy
 8010f70:	f3bf 8f4f 	dsb	sy
 8010f74:	60fb      	str	r3, [r7, #12]
}
 8010f76:	bf00      	nop
 8010f78:	bf00      	nop
 8010f7a:	e7fd      	b.n	8010f78 <vTaskStartScheduler+0xb4>
}
 8010f7c:	bf00      	nop
 8010f7e:	3718      	adds	r7, #24
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	080171b8 	.word	0x080171b8
 8010f88:	080115d5 	.word	0x080115d5
 8010f8c:	24003668 	.word	0x24003668
 8010f90:	24003170 	.word	0x24003170
 8010f94:	240001f8 	.word	0x240001f8
 8010f98:	24003664 	.word	0x24003664
 8010f9c:	24003650 	.word	0x24003650
 8010fa0:	24003648 	.word	0x24003648

08010fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010fa8:	4b04      	ldr	r3, [pc, #16]	@ (8010fbc <vTaskSuspendAll+0x18>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	3301      	adds	r3, #1
 8010fae:	4a03      	ldr	r2, [pc, #12]	@ (8010fbc <vTaskSuspendAll+0x18>)
 8010fb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010fb2:	bf00      	nop
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr
 8010fbc:	2400366c 	.word	0x2400366c

08010fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010fce:	4b42      	ldr	r3, [pc, #264]	@ (80110d8 <xTaskResumeAll+0x118>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d10b      	bne.n	8010fee <xTaskResumeAll+0x2e>
	__asm volatile
 8010fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fda:	f383 8811 	msr	BASEPRI, r3
 8010fde:	f3bf 8f6f 	isb	sy
 8010fe2:	f3bf 8f4f 	dsb	sy
 8010fe6:	603b      	str	r3, [r7, #0]
}
 8010fe8:	bf00      	nop
 8010fea:	bf00      	nop
 8010fec:	e7fd      	b.n	8010fea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010fee:	f001 f93b 	bl	8012268 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010ff2:	4b39      	ldr	r3, [pc, #228]	@ (80110d8 <xTaskResumeAll+0x118>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	4a37      	ldr	r2, [pc, #220]	@ (80110d8 <xTaskResumeAll+0x118>)
 8010ffa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ffc:	4b36      	ldr	r3, [pc, #216]	@ (80110d8 <xTaskResumeAll+0x118>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d162      	bne.n	80110ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011004:	4b35      	ldr	r3, [pc, #212]	@ (80110dc <xTaskResumeAll+0x11c>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d05e      	beq.n	80110ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801100c:	e02f      	b.n	801106e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801100e:	4b34      	ldr	r3, [pc, #208]	@ (80110e0 <xTaskResumeAll+0x120>)
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	3318      	adds	r3, #24
 801101a:	4618      	mov	r0, r3
 801101c:	f7fe ffb4 	bl	800ff88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	3304      	adds	r3, #4
 8011024:	4618      	mov	r0, r3
 8011026:	f7fe ffaf 	bl	800ff88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801102e:	4b2d      	ldr	r3, [pc, #180]	@ (80110e4 <xTaskResumeAll+0x124>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	429a      	cmp	r2, r3
 8011034:	d903      	bls.n	801103e <xTaskResumeAll+0x7e>
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801103a:	4a2a      	ldr	r2, [pc, #168]	@ (80110e4 <xTaskResumeAll+0x124>)
 801103c:	6013      	str	r3, [r2, #0]
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011042:	4613      	mov	r3, r2
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4413      	add	r3, r2
 8011048:	009b      	lsls	r3, r3, #2
 801104a:	4a27      	ldr	r2, [pc, #156]	@ (80110e8 <xTaskResumeAll+0x128>)
 801104c:	441a      	add	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	3304      	adds	r3, #4
 8011052:	4619      	mov	r1, r3
 8011054:	4610      	mov	r0, r2
 8011056:	f7fe ff3a 	bl	800fece <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801105e:	4b23      	ldr	r3, [pc, #140]	@ (80110ec <xTaskResumeAll+0x12c>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011064:	429a      	cmp	r2, r3
 8011066:	d302      	bcc.n	801106e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011068:	4b21      	ldr	r3, [pc, #132]	@ (80110f0 <xTaskResumeAll+0x130>)
 801106a:	2201      	movs	r2, #1
 801106c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801106e:	4b1c      	ldr	r3, [pc, #112]	@ (80110e0 <xTaskResumeAll+0x120>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1cb      	bne.n	801100e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d001      	beq.n	8011080 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801107c:	f000 fb66 	bl	801174c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011080:	4b1c      	ldr	r3, [pc, #112]	@ (80110f4 <xTaskResumeAll+0x134>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d010      	beq.n	80110ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801108c:	f000 f846 	bl	801111c <xTaskIncrementTick>
 8011090:	4603      	mov	r3, r0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d002      	beq.n	801109c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011096:	4b16      	ldr	r3, [pc, #88]	@ (80110f0 <xTaskResumeAll+0x130>)
 8011098:	2201      	movs	r2, #1
 801109a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	3b01      	subs	r3, #1
 80110a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d1f1      	bne.n	801108c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80110a8:	4b12      	ldr	r3, [pc, #72]	@ (80110f4 <xTaskResumeAll+0x134>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80110ae:	4b10      	ldr	r3, [pc, #64]	@ (80110f0 <xTaskResumeAll+0x130>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d009      	beq.n	80110ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80110b6:	2301      	movs	r3, #1
 80110b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80110ba:	4b0f      	ldr	r3, [pc, #60]	@ (80110f8 <xTaskResumeAll+0x138>)
 80110bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80110ca:	f001 f8ff 	bl	80122cc <vPortExitCritical>

	return xAlreadyYielded;
 80110ce:	68bb      	ldr	r3, [r7, #8]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	2400366c 	.word	0x2400366c
 80110dc:	24003644 	.word	0x24003644
 80110e0:	24003604 	.word	0x24003604
 80110e4:	2400364c 	.word	0x2400364c
 80110e8:	24003174 	.word	0x24003174
 80110ec:	24003170 	.word	0x24003170
 80110f0:	24003658 	.word	0x24003658
 80110f4:	24003654 	.word	0x24003654
 80110f8:	e000ed04 	.word	0xe000ed04

080110fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011102:	4b05      	ldr	r3, [pc, #20]	@ (8011118 <xTaskGetTickCount+0x1c>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011108:	687b      	ldr	r3, [r7, #4]
}
 801110a:	4618      	mov	r0, r3
 801110c:	370c      	adds	r7, #12
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop
 8011118:	24003648 	.word	0x24003648

0801111c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011122:	2300      	movs	r3, #0
 8011124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011126:	4b4f      	ldr	r3, [pc, #316]	@ (8011264 <xTaskIncrementTick+0x148>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	f040 8090 	bne.w	8011250 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011130:	4b4d      	ldr	r3, [pc, #308]	@ (8011268 <xTaskIncrementTick+0x14c>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	3301      	adds	r3, #1
 8011136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011138:	4a4b      	ldr	r2, [pc, #300]	@ (8011268 <xTaskIncrementTick+0x14c>)
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d121      	bne.n	8011188 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011144:	4b49      	ldr	r3, [pc, #292]	@ (801126c <xTaskIncrementTick+0x150>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00b      	beq.n	8011166 <xTaskIncrementTick+0x4a>
	__asm volatile
 801114e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011152:	f383 8811 	msr	BASEPRI, r3
 8011156:	f3bf 8f6f 	isb	sy
 801115a:	f3bf 8f4f 	dsb	sy
 801115e:	603b      	str	r3, [r7, #0]
}
 8011160:	bf00      	nop
 8011162:	bf00      	nop
 8011164:	e7fd      	b.n	8011162 <xTaskIncrementTick+0x46>
 8011166:	4b41      	ldr	r3, [pc, #260]	@ (801126c <xTaskIncrementTick+0x150>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	60fb      	str	r3, [r7, #12]
 801116c:	4b40      	ldr	r3, [pc, #256]	@ (8011270 <xTaskIncrementTick+0x154>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	4a3e      	ldr	r2, [pc, #248]	@ (801126c <xTaskIncrementTick+0x150>)
 8011172:	6013      	str	r3, [r2, #0]
 8011174:	4a3e      	ldr	r2, [pc, #248]	@ (8011270 <xTaskIncrementTick+0x154>)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	6013      	str	r3, [r2, #0]
 801117a:	4b3e      	ldr	r3, [pc, #248]	@ (8011274 <xTaskIncrementTick+0x158>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	3301      	adds	r3, #1
 8011180:	4a3c      	ldr	r2, [pc, #240]	@ (8011274 <xTaskIncrementTick+0x158>)
 8011182:	6013      	str	r3, [r2, #0]
 8011184:	f000 fae2 	bl	801174c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011188:	4b3b      	ldr	r3, [pc, #236]	@ (8011278 <xTaskIncrementTick+0x15c>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	693a      	ldr	r2, [r7, #16]
 801118e:	429a      	cmp	r2, r3
 8011190:	d349      	bcc.n	8011226 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011192:	4b36      	ldr	r3, [pc, #216]	@ (801126c <xTaskIncrementTick+0x150>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d104      	bne.n	80111a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801119c:	4b36      	ldr	r3, [pc, #216]	@ (8011278 <xTaskIncrementTick+0x15c>)
 801119e:	f04f 32ff 	mov.w	r2, #4294967295
 80111a2:	601a      	str	r2, [r3, #0]
					break;
 80111a4:	e03f      	b.n	8011226 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111a6:	4b31      	ldr	r3, [pc, #196]	@ (801126c <xTaskIncrementTick+0x150>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80111b6:	693a      	ldr	r2, [r7, #16]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d203      	bcs.n	80111c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80111be:	4a2e      	ldr	r2, [pc, #184]	@ (8011278 <xTaskIncrementTick+0x15c>)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80111c4:	e02f      	b.n	8011226 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	3304      	adds	r3, #4
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fe fedc 	bl	800ff88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d004      	beq.n	80111e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	3318      	adds	r3, #24
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fe fed3 	bl	800ff88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111e6:	4b25      	ldr	r3, [pc, #148]	@ (801127c <xTaskIncrementTick+0x160>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d903      	bls.n	80111f6 <xTaskIncrementTick+0xda>
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111f2:	4a22      	ldr	r2, [pc, #136]	@ (801127c <xTaskIncrementTick+0x160>)
 80111f4:	6013      	str	r3, [r2, #0]
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111fa:	4613      	mov	r3, r2
 80111fc:	009b      	lsls	r3, r3, #2
 80111fe:	4413      	add	r3, r2
 8011200:	009b      	lsls	r3, r3, #2
 8011202:	4a1f      	ldr	r2, [pc, #124]	@ (8011280 <xTaskIncrementTick+0x164>)
 8011204:	441a      	add	r2, r3
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	3304      	adds	r3, #4
 801120a:	4619      	mov	r1, r3
 801120c:	4610      	mov	r0, r2
 801120e:	f7fe fe5e 	bl	800fece <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011216:	4b1b      	ldr	r3, [pc, #108]	@ (8011284 <xTaskIncrementTick+0x168>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801121c:	429a      	cmp	r2, r3
 801121e:	d3b8      	bcc.n	8011192 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011220:	2301      	movs	r3, #1
 8011222:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011224:	e7b5      	b.n	8011192 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011226:	4b17      	ldr	r3, [pc, #92]	@ (8011284 <xTaskIncrementTick+0x168>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801122c:	4914      	ldr	r1, [pc, #80]	@ (8011280 <xTaskIncrementTick+0x164>)
 801122e:	4613      	mov	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	4413      	add	r3, r2
 8011234:	009b      	lsls	r3, r3, #2
 8011236:	440b      	add	r3, r1
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d901      	bls.n	8011242 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801123e:	2301      	movs	r3, #1
 8011240:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011242:	4b11      	ldr	r3, [pc, #68]	@ (8011288 <xTaskIncrementTick+0x16c>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d007      	beq.n	801125a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 801124a:	2301      	movs	r3, #1
 801124c:	617b      	str	r3, [r7, #20]
 801124e:	e004      	b.n	801125a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011250:	4b0e      	ldr	r3, [pc, #56]	@ (801128c <xTaskIncrementTick+0x170>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	3301      	adds	r3, #1
 8011256:	4a0d      	ldr	r2, [pc, #52]	@ (801128c <xTaskIncrementTick+0x170>)
 8011258:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801125a:	697b      	ldr	r3, [r7, #20]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3718      	adds	r7, #24
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	2400366c 	.word	0x2400366c
 8011268:	24003648 	.word	0x24003648
 801126c:	240035fc 	.word	0x240035fc
 8011270:	24003600 	.word	0x24003600
 8011274:	2400365c 	.word	0x2400365c
 8011278:	24003664 	.word	0x24003664
 801127c:	2400364c 	.word	0x2400364c
 8011280:	24003174 	.word	0x24003174
 8011284:	24003170 	.word	0x24003170
 8011288:	24003658 	.word	0x24003658
 801128c:	24003654 	.word	0x24003654

08011290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011290:	b480      	push	{r7}
 8011292:	b085      	sub	sp, #20
 8011294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011296:	4b2b      	ldr	r3, [pc, #172]	@ (8011344 <vTaskSwitchContext+0xb4>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d003      	beq.n	80112a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801129e:	4b2a      	ldr	r3, [pc, #168]	@ (8011348 <vTaskSwitchContext+0xb8>)
 80112a0:	2201      	movs	r2, #1
 80112a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80112a4:	e047      	b.n	8011336 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80112a6:	4b28      	ldr	r3, [pc, #160]	@ (8011348 <vTaskSwitchContext+0xb8>)
 80112a8:	2200      	movs	r2, #0
 80112aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112ac:	4b27      	ldr	r3, [pc, #156]	@ (801134c <vTaskSwitchContext+0xbc>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	60fb      	str	r3, [r7, #12]
 80112b2:	e011      	b.n	80112d8 <vTaskSwitchContext+0x48>
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d10b      	bne.n	80112d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80112ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112be:	f383 8811 	msr	BASEPRI, r3
 80112c2:	f3bf 8f6f 	isb	sy
 80112c6:	f3bf 8f4f 	dsb	sy
 80112ca:	607b      	str	r3, [r7, #4]
}
 80112cc:	bf00      	nop
 80112ce:	bf00      	nop
 80112d0:	e7fd      	b.n	80112ce <vTaskSwitchContext+0x3e>
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3b01      	subs	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
 80112d8:	491d      	ldr	r1, [pc, #116]	@ (8011350 <vTaskSwitchContext+0xc0>)
 80112da:	68fa      	ldr	r2, [r7, #12]
 80112dc:	4613      	mov	r3, r2
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4413      	add	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	440b      	add	r3, r1
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d0e3      	beq.n	80112b4 <vTaskSwitchContext+0x24>
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	4613      	mov	r3, r2
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	4413      	add	r3, r2
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4a16      	ldr	r2, [pc, #88]	@ (8011350 <vTaskSwitchContext+0xc0>)
 80112f8:	4413      	add	r3, r2
 80112fa:	60bb      	str	r3, [r7, #8]
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	685a      	ldr	r2, [r3, #4]
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	605a      	str	r2, [r3, #4]
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	685a      	ldr	r2, [r3, #4]
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	3308      	adds	r3, #8
 801130e:	429a      	cmp	r2, r3
 8011310:	d104      	bne.n	801131c <vTaskSwitchContext+0x8c>
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	685a      	ldr	r2, [r3, #4]
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	605a      	str	r2, [r3, #4]
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	685b      	ldr	r3, [r3, #4]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	4a0c      	ldr	r2, [pc, #48]	@ (8011354 <vTaskSwitchContext+0xc4>)
 8011324:	6013      	str	r3, [r2, #0]
 8011326:	4a09      	ldr	r2, [pc, #36]	@ (801134c <vTaskSwitchContext+0xbc>)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801132c:	4b09      	ldr	r3, [pc, #36]	@ (8011354 <vTaskSwitchContext+0xc4>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	3354      	adds	r3, #84	@ 0x54
 8011332:	4a09      	ldr	r2, [pc, #36]	@ (8011358 <vTaskSwitchContext+0xc8>)
 8011334:	6013      	str	r3, [r2, #0]
}
 8011336:	bf00      	nop
 8011338:	3714      	adds	r7, #20
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
 8011342:	bf00      	nop
 8011344:	2400366c 	.word	0x2400366c
 8011348:	24003658 	.word	0x24003658
 801134c:	2400364c 	.word	0x2400364c
 8011350:	24003174 	.word	0x24003174
 8011354:	24003170 	.word	0x24003170
 8011358:	240001f8 	.word	0x240001f8

0801135c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d10b      	bne.n	8011384 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801136c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011370:	f383 8811 	msr	BASEPRI, r3
 8011374:	f3bf 8f6f 	isb	sy
 8011378:	f3bf 8f4f 	dsb	sy
 801137c:	60fb      	str	r3, [r7, #12]
}
 801137e:	bf00      	nop
 8011380:	bf00      	nop
 8011382:	e7fd      	b.n	8011380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011384:	4b07      	ldr	r3, [pc, #28]	@ (80113a4 <vTaskPlaceOnEventList+0x48>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	3318      	adds	r3, #24
 801138a:	4619      	mov	r1, r3
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7fe fdc2 	bl	800ff16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011392:	2101      	movs	r1, #1
 8011394:	6838      	ldr	r0, [r7, #0]
 8011396:	f000 fa87 	bl	80118a8 <prvAddCurrentTaskToDelayedList>
}
 801139a:	bf00      	nop
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}
 80113a2:	bf00      	nop
 80113a4:	24003170 	.word	0x24003170

080113a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d10b      	bne.n	80113d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80113ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113be:	f383 8811 	msr	BASEPRI, r3
 80113c2:	f3bf 8f6f 	isb	sy
 80113c6:	f3bf 8f4f 	dsb	sy
 80113ca:	617b      	str	r3, [r7, #20]
}
 80113cc:	bf00      	nop
 80113ce:	bf00      	nop
 80113d0:	e7fd      	b.n	80113ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80113d2:	4b0a      	ldr	r3, [pc, #40]	@ (80113fc <vTaskPlaceOnEventListRestricted+0x54>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	3318      	adds	r3, #24
 80113d8:	4619      	mov	r1, r3
 80113da:	68f8      	ldr	r0, [r7, #12]
 80113dc:	f7fe fd77 	bl	800fece <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d002      	beq.n	80113ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80113e6:	f04f 33ff 	mov.w	r3, #4294967295
 80113ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80113ec:	6879      	ldr	r1, [r7, #4]
 80113ee:	68b8      	ldr	r0, [r7, #8]
 80113f0:	f000 fa5a 	bl	80118a8 <prvAddCurrentTaskToDelayedList>
	}
 80113f4:	bf00      	nop
 80113f6:	3718      	adds	r7, #24
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	24003170 	.word	0x24003170

08011400 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b086      	sub	sp, #24
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d10b      	bne.n	801142e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801141a:	f383 8811 	msr	BASEPRI, r3
 801141e:	f3bf 8f6f 	isb	sy
 8011422:	f3bf 8f4f 	dsb	sy
 8011426:	60fb      	str	r3, [r7, #12]
}
 8011428:	bf00      	nop
 801142a:	bf00      	nop
 801142c:	e7fd      	b.n	801142a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	3318      	adds	r3, #24
 8011432:	4618      	mov	r0, r3
 8011434:	f7fe fda8 	bl	800ff88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011438:	4b1d      	ldr	r3, [pc, #116]	@ (80114b0 <xTaskRemoveFromEventList+0xb0>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d11d      	bne.n	801147c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	3304      	adds	r3, #4
 8011444:	4618      	mov	r0, r3
 8011446:	f7fe fd9f 	bl	800ff88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801144e:	4b19      	ldr	r3, [pc, #100]	@ (80114b4 <xTaskRemoveFromEventList+0xb4>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	429a      	cmp	r2, r3
 8011454:	d903      	bls.n	801145e <xTaskRemoveFromEventList+0x5e>
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801145a:	4a16      	ldr	r2, [pc, #88]	@ (80114b4 <xTaskRemoveFromEventList+0xb4>)
 801145c:	6013      	str	r3, [r2, #0]
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011462:	4613      	mov	r3, r2
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	4413      	add	r3, r2
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4a13      	ldr	r2, [pc, #76]	@ (80114b8 <xTaskRemoveFromEventList+0xb8>)
 801146c:	441a      	add	r2, r3
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	3304      	adds	r3, #4
 8011472:	4619      	mov	r1, r3
 8011474:	4610      	mov	r0, r2
 8011476:	f7fe fd2a 	bl	800fece <vListInsertEnd>
 801147a:	e005      	b.n	8011488 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	3318      	adds	r3, #24
 8011480:	4619      	mov	r1, r3
 8011482:	480e      	ldr	r0, [pc, #56]	@ (80114bc <xTaskRemoveFromEventList+0xbc>)
 8011484:	f7fe fd23 	bl	800fece <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801148c:	4b0c      	ldr	r3, [pc, #48]	@ (80114c0 <xTaskRemoveFromEventList+0xc0>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011492:	429a      	cmp	r2, r3
 8011494:	d905      	bls.n	80114a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011496:	2301      	movs	r3, #1
 8011498:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801149a:	4b0a      	ldr	r3, [pc, #40]	@ (80114c4 <xTaskRemoveFromEventList+0xc4>)
 801149c:	2201      	movs	r2, #1
 801149e:	601a      	str	r2, [r3, #0]
 80114a0:	e001      	b.n	80114a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80114a2:	2300      	movs	r3, #0
 80114a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80114a6:	697b      	ldr	r3, [r7, #20]
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3718      	adds	r7, #24
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	2400366c 	.word	0x2400366c
 80114b4:	2400364c 	.word	0x2400364c
 80114b8:	24003174 	.word	0x24003174
 80114bc:	24003604 	.word	0x24003604
 80114c0:	24003170 	.word	0x24003170
 80114c4:	24003658 	.word	0x24003658

080114c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80114d0:	4b06      	ldr	r3, [pc, #24]	@ (80114ec <vTaskInternalSetTimeOutState+0x24>)
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80114d8:	4b05      	ldr	r3, [pc, #20]	@ (80114f0 <vTaskInternalSetTimeOutState+0x28>)
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	605a      	str	r2, [r3, #4]
}
 80114e0:	bf00      	nop
 80114e2:	370c      	adds	r7, #12
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	2400365c 	.word	0x2400365c
 80114f0:	24003648 	.word	0x24003648

080114f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b088      	sub	sp, #32
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10b      	bne.n	801151c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	613b      	str	r3, [r7, #16]
}
 8011516:	bf00      	nop
 8011518:	bf00      	nop
 801151a:	e7fd      	b.n	8011518 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d10b      	bne.n	801153a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8011522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011526:	f383 8811 	msr	BASEPRI, r3
 801152a:	f3bf 8f6f 	isb	sy
 801152e:	f3bf 8f4f 	dsb	sy
 8011532:	60fb      	str	r3, [r7, #12]
}
 8011534:	bf00      	nop
 8011536:	bf00      	nop
 8011538:	e7fd      	b.n	8011536 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801153a:	f000 fe95 	bl	8012268 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801153e:	4b1d      	ldr	r3, [pc, #116]	@ (80115b4 <xTaskCheckForTimeOut+0xc0>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	69ba      	ldr	r2, [r7, #24]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011556:	d102      	bne.n	801155e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011558:	2300      	movs	r3, #0
 801155a:	61fb      	str	r3, [r7, #28]
 801155c:	e023      	b.n	80115a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	4b15      	ldr	r3, [pc, #84]	@ (80115b8 <xTaskCheckForTimeOut+0xc4>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	d007      	beq.n	801157a <xTaskCheckForTimeOut+0x86>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	69ba      	ldr	r2, [r7, #24]
 8011570:	429a      	cmp	r2, r3
 8011572:	d302      	bcc.n	801157a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011574:	2301      	movs	r3, #1
 8011576:	61fb      	str	r3, [r7, #28]
 8011578:	e015      	b.n	80115a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	697a      	ldr	r2, [r7, #20]
 8011580:	429a      	cmp	r2, r3
 8011582:	d20b      	bcs.n	801159c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	681a      	ldr	r2, [r3, #0]
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	1ad2      	subs	r2, r2, r3
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f7ff ff99 	bl	80114c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011596:	2300      	movs	r3, #0
 8011598:	61fb      	str	r3, [r7, #28]
 801159a:	e004      	b.n	80115a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	2200      	movs	r2, #0
 80115a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80115a2:	2301      	movs	r3, #1
 80115a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80115a6:	f000 fe91 	bl	80122cc <vPortExitCritical>

	return xReturn;
 80115aa:	69fb      	ldr	r3, [r7, #28]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3720      	adds	r7, #32
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	24003648 	.word	0x24003648
 80115b8:	2400365c 	.word	0x2400365c

080115bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80115bc:	b480      	push	{r7}
 80115be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80115c0:	4b03      	ldr	r3, [pc, #12]	@ (80115d0 <vTaskMissedYield+0x14>)
 80115c2:	2201      	movs	r2, #1
 80115c4:	601a      	str	r2, [r3, #0]
}
 80115c6:	bf00      	nop
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr
 80115d0:	24003658 	.word	0x24003658

080115d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b082      	sub	sp, #8
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80115dc:	f000 f852 	bl	8011684 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80115e0:	4b06      	ldr	r3, [pc, #24]	@ (80115fc <prvIdleTask+0x28>)
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d9f9      	bls.n	80115dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80115e8:	4b05      	ldr	r3, [pc, #20]	@ (8011600 <prvIdleTask+0x2c>)
 80115ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115ee:	601a      	str	r2, [r3, #0]
 80115f0:	f3bf 8f4f 	dsb	sy
 80115f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80115f8:	e7f0      	b.n	80115dc <prvIdleTask+0x8>
 80115fa:	bf00      	nop
 80115fc:	24003174 	.word	0x24003174
 8011600:	e000ed04 	.word	0xe000ed04

08011604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b082      	sub	sp, #8
 8011608:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801160a:	2300      	movs	r3, #0
 801160c:	607b      	str	r3, [r7, #4]
 801160e:	e00c      	b.n	801162a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011610:	687a      	ldr	r2, [r7, #4]
 8011612:	4613      	mov	r3, r2
 8011614:	009b      	lsls	r3, r3, #2
 8011616:	4413      	add	r3, r2
 8011618:	009b      	lsls	r3, r3, #2
 801161a:	4a12      	ldr	r2, [pc, #72]	@ (8011664 <prvInitialiseTaskLists+0x60>)
 801161c:	4413      	add	r3, r2
 801161e:	4618      	mov	r0, r3
 8011620:	f7fe fc28 	bl	800fe74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	3301      	adds	r3, #1
 8011628:	607b      	str	r3, [r7, #4]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2b37      	cmp	r3, #55	@ 0x37
 801162e:	d9ef      	bls.n	8011610 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011630:	480d      	ldr	r0, [pc, #52]	@ (8011668 <prvInitialiseTaskLists+0x64>)
 8011632:	f7fe fc1f 	bl	800fe74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011636:	480d      	ldr	r0, [pc, #52]	@ (801166c <prvInitialiseTaskLists+0x68>)
 8011638:	f7fe fc1c 	bl	800fe74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801163c:	480c      	ldr	r0, [pc, #48]	@ (8011670 <prvInitialiseTaskLists+0x6c>)
 801163e:	f7fe fc19 	bl	800fe74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011642:	480c      	ldr	r0, [pc, #48]	@ (8011674 <prvInitialiseTaskLists+0x70>)
 8011644:	f7fe fc16 	bl	800fe74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011648:	480b      	ldr	r0, [pc, #44]	@ (8011678 <prvInitialiseTaskLists+0x74>)
 801164a:	f7fe fc13 	bl	800fe74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801164e:	4b0b      	ldr	r3, [pc, #44]	@ (801167c <prvInitialiseTaskLists+0x78>)
 8011650:	4a05      	ldr	r2, [pc, #20]	@ (8011668 <prvInitialiseTaskLists+0x64>)
 8011652:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011654:	4b0a      	ldr	r3, [pc, #40]	@ (8011680 <prvInitialiseTaskLists+0x7c>)
 8011656:	4a05      	ldr	r2, [pc, #20]	@ (801166c <prvInitialiseTaskLists+0x68>)
 8011658:	601a      	str	r2, [r3, #0]
}
 801165a:	bf00      	nop
 801165c:	3708      	adds	r7, #8
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	24003174 	.word	0x24003174
 8011668:	240035d4 	.word	0x240035d4
 801166c:	240035e8 	.word	0x240035e8
 8011670:	24003604 	.word	0x24003604
 8011674:	24003618 	.word	0x24003618
 8011678:	24003630 	.word	0x24003630
 801167c:	240035fc 	.word	0x240035fc
 8011680:	24003600 	.word	0x24003600

08011684 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801168a:	e019      	b.n	80116c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801168c:	f000 fdec 	bl	8012268 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011690:	4b10      	ldr	r3, [pc, #64]	@ (80116d4 <prvCheckTasksWaitingTermination+0x50>)
 8011692:	68db      	ldr	r3, [r3, #12]
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	3304      	adds	r3, #4
 801169c:	4618      	mov	r0, r3
 801169e:	f7fe fc73 	bl	800ff88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80116a2:	4b0d      	ldr	r3, [pc, #52]	@ (80116d8 <prvCheckTasksWaitingTermination+0x54>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	3b01      	subs	r3, #1
 80116a8:	4a0b      	ldr	r2, [pc, #44]	@ (80116d8 <prvCheckTasksWaitingTermination+0x54>)
 80116aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80116ac:	4b0b      	ldr	r3, [pc, #44]	@ (80116dc <prvCheckTasksWaitingTermination+0x58>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	3b01      	subs	r3, #1
 80116b2:	4a0a      	ldr	r2, [pc, #40]	@ (80116dc <prvCheckTasksWaitingTermination+0x58>)
 80116b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80116b6:	f000 fe09 	bl	80122cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f810 	bl	80116e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80116c0:	4b06      	ldr	r3, [pc, #24]	@ (80116dc <prvCheckTasksWaitingTermination+0x58>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d1e1      	bne.n	801168c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80116c8:	bf00      	nop
 80116ca:	bf00      	nop
 80116cc:	3708      	adds	r7, #8
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
 80116d2:	bf00      	nop
 80116d4:	24003618 	.word	0x24003618
 80116d8:	24003644 	.word	0x24003644
 80116dc:	2400362c 	.word	0x2400362c

080116e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	3354      	adds	r3, #84	@ 0x54
 80116ec:	4618      	mov	r0, r3
 80116ee:	f002 feb7 	bl	8014460 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d108      	bne.n	801170e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011700:	4618      	mov	r0, r3
 8011702:	f000 ffa1 	bl	8012648 <vPortFree>
				vPortFree( pxTCB );
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f000 ff9e 	bl	8012648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801170c:	e019      	b.n	8011742 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011714:	2b01      	cmp	r3, #1
 8011716:	d103      	bne.n	8011720 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f000 ff95 	bl	8012648 <vPortFree>
	}
 801171e:	e010      	b.n	8011742 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011726:	2b02      	cmp	r3, #2
 8011728:	d00b      	beq.n	8011742 <prvDeleteTCB+0x62>
	__asm volatile
 801172a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801172e:	f383 8811 	msr	BASEPRI, r3
 8011732:	f3bf 8f6f 	isb	sy
 8011736:	f3bf 8f4f 	dsb	sy
 801173a:	60fb      	str	r3, [r7, #12]
}
 801173c:	bf00      	nop
 801173e:	bf00      	nop
 8011740:	e7fd      	b.n	801173e <prvDeleteTCB+0x5e>
	}
 8011742:	bf00      	nop
 8011744:	3710      	adds	r7, #16
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
	...

0801174c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011752:	4b0c      	ldr	r3, [pc, #48]	@ (8011784 <prvResetNextTaskUnblockTime+0x38>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d104      	bne.n	8011766 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801175c:	4b0a      	ldr	r3, [pc, #40]	@ (8011788 <prvResetNextTaskUnblockTime+0x3c>)
 801175e:	f04f 32ff 	mov.w	r2, #4294967295
 8011762:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011764:	e008      	b.n	8011778 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011766:	4b07      	ldr	r3, [pc, #28]	@ (8011784 <prvResetNextTaskUnblockTime+0x38>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	4a04      	ldr	r2, [pc, #16]	@ (8011788 <prvResetNextTaskUnblockTime+0x3c>)
 8011776:	6013      	str	r3, [r2, #0]
}
 8011778:	bf00      	nop
 801177a:	370c      	adds	r7, #12
 801177c:	46bd      	mov	sp, r7
 801177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011782:	4770      	bx	lr
 8011784:	240035fc 	.word	0x240035fc
 8011788:	24003664 	.word	0x24003664

0801178c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801178c:	b480      	push	{r7}
 801178e:	b083      	sub	sp, #12
 8011790:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011792:	4b0b      	ldr	r3, [pc, #44]	@ (80117c0 <xTaskGetSchedulerState+0x34>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d102      	bne.n	80117a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801179a:	2301      	movs	r3, #1
 801179c:	607b      	str	r3, [r7, #4]
 801179e:	e008      	b.n	80117b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117a0:	4b08      	ldr	r3, [pc, #32]	@ (80117c4 <xTaskGetSchedulerState+0x38>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d102      	bne.n	80117ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80117a8:	2302      	movs	r3, #2
 80117aa:	607b      	str	r3, [r7, #4]
 80117ac:	e001      	b.n	80117b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80117ae:	2300      	movs	r3, #0
 80117b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80117b2:	687b      	ldr	r3, [r7, #4]
	}
 80117b4:	4618      	mov	r0, r3
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr
 80117c0:	24003650 	.word	0x24003650
 80117c4:	2400366c 	.word	0x2400366c

080117c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b086      	sub	sp, #24
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80117d4:	2300      	movs	r3, #0
 80117d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d058      	beq.n	8011890 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80117de:	4b2f      	ldr	r3, [pc, #188]	@ (801189c <xTaskPriorityDisinherit+0xd4>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	693a      	ldr	r2, [r7, #16]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d00b      	beq.n	8011800 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80117e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117ec:	f383 8811 	msr	BASEPRI, r3
 80117f0:	f3bf 8f6f 	isb	sy
 80117f4:	f3bf 8f4f 	dsb	sy
 80117f8:	60fb      	str	r3, [r7, #12]
}
 80117fa:	bf00      	nop
 80117fc:	bf00      	nop
 80117fe:	e7fd      	b.n	80117fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011804:	2b00      	cmp	r3, #0
 8011806:	d10b      	bne.n	8011820 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801180c:	f383 8811 	msr	BASEPRI, r3
 8011810:	f3bf 8f6f 	isb	sy
 8011814:	f3bf 8f4f 	dsb	sy
 8011818:	60bb      	str	r3, [r7, #8]
}
 801181a:	bf00      	nop
 801181c:	bf00      	nop
 801181e:	e7fd      	b.n	801181c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011824:	1e5a      	subs	r2, r3, #1
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801182a:	693b      	ldr	r3, [r7, #16]
 801182c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011832:	429a      	cmp	r2, r3
 8011834:	d02c      	beq.n	8011890 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801183a:	2b00      	cmp	r3, #0
 801183c:	d128      	bne.n	8011890 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	3304      	adds	r3, #4
 8011842:	4618      	mov	r0, r3
 8011844:	f7fe fba0 	bl	800ff88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011854:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011860:	4b0f      	ldr	r3, [pc, #60]	@ (80118a0 <xTaskPriorityDisinherit+0xd8>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	429a      	cmp	r2, r3
 8011866:	d903      	bls.n	8011870 <xTaskPriorityDisinherit+0xa8>
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801186c:	4a0c      	ldr	r2, [pc, #48]	@ (80118a0 <xTaskPriorityDisinherit+0xd8>)
 801186e:	6013      	str	r3, [r2, #0]
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011874:	4613      	mov	r3, r2
 8011876:	009b      	lsls	r3, r3, #2
 8011878:	4413      	add	r3, r2
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	4a09      	ldr	r2, [pc, #36]	@ (80118a4 <xTaskPriorityDisinherit+0xdc>)
 801187e:	441a      	add	r2, r3
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	3304      	adds	r3, #4
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f7fe fb21 	bl	800fece <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801188c:	2301      	movs	r3, #1
 801188e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011890:	697b      	ldr	r3, [r7, #20]
	}
 8011892:	4618      	mov	r0, r3
 8011894:	3718      	adds	r7, #24
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	24003170 	.word	0x24003170
 80118a0:	2400364c 	.word	0x2400364c
 80118a4:	24003174 	.word	0x24003174

080118a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80118b2:	4b21      	ldr	r3, [pc, #132]	@ (8011938 <prvAddCurrentTaskToDelayedList+0x90>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80118b8:	4b20      	ldr	r3, [pc, #128]	@ (801193c <prvAddCurrentTaskToDelayedList+0x94>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	3304      	adds	r3, #4
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fe fb62 	bl	800ff88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118ca:	d10a      	bne.n	80118e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d007      	beq.n	80118e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118d2:	4b1a      	ldr	r3, [pc, #104]	@ (801193c <prvAddCurrentTaskToDelayedList+0x94>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	3304      	adds	r3, #4
 80118d8:	4619      	mov	r1, r3
 80118da:	4819      	ldr	r0, [pc, #100]	@ (8011940 <prvAddCurrentTaskToDelayedList+0x98>)
 80118dc:	f7fe faf7 	bl	800fece <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80118e0:	e026      	b.n	8011930 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80118e2:	68fa      	ldr	r2, [r7, #12]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	4413      	add	r3, r2
 80118e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80118ea:	4b14      	ldr	r3, [pc, #80]	@ (801193c <prvAddCurrentTaskToDelayedList+0x94>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	68ba      	ldr	r2, [r7, #8]
 80118f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80118f2:	68ba      	ldr	r2, [r7, #8]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d209      	bcs.n	801190e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118fa:	4b12      	ldr	r3, [pc, #72]	@ (8011944 <prvAddCurrentTaskToDelayedList+0x9c>)
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	4b0f      	ldr	r3, [pc, #60]	@ (801193c <prvAddCurrentTaskToDelayedList+0x94>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	3304      	adds	r3, #4
 8011904:	4619      	mov	r1, r3
 8011906:	4610      	mov	r0, r2
 8011908:	f7fe fb05 	bl	800ff16 <vListInsert>
}
 801190c:	e010      	b.n	8011930 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801190e:	4b0e      	ldr	r3, [pc, #56]	@ (8011948 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	4b0a      	ldr	r3, [pc, #40]	@ (801193c <prvAddCurrentTaskToDelayedList+0x94>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	3304      	adds	r3, #4
 8011918:	4619      	mov	r1, r3
 801191a:	4610      	mov	r0, r2
 801191c:	f7fe fafb 	bl	800ff16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011920:	4b0a      	ldr	r3, [pc, #40]	@ (801194c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	429a      	cmp	r2, r3
 8011928:	d202      	bcs.n	8011930 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801192a:	4a08      	ldr	r2, [pc, #32]	@ (801194c <prvAddCurrentTaskToDelayedList+0xa4>)
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	6013      	str	r3, [r2, #0]
}
 8011930:	bf00      	nop
 8011932:	3710      	adds	r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	24003648 	.word	0x24003648
 801193c:	24003170 	.word	0x24003170
 8011940:	24003630 	.word	0x24003630
 8011944:	24003600 	.word	0x24003600
 8011948:	240035fc 	.word	0x240035fc
 801194c:	24003664 	.word	0x24003664

08011950 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b08a      	sub	sp, #40	@ 0x28
 8011954:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011956:	2300      	movs	r3, #0
 8011958:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801195a:	f000 fb13 	bl	8011f84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801195e:	4b1d      	ldr	r3, [pc, #116]	@ (80119d4 <xTimerCreateTimerTask+0x84>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d021      	beq.n	80119aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011966:	2300      	movs	r3, #0
 8011968:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801196a:	2300      	movs	r3, #0
 801196c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801196e:	1d3a      	adds	r2, r7, #4
 8011970:	f107 0108 	add.w	r1, r7, #8
 8011974:	f107 030c 	add.w	r3, r7, #12
 8011978:	4618      	mov	r0, r3
 801197a:	f7fe fa61 	bl	800fe40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801197e:	6879      	ldr	r1, [r7, #4]
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	68fa      	ldr	r2, [r7, #12]
 8011984:	9202      	str	r2, [sp, #8]
 8011986:	9301      	str	r3, [sp, #4]
 8011988:	2302      	movs	r3, #2
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	2300      	movs	r3, #0
 801198e:	460a      	mov	r2, r1
 8011990:	4911      	ldr	r1, [pc, #68]	@ (80119d8 <xTimerCreateTimerTask+0x88>)
 8011992:	4812      	ldr	r0, [pc, #72]	@ (80119dc <xTimerCreateTimerTask+0x8c>)
 8011994:	f7ff f858 	bl	8010a48 <xTaskCreateStatic>
 8011998:	4603      	mov	r3, r0
 801199a:	4a11      	ldr	r2, [pc, #68]	@ (80119e0 <xTimerCreateTimerTask+0x90>)
 801199c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801199e:	4b10      	ldr	r3, [pc, #64]	@ (80119e0 <xTimerCreateTimerTask+0x90>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d001      	beq.n	80119aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80119a6:	2301      	movs	r3, #1
 80119a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d10b      	bne.n	80119c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80119b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119b4:	f383 8811 	msr	BASEPRI, r3
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	f3bf 8f4f 	dsb	sy
 80119c0:	613b      	str	r3, [r7, #16]
}
 80119c2:	bf00      	nop
 80119c4:	bf00      	nop
 80119c6:	e7fd      	b.n	80119c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80119c8:	697b      	ldr	r3, [r7, #20]
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3718      	adds	r7, #24
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	240036a0 	.word	0x240036a0
 80119d8:	080171c0 	.word	0x080171c0
 80119dc:	08011b1d 	.word	0x08011b1d
 80119e0:	240036a4 	.word	0x240036a4

080119e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b08a      	sub	sp, #40	@ 0x28
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	60f8      	str	r0, [r7, #12]
 80119ec:	60b9      	str	r1, [r7, #8]
 80119ee:	607a      	str	r2, [r7, #4]
 80119f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80119f2:	2300      	movs	r3, #0
 80119f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d10b      	bne.n	8011a14 <xTimerGenericCommand+0x30>
	__asm volatile
 80119fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a00:	f383 8811 	msr	BASEPRI, r3
 8011a04:	f3bf 8f6f 	isb	sy
 8011a08:	f3bf 8f4f 	dsb	sy
 8011a0c:	623b      	str	r3, [r7, #32]
}
 8011a0e:	bf00      	nop
 8011a10:	bf00      	nop
 8011a12:	e7fd      	b.n	8011a10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011a14:	4b19      	ldr	r3, [pc, #100]	@ (8011a7c <xTimerGenericCommand+0x98>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d02a      	beq.n	8011a72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2b05      	cmp	r3, #5
 8011a2c:	dc18      	bgt.n	8011a60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011a2e:	f7ff fead 	bl	801178c <xTaskGetSchedulerState>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b02      	cmp	r3, #2
 8011a36:	d109      	bne.n	8011a4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011a38:	4b10      	ldr	r3, [pc, #64]	@ (8011a7c <xTimerGenericCommand+0x98>)
 8011a3a:	6818      	ldr	r0, [r3, #0]
 8011a3c:	f107 0110 	add.w	r1, r7, #16
 8011a40:	2300      	movs	r3, #0
 8011a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a44:	f7fe fc10 	bl	8010268 <xQueueGenericSend>
 8011a48:	6278      	str	r0, [r7, #36]	@ 0x24
 8011a4a:	e012      	b.n	8011a72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8011a7c <xTimerGenericCommand+0x98>)
 8011a4e:	6818      	ldr	r0, [r3, #0]
 8011a50:	f107 0110 	add.w	r1, r7, #16
 8011a54:	2300      	movs	r3, #0
 8011a56:	2200      	movs	r2, #0
 8011a58:	f7fe fc06 	bl	8010268 <xQueueGenericSend>
 8011a5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8011a5e:	e008      	b.n	8011a72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011a60:	4b06      	ldr	r3, [pc, #24]	@ (8011a7c <xTimerGenericCommand+0x98>)
 8011a62:	6818      	ldr	r0, [r3, #0]
 8011a64:	f107 0110 	add.w	r1, r7, #16
 8011a68:	2300      	movs	r3, #0
 8011a6a:	683a      	ldr	r2, [r7, #0]
 8011a6c:	f7fe fcfe 	bl	801046c <xQueueGenericSendFromISR>
 8011a70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3728      	adds	r7, #40	@ 0x28
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	240036a0 	.word	0x240036a0

08011a80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b088      	sub	sp, #32
 8011a84:	af02      	add	r7, sp, #8
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a8a:	4b23      	ldr	r3, [pc, #140]	@ (8011b18 <prvProcessExpiredTimer+0x98>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	68db      	ldr	r3, [r3, #12]
 8011a90:	68db      	ldr	r3, [r3, #12]
 8011a92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	3304      	adds	r3, #4
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fe fa75 	bl	800ff88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011aa4:	f003 0304 	and.w	r3, r3, #4
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d023      	beq.n	8011af4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	699a      	ldr	r2, [r3, #24]
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	18d1      	adds	r1, r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	683a      	ldr	r2, [r7, #0]
 8011ab8:	6978      	ldr	r0, [r7, #20]
 8011aba:	f000 f8d5 	bl	8011c68 <prvInsertTimerInActiveList>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d020      	beq.n	8011b06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	9300      	str	r3, [sp, #0]
 8011ac8:	2300      	movs	r3, #0
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	2100      	movs	r1, #0
 8011ace:	6978      	ldr	r0, [r7, #20]
 8011ad0:	f7ff ff88 	bl	80119e4 <xTimerGenericCommand>
 8011ad4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d114      	bne.n	8011b06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ae0:	f383 8811 	msr	BASEPRI, r3
 8011ae4:	f3bf 8f6f 	isb	sy
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	60fb      	str	r3, [r7, #12]
}
 8011aee:	bf00      	nop
 8011af0:	bf00      	nop
 8011af2:	e7fd      	b.n	8011af0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011afa:	f023 0301 	bic.w	r3, r3, #1
 8011afe:	b2da      	uxtb	r2, r3
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	6a1b      	ldr	r3, [r3, #32]
 8011b0a:	6978      	ldr	r0, [r7, #20]
 8011b0c:	4798      	blx	r3
}
 8011b0e:	bf00      	nop
 8011b10:	3718      	adds	r7, #24
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	24003698 	.word	0x24003698

08011b1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011b24:	f107 0308 	add.w	r3, r7, #8
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f000 f859 	bl	8011be0 <prvGetNextExpireTime>
 8011b2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	4619      	mov	r1, r3
 8011b34:	68f8      	ldr	r0, [r7, #12]
 8011b36:	f000 f805 	bl	8011b44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011b3a:	f000 f8d7 	bl	8011cec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011b3e:	bf00      	nop
 8011b40:	e7f0      	b.n	8011b24 <prvTimerTask+0x8>
	...

08011b44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b084      	sub	sp, #16
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011b4e:	f7ff fa29 	bl	8010fa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011b52:	f107 0308 	add.w	r3, r7, #8
 8011b56:	4618      	mov	r0, r3
 8011b58:	f000 f866 	bl	8011c28 <prvSampleTimeNow>
 8011b5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d130      	bne.n	8011bc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d10a      	bne.n	8011b80 <prvProcessTimerOrBlockTask+0x3c>
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d806      	bhi.n	8011b80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011b72:	f7ff fa25 	bl	8010fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011b76:	68f9      	ldr	r1, [r7, #12]
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff ff81 	bl	8011a80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011b7e:	e024      	b.n	8011bca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d008      	beq.n	8011b98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011b86:	4b13      	ldr	r3, [pc, #76]	@ (8011bd4 <prvProcessTimerOrBlockTask+0x90>)
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d101      	bne.n	8011b94 <prvProcessTimerOrBlockTask+0x50>
 8011b90:	2301      	movs	r3, #1
 8011b92:	e000      	b.n	8011b96 <prvProcessTimerOrBlockTask+0x52>
 8011b94:	2300      	movs	r3, #0
 8011b96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011b98:	4b0f      	ldr	r3, [pc, #60]	@ (8011bd8 <prvProcessTimerOrBlockTask+0x94>)
 8011b9a:	6818      	ldr	r0, [r3, #0]
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	1ad3      	subs	r3, r2, r3
 8011ba2:	683a      	ldr	r2, [r7, #0]
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	f7fe ff1b 	bl	80109e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011baa:	f7ff fa09 	bl	8010fc0 <xTaskResumeAll>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d10a      	bne.n	8011bca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011bb4:	4b09      	ldr	r3, [pc, #36]	@ (8011bdc <prvProcessTimerOrBlockTask+0x98>)
 8011bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bba:	601a      	str	r2, [r3, #0]
 8011bbc:	f3bf 8f4f 	dsb	sy
 8011bc0:	f3bf 8f6f 	isb	sy
}
 8011bc4:	e001      	b.n	8011bca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011bc6:	f7ff f9fb 	bl	8010fc0 <xTaskResumeAll>
}
 8011bca:	bf00      	nop
 8011bcc:	3710      	adds	r7, #16
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	2400369c 	.word	0x2400369c
 8011bd8:	240036a0 	.word	0x240036a0
 8011bdc:	e000ed04 	.word	0xe000ed04

08011be0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011be0:	b480      	push	{r7}
 8011be2:	b085      	sub	sp, #20
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011be8:	4b0e      	ldr	r3, [pc, #56]	@ (8011c24 <prvGetNextExpireTime+0x44>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d101      	bne.n	8011bf6 <prvGetNextExpireTime+0x16>
 8011bf2:	2201      	movs	r2, #1
 8011bf4:	e000      	b.n	8011bf8 <prvGetNextExpireTime+0x18>
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d105      	bne.n	8011c10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011c04:	4b07      	ldr	r3, [pc, #28]	@ (8011c24 <prvGetNextExpireTime+0x44>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	68db      	ldr	r3, [r3, #12]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
 8011c0e:	e001      	b.n	8011c14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011c10:	2300      	movs	r3, #0
 8011c12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011c14:	68fb      	ldr	r3, [r7, #12]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3714      	adds	r7, #20
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop
 8011c24:	24003698 	.word	0x24003698

08011c28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011c30:	f7ff fa64 	bl	80110fc <xTaskGetTickCount>
 8011c34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011c36:	4b0b      	ldr	r3, [pc, #44]	@ (8011c64 <prvSampleTimeNow+0x3c>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	68fa      	ldr	r2, [r7, #12]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d205      	bcs.n	8011c4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011c40:	f000 f93a 	bl	8011eb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2201      	movs	r2, #1
 8011c48:	601a      	str	r2, [r3, #0]
 8011c4a:	e002      	b.n	8011c52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2200      	movs	r2, #0
 8011c50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011c52:	4a04      	ldr	r2, [pc, #16]	@ (8011c64 <prvSampleTimeNow+0x3c>)
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011c58:	68fb      	ldr	r3, [r7, #12]
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	240036a8 	.word	0x240036a8

08011c68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b086      	sub	sp, #24
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	60f8      	str	r0, [r7, #12]
 8011c70:	60b9      	str	r1, [r7, #8]
 8011c72:	607a      	str	r2, [r7, #4]
 8011c74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011c76:	2300      	movs	r3, #0
 8011c78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	68ba      	ldr	r2, [r7, #8]
 8011c7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	68fa      	ldr	r2, [r7, #12]
 8011c84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011c86:	68ba      	ldr	r2, [r7, #8]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	429a      	cmp	r2, r3
 8011c8c:	d812      	bhi.n	8011cb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	1ad2      	subs	r2, r2, r3
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	699b      	ldr	r3, [r3, #24]
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d302      	bcc.n	8011ca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	617b      	str	r3, [r7, #20]
 8011ca0:	e01b      	b.n	8011cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011ca2:	4b10      	ldr	r3, [pc, #64]	@ (8011ce4 <prvInsertTimerInActiveList+0x7c>)
 8011ca4:	681a      	ldr	r2, [r3, #0]
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	3304      	adds	r3, #4
 8011caa:	4619      	mov	r1, r3
 8011cac:	4610      	mov	r0, r2
 8011cae:	f7fe f932 	bl	800ff16 <vListInsert>
 8011cb2:	e012      	b.n	8011cda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d206      	bcs.n	8011cca <prvInsertTimerInActiveList+0x62>
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d302      	bcc.n	8011cca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	617b      	str	r3, [r7, #20]
 8011cc8:	e007      	b.n	8011cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011cca:	4b07      	ldr	r3, [pc, #28]	@ (8011ce8 <prvInsertTimerInActiveList+0x80>)
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	3304      	adds	r3, #4
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	4610      	mov	r0, r2
 8011cd6:	f7fe f91e 	bl	800ff16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011cda:	697b      	ldr	r3, [r7, #20]
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3718      	adds	r7, #24
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	2400369c 	.word	0x2400369c
 8011ce8:	24003698 	.word	0x24003698

08011cec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b08e      	sub	sp, #56	@ 0x38
 8011cf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011cf2:	e0ce      	b.n	8011e92 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	da19      	bge.n	8011d2e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011cfa:	1d3b      	adds	r3, r7, #4
 8011cfc:	3304      	adds	r3, #4
 8011cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10b      	bne.n	8011d1e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d0a:	f383 8811 	msr	BASEPRI, r3
 8011d0e:	f3bf 8f6f 	isb	sy
 8011d12:	f3bf 8f4f 	dsb	sy
 8011d16:	61fb      	str	r3, [r7, #28]
}
 8011d18:	bf00      	nop
 8011d1a:	bf00      	nop
 8011d1c:	e7fd      	b.n	8011d1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d24:	6850      	ldr	r0, [r2, #4]
 8011d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d28:	6892      	ldr	r2, [r2, #8]
 8011d2a:	4611      	mov	r1, r2
 8011d2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f2c0 80ae 	blt.w	8011e92 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d3c:	695b      	ldr	r3, [r3, #20]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d004      	beq.n	8011d4c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d44:	3304      	adds	r3, #4
 8011d46:	4618      	mov	r0, r3
 8011d48:	f7fe f91e 	bl	800ff88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011d4c:	463b      	mov	r3, r7
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7ff ff6a 	bl	8011c28 <prvSampleTimeNow>
 8011d54:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b09      	cmp	r3, #9
 8011d5a:	f200 8097 	bhi.w	8011e8c <prvProcessReceivedCommands+0x1a0>
 8011d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8011d64 <prvProcessReceivedCommands+0x78>)
 8011d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d64:	08011d8d 	.word	0x08011d8d
 8011d68:	08011d8d 	.word	0x08011d8d
 8011d6c:	08011d8d 	.word	0x08011d8d
 8011d70:	08011e03 	.word	0x08011e03
 8011d74:	08011e17 	.word	0x08011e17
 8011d78:	08011e63 	.word	0x08011e63
 8011d7c:	08011d8d 	.word	0x08011d8d
 8011d80:	08011d8d 	.word	0x08011d8d
 8011d84:	08011e03 	.word	0x08011e03
 8011d88:	08011e17 	.word	0x08011e17
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d92:	f043 0301 	orr.w	r3, r3, #1
 8011d96:	b2da      	uxtb	r2, r3
 8011d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011d9e:	68ba      	ldr	r2, [r7, #8]
 8011da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011da2:	699b      	ldr	r3, [r3, #24]
 8011da4:	18d1      	adds	r1, r2, r3
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dac:	f7ff ff5c 	bl	8011c68 <prvInsertTimerInActiveList>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d06c      	beq.n	8011e90 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db8:	6a1b      	ldr	r3, [r3, #32]
 8011dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011dc4:	f003 0304 	and.w	r3, r3, #4
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d061      	beq.n	8011e90 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dd0:	699b      	ldr	r3, [r3, #24]
 8011dd2:	441a      	add	r2, r3
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	9300      	str	r3, [sp, #0]
 8011dd8:	2300      	movs	r3, #0
 8011dda:	2100      	movs	r1, #0
 8011ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011dde:	f7ff fe01 	bl	80119e4 <xTimerGenericCommand>
 8011de2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d152      	bne.n	8011e90 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dee:	f383 8811 	msr	BASEPRI, r3
 8011df2:	f3bf 8f6f 	isb	sy
 8011df6:	f3bf 8f4f 	dsb	sy
 8011dfa:	61bb      	str	r3, [r7, #24]
}
 8011dfc:	bf00      	nop
 8011dfe:	bf00      	nop
 8011e00:	e7fd      	b.n	8011dfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e08:	f023 0301 	bic.w	r3, r3, #1
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011e14:	e03d      	b.n	8011e92 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e1c:	f043 0301 	orr.w	r3, r3, #1
 8011e20:	b2da      	uxtb	r2, r3
 8011e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e2c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e30:	699b      	ldr	r3, [r3, #24]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d10b      	bne.n	8011e4e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e3a:	f383 8811 	msr	BASEPRI, r3
 8011e3e:	f3bf 8f6f 	isb	sy
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	617b      	str	r3, [r7, #20]
}
 8011e48:	bf00      	nop
 8011e4a:	bf00      	nop
 8011e4c:	e7fd      	b.n	8011e4a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e50:	699a      	ldr	r2, [r3, #24]
 8011e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e54:	18d1      	adds	r1, r2, r3
 8011e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e5c:	f7ff ff04 	bl	8011c68 <prvInsertTimerInActiveList>
					break;
 8011e60:	e017      	b.n	8011e92 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e68:	f003 0302 	and.w	r3, r3, #2
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d103      	bne.n	8011e78 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e72:	f000 fbe9 	bl	8012648 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011e76:	e00c      	b.n	8011e92 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e7e:	f023 0301 	bic.w	r3, r3, #1
 8011e82:	b2da      	uxtb	r2, r3
 8011e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011e8a:	e002      	b.n	8011e92 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011e8c:	bf00      	nop
 8011e8e:	e000      	b.n	8011e92 <prvProcessReceivedCommands+0x1a6>
					break;
 8011e90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e92:	4b08      	ldr	r3, [pc, #32]	@ (8011eb4 <prvProcessReceivedCommands+0x1c8>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	1d39      	adds	r1, r7, #4
 8011e98:	2200      	movs	r2, #0
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f7fe fb84 	bl	80105a8 <xQueueReceive>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	f47f af26 	bne.w	8011cf4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011ea8:	bf00      	nop
 8011eaa:	bf00      	nop
 8011eac:	3730      	adds	r7, #48	@ 0x30
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	240036a0 	.word	0x240036a0

08011eb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b088      	sub	sp, #32
 8011ebc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011ebe:	e049      	b.n	8011f54 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8011f7c <prvSwitchTimerLists+0xc4>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011eca:	4b2c      	ldr	r3, [pc, #176]	@ (8011f7c <prvSwitchTimerLists+0xc4>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	3304      	adds	r3, #4
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fe f855 	bl	800ff88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	6a1b      	ldr	r3, [r3, #32]
 8011ee2:	68f8      	ldr	r0, [r7, #12]
 8011ee4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011eec:	f003 0304 	and.w	r3, r3, #4
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d02f      	beq.n	8011f54 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	699b      	ldr	r3, [r3, #24]
 8011ef8:	693a      	ldr	r2, [r7, #16]
 8011efa:	4413      	add	r3, r2
 8011efc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011efe:	68ba      	ldr	r2, [r7, #8]
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	429a      	cmp	r2, r3
 8011f04:	d90e      	bls.n	8011f24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	68ba      	ldr	r2, [r7, #8]
 8011f0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	68fa      	ldr	r2, [r7, #12]
 8011f10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011f12:	4b1a      	ldr	r3, [pc, #104]	@ (8011f7c <prvSwitchTimerLists+0xc4>)
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	3304      	adds	r3, #4
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	f7fd fffa 	bl	800ff16 <vListInsert>
 8011f22:	e017      	b.n	8011f54 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011f24:	2300      	movs	r3, #0
 8011f26:	9300      	str	r3, [sp, #0]
 8011f28:	2300      	movs	r3, #0
 8011f2a:	693a      	ldr	r2, [r7, #16]
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	f7ff fd58 	bl	80119e4 <xTimerGenericCommand>
 8011f34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10b      	bne.n	8011f54 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f40:	f383 8811 	msr	BASEPRI, r3
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	f3bf 8f4f 	dsb	sy
 8011f4c:	603b      	str	r3, [r7, #0]
}
 8011f4e:	bf00      	nop
 8011f50:	bf00      	nop
 8011f52:	e7fd      	b.n	8011f50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011f54:	4b09      	ldr	r3, [pc, #36]	@ (8011f7c <prvSwitchTimerLists+0xc4>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d1b0      	bne.n	8011ec0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011f5e:	4b07      	ldr	r3, [pc, #28]	@ (8011f7c <prvSwitchTimerLists+0xc4>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011f64:	4b06      	ldr	r3, [pc, #24]	@ (8011f80 <prvSwitchTimerLists+0xc8>)
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	4a04      	ldr	r2, [pc, #16]	@ (8011f7c <prvSwitchTimerLists+0xc4>)
 8011f6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011f6c:	4a04      	ldr	r2, [pc, #16]	@ (8011f80 <prvSwitchTimerLists+0xc8>)
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	6013      	str	r3, [r2, #0]
}
 8011f72:	bf00      	nop
 8011f74:	3718      	adds	r7, #24
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	24003698 	.word	0x24003698
 8011f80:	2400369c 	.word	0x2400369c

08011f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011f8a:	f000 f96d 	bl	8012268 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011f8e:	4b15      	ldr	r3, [pc, #84]	@ (8011fe4 <prvCheckForValidListAndQueue+0x60>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d120      	bne.n	8011fd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011f96:	4814      	ldr	r0, [pc, #80]	@ (8011fe8 <prvCheckForValidListAndQueue+0x64>)
 8011f98:	f7fd ff6c 	bl	800fe74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011f9c:	4813      	ldr	r0, [pc, #76]	@ (8011fec <prvCheckForValidListAndQueue+0x68>)
 8011f9e:	f7fd ff69 	bl	800fe74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011fa2:	4b13      	ldr	r3, [pc, #76]	@ (8011ff0 <prvCheckForValidListAndQueue+0x6c>)
 8011fa4:	4a10      	ldr	r2, [pc, #64]	@ (8011fe8 <prvCheckForValidListAndQueue+0x64>)
 8011fa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011fa8:	4b12      	ldr	r3, [pc, #72]	@ (8011ff4 <prvCheckForValidListAndQueue+0x70>)
 8011faa:	4a10      	ldr	r2, [pc, #64]	@ (8011fec <prvCheckForValidListAndQueue+0x68>)
 8011fac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011fae:	2300      	movs	r3, #0
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	4b11      	ldr	r3, [pc, #68]	@ (8011ff8 <prvCheckForValidListAndQueue+0x74>)
 8011fb4:	4a11      	ldr	r2, [pc, #68]	@ (8011ffc <prvCheckForValidListAndQueue+0x78>)
 8011fb6:	2110      	movs	r1, #16
 8011fb8:	200a      	movs	r0, #10
 8011fba:	f7fe f879 	bl	80100b0 <xQueueGenericCreateStatic>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	4a08      	ldr	r2, [pc, #32]	@ (8011fe4 <prvCheckForValidListAndQueue+0x60>)
 8011fc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011fc4:	4b07      	ldr	r3, [pc, #28]	@ (8011fe4 <prvCheckForValidListAndQueue+0x60>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d005      	beq.n	8011fd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011fcc:	4b05      	ldr	r3, [pc, #20]	@ (8011fe4 <prvCheckForValidListAndQueue+0x60>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	490b      	ldr	r1, [pc, #44]	@ (8012000 <prvCheckForValidListAndQueue+0x7c>)
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7fe fcda 	bl	801098c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011fd8:	f000 f978 	bl	80122cc <vPortExitCritical>
}
 8011fdc:	bf00      	nop
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	240036a0 	.word	0x240036a0
 8011fe8:	24003670 	.word	0x24003670
 8011fec:	24003684 	.word	0x24003684
 8011ff0:	24003698 	.word	0x24003698
 8011ff4:	2400369c 	.word	0x2400369c
 8011ff8:	2400374c 	.word	0x2400374c
 8011ffc:	240036ac 	.word	0x240036ac
 8012000:	080171c8 	.word	0x080171c8

08012004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012004:	b480      	push	{r7}
 8012006:	b085      	sub	sp, #20
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	3b04      	subs	r3, #4
 8012014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801201c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	3b04      	subs	r3, #4
 8012022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012024:	68bb      	ldr	r3, [r7, #8]
 8012026:	f023 0201 	bic.w	r2, r3, #1
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	3b04      	subs	r3, #4
 8012032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012034:	4a0c      	ldr	r2, [pc, #48]	@ (8012068 <pxPortInitialiseStack+0x64>)
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	3b14      	subs	r3, #20
 801203e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012040:	687a      	ldr	r2, [r7, #4]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	3b04      	subs	r3, #4
 801204a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	f06f 0202 	mvn.w	r2, #2
 8012052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	3b20      	subs	r3, #32
 8012058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801205a:	68fb      	ldr	r3, [r7, #12]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3714      	adds	r7, #20
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr
 8012068:	0801206d 	.word	0x0801206d

0801206c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801206c:	b480      	push	{r7}
 801206e:	b085      	sub	sp, #20
 8012070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012072:	2300      	movs	r3, #0
 8012074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012076:	4b13      	ldr	r3, [pc, #76]	@ (80120c4 <prvTaskExitError+0x58>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801207e:	d00b      	beq.n	8012098 <prvTaskExitError+0x2c>
	__asm volatile
 8012080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012084:	f383 8811 	msr	BASEPRI, r3
 8012088:	f3bf 8f6f 	isb	sy
 801208c:	f3bf 8f4f 	dsb	sy
 8012090:	60fb      	str	r3, [r7, #12]
}
 8012092:	bf00      	nop
 8012094:	bf00      	nop
 8012096:	e7fd      	b.n	8012094 <prvTaskExitError+0x28>
	__asm volatile
 8012098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801209c:	f383 8811 	msr	BASEPRI, r3
 80120a0:	f3bf 8f6f 	isb	sy
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	60bb      	str	r3, [r7, #8]
}
 80120aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80120ac:	bf00      	nop
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d0fc      	beq.n	80120ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80120b4:	bf00      	nop
 80120b6:	bf00      	nop
 80120b8:	3714      	adds	r7, #20
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	2400007c 	.word	0x2400007c
	...

080120d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80120d0:	4b07      	ldr	r3, [pc, #28]	@ (80120f0 <pxCurrentTCBConst2>)
 80120d2:	6819      	ldr	r1, [r3, #0]
 80120d4:	6808      	ldr	r0, [r1, #0]
 80120d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120da:	f380 8809 	msr	PSP, r0
 80120de:	f3bf 8f6f 	isb	sy
 80120e2:	f04f 0000 	mov.w	r0, #0
 80120e6:	f380 8811 	msr	BASEPRI, r0
 80120ea:	4770      	bx	lr
 80120ec:	f3af 8000 	nop.w

080120f0 <pxCurrentTCBConst2>:
 80120f0:	24003170 	.word	0x24003170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80120f4:	bf00      	nop
 80120f6:	bf00      	nop

080120f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80120f8:	4808      	ldr	r0, [pc, #32]	@ (801211c <prvPortStartFirstTask+0x24>)
 80120fa:	6800      	ldr	r0, [r0, #0]
 80120fc:	6800      	ldr	r0, [r0, #0]
 80120fe:	f380 8808 	msr	MSP, r0
 8012102:	f04f 0000 	mov.w	r0, #0
 8012106:	f380 8814 	msr	CONTROL, r0
 801210a:	b662      	cpsie	i
 801210c:	b661      	cpsie	f
 801210e:	f3bf 8f4f 	dsb	sy
 8012112:	f3bf 8f6f 	isb	sy
 8012116:	df00      	svc	0
 8012118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801211a:	bf00      	nop
 801211c:	e000ed08 	.word	0xe000ed08

08012120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b086      	sub	sp, #24
 8012124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012126:	4b47      	ldr	r3, [pc, #284]	@ (8012244 <xPortStartScheduler+0x124>)
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	4a47      	ldr	r2, [pc, #284]	@ (8012248 <xPortStartScheduler+0x128>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d10b      	bne.n	8012148 <xPortStartScheduler+0x28>
	__asm volatile
 8012130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012134:	f383 8811 	msr	BASEPRI, r3
 8012138:	f3bf 8f6f 	isb	sy
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	60fb      	str	r3, [r7, #12]
}
 8012142:	bf00      	nop
 8012144:	bf00      	nop
 8012146:	e7fd      	b.n	8012144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012148:	4b3e      	ldr	r3, [pc, #248]	@ (8012244 <xPortStartScheduler+0x124>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	4a3f      	ldr	r2, [pc, #252]	@ (801224c <xPortStartScheduler+0x12c>)
 801214e:	4293      	cmp	r3, r2
 8012150:	d10b      	bne.n	801216a <xPortStartScheduler+0x4a>
	__asm volatile
 8012152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012156:	f383 8811 	msr	BASEPRI, r3
 801215a:	f3bf 8f6f 	isb	sy
 801215e:	f3bf 8f4f 	dsb	sy
 8012162:	613b      	str	r3, [r7, #16]
}
 8012164:	bf00      	nop
 8012166:	bf00      	nop
 8012168:	e7fd      	b.n	8012166 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801216a:	4b39      	ldr	r3, [pc, #228]	@ (8012250 <xPortStartScheduler+0x130>)
 801216c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	781b      	ldrb	r3, [r3, #0]
 8012172:	b2db      	uxtb	r3, r3
 8012174:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	22ff      	movs	r2, #255	@ 0xff
 801217a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	b2db      	uxtb	r3, r3
 8012182:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012184:	78fb      	ldrb	r3, [r7, #3]
 8012186:	b2db      	uxtb	r3, r3
 8012188:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801218c:	b2da      	uxtb	r2, r3
 801218e:	4b31      	ldr	r3, [pc, #196]	@ (8012254 <xPortStartScheduler+0x134>)
 8012190:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012192:	4b31      	ldr	r3, [pc, #196]	@ (8012258 <xPortStartScheduler+0x138>)
 8012194:	2207      	movs	r2, #7
 8012196:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012198:	e009      	b.n	80121ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801219a:	4b2f      	ldr	r3, [pc, #188]	@ (8012258 <xPortStartScheduler+0x138>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	3b01      	subs	r3, #1
 80121a0:	4a2d      	ldr	r2, [pc, #180]	@ (8012258 <xPortStartScheduler+0x138>)
 80121a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80121a4:	78fb      	ldrb	r3, [r7, #3]
 80121a6:	b2db      	uxtb	r3, r3
 80121a8:	005b      	lsls	r3, r3, #1
 80121aa:	b2db      	uxtb	r3, r3
 80121ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80121ae:	78fb      	ldrb	r3, [r7, #3]
 80121b0:	b2db      	uxtb	r3, r3
 80121b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80121b6:	2b80      	cmp	r3, #128	@ 0x80
 80121b8:	d0ef      	beq.n	801219a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80121ba:	4b27      	ldr	r3, [pc, #156]	@ (8012258 <xPortStartScheduler+0x138>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f1c3 0307 	rsb	r3, r3, #7
 80121c2:	2b04      	cmp	r3, #4
 80121c4:	d00b      	beq.n	80121de <xPortStartScheduler+0xbe>
	__asm volatile
 80121c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121ca:	f383 8811 	msr	BASEPRI, r3
 80121ce:	f3bf 8f6f 	isb	sy
 80121d2:	f3bf 8f4f 	dsb	sy
 80121d6:	60bb      	str	r3, [r7, #8]
}
 80121d8:	bf00      	nop
 80121da:	bf00      	nop
 80121dc:	e7fd      	b.n	80121da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80121de:	4b1e      	ldr	r3, [pc, #120]	@ (8012258 <xPortStartScheduler+0x138>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	021b      	lsls	r3, r3, #8
 80121e4:	4a1c      	ldr	r2, [pc, #112]	@ (8012258 <xPortStartScheduler+0x138>)
 80121e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80121e8:	4b1b      	ldr	r3, [pc, #108]	@ (8012258 <xPortStartScheduler+0x138>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80121f0:	4a19      	ldr	r2, [pc, #100]	@ (8012258 <xPortStartScheduler+0x138>)
 80121f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	b2da      	uxtb	r2, r3
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80121fc:	4b17      	ldr	r3, [pc, #92]	@ (801225c <xPortStartScheduler+0x13c>)
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4a16      	ldr	r2, [pc, #88]	@ (801225c <xPortStartScheduler+0x13c>)
 8012202:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012208:	4b14      	ldr	r3, [pc, #80]	@ (801225c <xPortStartScheduler+0x13c>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4a13      	ldr	r2, [pc, #76]	@ (801225c <xPortStartScheduler+0x13c>)
 801220e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012214:	f000 f8da 	bl	80123cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012218:	4b11      	ldr	r3, [pc, #68]	@ (8012260 <xPortStartScheduler+0x140>)
 801221a:	2200      	movs	r2, #0
 801221c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801221e:	f000 f8f9 	bl	8012414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012222:	4b10      	ldr	r3, [pc, #64]	@ (8012264 <xPortStartScheduler+0x144>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	4a0f      	ldr	r2, [pc, #60]	@ (8012264 <xPortStartScheduler+0x144>)
 8012228:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801222c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801222e:	f7ff ff63 	bl	80120f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012232:	f7ff f82d 	bl	8011290 <vTaskSwitchContext>
	prvTaskExitError();
 8012236:	f7ff ff19 	bl	801206c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801223a:	2300      	movs	r3, #0
}
 801223c:	4618      	mov	r0, r3
 801223e:	3718      	adds	r7, #24
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	e000ed00 	.word	0xe000ed00
 8012248:	410fc271 	.word	0x410fc271
 801224c:	410fc270 	.word	0x410fc270
 8012250:	e000e400 	.word	0xe000e400
 8012254:	2400379c 	.word	0x2400379c
 8012258:	240037a0 	.word	0x240037a0
 801225c:	e000ed20 	.word	0xe000ed20
 8012260:	2400007c 	.word	0x2400007c
 8012264:	e000ef34 	.word	0xe000ef34

08012268 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
	__asm volatile
 801226e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012272:	f383 8811 	msr	BASEPRI, r3
 8012276:	f3bf 8f6f 	isb	sy
 801227a:	f3bf 8f4f 	dsb	sy
 801227e:	607b      	str	r3, [r7, #4]
}
 8012280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012282:	4b10      	ldr	r3, [pc, #64]	@ (80122c4 <vPortEnterCritical+0x5c>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	3301      	adds	r3, #1
 8012288:	4a0e      	ldr	r2, [pc, #56]	@ (80122c4 <vPortEnterCritical+0x5c>)
 801228a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801228c:	4b0d      	ldr	r3, [pc, #52]	@ (80122c4 <vPortEnterCritical+0x5c>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	2b01      	cmp	r3, #1
 8012292:	d110      	bne.n	80122b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012294:	4b0c      	ldr	r3, [pc, #48]	@ (80122c8 <vPortEnterCritical+0x60>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	b2db      	uxtb	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00b      	beq.n	80122b6 <vPortEnterCritical+0x4e>
	__asm volatile
 801229e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122a2:	f383 8811 	msr	BASEPRI, r3
 80122a6:	f3bf 8f6f 	isb	sy
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	603b      	str	r3, [r7, #0]
}
 80122b0:	bf00      	nop
 80122b2:	bf00      	nop
 80122b4:	e7fd      	b.n	80122b2 <vPortEnterCritical+0x4a>
	}
}
 80122b6:	bf00      	nop
 80122b8:	370c      	adds	r7, #12
 80122ba:	46bd      	mov	sp, r7
 80122bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c0:	4770      	bx	lr
 80122c2:	bf00      	nop
 80122c4:	2400007c 	.word	0x2400007c
 80122c8:	e000ed04 	.word	0xe000ed04

080122cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80122d2:	4b12      	ldr	r3, [pc, #72]	@ (801231c <vPortExitCritical+0x50>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d10b      	bne.n	80122f2 <vPortExitCritical+0x26>
	__asm volatile
 80122da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122de:	f383 8811 	msr	BASEPRI, r3
 80122e2:	f3bf 8f6f 	isb	sy
 80122e6:	f3bf 8f4f 	dsb	sy
 80122ea:	607b      	str	r3, [r7, #4]
}
 80122ec:	bf00      	nop
 80122ee:	bf00      	nop
 80122f0:	e7fd      	b.n	80122ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80122f2:	4b0a      	ldr	r3, [pc, #40]	@ (801231c <vPortExitCritical+0x50>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	3b01      	subs	r3, #1
 80122f8:	4a08      	ldr	r2, [pc, #32]	@ (801231c <vPortExitCritical+0x50>)
 80122fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80122fc:	4b07      	ldr	r3, [pc, #28]	@ (801231c <vPortExitCritical+0x50>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d105      	bne.n	8012310 <vPortExitCritical+0x44>
 8012304:	2300      	movs	r3, #0
 8012306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	f383 8811 	msr	BASEPRI, r3
}
 801230e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012310:	bf00      	nop
 8012312:	370c      	adds	r7, #12
 8012314:	46bd      	mov	sp, r7
 8012316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231a:	4770      	bx	lr
 801231c:	2400007c 	.word	0x2400007c

08012320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012320:	f3ef 8009 	mrs	r0, PSP
 8012324:	f3bf 8f6f 	isb	sy
 8012328:	4b15      	ldr	r3, [pc, #84]	@ (8012380 <pxCurrentTCBConst>)
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	f01e 0f10 	tst.w	lr, #16
 8012330:	bf08      	it	eq
 8012332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801233a:	6010      	str	r0, [r2, #0]
 801233c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012344:	f380 8811 	msr	BASEPRI, r0
 8012348:	f3bf 8f4f 	dsb	sy
 801234c:	f3bf 8f6f 	isb	sy
 8012350:	f7fe ff9e 	bl	8011290 <vTaskSwitchContext>
 8012354:	f04f 0000 	mov.w	r0, #0
 8012358:	f380 8811 	msr	BASEPRI, r0
 801235c:	bc09      	pop	{r0, r3}
 801235e:	6819      	ldr	r1, [r3, #0]
 8012360:	6808      	ldr	r0, [r1, #0]
 8012362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012366:	f01e 0f10 	tst.w	lr, #16
 801236a:	bf08      	it	eq
 801236c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012370:	f380 8809 	msr	PSP, r0
 8012374:	f3bf 8f6f 	isb	sy
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop
 801237c:	f3af 8000 	nop.w

08012380 <pxCurrentTCBConst>:
 8012380:	24003170 	.word	0x24003170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012384:	bf00      	nop
 8012386:	bf00      	nop

08012388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
	__asm volatile
 801238e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012392:	f383 8811 	msr	BASEPRI, r3
 8012396:	f3bf 8f6f 	isb	sy
 801239a:	f3bf 8f4f 	dsb	sy
 801239e:	607b      	str	r3, [r7, #4]
}
 80123a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80123a2:	f7fe febb 	bl	801111c <xTaskIncrementTick>
 80123a6:	4603      	mov	r3, r0
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d003      	beq.n	80123b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80123ac:	4b06      	ldr	r3, [pc, #24]	@ (80123c8 <xPortSysTickHandler+0x40>)
 80123ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123b2:	601a      	str	r2, [r3, #0]
 80123b4:	2300      	movs	r3, #0
 80123b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	f383 8811 	msr	BASEPRI, r3
}
 80123be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80123c0:	bf00      	nop
 80123c2:	3708      	adds	r7, #8
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	e000ed04 	.word	0xe000ed04

080123cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80123cc:	b480      	push	{r7}
 80123ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80123d0:	4b0b      	ldr	r3, [pc, #44]	@ (8012400 <vPortSetupTimerInterrupt+0x34>)
 80123d2:	2200      	movs	r2, #0
 80123d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80123d6:	4b0b      	ldr	r3, [pc, #44]	@ (8012404 <vPortSetupTimerInterrupt+0x38>)
 80123d8:	2200      	movs	r2, #0
 80123da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80123dc:	4b0a      	ldr	r3, [pc, #40]	@ (8012408 <vPortSetupTimerInterrupt+0x3c>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	4a0a      	ldr	r2, [pc, #40]	@ (801240c <vPortSetupTimerInterrupt+0x40>)
 80123e2:	fba2 2303 	umull	r2, r3, r2, r3
 80123e6:	095b      	lsrs	r3, r3, #5
 80123e8:	4a09      	ldr	r2, [pc, #36]	@ (8012410 <vPortSetupTimerInterrupt+0x44>)
 80123ea:	3b01      	subs	r3, #1
 80123ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80123ee:	4b04      	ldr	r3, [pc, #16]	@ (8012400 <vPortSetupTimerInterrupt+0x34>)
 80123f0:	2207      	movs	r2, #7
 80123f2:	601a      	str	r2, [r3, #0]
}
 80123f4:	bf00      	nop
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	e000e010 	.word	0xe000e010
 8012404:	e000e018 	.word	0xe000e018
 8012408:	24000054 	.word	0x24000054
 801240c:	10624dd3 	.word	0x10624dd3
 8012410:	e000e014 	.word	0xe000e014

08012414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012414:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012424 <vPortEnableVFP+0x10>
 8012418:	6801      	ldr	r1, [r0, #0]
 801241a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801241e:	6001      	str	r1, [r0, #0]
 8012420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012422:	bf00      	nop
 8012424:	e000ed88 	.word	0xe000ed88

08012428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012428:	b480      	push	{r7}
 801242a:	b085      	sub	sp, #20
 801242c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801242e:	f3ef 8305 	mrs	r3, IPSR
 8012432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2b0f      	cmp	r3, #15
 8012438:	d915      	bls.n	8012466 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801243a:	4a18      	ldr	r2, [pc, #96]	@ (801249c <vPortValidateInterruptPriority+0x74>)
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	4413      	add	r3, r2
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012444:	4b16      	ldr	r3, [pc, #88]	@ (80124a0 <vPortValidateInterruptPriority+0x78>)
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	7afa      	ldrb	r2, [r7, #11]
 801244a:	429a      	cmp	r2, r3
 801244c:	d20b      	bcs.n	8012466 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801244e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012452:	f383 8811 	msr	BASEPRI, r3
 8012456:	f3bf 8f6f 	isb	sy
 801245a:	f3bf 8f4f 	dsb	sy
 801245e:	607b      	str	r3, [r7, #4]
}
 8012460:	bf00      	nop
 8012462:	bf00      	nop
 8012464:	e7fd      	b.n	8012462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012466:	4b0f      	ldr	r3, [pc, #60]	@ (80124a4 <vPortValidateInterruptPriority+0x7c>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801246e:	4b0e      	ldr	r3, [pc, #56]	@ (80124a8 <vPortValidateInterruptPriority+0x80>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	429a      	cmp	r2, r3
 8012474:	d90b      	bls.n	801248e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801247a:	f383 8811 	msr	BASEPRI, r3
 801247e:	f3bf 8f6f 	isb	sy
 8012482:	f3bf 8f4f 	dsb	sy
 8012486:	603b      	str	r3, [r7, #0]
}
 8012488:	bf00      	nop
 801248a:	bf00      	nop
 801248c:	e7fd      	b.n	801248a <vPortValidateInterruptPriority+0x62>
	}
 801248e:	bf00      	nop
 8012490:	3714      	adds	r7, #20
 8012492:	46bd      	mov	sp, r7
 8012494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop
 801249c:	e000e3f0 	.word	0xe000e3f0
 80124a0:	2400379c 	.word	0x2400379c
 80124a4:	e000ed0c 	.word	0xe000ed0c
 80124a8:	240037a0 	.word	0x240037a0

080124ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b08a      	sub	sp, #40	@ 0x28
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80124b4:	2300      	movs	r3, #0
 80124b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80124b8:	f7fe fd74 	bl	8010fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80124bc:	4b5c      	ldr	r3, [pc, #368]	@ (8012630 <pvPortMalloc+0x184>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d101      	bne.n	80124c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80124c4:	f000 f924 	bl	8012710 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80124c8:	4b5a      	ldr	r3, [pc, #360]	@ (8012634 <pvPortMalloc+0x188>)
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	4013      	ands	r3, r2
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	f040 8095 	bne.w	8012600 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d01e      	beq.n	801251a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80124dc:	2208      	movs	r2, #8
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4413      	add	r3, r2
 80124e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f003 0307 	and.w	r3, r3, #7
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d015      	beq.n	801251a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	f023 0307 	bic.w	r3, r3, #7
 80124f4:	3308      	adds	r3, #8
 80124f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f003 0307 	and.w	r3, r3, #7
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d00b      	beq.n	801251a <pvPortMalloc+0x6e>
	__asm volatile
 8012502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012506:	f383 8811 	msr	BASEPRI, r3
 801250a:	f3bf 8f6f 	isb	sy
 801250e:	f3bf 8f4f 	dsb	sy
 8012512:	617b      	str	r3, [r7, #20]
}
 8012514:	bf00      	nop
 8012516:	bf00      	nop
 8012518:	e7fd      	b.n	8012516 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d06f      	beq.n	8012600 <pvPortMalloc+0x154>
 8012520:	4b45      	ldr	r3, [pc, #276]	@ (8012638 <pvPortMalloc+0x18c>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	687a      	ldr	r2, [r7, #4]
 8012526:	429a      	cmp	r2, r3
 8012528:	d86a      	bhi.n	8012600 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801252a:	4b44      	ldr	r3, [pc, #272]	@ (801263c <pvPortMalloc+0x190>)
 801252c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801252e:	4b43      	ldr	r3, [pc, #268]	@ (801263c <pvPortMalloc+0x190>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012534:	e004      	b.n	8012540 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012538:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	429a      	cmp	r2, r3
 8012548:	d903      	bls.n	8012552 <pvPortMalloc+0xa6>
 801254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d1f1      	bne.n	8012536 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012552:	4b37      	ldr	r3, [pc, #220]	@ (8012630 <pvPortMalloc+0x184>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012558:	429a      	cmp	r2, r3
 801255a:	d051      	beq.n	8012600 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801255c:	6a3b      	ldr	r3, [r7, #32]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2208      	movs	r2, #8
 8012562:	4413      	add	r3, r2
 8012564:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	6a3b      	ldr	r3, [r7, #32]
 801256c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012570:	685a      	ldr	r2, [r3, #4]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	1ad2      	subs	r2, r2, r3
 8012576:	2308      	movs	r3, #8
 8012578:	005b      	lsls	r3, r3, #1
 801257a:	429a      	cmp	r2, r3
 801257c:	d920      	bls.n	80125c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801257e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	4413      	add	r3, r2
 8012584:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	f003 0307 	and.w	r3, r3, #7
 801258c:	2b00      	cmp	r3, #0
 801258e:	d00b      	beq.n	80125a8 <pvPortMalloc+0xfc>
	__asm volatile
 8012590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012594:	f383 8811 	msr	BASEPRI, r3
 8012598:	f3bf 8f6f 	isb	sy
 801259c:	f3bf 8f4f 	dsb	sy
 80125a0:	613b      	str	r3, [r7, #16]
}
 80125a2:	bf00      	nop
 80125a4:	bf00      	nop
 80125a6:	e7fd      	b.n	80125a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80125a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125aa:	685a      	ldr	r2, [r3, #4]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	1ad2      	subs	r2, r2, r3
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80125b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80125ba:	69b8      	ldr	r0, [r7, #24]
 80125bc:	f000 f90a 	bl	80127d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80125c0:	4b1d      	ldr	r3, [pc, #116]	@ (8012638 <pvPortMalloc+0x18c>)
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	1ad3      	subs	r3, r2, r3
 80125ca:	4a1b      	ldr	r2, [pc, #108]	@ (8012638 <pvPortMalloc+0x18c>)
 80125cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80125ce:	4b1a      	ldr	r3, [pc, #104]	@ (8012638 <pvPortMalloc+0x18c>)
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	4b1b      	ldr	r3, [pc, #108]	@ (8012640 <pvPortMalloc+0x194>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d203      	bcs.n	80125e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80125da:	4b17      	ldr	r3, [pc, #92]	@ (8012638 <pvPortMalloc+0x18c>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	4a18      	ldr	r2, [pc, #96]	@ (8012640 <pvPortMalloc+0x194>)
 80125e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80125e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125e4:	685a      	ldr	r2, [r3, #4]
 80125e6:	4b13      	ldr	r3, [pc, #76]	@ (8012634 <pvPortMalloc+0x188>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	431a      	orrs	r2, r3
 80125ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80125f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f2:	2200      	movs	r2, #0
 80125f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80125f6:	4b13      	ldr	r3, [pc, #76]	@ (8012644 <pvPortMalloc+0x198>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	3301      	adds	r3, #1
 80125fc:	4a11      	ldr	r2, [pc, #68]	@ (8012644 <pvPortMalloc+0x198>)
 80125fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012600:	f7fe fcde 	bl	8010fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	f003 0307 	and.w	r3, r3, #7
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00b      	beq.n	8012626 <pvPortMalloc+0x17a>
	__asm volatile
 801260e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	60fb      	str	r3, [r7, #12]
}
 8012620:	bf00      	nop
 8012622:	bf00      	nop
 8012624:	e7fd      	b.n	8012622 <pvPortMalloc+0x176>
	return pvReturn;
 8012626:	69fb      	ldr	r3, [r7, #28]
}
 8012628:	4618      	mov	r0, r3
 801262a:	3728      	adds	r7, #40	@ 0x28
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	240073ac 	.word	0x240073ac
 8012634:	240073c0 	.word	0x240073c0
 8012638:	240073b0 	.word	0x240073b0
 801263c:	240073a4 	.word	0x240073a4
 8012640:	240073b4 	.word	0x240073b4
 8012644:	240073b8 	.word	0x240073b8

08012648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d04f      	beq.n	80126fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801265a:	2308      	movs	r3, #8
 801265c:	425b      	negs	r3, r3
 801265e:	697a      	ldr	r2, [r7, #20]
 8012660:	4413      	add	r3, r2
 8012662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	685a      	ldr	r2, [r3, #4]
 801266c:	4b25      	ldr	r3, [pc, #148]	@ (8012704 <vPortFree+0xbc>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	4013      	ands	r3, r2
 8012672:	2b00      	cmp	r3, #0
 8012674:	d10b      	bne.n	801268e <vPortFree+0x46>
	__asm volatile
 8012676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801267a:	f383 8811 	msr	BASEPRI, r3
 801267e:	f3bf 8f6f 	isb	sy
 8012682:	f3bf 8f4f 	dsb	sy
 8012686:	60fb      	str	r3, [r7, #12]
}
 8012688:	bf00      	nop
 801268a:	bf00      	nop
 801268c:	e7fd      	b.n	801268a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d00b      	beq.n	80126ae <vPortFree+0x66>
	__asm volatile
 8012696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801269a:	f383 8811 	msr	BASEPRI, r3
 801269e:	f3bf 8f6f 	isb	sy
 80126a2:	f3bf 8f4f 	dsb	sy
 80126a6:	60bb      	str	r3, [r7, #8]
}
 80126a8:	bf00      	nop
 80126aa:	bf00      	nop
 80126ac:	e7fd      	b.n	80126aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	685a      	ldr	r2, [r3, #4]
 80126b2:	4b14      	ldr	r3, [pc, #80]	@ (8012704 <vPortFree+0xbc>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	4013      	ands	r3, r2
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d01e      	beq.n	80126fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d11a      	bne.n	80126fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	685a      	ldr	r2, [r3, #4]
 80126c8:	4b0e      	ldr	r3, [pc, #56]	@ (8012704 <vPortFree+0xbc>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	43db      	mvns	r3, r3
 80126ce:	401a      	ands	r2, r3
 80126d0:	693b      	ldr	r3, [r7, #16]
 80126d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80126d4:	f7fe fc66 	bl	8010fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80126d8:	693b      	ldr	r3, [r7, #16]
 80126da:	685a      	ldr	r2, [r3, #4]
 80126dc:	4b0a      	ldr	r3, [pc, #40]	@ (8012708 <vPortFree+0xc0>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4413      	add	r3, r2
 80126e2:	4a09      	ldr	r2, [pc, #36]	@ (8012708 <vPortFree+0xc0>)
 80126e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80126e6:	6938      	ldr	r0, [r7, #16]
 80126e8:	f000 f874 	bl	80127d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80126ec:	4b07      	ldr	r3, [pc, #28]	@ (801270c <vPortFree+0xc4>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	3301      	adds	r3, #1
 80126f2:	4a06      	ldr	r2, [pc, #24]	@ (801270c <vPortFree+0xc4>)
 80126f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80126f6:	f7fe fc63 	bl	8010fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80126fa:	bf00      	nop
 80126fc:	3718      	adds	r7, #24
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	240073c0 	.word	0x240073c0
 8012708:	240073b0 	.word	0x240073b0
 801270c:	240073bc 	.word	0x240073bc

08012710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012710:	b480      	push	{r7}
 8012712:	b085      	sub	sp, #20
 8012714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012716:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801271a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801271c:	4b27      	ldr	r3, [pc, #156]	@ (80127bc <prvHeapInit+0xac>)
 801271e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f003 0307 	and.w	r3, r3, #7
 8012726:	2b00      	cmp	r3, #0
 8012728:	d00c      	beq.n	8012744 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	3307      	adds	r3, #7
 801272e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	f023 0307 	bic.w	r3, r3, #7
 8012736:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012738:	68ba      	ldr	r2, [r7, #8]
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	4a1f      	ldr	r2, [pc, #124]	@ (80127bc <prvHeapInit+0xac>)
 8012740:	4413      	add	r3, r2
 8012742:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012748:	4a1d      	ldr	r2, [pc, #116]	@ (80127c0 <prvHeapInit+0xb0>)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801274e:	4b1c      	ldr	r3, [pc, #112]	@ (80127c0 <prvHeapInit+0xb0>)
 8012750:	2200      	movs	r2, #0
 8012752:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	68ba      	ldr	r2, [r7, #8]
 8012758:	4413      	add	r3, r2
 801275a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801275c:	2208      	movs	r2, #8
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	1a9b      	subs	r3, r3, r2
 8012762:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f023 0307 	bic.w	r3, r3, #7
 801276a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	4a15      	ldr	r2, [pc, #84]	@ (80127c4 <prvHeapInit+0xb4>)
 8012770:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012772:	4b14      	ldr	r3, [pc, #80]	@ (80127c4 <prvHeapInit+0xb4>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	2200      	movs	r2, #0
 8012778:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801277a:	4b12      	ldr	r3, [pc, #72]	@ (80127c4 <prvHeapInit+0xb4>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2200      	movs	r2, #0
 8012780:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	68fa      	ldr	r2, [r7, #12]
 801278a:	1ad2      	subs	r2, r2, r3
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012790:	4b0c      	ldr	r3, [pc, #48]	@ (80127c4 <prvHeapInit+0xb4>)
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	4a0a      	ldr	r2, [pc, #40]	@ (80127c8 <prvHeapInit+0xb8>)
 801279e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	4a09      	ldr	r2, [pc, #36]	@ (80127cc <prvHeapInit+0xbc>)
 80127a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80127a8:	4b09      	ldr	r3, [pc, #36]	@ (80127d0 <prvHeapInit+0xc0>)
 80127aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80127ae:	601a      	str	r2, [r3, #0]
}
 80127b0:	bf00      	nop
 80127b2:	3714      	adds	r7, #20
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr
 80127bc:	240037a4 	.word	0x240037a4
 80127c0:	240073a4 	.word	0x240073a4
 80127c4:	240073ac 	.word	0x240073ac
 80127c8:	240073b4 	.word	0x240073b4
 80127cc:	240073b0 	.word	0x240073b0
 80127d0:	240073c0 	.word	0x240073c0

080127d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80127d4:	b480      	push	{r7}
 80127d6:	b085      	sub	sp, #20
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80127dc:	4b28      	ldr	r3, [pc, #160]	@ (8012880 <prvInsertBlockIntoFreeList+0xac>)
 80127de:	60fb      	str	r3, [r7, #12]
 80127e0:	e002      	b.n	80127e8 <prvInsertBlockIntoFreeList+0x14>
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	60fb      	str	r3, [r7, #12]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	687a      	ldr	r2, [r7, #4]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d8f7      	bhi.n	80127e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	68ba      	ldr	r2, [r7, #8]
 80127fc:	4413      	add	r3, r2
 80127fe:	687a      	ldr	r2, [r7, #4]
 8012800:	429a      	cmp	r2, r3
 8012802:	d108      	bne.n	8012816 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	685a      	ldr	r2, [r3, #4]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	441a      	add	r2, r3
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	68ba      	ldr	r2, [r7, #8]
 8012820:	441a      	add	r2, r3
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	429a      	cmp	r2, r3
 8012828:	d118      	bne.n	801285c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	4b15      	ldr	r3, [pc, #84]	@ (8012884 <prvInsertBlockIntoFreeList+0xb0>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	429a      	cmp	r2, r3
 8012834:	d00d      	beq.n	8012852 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	685a      	ldr	r2, [r3, #4]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	441a      	add	r2, r3
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	601a      	str	r2, [r3, #0]
 8012850:	e008      	b.n	8012864 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012852:	4b0c      	ldr	r3, [pc, #48]	@ (8012884 <prvInsertBlockIntoFreeList+0xb0>)
 8012854:	681a      	ldr	r2, [r3, #0]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	601a      	str	r2, [r3, #0]
 801285a:	e003      	b.n	8012864 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681a      	ldr	r2, [r3, #0]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012864:	68fa      	ldr	r2, [r7, #12]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	429a      	cmp	r2, r3
 801286a:	d002      	beq.n	8012872 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012872:	bf00      	nop
 8012874:	3714      	adds	r7, #20
 8012876:	46bd      	mov	sp, r7
 8012878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287c:	4770      	bx	lr
 801287e:	bf00      	nop
 8012880:	240073a4 	.word	0x240073a4
 8012884:	240073ac 	.word	0x240073ac

08012888 <arm_mat_trans_f32>:
 8012888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801288c:	8802      	ldrh	r2, [r0, #0]
 801288e:	b085      	sub	sp, #20
 8012890:	884b      	ldrh	r3, [r1, #2]
 8012892:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8012896:	4293      	cmp	r3, r2
 8012898:	8844      	ldrh	r4, [r0, #2]
 801289a:	6848      	ldr	r0, [r1, #4]
 801289c:	d14e      	bne.n	801293c <arm_mat_trans_f32+0xb4>
 801289e:	f8b1 8000 	ldrh.w	r8, [r1]
 80128a2:	45a0      	cmp	r8, r4
 80128a4:	d14a      	bne.n	801293c <arm_mat_trans_f32+0xb4>
 80128a6:	ea4f 0998 	mov.w	r9, r8, lsr #2
 80128aa:	f008 0803 	and.w	r8, r8, #3
 80128ae:	009c      	lsls	r4, r3, #2
 80128b0:	4684      	mov	ip, r0
 80128b2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80128b6:	fb09 f204 	mul.w	r2, r9, r4
 80128ba:	011d      	lsls	r5, r3, #4
 80128bc:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 80128c0:	eb00 0a04 	add.w	sl, r0, r4
 80128c4:	0092      	lsls	r2, r2, #2
 80128c6:	9103      	str	r1, [sp, #12]
 80128c8:	00db      	lsls	r3, r3, #3
 80128ca:	9202      	str	r2, [sp, #8]
 80128cc:	9301      	str	r3, [sp, #4]
 80128ce:	4663      	mov	r3, ip
 80128d0:	f1b9 0f00 	cmp.w	r9, #0
 80128d4:	d01d      	beq.n	8012912 <arm_mat_trans_f32+0x8a>
 80128d6:	9901      	ldr	r1, [sp, #4]
 80128d8:	f10e 0210 	add.w	r2, lr, #16
 80128dc:	4648      	mov	r0, r9
 80128de:	4461      	add	r1, ip
 80128e0:	ed52 7a04 	vldr	s15, [r2, #-16]
 80128e4:	191f      	adds	r7, r3, r4
 80128e6:	190e      	adds	r6, r1, r4
 80128e8:	3801      	subs	r0, #1
 80128ea:	edc3 7a00 	vstr	s15, [r3]
 80128ee:	f102 0210 	add.w	r2, r2, #16
 80128f2:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 80128f6:	442b      	add	r3, r5
 80128f8:	edc7 7a00 	vstr	s15, [r7]
 80128fc:	f852 7c18 	ldr.w	r7, [r2, #-24]
 8012900:	600f      	str	r7, [r1, #0]
 8012902:	4429      	add	r1, r5
 8012904:	f852 7c14 	ldr.w	r7, [r2, #-20]
 8012908:	6037      	str	r7, [r6, #0]
 801290a:	d1e9      	bne.n	80128e0 <arm_mat_trans_f32+0x58>
 801290c:	9b02      	ldr	r3, [sp, #8]
 801290e:	44de      	add	lr, fp
 8012910:	4463      	add	r3, ip
 8012912:	f1b8 0f00 	cmp.w	r8, #0
 8012916:	d009      	beq.n	801292c <arm_mat_trans_f32+0xa4>
 8012918:	4642      	mov	r2, r8
 801291a:	4671      	mov	r1, lr
 801291c:	f851 0b04 	ldr.w	r0, [r1], #4
 8012920:	3a01      	subs	r2, #1
 8012922:	6018      	str	r0, [r3, #0]
 8012924:	4423      	add	r3, r4
 8012926:	d1f9      	bne.n	801291c <arm_mat_trans_f32+0x94>
 8012928:	9b03      	ldr	r3, [sp, #12]
 801292a:	449e      	add	lr, r3
 801292c:	f10c 0c04 	add.w	ip, ip, #4
 8012930:	45d4      	cmp	ip, sl
 8012932:	d1cc      	bne.n	80128ce <arm_mat_trans_f32+0x46>
 8012934:	2000      	movs	r0, #0
 8012936:	b005      	add	sp, #20
 8012938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801293c:	f06f 0002 	mvn.w	r0, #2
 8012940:	e7f9      	b.n	8012936 <arm_mat_trans_f32+0xae>
 8012942:	bf00      	nop

08012944 <arm_mat_mult_f32>:
 8012944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012948:	8845      	ldrh	r5, [r0, #2]
 801294a:	b08b      	sub	sp, #44	@ 0x2c
 801294c:	880b      	ldrh	r3, [r1, #0]
 801294e:	8806      	ldrh	r6, [r0, #0]
 8012950:	42ab      	cmp	r3, r5
 8012952:	9109      	str	r1, [sp, #36]	@ 0x24
 8012954:	6847      	ldr	r7, [r0, #4]
 8012956:	9604      	str	r6, [sp, #16]
 8012958:	6848      	ldr	r0, [r1, #4]
 801295a:	6854      	ldr	r4, [r2, #4]
 801295c:	8849      	ldrh	r1, [r1, #2]
 801295e:	f040 808d 	bne.w	8012a7c <arm_mat_mult_f32+0x138>
 8012962:	8815      	ldrh	r5, [r2, #0]
 8012964:	42b5      	cmp	r5, r6
 8012966:	f040 8089 	bne.w	8012a7c <arm_mat_mult_f32+0x138>
 801296a:	8852      	ldrh	r2, [r2, #2]
 801296c:	428a      	cmp	r2, r1
 801296e:	f040 8085 	bne.w	8012a7c <arm_mat_mult_f32+0x138>
 8012972:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8012976:	1d01      	adds	r1, r0, #4
 8012978:	0116      	lsls	r6, r2, #4
 801297a:	f003 0903 	and.w	r9, r3, #3
 801297e:	9108      	str	r1, [sp, #32]
 8012980:	0095      	lsls	r5, r2, #2
 8012982:	fb06 f108 	mul.w	r1, r6, r8
 8012986:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801298a:	009b      	lsls	r3, r3, #2
 801298c:	f107 0b10 	add.w	fp, r7, #16
 8012990:	9103      	str	r1, [sp, #12]
 8012992:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8012996:	00d2      	lsls	r2, r2, #3
 8012998:	eb04 0a05 	add.w	sl, r4, r5
 801299c:	9101      	str	r1, [sp, #4]
 801299e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80129a2:	9202      	str	r2, [sp, #8]
 80129a4:	9107      	str	r1, [sp, #28]
 80129a6:	9306      	str	r3, [sp, #24]
 80129a8:	f1ab 0310 	sub.w	r3, fp, #16
 80129ac:	f8dd e020 	ldr.w	lr, [sp, #32]
 80129b0:	9305      	str	r3, [sp, #20]
 80129b2:	9b07      	ldr	r3, [sp, #28]
 80129b4:	eb03 0c0a 	add.w	ip, r3, sl
 80129b8:	f1b8 0f00 	cmp.w	r8, #0
 80129bc:	d056      	beq.n	8012a6c <arm_mat_mult_f32+0x128>
 80129be:	9b02      	ldr	r3, [sp, #8]
 80129c0:	4644      	mov	r4, r8
 80129c2:	4602      	mov	r2, r0
 80129c4:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8012a88 <arm_mat_mult_f32+0x144>
 80129c8:	18c1      	adds	r1, r0, r3
 80129ca:	465b      	mov	r3, fp
 80129cc:	edd2 6a00 	vldr	s13, [r2]
 80129d0:	1957      	adds	r7, r2, r5
 80129d2:	ed13 7a04 	vldr	s14, [r3, #-16]
 80129d6:	3c01      	subs	r4, #1
 80129d8:	ed53 5a03 	vldr	s11, [r3, #-12]
 80129dc:	4432      	add	r2, r6
 80129de:	ee27 7a26 	vmul.f32	s14, s14, s13
 80129e2:	ed97 6a00 	vldr	s12, [r7]
 80129e6:	ed53 6a02 	vldr	s13, [r3, #-8]
 80129ea:	eb01 0705 	add.w	r7, r1, r5
 80129ee:	ee26 6a25 	vmul.f32	s12, s12, s11
 80129f2:	ed91 5a00 	vldr	s10, [r1]
 80129f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129fa:	edd7 5a00 	vldr	s11, [r7]
 80129fe:	ee26 7a85 	vmul.f32	s14, s13, s10
 8012a02:	ed53 6a01 	vldr	s13, [r3, #-4]
 8012a06:	4431      	add	r1, r6
 8012a08:	f103 0310 	add.w	r3, r3, #16
 8012a0c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8012a10:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8012a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a1c:	d1d6      	bne.n	80129cc <arm_mat_mult_f32+0x88>
 8012a1e:	9b03      	ldr	r3, [sp, #12]
 8012a20:	9a01      	ldr	r2, [sp, #4]
 8012a22:	4418      	add	r0, r3
 8012a24:	f1b9 0f00 	cmp.w	r9, #0
 8012a28:	d00b      	beq.n	8012a42 <arm_mat_mult_f32+0xfe>
 8012a2a:	464b      	mov	r3, r9
 8012a2c:	edd0 6a00 	vldr	s13, [r0]
 8012a30:	3b01      	subs	r3, #1
 8012a32:	ecb2 7a01 	vldmia	r2!, {s14}
 8012a36:	4428      	add	r0, r5
 8012a38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a40:	d1f4      	bne.n	8012a2c <arm_mat_mult_f32+0xe8>
 8012a42:	ecec 7a01 	vstmia	ip!, {s15}
 8012a46:	45d4      	cmp	ip, sl
 8012a48:	4670      	mov	r0, lr
 8012a4a:	f10e 0e04 	add.w	lr, lr, #4
 8012a4e:	d1b3      	bne.n	80129b8 <arm_mat_mult_f32+0x74>
 8012a50:	9a01      	ldr	r2, [sp, #4]
 8012a52:	44aa      	add	sl, r5
 8012a54:	9b06      	ldr	r3, [sp, #24]
 8012a56:	4611      	mov	r1, r2
 8012a58:	449b      	add	fp, r3
 8012a5a:	4419      	add	r1, r3
 8012a5c:	9b04      	ldr	r3, [sp, #16]
 8012a5e:	3b01      	subs	r3, #1
 8012a60:	9101      	str	r1, [sp, #4]
 8012a62:	9304      	str	r3, [sp, #16]
 8012a64:	d006      	beq.n	8012a74 <arm_mat_mult_f32+0x130>
 8012a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a68:	6858      	ldr	r0, [r3, #4]
 8012a6a:	e79d      	b.n	80129a8 <arm_mat_mult_f32+0x64>
 8012a6c:	9a05      	ldr	r2, [sp, #20]
 8012a6e:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8012a88 <arm_mat_mult_f32+0x144>
 8012a72:	e7d7      	b.n	8012a24 <arm_mat_mult_f32+0xe0>
 8012a74:	4618      	mov	r0, r3
 8012a76:	b00b      	add	sp, #44	@ 0x2c
 8012a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a7c:	f06f 0002 	mvn.w	r0, #2
 8012a80:	b00b      	add	sp, #44	@ 0x2c
 8012a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a86:	bf00      	nop
 8012a88:	00000000 	.word	0x00000000

08012a8c <arm_mat_inverse_f32>:
 8012a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a90:	8843      	ldrh	r3, [r0, #2]
 8012a92:	b087      	sub	sp, #28
 8012a94:	8804      	ldrh	r4, [r0, #0]
 8012a96:	684d      	ldr	r5, [r1, #4]
 8012a98:	429c      	cmp	r4, r3
 8012a9a:	9301      	str	r3, [sp, #4]
 8012a9c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012aa0:	9503      	str	r5, [sp, #12]
 8012aa2:	f040 80e2 	bne.w	8012c6a <arm_mat_inverse_f32+0x1de>
 8012aa6:	880b      	ldrh	r3, [r1, #0]
 8012aa8:	884a      	ldrh	r2, [r1, #2]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	f040 80dd 	bne.w	8012c6a <arm_mat_inverse_f32+0x1de>
 8012ab0:	429c      	cmp	r4, r3
 8012ab2:	f040 80da 	bne.w	8012c6a <arm_mat_inverse_f32+0x1de>
 8012ab6:	9005      	str	r0, [sp, #20]
 8012ab8:	b1fc      	cbz	r4, 8012afa <arm_mat_inverse_f32+0x6e>
 8012aba:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8012abe:	1e66      	subs	r6, r4, #1
 8012ac0:	f845 bb04 	str.w	fp, [r5], #4
 8012ac4:	d019      	beq.n	8012afa <arm_mat_inverse_f32+0x6e>
 8012ac6:	2701      	movs	r7, #1
 8012ac8:	00b2      	lsls	r2, r6, #2
 8012aca:	4628      	mov	r0, r5
 8012acc:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	eb05 0a02 	add.w	sl, r5, r2
 8012ad6:	f001 fc46 	bl	8014366 <memset>
 8012ada:	4642      	mov	r2, r8
 8012adc:	2100      	movs	r1, #0
 8012ade:	eb0a 0508 	add.w	r5, sl, r8
 8012ae2:	4650      	mov	r0, sl
 8012ae4:	2f00      	cmp	r7, #0
 8012ae6:	f000 80c5 	beq.w	8012c74 <arm_mat_inverse_f32+0x1e8>
 8012aea:	f001 fc3c 	bl	8014366 <memset>
 8012aee:	3e01      	subs	r6, #1
 8012af0:	f107 0701 	add.w	r7, r7, #1
 8012af4:	f845 bb04 	str.w	fp, [r5], #4
 8012af8:	d1e6      	bne.n	8012ac8 <arm_mat_inverse_f32+0x3c>
 8012afa:	9b01      	ldr	r3, [sp, #4]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f000 80af 	beq.w	8012c60 <arm_mat_inverse_f32+0x1d4>
 8012b02:	009d      	lsls	r5, r3, #2
 8012b04:	46cc      	mov	ip, r9
 8012b06:	469e      	mov	lr, r3
 8012b08:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012b0c:	eb0c 0305 	add.w	r3, ip, r5
 8012b10:	462f      	mov	r7, r5
 8012b12:	2600      	movs	r6, #0
 8012b14:	9302      	str	r3, [sp, #8]
 8012b16:	1d2b      	adds	r3, r5, #4
 8012b18:	9304      	str	r3, [sp, #16]
 8012b1a:	9b02      	ldr	r3, [sp, #8]
 8012b1c:	42b4      	cmp	r4, r6
 8012b1e:	eddc 6a00 	vldr	s13, [ip]
 8012b22:	eba3 0b07 	sub.w	fp, r3, r7
 8012b26:	f000 809b 	beq.w	8012c60 <arm_mat_inverse_f32+0x1d4>
 8012b2a:	4632      	mov	r2, r6
 8012b2c:	4663      	mov	r3, ip
 8012b2e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8012c84 <arm_mat_inverse_f32+0x1f8>
 8012b32:	e009      	b.n	8012b48 <arm_mat_inverse_f32+0xbc>
 8012b34:	eef4 7a47 	vcmp.f32	s15, s14
 8012b38:	3201      	adds	r2, #1
 8012b3a:	442b      	add	r3, r5
 8012b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b40:	fe37 7a87 	vselgt.f32	s14, s15, s14
 8012b44:	42a2      	cmp	r2, r4
 8012b46:	d012      	beq.n	8012b6e <arm_mat_inverse_f32+0xe2>
 8012b48:	edd3 7a00 	vldr	s15, [r3]
 8012b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b50:	eeb1 6a67 	vneg.f32	s12, s15
 8012b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b58:	dcec      	bgt.n	8012b34 <arm_mat_inverse_f32+0xa8>
 8012b5a:	eeb4 6a47 	vcmp.f32	s12, s14
 8012b5e:	3201      	adds	r2, #1
 8012b60:	442b      	add	r3, r5
 8012b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b66:	fe36 7a07 	vselgt.f32	s14, s12, s14
 8012b6a:	42a2      	cmp	r2, r4
 8012b6c:	d1ec      	bne.n	8012b48 <arm_mat_inverse_f32+0xbc>
 8012b6e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b76:	d073      	beq.n	8012c60 <arm_mat_inverse_f32+0x1d4>
 8012b78:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b80:	d06e      	beq.n	8012c60 <arm_mat_inverse_f32+0x1d4>
 8012b82:	4672      	mov	r2, lr
 8012b84:	4663      	mov	r3, ip
 8012b86:	ed93 7a00 	vldr	s14, [r3]
 8012b8a:	3a01      	subs	r2, #1
 8012b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012b90:	ece3 7a01 	vstmia	r3!, {s15}
 8012b94:	d1f7      	bne.n	8012b86 <arm_mat_inverse_f32+0xfa>
 8012b96:	9901      	ldr	r1, [sp, #4]
 8012b98:	464b      	mov	r3, r9
 8012b9a:	ed93 7a00 	vldr	s14, [r3]
 8012b9e:	3901      	subs	r1, #1
 8012ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012ba4:	ece3 7a01 	vstmia	r3!, {s15}
 8012ba8:	d1f7      	bne.n	8012b9a <arm_mat_inverse_f32+0x10e>
 8012baa:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8012bae:	9803      	ldr	r0, [sp, #12]
 8012bb0:	42b1      	cmp	r1, r6
 8012bb2:	d038      	beq.n	8012c26 <arm_mat_inverse_f32+0x19a>
 8012bb4:	eddb 6a00 	vldr	s13, [fp]
 8012bb8:	465a      	mov	r2, fp
 8012bba:	4673      	mov	r3, lr
 8012bbc:	46e2      	mov	sl, ip
 8012bbe:	ecba 7a01 	vldmia	sl!, {s14}
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	edd2 7a00 	vldr	s15, [r2]
 8012bc8:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bd0:	ece2 7a01 	vstmia	r2!, {s15}
 8012bd4:	d1f3      	bne.n	8012bbe <arm_mat_inverse_f32+0x132>
 8012bd6:	44bb      	add	fp, r7
 8012bd8:	4602      	mov	r2, r0
 8012bda:	9b01      	ldr	r3, [sp, #4]
 8012bdc:	46ca      	mov	sl, r9
 8012bde:	ecba 7a01 	vldmia	sl!, {s14}
 8012be2:	3b01      	subs	r3, #1
 8012be4:	edd2 7a00 	vldr	s15, [r2]
 8012be8:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012bec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bf0:	ece2 7a01 	vstmia	r2!, {s15}
 8012bf4:	d1f3      	bne.n	8012bde <arm_mat_inverse_f32+0x152>
 8012bf6:	4428      	add	r0, r5
 8012bf8:	3101      	adds	r1, #1
 8012bfa:	44c3      	add	fp, r8
 8012bfc:	428c      	cmp	r4, r1
 8012bfe:	d1d7      	bne.n	8012bb0 <arm_mat_inverse_f32+0x124>
 8012c00:	9b04      	ldr	r3, [sp, #16]
 8012c02:	f1be 0e01 	subs.w	lr, lr, #1
 8012c06:	f106 0601 	add.w	r6, r6, #1
 8012c0a:	f1a7 0704 	sub.w	r7, r7, #4
 8012c0e:	449c      	add	ip, r3
 8012c10:	44a9      	add	r9, r5
 8012c12:	d182      	bne.n	8012b1a <arm_mat_inverse_f32+0x8e>
 8012c14:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1c:	d006      	beq.n	8012c2c <arm_mat_inverse_f32+0x1a0>
 8012c1e:	2000      	movs	r0, #0
 8012c20:	b007      	add	sp, #28
 8012c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c26:	44bb      	add	fp, r7
 8012c28:	4428      	add	r0, r5
 8012c2a:	e7e5      	b.n	8012bf8 <arm_mat_inverse_f32+0x16c>
 8012c2c:	9b05      	ldr	r3, [sp, #20]
 8012c2e:	9a01      	ldr	r2, [sp, #4]
 8012c30:	685b      	ldr	r3, [r3, #4]
 8012c32:	fb02 f204 	mul.w	r2, r2, r4
 8012c36:	edd3 7a00 	vldr	s15, [r3]
 8012c3a:	4614      	mov	r4, r2
 8012c3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c44:	d1eb      	bne.n	8012c1e <arm_mat_inverse_f32+0x192>
 8012c46:	3304      	adds	r3, #4
 8012c48:	e006      	b.n	8012c58 <arm_mat_inverse_f32+0x1cc>
 8012c4a:	ecf3 7a01 	vldmia	r3!, {s15}
 8012c4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c56:	d1e2      	bne.n	8012c1e <arm_mat_inverse_f32+0x192>
 8012c58:	f10e 0e01 	add.w	lr, lr, #1
 8012c5c:	4574      	cmp	r4, lr
 8012c5e:	d1f4      	bne.n	8012c4a <arm_mat_inverse_f32+0x1be>
 8012c60:	f06f 0004 	mvn.w	r0, #4
 8012c64:	b007      	add	sp, #28
 8012c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6a:	f06f 0002 	mvn.w	r0, #2
 8012c6e:	b007      	add	sp, #28
 8012c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c74:	4655      	mov	r5, sl
 8012c76:	3e01      	subs	r6, #1
 8012c78:	f845 bb04 	str.w	fp, [r5], #4
 8012c7c:	f47f af23 	bne.w	8012ac6 <arm_mat_inverse_f32+0x3a>
 8012c80:	e73b      	b.n	8012afa <arm_mat_inverse_f32+0x6e>
 8012c82:	bf00      	nop
 8012c84:	00000000 	.word	0x00000000

08012c88 <arm_mat_init_f32>:
 8012c88:	8001      	strh	r1, [r0, #0]
 8012c8a:	8042      	strh	r2, [r0, #2]
 8012c8c:	6043      	str	r3, [r0, #4]
 8012c8e:	4770      	bx	lr

08012c90 <sulp>:
 8012c90:	b570      	push	{r4, r5, r6, lr}
 8012c92:	4604      	mov	r4, r0
 8012c94:	460d      	mov	r5, r1
 8012c96:	4616      	mov	r6, r2
 8012c98:	ec45 4b10 	vmov	d0, r4, r5
 8012c9c:	f003 fa5e 	bl	801615c <__ulp>
 8012ca0:	b17e      	cbz	r6, 8012cc2 <sulp+0x32>
 8012ca2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012ca6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	dd09      	ble.n	8012cc2 <sulp+0x32>
 8012cae:	051b      	lsls	r3, r3, #20
 8012cb0:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8012cba:	ec41 0b17 	vmov	d7, r0, r1
 8012cbe:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012cc2:	bd70      	pop	{r4, r5, r6, pc}
 8012cc4:	0000      	movs	r0, r0
	...

08012cc8 <_strtod_l>:
 8012cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ccc:	ed2d 8b0a 	vpush	{d8-d12}
 8012cd0:	b097      	sub	sp, #92	@ 0x5c
 8012cd2:	4688      	mov	r8, r1
 8012cd4:	920e      	str	r2, [sp, #56]	@ 0x38
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	9212      	str	r2, [sp, #72]	@ 0x48
 8012cda:	9005      	str	r0, [sp, #20]
 8012cdc:	f04f 0a00 	mov.w	sl, #0
 8012ce0:	f04f 0b00 	mov.w	fp, #0
 8012ce4:	460a      	mov	r2, r1
 8012ce6:	9211      	str	r2, [sp, #68]	@ 0x44
 8012ce8:	7811      	ldrb	r1, [r2, #0]
 8012cea:	292b      	cmp	r1, #43	@ 0x2b
 8012cec:	d04c      	beq.n	8012d88 <_strtod_l+0xc0>
 8012cee:	d839      	bhi.n	8012d64 <_strtod_l+0x9c>
 8012cf0:	290d      	cmp	r1, #13
 8012cf2:	d833      	bhi.n	8012d5c <_strtod_l+0x94>
 8012cf4:	2908      	cmp	r1, #8
 8012cf6:	d833      	bhi.n	8012d60 <_strtod_l+0x98>
 8012cf8:	2900      	cmp	r1, #0
 8012cfa:	d03c      	beq.n	8012d76 <_strtod_l+0xae>
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	9208      	str	r2, [sp, #32]
 8012d00:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8012d02:	782a      	ldrb	r2, [r5, #0]
 8012d04:	2a30      	cmp	r2, #48	@ 0x30
 8012d06:	f040 80b7 	bne.w	8012e78 <_strtod_l+0x1b0>
 8012d0a:	786a      	ldrb	r2, [r5, #1]
 8012d0c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012d10:	2a58      	cmp	r2, #88	@ 0x58
 8012d12:	d170      	bne.n	8012df6 <_strtod_l+0x12e>
 8012d14:	9302      	str	r3, [sp, #8]
 8012d16:	9b08      	ldr	r3, [sp, #32]
 8012d18:	9301      	str	r3, [sp, #4]
 8012d1a:	ab12      	add	r3, sp, #72	@ 0x48
 8012d1c:	9300      	str	r3, [sp, #0]
 8012d1e:	4a90      	ldr	r2, [pc, #576]	@ (8012f60 <_strtod_l+0x298>)
 8012d20:	9805      	ldr	r0, [sp, #20]
 8012d22:	ab13      	add	r3, sp, #76	@ 0x4c
 8012d24:	a911      	add	r1, sp, #68	@ 0x44
 8012d26:	f002 fb13 	bl	8015350 <__gethex>
 8012d2a:	f010 060f 	ands.w	r6, r0, #15
 8012d2e:	4604      	mov	r4, r0
 8012d30:	d005      	beq.n	8012d3e <_strtod_l+0x76>
 8012d32:	2e06      	cmp	r6, #6
 8012d34:	d12a      	bne.n	8012d8c <_strtod_l+0xc4>
 8012d36:	3501      	adds	r5, #1
 8012d38:	2300      	movs	r3, #0
 8012d3a:	9511      	str	r5, [sp, #68]	@ 0x44
 8012d3c:	9308      	str	r3, [sp, #32]
 8012d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	f040 8537 	bne.w	80137b4 <_strtod_l+0xaec>
 8012d46:	9b08      	ldr	r3, [sp, #32]
 8012d48:	ec4b ab10 	vmov	d0, sl, fp
 8012d4c:	b1cb      	cbz	r3, 8012d82 <_strtod_l+0xba>
 8012d4e:	eeb1 0b40 	vneg.f64	d0, d0
 8012d52:	b017      	add	sp, #92	@ 0x5c
 8012d54:	ecbd 8b0a 	vpop	{d8-d12}
 8012d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d5c:	2920      	cmp	r1, #32
 8012d5e:	d1cd      	bne.n	8012cfc <_strtod_l+0x34>
 8012d60:	3201      	adds	r2, #1
 8012d62:	e7c0      	b.n	8012ce6 <_strtod_l+0x1e>
 8012d64:	292d      	cmp	r1, #45	@ 0x2d
 8012d66:	d1c9      	bne.n	8012cfc <_strtod_l+0x34>
 8012d68:	2101      	movs	r1, #1
 8012d6a:	9108      	str	r1, [sp, #32]
 8012d6c:	1c51      	adds	r1, r2, #1
 8012d6e:	9111      	str	r1, [sp, #68]	@ 0x44
 8012d70:	7852      	ldrb	r2, [r2, #1]
 8012d72:	2a00      	cmp	r2, #0
 8012d74:	d1c4      	bne.n	8012d00 <_strtod_l+0x38>
 8012d76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d78:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	f040 8517 	bne.w	80137b0 <_strtod_l+0xae8>
 8012d82:	ec4b ab10 	vmov	d0, sl, fp
 8012d86:	e7e4      	b.n	8012d52 <_strtod_l+0x8a>
 8012d88:	2100      	movs	r1, #0
 8012d8a:	e7ee      	b.n	8012d6a <_strtod_l+0xa2>
 8012d8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8012d8e:	b13a      	cbz	r2, 8012da0 <_strtod_l+0xd8>
 8012d90:	2135      	movs	r1, #53	@ 0x35
 8012d92:	a814      	add	r0, sp, #80	@ 0x50
 8012d94:	f003 fad9 	bl	801634a <__copybits>
 8012d98:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012d9a:	9805      	ldr	r0, [sp, #20]
 8012d9c:	f002 feb2 	bl	8015b04 <_Bfree>
 8012da0:	1e73      	subs	r3, r6, #1
 8012da2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012da4:	2b04      	cmp	r3, #4
 8012da6:	d806      	bhi.n	8012db6 <_strtod_l+0xee>
 8012da8:	e8df f003 	tbb	[pc, r3]
 8012dac:	201d0314 	.word	0x201d0314
 8012db0:	14          	.byte	0x14
 8012db1:	00          	.byte	0x00
 8012db2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8012db6:	05e3      	lsls	r3, r4, #23
 8012db8:	bf48      	it	mi
 8012dba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8012dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012dc2:	0d1b      	lsrs	r3, r3, #20
 8012dc4:	051b      	lsls	r3, r3, #20
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d1b9      	bne.n	8012d3e <_strtod_l+0x76>
 8012dca:	f001 fbdd 	bl	8014588 <__errno>
 8012dce:	2322      	movs	r3, #34	@ 0x22
 8012dd0:	6003      	str	r3, [r0, #0]
 8012dd2:	e7b4      	b.n	8012d3e <_strtod_l+0x76>
 8012dd4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8012dd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012ddc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8012de0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012de4:	e7e7      	b.n	8012db6 <_strtod_l+0xee>
 8012de6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8012f68 <_strtod_l+0x2a0>
 8012dea:	e7e4      	b.n	8012db6 <_strtod_l+0xee>
 8012dec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8012df0:	f04f 3aff 	mov.w	sl, #4294967295
 8012df4:	e7df      	b.n	8012db6 <_strtod_l+0xee>
 8012df6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012df8:	1c5a      	adds	r2, r3, #1
 8012dfa:	9211      	str	r2, [sp, #68]	@ 0x44
 8012dfc:	785b      	ldrb	r3, [r3, #1]
 8012dfe:	2b30      	cmp	r3, #48	@ 0x30
 8012e00:	d0f9      	beq.n	8012df6 <_strtod_l+0x12e>
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d09b      	beq.n	8012d3e <_strtod_l+0x76>
 8012e06:	2301      	movs	r3, #1
 8012e08:	9307      	str	r3, [sp, #28]
 8012e0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e0e:	2300      	movs	r3, #0
 8012e10:	9306      	str	r3, [sp, #24]
 8012e12:	4699      	mov	r9, r3
 8012e14:	461d      	mov	r5, r3
 8012e16:	220a      	movs	r2, #10
 8012e18:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012e1a:	7804      	ldrb	r4, [r0, #0]
 8012e1c:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8012e20:	b2d9      	uxtb	r1, r3
 8012e22:	2909      	cmp	r1, #9
 8012e24:	d92a      	bls.n	8012e7c <_strtod_l+0x1b4>
 8012e26:	494f      	ldr	r1, [pc, #316]	@ (8012f64 <_strtod_l+0x29c>)
 8012e28:	2201      	movs	r2, #1
 8012e2a:	f001 fab1 	bl	8014390 <strncmp>
 8012e2e:	b398      	cbz	r0, 8012e98 <_strtod_l+0x1d0>
 8012e30:	2000      	movs	r0, #0
 8012e32:	4622      	mov	r2, r4
 8012e34:	462b      	mov	r3, r5
 8012e36:	4607      	mov	r7, r0
 8012e38:	4601      	mov	r1, r0
 8012e3a:	2a65      	cmp	r2, #101	@ 0x65
 8012e3c:	d001      	beq.n	8012e42 <_strtod_l+0x17a>
 8012e3e:	2a45      	cmp	r2, #69	@ 0x45
 8012e40:	d118      	bne.n	8012e74 <_strtod_l+0x1ac>
 8012e42:	b91b      	cbnz	r3, 8012e4c <_strtod_l+0x184>
 8012e44:	9b07      	ldr	r3, [sp, #28]
 8012e46:	4303      	orrs	r3, r0
 8012e48:	d095      	beq.n	8012d76 <_strtod_l+0xae>
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8012e50:	f108 0201 	add.w	r2, r8, #1
 8012e54:	9211      	str	r2, [sp, #68]	@ 0x44
 8012e56:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012e5a:	2a2b      	cmp	r2, #43	@ 0x2b
 8012e5c:	d074      	beq.n	8012f48 <_strtod_l+0x280>
 8012e5e:	2a2d      	cmp	r2, #45	@ 0x2d
 8012e60:	d07a      	beq.n	8012f58 <_strtod_l+0x290>
 8012e62:	f04f 0e00 	mov.w	lr, #0
 8012e66:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8012e6a:	2c09      	cmp	r4, #9
 8012e6c:	f240 8082 	bls.w	8012f74 <_strtod_l+0x2ac>
 8012e70:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8012e74:	2400      	movs	r4, #0
 8012e76:	e09d      	b.n	8012fb4 <_strtod_l+0x2ec>
 8012e78:	2300      	movs	r3, #0
 8012e7a:	e7c5      	b.n	8012e08 <_strtod_l+0x140>
 8012e7c:	2d08      	cmp	r5, #8
 8012e7e:	bfc8      	it	gt
 8012e80:	9906      	ldrgt	r1, [sp, #24]
 8012e82:	f100 0001 	add.w	r0, r0, #1
 8012e86:	bfca      	itet	gt
 8012e88:	fb02 3301 	mlagt	r3, r2, r1, r3
 8012e8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8012e90:	9306      	strgt	r3, [sp, #24]
 8012e92:	3501      	adds	r5, #1
 8012e94:	9011      	str	r0, [sp, #68]	@ 0x44
 8012e96:	e7bf      	b.n	8012e18 <_strtod_l+0x150>
 8012e98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012e9a:	1c5a      	adds	r2, r3, #1
 8012e9c:	9211      	str	r2, [sp, #68]	@ 0x44
 8012e9e:	785a      	ldrb	r2, [r3, #1]
 8012ea0:	b3bd      	cbz	r5, 8012f12 <_strtod_l+0x24a>
 8012ea2:	4607      	mov	r7, r0
 8012ea4:	462b      	mov	r3, r5
 8012ea6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8012eaa:	2909      	cmp	r1, #9
 8012eac:	d912      	bls.n	8012ed4 <_strtod_l+0x20c>
 8012eae:	2101      	movs	r1, #1
 8012eb0:	e7c3      	b.n	8012e3a <_strtod_l+0x172>
 8012eb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012eb4:	1c5a      	adds	r2, r3, #1
 8012eb6:	9211      	str	r2, [sp, #68]	@ 0x44
 8012eb8:	785a      	ldrb	r2, [r3, #1]
 8012eba:	3001      	adds	r0, #1
 8012ebc:	2a30      	cmp	r2, #48	@ 0x30
 8012ebe:	d0f8      	beq.n	8012eb2 <_strtod_l+0x1ea>
 8012ec0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8012ec4:	2b08      	cmp	r3, #8
 8012ec6:	f200 847a 	bhi.w	80137be <_strtod_l+0xaf6>
 8012eca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ece:	4607      	mov	r7, r0
 8012ed0:	2000      	movs	r0, #0
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	3a30      	subs	r2, #48	@ 0x30
 8012ed6:	f100 0101 	add.w	r1, r0, #1
 8012eda:	d014      	beq.n	8012f06 <_strtod_l+0x23e>
 8012edc:	440f      	add	r7, r1
 8012ede:	469c      	mov	ip, r3
 8012ee0:	f04f 0e0a 	mov.w	lr, #10
 8012ee4:	f10c 0401 	add.w	r4, ip, #1
 8012ee8:	1ae6      	subs	r6, r4, r3
 8012eea:	42b1      	cmp	r1, r6
 8012eec:	dc13      	bgt.n	8012f16 <_strtod_l+0x24e>
 8012eee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8012ef2:	1819      	adds	r1, r3, r0
 8012ef4:	2908      	cmp	r1, #8
 8012ef6:	f103 0301 	add.w	r3, r3, #1
 8012efa:	4403      	add	r3, r0
 8012efc:	dc19      	bgt.n	8012f32 <_strtod_l+0x26a>
 8012efe:	210a      	movs	r1, #10
 8012f00:	fb01 2909 	mla	r9, r1, r9, r2
 8012f04:	2100      	movs	r1, #0
 8012f06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f08:	1c50      	adds	r0, r2, #1
 8012f0a:	9011      	str	r0, [sp, #68]	@ 0x44
 8012f0c:	7852      	ldrb	r2, [r2, #1]
 8012f0e:	4608      	mov	r0, r1
 8012f10:	e7c9      	b.n	8012ea6 <_strtod_l+0x1de>
 8012f12:	4628      	mov	r0, r5
 8012f14:	e7d2      	b.n	8012ebc <_strtod_l+0x1f4>
 8012f16:	f1bc 0f08 	cmp.w	ip, #8
 8012f1a:	dc03      	bgt.n	8012f24 <_strtod_l+0x25c>
 8012f1c:	fb0e f909 	mul.w	r9, lr, r9
 8012f20:	46a4      	mov	ip, r4
 8012f22:	e7df      	b.n	8012ee4 <_strtod_l+0x21c>
 8012f24:	2c10      	cmp	r4, #16
 8012f26:	bfde      	ittt	le
 8012f28:	9e06      	ldrle	r6, [sp, #24]
 8012f2a:	fb0e f606 	mulle.w	r6, lr, r6
 8012f2e:	9606      	strle	r6, [sp, #24]
 8012f30:	e7f6      	b.n	8012f20 <_strtod_l+0x258>
 8012f32:	290f      	cmp	r1, #15
 8012f34:	bfdf      	itttt	le
 8012f36:	9806      	ldrle	r0, [sp, #24]
 8012f38:	210a      	movle	r1, #10
 8012f3a:	fb01 2200 	mlale	r2, r1, r0, r2
 8012f3e:	9206      	strle	r2, [sp, #24]
 8012f40:	e7e0      	b.n	8012f04 <_strtod_l+0x23c>
 8012f42:	2700      	movs	r7, #0
 8012f44:	2101      	movs	r1, #1
 8012f46:	e77d      	b.n	8012e44 <_strtod_l+0x17c>
 8012f48:	f04f 0e00 	mov.w	lr, #0
 8012f4c:	f108 0202 	add.w	r2, r8, #2
 8012f50:	9211      	str	r2, [sp, #68]	@ 0x44
 8012f52:	f898 2002 	ldrb.w	r2, [r8, #2]
 8012f56:	e786      	b.n	8012e66 <_strtod_l+0x19e>
 8012f58:	f04f 0e01 	mov.w	lr, #1
 8012f5c:	e7f6      	b.n	8012f4c <_strtod_l+0x284>
 8012f5e:	bf00      	nop
 8012f60:	0801745c 	.word	0x0801745c
 8012f64:	08017274 	.word	0x08017274
 8012f68:	7ff00000 	.word	0x7ff00000
 8012f6c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f6e:	1c54      	adds	r4, r2, #1
 8012f70:	9411      	str	r4, [sp, #68]	@ 0x44
 8012f72:	7852      	ldrb	r2, [r2, #1]
 8012f74:	2a30      	cmp	r2, #48	@ 0x30
 8012f76:	d0f9      	beq.n	8012f6c <_strtod_l+0x2a4>
 8012f78:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8012f7c:	2c08      	cmp	r4, #8
 8012f7e:	f63f af79 	bhi.w	8012e74 <_strtod_l+0x1ac>
 8012f82:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8012f86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f88:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f8a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012f8c:	1c54      	adds	r4, r2, #1
 8012f8e:	9411      	str	r4, [sp, #68]	@ 0x44
 8012f90:	7852      	ldrb	r2, [r2, #1]
 8012f92:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8012f96:	2e09      	cmp	r6, #9
 8012f98:	d937      	bls.n	801300a <_strtod_l+0x342>
 8012f9a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8012f9c:	1ba4      	subs	r4, r4, r6
 8012f9e:	2c08      	cmp	r4, #8
 8012fa0:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8012fa4:	dc02      	bgt.n	8012fac <_strtod_l+0x2e4>
 8012fa6:	4564      	cmp	r4, ip
 8012fa8:	bfa8      	it	ge
 8012faa:	4664      	movge	r4, ip
 8012fac:	f1be 0f00 	cmp.w	lr, #0
 8012fb0:	d000      	beq.n	8012fb4 <_strtod_l+0x2ec>
 8012fb2:	4264      	negs	r4, r4
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d14d      	bne.n	8013054 <_strtod_l+0x38c>
 8012fb8:	9b07      	ldr	r3, [sp, #28]
 8012fba:	4318      	orrs	r0, r3
 8012fbc:	f47f aebf 	bne.w	8012d3e <_strtod_l+0x76>
 8012fc0:	2900      	cmp	r1, #0
 8012fc2:	f47f aed8 	bne.w	8012d76 <_strtod_l+0xae>
 8012fc6:	2a69      	cmp	r2, #105	@ 0x69
 8012fc8:	d027      	beq.n	801301a <_strtod_l+0x352>
 8012fca:	dc24      	bgt.n	8013016 <_strtod_l+0x34e>
 8012fcc:	2a49      	cmp	r2, #73	@ 0x49
 8012fce:	d024      	beq.n	801301a <_strtod_l+0x352>
 8012fd0:	2a4e      	cmp	r2, #78	@ 0x4e
 8012fd2:	f47f aed0 	bne.w	8012d76 <_strtod_l+0xae>
 8012fd6:	4997      	ldr	r1, [pc, #604]	@ (8013234 <_strtod_l+0x56c>)
 8012fd8:	a811      	add	r0, sp, #68	@ 0x44
 8012fda:	f002 fbdb 	bl	8015794 <__match>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	f43f aec9 	beq.w	8012d76 <_strtod_l+0xae>
 8012fe4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	2b28      	cmp	r3, #40	@ 0x28
 8012fea:	d12d      	bne.n	8013048 <_strtod_l+0x380>
 8012fec:	4992      	ldr	r1, [pc, #584]	@ (8013238 <_strtod_l+0x570>)
 8012fee:	aa14      	add	r2, sp, #80	@ 0x50
 8012ff0:	a811      	add	r0, sp, #68	@ 0x44
 8012ff2:	f002 fbe3 	bl	80157bc <__hexnan>
 8012ff6:	2805      	cmp	r0, #5
 8012ff8:	d126      	bne.n	8013048 <_strtod_l+0x380>
 8012ffa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012ffc:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8013000:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013004:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013008:	e699      	b.n	8012d3e <_strtod_l+0x76>
 801300a:	240a      	movs	r4, #10
 801300c:	fb04 2c0c 	mla	ip, r4, ip, r2
 8013010:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8013014:	e7b9      	b.n	8012f8a <_strtod_l+0x2c2>
 8013016:	2a6e      	cmp	r2, #110	@ 0x6e
 8013018:	e7db      	b.n	8012fd2 <_strtod_l+0x30a>
 801301a:	4988      	ldr	r1, [pc, #544]	@ (801323c <_strtod_l+0x574>)
 801301c:	a811      	add	r0, sp, #68	@ 0x44
 801301e:	f002 fbb9 	bl	8015794 <__match>
 8013022:	2800      	cmp	r0, #0
 8013024:	f43f aea7 	beq.w	8012d76 <_strtod_l+0xae>
 8013028:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801302a:	4985      	ldr	r1, [pc, #532]	@ (8013240 <_strtod_l+0x578>)
 801302c:	3b01      	subs	r3, #1
 801302e:	a811      	add	r0, sp, #68	@ 0x44
 8013030:	9311      	str	r3, [sp, #68]	@ 0x44
 8013032:	f002 fbaf 	bl	8015794 <__match>
 8013036:	b910      	cbnz	r0, 801303e <_strtod_l+0x376>
 8013038:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801303a:	3301      	adds	r3, #1
 801303c:	9311      	str	r3, [sp, #68]	@ 0x44
 801303e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8013254 <_strtod_l+0x58c>
 8013042:	f04f 0a00 	mov.w	sl, #0
 8013046:	e67a      	b.n	8012d3e <_strtod_l+0x76>
 8013048:	487e      	ldr	r0, [pc, #504]	@ (8013244 <_strtod_l+0x57c>)
 801304a:	f001 fad9 	bl	8014600 <nan>
 801304e:	ec5b ab10 	vmov	sl, fp, d0
 8013052:	e674      	b.n	8012d3e <_strtod_l+0x76>
 8013054:	ee07 9a90 	vmov	s15, r9
 8013058:	1be2      	subs	r2, r4, r7
 801305a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801305e:	2d00      	cmp	r5, #0
 8013060:	bf08      	it	eq
 8013062:	461d      	moveq	r5, r3
 8013064:	2b10      	cmp	r3, #16
 8013066:	9209      	str	r2, [sp, #36]	@ 0x24
 8013068:	461a      	mov	r2, r3
 801306a:	bfa8      	it	ge
 801306c:	2210      	movge	r2, #16
 801306e:	2b09      	cmp	r3, #9
 8013070:	ec5b ab17 	vmov	sl, fp, d7
 8013074:	dc15      	bgt.n	80130a2 <_strtod_l+0x3da>
 8013076:	1be1      	subs	r1, r4, r7
 8013078:	2900      	cmp	r1, #0
 801307a:	f43f ae60 	beq.w	8012d3e <_strtod_l+0x76>
 801307e:	eba4 0107 	sub.w	r1, r4, r7
 8013082:	dd72      	ble.n	801316a <_strtod_l+0x4a2>
 8013084:	2916      	cmp	r1, #22
 8013086:	dc59      	bgt.n	801313c <_strtod_l+0x474>
 8013088:	4b6f      	ldr	r3, [pc, #444]	@ (8013248 <_strtod_l+0x580>)
 801308a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801308c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013090:	ed93 7b00 	vldr	d7, [r3]
 8013094:	ec4b ab16 	vmov	d6, sl, fp
 8013098:	ee27 7b06 	vmul.f64	d7, d7, d6
 801309c:	ec5b ab17 	vmov	sl, fp, d7
 80130a0:	e64d      	b.n	8012d3e <_strtod_l+0x76>
 80130a2:	4969      	ldr	r1, [pc, #420]	@ (8013248 <_strtod_l+0x580>)
 80130a4:	eddd 6a06 	vldr	s13, [sp, #24]
 80130a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80130ac:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80130b0:	2b0f      	cmp	r3, #15
 80130b2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80130b6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80130ba:	ec5b ab16 	vmov	sl, fp, d6
 80130be:	ddda      	ble.n	8013076 <_strtod_l+0x3ae>
 80130c0:	1a9a      	subs	r2, r3, r2
 80130c2:	1be1      	subs	r1, r4, r7
 80130c4:	440a      	add	r2, r1
 80130c6:	2a00      	cmp	r2, #0
 80130c8:	f340 8094 	ble.w	80131f4 <_strtod_l+0x52c>
 80130cc:	f012 000f 	ands.w	r0, r2, #15
 80130d0:	d00a      	beq.n	80130e8 <_strtod_l+0x420>
 80130d2:	495d      	ldr	r1, [pc, #372]	@ (8013248 <_strtod_l+0x580>)
 80130d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80130d8:	ed91 7b00 	vldr	d7, [r1]
 80130dc:	ec4b ab16 	vmov	d6, sl, fp
 80130e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80130e4:	ec5b ab17 	vmov	sl, fp, d7
 80130e8:	f032 020f 	bics.w	r2, r2, #15
 80130ec:	d073      	beq.n	80131d6 <_strtod_l+0x50e>
 80130ee:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80130f2:	dd47      	ble.n	8013184 <_strtod_l+0x4bc>
 80130f4:	2400      	movs	r4, #0
 80130f6:	4625      	mov	r5, r4
 80130f8:	9407      	str	r4, [sp, #28]
 80130fa:	4626      	mov	r6, r4
 80130fc:	9a05      	ldr	r2, [sp, #20]
 80130fe:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013254 <_strtod_l+0x58c>
 8013102:	2322      	movs	r3, #34	@ 0x22
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	f04f 0a00 	mov.w	sl, #0
 801310a:	9b07      	ldr	r3, [sp, #28]
 801310c:	2b00      	cmp	r3, #0
 801310e:	f43f ae16 	beq.w	8012d3e <_strtod_l+0x76>
 8013112:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013114:	9805      	ldr	r0, [sp, #20]
 8013116:	f002 fcf5 	bl	8015b04 <_Bfree>
 801311a:	9805      	ldr	r0, [sp, #20]
 801311c:	4631      	mov	r1, r6
 801311e:	f002 fcf1 	bl	8015b04 <_Bfree>
 8013122:	9805      	ldr	r0, [sp, #20]
 8013124:	4629      	mov	r1, r5
 8013126:	f002 fced 	bl	8015b04 <_Bfree>
 801312a:	9907      	ldr	r1, [sp, #28]
 801312c:	9805      	ldr	r0, [sp, #20]
 801312e:	f002 fce9 	bl	8015b04 <_Bfree>
 8013132:	9805      	ldr	r0, [sp, #20]
 8013134:	4621      	mov	r1, r4
 8013136:	f002 fce5 	bl	8015b04 <_Bfree>
 801313a:	e600      	b.n	8012d3e <_strtod_l+0x76>
 801313c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8013140:	1be0      	subs	r0, r4, r7
 8013142:	4281      	cmp	r1, r0
 8013144:	dbbc      	blt.n	80130c0 <_strtod_l+0x3f8>
 8013146:	4a40      	ldr	r2, [pc, #256]	@ (8013248 <_strtod_l+0x580>)
 8013148:	f1c3 030f 	rsb	r3, r3, #15
 801314c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013150:	ed91 7b00 	vldr	d7, [r1]
 8013154:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013156:	ec4b ab16 	vmov	d6, sl, fp
 801315a:	1acb      	subs	r3, r1, r3
 801315c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013160:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013164:	ed92 6b00 	vldr	d6, [r2]
 8013168:	e796      	b.n	8013098 <_strtod_l+0x3d0>
 801316a:	3116      	adds	r1, #22
 801316c:	dba8      	blt.n	80130c0 <_strtod_l+0x3f8>
 801316e:	4b36      	ldr	r3, [pc, #216]	@ (8013248 <_strtod_l+0x580>)
 8013170:	1b3c      	subs	r4, r7, r4
 8013172:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013176:	ed94 7b00 	vldr	d7, [r4]
 801317a:	ec4b ab16 	vmov	d6, sl, fp
 801317e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013182:	e78b      	b.n	801309c <_strtod_l+0x3d4>
 8013184:	2000      	movs	r0, #0
 8013186:	ec4b ab17 	vmov	d7, sl, fp
 801318a:	4e30      	ldr	r6, [pc, #192]	@ (801324c <_strtod_l+0x584>)
 801318c:	1112      	asrs	r2, r2, #4
 801318e:	4601      	mov	r1, r0
 8013190:	2a01      	cmp	r2, #1
 8013192:	dc23      	bgt.n	80131dc <_strtod_l+0x514>
 8013194:	b108      	cbz	r0, 801319a <_strtod_l+0x4d2>
 8013196:	ec5b ab17 	vmov	sl, fp, d7
 801319a:	4a2c      	ldr	r2, [pc, #176]	@ (801324c <_strtod_l+0x584>)
 801319c:	482c      	ldr	r0, [pc, #176]	@ (8013250 <_strtod_l+0x588>)
 801319e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80131a2:	ed92 7b00 	vldr	d7, [r2]
 80131a6:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80131aa:	ec4b ab16 	vmov	d6, sl, fp
 80131ae:	4a29      	ldr	r2, [pc, #164]	@ (8013254 <_strtod_l+0x58c>)
 80131b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131b4:	ee17 1a90 	vmov	r1, s15
 80131b8:	400a      	ands	r2, r1
 80131ba:	4282      	cmp	r2, r0
 80131bc:	ec5b ab17 	vmov	sl, fp, d7
 80131c0:	d898      	bhi.n	80130f4 <_strtod_l+0x42c>
 80131c2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80131c6:	4282      	cmp	r2, r0
 80131c8:	bf86      	itte	hi
 80131ca:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8013258 <_strtod_l+0x590>
 80131ce:	f04f 3aff 	movhi.w	sl, #4294967295
 80131d2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80131d6:	2200      	movs	r2, #0
 80131d8:	9206      	str	r2, [sp, #24]
 80131da:	e076      	b.n	80132ca <_strtod_l+0x602>
 80131dc:	f012 0f01 	tst.w	r2, #1
 80131e0:	d004      	beq.n	80131ec <_strtod_l+0x524>
 80131e2:	ed96 6b00 	vldr	d6, [r6]
 80131e6:	2001      	movs	r0, #1
 80131e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131ec:	3101      	adds	r1, #1
 80131ee:	1052      	asrs	r2, r2, #1
 80131f0:	3608      	adds	r6, #8
 80131f2:	e7cd      	b.n	8013190 <_strtod_l+0x4c8>
 80131f4:	d0ef      	beq.n	80131d6 <_strtod_l+0x50e>
 80131f6:	4252      	negs	r2, r2
 80131f8:	f012 000f 	ands.w	r0, r2, #15
 80131fc:	d00a      	beq.n	8013214 <_strtod_l+0x54c>
 80131fe:	4912      	ldr	r1, [pc, #72]	@ (8013248 <_strtod_l+0x580>)
 8013200:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013204:	ed91 7b00 	vldr	d7, [r1]
 8013208:	ec4b ab16 	vmov	d6, sl, fp
 801320c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013210:	ec5b ab17 	vmov	sl, fp, d7
 8013214:	1112      	asrs	r2, r2, #4
 8013216:	d0de      	beq.n	80131d6 <_strtod_l+0x50e>
 8013218:	2a1f      	cmp	r2, #31
 801321a:	dd1f      	ble.n	801325c <_strtod_l+0x594>
 801321c:	2400      	movs	r4, #0
 801321e:	4625      	mov	r5, r4
 8013220:	9407      	str	r4, [sp, #28]
 8013222:	4626      	mov	r6, r4
 8013224:	9a05      	ldr	r2, [sp, #20]
 8013226:	2322      	movs	r3, #34	@ 0x22
 8013228:	f04f 0a00 	mov.w	sl, #0
 801322c:	f04f 0b00 	mov.w	fp, #0
 8013230:	6013      	str	r3, [r2, #0]
 8013232:	e76a      	b.n	801310a <_strtod_l+0x442>
 8013234:	08017283 	.word	0x08017283
 8013238:	08017448 	.word	0x08017448
 801323c:	0801727b 	.word	0x0801727b
 8013240:	080172b5 	.word	0x080172b5
 8013244:	08017444 	.word	0x08017444
 8013248:	080174d0 	.word	0x080174d0
 801324c:	080174a8 	.word	0x080174a8
 8013250:	7ca00000 	.word	0x7ca00000
 8013254:	7ff00000 	.word	0x7ff00000
 8013258:	7fefffff 	.word	0x7fefffff
 801325c:	f012 0110 	ands.w	r1, r2, #16
 8013260:	bf18      	it	ne
 8013262:	216a      	movne	r1, #106	@ 0x6a
 8013264:	9106      	str	r1, [sp, #24]
 8013266:	ec4b ab17 	vmov	d7, sl, fp
 801326a:	49af      	ldr	r1, [pc, #700]	@ (8013528 <_strtod_l+0x860>)
 801326c:	2000      	movs	r0, #0
 801326e:	07d6      	lsls	r6, r2, #31
 8013270:	d504      	bpl.n	801327c <_strtod_l+0x5b4>
 8013272:	ed91 6b00 	vldr	d6, [r1]
 8013276:	2001      	movs	r0, #1
 8013278:	ee27 7b06 	vmul.f64	d7, d7, d6
 801327c:	1052      	asrs	r2, r2, #1
 801327e:	f101 0108 	add.w	r1, r1, #8
 8013282:	d1f4      	bne.n	801326e <_strtod_l+0x5a6>
 8013284:	b108      	cbz	r0, 801328a <_strtod_l+0x5c2>
 8013286:	ec5b ab17 	vmov	sl, fp, d7
 801328a:	9a06      	ldr	r2, [sp, #24]
 801328c:	b1b2      	cbz	r2, 80132bc <_strtod_l+0x5f4>
 801328e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8013292:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8013296:	2a00      	cmp	r2, #0
 8013298:	4658      	mov	r0, fp
 801329a:	dd0f      	ble.n	80132bc <_strtod_l+0x5f4>
 801329c:	2a1f      	cmp	r2, #31
 801329e:	dd55      	ble.n	801334c <_strtod_l+0x684>
 80132a0:	2a34      	cmp	r2, #52	@ 0x34
 80132a2:	bfde      	ittt	le
 80132a4:	f04f 32ff 	movle.w	r2, #4294967295
 80132a8:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80132ac:	408a      	lslle	r2, r1
 80132ae:	f04f 0a00 	mov.w	sl, #0
 80132b2:	bfcc      	ite	gt
 80132b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80132b8:	ea02 0b00 	andle.w	fp, r2, r0
 80132bc:	ec4b ab17 	vmov	d7, sl, fp
 80132c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80132c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c8:	d0a8      	beq.n	801321c <_strtod_l+0x554>
 80132ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80132cc:	9805      	ldr	r0, [sp, #20]
 80132ce:	f8cd 9000 	str.w	r9, [sp]
 80132d2:	462a      	mov	r2, r5
 80132d4:	f002 fc7e 	bl	8015bd4 <__s2b>
 80132d8:	9007      	str	r0, [sp, #28]
 80132da:	2800      	cmp	r0, #0
 80132dc:	f43f af0a 	beq.w	80130f4 <_strtod_l+0x42c>
 80132e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132e2:	1b3f      	subs	r7, r7, r4
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	bfb4      	ite	lt
 80132e8:	463b      	movlt	r3, r7
 80132ea:	2300      	movge	r3, #0
 80132ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80132ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132f0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 8013518 <_strtod_l+0x850>
 80132f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80132f8:	2400      	movs	r4, #0
 80132fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80132fc:	4625      	mov	r5, r4
 80132fe:	9b07      	ldr	r3, [sp, #28]
 8013300:	9805      	ldr	r0, [sp, #20]
 8013302:	6859      	ldr	r1, [r3, #4]
 8013304:	f002 fbbe 	bl	8015a84 <_Balloc>
 8013308:	4606      	mov	r6, r0
 801330a:	2800      	cmp	r0, #0
 801330c:	f43f aef6 	beq.w	80130fc <_strtod_l+0x434>
 8013310:	9b07      	ldr	r3, [sp, #28]
 8013312:	691a      	ldr	r2, [r3, #16]
 8013314:	ec4b ab19 	vmov	d9, sl, fp
 8013318:	3202      	adds	r2, #2
 801331a:	f103 010c 	add.w	r1, r3, #12
 801331e:	0092      	lsls	r2, r2, #2
 8013320:	300c      	adds	r0, #12
 8013322:	f001 f95e 	bl	80145e2 <memcpy>
 8013326:	eeb0 0b49 	vmov.f64	d0, d9
 801332a:	9805      	ldr	r0, [sp, #20]
 801332c:	aa14      	add	r2, sp, #80	@ 0x50
 801332e:	a913      	add	r1, sp, #76	@ 0x4c
 8013330:	f002 ff84 	bl	801623c <__d2b>
 8013334:	9012      	str	r0, [sp, #72]	@ 0x48
 8013336:	2800      	cmp	r0, #0
 8013338:	f43f aee0 	beq.w	80130fc <_strtod_l+0x434>
 801333c:	9805      	ldr	r0, [sp, #20]
 801333e:	2101      	movs	r1, #1
 8013340:	f002 fcde 	bl	8015d00 <__i2b>
 8013344:	4605      	mov	r5, r0
 8013346:	b940      	cbnz	r0, 801335a <_strtod_l+0x692>
 8013348:	2500      	movs	r5, #0
 801334a:	e6d7      	b.n	80130fc <_strtod_l+0x434>
 801334c:	f04f 31ff 	mov.w	r1, #4294967295
 8013350:	fa01 f202 	lsl.w	r2, r1, r2
 8013354:	ea02 0a0a 	and.w	sl, r2, sl
 8013358:	e7b0      	b.n	80132bc <_strtod_l+0x5f4>
 801335a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 801335c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801335e:	2f00      	cmp	r7, #0
 8013360:	bfab      	itete	ge
 8013362:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8013364:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8013366:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801336a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801336e:	bfac      	ite	ge
 8013370:	eb07 0903 	addge.w	r9, r7, r3
 8013374:	eba3 0807 	sublt.w	r8, r3, r7
 8013378:	9b06      	ldr	r3, [sp, #24]
 801337a:	1aff      	subs	r7, r7, r3
 801337c:	4417      	add	r7, r2
 801337e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8013382:	4a6a      	ldr	r2, [pc, #424]	@ (801352c <_strtod_l+0x864>)
 8013384:	3f01      	subs	r7, #1
 8013386:	4297      	cmp	r7, r2
 8013388:	da51      	bge.n	801342e <_strtod_l+0x766>
 801338a:	1bd1      	subs	r1, r2, r7
 801338c:	291f      	cmp	r1, #31
 801338e:	eba3 0301 	sub.w	r3, r3, r1
 8013392:	f04f 0201 	mov.w	r2, #1
 8013396:	dc3e      	bgt.n	8013416 <_strtod_l+0x74e>
 8013398:	408a      	lsls	r2, r1
 801339a:	920c      	str	r2, [sp, #48]	@ 0x30
 801339c:	2200      	movs	r2, #0
 801339e:	920b      	str	r2, [sp, #44]	@ 0x2c
 80133a0:	eb09 0703 	add.w	r7, r9, r3
 80133a4:	4498      	add	r8, r3
 80133a6:	9b06      	ldr	r3, [sp, #24]
 80133a8:	45b9      	cmp	r9, r7
 80133aa:	4498      	add	r8, r3
 80133ac:	464b      	mov	r3, r9
 80133ae:	bfa8      	it	ge
 80133b0:	463b      	movge	r3, r7
 80133b2:	4543      	cmp	r3, r8
 80133b4:	bfa8      	it	ge
 80133b6:	4643      	movge	r3, r8
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	bfc2      	ittt	gt
 80133bc:	1aff      	subgt	r7, r7, r3
 80133be:	eba8 0803 	subgt.w	r8, r8, r3
 80133c2:	eba9 0903 	subgt.w	r9, r9, r3
 80133c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	dd16      	ble.n	80133fa <_strtod_l+0x732>
 80133cc:	4629      	mov	r1, r5
 80133ce:	9805      	ldr	r0, [sp, #20]
 80133d0:	461a      	mov	r2, r3
 80133d2:	f002 fd4d 	bl	8015e70 <__pow5mult>
 80133d6:	4605      	mov	r5, r0
 80133d8:	2800      	cmp	r0, #0
 80133da:	d0b5      	beq.n	8013348 <_strtod_l+0x680>
 80133dc:	4601      	mov	r1, r0
 80133de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80133e0:	9805      	ldr	r0, [sp, #20]
 80133e2:	f002 fca3 	bl	8015d2c <__multiply>
 80133e6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80133e8:	2800      	cmp	r0, #0
 80133ea:	f43f ae87 	beq.w	80130fc <_strtod_l+0x434>
 80133ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80133f0:	9805      	ldr	r0, [sp, #20]
 80133f2:	f002 fb87 	bl	8015b04 <_Bfree>
 80133f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80133fa:	2f00      	cmp	r7, #0
 80133fc:	dc1b      	bgt.n	8013436 <_strtod_l+0x76e>
 80133fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013400:	2b00      	cmp	r3, #0
 8013402:	dd21      	ble.n	8013448 <_strtod_l+0x780>
 8013404:	4631      	mov	r1, r6
 8013406:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013408:	9805      	ldr	r0, [sp, #20]
 801340a:	f002 fd31 	bl	8015e70 <__pow5mult>
 801340e:	4606      	mov	r6, r0
 8013410:	b9d0      	cbnz	r0, 8013448 <_strtod_l+0x780>
 8013412:	2600      	movs	r6, #0
 8013414:	e672      	b.n	80130fc <_strtod_l+0x434>
 8013416:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801341a:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 801341e:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8013422:	37e2      	adds	r7, #226	@ 0xe2
 8013424:	fa02 f107 	lsl.w	r1, r2, r7
 8013428:	910b      	str	r1, [sp, #44]	@ 0x2c
 801342a:	920c      	str	r2, [sp, #48]	@ 0x30
 801342c:	e7b8      	b.n	80133a0 <_strtod_l+0x6d8>
 801342e:	2200      	movs	r2, #0
 8013430:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013432:	2201      	movs	r2, #1
 8013434:	e7f9      	b.n	801342a <_strtod_l+0x762>
 8013436:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013438:	9805      	ldr	r0, [sp, #20]
 801343a:	463a      	mov	r2, r7
 801343c:	f002 fd72 	bl	8015f24 <__lshift>
 8013440:	9012      	str	r0, [sp, #72]	@ 0x48
 8013442:	2800      	cmp	r0, #0
 8013444:	d1db      	bne.n	80133fe <_strtod_l+0x736>
 8013446:	e659      	b.n	80130fc <_strtod_l+0x434>
 8013448:	f1b8 0f00 	cmp.w	r8, #0
 801344c:	dd07      	ble.n	801345e <_strtod_l+0x796>
 801344e:	4631      	mov	r1, r6
 8013450:	9805      	ldr	r0, [sp, #20]
 8013452:	4642      	mov	r2, r8
 8013454:	f002 fd66 	bl	8015f24 <__lshift>
 8013458:	4606      	mov	r6, r0
 801345a:	2800      	cmp	r0, #0
 801345c:	d0d9      	beq.n	8013412 <_strtod_l+0x74a>
 801345e:	f1b9 0f00 	cmp.w	r9, #0
 8013462:	dd08      	ble.n	8013476 <_strtod_l+0x7ae>
 8013464:	4629      	mov	r1, r5
 8013466:	9805      	ldr	r0, [sp, #20]
 8013468:	464a      	mov	r2, r9
 801346a:	f002 fd5b 	bl	8015f24 <__lshift>
 801346e:	4605      	mov	r5, r0
 8013470:	2800      	cmp	r0, #0
 8013472:	f43f ae43 	beq.w	80130fc <_strtod_l+0x434>
 8013476:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013478:	9805      	ldr	r0, [sp, #20]
 801347a:	4632      	mov	r2, r6
 801347c:	f002 fdda 	bl	8016034 <__mdiff>
 8013480:	4604      	mov	r4, r0
 8013482:	2800      	cmp	r0, #0
 8013484:	f43f ae3a 	beq.w	80130fc <_strtod_l+0x434>
 8013488:	2300      	movs	r3, #0
 801348a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801348e:	60c3      	str	r3, [r0, #12]
 8013490:	4629      	mov	r1, r5
 8013492:	f002 fdb3 	bl	8015ffc <__mcmp>
 8013496:	2800      	cmp	r0, #0
 8013498:	da4c      	bge.n	8013534 <_strtod_l+0x86c>
 801349a:	ea58 080a 	orrs.w	r8, r8, sl
 801349e:	d172      	bne.n	8013586 <_strtod_l+0x8be>
 80134a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d16e      	bne.n	8013586 <_strtod_l+0x8be>
 80134a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80134ac:	0d1b      	lsrs	r3, r3, #20
 80134ae:	051b      	lsls	r3, r3, #20
 80134b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80134b4:	d967      	bls.n	8013586 <_strtod_l+0x8be>
 80134b6:	6963      	ldr	r3, [r4, #20]
 80134b8:	b913      	cbnz	r3, 80134c0 <_strtod_l+0x7f8>
 80134ba:	6923      	ldr	r3, [r4, #16]
 80134bc:	2b01      	cmp	r3, #1
 80134be:	dd62      	ble.n	8013586 <_strtod_l+0x8be>
 80134c0:	4621      	mov	r1, r4
 80134c2:	2201      	movs	r2, #1
 80134c4:	9805      	ldr	r0, [sp, #20]
 80134c6:	f002 fd2d 	bl	8015f24 <__lshift>
 80134ca:	4629      	mov	r1, r5
 80134cc:	4604      	mov	r4, r0
 80134ce:	f002 fd95 	bl	8015ffc <__mcmp>
 80134d2:	2800      	cmp	r0, #0
 80134d4:	dd57      	ble.n	8013586 <_strtod_l+0x8be>
 80134d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80134da:	9a06      	ldr	r2, [sp, #24]
 80134dc:	0d1b      	lsrs	r3, r3, #20
 80134de:	051b      	lsls	r3, r3, #20
 80134e0:	2a00      	cmp	r2, #0
 80134e2:	d06e      	beq.n	80135c2 <_strtod_l+0x8fa>
 80134e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80134e8:	d86b      	bhi.n	80135c2 <_strtod_l+0x8fa>
 80134ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80134ee:	f67f ae99 	bls.w	8013224 <_strtod_l+0x55c>
 80134f2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8013520 <_strtod_l+0x858>
 80134f6:	ec4b ab16 	vmov	d6, sl, fp
 80134fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013530 <_strtod_l+0x868>)
 80134fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013500:	ee17 2a90 	vmov	r2, s15
 8013504:	4013      	ands	r3, r2
 8013506:	ec5b ab17 	vmov	sl, fp, d7
 801350a:	2b00      	cmp	r3, #0
 801350c:	f47f ae01 	bne.w	8013112 <_strtod_l+0x44a>
 8013510:	9a05      	ldr	r2, [sp, #20]
 8013512:	2322      	movs	r3, #34	@ 0x22
 8013514:	6013      	str	r3, [r2, #0]
 8013516:	e5fc      	b.n	8013112 <_strtod_l+0x44a>
 8013518:	ffc00000 	.word	0xffc00000
 801351c:	41dfffff 	.word	0x41dfffff
 8013520:	00000000 	.word	0x00000000
 8013524:	39500000 	.word	0x39500000
 8013528:	08017470 	.word	0x08017470
 801352c:	fffffc02 	.word	0xfffffc02
 8013530:	7ff00000 	.word	0x7ff00000
 8013534:	46d9      	mov	r9, fp
 8013536:	d15d      	bne.n	80135f4 <_strtod_l+0x92c>
 8013538:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801353c:	f1b8 0f00 	cmp.w	r8, #0
 8013540:	d02a      	beq.n	8013598 <_strtod_l+0x8d0>
 8013542:	4aa9      	ldr	r2, [pc, #676]	@ (80137e8 <_strtod_l+0xb20>)
 8013544:	4293      	cmp	r3, r2
 8013546:	d12a      	bne.n	801359e <_strtod_l+0x8d6>
 8013548:	9b06      	ldr	r3, [sp, #24]
 801354a:	4652      	mov	r2, sl
 801354c:	b1fb      	cbz	r3, 801358e <_strtod_l+0x8c6>
 801354e:	4ba7      	ldr	r3, [pc, #668]	@ (80137ec <_strtod_l+0xb24>)
 8013550:	ea0b 0303 	and.w	r3, fp, r3
 8013554:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013558:	f04f 31ff 	mov.w	r1, #4294967295
 801355c:	d81a      	bhi.n	8013594 <_strtod_l+0x8cc>
 801355e:	0d1b      	lsrs	r3, r3, #20
 8013560:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013564:	fa01 f303 	lsl.w	r3, r1, r3
 8013568:	429a      	cmp	r2, r3
 801356a:	d118      	bne.n	801359e <_strtod_l+0x8d6>
 801356c:	4ba0      	ldr	r3, [pc, #640]	@ (80137f0 <_strtod_l+0xb28>)
 801356e:	4599      	cmp	r9, r3
 8013570:	d102      	bne.n	8013578 <_strtod_l+0x8b0>
 8013572:	3201      	adds	r2, #1
 8013574:	f43f adc2 	beq.w	80130fc <_strtod_l+0x434>
 8013578:	4b9c      	ldr	r3, [pc, #624]	@ (80137ec <_strtod_l+0xb24>)
 801357a:	ea09 0303 	and.w	r3, r9, r3
 801357e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8013582:	f04f 0a00 	mov.w	sl, #0
 8013586:	9b06      	ldr	r3, [sp, #24]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d1b2      	bne.n	80134f2 <_strtod_l+0x82a>
 801358c:	e5c1      	b.n	8013112 <_strtod_l+0x44a>
 801358e:	f04f 33ff 	mov.w	r3, #4294967295
 8013592:	e7e9      	b.n	8013568 <_strtod_l+0x8a0>
 8013594:	460b      	mov	r3, r1
 8013596:	e7e7      	b.n	8013568 <_strtod_l+0x8a0>
 8013598:	ea53 030a 	orrs.w	r3, r3, sl
 801359c:	d09b      	beq.n	80134d6 <_strtod_l+0x80e>
 801359e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135a0:	b1c3      	cbz	r3, 80135d4 <_strtod_l+0x90c>
 80135a2:	ea13 0f09 	tst.w	r3, r9
 80135a6:	d0ee      	beq.n	8013586 <_strtod_l+0x8be>
 80135a8:	9a06      	ldr	r2, [sp, #24]
 80135aa:	4650      	mov	r0, sl
 80135ac:	4659      	mov	r1, fp
 80135ae:	f1b8 0f00 	cmp.w	r8, #0
 80135b2:	d013      	beq.n	80135dc <_strtod_l+0x914>
 80135b4:	f7ff fb6c 	bl	8012c90 <sulp>
 80135b8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80135bc:	ec5b ab17 	vmov	sl, fp, d7
 80135c0:	e7e1      	b.n	8013586 <_strtod_l+0x8be>
 80135c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80135c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80135ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80135ce:	f04f 3aff 	mov.w	sl, #4294967295
 80135d2:	e7d8      	b.n	8013586 <_strtod_l+0x8be>
 80135d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135d6:	ea13 0f0a 	tst.w	r3, sl
 80135da:	e7e4      	b.n	80135a6 <_strtod_l+0x8de>
 80135dc:	f7ff fb58 	bl	8012c90 <sulp>
 80135e0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80135e4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80135e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ec:	ec5b ab10 	vmov	sl, fp, d0
 80135f0:	d1c9      	bne.n	8013586 <_strtod_l+0x8be>
 80135f2:	e617      	b.n	8013224 <_strtod_l+0x55c>
 80135f4:	4629      	mov	r1, r5
 80135f6:	4620      	mov	r0, r4
 80135f8:	f002 fe78 	bl	80162ec <__ratio>
 80135fc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8013600:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013608:	d85d      	bhi.n	80136c6 <_strtod_l+0x9fe>
 801360a:	f1b8 0f00 	cmp.w	r8, #0
 801360e:	d164      	bne.n	80136da <_strtod_l+0xa12>
 8013610:	f1ba 0f00 	cmp.w	sl, #0
 8013614:	d14b      	bne.n	80136ae <_strtod_l+0x9e6>
 8013616:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801361a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 801361e:	2b00      	cmp	r3, #0
 8013620:	d160      	bne.n	80136e4 <_strtod_l+0xa1c>
 8013622:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8013626:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362e:	d401      	bmi.n	8013634 <_strtod_l+0x96c>
 8013630:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013634:	eeb1 ab48 	vneg.f64	d10, d8
 8013638:	486c      	ldr	r0, [pc, #432]	@ (80137ec <_strtod_l+0xb24>)
 801363a:	496e      	ldr	r1, [pc, #440]	@ (80137f4 <_strtod_l+0xb2c>)
 801363c:	ea09 0700 	and.w	r7, r9, r0
 8013640:	428f      	cmp	r7, r1
 8013642:	ec53 2b1a 	vmov	r2, r3, d10
 8013646:	d17d      	bne.n	8013744 <_strtod_l+0xa7c>
 8013648:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 801364c:	ec4b ab1c 	vmov	d12, sl, fp
 8013650:	eeb0 0b4c 	vmov.f64	d0, d12
 8013654:	f002 fd82 	bl	801615c <__ulp>
 8013658:	4864      	ldr	r0, [pc, #400]	@ (80137ec <_strtod_l+0xb24>)
 801365a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 801365e:	ee1c 3a90 	vmov	r3, s25
 8013662:	4a65      	ldr	r2, [pc, #404]	@ (80137f8 <_strtod_l+0xb30>)
 8013664:	ea03 0100 	and.w	r1, r3, r0
 8013668:	4291      	cmp	r1, r2
 801366a:	ec5b ab1c 	vmov	sl, fp, d12
 801366e:	d93c      	bls.n	80136ea <_strtod_l+0xa22>
 8013670:	ee19 2a90 	vmov	r2, s19
 8013674:	4b5e      	ldr	r3, [pc, #376]	@ (80137f0 <_strtod_l+0xb28>)
 8013676:	429a      	cmp	r2, r3
 8013678:	d104      	bne.n	8013684 <_strtod_l+0x9bc>
 801367a:	ee19 3a10 	vmov	r3, s18
 801367e:	3301      	adds	r3, #1
 8013680:	f43f ad3c 	beq.w	80130fc <_strtod_l+0x434>
 8013684:	f8df b168 	ldr.w	fp, [pc, #360]	@ 80137f0 <_strtod_l+0xb28>
 8013688:	f04f 3aff 	mov.w	sl, #4294967295
 801368c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801368e:	9805      	ldr	r0, [sp, #20]
 8013690:	f002 fa38 	bl	8015b04 <_Bfree>
 8013694:	9805      	ldr	r0, [sp, #20]
 8013696:	4631      	mov	r1, r6
 8013698:	f002 fa34 	bl	8015b04 <_Bfree>
 801369c:	9805      	ldr	r0, [sp, #20]
 801369e:	4629      	mov	r1, r5
 80136a0:	f002 fa30 	bl	8015b04 <_Bfree>
 80136a4:	9805      	ldr	r0, [sp, #20]
 80136a6:	4621      	mov	r1, r4
 80136a8:	f002 fa2c 	bl	8015b04 <_Bfree>
 80136ac:	e627      	b.n	80132fe <_strtod_l+0x636>
 80136ae:	f1ba 0f01 	cmp.w	sl, #1
 80136b2:	d103      	bne.n	80136bc <_strtod_l+0x9f4>
 80136b4:	f1bb 0f00 	cmp.w	fp, #0
 80136b8:	f43f adb4 	beq.w	8013224 <_strtod_l+0x55c>
 80136bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80136c0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80136c4:	e7b8      	b.n	8013638 <_strtod_l+0x970>
 80136c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80136ca:	ee20 8b08 	vmul.f64	d8, d0, d8
 80136ce:	f1b8 0f00 	cmp.w	r8, #0
 80136d2:	d0af      	beq.n	8013634 <_strtod_l+0x96c>
 80136d4:	eeb0 ab48 	vmov.f64	d10, d8
 80136d8:	e7ae      	b.n	8013638 <_strtod_l+0x970>
 80136da:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80136de:	eeb0 8b4a 	vmov.f64	d8, d10
 80136e2:	e7a9      	b.n	8013638 <_strtod_l+0x970>
 80136e4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80136e8:	e7a6      	b.n	8013638 <_strtod_l+0x970>
 80136ea:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80136ee:	9b06      	ldr	r3, [sp, #24]
 80136f0:	46d9      	mov	r9, fp
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d1ca      	bne.n	801368c <_strtod_l+0x9c4>
 80136f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80136fa:	0d1b      	lsrs	r3, r3, #20
 80136fc:	051b      	lsls	r3, r3, #20
 80136fe:	429f      	cmp	r7, r3
 8013700:	d1c4      	bne.n	801368c <_strtod_l+0x9c4>
 8013702:	ec51 0b18 	vmov	r0, r1, d8
 8013706:	f7ed f925 	bl	8000954 <__aeabi_d2lz>
 801370a:	f7ec ffcf 	bl	80006ac <__aeabi_l2d>
 801370e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8013712:	ec41 0b17 	vmov	d7, r0, r1
 8013716:	ea49 090a 	orr.w	r9, r9, sl
 801371a:	ea59 0908 	orrs.w	r9, r9, r8
 801371e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8013722:	d03c      	beq.n	801379e <_strtod_l+0xad6>
 8013724:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80137d0 <_strtod_l+0xb08>
 8013728:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013730:	f53f acef 	bmi.w	8013112 <_strtod_l+0x44a>
 8013734:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80137d8 <_strtod_l+0xb10>
 8013738:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801373c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013740:	dda4      	ble.n	801368c <_strtod_l+0x9c4>
 8013742:	e4e6      	b.n	8013112 <_strtod_l+0x44a>
 8013744:	9906      	ldr	r1, [sp, #24]
 8013746:	b1e1      	cbz	r1, 8013782 <_strtod_l+0xaba>
 8013748:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 801374c:	d819      	bhi.n	8013782 <_strtod_l+0xaba>
 801374e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013756:	d811      	bhi.n	801377c <_strtod_l+0xab4>
 8013758:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801375c:	ee18 3a10 	vmov	r3, s16
 8013760:	2b01      	cmp	r3, #1
 8013762:	bf38      	it	cc
 8013764:	2301      	movcc	r3, #1
 8013766:	ee08 3a10 	vmov	s16, r3
 801376a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801376e:	f1b8 0f00 	cmp.w	r8, #0
 8013772:	d111      	bne.n	8013798 <_strtod_l+0xad0>
 8013774:	eeb1 7b48 	vneg.f64	d7, d8
 8013778:	ec53 2b17 	vmov	r2, r3, d7
 801377c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8013780:	1bcb      	subs	r3, r1, r7
 8013782:	eeb0 0b49 	vmov.f64	d0, d9
 8013786:	ec43 2b1a 	vmov	d10, r2, r3
 801378a:	f002 fce7 	bl	801615c <__ulp>
 801378e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8013792:	ec5b ab19 	vmov	sl, fp, d9
 8013796:	e7aa      	b.n	80136ee <_strtod_l+0xa26>
 8013798:	eeb0 7b48 	vmov.f64	d7, d8
 801379c:	e7ec      	b.n	8013778 <_strtod_l+0xab0>
 801379e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80137e0 <_strtod_l+0xb18>
 80137a2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80137a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137aa:	f57f af6f 	bpl.w	801368c <_strtod_l+0x9c4>
 80137ae:	e4b0      	b.n	8013112 <_strtod_l+0x44a>
 80137b0:	2300      	movs	r3, #0
 80137b2:	9308      	str	r3, [sp, #32]
 80137b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80137b8:	6013      	str	r3, [r2, #0]
 80137ba:	f7ff bac4 	b.w	8012d46 <_strtod_l+0x7e>
 80137be:	2a65      	cmp	r2, #101	@ 0x65
 80137c0:	f43f abbf 	beq.w	8012f42 <_strtod_l+0x27a>
 80137c4:	2a45      	cmp	r2, #69	@ 0x45
 80137c6:	f43f abbc 	beq.w	8012f42 <_strtod_l+0x27a>
 80137ca:	2101      	movs	r1, #1
 80137cc:	f7ff bbf4 	b.w	8012fb8 <_strtod_l+0x2f0>
 80137d0:	94a03595 	.word	0x94a03595
 80137d4:	3fdfffff 	.word	0x3fdfffff
 80137d8:	35afe535 	.word	0x35afe535
 80137dc:	3fe00000 	.word	0x3fe00000
 80137e0:	94a03595 	.word	0x94a03595
 80137e4:	3fcfffff 	.word	0x3fcfffff
 80137e8:	000fffff 	.word	0x000fffff
 80137ec:	7ff00000 	.word	0x7ff00000
 80137f0:	7fefffff 	.word	0x7fefffff
 80137f4:	7fe00000 	.word	0x7fe00000
 80137f8:	7c9fffff 	.word	0x7c9fffff
 80137fc:	00000000 	.word	0x00000000

08013800 <strtof>:
 8013800:	b510      	push	{r4, lr}
 8013802:	4c21      	ldr	r4, [pc, #132]	@ (8013888 <strtof+0x88>)
 8013804:	4b21      	ldr	r3, [pc, #132]	@ (801388c <strtof+0x8c>)
 8013806:	460a      	mov	r2, r1
 8013808:	4601      	mov	r1, r0
 801380a:	6820      	ldr	r0, [r4, #0]
 801380c:	f7ff fa5c 	bl	8012cc8 <_strtod_l>
 8013810:	eeb4 0b40 	vcmp.f64	d0, d0
 8013814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013818:	eeb0 7b40 	vmov.f64	d7, d0
 801381c:	d70d      	bvc.n	801383a <strtof+0x3a>
 801381e:	ee17 3a90 	vmov	r3, s15
 8013822:	2b00      	cmp	r3, #0
 8013824:	481a      	ldr	r0, [pc, #104]	@ (8013890 <strtof+0x90>)
 8013826:	da04      	bge.n	8013832 <strtof+0x32>
 8013828:	f000 fef2 	bl	8014610 <nanf>
 801382c:	eeb1 0a40 	vneg.f32	s0, s0
 8013830:	bd10      	pop	{r4, pc}
 8013832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013836:	f000 beeb 	b.w	8014610 <nanf>
 801383a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801383e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8013894 <strtof+0x94>
 8013842:	eeb0 6ac0 	vabs.f32	s12, s0
 8013846:	eeb4 6a66 	vcmp.f32	s12, s13
 801384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801384e:	dd08      	ble.n	8013862 <strtof+0x62>
 8013850:	eeb0 6bc7 	vabs.f64	d6, d7
 8013854:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8013880 <strtof+0x80>
 8013858:	eeb4 6b45 	vcmp.f64	d6, d5
 801385c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013860:	dd0a      	ble.n	8013878 <strtof+0x78>
 8013862:	ee10 3a10 	vmov	r3, s0
 8013866:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801386a:	d1e1      	bne.n	8013830 <strtof+0x30>
 801386c:	ee17 2a90 	vmov	r2, s15
 8013870:	4b09      	ldr	r3, [pc, #36]	@ (8013898 <strtof+0x98>)
 8013872:	4013      	ands	r3, r2
 8013874:	2b00      	cmp	r3, #0
 8013876:	d0db      	beq.n	8013830 <strtof+0x30>
 8013878:	6823      	ldr	r3, [r4, #0]
 801387a:	2222      	movs	r2, #34	@ 0x22
 801387c:	601a      	str	r2, [r3, #0]
 801387e:	e7d7      	b.n	8013830 <strtof+0x30>
 8013880:	ffffffff 	.word	0xffffffff
 8013884:	7fefffff 	.word	0x7fefffff
 8013888:	240001f8 	.word	0x240001f8
 801388c:	2400008c 	.word	0x2400008c
 8013890:	08017444 	.word	0x08017444
 8013894:	7f7fffff 	.word	0x7f7fffff
 8013898:	7ff00000 	.word	0x7ff00000

0801389c <__cvt>:
 801389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801389e:	ed2d 8b02 	vpush	{d8}
 80138a2:	eeb0 8b40 	vmov.f64	d8, d0
 80138a6:	b085      	sub	sp, #20
 80138a8:	4617      	mov	r7, r2
 80138aa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80138ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80138ae:	ee18 2a90 	vmov	r2, s17
 80138b2:	f025 0520 	bic.w	r5, r5, #32
 80138b6:	2a00      	cmp	r2, #0
 80138b8:	bfb6      	itet	lt
 80138ba:	222d      	movlt	r2, #45	@ 0x2d
 80138bc:	2200      	movge	r2, #0
 80138be:	eeb1 8b40 	vneglt.f64	d8, d0
 80138c2:	2d46      	cmp	r5, #70	@ 0x46
 80138c4:	460c      	mov	r4, r1
 80138c6:	701a      	strb	r2, [r3, #0]
 80138c8:	d004      	beq.n	80138d4 <__cvt+0x38>
 80138ca:	2d45      	cmp	r5, #69	@ 0x45
 80138cc:	d100      	bne.n	80138d0 <__cvt+0x34>
 80138ce:	3401      	adds	r4, #1
 80138d0:	2102      	movs	r1, #2
 80138d2:	e000      	b.n	80138d6 <__cvt+0x3a>
 80138d4:	2103      	movs	r1, #3
 80138d6:	ab03      	add	r3, sp, #12
 80138d8:	9301      	str	r3, [sp, #4]
 80138da:	ab02      	add	r3, sp, #8
 80138dc:	9300      	str	r3, [sp, #0]
 80138de:	4622      	mov	r2, r4
 80138e0:	4633      	mov	r3, r6
 80138e2:	eeb0 0b48 	vmov.f64	d0, d8
 80138e6:	f000 ff23 	bl	8014730 <_dtoa_r>
 80138ea:	2d47      	cmp	r5, #71	@ 0x47
 80138ec:	d114      	bne.n	8013918 <__cvt+0x7c>
 80138ee:	07fb      	lsls	r3, r7, #31
 80138f0:	d50a      	bpl.n	8013908 <__cvt+0x6c>
 80138f2:	1902      	adds	r2, r0, r4
 80138f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80138f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138fc:	bf08      	it	eq
 80138fe:	9203      	streq	r2, [sp, #12]
 8013900:	2130      	movs	r1, #48	@ 0x30
 8013902:	9b03      	ldr	r3, [sp, #12]
 8013904:	4293      	cmp	r3, r2
 8013906:	d319      	bcc.n	801393c <__cvt+0xa0>
 8013908:	9b03      	ldr	r3, [sp, #12]
 801390a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801390c:	1a1b      	subs	r3, r3, r0
 801390e:	6013      	str	r3, [r2, #0]
 8013910:	b005      	add	sp, #20
 8013912:	ecbd 8b02 	vpop	{d8}
 8013916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013918:	2d46      	cmp	r5, #70	@ 0x46
 801391a:	eb00 0204 	add.w	r2, r0, r4
 801391e:	d1e9      	bne.n	80138f4 <__cvt+0x58>
 8013920:	7803      	ldrb	r3, [r0, #0]
 8013922:	2b30      	cmp	r3, #48	@ 0x30
 8013924:	d107      	bne.n	8013936 <__cvt+0x9a>
 8013926:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801392e:	bf1c      	itt	ne
 8013930:	f1c4 0401 	rsbne	r4, r4, #1
 8013934:	6034      	strne	r4, [r6, #0]
 8013936:	6833      	ldr	r3, [r6, #0]
 8013938:	441a      	add	r2, r3
 801393a:	e7db      	b.n	80138f4 <__cvt+0x58>
 801393c:	1c5c      	adds	r4, r3, #1
 801393e:	9403      	str	r4, [sp, #12]
 8013940:	7019      	strb	r1, [r3, #0]
 8013942:	e7de      	b.n	8013902 <__cvt+0x66>

08013944 <__exponent>:
 8013944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013946:	2900      	cmp	r1, #0
 8013948:	bfba      	itte	lt
 801394a:	4249      	neglt	r1, r1
 801394c:	232d      	movlt	r3, #45	@ 0x2d
 801394e:	232b      	movge	r3, #43	@ 0x2b
 8013950:	2909      	cmp	r1, #9
 8013952:	7002      	strb	r2, [r0, #0]
 8013954:	7043      	strb	r3, [r0, #1]
 8013956:	dd29      	ble.n	80139ac <__exponent+0x68>
 8013958:	f10d 0307 	add.w	r3, sp, #7
 801395c:	461d      	mov	r5, r3
 801395e:	270a      	movs	r7, #10
 8013960:	461a      	mov	r2, r3
 8013962:	fbb1 f6f7 	udiv	r6, r1, r7
 8013966:	fb07 1416 	mls	r4, r7, r6, r1
 801396a:	3430      	adds	r4, #48	@ 0x30
 801396c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013970:	460c      	mov	r4, r1
 8013972:	2c63      	cmp	r4, #99	@ 0x63
 8013974:	f103 33ff 	add.w	r3, r3, #4294967295
 8013978:	4631      	mov	r1, r6
 801397a:	dcf1      	bgt.n	8013960 <__exponent+0x1c>
 801397c:	3130      	adds	r1, #48	@ 0x30
 801397e:	1e94      	subs	r4, r2, #2
 8013980:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013984:	1c41      	adds	r1, r0, #1
 8013986:	4623      	mov	r3, r4
 8013988:	42ab      	cmp	r3, r5
 801398a:	d30a      	bcc.n	80139a2 <__exponent+0x5e>
 801398c:	f10d 0309 	add.w	r3, sp, #9
 8013990:	1a9b      	subs	r3, r3, r2
 8013992:	42ac      	cmp	r4, r5
 8013994:	bf88      	it	hi
 8013996:	2300      	movhi	r3, #0
 8013998:	3302      	adds	r3, #2
 801399a:	4403      	add	r3, r0
 801399c:	1a18      	subs	r0, r3, r0
 801399e:	b003      	add	sp, #12
 80139a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80139a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80139aa:	e7ed      	b.n	8013988 <__exponent+0x44>
 80139ac:	2330      	movs	r3, #48	@ 0x30
 80139ae:	3130      	adds	r1, #48	@ 0x30
 80139b0:	7083      	strb	r3, [r0, #2]
 80139b2:	70c1      	strb	r1, [r0, #3]
 80139b4:	1d03      	adds	r3, r0, #4
 80139b6:	e7f1      	b.n	801399c <__exponent+0x58>

080139b8 <_printf_float>:
 80139b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139bc:	b08d      	sub	sp, #52	@ 0x34
 80139be:	460c      	mov	r4, r1
 80139c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80139c4:	4616      	mov	r6, r2
 80139c6:	461f      	mov	r7, r3
 80139c8:	4605      	mov	r5, r0
 80139ca:	f000 fd35 	bl	8014438 <_localeconv_r>
 80139ce:	f8d0 b000 	ldr.w	fp, [r0]
 80139d2:	4658      	mov	r0, fp
 80139d4:	f7ec fcd4 	bl	8000380 <strlen>
 80139d8:	2300      	movs	r3, #0
 80139da:	930a      	str	r3, [sp, #40]	@ 0x28
 80139dc:	f8d8 3000 	ldr.w	r3, [r8]
 80139e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80139e4:	6822      	ldr	r2, [r4, #0]
 80139e6:	9005      	str	r0, [sp, #20]
 80139e8:	3307      	adds	r3, #7
 80139ea:	f023 0307 	bic.w	r3, r3, #7
 80139ee:	f103 0108 	add.w	r1, r3, #8
 80139f2:	f8c8 1000 	str.w	r1, [r8]
 80139f6:	ed93 0b00 	vldr	d0, [r3]
 80139fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8013c58 <_printf_float+0x2a0>
 80139fe:	eeb0 7bc0 	vabs.f64	d7, d0
 8013a02:	eeb4 7b46 	vcmp.f64	d7, d6
 8013a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8013a0e:	dd24      	ble.n	8013a5a <_printf_float+0xa2>
 8013a10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a18:	d502      	bpl.n	8013a20 <_printf_float+0x68>
 8013a1a:	232d      	movs	r3, #45	@ 0x2d
 8013a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a20:	498f      	ldr	r1, [pc, #572]	@ (8013c60 <_printf_float+0x2a8>)
 8013a22:	4b90      	ldr	r3, [pc, #576]	@ (8013c64 <_printf_float+0x2ac>)
 8013a24:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8013a28:	bf8c      	ite	hi
 8013a2a:	4688      	movhi	r8, r1
 8013a2c:	4698      	movls	r8, r3
 8013a2e:	f022 0204 	bic.w	r2, r2, #4
 8013a32:	2303      	movs	r3, #3
 8013a34:	6123      	str	r3, [r4, #16]
 8013a36:	6022      	str	r2, [r4, #0]
 8013a38:	f04f 0a00 	mov.w	sl, #0
 8013a3c:	9700      	str	r7, [sp, #0]
 8013a3e:	4633      	mov	r3, r6
 8013a40:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013a42:	4621      	mov	r1, r4
 8013a44:	4628      	mov	r0, r5
 8013a46:	f000 f9d1 	bl	8013dec <_printf_common>
 8013a4a:	3001      	adds	r0, #1
 8013a4c:	f040 8089 	bne.w	8013b62 <_printf_float+0x1aa>
 8013a50:	f04f 30ff 	mov.w	r0, #4294967295
 8013a54:	b00d      	add	sp, #52	@ 0x34
 8013a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8013a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a62:	d709      	bvc.n	8013a78 <_printf_float+0xc0>
 8013a64:	ee10 3a90 	vmov	r3, s1
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	bfbc      	itt	lt
 8013a6c:	232d      	movlt	r3, #45	@ 0x2d
 8013a6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013a72:	497d      	ldr	r1, [pc, #500]	@ (8013c68 <_printf_float+0x2b0>)
 8013a74:	4b7d      	ldr	r3, [pc, #500]	@ (8013c6c <_printf_float+0x2b4>)
 8013a76:	e7d5      	b.n	8013a24 <_printf_float+0x6c>
 8013a78:	6863      	ldr	r3, [r4, #4]
 8013a7a:	1c59      	adds	r1, r3, #1
 8013a7c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8013a80:	d139      	bne.n	8013af6 <_printf_float+0x13e>
 8013a82:	2306      	movs	r3, #6
 8013a84:	6063      	str	r3, [r4, #4]
 8013a86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	6022      	str	r2, [r4, #0]
 8013a8e:	9303      	str	r3, [sp, #12]
 8013a90:	ab0a      	add	r3, sp, #40	@ 0x28
 8013a92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013a96:	ab09      	add	r3, sp, #36	@ 0x24
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	6861      	ldr	r1, [r4, #4]
 8013a9c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	f7ff fefb 	bl	801389c <__cvt>
 8013aa6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013aaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013aac:	4680      	mov	r8, r0
 8013aae:	d129      	bne.n	8013b04 <_printf_float+0x14c>
 8013ab0:	1cc8      	adds	r0, r1, #3
 8013ab2:	db02      	blt.n	8013aba <_printf_float+0x102>
 8013ab4:	6863      	ldr	r3, [r4, #4]
 8013ab6:	4299      	cmp	r1, r3
 8013ab8:	dd41      	ble.n	8013b3e <_printf_float+0x186>
 8013aba:	f1a9 0902 	sub.w	r9, r9, #2
 8013abe:	fa5f f989 	uxtb.w	r9, r9
 8013ac2:	3901      	subs	r1, #1
 8013ac4:	464a      	mov	r2, r9
 8013ac6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8013acc:	f7ff ff3a 	bl	8013944 <__exponent>
 8013ad0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ad2:	1813      	adds	r3, r2, r0
 8013ad4:	2a01      	cmp	r2, #1
 8013ad6:	4682      	mov	sl, r0
 8013ad8:	6123      	str	r3, [r4, #16]
 8013ada:	dc02      	bgt.n	8013ae2 <_printf_float+0x12a>
 8013adc:	6822      	ldr	r2, [r4, #0]
 8013ade:	07d2      	lsls	r2, r2, #31
 8013ae0:	d501      	bpl.n	8013ae6 <_printf_float+0x12e>
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	6123      	str	r3, [r4, #16]
 8013ae6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d0a6      	beq.n	8013a3c <_printf_float+0x84>
 8013aee:	232d      	movs	r3, #45	@ 0x2d
 8013af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013af4:	e7a2      	b.n	8013a3c <_printf_float+0x84>
 8013af6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013afa:	d1c4      	bne.n	8013a86 <_printf_float+0xce>
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d1c2      	bne.n	8013a86 <_printf_float+0xce>
 8013b00:	2301      	movs	r3, #1
 8013b02:	e7bf      	b.n	8013a84 <_printf_float+0xcc>
 8013b04:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013b08:	d9db      	bls.n	8013ac2 <_printf_float+0x10a>
 8013b0a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8013b0e:	d118      	bne.n	8013b42 <_printf_float+0x18a>
 8013b10:	2900      	cmp	r1, #0
 8013b12:	6863      	ldr	r3, [r4, #4]
 8013b14:	dd0b      	ble.n	8013b2e <_printf_float+0x176>
 8013b16:	6121      	str	r1, [r4, #16]
 8013b18:	b913      	cbnz	r3, 8013b20 <_printf_float+0x168>
 8013b1a:	6822      	ldr	r2, [r4, #0]
 8013b1c:	07d0      	lsls	r0, r2, #31
 8013b1e:	d502      	bpl.n	8013b26 <_printf_float+0x16e>
 8013b20:	3301      	adds	r3, #1
 8013b22:	440b      	add	r3, r1
 8013b24:	6123      	str	r3, [r4, #16]
 8013b26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013b28:	f04f 0a00 	mov.w	sl, #0
 8013b2c:	e7db      	b.n	8013ae6 <_printf_float+0x12e>
 8013b2e:	b913      	cbnz	r3, 8013b36 <_printf_float+0x17e>
 8013b30:	6822      	ldr	r2, [r4, #0]
 8013b32:	07d2      	lsls	r2, r2, #31
 8013b34:	d501      	bpl.n	8013b3a <_printf_float+0x182>
 8013b36:	3302      	adds	r3, #2
 8013b38:	e7f4      	b.n	8013b24 <_printf_float+0x16c>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	e7f2      	b.n	8013b24 <_printf_float+0x16c>
 8013b3e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8013b42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013b44:	4299      	cmp	r1, r3
 8013b46:	db05      	blt.n	8013b54 <_printf_float+0x19c>
 8013b48:	6823      	ldr	r3, [r4, #0]
 8013b4a:	6121      	str	r1, [r4, #16]
 8013b4c:	07d8      	lsls	r0, r3, #31
 8013b4e:	d5ea      	bpl.n	8013b26 <_printf_float+0x16e>
 8013b50:	1c4b      	adds	r3, r1, #1
 8013b52:	e7e7      	b.n	8013b24 <_printf_float+0x16c>
 8013b54:	2900      	cmp	r1, #0
 8013b56:	bfd4      	ite	le
 8013b58:	f1c1 0202 	rsble	r2, r1, #2
 8013b5c:	2201      	movgt	r2, #1
 8013b5e:	4413      	add	r3, r2
 8013b60:	e7e0      	b.n	8013b24 <_printf_float+0x16c>
 8013b62:	6823      	ldr	r3, [r4, #0]
 8013b64:	055a      	lsls	r2, r3, #21
 8013b66:	d407      	bmi.n	8013b78 <_printf_float+0x1c0>
 8013b68:	6923      	ldr	r3, [r4, #16]
 8013b6a:	4642      	mov	r2, r8
 8013b6c:	4631      	mov	r1, r6
 8013b6e:	4628      	mov	r0, r5
 8013b70:	47b8      	blx	r7
 8013b72:	3001      	adds	r0, #1
 8013b74:	d12a      	bne.n	8013bcc <_printf_float+0x214>
 8013b76:	e76b      	b.n	8013a50 <_printf_float+0x98>
 8013b78:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8013b7c:	f240 80e0 	bls.w	8013d40 <_printf_float+0x388>
 8013b80:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013b84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b8c:	d133      	bne.n	8013bf6 <_printf_float+0x23e>
 8013b8e:	4a38      	ldr	r2, [pc, #224]	@ (8013c70 <_printf_float+0x2b8>)
 8013b90:	2301      	movs	r3, #1
 8013b92:	4631      	mov	r1, r6
 8013b94:	4628      	mov	r0, r5
 8013b96:	47b8      	blx	r7
 8013b98:	3001      	adds	r0, #1
 8013b9a:	f43f af59 	beq.w	8013a50 <_printf_float+0x98>
 8013b9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013ba2:	4543      	cmp	r3, r8
 8013ba4:	db02      	blt.n	8013bac <_printf_float+0x1f4>
 8013ba6:	6823      	ldr	r3, [r4, #0]
 8013ba8:	07d8      	lsls	r0, r3, #31
 8013baa:	d50f      	bpl.n	8013bcc <_printf_float+0x214>
 8013bac:	9b05      	ldr	r3, [sp, #20]
 8013bae:	465a      	mov	r2, fp
 8013bb0:	4631      	mov	r1, r6
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	47b8      	blx	r7
 8013bb6:	3001      	adds	r0, #1
 8013bb8:	f43f af4a 	beq.w	8013a50 <_printf_float+0x98>
 8013bbc:	f04f 0900 	mov.w	r9, #0
 8013bc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8013bc4:	f104 0a1a 	add.w	sl, r4, #26
 8013bc8:	45c8      	cmp	r8, r9
 8013bca:	dc09      	bgt.n	8013be0 <_printf_float+0x228>
 8013bcc:	6823      	ldr	r3, [r4, #0]
 8013bce:	079b      	lsls	r3, r3, #30
 8013bd0:	f100 8107 	bmi.w	8013de2 <_printf_float+0x42a>
 8013bd4:	68e0      	ldr	r0, [r4, #12]
 8013bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013bd8:	4298      	cmp	r0, r3
 8013bda:	bfb8      	it	lt
 8013bdc:	4618      	movlt	r0, r3
 8013bde:	e739      	b.n	8013a54 <_printf_float+0x9c>
 8013be0:	2301      	movs	r3, #1
 8013be2:	4652      	mov	r2, sl
 8013be4:	4631      	mov	r1, r6
 8013be6:	4628      	mov	r0, r5
 8013be8:	47b8      	blx	r7
 8013bea:	3001      	adds	r0, #1
 8013bec:	f43f af30 	beq.w	8013a50 <_printf_float+0x98>
 8013bf0:	f109 0901 	add.w	r9, r9, #1
 8013bf4:	e7e8      	b.n	8013bc8 <_printf_float+0x210>
 8013bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	dc3b      	bgt.n	8013c74 <_printf_float+0x2bc>
 8013bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8013c70 <_printf_float+0x2b8>)
 8013bfe:	2301      	movs	r3, #1
 8013c00:	4631      	mov	r1, r6
 8013c02:	4628      	mov	r0, r5
 8013c04:	47b8      	blx	r7
 8013c06:	3001      	adds	r0, #1
 8013c08:	f43f af22 	beq.w	8013a50 <_printf_float+0x98>
 8013c0c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013c10:	ea59 0303 	orrs.w	r3, r9, r3
 8013c14:	d102      	bne.n	8013c1c <_printf_float+0x264>
 8013c16:	6823      	ldr	r3, [r4, #0]
 8013c18:	07d9      	lsls	r1, r3, #31
 8013c1a:	d5d7      	bpl.n	8013bcc <_printf_float+0x214>
 8013c1c:	9b05      	ldr	r3, [sp, #20]
 8013c1e:	465a      	mov	r2, fp
 8013c20:	4631      	mov	r1, r6
 8013c22:	4628      	mov	r0, r5
 8013c24:	47b8      	blx	r7
 8013c26:	3001      	adds	r0, #1
 8013c28:	f43f af12 	beq.w	8013a50 <_printf_float+0x98>
 8013c2c:	f04f 0a00 	mov.w	sl, #0
 8013c30:	f104 0b1a 	add.w	fp, r4, #26
 8013c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c36:	425b      	negs	r3, r3
 8013c38:	4553      	cmp	r3, sl
 8013c3a:	dc01      	bgt.n	8013c40 <_printf_float+0x288>
 8013c3c:	464b      	mov	r3, r9
 8013c3e:	e794      	b.n	8013b6a <_printf_float+0x1b2>
 8013c40:	2301      	movs	r3, #1
 8013c42:	465a      	mov	r2, fp
 8013c44:	4631      	mov	r1, r6
 8013c46:	4628      	mov	r0, r5
 8013c48:	47b8      	blx	r7
 8013c4a:	3001      	adds	r0, #1
 8013c4c:	f43f af00 	beq.w	8013a50 <_printf_float+0x98>
 8013c50:	f10a 0a01 	add.w	sl, sl, #1
 8013c54:	e7ee      	b.n	8013c34 <_printf_float+0x27c>
 8013c56:	bf00      	nop
 8013c58:	ffffffff 	.word	0xffffffff
 8013c5c:	7fefffff 	.word	0x7fefffff
 8013c60:	0801727a 	.word	0x0801727a
 8013c64:	08017276 	.word	0x08017276
 8013c68:	08017282 	.word	0x08017282
 8013c6c:	0801727e 	.word	0x0801727e
 8013c70:	08017286 	.word	0x08017286
 8013c74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013c76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013c7a:	4553      	cmp	r3, sl
 8013c7c:	bfa8      	it	ge
 8013c7e:	4653      	movge	r3, sl
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	4699      	mov	r9, r3
 8013c84:	dc37      	bgt.n	8013cf6 <_printf_float+0x33e>
 8013c86:	2300      	movs	r3, #0
 8013c88:	9307      	str	r3, [sp, #28]
 8013c8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013c8e:	f104 021a 	add.w	r2, r4, #26
 8013c92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013c94:	9907      	ldr	r1, [sp, #28]
 8013c96:	9306      	str	r3, [sp, #24]
 8013c98:	eba3 0309 	sub.w	r3, r3, r9
 8013c9c:	428b      	cmp	r3, r1
 8013c9e:	dc31      	bgt.n	8013d04 <_printf_float+0x34c>
 8013ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ca2:	459a      	cmp	sl, r3
 8013ca4:	dc3b      	bgt.n	8013d1e <_printf_float+0x366>
 8013ca6:	6823      	ldr	r3, [r4, #0]
 8013ca8:	07da      	lsls	r2, r3, #31
 8013caa:	d438      	bmi.n	8013d1e <_printf_float+0x366>
 8013cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cae:	ebaa 0903 	sub.w	r9, sl, r3
 8013cb2:	9b06      	ldr	r3, [sp, #24]
 8013cb4:	ebaa 0303 	sub.w	r3, sl, r3
 8013cb8:	4599      	cmp	r9, r3
 8013cba:	bfa8      	it	ge
 8013cbc:	4699      	movge	r9, r3
 8013cbe:	f1b9 0f00 	cmp.w	r9, #0
 8013cc2:	dc34      	bgt.n	8013d2e <_printf_float+0x376>
 8013cc4:	f04f 0800 	mov.w	r8, #0
 8013cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ccc:	f104 0b1a 	add.w	fp, r4, #26
 8013cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cd2:	ebaa 0303 	sub.w	r3, sl, r3
 8013cd6:	eba3 0309 	sub.w	r3, r3, r9
 8013cda:	4543      	cmp	r3, r8
 8013cdc:	f77f af76 	ble.w	8013bcc <_printf_float+0x214>
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	465a      	mov	r2, fp
 8013ce4:	4631      	mov	r1, r6
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	47b8      	blx	r7
 8013cea:	3001      	adds	r0, #1
 8013cec:	f43f aeb0 	beq.w	8013a50 <_printf_float+0x98>
 8013cf0:	f108 0801 	add.w	r8, r8, #1
 8013cf4:	e7ec      	b.n	8013cd0 <_printf_float+0x318>
 8013cf6:	4642      	mov	r2, r8
 8013cf8:	4631      	mov	r1, r6
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	47b8      	blx	r7
 8013cfe:	3001      	adds	r0, #1
 8013d00:	d1c1      	bne.n	8013c86 <_printf_float+0x2ce>
 8013d02:	e6a5      	b.n	8013a50 <_printf_float+0x98>
 8013d04:	2301      	movs	r3, #1
 8013d06:	4631      	mov	r1, r6
 8013d08:	4628      	mov	r0, r5
 8013d0a:	9206      	str	r2, [sp, #24]
 8013d0c:	47b8      	blx	r7
 8013d0e:	3001      	adds	r0, #1
 8013d10:	f43f ae9e 	beq.w	8013a50 <_printf_float+0x98>
 8013d14:	9b07      	ldr	r3, [sp, #28]
 8013d16:	9a06      	ldr	r2, [sp, #24]
 8013d18:	3301      	adds	r3, #1
 8013d1a:	9307      	str	r3, [sp, #28]
 8013d1c:	e7b9      	b.n	8013c92 <_printf_float+0x2da>
 8013d1e:	9b05      	ldr	r3, [sp, #20]
 8013d20:	465a      	mov	r2, fp
 8013d22:	4631      	mov	r1, r6
 8013d24:	4628      	mov	r0, r5
 8013d26:	47b8      	blx	r7
 8013d28:	3001      	adds	r0, #1
 8013d2a:	d1bf      	bne.n	8013cac <_printf_float+0x2f4>
 8013d2c:	e690      	b.n	8013a50 <_printf_float+0x98>
 8013d2e:	9a06      	ldr	r2, [sp, #24]
 8013d30:	464b      	mov	r3, r9
 8013d32:	4442      	add	r2, r8
 8013d34:	4631      	mov	r1, r6
 8013d36:	4628      	mov	r0, r5
 8013d38:	47b8      	blx	r7
 8013d3a:	3001      	adds	r0, #1
 8013d3c:	d1c2      	bne.n	8013cc4 <_printf_float+0x30c>
 8013d3e:	e687      	b.n	8013a50 <_printf_float+0x98>
 8013d40:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8013d44:	f1b9 0f01 	cmp.w	r9, #1
 8013d48:	dc01      	bgt.n	8013d4e <_printf_float+0x396>
 8013d4a:	07db      	lsls	r3, r3, #31
 8013d4c:	d536      	bpl.n	8013dbc <_printf_float+0x404>
 8013d4e:	2301      	movs	r3, #1
 8013d50:	4642      	mov	r2, r8
 8013d52:	4631      	mov	r1, r6
 8013d54:	4628      	mov	r0, r5
 8013d56:	47b8      	blx	r7
 8013d58:	3001      	adds	r0, #1
 8013d5a:	f43f ae79 	beq.w	8013a50 <_printf_float+0x98>
 8013d5e:	9b05      	ldr	r3, [sp, #20]
 8013d60:	465a      	mov	r2, fp
 8013d62:	4631      	mov	r1, r6
 8013d64:	4628      	mov	r0, r5
 8013d66:	47b8      	blx	r7
 8013d68:	3001      	adds	r0, #1
 8013d6a:	f43f ae71 	beq.w	8013a50 <_printf_float+0x98>
 8013d6e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8013d72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8013d7e:	d018      	beq.n	8013db2 <_printf_float+0x3fa>
 8013d80:	464b      	mov	r3, r9
 8013d82:	f108 0201 	add.w	r2, r8, #1
 8013d86:	4631      	mov	r1, r6
 8013d88:	4628      	mov	r0, r5
 8013d8a:	47b8      	blx	r7
 8013d8c:	3001      	adds	r0, #1
 8013d8e:	d10c      	bne.n	8013daa <_printf_float+0x3f2>
 8013d90:	e65e      	b.n	8013a50 <_printf_float+0x98>
 8013d92:	2301      	movs	r3, #1
 8013d94:	465a      	mov	r2, fp
 8013d96:	4631      	mov	r1, r6
 8013d98:	4628      	mov	r0, r5
 8013d9a:	47b8      	blx	r7
 8013d9c:	3001      	adds	r0, #1
 8013d9e:	f43f ae57 	beq.w	8013a50 <_printf_float+0x98>
 8013da2:	f108 0801 	add.w	r8, r8, #1
 8013da6:	45c8      	cmp	r8, r9
 8013da8:	dbf3      	blt.n	8013d92 <_printf_float+0x3da>
 8013daa:	4653      	mov	r3, sl
 8013dac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013db0:	e6dc      	b.n	8013b6c <_printf_float+0x1b4>
 8013db2:	f04f 0800 	mov.w	r8, #0
 8013db6:	f104 0b1a 	add.w	fp, r4, #26
 8013dba:	e7f4      	b.n	8013da6 <_printf_float+0x3ee>
 8013dbc:	2301      	movs	r3, #1
 8013dbe:	4642      	mov	r2, r8
 8013dc0:	e7e1      	b.n	8013d86 <_printf_float+0x3ce>
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	464a      	mov	r2, r9
 8013dc6:	4631      	mov	r1, r6
 8013dc8:	4628      	mov	r0, r5
 8013dca:	47b8      	blx	r7
 8013dcc:	3001      	adds	r0, #1
 8013dce:	f43f ae3f 	beq.w	8013a50 <_printf_float+0x98>
 8013dd2:	f108 0801 	add.w	r8, r8, #1
 8013dd6:	68e3      	ldr	r3, [r4, #12]
 8013dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013dda:	1a5b      	subs	r3, r3, r1
 8013ddc:	4543      	cmp	r3, r8
 8013dde:	dcf0      	bgt.n	8013dc2 <_printf_float+0x40a>
 8013de0:	e6f8      	b.n	8013bd4 <_printf_float+0x21c>
 8013de2:	f04f 0800 	mov.w	r8, #0
 8013de6:	f104 0919 	add.w	r9, r4, #25
 8013dea:	e7f4      	b.n	8013dd6 <_printf_float+0x41e>

08013dec <_printf_common>:
 8013dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013df0:	4616      	mov	r6, r2
 8013df2:	4698      	mov	r8, r3
 8013df4:	688a      	ldr	r2, [r1, #8]
 8013df6:	690b      	ldr	r3, [r1, #16]
 8013df8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	bfb8      	it	lt
 8013e00:	4613      	movlt	r3, r2
 8013e02:	6033      	str	r3, [r6, #0]
 8013e04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013e08:	4607      	mov	r7, r0
 8013e0a:	460c      	mov	r4, r1
 8013e0c:	b10a      	cbz	r2, 8013e12 <_printf_common+0x26>
 8013e0e:	3301      	adds	r3, #1
 8013e10:	6033      	str	r3, [r6, #0]
 8013e12:	6823      	ldr	r3, [r4, #0]
 8013e14:	0699      	lsls	r1, r3, #26
 8013e16:	bf42      	ittt	mi
 8013e18:	6833      	ldrmi	r3, [r6, #0]
 8013e1a:	3302      	addmi	r3, #2
 8013e1c:	6033      	strmi	r3, [r6, #0]
 8013e1e:	6825      	ldr	r5, [r4, #0]
 8013e20:	f015 0506 	ands.w	r5, r5, #6
 8013e24:	d106      	bne.n	8013e34 <_printf_common+0x48>
 8013e26:	f104 0a19 	add.w	sl, r4, #25
 8013e2a:	68e3      	ldr	r3, [r4, #12]
 8013e2c:	6832      	ldr	r2, [r6, #0]
 8013e2e:	1a9b      	subs	r3, r3, r2
 8013e30:	42ab      	cmp	r3, r5
 8013e32:	dc26      	bgt.n	8013e82 <_printf_common+0x96>
 8013e34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013e38:	6822      	ldr	r2, [r4, #0]
 8013e3a:	3b00      	subs	r3, #0
 8013e3c:	bf18      	it	ne
 8013e3e:	2301      	movne	r3, #1
 8013e40:	0692      	lsls	r2, r2, #26
 8013e42:	d42b      	bmi.n	8013e9c <_printf_common+0xb0>
 8013e44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013e48:	4641      	mov	r1, r8
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	47c8      	blx	r9
 8013e4e:	3001      	adds	r0, #1
 8013e50:	d01e      	beq.n	8013e90 <_printf_common+0xa4>
 8013e52:	6823      	ldr	r3, [r4, #0]
 8013e54:	6922      	ldr	r2, [r4, #16]
 8013e56:	f003 0306 	and.w	r3, r3, #6
 8013e5a:	2b04      	cmp	r3, #4
 8013e5c:	bf02      	ittt	eq
 8013e5e:	68e5      	ldreq	r5, [r4, #12]
 8013e60:	6833      	ldreq	r3, [r6, #0]
 8013e62:	1aed      	subeq	r5, r5, r3
 8013e64:	68a3      	ldr	r3, [r4, #8]
 8013e66:	bf0c      	ite	eq
 8013e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e6c:	2500      	movne	r5, #0
 8013e6e:	4293      	cmp	r3, r2
 8013e70:	bfc4      	itt	gt
 8013e72:	1a9b      	subgt	r3, r3, r2
 8013e74:	18ed      	addgt	r5, r5, r3
 8013e76:	2600      	movs	r6, #0
 8013e78:	341a      	adds	r4, #26
 8013e7a:	42b5      	cmp	r5, r6
 8013e7c:	d11a      	bne.n	8013eb4 <_printf_common+0xc8>
 8013e7e:	2000      	movs	r0, #0
 8013e80:	e008      	b.n	8013e94 <_printf_common+0xa8>
 8013e82:	2301      	movs	r3, #1
 8013e84:	4652      	mov	r2, sl
 8013e86:	4641      	mov	r1, r8
 8013e88:	4638      	mov	r0, r7
 8013e8a:	47c8      	blx	r9
 8013e8c:	3001      	adds	r0, #1
 8013e8e:	d103      	bne.n	8013e98 <_printf_common+0xac>
 8013e90:	f04f 30ff 	mov.w	r0, #4294967295
 8013e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e98:	3501      	adds	r5, #1
 8013e9a:	e7c6      	b.n	8013e2a <_printf_common+0x3e>
 8013e9c:	18e1      	adds	r1, r4, r3
 8013e9e:	1c5a      	adds	r2, r3, #1
 8013ea0:	2030      	movs	r0, #48	@ 0x30
 8013ea2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013ea6:	4422      	add	r2, r4
 8013ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013eac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013eb0:	3302      	adds	r3, #2
 8013eb2:	e7c7      	b.n	8013e44 <_printf_common+0x58>
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	4622      	mov	r2, r4
 8013eb8:	4641      	mov	r1, r8
 8013eba:	4638      	mov	r0, r7
 8013ebc:	47c8      	blx	r9
 8013ebe:	3001      	adds	r0, #1
 8013ec0:	d0e6      	beq.n	8013e90 <_printf_common+0xa4>
 8013ec2:	3601      	adds	r6, #1
 8013ec4:	e7d9      	b.n	8013e7a <_printf_common+0x8e>
	...

08013ec8 <_printf_i>:
 8013ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ecc:	7e0f      	ldrb	r7, [r1, #24]
 8013ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013ed0:	2f78      	cmp	r7, #120	@ 0x78
 8013ed2:	4691      	mov	r9, r2
 8013ed4:	4680      	mov	r8, r0
 8013ed6:	460c      	mov	r4, r1
 8013ed8:	469a      	mov	sl, r3
 8013eda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013ede:	d807      	bhi.n	8013ef0 <_printf_i+0x28>
 8013ee0:	2f62      	cmp	r7, #98	@ 0x62
 8013ee2:	d80a      	bhi.n	8013efa <_printf_i+0x32>
 8013ee4:	2f00      	cmp	r7, #0
 8013ee6:	f000 80d1 	beq.w	801408c <_printf_i+0x1c4>
 8013eea:	2f58      	cmp	r7, #88	@ 0x58
 8013eec:	f000 80b8 	beq.w	8014060 <_printf_i+0x198>
 8013ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ef4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013ef8:	e03a      	b.n	8013f70 <_printf_i+0xa8>
 8013efa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013efe:	2b15      	cmp	r3, #21
 8013f00:	d8f6      	bhi.n	8013ef0 <_printf_i+0x28>
 8013f02:	a101      	add	r1, pc, #4	@ (adr r1, 8013f08 <_printf_i+0x40>)
 8013f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f08:	08013f61 	.word	0x08013f61
 8013f0c:	08013f75 	.word	0x08013f75
 8013f10:	08013ef1 	.word	0x08013ef1
 8013f14:	08013ef1 	.word	0x08013ef1
 8013f18:	08013ef1 	.word	0x08013ef1
 8013f1c:	08013ef1 	.word	0x08013ef1
 8013f20:	08013f75 	.word	0x08013f75
 8013f24:	08013ef1 	.word	0x08013ef1
 8013f28:	08013ef1 	.word	0x08013ef1
 8013f2c:	08013ef1 	.word	0x08013ef1
 8013f30:	08013ef1 	.word	0x08013ef1
 8013f34:	08014073 	.word	0x08014073
 8013f38:	08013f9f 	.word	0x08013f9f
 8013f3c:	0801402d 	.word	0x0801402d
 8013f40:	08013ef1 	.word	0x08013ef1
 8013f44:	08013ef1 	.word	0x08013ef1
 8013f48:	08014095 	.word	0x08014095
 8013f4c:	08013ef1 	.word	0x08013ef1
 8013f50:	08013f9f 	.word	0x08013f9f
 8013f54:	08013ef1 	.word	0x08013ef1
 8013f58:	08013ef1 	.word	0x08013ef1
 8013f5c:	08014035 	.word	0x08014035
 8013f60:	6833      	ldr	r3, [r6, #0]
 8013f62:	1d1a      	adds	r2, r3, #4
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	6032      	str	r2, [r6, #0]
 8013f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013f70:	2301      	movs	r3, #1
 8013f72:	e09c      	b.n	80140ae <_printf_i+0x1e6>
 8013f74:	6833      	ldr	r3, [r6, #0]
 8013f76:	6820      	ldr	r0, [r4, #0]
 8013f78:	1d19      	adds	r1, r3, #4
 8013f7a:	6031      	str	r1, [r6, #0]
 8013f7c:	0606      	lsls	r6, r0, #24
 8013f7e:	d501      	bpl.n	8013f84 <_printf_i+0xbc>
 8013f80:	681d      	ldr	r5, [r3, #0]
 8013f82:	e003      	b.n	8013f8c <_printf_i+0xc4>
 8013f84:	0645      	lsls	r5, r0, #25
 8013f86:	d5fb      	bpl.n	8013f80 <_printf_i+0xb8>
 8013f88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013f8c:	2d00      	cmp	r5, #0
 8013f8e:	da03      	bge.n	8013f98 <_printf_i+0xd0>
 8013f90:	232d      	movs	r3, #45	@ 0x2d
 8013f92:	426d      	negs	r5, r5
 8013f94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f98:	4858      	ldr	r0, [pc, #352]	@ (80140fc <_printf_i+0x234>)
 8013f9a:	230a      	movs	r3, #10
 8013f9c:	e011      	b.n	8013fc2 <_printf_i+0xfa>
 8013f9e:	6821      	ldr	r1, [r4, #0]
 8013fa0:	6833      	ldr	r3, [r6, #0]
 8013fa2:	0608      	lsls	r0, r1, #24
 8013fa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013fa8:	d402      	bmi.n	8013fb0 <_printf_i+0xe8>
 8013faa:	0649      	lsls	r1, r1, #25
 8013fac:	bf48      	it	mi
 8013fae:	b2ad      	uxthmi	r5, r5
 8013fb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013fb2:	4852      	ldr	r0, [pc, #328]	@ (80140fc <_printf_i+0x234>)
 8013fb4:	6033      	str	r3, [r6, #0]
 8013fb6:	bf14      	ite	ne
 8013fb8:	230a      	movne	r3, #10
 8013fba:	2308      	moveq	r3, #8
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013fc2:	6866      	ldr	r6, [r4, #4]
 8013fc4:	60a6      	str	r6, [r4, #8]
 8013fc6:	2e00      	cmp	r6, #0
 8013fc8:	db05      	blt.n	8013fd6 <_printf_i+0x10e>
 8013fca:	6821      	ldr	r1, [r4, #0]
 8013fcc:	432e      	orrs	r6, r5
 8013fce:	f021 0104 	bic.w	r1, r1, #4
 8013fd2:	6021      	str	r1, [r4, #0]
 8013fd4:	d04b      	beq.n	801406e <_printf_i+0x1a6>
 8013fd6:	4616      	mov	r6, r2
 8013fd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8013fdc:	fb03 5711 	mls	r7, r3, r1, r5
 8013fe0:	5dc7      	ldrb	r7, [r0, r7]
 8013fe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013fe6:	462f      	mov	r7, r5
 8013fe8:	42bb      	cmp	r3, r7
 8013fea:	460d      	mov	r5, r1
 8013fec:	d9f4      	bls.n	8013fd8 <_printf_i+0x110>
 8013fee:	2b08      	cmp	r3, #8
 8013ff0:	d10b      	bne.n	801400a <_printf_i+0x142>
 8013ff2:	6823      	ldr	r3, [r4, #0]
 8013ff4:	07df      	lsls	r7, r3, #31
 8013ff6:	d508      	bpl.n	801400a <_printf_i+0x142>
 8013ff8:	6923      	ldr	r3, [r4, #16]
 8013ffa:	6861      	ldr	r1, [r4, #4]
 8013ffc:	4299      	cmp	r1, r3
 8013ffe:	bfde      	ittt	le
 8014000:	2330      	movle	r3, #48	@ 0x30
 8014002:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014006:	f106 36ff 	addle.w	r6, r6, #4294967295
 801400a:	1b92      	subs	r2, r2, r6
 801400c:	6122      	str	r2, [r4, #16]
 801400e:	f8cd a000 	str.w	sl, [sp]
 8014012:	464b      	mov	r3, r9
 8014014:	aa03      	add	r2, sp, #12
 8014016:	4621      	mov	r1, r4
 8014018:	4640      	mov	r0, r8
 801401a:	f7ff fee7 	bl	8013dec <_printf_common>
 801401e:	3001      	adds	r0, #1
 8014020:	d14a      	bne.n	80140b8 <_printf_i+0x1f0>
 8014022:	f04f 30ff 	mov.w	r0, #4294967295
 8014026:	b004      	add	sp, #16
 8014028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801402c:	6823      	ldr	r3, [r4, #0]
 801402e:	f043 0320 	orr.w	r3, r3, #32
 8014032:	6023      	str	r3, [r4, #0]
 8014034:	4832      	ldr	r0, [pc, #200]	@ (8014100 <_printf_i+0x238>)
 8014036:	2778      	movs	r7, #120	@ 0x78
 8014038:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801403c:	6823      	ldr	r3, [r4, #0]
 801403e:	6831      	ldr	r1, [r6, #0]
 8014040:	061f      	lsls	r7, r3, #24
 8014042:	f851 5b04 	ldr.w	r5, [r1], #4
 8014046:	d402      	bmi.n	801404e <_printf_i+0x186>
 8014048:	065f      	lsls	r7, r3, #25
 801404a:	bf48      	it	mi
 801404c:	b2ad      	uxthmi	r5, r5
 801404e:	6031      	str	r1, [r6, #0]
 8014050:	07d9      	lsls	r1, r3, #31
 8014052:	bf44      	itt	mi
 8014054:	f043 0320 	orrmi.w	r3, r3, #32
 8014058:	6023      	strmi	r3, [r4, #0]
 801405a:	b11d      	cbz	r5, 8014064 <_printf_i+0x19c>
 801405c:	2310      	movs	r3, #16
 801405e:	e7ad      	b.n	8013fbc <_printf_i+0xf4>
 8014060:	4826      	ldr	r0, [pc, #152]	@ (80140fc <_printf_i+0x234>)
 8014062:	e7e9      	b.n	8014038 <_printf_i+0x170>
 8014064:	6823      	ldr	r3, [r4, #0]
 8014066:	f023 0320 	bic.w	r3, r3, #32
 801406a:	6023      	str	r3, [r4, #0]
 801406c:	e7f6      	b.n	801405c <_printf_i+0x194>
 801406e:	4616      	mov	r6, r2
 8014070:	e7bd      	b.n	8013fee <_printf_i+0x126>
 8014072:	6833      	ldr	r3, [r6, #0]
 8014074:	6825      	ldr	r5, [r4, #0]
 8014076:	6961      	ldr	r1, [r4, #20]
 8014078:	1d18      	adds	r0, r3, #4
 801407a:	6030      	str	r0, [r6, #0]
 801407c:	062e      	lsls	r6, r5, #24
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	d501      	bpl.n	8014086 <_printf_i+0x1be>
 8014082:	6019      	str	r1, [r3, #0]
 8014084:	e002      	b.n	801408c <_printf_i+0x1c4>
 8014086:	0668      	lsls	r0, r5, #25
 8014088:	d5fb      	bpl.n	8014082 <_printf_i+0x1ba>
 801408a:	8019      	strh	r1, [r3, #0]
 801408c:	2300      	movs	r3, #0
 801408e:	6123      	str	r3, [r4, #16]
 8014090:	4616      	mov	r6, r2
 8014092:	e7bc      	b.n	801400e <_printf_i+0x146>
 8014094:	6833      	ldr	r3, [r6, #0]
 8014096:	1d1a      	adds	r2, r3, #4
 8014098:	6032      	str	r2, [r6, #0]
 801409a:	681e      	ldr	r6, [r3, #0]
 801409c:	6862      	ldr	r2, [r4, #4]
 801409e:	2100      	movs	r1, #0
 80140a0:	4630      	mov	r0, r6
 80140a2:	f7ec f91d 	bl	80002e0 <memchr>
 80140a6:	b108      	cbz	r0, 80140ac <_printf_i+0x1e4>
 80140a8:	1b80      	subs	r0, r0, r6
 80140aa:	6060      	str	r0, [r4, #4]
 80140ac:	6863      	ldr	r3, [r4, #4]
 80140ae:	6123      	str	r3, [r4, #16]
 80140b0:	2300      	movs	r3, #0
 80140b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80140b6:	e7aa      	b.n	801400e <_printf_i+0x146>
 80140b8:	6923      	ldr	r3, [r4, #16]
 80140ba:	4632      	mov	r2, r6
 80140bc:	4649      	mov	r1, r9
 80140be:	4640      	mov	r0, r8
 80140c0:	47d0      	blx	sl
 80140c2:	3001      	adds	r0, #1
 80140c4:	d0ad      	beq.n	8014022 <_printf_i+0x15a>
 80140c6:	6823      	ldr	r3, [r4, #0]
 80140c8:	079b      	lsls	r3, r3, #30
 80140ca:	d413      	bmi.n	80140f4 <_printf_i+0x22c>
 80140cc:	68e0      	ldr	r0, [r4, #12]
 80140ce:	9b03      	ldr	r3, [sp, #12]
 80140d0:	4298      	cmp	r0, r3
 80140d2:	bfb8      	it	lt
 80140d4:	4618      	movlt	r0, r3
 80140d6:	e7a6      	b.n	8014026 <_printf_i+0x15e>
 80140d8:	2301      	movs	r3, #1
 80140da:	4632      	mov	r2, r6
 80140dc:	4649      	mov	r1, r9
 80140de:	4640      	mov	r0, r8
 80140e0:	47d0      	blx	sl
 80140e2:	3001      	adds	r0, #1
 80140e4:	d09d      	beq.n	8014022 <_printf_i+0x15a>
 80140e6:	3501      	adds	r5, #1
 80140e8:	68e3      	ldr	r3, [r4, #12]
 80140ea:	9903      	ldr	r1, [sp, #12]
 80140ec:	1a5b      	subs	r3, r3, r1
 80140ee:	42ab      	cmp	r3, r5
 80140f0:	dcf2      	bgt.n	80140d8 <_printf_i+0x210>
 80140f2:	e7eb      	b.n	80140cc <_printf_i+0x204>
 80140f4:	2500      	movs	r5, #0
 80140f6:	f104 0619 	add.w	r6, r4, #25
 80140fa:	e7f5      	b.n	80140e8 <_printf_i+0x220>
 80140fc:	08017288 	.word	0x08017288
 8014100:	08017299 	.word	0x08017299

08014104 <std>:
 8014104:	2300      	movs	r3, #0
 8014106:	b510      	push	{r4, lr}
 8014108:	4604      	mov	r4, r0
 801410a:	e9c0 3300 	strd	r3, r3, [r0]
 801410e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014112:	6083      	str	r3, [r0, #8]
 8014114:	8181      	strh	r1, [r0, #12]
 8014116:	6643      	str	r3, [r0, #100]	@ 0x64
 8014118:	81c2      	strh	r2, [r0, #14]
 801411a:	6183      	str	r3, [r0, #24]
 801411c:	4619      	mov	r1, r3
 801411e:	2208      	movs	r2, #8
 8014120:	305c      	adds	r0, #92	@ 0x5c
 8014122:	f000 f920 	bl	8014366 <memset>
 8014126:	4b0d      	ldr	r3, [pc, #52]	@ (801415c <std+0x58>)
 8014128:	6263      	str	r3, [r4, #36]	@ 0x24
 801412a:	4b0d      	ldr	r3, [pc, #52]	@ (8014160 <std+0x5c>)
 801412c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801412e:	4b0d      	ldr	r3, [pc, #52]	@ (8014164 <std+0x60>)
 8014130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014132:	4b0d      	ldr	r3, [pc, #52]	@ (8014168 <std+0x64>)
 8014134:	6323      	str	r3, [r4, #48]	@ 0x30
 8014136:	4b0d      	ldr	r3, [pc, #52]	@ (801416c <std+0x68>)
 8014138:	6224      	str	r4, [r4, #32]
 801413a:	429c      	cmp	r4, r3
 801413c:	d006      	beq.n	801414c <std+0x48>
 801413e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014142:	4294      	cmp	r4, r2
 8014144:	d002      	beq.n	801414c <std+0x48>
 8014146:	33d0      	adds	r3, #208	@ 0xd0
 8014148:	429c      	cmp	r4, r3
 801414a:	d105      	bne.n	8014158 <std+0x54>
 801414c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014154:	f000 ba42 	b.w	80145dc <__retarget_lock_init_recursive>
 8014158:	bd10      	pop	{r4, pc}
 801415a:	bf00      	nop
 801415c:	080142ad 	.word	0x080142ad
 8014160:	080142cf 	.word	0x080142cf
 8014164:	08014307 	.word	0x08014307
 8014168:	0801432b 	.word	0x0801432b
 801416c:	240073c4 	.word	0x240073c4

08014170 <stdio_exit_handler>:
 8014170:	4a02      	ldr	r2, [pc, #8]	@ (801417c <stdio_exit_handler+0xc>)
 8014172:	4903      	ldr	r1, [pc, #12]	@ (8014180 <stdio_exit_handler+0x10>)
 8014174:	4803      	ldr	r0, [pc, #12]	@ (8014184 <stdio_exit_handler+0x14>)
 8014176:	f000 b869 	b.w	801424c <_fwalk_sglue>
 801417a:	bf00      	nop
 801417c:	24000080 	.word	0x24000080
 8014180:	08016779 	.word	0x08016779
 8014184:	240001fc 	.word	0x240001fc

08014188 <cleanup_stdio>:
 8014188:	6841      	ldr	r1, [r0, #4]
 801418a:	4b0c      	ldr	r3, [pc, #48]	@ (80141bc <cleanup_stdio+0x34>)
 801418c:	4299      	cmp	r1, r3
 801418e:	b510      	push	{r4, lr}
 8014190:	4604      	mov	r4, r0
 8014192:	d001      	beq.n	8014198 <cleanup_stdio+0x10>
 8014194:	f002 faf0 	bl	8016778 <_fflush_r>
 8014198:	68a1      	ldr	r1, [r4, #8]
 801419a:	4b09      	ldr	r3, [pc, #36]	@ (80141c0 <cleanup_stdio+0x38>)
 801419c:	4299      	cmp	r1, r3
 801419e:	d002      	beq.n	80141a6 <cleanup_stdio+0x1e>
 80141a0:	4620      	mov	r0, r4
 80141a2:	f002 fae9 	bl	8016778 <_fflush_r>
 80141a6:	68e1      	ldr	r1, [r4, #12]
 80141a8:	4b06      	ldr	r3, [pc, #24]	@ (80141c4 <cleanup_stdio+0x3c>)
 80141aa:	4299      	cmp	r1, r3
 80141ac:	d004      	beq.n	80141b8 <cleanup_stdio+0x30>
 80141ae:	4620      	mov	r0, r4
 80141b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141b4:	f002 bae0 	b.w	8016778 <_fflush_r>
 80141b8:	bd10      	pop	{r4, pc}
 80141ba:	bf00      	nop
 80141bc:	240073c4 	.word	0x240073c4
 80141c0:	2400742c 	.word	0x2400742c
 80141c4:	24007494 	.word	0x24007494

080141c8 <global_stdio_init.part.0>:
 80141c8:	b510      	push	{r4, lr}
 80141ca:	4b0b      	ldr	r3, [pc, #44]	@ (80141f8 <global_stdio_init.part.0+0x30>)
 80141cc:	4c0b      	ldr	r4, [pc, #44]	@ (80141fc <global_stdio_init.part.0+0x34>)
 80141ce:	4a0c      	ldr	r2, [pc, #48]	@ (8014200 <global_stdio_init.part.0+0x38>)
 80141d0:	601a      	str	r2, [r3, #0]
 80141d2:	4620      	mov	r0, r4
 80141d4:	2200      	movs	r2, #0
 80141d6:	2104      	movs	r1, #4
 80141d8:	f7ff ff94 	bl	8014104 <std>
 80141dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80141e0:	2201      	movs	r2, #1
 80141e2:	2109      	movs	r1, #9
 80141e4:	f7ff ff8e 	bl	8014104 <std>
 80141e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80141ec:	2202      	movs	r2, #2
 80141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141f2:	2112      	movs	r1, #18
 80141f4:	f7ff bf86 	b.w	8014104 <std>
 80141f8:	240074fc 	.word	0x240074fc
 80141fc:	240073c4 	.word	0x240073c4
 8014200:	08014171 	.word	0x08014171

08014204 <__sfp_lock_acquire>:
 8014204:	4801      	ldr	r0, [pc, #4]	@ (801420c <__sfp_lock_acquire+0x8>)
 8014206:	f000 b9ea 	b.w	80145de <__retarget_lock_acquire_recursive>
 801420a:	bf00      	nop
 801420c:	24007505 	.word	0x24007505

08014210 <__sfp_lock_release>:
 8014210:	4801      	ldr	r0, [pc, #4]	@ (8014218 <__sfp_lock_release+0x8>)
 8014212:	f000 b9e5 	b.w	80145e0 <__retarget_lock_release_recursive>
 8014216:	bf00      	nop
 8014218:	24007505 	.word	0x24007505

0801421c <__sinit>:
 801421c:	b510      	push	{r4, lr}
 801421e:	4604      	mov	r4, r0
 8014220:	f7ff fff0 	bl	8014204 <__sfp_lock_acquire>
 8014224:	6a23      	ldr	r3, [r4, #32]
 8014226:	b11b      	cbz	r3, 8014230 <__sinit+0x14>
 8014228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801422c:	f7ff bff0 	b.w	8014210 <__sfp_lock_release>
 8014230:	4b04      	ldr	r3, [pc, #16]	@ (8014244 <__sinit+0x28>)
 8014232:	6223      	str	r3, [r4, #32]
 8014234:	4b04      	ldr	r3, [pc, #16]	@ (8014248 <__sinit+0x2c>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d1f5      	bne.n	8014228 <__sinit+0xc>
 801423c:	f7ff ffc4 	bl	80141c8 <global_stdio_init.part.0>
 8014240:	e7f2      	b.n	8014228 <__sinit+0xc>
 8014242:	bf00      	nop
 8014244:	08014189 	.word	0x08014189
 8014248:	240074fc 	.word	0x240074fc

0801424c <_fwalk_sglue>:
 801424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014250:	4607      	mov	r7, r0
 8014252:	4688      	mov	r8, r1
 8014254:	4614      	mov	r4, r2
 8014256:	2600      	movs	r6, #0
 8014258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801425c:	f1b9 0901 	subs.w	r9, r9, #1
 8014260:	d505      	bpl.n	801426e <_fwalk_sglue+0x22>
 8014262:	6824      	ldr	r4, [r4, #0]
 8014264:	2c00      	cmp	r4, #0
 8014266:	d1f7      	bne.n	8014258 <_fwalk_sglue+0xc>
 8014268:	4630      	mov	r0, r6
 801426a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801426e:	89ab      	ldrh	r3, [r5, #12]
 8014270:	2b01      	cmp	r3, #1
 8014272:	d907      	bls.n	8014284 <_fwalk_sglue+0x38>
 8014274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014278:	3301      	adds	r3, #1
 801427a:	d003      	beq.n	8014284 <_fwalk_sglue+0x38>
 801427c:	4629      	mov	r1, r5
 801427e:	4638      	mov	r0, r7
 8014280:	47c0      	blx	r8
 8014282:	4306      	orrs	r6, r0
 8014284:	3568      	adds	r5, #104	@ 0x68
 8014286:	e7e9      	b.n	801425c <_fwalk_sglue+0x10>

08014288 <iprintf>:
 8014288:	b40f      	push	{r0, r1, r2, r3}
 801428a:	b507      	push	{r0, r1, r2, lr}
 801428c:	4906      	ldr	r1, [pc, #24]	@ (80142a8 <iprintf+0x20>)
 801428e:	ab04      	add	r3, sp, #16
 8014290:	6808      	ldr	r0, [r1, #0]
 8014292:	f853 2b04 	ldr.w	r2, [r3], #4
 8014296:	6881      	ldr	r1, [r0, #8]
 8014298:	9301      	str	r3, [sp, #4]
 801429a:	f002 f8d1 	bl	8016440 <_vfiprintf_r>
 801429e:	b003      	add	sp, #12
 80142a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80142a4:	b004      	add	sp, #16
 80142a6:	4770      	bx	lr
 80142a8:	240001f8 	.word	0x240001f8

080142ac <__sread>:
 80142ac:	b510      	push	{r4, lr}
 80142ae:	460c      	mov	r4, r1
 80142b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142b4:	f000 f944 	bl	8014540 <_read_r>
 80142b8:	2800      	cmp	r0, #0
 80142ba:	bfab      	itete	ge
 80142bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80142be:	89a3      	ldrhlt	r3, [r4, #12]
 80142c0:	181b      	addge	r3, r3, r0
 80142c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80142c6:	bfac      	ite	ge
 80142c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80142ca:	81a3      	strhlt	r3, [r4, #12]
 80142cc:	bd10      	pop	{r4, pc}

080142ce <__swrite>:
 80142ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142d2:	461f      	mov	r7, r3
 80142d4:	898b      	ldrh	r3, [r1, #12]
 80142d6:	05db      	lsls	r3, r3, #23
 80142d8:	4605      	mov	r5, r0
 80142da:	460c      	mov	r4, r1
 80142dc:	4616      	mov	r6, r2
 80142de:	d505      	bpl.n	80142ec <__swrite+0x1e>
 80142e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142e4:	2302      	movs	r3, #2
 80142e6:	2200      	movs	r2, #0
 80142e8:	f000 f918 	bl	801451c <_lseek_r>
 80142ec:	89a3      	ldrh	r3, [r4, #12]
 80142ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80142f6:	81a3      	strh	r3, [r4, #12]
 80142f8:	4632      	mov	r2, r6
 80142fa:	463b      	mov	r3, r7
 80142fc:	4628      	mov	r0, r5
 80142fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014302:	f000 b92f 	b.w	8014564 <_write_r>

08014306 <__sseek>:
 8014306:	b510      	push	{r4, lr}
 8014308:	460c      	mov	r4, r1
 801430a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801430e:	f000 f905 	bl	801451c <_lseek_r>
 8014312:	1c43      	adds	r3, r0, #1
 8014314:	89a3      	ldrh	r3, [r4, #12]
 8014316:	bf15      	itete	ne
 8014318:	6560      	strne	r0, [r4, #84]	@ 0x54
 801431a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801431e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014322:	81a3      	strheq	r3, [r4, #12]
 8014324:	bf18      	it	ne
 8014326:	81a3      	strhne	r3, [r4, #12]
 8014328:	bd10      	pop	{r4, pc}

0801432a <__sclose>:
 801432a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801432e:	f000 b887 	b.w	8014440 <_close_r>

08014332 <memmove>:
 8014332:	4288      	cmp	r0, r1
 8014334:	b510      	push	{r4, lr}
 8014336:	eb01 0402 	add.w	r4, r1, r2
 801433a:	d902      	bls.n	8014342 <memmove+0x10>
 801433c:	4284      	cmp	r4, r0
 801433e:	4623      	mov	r3, r4
 8014340:	d807      	bhi.n	8014352 <memmove+0x20>
 8014342:	1e43      	subs	r3, r0, #1
 8014344:	42a1      	cmp	r1, r4
 8014346:	d008      	beq.n	801435a <memmove+0x28>
 8014348:	f811 2b01 	ldrb.w	r2, [r1], #1
 801434c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014350:	e7f8      	b.n	8014344 <memmove+0x12>
 8014352:	4402      	add	r2, r0
 8014354:	4601      	mov	r1, r0
 8014356:	428a      	cmp	r2, r1
 8014358:	d100      	bne.n	801435c <memmove+0x2a>
 801435a:	bd10      	pop	{r4, pc}
 801435c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014360:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014364:	e7f7      	b.n	8014356 <memmove+0x24>

08014366 <memset>:
 8014366:	4402      	add	r2, r0
 8014368:	4603      	mov	r3, r0
 801436a:	4293      	cmp	r3, r2
 801436c:	d100      	bne.n	8014370 <memset+0xa>
 801436e:	4770      	bx	lr
 8014370:	f803 1b01 	strb.w	r1, [r3], #1
 8014374:	e7f9      	b.n	801436a <memset+0x4>

08014376 <strchr>:
 8014376:	b2c9      	uxtb	r1, r1
 8014378:	4603      	mov	r3, r0
 801437a:	4618      	mov	r0, r3
 801437c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014380:	b112      	cbz	r2, 8014388 <strchr+0x12>
 8014382:	428a      	cmp	r2, r1
 8014384:	d1f9      	bne.n	801437a <strchr+0x4>
 8014386:	4770      	bx	lr
 8014388:	2900      	cmp	r1, #0
 801438a:	bf18      	it	ne
 801438c:	2000      	movne	r0, #0
 801438e:	4770      	bx	lr

08014390 <strncmp>:
 8014390:	b510      	push	{r4, lr}
 8014392:	b16a      	cbz	r2, 80143b0 <strncmp+0x20>
 8014394:	3901      	subs	r1, #1
 8014396:	1884      	adds	r4, r0, r2
 8014398:	f810 2b01 	ldrb.w	r2, [r0], #1
 801439c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d103      	bne.n	80143ac <strncmp+0x1c>
 80143a4:	42a0      	cmp	r0, r4
 80143a6:	d001      	beq.n	80143ac <strncmp+0x1c>
 80143a8:	2a00      	cmp	r2, #0
 80143aa:	d1f5      	bne.n	8014398 <strncmp+0x8>
 80143ac:	1ad0      	subs	r0, r2, r3
 80143ae:	bd10      	pop	{r4, pc}
 80143b0:	4610      	mov	r0, r2
 80143b2:	e7fc      	b.n	80143ae <strncmp+0x1e>

080143b4 <strrchr>:
 80143b4:	b538      	push	{r3, r4, r5, lr}
 80143b6:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 80143ba:	4603      	mov	r3, r0
 80143bc:	d10e      	bne.n	80143dc <strrchr+0x28>
 80143be:	4621      	mov	r1, r4
 80143c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143c4:	f7ff bfd7 	b.w	8014376 <strchr>
 80143c8:	1c43      	adds	r3, r0, #1
 80143ca:	4605      	mov	r5, r0
 80143cc:	4621      	mov	r1, r4
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7ff ffd1 	bl	8014376 <strchr>
 80143d4:	2800      	cmp	r0, #0
 80143d6:	d1f7      	bne.n	80143c8 <strrchr+0x14>
 80143d8:	4628      	mov	r0, r5
 80143da:	bd38      	pop	{r3, r4, r5, pc}
 80143dc:	2500      	movs	r5, #0
 80143de:	e7f5      	b.n	80143cc <strrchr+0x18>

080143e0 <__strtok_r>:
 80143e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143e2:	4604      	mov	r4, r0
 80143e4:	b908      	cbnz	r0, 80143ea <__strtok_r+0xa>
 80143e6:	6814      	ldr	r4, [r2, #0]
 80143e8:	b144      	cbz	r4, 80143fc <__strtok_r+0x1c>
 80143ea:	4620      	mov	r0, r4
 80143ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80143f0:	460f      	mov	r7, r1
 80143f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80143f6:	b91e      	cbnz	r6, 8014400 <__strtok_r+0x20>
 80143f8:	b965      	cbnz	r5, 8014414 <__strtok_r+0x34>
 80143fa:	6015      	str	r5, [r2, #0]
 80143fc:	2000      	movs	r0, #0
 80143fe:	e005      	b.n	801440c <__strtok_r+0x2c>
 8014400:	42b5      	cmp	r5, r6
 8014402:	d1f6      	bne.n	80143f2 <__strtok_r+0x12>
 8014404:	2b00      	cmp	r3, #0
 8014406:	d1f0      	bne.n	80143ea <__strtok_r+0xa>
 8014408:	6014      	str	r4, [r2, #0]
 801440a:	7003      	strb	r3, [r0, #0]
 801440c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801440e:	461c      	mov	r4, r3
 8014410:	e00c      	b.n	801442c <__strtok_r+0x4c>
 8014412:	b91d      	cbnz	r5, 801441c <__strtok_r+0x3c>
 8014414:	4627      	mov	r7, r4
 8014416:	f814 3b01 	ldrb.w	r3, [r4], #1
 801441a:	460e      	mov	r6, r1
 801441c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014420:	42ab      	cmp	r3, r5
 8014422:	d1f6      	bne.n	8014412 <__strtok_r+0x32>
 8014424:	2b00      	cmp	r3, #0
 8014426:	d0f2      	beq.n	801440e <__strtok_r+0x2e>
 8014428:	2300      	movs	r3, #0
 801442a:	703b      	strb	r3, [r7, #0]
 801442c:	6014      	str	r4, [r2, #0]
 801442e:	e7ed      	b.n	801440c <__strtok_r+0x2c>

08014430 <strtok_r>:
 8014430:	2301      	movs	r3, #1
 8014432:	f7ff bfd5 	b.w	80143e0 <__strtok_r>
	...

08014438 <_localeconv_r>:
 8014438:	4800      	ldr	r0, [pc, #0]	@ (801443c <_localeconv_r+0x4>)
 801443a:	4770      	bx	lr
 801443c:	2400017c 	.word	0x2400017c

08014440 <_close_r>:
 8014440:	b538      	push	{r3, r4, r5, lr}
 8014442:	4d06      	ldr	r5, [pc, #24]	@ (801445c <_close_r+0x1c>)
 8014444:	2300      	movs	r3, #0
 8014446:	4604      	mov	r4, r0
 8014448:	4608      	mov	r0, r1
 801444a:	602b      	str	r3, [r5, #0]
 801444c:	f7f1 fc0e 	bl	8005c6c <_close>
 8014450:	1c43      	adds	r3, r0, #1
 8014452:	d102      	bne.n	801445a <_close_r+0x1a>
 8014454:	682b      	ldr	r3, [r5, #0]
 8014456:	b103      	cbz	r3, 801445a <_close_r+0x1a>
 8014458:	6023      	str	r3, [r4, #0]
 801445a:	bd38      	pop	{r3, r4, r5, pc}
 801445c:	24007500 	.word	0x24007500

08014460 <_reclaim_reent>:
 8014460:	4b2d      	ldr	r3, [pc, #180]	@ (8014518 <_reclaim_reent+0xb8>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	4283      	cmp	r3, r0
 8014466:	b570      	push	{r4, r5, r6, lr}
 8014468:	4604      	mov	r4, r0
 801446a:	d053      	beq.n	8014514 <_reclaim_reent+0xb4>
 801446c:	69c3      	ldr	r3, [r0, #28]
 801446e:	b31b      	cbz	r3, 80144b8 <_reclaim_reent+0x58>
 8014470:	68db      	ldr	r3, [r3, #12]
 8014472:	b163      	cbz	r3, 801448e <_reclaim_reent+0x2e>
 8014474:	2500      	movs	r5, #0
 8014476:	69e3      	ldr	r3, [r4, #28]
 8014478:	68db      	ldr	r3, [r3, #12]
 801447a:	5959      	ldr	r1, [r3, r5]
 801447c:	b9b1      	cbnz	r1, 80144ac <_reclaim_reent+0x4c>
 801447e:	3504      	adds	r5, #4
 8014480:	2d80      	cmp	r5, #128	@ 0x80
 8014482:	d1f8      	bne.n	8014476 <_reclaim_reent+0x16>
 8014484:	69e3      	ldr	r3, [r4, #28]
 8014486:	4620      	mov	r0, r4
 8014488:	68d9      	ldr	r1, [r3, #12]
 801448a:	f000 feaf 	bl	80151ec <_free_r>
 801448e:	69e3      	ldr	r3, [r4, #28]
 8014490:	6819      	ldr	r1, [r3, #0]
 8014492:	b111      	cbz	r1, 801449a <_reclaim_reent+0x3a>
 8014494:	4620      	mov	r0, r4
 8014496:	f000 fea9 	bl	80151ec <_free_r>
 801449a:	69e3      	ldr	r3, [r4, #28]
 801449c:	689d      	ldr	r5, [r3, #8]
 801449e:	b15d      	cbz	r5, 80144b8 <_reclaim_reent+0x58>
 80144a0:	4629      	mov	r1, r5
 80144a2:	4620      	mov	r0, r4
 80144a4:	682d      	ldr	r5, [r5, #0]
 80144a6:	f000 fea1 	bl	80151ec <_free_r>
 80144aa:	e7f8      	b.n	801449e <_reclaim_reent+0x3e>
 80144ac:	680e      	ldr	r6, [r1, #0]
 80144ae:	4620      	mov	r0, r4
 80144b0:	f000 fe9c 	bl	80151ec <_free_r>
 80144b4:	4631      	mov	r1, r6
 80144b6:	e7e1      	b.n	801447c <_reclaim_reent+0x1c>
 80144b8:	6961      	ldr	r1, [r4, #20]
 80144ba:	b111      	cbz	r1, 80144c2 <_reclaim_reent+0x62>
 80144bc:	4620      	mov	r0, r4
 80144be:	f000 fe95 	bl	80151ec <_free_r>
 80144c2:	69e1      	ldr	r1, [r4, #28]
 80144c4:	b111      	cbz	r1, 80144cc <_reclaim_reent+0x6c>
 80144c6:	4620      	mov	r0, r4
 80144c8:	f000 fe90 	bl	80151ec <_free_r>
 80144cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80144ce:	b111      	cbz	r1, 80144d6 <_reclaim_reent+0x76>
 80144d0:	4620      	mov	r0, r4
 80144d2:	f000 fe8b 	bl	80151ec <_free_r>
 80144d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80144d8:	b111      	cbz	r1, 80144e0 <_reclaim_reent+0x80>
 80144da:	4620      	mov	r0, r4
 80144dc:	f000 fe86 	bl	80151ec <_free_r>
 80144e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80144e2:	b111      	cbz	r1, 80144ea <_reclaim_reent+0x8a>
 80144e4:	4620      	mov	r0, r4
 80144e6:	f000 fe81 	bl	80151ec <_free_r>
 80144ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80144ec:	b111      	cbz	r1, 80144f4 <_reclaim_reent+0x94>
 80144ee:	4620      	mov	r0, r4
 80144f0:	f000 fe7c 	bl	80151ec <_free_r>
 80144f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80144f6:	b111      	cbz	r1, 80144fe <_reclaim_reent+0x9e>
 80144f8:	4620      	mov	r0, r4
 80144fa:	f000 fe77 	bl	80151ec <_free_r>
 80144fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014500:	b111      	cbz	r1, 8014508 <_reclaim_reent+0xa8>
 8014502:	4620      	mov	r0, r4
 8014504:	f000 fe72 	bl	80151ec <_free_r>
 8014508:	6a23      	ldr	r3, [r4, #32]
 801450a:	b11b      	cbz	r3, 8014514 <_reclaim_reent+0xb4>
 801450c:	4620      	mov	r0, r4
 801450e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014512:	4718      	bx	r3
 8014514:	bd70      	pop	{r4, r5, r6, pc}
 8014516:	bf00      	nop
 8014518:	240001f8 	.word	0x240001f8

0801451c <_lseek_r>:
 801451c:	b538      	push	{r3, r4, r5, lr}
 801451e:	4d07      	ldr	r5, [pc, #28]	@ (801453c <_lseek_r+0x20>)
 8014520:	4604      	mov	r4, r0
 8014522:	4608      	mov	r0, r1
 8014524:	4611      	mov	r1, r2
 8014526:	2200      	movs	r2, #0
 8014528:	602a      	str	r2, [r5, #0]
 801452a:	461a      	mov	r2, r3
 801452c:	f7f1 fbc5 	bl	8005cba <_lseek>
 8014530:	1c43      	adds	r3, r0, #1
 8014532:	d102      	bne.n	801453a <_lseek_r+0x1e>
 8014534:	682b      	ldr	r3, [r5, #0]
 8014536:	b103      	cbz	r3, 801453a <_lseek_r+0x1e>
 8014538:	6023      	str	r3, [r4, #0]
 801453a:	bd38      	pop	{r3, r4, r5, pc}
 801453c:	24007500 	.word	0x24007500

08014540 <_read_r>:
 8014540:	b538      	push	{r3, r4, r5, lr}
 8014542:	4d07      	ldr	r5, [pc, #28]	@ (8014560 <_read_r+0x20>)
 8014544:	4604      	mov	r4, r0
 8014546:	4608      	mov	r0, r1
 8014548:	4611      	mov	r1, r2
 801454a:	2200      	movs	r2, #0
 801454c:	602a      	str	r2, [r5, #0]
 801454e:	461a      	mov	r2, r3
 8014550:	f7f1 fb6f 	bl	8005c32 <_read>
 8014554:	1c43      	adds	r3, r0, #1
 8014556:	d102      	bne.n	801455e <_read_r+0x1e>
 8014558:	682b      	ldr	r3, [r5, #0]
 801455a:	b103      	cbz	r3, 801455e <_read_r+0x1e>
 801455c:	6023      	str	r3, [r4, #0]
 801455e:	bd38      	pop	{r3, r4, r5, pc}
 8014560:	24007500 	.word	0x24007500

08014564 <_write_r>:
 8014564:	b538      	push	{r3, r4, r5, lr}
 8014566:	4d07      	ldr	r5, [pc, #28]	@ (8014584 <_write_r+0x20>)
 8014568:	4604      	mov	r4, r0
 801456a:	4608      	mov	r0, r1
 801456c:	4611      	mov	r1, r2
 801456e:	2200      	movs	r2, #0
 8014570:	602a      	str	r2, [r5, #0]
 8014572:	461a      	mov	r2, r3
 8014574:	f7ed f808 	bl	8001588 <_write>
 8014578:	1c43      	adds	r3, r0, #1
 801457a:	d102      	bne.n	8014582 <_write_r+0x1e>
 801457c:	682b      	ldr	r3, [r5, #0]
 801457e:	b103      	cbz	r3, 8014582 <_write_r+0x1e>
 8014580:	6023      	str	r3, [r4, #0]
 8014582:	bd38      	pop	{r3, r4, r5, pc}
 8014584:	24007500 	.word	0x24007500

08014588 <__errno>:
 8014588:	4b01      	ldr	r3, [pc, #4]	@ (8014590 <__errno+0x8>)
 801458a:	6818      	ldr	r0, [r3, #0]
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop
 8014590:	240001f8 	.word	0x240001f8

08014594 <__libc_init_array>:
 8014594:	b570      	push	{r4, r5, r6, lr}
 8014596:	4d0d      	ldr	r5, [pc, #52]	@ (80145cc <__libc_init_array+0x38>)
 8014598:	4c0d      	ldr	r4, [pc, #52]	@ (80145d0 <__libc_init_array+0x3c>)
 801459a:	1b64      	subs	r4, r4, r5
 801459c:	10a4      	asrs	r4, r4, #2
 801459e:	2600      	movs	r6, #0
 80145a0:	42a6      	cmp	r6, r4
 80145a2:	d109      	bne.n	80145b8 <__libc_init_array+0x24>
 80145a4:	4d0b      	ldr	r5, [pc, #44]	@ (80145d4 <__libc_init_array+0x40>)
 80145a6:	4c0c      	ldr	r4, [pc, #48]	@ (80145d8 <__libc_init_array+0x44>)
 80145a8:	f002 fd0c 	bl	8016fc4 <_init>
 80145ac:	1b64      	subs	r4, r4, r5
 80145ae:	10a4      	asrs	r4, r4, #2
 80145b0:	2600      	movs	r6, #0
 80145b2:	42a6      	cmp	r6, r4
 80145b4:	d105      	bne.n	80145c2 <__libc_init_array+0x2e>
 80145b6:	bd70      	pop	{r4, r5, r6, pc}
 80145b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80145bc:	4798      	blx	r3
 80145be:	3601      	adds	r6, #1
 80145c0:	e7ee      	b.n	80145a0 <__libc_init_array+0xc>
 80145c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80145c6:	4798      	blx	r3
 80145c8:	3601      	adds	r6, #1
 80145ca:	e7f2      	b.n	80145b2 <__libc_init_array+0x1e>
 80145cc:	080177e8 	.word	0x080177e8
 80145d0:	080177e8 	.word	0x080177e8
 80145d4:	080177e8 	.word	0x080177e8
 80145d8:	080177ec 	.word	0x080177ec

080145dc <__retarget_lock_init_recursive>:
 80145dc:	4770      	bx	lr

080145de <__retarget_lock_acquire_recursive>:
 80145de:	4770      	bx	lr

080145e0 <__retarget_lock_release_recursive>:
 80145e0:	4770      	bx	lr

080145e2 <memcpy>:
 80145e2:	440a      	add	r2, r1
 80145e4:	4291      	cmp	r1, r2
 80145e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80145ea:	d100      	bne.n	80145ee <memcpy+0xc>
 80145ec:	4770      	bx	lr
 80145ee:	b510      	push	{r4, lr}
 80145f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145f8:	4291      	cmp	r1, r2
 80145fa:	d1f9      	bne.n	80145f0 <memcpy+0xe>
 80145fc:	bd10      	pop	{r4, pc}
	...

08014600 <nan>:
 8014600:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014608 <nan+0x8>
 8014604:	4770      	bx	lr
 8014606:	bf00      	nop
 8014608:	00000000 	.word	0x00000000
 801460c:	7ff80000 	.word	0x7ff80000

08014610 <nanf>:
 8014610:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014618 <nanf+0x8>
 8014614:	4770      	bx	lr
 8014616:	bf00      	nop
 8014618:	7fc00000 	.word	0x7fc00000

0801461c <quorem>:
 801461c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014620:	6903      	ldr	r3, [r0, #16]
 8014622:	690c      	ldr	r4, [r1, #16]
 8014624:	42a3      	cmp	r3, r4
 8014626:	4607      	mov	r7, r0
 8014628:	db7e      	blt.n	8014728 <quorem+0x10c>
 801462a:	3c01      	subs	r4, #1
 801462c:	f101 0814 	add.w	r8, r1, #20
 8014630:	00a3      	lsls	r3, r4, #2
 8014632:	f100 0514 	add.w	r5, r0, #20
 8014636:	9300      	str	r3, [sp, #0]
 8014638:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801463c:	9301      	str	r3, [sp, #4]
 801463e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014646:	3301      	adds	r3, #1
 8014648:	429a      	cmp	r2, r3
 801464a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801464e:	fbb2 f6f3 	udiv	r6, r2, r3
 8014652:	d32e      	bcc.n	80146b2 <quorem+0x96>
 8014654:	f04f 0a00 	mov.w	sl, #0
 8014658:	46c4      	mov	ip, r8
 801465a:	46ae      	mov	lr, r5
 801465c:	46d3      	mov	fp, sl
 801465e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014662:	b298      	uxth	r0, r3
 8014664:	fb06 a000 	mla	r0, r6, r0, sl
 8014668:	0c02      	lsrs	r2, r0, #16
 801466a:	0c1b      	lsrs	r3, r3, #16
 801466c:	fb06 2303 	mla	r3, r6, r3, r2
 8014670:	f8de 2000 	ldr.w	r2, [lr]
 8014674:	b280      	uxth	r0, r0
 8014676:	b292      	uxth	r2, r2
 8014678:	1a12      	subs	r2, r2, r0
 801467a:	445a      	add	r2, fp
 801467c:	f8de 0000 	ldr.w	r0, [lr]
 8014680:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014684:	b29b      	uxth	r3, r3
 8014686:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801468a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801468e:	b292      	uxth	r2, r2
 8014690:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014694:	45e1      	cmp	r9, ip
 8014696:	f84e 2b04 	str.w	r2, [lr], #4
 801469a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801469e:	d2de      	bcs.n	801465e <quorem+0x42>
 80146a0:	9b00      	ldr	r3, [sp, #0]
 80146a2:	58eb      	ldr	r3, [r5, r3]
 80146a4:	b92b      	cbnz	r3, 80146b2 <quorem+0x96>
 80146a6:	9b01      	ldr	r3, [sp, #4]
 80146a8:	3b04      	subs	r3, #4
 80146aa:	429d      	cmp	r5, r3
 80146ac:	461a      	mov	r2, r3
 80146ae:	d32f      	bcc.n	8014710 <quorem+0xf4>
 80146b0:	613c      	str	r4, [r7, #16]
 80146b2:	4638      	mov	r0, r7
 80146b4:	f001 fca2 	bl	8015ffc <__mcmp>
 80146b8:	2800      	cmp	r0, #0
 80146ba:	db25      	blt.n	8014708 <quorem+0xec>
 80146bc:	4629      	mov	r1, r5
 80146be:	2000      	movs	r0, #0
 80146c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80146c4:	f8d1 c000 	ldr.w	ip, [r1]
 80146c8:	fa1f fe82 	uxth.w	lr, r2
 80146cc:	fa1f f38c 	uxth.w	r3, ip
 80146d0:	eba3 030e 	sub.w	r3, r3, lr
 80146d4:	4403      	add	r3, r0
 80146d6:	0c12      	lsrs	r2, r2, #16
 80146d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80146dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80146e6:	45c1      	cmp	r9, r8
 80146e8:	f841 3b04 	str.w	r3, [r1], #4
 80146ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80146f0:	d2e6      	bcs.n	80146c0 <quorem+0xa4>
 80146f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80146f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80146fa:	b922      	cbnz	r2, 8014706 <quorem+0xea>
 80146fc:	3b04      	subs	r3, #4
 80146fe:	429d      	cmp	r5, r3
 8014700:	461a      	mov	r2, r3
 8014702:	d30b      	bcc.n	801471c <quorem+0x100>
 8014704:	613c      	str	r4, [r7, #16]
 8014706:	3601      	adds	r6, #1
 8014708:	4630      	mov	r0, r6
 801470a:	b003      	add	sp, #12
 801470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014710:	6812      	ldr	r2, [r2, #0]
 8014712:	3b04      	subs	r3, #4
 8014714:	2a00      	cmp	r2, #0
 8014716:	d1cb      	bne.n	80146b0 <quorem+0x94>
 8014718:	3c01      	subs	r4, #1
 801471a:	e7c6      	b.n	80146aa <quorem+0x8e>
 801471c:	6812      	ldr	r2, [r2, #0]
 801471e:	3b04      	subs	r3, #4
 8014720:	2a00      	cmp	r2, #0
 8014722:	d1ef      	bne.n	8014704 <quorem+0xe8>
 8014724:	3c01      	subs	r4, #1
 8014726:	e7ea      	b.n	80146fe <quorem+0xe2>
 8014728:	2000      	movs	r0, #0
 801472a:	e7ee      	b.n	801470a <quorem+0xee>
 801472c:	0000      	movs	r0, r0
	...

08014730 <_dtoa_r>:
 8014730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014734:	ed2d 8b02 	vpush	{d8}
 8014738:	69c7      	ldr	r7, [r0, #28]
 801473a:	b091      	sub	sp, #68	@ 0x44
 801473c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014740:	ec55 4b10 	vmov	r4, r5, d0
 8014744:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014746:	9107      	str	r1, [sp, #28]
 8014748:	4681      	mov	r9, r0
 801474a:	9209      	str	r2, [sp, #36]	@ 0x24
 801474c:	930d      	str	r3, [sp, #52]	@ 0x34
 801474e:	b97f      	cbnz	r7, 8014770 <_dtoa_r+0x40>
 8014750:	2010      	movs	r0, #16
 8014752:	f001 f8cf 	bl	80158f4 <malloc>
 8014756:	4602      	mov	r2, r0
 8014758:	f8c9 001c 	str.w	r0, [r9, #28]
 801475c:	b920      	cbnz	r0, 8014768 <_dtoa_r+0x38>
 801475e:	4ba0      	ldr	r3, [pc, #640]	@ (80149e0 <_dtoa_r+0x2b0>)
 8014760:	21ef      	movs	r1, #239	@ 0xef
 8014762:	48a0      	ldr	r0, [pc, #640]	@ (80149e4 <_dtoa_r+0x2b4>)
 8014764:	f002 f8d4 	bl	8016910 <__assert_func>
 8014768:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801476c:	6007      	str	r7, [r0, #0]
 801476e:	60c7      	str	r7, [r0, #12]
 8014770:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014774:	6819      	ldr	r1, [r3, #0]
 8014776:	b159      	cbz	r1, 8014790 <_dtoa_r+0x60>
 8014778:	685a      	ldr	r2, [r3, #4]
 801477a:	604a      	str	r2, [r1, #4]
 801477c:	2301      	movs	r3, #1
 801477e:	4093      	lsls	r3, r2
 8014780:	608b      	str	r3, [r1, #8]
 8014782:	4648      	mov	r0, r9
 8014784:	f001 f9be 	bl	8015b04 <_Bfree>
 8014788:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801478c:	2200      	movs	r2, #0
 801478e:	601a      	str	r2, [r3, #0]
 8014790:	1e2b      	subs	r3, r5, #0
 8014792:	bfbb      	ittet	lt
 8014794:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014798:	9303      	strlt	r3, [sp, #12]
 801479a:	2300      	movge	r3, #0
 801479c:	2201      	movlt	r2, #1
 801479e:	bfac      	ite	ge
 80147a0:	6033      	strge	r3, [r6, #0]
 80147a2:	6032      	strlt	r2, [r6, #0]
 80147a4:	4b90      	ldr	r3, [pc, #576]	@ (80149e8 <_dtoa_r+0x2b8>)
 80147a6:	9e03      	ldr	r6, [sp, #12]
 80147a8:	43b3      	bics	r3, r6
 80147aa:	d110      	bne.n	80147ce <_dtoa_r+0x9e>
 80147ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80147ae:	f242 730f 	movw	r3, #9999	@ 0x270f
 80147b2:	6013      	str	r3, [r2, #0]
 80147b4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80147b8:	4323      	orrs	r3, r4
 80147ba:	f000 84e6 	beq.w	801518a <_dtoa_r+0xa5a>
 80147be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80147c0:	4f8a      	ldr	r7, [pc, #552]	@ (80149ec <_dtoa_r+0x2bc>)
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	f000 84e8 	beq.w	8015198 <_dtoa_r+0xa68>
 80147c8:	1cfb      	adds	r3, r7, #3
 80147ca:	f000 bce3 	b.w	8015194 <_dtoa_r+0xa64>
 80147ce:	ed9d 8b02 	vldr	d8, [sp, #8]
 80147d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80147d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147da:	d10a      	bne.n	80147f2 <_dtoa_r+0xc2>
 80147dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80147de:	2301      	movs	r3, #1
 80147e0:	6013      	str	r3, [r2, #0]
 80147e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80147e4:	b113      	cbz	r3, 80147ec <_dtoa_r+0xbc>
 80147e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80147e8:	4b81      	ldr	r3, [pc, #516]	@ (80149f0 <_dtoa_r+0x2c0>)
 80147ea:	6013      	str	r3, [r2, #0]
 80147ec:	4f81      	ldr	r7, [pc, #516]	@ (80149f4 <_dtoa_r+0x2c4>)
 80147ee:	f000 bcd3 	b.w	8015198 <_dtoa_r+0xa68>
 80147f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80147f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80147f6:	4648      	mov	r0, r9
 80147f8:	eeb0 0b48 	vmov.f64	d0, d8
 80147fc:	f001 fd1e 	bl	801623c <__d2b>
 8014800:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8014804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014806:	9001      	str	r0, [sp, #4]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d045      	beq.n	8014898 <_dtoa_r+0x168>
 801480c:	eeb0 7b48 	vmov.f64	d7, d8
 8014810:	ee18 1a90 	vmov	r1, s17
 8014814:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014818:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801481c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014820:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014824:	2500      	movs	r5, #0
 8014826:	ee07 1a90 	vmov	s15, r1
 801482a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801482e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80149c8 <_dtoa_r+0x298>
 8014832:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014836:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80149d0 <_dtoa_r+0x2a0>
 801483a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801483e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80149d8 <_dtoa_r+0x2a8>
 8014842:	ee07 3a90 	vmov	s15, r3
 8014846:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801484a:	eeb0 7b46 	vmov.f64	d7, d6
 801484e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014852:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014856:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801485e:	ee16 8a90 	vmov	r8, s13
 8014862:	d508      	bpl.n	8014876 <_dtoa_r+0x146>
 8014864:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014868:	eeb4 6b47 	vcmp.f64	d6, d7
 801486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014870:	bf18      	it	ne
 8014872:	f108 38ff 	addne.w	r8, r8, #4294967295
 8014876:	f1b8 0f16 	cmp.w	r8, #22
 801487a:	d82b      	bhi.n	80148d4 <_dtoa_r+0x1a4>
 801487c:	495e      	ldr	r1, [pc, #376]	@ (80149f8 <_dtoa_r+0x2c8>)
 801487e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8014882:	ed91 7b00 	vldr	d7, [r1]
 8014886:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801488a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801488e:	d501      	bpl.n	8014894 <_dtoa_r+0x164>
 8014890:	f108 38ff 	add.w	r8, r8, #4294967295
 8014894:	2100      	movs	r1, #0
 8014896:	e01e      	b.n	80148d6 <_dtoa_r+0x1a6>
 8014898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801489a:	4413      	add	r3, r2
 801489c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80148a0:	2920      	cmp	r1, #32
 80148a2:	bfc1      	itttt	gt
 80148a4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80148a8:	408e      	lslgt	r6, r1
 80148aa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80148ae:	fa24 f101 	lsrgt.w	r1, r4, r1
 80148b2:	bfd6      	itet	le
 80148b4:	f1c1 0120 	rsble	r1, r1, #32
 80148b8:	4331      	orrgt	r1, r6
 80148ba:	fa04 f101 	lslle.w	r1, r4, r1
 80148be:	ee07 1a90 	vmov	s15, r1
 80148c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80148c6:	3b01      	subs	r3, #1
 80148c8:	ee17 1a90 	vmov	r1, s15
 80148cc:	2501      	movs	r5, #1
 80148ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80148d2:	e7a8      	b.n	8014826 <_dtoa_r+0xf6>
 80148d4:	2101      	movs	r1, #1
 80148d6:	1ad2      	subs	r2, r2, r3
 80148d8:	1e53      	subs	r3, r2, #1
 80148da:	9306      	str	r3, [sp, #24]
 80148dc:	bf45      	ittet	mi
 80148de:	f1c2 0301 	rsbmi	r3, r2, #1
 80148e2:	9304      	strmi	r3, [sp, #16]
 80148e4:	2300      	movpl	r3, #0
 80148e6:	2300      	movmi	r3, #0
 80148e8:	bf4c      	ite	mi
 80148ea:	9306      	strmi	r3, [sp, #24]
 80148ec:	9304      	strpl	r3, [sp, #16]
 80148ee:	f1b8 0f00 	cmp.w	r8, #0
 80148f2:	910c      	str	r1, [sp, #48]	@ 0x30
 80148f4:	db18      	blt.n	8014928 <_dtoa_r+0x1f8>
 80148f6:	9b06      	ldr	r3, [sp, #24]
 80148f8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80148fc:	4443      	add	r3, r8
 80148fe:	9306      	str	r3, [sp, #24]
 8014900:	2300      	movs	r3, #0
 8014902:	9a07      	ldr	r2, [sp, #28]
 8014904:	2a09      	cmp	r2, #9
 8014906:	d845      	bhi.n	8014994 <_dtoa_r+0x264>
 8014908:	2a05      	cmp	r2, #5
 801490a:	bfc4      	itt	gt
 801490c:	3a04      	subgt	r2, #4
 801490e:	9207      	strgt	r2, [sp, #28]
 8014910:	9a07      	ldr	r2, [sp, #28]
 8014912:	f1a2 0202 	sub.w	r2, r2, #2
 8014916:	bfcc      	ite	gt
 8014918:	2400      	movgt	r4, #0
 801491a:	2401      	movle	r4, #1
 801491c:	2a03      	cmp	r2, #3
 801491e:	d844      	bhi.n	80149aa <_dtoa_r+0x27a>
 8014920:	e8df f002 	tbb	[pc, r2]
 8014924:	0b173634 	.word	0x0b173634
 8014928:	9b04      	ldr	r3, [sp, #16]
 801492a:	2200      	movs	r2, #0
 801492c:	eba3 0308 	sub.w	r3, r3, r8
 8014930:	9304      	str	r3, [sp, #16]
 8014932:	920a      	str	r2, [sp, #40]	@ 0x28
 8014934:	f1c8 0300 	rsb	r3, r8, #0
 8014938:	e7e3      	b.n	8014902 <_dtoa_r+0x1d2>
 801493a:	2201      	movs	r2, #1
 801493c:	9208      	str	r2, [sp, #32]
 801493e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014940:	eb08 0b02 	add.w	fp, r8, r2
 8014944:	f10b 0a01 	add.w	sl, fp, #1
 8014948:	4652      	mov	r2, sl
 801494a:	2a01      	cmp	r2, #1
 801494c:	bfb8      	it	lt
 801494e:	2201      	movlt	r2, #1
 8014950:	e006      	b.n	8014960 <_dtoa_r+0x230>
 8014952:	2201      	movs	r2, #1
 8014954:	9208      	str	r2, [sp, #32]
 8014956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014958:	2a00      	cmp	r2, #0
 801495a:	dd29      	ble.n	80149b0 <_dtoa_r+0x280>
 801495c:	4693      	mov	fp, r2
 801495e:	4692      	mov	sl, r2
 8014960:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8014964:	2100      	movs	r1, #0
 8014966:	2004      	movs	r0, #4
 8014968:	f100 0614 	add.w	r6, r0, #20
 801496c:	4296      	cmp	r6, r2
 801496e:	d926      	bls.n	80149be <_dtoa_r+0x28e>
 8014970:	6079      	str	r1, [r7, #4]
 8014972:	4648      	mov	r0, r9
 8014974:	9305      	str	r3, [sp, #20]
 8014976:	f001 f885 	bl	8015a84 <_Balloc>
 801497a:	9b05      	ldr	r3, [sp, #20]
 801497c:	4607      	mov	r7, r0
 801497e:	2800      	cmp	r0, #0
 8014980:	d13e      	bne.n	8014a00 <_dtoa_r+0x2d0>
 8014982:	4b1e      	ldr	r3, [pc, #120]	@ (80149fc <_dtoa_r+0x2cc>)
 8014984:	4602      	mov	r2, r0
 8014986:	f240 11af 	movw	r1, #431	@ 0x1af
 801498a:	e6ea      	b.n	8014762 <_dtoa_r+0x32>
 801498c:	2200      	movs	r2, #0
 801498e:	e7e1      	b.n	8014954 <_dtoa_r+0x224>
 8014990:	2200      	movs	r2, #0
 8014992:	e7d3      	b.n	801493c <_dtoa_r+0x20c>
 8014994:	2401      	movs	r4, #1
 8014996:	2200      	movs	r2, #0
 8014998:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801499c:	f04f 3bff 	mov.w	fp, #4294967295
 80149a0:	2100      	movs	r1, #0
 80149a2:	46da      	mov	sl, fp
 80149a4:	2212      	movs	r2, #18
 80149a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80149a8:	e7da      	b.n	8014960 <_dtoa_r+0x230>
 80149aa:	2201      	movs	r2, #1
 80149ac:	9208      	str	r2, [sp, #32]
 80149ae:	e7f5      	b.n	801499c <_dtoa_r+0x26c>
 80149b0:	f04f 0b01 	mov.w	fp, #1
 80149b4:	46da      	mov	sl, fp
 80149b6:	465a      	mov	r2, fp
 80149b8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80149bc:	e7d0      	b.n	8014960 <_dtoa_r+0x230>
 80149be:	3101      	adds	r1, #1
 80149c0:	0040      	lsls	r0, r0, #1
 80149c2:	e7d1      	b.n	8014968 <_dtoa_r+0x238>
 80149c4:	f3af 8000 	nop.w
 80149c8:	636f4361 	.word	0x636f4361
 80149cc:	3fd287a7 	.word	0x3fd287a7
 80149d0:	8b60c8b3 	.word	0x8b60c8b3
 80149d4:	3fc68a28 	.word	0x3fc68a28
 80149d8:	509f79fb 	.word	0x509f79fb
 80149dc:	3fd34413 	.word	0x3fd34413
 80149e0:	080172bf 	.word	0x080172bf
 80149e4:	080172d6 	.word	0x080172d6
 80149e8:	7ff00000 	.word	0x7ff00000
 80149ec:	080172bb 	.word	0x080172bb
 80149f0:	08017287 	.word	0x08017287
 80149f4:	08017286 	.word	0x08017286
 80149f8:	080174d0 	.word	0x080174d0
 80149fc:	0801732e 	.word	0x0801732e
 8014a00:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8014a04:	f1ba 0f0e 	cmp.w	sl, #14
 8014a08:	6010      	str	r0, [r2, #0]
 8014a0a:	d86e      	bhi.n	8014aea <_dtoa_r+0x3ba>
 8014a0c:	2c00      	cmp	r4, #0
 8014a0e:	d06c      	beq.n	8014aea <_dtoa_r+0x3ba>
 8014a10:	f1b8 0f00 	cmp.w	r8, #0
 8014a14:	f340 80b4 	ble.w	8014b80 <_dtoa_r+0x450>
 8014a18:	4ac8      	ldr	r2, [pc, #800]	@ (8014d3c <_dtoa_r+0x60c>)
 8014a1a:	f008 010f 	and.w	r1, r8, #15
 8014a1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014a22:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8014a26:	ed92 7b00 	vldr	d7, [r2]
 8014a2a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8014a2e:	f000 809b 	beq.w	8014b68 <_dtoa_r+0x438>
 8014a32:	4ac3      	ldr	r2, [pc, #780]	@ (8014d40 <_dtoa_r+0x610>)
 8014a34:	ed92 6b08 	vldr	d6, [r2, #32]
 8014a38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014a3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014a40:	f001 010f 	and.w	r1, r1, #15
 8014a44:	2203      	movs	r2, #3
 8014a46:	48be      	ldr	r0, [pc, #760]	@ (8014d40 <_dtoa_r+0x610>)
 8014a48:	2900      	cmp	r1, #0
 8014a4a:	f040 808f 	bne.w	8014b6c <_dtoa_r+0x43c>
 8014a4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014a52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014a56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014a5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014a60:	2900      	cmp	r1, #0
 8014a62:	f000 80b3 	beq.w	8014bcc <_dtoa_r+0x49c>
 8014a66:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8014a6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a72:	f140 80ab 	bpl.w	8014bcc <_dtoa_r+0x49c>
 8014a76:	f1ba 0f00 	cmp.w	sl, #0
 8014a7a:	f000 80a7 	beq.w	8014bcc <_dtoa_r+0x49c>
 8014a7e:	f1bb 0f00 	cmp.w	fp, #0
 8014a82:	dd30      	ble.n	8014ae6 <_dtoa_r+0x3b6>
 8014a84:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8014a88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014a8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a90:	f108 31ff 	add.w	r1, r8, #4294967295
 8014a94:	9105      	str	r1, [sp, #20]
 8014a96:	3201      	adds	r2, #1
 8014a98:	465c      	mov	r4, fp
 8014a9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014a9e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8014aa2:	ee07 2a90 	vmov	s15, r2
 8014aa6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014aaa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014aae:	ee15 2a90 	vmov	r2, s11
 8014ab2:	ec51 0b15 	vmov	r0, r1, d5
 8014ab6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8014aba:	2c00      	cmp	r4, #0
 8014abc:	f040 808a 	bne.w	8014bd4 <_dtoa_r+0x4a4>
 8014ac0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014ac4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014ac8:	ec41 0b17 	vmov	d7, r0, r1
 8014acc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad4:	f300 826a 	bgt.w	8014fac <_dtoa_r+0x87c>
 8014ad8:	eeb1 7b47 	vneg.f64	d7, d7
 8014adc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae4:	d423      	bmi.n	8014b2e <_dtoa_r+0x3fe>
 8014ae6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014aea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014aec:	2a00      	cmp	r2, #0
 8014aee:	f2c0 8129 	blt.w	8014d44 <_dtoa_r+0x614>
 8014af2:	f1b8 0f0e 	cmp.w	r8, #14
 8014af6:	f300 8125 	bgt.w	8014d44 <_dtoa_r+0x614>
 8014afa:	4b90      	ldr	r3, [pc, #576]	@ (8014d3c <_dtoa_r+0x60c>)
 8014afc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014b00:	ed93 6b00 	vldr	d6, [r3]
 8014b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	f280 80c8 	bge.w	8014c9c <_dtoa_r+0x56c>
 8014b0c:	f1ba 0f00 	cmp.w	sl, #0
 8014b10:	f300 80c4 	bgt.w	8014c9c <_dtoa_r+0x56c>
 8014b14:	d10b      	bne.n	8014b2e <_dtoa_r+0x3fe>
 8014b16:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8014b1a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014b1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b2a:	f2c0 823c 	blt.w	8014fa6 <_dtoa_r+0x876>
 8014b2e:	2400      	movs	r4, #0
 8014b30:	4625      	mov	r5, r4
 8014b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b34:	43db      	mvns	r3, r3
 8014b36:	9305      	str	r3, [sp, #20]
 8014b38:	463e      	mov	r6, r7
 8014b3a:	f04f 0800 	mov.w	r8, #0
 8014b3e:	4621      	mov	r1, r4
 8014b40:	4648      	mov	r0, r9
 8014b42:	f000 ffdf 	bl	8015b04 <_Bfree>
 8014b46:	2d00      	cmp	r5, #0
 8014b48:	f000 80a2 	beq.w	8014c90 <_dtoa_r+0x560>
 8014b4c:	f1b8 0f00 	cmp.w	r8, #0
 8014b50:	d005      	beq.n	8014b5e <_dtoa_r+0x42e>
 8014b52:	45a8      	cmp	r8, r5
 8014b54:	d003      	beq.n	8014b5e <_dtoa_r+0x42e>
 8014b56:	4641      	mov	r1, r8
 8014b58:	4648      	mov	r0, r9
 8014b5a:	f000 ffd3 	bl	8015b04 <_Bfree>
 8014b5e:	4629      	mov	r1, r5
 8014b60:	4648      	mov	r0, r9
 8014b62:	f000 ffcf 	bl	8015b04 <_Bfree>
 8014b66:	e093      	b.n	8014c90 <_dtoa_r+0x560>
 8014b68:	2202      	movs	r2, #2
 8014b6a:	e76c      	b.n	8014a46 <_dtoa_r+0x316>
 8014b6c:	07cc      	lsls	r4, r1, #31
 8014b6e:	d504      	bpl.n	8014b7a <_dtoa_r+0x44a>
 8014b70:	ed90 6b00 	vldr	d6, [r0]
 8014b74:	3201      	adds	r2, #1
 8014b76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b7a:	1049      	asrs	r1, r1, #1
 8014b7c:	3008      	adds	r0, #8
 8014b7e:	e763      	b.n	8014a48 <_dtoa_r+0x318>
 8014b80:	d022      	beq.n	8014bc8 <_dtoa_r+0x498>
 8014b82:	f1c8 0100 	rsb	r1, r8, #0
 8014b86:	4a6d      	ldr	r2, [pc, #436]	@ (8014d3c <_dtoa_r+0x60c>)
 8014b88:	f001 000f 	and.w	r0, r1, #15
 8014b8c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014b90:	ed92 7b00 	vldr	d7, [r2]
 8014b94:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014b98:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b9c:	4868      	ldr	r0, [pc, #416]	@ (8014d40 <_dtoa_r+0x610>)
 8014b9e:	1109      	asrs	r1, r1, #4
 8014ba0:	2400      	movs	r4, #0
 8014ba2:	2202      	movs	r2, #2
 8014ba4:	b929      	cbnz	r1, 8014bb2 <_dtoa_r+0x482>
 8014ba6:	2c00      	cmp	r4, #0
 8014ba8:	f43f af57 	beq.w	8014a5a <_dtoa_r+0x32a>
 8014bac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014bb0:	e753      	b.n	8014a5a <_dtoa_r+0x32a>
 8014bb2:	07ce      	lsls	r6, r1, #31
 8014bb4:	d505      	bpl.n	8014bc2 <_dtoa_r+0x492>
 8014bb6:	ed90 6b00 	vldr	d6, [r0]
 8014bba:	3201      	adds	r2, #1
 8014bbc:	2401      	movs	r4, #1
 8014bbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014bc2:	1049      	asrs	r1, r1, #1
 8014bc4:	3008      	adds	r0, #8
 8014bc6:	e7ed      	b.n	8014ba4 <_dtoa_r+0x474>
 8014bc8:	2202      	movs	r2, #2
 8014bca:	e746      	b.n	8014a5a <_dtoa_r+0x32a>
 8014bcc:	f8cd 8014 	str.w	r8, [sp, #20]
 8014bd0:	4654      	mov	r4, sl
 8014bd2:	e762      	b.n	8014a9a <_dtoa_r+0x36a>
 8014bd4:	4a59      	ldr	r2, [pc, #356]	@ (8014d3c <_dtoa_r+0x60c>)
 8014bd6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8014bda:	ed12 4b02 	vldr	d4, [r2, #-8]
 8014bde:	9a08      	ldr	r2, [sp, #32]
 8014be0:	ec41 0b17 	vmov	d7, r0, r1
 8014be4:	443c      	add	r4, r7
 8014be6:	b34a      	cbz	r2, 8014c3c <_dtoa_r+0x50c>
 8014be8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8014bec:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8014bf0:	463e      	mov	r6, r7
 8014bf2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014bf6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014bfa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014bfe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014c02:	ee14 2a90 	vmov	r2, s9
 8014c06:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014c0a:	3230      	adds	r2, #48	@ 0x30
 8014c0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014c10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c18:	f806 2b01 	strb.w	r2, [r6], #1
 8014c1c:	d438      	bmi.n	8014c90 <_dtoa_r+0x560>
 8014c1e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014c22:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c2a:	d46e      	bmi.n	8014d0a <_dtoa_r+0x5da>
 8014c2c:	42a6      	cmp	r6, r4
 8014c2e:	f43f af5a 	beq.w	8014ae6 <_dtoa_r+0x3b6>
 8014c32:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014c36:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014c3a:	e7e0      	b.n	8014bfe <_dtoa_r+0x4ce>
 8014c3c:	4621      	mov	r1, r4
 8014c3e:	463e      	mov	r6, r7
 8014c40:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014c44:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8014c48:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014c4c:	ee14 2a90 	vmov	r2, s9
 8014c50:	3230      	adds	r2, #48	@ 0x30
 8014c52:	f806 2b01 	strb.w	r2, [r6], #1
 8014c56:	42a6      	cmp	r6, r4
 8014c58:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014c5c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014c60:	d119      	bne.n	8014c96 <_dtoa_r+0x566>
 8014c62:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8014c66:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014c6a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c72:	dc4a      	bgt.n	8014d0a <_dtoa_r+0x5da>
 8014c74:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014c78:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c80:	f57f af31 	bpl.w	8014ae6 <_dtoa_r+0x3b6>
 8014c84:	460e      	mov	r6, r1
 8014c86:	3901      	subs	r1, #1
 8014c88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014c8c:	2b30      	cmp	r3, #48	@ 0x30
 8014c8e:	d0f9      	beq.n	8014c84 <_dtoa_r+0x554>
 8014c90:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014c94:	e027      	b.n	8014ce6 <_dtoa_r+0x5b6>
 8014c96:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014c9a:	e7d5      	b.n	8014c48 <_dtoa_r+0x518>
 8014c9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014ca0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8014ca4:	463e      	mov	r6, r7
 8014ca6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014caa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014cae:	ee15 3a10 	vmov	r3, s10
 8014cb2:	3330      	adds	r3, #48	@ 0x30
 8014cb4:	f806 3b01 	strb.w	r3, [r6], #1
 8014cb8:	1bf3      	subs	r3, r6, r7
 8014cba:	459a      	cmp	sl, r3
 8014cbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014cc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014cc4:	d132      	bne.n	8014d2c <_dtoa_r+0x5fc>
 8014cc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014cca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd2:	dc18      	bgt.n	8014d06 <_dtoa_r+0x5d6>
 8014cd4:	eeb4 7b46 	vcmp.f64	d7, d6
 8014cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cdc:	d103      	bne.n	8014ce6 <_dtoa_r+0x5b6>
 8014cde:	ee15 3a10 	vmov	r3, s10
 8014ce2:	07db      	lsls	r3, r3, #31
 8014ce4:	d40f      	bmi.n	8014d06 <_dtoa_r+0x5d6>
 8014ce6:	9901      	ldr	r1, [sp, #4]
 8014ce8:	4648      	mov	r0, r9
 8014cea:	f000 ff0b 	bl	8015b04 <_Bfree>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014cf2:	7033      	strb	r3, [r6, #0]
 8014cf4:	f108 0301 	add.w	r3, r8, #1
 8014cf8:	6013      	str	r3, [r2, #0]
 8014cfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f000 824b 	beq.w	8015198 <_dtoa_r+0xa68>
 8014d02:	601e      	str	r6, [r3, #0]
 8014d04:	e248      	b.n	8015198 <_dtoa_r+0xa68>
 8014d06:	f8cd 8014 	str.w	r8, [sp, #20]
 8014d0a:	4633      	mov	r3, r6
 8014d0c:	461e      	mov	r6, r3
 8014d0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014d12:	2a39      	cmp	r2, #57	@ 0x39
 8014d14:	d106      	bne.n	8014d24 <_dtoa_r+0x5f4>
 8014d16:	429f      	cmp	r7, r3
 8014d18:	d1f8      	bne.n	8014d0c <_dtoa_r+0x5dc>
 8014d1a:	9a05      	ldr	r2, [sp, #20]
 8014d1c:	3201      	adds	r2, #1
 8014d1e:	9205      	str	r2, [sp, #20]
 8014d20:	2230      	movs	r2, #48	@ 0x30
 8014d22:	703a      	strb	r2, [r7, #0]
 8014d24:	781a      	ldrb	r2, [r3, #0]
 8014d26:	3201      	adds	r2, #1
 8014d28:	701a      	strb	r2, [r3, #0]
 8014d2a:	e7b1      	b.n	8014c90 <_dtoa_r+0x560>
 8014d2c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014d30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d38:	d1b5      	bne.n	8014ca6 <_dtoa_r+0x576>
 8014d3a:	e7d4      	b.n	8014ce6 <_dtoa_r+0x5b6>
 8014d3c:	080174d0 	.word	0x080174d0
 8014d40:	080174a8 	.word	0x080174a8
 8014d44:	9908      	ldr	r1, [sp, #32]
 8014d46:	2900      	cmp	r1, #0
 8014d48:	f000 80e9 	beq.w	8014f1e <_dtoa_r+0x7ee>
 8014d4c:	9907      	ldr	r1, [sp, #28]
 8014d4e:	2901      	cmp	r1, #1
 8014d50:	f300 80cb 	bgt.w	8014eea <_dtoa_r+0x7ba>
 8014d54:	2d00      	cmp	r5, #0
 8014d56:	f000 80c4 	beq.w	8014ee2 <_dtoa_r+0x7b2>
 8014d5a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014d5e:	9e04      	ldr	r6, [sp, #16]
 8014d60:	461c      	mov	r4, r3
 8014d62:	9305      	str	r3, [sp, #20]
 8014d64:	9b04      	ldr	r3, [sp, #16]
 8014d66:	4413      	add	r3, r2
 8014d68:	9304      	str	r3, [sp, #16]
 8014d6a:	9b06      	ldr	r3, [sp, #24]
 8014d6c:	2101      	movs	r1, #1
 8014d6e:	4413      	add	r3, r2
 8014d70:	4648      	mov	r0, r9
 8014d72:	9306      	str	r3, [sp, #24]
 8014d74:	f000 ffc4 	bl	8015d00 <__i2b>
 8014d78:	9b05      	ldr	r3, [sp, #20]
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	b166      	cbz	r6, 8014d98 <_dtoa_r+0x668>
 8014d7e:	9a06      	ldr	r2, [sp, #24]
 8014d80:	2a00      	cmp	r2, #0
 8014d82:	dd09      	ble.n	8014d98 <_dtoa_r+0x668>
 8014d84:	42b2      	cmp	r2, r6
 8014d86:	9904      	ldr	r1, [sp, #16]
 8014d88:	bfa8      	it	ge
 8014d8a:	4632      	movge	r2, r6
 8014d8c:	1a89      	subs	r1, r1, r2
 8014d8e:	9104      	str	r1, [sp, #16]
 8014d90:	9906      	ldr	r1, [sp, #24]
 8014d92:	1ab6      	subs	r6, r6, r2
 8014d94:	1a8a      	subs	r2, r1, r2
 8014d96:	9206      	str	r2, [sp, #24]
 8014d98:	b30b      	cbz	r3, 8014dde <_dtoa_r+0x6ae>
 8014d9a:	9a08      	ldr	r2, [sp, #32]
 8014d9c:	2a00      	cmp	r2, #0
 8014d9e:	f000 80c5 	beq.w	8014f2c <_dtoa_r+0x7fc>
 8014da2:	2c00      	cmp	r4, #0
 8014da4:	f000 80bf 	beq.w	8014f26 <_dtoa_r+0x7f6>
 8014da8:	4629      	mov	r1, r5
 8014daa:	4622      	mov	r2, r4
 8014dac:	4648      	mov	r0, r9
 8014dae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014db0:	f001 f85e 	bl	8015e70 <__pow5mult>
 8014db4:	9a01      	ldr	r2, [sp, #4]
 8014db6:	4601      	mov	r1, r0
 8014db8:	4605      	mov	r5, r0
 8014dba:	4648      	mov	r0, r9
 8014dbc:	f000 ffb6 	bl	8015d2c <__multiply>
 8014dc0:	9901      	ldr	r1, [sp, #4]
 8014dc2:	9005      	str	r0, [sp, #20]
 8014dc4:	4648      	mov	r0, r9
 8014dc6:	f000 fe9d 	bl	8015b04 <_Bfree>
 8014dca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014dcc:	1b1b      	subs	r3, r3, r4
 8014dce:	f000 80b0 	beq.w	8014f32 <_dtoa_r+0x802>
 8014dd2:	9905      	ldr	r1, [sp, #20]
 8014dd4:	461a      	mov	r2, r3
 8014dd6:	4648      	mov	r0, r9
 8014dd8:	f001 f84a 	bl	8015e70 <__pow5mult>
 8014ddc:	9001      	str	r0, [sp, #4]
 8014dde:	2101      	movs	r1, #1
 8014de0:	4648      	mov	r0, r9
 8014de2:	f000 ff8d 	bl	8015d00 <__i2b>
 8014de6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014de8:	4604      	mov	r4, r0
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	f000 81da 	beq.w	80151a4 <_dtoa_r+0xa74>
 8014df0:	461a      	mov	r2, r3
 8014df2:	4601      	mov	r1, r0
 8014df4:	4648      	mov	r0, r9
 8014df6:	f001 f83b 	bl	8015e70 <__pow5mult>
 8014dfa:	9b07      	ldr	r3, [sp, #28]
 8014dfc:	2b01      	cmp	r3, #1
 8014dfe:	4604      	mov	r4, r0
 8014e00:	f300 80a0 	bgt.w	8014f44 <_dtoa_r+0x814>
 8014e04:	9b02      	ldr	r3, [sp, #8]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	f040 8096 	bne.w	8014f38 <_dtoa_r+0x808>
 8014e0c:	9b03      	ldr	r3, [sp, #12]
 8014e0e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014e12:	2a00      	cmp	r2, #0
 8014e14:	f040 8092 	bne.w	8014f3c <_dtoa_r+0x80c>
 8014e18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8014e1c:	0d12      	lsrs	r2, r2, #20
 8014e1e:	0512      	lsls	r2, r2, #20
 8014e20:	2a00      	cmp	r2, #0
 8014e22:	f000 808d 	beq.w	8014f40 <_dtoa_r+0x810>
 8014e26:	9b04      	ldr	r3, [sp, #16]
 8014e28:	3301      	adds	r3, #1
 8014e2a:	9304      	str	r3, [sp, #16]
 8014e2c:	9b06      	ldr	r3, [sp, #24]
 8014e2e:	3301      	adds	r3, #1
 8014e30:	9306      	str	r3, [sp, #24]
 8014e32:	2301      	movs	r3, #1
 8014e34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	f000 81b9 	beq.w	80151b0 <_dtoa_r+0xa80>
 8014e3e:	6922      	ldr	r2, [r4, #16]
 8014e40:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014e44:	6910      	ldr	r0, [r2, #16]
 8014e46:	f000 ff0f 	bl	8015c68 <__hi0bits>
 8014e4a:	f1c0 0020 	rsb	r0, r0, #32
 8014e4e:	9b06      	ldr	r3, [sp, #24]
 8014e50:	4418      	add	r0, r3
 8014e52:	f010 001f 	ands.w	r0, r0, #31
 8014e56:	f000 8081 	beq.w	8014f5c <_dtoa_r+0x82c>
 8014e5a:	f1c0 0220 	rsb	r2, r0, #32
 8014e5e:	2a04      	cmp	r2, #4
 8014e60:	dd73      	ble.n	8014f4a <_dtoa_r+0x81a>
 8014e62:	9b04      	ldr	r3, [sp, #16]
 8014e64:	f1c0 001c 	rsb	r0, r0, #28
 8014e68:	4403      	add	r3, r0
 8014e6a:	9304      	str	r3, [sp, #16]
 8014e6c:	9b06      	ldr	r3, [sp, #24]
 8014e6e:	4406      	add	r6, r0
 8014e70:	4403      	add	r3, r0
 8014e72:	9306      	str	r3, [sp, #24]
 8014e74:	9b04      	ldr	r3, [sp, #16]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	dd05      	ble.n	8014e86 <_dtoa_r+0x756>
 8014e7a:	9901      	ldr	r1, [sp, #4]
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	4648      	mov	r0, r9
 8014e80:	f001 f850 	bl	8015f24 <__lshift>
 8014e84:	9001      	str	r0, [sp, #4]
 8014e86:	9b06      	ldr	r3, [sp, #24]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	dd05      	ble.n	8014e98 <_dtoa_r+0x768>
 8014e8c:	4621      	mov	r1, r4
 8014e8e:	461a      	mov	r2, r3
 8014e90:	4648      	mov	r0, r9
 8014e92:	f001 f847 	bl	8015f24 <__lshift>
 8014e96:	4604      	mov	r4, r0
 8014e98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d060      	beq.n	8014f60 <_dtoa_r+0x830>
 8014e9e:	9801      	ldr	r0, [sp, #4]
 8014ea0:	4621      	mov	r1, r4
 8014ea2:	f001 f8ab 	bl	8015ffc <__mcmp>
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	da5a      	bge.n	8014f60 <_dtoa_r+0x830>
 8014eaa:	f108 33ff 	add.w	r3, r8, #4294967295
 8014eae:	9305      	str	r3, [sp, #20]
 8014eb0:	9901      	ldr	r1, [sp, #4]
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	220a      	movs	r2, #10
 8014eb6:	4648      	mov	r0, r9
 8014eb8:	f000 fe46 	bl	8015b48 <__multadd>
 8014ebc:	9b08      	ldr	r3, [sp, #32]
 8014ebe:	9001      	str	r0, [sp, #4]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	f000 8177 	beq.w	80151b4 <_dtoa_r+0xa84>
 8014ec6:	4629      	mov	r1, r5
 8014ec8:	2300      	movs	r3, #0
 8014eca:	220a      	movs	r2, #10
 8014ecc:	4648      	mov	r0, r9
 8014ece:	f000 fe3b 	bl	8015b48 <__multadd>
 8014ed2:	f1bb 0f00 	cmp.w	fp, #0
 8014ed6:	4605      	mov	r5, r0
 8014ed8:	dc6e      	bgt.n	8014fb8 <_dtoa_r+0x888>
 8014eda:	9b07      	ldr	r3, [sp, #28]
 8014edc:	2b02      	cmp	r3, #2
 8014ede:	dc48      	bgt.n	8014f72 <_dtoa_r+0x842>
 8014ee0:	e06a      	b.n	8014fb8 <_dtoa_r+0x888>
 8014ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014ee4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014ee8:	e739      	b.n	8014d5e <_dtoa_r+0x62e>
 8014eea:	f10a 34ff 	add.w	r4, sl, #4294967295
 8014eee:	42a3      	cmp	r3, r4
 8014ef0:	db07      	blt.n	8014f02 <_dtoa_r+0x7d2>
 8014ef2:	f1ba 0f00 	cmp.w	sl, #0
 8014ef6:	eba3 0404 	sub.w	r4, r3, r4
 8014efa:	db0b      	blt.n	8014f14 <_dtoa_r+0x7e4>
 8014efc:	9e04      	ldr	r6, [sp, #16]
 8014efe:	4652      	mov	r2, sl
 8014f00:	e72f      	b.n	8014d62 <_dtoa_r+0x632>
 8014f02:	1ae2      	subs	r2, r4, r3
 8014f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014f06:	9e04      	ldr	r6, [sp, #16]
 8014f08:	4413      	add	r3, r2
 8014f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f0c:	4652      	mov	r2, sl
 8014f0e:	4623      	mov	r3, r4
 8014f10:	2400      	movs	r4, #0
 8014f12:	e726      	b.n	8014d62 <_dtoa_r+0x632>
 8014f14:	9a04      	ldr	r2, [sp, #16]
 8014f16:	eba2 060a 	sub.w	r6, r2, sl
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	e721      	b.n	8014d62 <_dtoa_r+0x632>
 8014f1e:	9e04      	ldr	r6, [sp, #16]
 8014f20:	9d08      	ldr	r5, [sp, #32]
 8014f22:	461c      	mov	r4, r3
 8014f24:	e72a      	b.n	8014d7c <_dtoa_r+0x64c>
 8014f26:	9a01      	ldr	r2, [sp, #4]
 8014f28:	9205      	str	r2, [sp, #20]
 8014f2a:	e752      	b.n	8014dd2 <_dtoa_r+0x6a2>
 8014f2c:	9901      	ldr	r1, [sp, #4]
 8014f2e:	461a      	mov	r2, r3
 8014f30:	e751      	b.n	8014dd6 <_dtoa_r+0x6a6>
 8014f32:	9b05      	ldr	r3, [sp, #20]
 8014f34:	9301      	str	r3, [sp, #4]
 8014f36:	e752      	b.n	8014dde <_dtoa_r+0x6ae>
 8014f38:	2300      	movs	r3, #0
 8014f3a:	e77b      	b.n	8014e34 <_dtoa_r+0x704>
 8014f3c:	9b02      	ldr	r3, [sp, #8]
 8014f3e:	e779      	b.n	8014e34 <_dtoa_r+0x704>
 8014f40:	920b      	str	r2, [sp, #44]	@ 0x2c
 8014f42:	e778      	b.n	8014e36 <_dtoa_r+0x706>
 8014f44:	2300      	movs	r3, #0
 8014f46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f48:	e779      	b.n	8014e3e <_dtoa_r+0x70e>
 8014f4a:	d093      	beq.n	8014e74 <_dtoa_r+0x744>
 8014f4c:	9b04      	ldr	r3, [sp, #16]
 8014f4e:	321c      	adds	r2, #28
 8014f50:	4413      	add	r3, r2
 8014f52:	9304      	str	r3, [sp, #16]
 8014f54:	9b06      	ldr	r3, [sp, #24]
 8014f56:	4416      	add	r6, r2
 8014f58:	4413      	add	r3, r2
 8014f5a:	e78a      	b.n	8014e72 <_dtoa_r+0x742>
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	e7f5      	b.n	8014f4c <_dtoa_r+0x81c>
 8014f60:	f1ba 0f00 	cmp.w	sl, #0
 8014f64:	f8cd 8014 	str.w	r8, [sp, #20]
 8014f68:	46d3      	mov	fp, sl
 8014f6a:	dc21      	bgt.n	8014fb0 <_dtoa_r+0x880>
 8014f6c:	9b07      	ldr	r3, [sp, #28]
 8014f6e:	2b02      	cmp	r3, #2
 8014f70:	dd1e      	ble.n	8014fb0 <_dtoa_r+0x880>
 8014f72:	f1bb 0f00 	cmp.w	fp, #0
 8014f76:	f47f addc 	bne.w	8014b32 <_dtoa_r+0x402>
 8014f7a:	4621      	mov	r1, r4
 8014f7c:	465b      	mov	r3, fp
 8014f7e:	2205      	movs	r2, #5
 8014f80:	4648      	mov	r0, r9
 8014f82:	f000 fde1 	bl	8015b48 <__multadd>
 8014f86:	4601      	mov	r1, r0
 8014f88:	4604      	mov	r4, r0
 8014f8a:	9801      	ldr	r0, [sp, #4]
 8014f8c:	f001 f836 	bl	8015ffc <__mcmp>
 8014f90:	2800      	cmp	r0, #0
 8014f92:	f77f adce 	ble.w	8014b32 <_dtoa_r+0x402>
 8014f96:	463e      	mov	r6, r7
 8014f98:	2331      	movs	r3, #49	@ 0x31
 8014f9a:	f806 3b01 	strb.w	r3, [r6], #1
 8014f9e:	9b05      	ldr	r3, [sp, #20]
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	9305      	str	r3, [sp, #20]
 8014fa4:	e5c9      	b.n	8014b3a <_dtoa_r+0x40a>
 8014fa6:	f8cd 8014 	str.w	r8, [sp, #20]
 8014faa:	4654      	mov	r4, sl
 8014fac:	4625      	mov	r5, r4
 8014fae:	e7f2      	b.n	8014f96 <_dtoa_r+0x866>
 8014fb0:	9b08      	ldr	r3, [sp, #32]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	f000 8102 	beq.w	80151bc <_dtoa_r+0xa8c>
 8014fb8:	2e00      	cmp	r6, #0
 8014fba:	dd05      	ble.n	8014fc8 <_dtoa_r+0x898>
 8014fbc:	4629      	mov	r1, r5
 8014fbe:	4632      	mov	r2, r6
 8014fc0:	4648      	mov	r0, r9
 8014fc2:	f000 ffaf 	bl	8015f24 <__lshift>
 8014fc6:	4605      	mov	r5, r0
 8014fc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d058      	beq.n	8015080 <_dtoa_r+0x950>
 8014fce:	6869      	ldr	r1, [r5, #4]
 8014fd0:	4648      	mov	r0, r9
 8014fd2:	f000 fd57 	bl	8015a84 <_Balloc>
 8014fd6:	4606      	mov	r6, r0
 8014fd8:	b928      	cbnz	r0, 8014fe6 <_dtoa_r+0x8b6>
 8014fda:	4b82      	ldr	r3, [pc, #520]	@ (80151e4 <_dtoa_r+0xab4>)
 8014fdc:	4602      	mov	r2, r0
 8014fde:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014fe2:	f7ff bbbe 	b.w	8014762 <_dtoa_r+0x32>
 8014fe6:	692a      	ldr	r2, [r5, #16]
 8014fe8:	3202      	adds	r2, #2
 8014fea:	0092      	lsls	r2, r2, #2
 8014fec:	f105 010c 	add.w	r1, r5, #12
 8014ff0:	300c      	adds	r0, #12
 8014ff2:	f7ff faf6 	bl	80145e2 <memcpy>
 8014ff6:	2201      	movs	r2, #1
 8014ff8:	4631      	mov	r1, r6
 8014ffa:	4648      	mov	r0, r9
 8014ffc:	f000 ff92 	bl	8015f24 <__lshift>
 8015000:	1c7b      	adds	r3, r7, #1
 8015002:	9304      	str	r3, [sp, #16]
 8015004:	eb07 030b 	add.w	r3, r7, fp
 8015008:	9309      	str	r3, [sp, #36]	@ 0x24
 801500a:	9b02      	ldr	r3, [sp, #8]
 801500c:	f003 0301 	and.w	r3, r3, #1
 8015010:	46a8      	mov	r8, r5
 8015012:	9308      	str	r3, [sp, #32]
 8015014:	4605      	mov	r5, r0
 8015016:	9b04      	ldr	r3, [sp, #16]
 8015018:	9801      	ldr	r0, [sp, #4]
 801501a:	4621      	mov	r1, r4
 801501c:	f103 3bff 	add.w	fp, r3, #4294967295
 8015020:	f7ff fafc 	bl	801461c <quorem>
 8015024:	4641      	mov	r1, r8
 8015026:	9002      	str	r0, [sp, #8]
 8015028:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801502c:	9801      	ldr	r0, [sp, #4]
 801502e:	f000 ffe5 	bl	8015ffc <__mcmp>
 8015032:	462a      	mov	r2, r5
 8015034:	9006      	str	r0, [sp, #24]
 8015036:	4621      	mov	r1, r4
 8015038:	4648      	mov	r0, r9
 801503a:	f000 fffb 	bl	8016034 <__mdiff>
 801503e:	68c2      	ldr	r2, [r0, #12]
 8015040:	4606      	mov	r6, r0
 8015042:	b9fa      	cbnz	r2, 8015084 <_dtoa_r+0x954>
 8015044:	4601      	mov	r1, r0
 8015046:	9801      	ldr	r0, [sp, #4]
 8015048:	f000 ffd8 	bl	8015ffc <__mcmp>
 801504c:	4602      	mov	r2, r0
 801504e:	4631      	mov	r1, r6
 8015050:	4648      	mov	r0, r9
 8015052:	920a      	str	r2, [sp, #40]	@ 0x28
 8015054:	f000 fd56 	bl	8015b04 <_Bfree>
 8015058:	9b07      	ldr	r3, [sp, #28]
 801505a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801505c:	9e04      	ldr	r6, [sp, #16]
 801505e:	ea42 0103 	orr.w	r1, r2, r3
 8015062:	9b08      	ldr	r3, [sp, #32]
 8015064:	4319      	orrs	r1, r3
 8015066:	d10f      	bne.n	8015088 <_dtoa_r+0x958>
 8015068:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801506c:	d028      	beq.n	80150c0 <_dtoa_r+0x990>
 801506e:	9b06      	ldr	r3, [sp, #24]
 8015070:	2b00      	cmp	r3, #0
 8015072:	dd02      	ble.n	801507a <_dtoa_r+0x94a>
 8015074:	9b02      	ldr	r3, [sp, #8]
 8015076:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801507a:	f88b a000 	strb.w	sl, [fp]
 801507e:	e55e      	b.n	8014b3e <_dtoa_r+0x40e>
 8015080:	4628      	mov	r0, r5
 8015082:	e7bd      	b.n	8015000 <_dtoa_r+0x8d0>
 8015084:	2201      	movs	r2, #1
 8015086:	e7e2      	b.n	801504e <_dtoa_r+0x91e>
 8015088:	9b06      	ldr	r3, [sp, #24]
 801508a:	2b00      	cmp	r3, #0
 801508c:	db04      	blt.n	8015098 <_dtoa_r+0x968>
 801508e:	9907      	ldr	r1, [sp, #28]
 8015090:	430b      	orrs	r3, r1
 8015092:	9908      	ldr	r1, [sp, #32]
 8015094:	430b      	orrs	r3, r1
 8015096:	d120      	bne.n	80150da <_dtoa_r+0x9aa>
 8015098:	2a00      	cmp	r2, #0
 801509a:	ddee      	ble.n	801507a <_dtoa_r+0x94a>
 801509c:	9901      	ldr	r1, [sp, #4]
 801509e:	2201      	movs	r2, #1
 80150a0:	4648      	mov	r0, r9
 80150a2:	f000 ff3f 	bl	8015f24 <__lshift>
 80150a6:	4621      	mov	r1, r4
 80150a8:	9001      	str	r0, [sp, #4]
 80150aa:	f000 ffa7 	bl	8015ffc <__mcmp>
 80150ae:	2800      	cmp	r0, #0
 80150b0:	dc03      	bgt.n	80150ba <_dtoa_r+0x98a>
 80150b2:	d1e2      	bne.n	801507a <_dtoa_r+0x94a>
 80150b4:	f01a 0f01 	tst.w	sl, #1
 80150b8:	d0df      	beq.n	801507a <_dtoa_r+0x94a>
 80150ba:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80150be:	d1d9      	bne.n	8015074 <_dtoa_r+0x944>
 80150c0:	2339      	movs	r3, #57	@ 0x39
 80150c2:	f88b 3000 	strb.w	r3, [fp]
 80150c6:	4633      	mov	r3, r6
 80150c8:	461e      	mov	r6, r3
 80150ca:	3b01      	subs	r3, #1
 80150cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80150d0:	2a39      	cmp	r2, #57	@ 0x39
 80150d2:	d052      	beq.n	801517a <_dtoa_r+0xa4a>
 80150d4:	3201      	adds	r2, #1
 80150d6:	701a      	strb	r2, [r3, #0]
 80150d8:	e531      	b.n	8014b3e <_dtoa_r+0x40e>
 80150da:	2a00      	cmp	r2, #0
 80150dc:	dd07      	ble.n	80150ee <_dtoa_r+0x9be>
 80150de:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80150e2:	d0ed      	beq.n	80150c0 <_dtoa_r+0x990>
 80150e4:	f10a 0301 	add.w	r3, sl, #1
 80150e8:	f88b 3000 	strb.w	r3, [fp]
 80150ec:	e527      	b.n	8014b3e <_dtoa_r+0x40e>
 80150ee:	9b04      	ldr	r3, [sp, #16]
 80150f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80150f2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80150f6:	4293      	cmp	r3, r2
 80150f8:	d029      	beq.n	801514e <_dtoa_r+0xa1e>
 80150fa:	9901      	ldr	r1, [sp, #4]
 80150fc:	2300      	movs	r3, #0
 80150fe:	220a      	movs	r2, #10
 8015100:	4648      	mov	r0, r9
 8015102:	f000 fd21 	bl	8015b48 <__multadd>
 8015106:	45a8      	cmp	r8, r5
 8015108:	9001      	str	r0, [sp, #4]
 801510a:	f04f 0300 	mov.w	r3, #0
 801510e:	f04f 020a 	mov.w	r2, #10
 8015112:	4641      	mov	r1, r8
 8015114:	4648      	mov	r0, r9
 8015116:	d107      	bne.n	8015128 <_dtoa_r+0x9f8>
 8015118:	f000 fd16 	bl	8015b48 <__multadd>
 801511c:	4680      	mov	r8, r0
 801511e:	4605      	mov	r5, r0
 8015120:	9b04      	ldr	r3, [sp, #16]
 8015122:	3301      	adds	r3, #1
 8015124:	9304      	str	r3, [sp, #16]
 8015126:	e776      	b.n	8015016 <_dtoa_r+0x8e6>
 8015128:	f000 fd0e 	bl	8015b48 <__multadd>
 801512c:	4629      	mov	r1, r5
 801512e:	4680      	mov	r8, r0
 8015130:	2300      	movs	r3, #0
 8015132:	220a      	movs	r2, #10
 8015134:	4648      	mov	r0, r9
 8015136:	f000 fd07 	bl	8015b48 <__multadd>
 801513a:	4605      	mov	r5, r0
 801513c:	e7f0      	b.n	8015120 <_dtoa_r+0x9f0>
 801513e:	f1bb 0f00 	cmp.w	fp, #0
 8015142:	bfcc      	ite	gt
 8015144:	465e      	movgt	r6, fp
 8015146:	2601      	movle	r6, #1
 8015148:	443e      	add	r6, r7
 801514a:	f04f 0800 	mov.w	r8, #0
 801514e:	9901      	ldr	r1, [sp, #4]
 8015150:	2201      	movs	r2, #1
 8015152:	4648      	mov	r0, r9
 8015154:	f000 fee6 	bl	8015f24 <__lshift>
 8015158:	4621      	mov	r1, r4
 801515a:	9001      	str	r0, [sp, #4]
 801515c:	f000 ff4e 	bl	8015ffc <__mcmp>
 8015160:	2800      	cmp	r0, #0
 8015162:	dcb0      	bgt.n	80150c6 <_dtoa_r+0x996>
 8015164:	d102      	bne.n	801516c <_dtoa_r+0xa3c>
 8015166:	f01a 0f01 	tst.w	sl, #1
 801516a:	d1ac      	bne.n	80150c6 <_dtoa_r+0x996>
 801516c:	4633      	mov	r3, r6
 801516e:	461e      	mov	r6, r3
 8015170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015174:	2a30      	cmp	r2, #48	@ 0x30
 8015176:	d0fa      	beq.n	801516e <_dtoa_r+0xa3e>
 8015178:	e4e1      	b.n	8014b3e <_dtoa_r+0x40e>
 801517a:	429f      	cmp	r7, r3
 801517c:	d1a4      	bne.n	80150c8 <_dtoa_r+0x998>
 801517e:	9b05      	ldr	r3, [sp, #20]
 8015180:	3301      	adds	r3, #1
 8015182:	9305      	str	r3, [sp, #20]
 8015184:	2331      	movs	r3, #49	@ 0x31
 8015186:	703b      	strb	r3, [r7, #0]
 8015188:	e4d9      	b.n	8014b3e <_dtoa_r+0x40e>
 801518a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801518c:	4f16      	ldr	r7, [pc, #88]	@ (80151e8 <_dtoa_r+0xab8>)
 801518e:	b11b      	cbz	r3, 8015198 <_dtoa_r+0xa68>
 8015190:	f107 0308 	add.w	r3, r7, #8
 8015194:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8015196:	6013      	str	r3, [r2, #0]
 8015198:	4638      	mov	r0, r7
 801519a:	b011      	add	sp, #68	@ 0x44
 801519c:	ecbd 8b02 	vpop	{d8}
 80151a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151a4:	9b07      	ldr	r3, [sp, #28]
 80151a6:	2b01      	cmp	r3, #1
 80151a8:	f77f ae2c 	ble.w	8014e04 <_dtoa_r+0x6d4>
 80151ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80151ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80151b0:	2001      	movs	r0, #1
 80151b2:	e64c      	b.n	8014e4e <_dtoa_r+0x71e>
 80151b4:	f1bb 0f00 	cmp.w	fp, #0
 80151b8:	f77f aed8 	ble.w	8014f6c <_dtoa_r+0x83c>
 80151bc:	463e      	mov	r6, r7
 80151be:	9801      	ldr	r0, [sp, #4]
 80151c0:	4621      	mov	r1, r4
 80151c2:	f7ff fa2b 	bl	801461c <quorem>
 80151c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80151ca:	f806 ab01 	strb.w	sl, [r6], #1
 80151ce:	1bf2      	subs	r2, r6, r7
 80151d0:	4593      	cmp	fp, r2
 80151d2:	ddb4      	ble.n	801513e <_dtoa_r+0xa0e>
 80151d4:	9901      	ldr	r1, [sp, #4]
 80151d6:	2300      	movs	r3, #0
 80151d8:	220a      	movs	r2, #10
 80151da:	4648      	mov	r0, r9
 80151dc:	f000 fcb4 	bl	8015b48 <__multadd>
 80151e0:	9001      	str	r0, [sp, #4]
 80151e2:	e7ec      	b.n	80151be <_dtoa_r+0xa8e>
 80151e4:	0801732e 	.word	0x0801732e
 80151e8:	080172b2 	.word	0x080172b2

080151ec <_free_r>:
 80151ec:	b538      	push	{r3, r4, r5, lr}
 80151ee:	4605      	mov	r5, r0
 80151f0:	2900      	cmp	r1, #0
 80151f2:	d041      	beq.n	8015278 <_free_r+0x8c>
 80151f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151f8:	1f0c      	subs	r4, r1, #4
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	bfb8      	it	lt
 80151fe:	18e4      	addlt	r4, r4, r3
 8015200:	f000 fc34 	bl	8015a6c <__malloc_lock>
 8015204:	4a1d      	ldr	r2, [pc, #116]	@ (801527c <_free_r+0x90>)
 8015206:	6813      	ldr	r3, [r2, #0]
 8015208:	b933      	cbnz	r3, 8015218 <_free_r+0x2c>
 801520a:	6063      	str	r3, [r4, #4]
 801520c:	6014      	str	r4, [r2, #0]
 801520e:	4628      	mov	r0, r5
 8015210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015214:	f000 bc30 	b.w	8015a78 <__malloc_unlock>
 8015218:	42a3      	cmp	r3, r4
 801521a:	d908      	bls.n	801522e <_free_r+0x42>
 801521c:	6820      	ldr	r0, [r4, #0]
 801521e:	1821      	adds	r1, r4, r0
 8015220:	428b      	cmp	r3, r1
 8015222:	bf01      	itttt	eq
 8015224:	6819      	ldreq	r1, [r3, #0]
 8015226:	685b      	ldreq	r3, [r3, #4]
 8015228:	1809      	addeq	r1, r1, r0
 801522a:	6021      	streq	r1, [r4, #0]
 801522c:	e7ed      	b.n	801520a <_free_r+0x1e>
 801522e:	461a      	mov	r2, r3
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	b10b      	cbz	r3, 8015238 <_free_r+0x4c>
 8015234:	42a3      	cmp	r3, r4
 8015236:	d9fa      	bls.n	801522e <_free_r+0x42>
 8015238:	6811      	ldr	r1, [r2, #0]
 801523a:	1850      	adds	r0, r2, r1
 801523c:	42a0      	cmp	r0, r4
 801523e:	d10b      	bne.n	8015258 <_free_r+0x6c>
 8015240:	6820      	ldr	r0, [r4, #0]
 8015242:	4401      	add	r1, r0
 8015244:	1850      	adds	r0, r2, r1
 8015246:	4283      	cmp	r3, r0
 8015248:	6011      	str	r1, [r2, #0]
 801524a:	d1e0      	bne.n	801520e <_free_r+0x22>
 801524c:	6818      	ldr	r0, [r3, #0]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	6053      	str	r3, [r2, #4]
 8015252:	4408      	add	r0, r1
 8015254:	6010      	str	r0, [r2, #0]
 8015256:	e7da      	b.n	801520e <_free_r+0x22>
 8015258:	d902      	bls.n	8015260 <_free_r+0x74>
 801525a:	230c      	movs	r3, #12
 801525c:	602b      	str	r3, [r5, #0]
 801525e:	e7d6      	b.n	801520e <_free_r+0x22>
 8015260:	6820      	ldr	r0, [r4, #0]
 8015262:	1821      	adds	r1, r4, r0
 8015264:	428b      	cmp	r3, r1
 8015266:	bf04      	itt	eq
 8015268:	6819      	ldreq	r1, [r3, #0]
 801526a:	685b      	ldreq	r3, [r3, #4]
 801526c:	6063      	str	r3, [r4, #4]
 801526e:	bf04      	itt	eq
 8015270:	1809      	addeq	r1, r1, r0
 8015272:	6021      	streq	r1, [r4, #0]
 8015274:	6054      	str	r4, [r2, #4]
 8015276:	e7ca      	b.n	801520e <_free_r+0x22>
 8015278:	bd38      	pop	{r3, r4, r5, pc}
 801527a:	bf00      	nop
 801527c:	2400750c 	.word	0x2400750c

08015280 <rshift>:
 8015280:	6903      	ldr	r3, [r0, #16]
 8015282:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015286:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801528a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801528e:	f100 0414 	add.w	r4, r0, #20
 8015292:	dd45      	ble.n	8015320 <rshift+0xa0>
 8015294:	f011 011f 	ands.w	r1, r1, #31
 8015298:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801529c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80152a0:	d10c      	bne.n	80152bc <rshift+0x3c>
 80152a2:	f100 0710 	add.w	r7, r0, #16
 80152a6:	4629      	mov	r1, r5
 80152a8:	42b1      	cmp	r1, r6
 80152aa:	d334      	bcc.n	8015316 <rshift+0x96>
 80152ac:	1a9b      	subs	r3, r3, r2
 80152ae:	009b      	lsls	r3, r3, #2
 80152b0:	1eea      	subs	r2, r5, #3
 80152b2:	4296      	cmp	r6, r2
 80152b4:	bf38      	it	cc
 80152b6:	2300      	movcc	r3, #0
 80152b8:	4423      	add	r3, r4
 80152ba:	e015      	b.n	80152e8 <rshift+0x68>
 80152bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80152c0:	f1c1 0820 	rsb	r8, r1, #32
 80152c4:	40cf      	lsrs	r7, r1
 80152c6:	f105 0e04 	add.w	lr, r5, #4
 80152ca:	46a1      	mov	r9, r4
 80152cc:	4576      	cmp	r6, lr
 80152ce:	46f4      	mov	ip, lr
 80152d0:	d815      	bhi.n	80152fe <rshift+0x7e>
 80152d2:	1a9a      	subs	r2, r3, r2
 80152d4:	0092      	lsls	r2, r2, #2
 80152d6:	3a04      	subs	r2, #4
 80152d8:	3501      	adds	r5, #1
 80152da:	42ae      	cmp	r6, r5
 80152dc:	bf38      	it	cc
 80152de:	2200      	movcc	r2, #0
 80152e0:	18a3      	adds	r3, r4, r2
 80152e2:	50a7      	str	r7, [r4, r2]
 80152e4:	b107      	cbz	r7, 80152e8 <rshift+0x68>
 80152e6:	3304      	adds	r3, #4
 80152e8:	1b1a      	subs	r2, r3, r4
 80152ea:	42a3      	cmp	r3, r4
 80152ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80152f0:	bf08      	it	eq
 80152f2:	2300      	moveq	r3, #0
 80152f4:	6102      	str	r2, [r0, #16]
 80152f6:	bf08      	it	eq
 80152f8:	6143      	streq	r3, [r0, #20]
 80152fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152fe:	f8dc c000 	ldr.w	ip, [ip]
 8015302:	fa0c fc08 	lsl.w	ip, ip, r8
 8015306:	ea4c 0707 	orr.w	r7, ip, r7
 801530a:	f849 7b04 	str.w	r7, [r9], #4
 801530e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015312:	40cf      	lsrs	r7, r1
 8015314:	e7da      	b.n	80152cc <rshift+0x4c>
 8015316:	f851 cb04 	ldr.w	ip, [r1], #4
 801531a:	f847 cf04 	str.w	ip, [r7, #4]!
 801531e:	e7c3      	b.n	80152a8 <rshift+0x28>
 8015320:	4623      	mov	r3, r4
 8015322:	e7e1      	b.n	80152e8 <rshift+0x68>

08015324 <__hexdig_fun>:
 8015324:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015328:	2b09      	cmp	r3, #9
 801532a:	d802      	bhi.n	8015332 <__hexdig_fun+0xe>
 801532c:	3820      	subs	r0, #32
 801532e:	b2c0      	uxtb	r0, r0
 8015330:	4770      	bx	lr
 8015332:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015336:	2b05      	cmp	r3, #5
 8015338:	d801      	bhi.n	801533e <__hexdig_fun+0x1a>
 801533a:	3847      	subs	r0, #71	@ 0x47
 801533c:	e7f7      	b.n	801532e <__hexdig_fun+0xa>
 801533e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015342:	2b05      	cmp	r3, #5
 8015344:	d801      	bhi.n	801534a <__hexdig_fun+0x26>
 8015346:	3827      	subs	r0, #39	@ 0x27
 8015348:	e7f1      	b.n	801532e <__hexdig_fun+0xa>
 801534a:	2000      	movs	r0, #0
 801534c:	4770      	bx	lr
	...

08015350 <__gethex>:
 8015350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015354:	b085      	sub	sp, #20
 8015356:	468a      	mov	sl, r1
 8015358:	9302      	str	r3, [sp, #8]
 801535a:	680b      	ldr	r3, [r1, #0]
 801535c:	9001      	str	r0, [sp, #4]
 801535e:	4690      	mov	r8, r2
 8015360:	1c9c      	adds	r4, r3, #2
 8015362:	46a1      	mov	r9, r4
 8015364:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015368:	2830      	cmp	r0, #48	@ 0x30
 801536a:	d0fa      	beq.n	8015362 <__gethex+0x12>
 801536c:	eba9 0303 	sub.w	r3, r9, r3
 8015370:	f1a3 0b02 	sub.w	fp, r3, #2
 8015374:	f7ff ffd6 	bl	8015324 <__hexdig_fun>
 8015378:	4605      	mov	r5, r0
 801537a:	2800      	cmp	r0, #0
 801537c:	d168      	bne.n	8015450 <__gethex+0x100>
 801537e:	49a0      	ldr	r1, [pc, #640]	@ (8015600 <__gethex+0x2b0>)
 8015380:	2201      	movs	r2, #1
 8015382:	4648      	mov	r0, r9
 8015384:	f7ff f804 	bl	8014390 <strncmp>
 8015388:	4607      	mov	r7, r0
 801538a:	2800      	cmp	r0, #0
 801538c:	d167      	bne.n	801545e <__gethex+0x10e>
 801538e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015392:	4626      	mov	r6, r4
 8015394:	f7ff ffc6 	bl	8015324 <__hexdig_fun>
 8015398:	2800      	cmp	r0, #0
 801539a:	d062      	beq.n	8015462 <__gethex+0x112>
 801539c:	4623      	mov	r3, r4
 801539e:	7818      	ldrb	r0, [r3, #0]
 80153a0:	2830      	cmp	r0, #48	@ 0x30
 80153a2:	4699      	mov	r9, r3
 80153a4:	f103 0301 	add.w	r3, r3, #1
 80153a8:	d0f9      	beq.n	801539e <__gethex+0x4e>
 80153aa:	f7ff ffbb 	bl	8015324 <__hexdig_fun>
 80153ae:	fab0 f580 	clz	r5, r0
 80153b2:	096d      	lsrs	r5, r5, #5
 80153b4:	f04f 0b01 	mov.w	fp, #1
 80153b8:	464a      	mov	r2, r9
 80153ba:	4616      	mov	r6, r2
 80153bc:	3201      	adds	r2, #1
 80153be:	7830      	ldrb	r0, [r6, #0]
 80153c0:	f7ff ffb0 	bl	8015324 <__hexdig_fun>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	d1f8      	bne.n	80153ba <__gethex+0x6a>
 80153c8:	498d      	ldr	r1, [pc, #564]	@ (8015600 <__gethex+0x2b0>)
 80153ca:	2201      	movs	r2, #1
 80153cc:	4630      	mov	r0, r6
 80153ce:	f7fe ffdf 	bl	8014390 <strncmp>
 80153d2:	2800      	cmp	r0, #0
 80153d4:	d13f      	bne.n	8015456 <__gethex+0x106>
 80153d6:	b944      	cbnz	r4, 80153ea <__gethex+0x9a>
 80153d8:	1c74      	adds	r4, r6, #1
 80153da:	4622      	mov	r2, r4
 80153dc:	4616      	mov	r6, r2
 80153de:	3201      	adds	r2, #1
 80153e0:	7830      	ldrb	r0, [r6, #0]
 80153e2:	f7ff ff9f 	bl	8015324 <__hexdig_fun>
 80153e6:	2800      	cmp	r0, #0
 80153e8:	d1f8      	bne.n	80153dc <__gethex+0x8c>
 80153ea:	1ba4      	subs	r4, r4, r6
 80153ec:	00a7      	lsls	r7, r4, #2
 80153ee:	7833      	ldrb	r3, [r6, #0]
 80153f0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80153f4:	2b50      	cmp	r3, #80	@ 0x50
 80153f6:	d13e      	bne.n	8015476 <__gethex+0x126>
 80153f8:	7873      	ldrb	r3, [r6, #1]
 80153fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80153fc:	d033      	beq.n	8015466 <__gethex+0x116>
 80153fe:	2b2d      	cmp	r3, #45	@ 0x2d
 8015400:	d034      	beq.n	801546c <__gethex+0x11c>
 8015402:	1c71      	adds	r1, r6, #1
 8015404:	2400      	movs	r4, #0
 8015406:	7808      	ldrb	r0, [r1, #0]
 8015408:	f7ff ff8c 	bl	8015324 <__hexdig_fun>
 801540c:	1e43      	subs	r3, r0, #1
 801540e:	b2db      	uxtb	r3, r3
 8015410:	2b18      	cmp	r3, #24
 8015412:	d830      	bhi.n	8015476 <__gethex+0x126>
 8015414:	f1a0 0210 	sub.w	r2, r0, #16
 8015418:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801541c:	f7ff ff82 	bl	8015324 <__hexdig_fun>
 8015420:	f100 3cff 	add.w	ip, r0, #4294967295
 8015424:	fa5f fc8c 	uxtb.w	ip, ip
 8015428:	f1bc 0f18 	cmp.w	ip, #24
 801542c:	f04f 030a 	mov.w	r3, #10
 8015430:	d91e      	bls.n	8015470 <__gethex+0x120>
 8015432:	b104      	cbz	r4, 8015436 <__gethex+0xe6>
 8015434:	4252      	negs	r2, r2
 8015436:	4417      	add	r7, r2
 8015438:	f8ca 1000 	str.w	r1, [sl]
 801543c:	b1ed      	cbz	r5, 801547a <__gethex+0x12a>
 801543e:	f1bb 0f00 	cmp.w	fp, #0
 8015442:	bf0c      	ite	eq
 8015444:	2506      	moveq	r5, #6
 8015446:	2500      	movne	r5, #0
 8015448:	4628      	mov	r0, r5
 801544a:	b005      	add	sp, #20
 801544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015450:	2500      	movs	r5, #0
 8015452:	462c      	mov	r4, r5
 8015454:	e7b0      	b.n	80153b8 <__gethex+0x68>
 8015456:	2c00      	cmp	r4, #0
 8015458:	d1c7      	bne.n	80153ea <__gethex+0x9a>
 801545a:	4627      	mov	r7, r4
 801545c:	e7c7      	b.n	80153ee <__gethex+0x9e>
 801545e:	464e      	mov	r6, r9
 8015460:	462f      	mov	r7, r5
 8015462:	2501      	movs	r5, #1
 8015464:	e7c3      	b.n	80153ee <__gethex+0x9e>
 8015466:	2400      	movs	r4, #0
 8015468:	1cb1      	adds	r1, r6, #2
 801546a:	e7cc      	b.n	8015406 <__gethex+0xb6>
 801546c:	2401      	movs	r4, #1
 801546e:	e7fb      	b.n	8015468 <__gethex+0x118>
 8015470:	fb03 0002 	mla	r0, r3, r2, r0
 8015474:	e7ce      	b.n	8015414 <__gethex+0xc4>
 8015476:	4631      	mov	r1, r6
 8015478:	e7de      	b.n	8015438 <__gethex+0xe8>
 801547a:	eba6 0309 	sub.w	r3, r6, r9
 801547e:	3b01      	subs	r3, #1
 8015480:	4629      	mov	r1, r5
 8015482:	2b07      	cmp	r3, #7
 8015484:	dc0a      	bgt.n	801549c <__gethex+0x14c>
 8015486:	9801      	ldr	r0, [sp, #4]
 8015488:	f000 fafc 	bl	8015a84 <_Balloc>
 801548c:	4604      	mov	r4, r0
 801548e:	b940      	cbnz	r0, 80154a2 <__gethex+0x152>
 8015490:	4b5c      	ldr	r3, [pc, #368]	@ (8015604 <__gethex+0x2b4>)
 8015492:	4602      	mov	r2, r0
 8015494:	21e4      	movs	r1, #228	@ 0xe4
 8015496:	485c      	ldr	r0, [pc, #368]	@ (8015608 <__gethex+0x2b8>)
 8015498:	f001 fa3a 	bl	8016910 <__assert_func>
 801549c:	3101      	adds	r1, #1
 801549e:	105b      	asrs	r3, r3, #1
 80154a0:	e7ef      	b.n	8015482 <__gethex+0x132>
 80154a2:	f100 0a14 	add.w	sl, r0, #20
 80154a6:	2300      	movs	r3, #0
 80154a8:	4655      	mov	r5, sl
 80154aa:	469b      	mov	fp, r3
 80154ac:	45b1      	cmp	r9, r6
 80154ae:	d337      	bcc.n	8015520 <__gethex+0x1d0>
 80154b0:	f845 bb04 	str.w	fp, [r5], #4
 80154b4:	eba5 050a 	sub.w	r5, r5, sl
 80154b8:	10ad      	asrs	r5, r5, #2
 80154ba:	6125      	str	r5, [r4, #16]
 80154bc:	4658      	mov	r0, fp
 80154be:	f000 fbd3 	bl	8015c68 <__hi0bits>
 80154c2:	016d      	lsls	r5, r5, #5
 80154c4:	f8d8 6000 	ldr.w	r6, [r8]
 80154c8:	1a2d      	subs	r5, r5, r0
 80154ca:	42b5      	cmp	r5, r6
 80154cc:	dd54      	ble.n	8015578 <__gethex+0x228>
 80154ce:	1bad      	subs	r5, r5, r6
 80154d0:	4629      	mov	r1, r5
 80154d2:	4620      	mov	r0, r4
 80154d4:	f000 ff5c 	bl	8016390 <__any_on>
 80154d8:	4681      	mov	r9, r0
 80154da:	b178      	cbz	r0, 80154fc <__gethex+0x1ac>
 80154dc:	1e6b      	subs	r3, r5, #1
 80154de:	1159      	asrs	r1, r3, #5
 80154e0:	f003 021f 	and.w	r2, r3, #31
 80154e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80154e8:	f04f 0901 	mov.w	r9, #1
 80154ec:	fa09 f202 	lsl.w	r2, r9, r2
 80154f0:	420a      	tst	r2, r1
 80154f2:	d003      	beq.n	80154fc <__gethex+0x1ac>
 80154f4:	454b      	cmp	r3, r9
 80154f6:	dc36      	bgt.n	8015566 <__gethex+0x216>
 80154f8:	f04f 0902 	mov.w	r9, #2
 80154fc:	4629      	mov	r1, r5
 80154fe:	4620      	mov	r0, r4
 8015500:	f7ff febe 	bl	8015280 <rshift>
 8015504:	442f      	add	r7, r5
 8015506:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801550a:	42bb      	cmp	r3, r7
 801550c:	da42      	bge.n	8015594 <__gethex+0x244>
 801550e:	9801      	ldr	r0, [sp, #4]
 8015510:	4621      	mov	r1, r4
 8015512:	f000 faf7 	bl	8015b04 <_Bfree>
 8015516:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015518:	2300      	movs	r3, #0
 801551a:	6013      	str	r3, [r2, #0]
 801551c:	25a3      	movs	r5, #163	@ 0xa3
 801551e:	e793      	b.n	8015448 <__gethex+0xf8>
 8015520:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015524:	2a2e      	cmp	r2, #46	@ 0x2e
 8015526:	d012      	beq.n	801554e <__gethex+0x1fe>
 8015528:	2b20      	cmp	r3, #32
 801552a:	d104      	bne.n	8015536 <__gethex+0x1e6>
 801552c:	f845 bb04 	str.w	fp, [r5], #4
 8015530:	f04f 0b00 	mov.w	fp, #0
 8015534:	465b      	mov	r3, fp
 8015536:	7830      	ldrb	r0, [r6, #0]
 8015538:	9303      	str	r3, [sp, #12]
 801553a:	f7ff fef3 	bl	8015324 <__hexdig_fun>
 801553e:	9b03      	ldr	r3, [sp, #12]
 8015540:	f000 000f 	and.w	r0, r0, #15
 8015544:	4098      	lsls	r0, r3
 8015546:	ea4b 0b00 	orr.w	fp, fp, r0
 801554a:	3304      	adds	r3, #4
 801554c:	e7ae      	b.n	80154ac <__gethex+0x15c>
 801554e:	45b1      	cmp	r9, r6
 8015550:	d8ea      	bhi.n	8015528 <__gethex+0x1d8>
 8015552:	492b      	ldr	r1, [pc, #172]	@ (8015600 <__gethex+0x2b0>)
 8015554:	9303      	str	r3, [sp, #12]
 8015556:	2201      	movs	r2, #1
 8015558:	4630      	mov	r0, r6
 801555a:	f7fe ff19 	bl	8014390 <strncmp>
 801555e:	9b03      	ldr	r3, [sp, #12]
 8015560:	2800      	cmp	r0, #0
 8015562:	d1e1      	bne.n	8015528 <__gethex+0x1d8>
 8015564:	e7a2      	b.n	80154ac <__gethex+0x15c>
 8015566:	1ea9      	subs	r1, r5, #2
 8015568:	4620      	mov	r0, r4
 801556a:	f000 ff11 	bl	8016390 <__any_on>
 801556e:	2800      	cmp	r0, #0
 8015570:	d0c2      	beq.n	80154f8 <__gethex+0x1a8>
 8015572:	f04f 0903 	mov.w	r9, #3
 8015576:	e7c1      	b.n	80154fc <__gethex+0x1ac>
 8015578:	da09      	bge.n	801558e <__gethex+0x23e>
 801557a:	1b75      	subs	r5, r6, r5
 801557c:	4621      	mov	r1, r4
 801557e:	9801      	ldr	r0, [sp, #4]
 8015580:	462a      	mov	r2, r5
 8015582:	f000 fccf 	bl	8015f24 <__lshift>
 8015586:	1b7f      	subs	r7, r7, r5
 8015588:	4604      	mov	r4, r0
 801558a:	f100 0a14 	add.w	sl, r0, #20
 801558e:	f04f 0900 	mov.w	r9, #0
 8015592:	e7b8      	b.n	8015506 <__gethex+0x1b6>
 8015594:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015598:	42bd      	cmp	r5, r7
 801559a:	dd6f      	ble.n	801567c <__gethex+0x32c>
 801559c:	1bed      	subs	r5, r5, r7
 801559e:	42ae      	cmp	r6, r5
 80155a0:	dc34      	bgt.n	801560c <__gethex+0x2bc>
 80155a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80155a6:	2b02      	cmp	r3, #2
 80155a8:	d022      	beq.n	80155f0 <__gethex+0x2a0>
 80155aa:	2b03      	cmp	r3, #3
 80155ac:	d024      	beq.n	80155f8 <__gethex+0x2a8>
 80155ae:	2b01      	cmp	r3, #1
 80155b0:	d115      	bne.n	80155de <__gethex+0x28e>
 80155b2:	42ae      	cmp	r6, r5
 80155b4:	d113      	bne.n	80155de <__gethex+0x28e>
 80155b6:	2e01      	cmp	r6, #1
 80155b8:	d10b      	bne.n	80155d2 <__gethex+0x282>
 80155ba:	9a02      	ldr	r2, [sp, #8]
 80155bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80155c0:	6013      	str	r3, [r2, #0]
 80155c2:	2301      	movs	r3, #1
 80155c4:	6123      	str	r3, [r4, #16]
 80155c6:	f8ca 3000 	str.w	r3, [sl]
 80155ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155cc:	2562      	movs	r5, #98	@ 0x62
 80155ce:	601c      	str	r4, [r3, #0]
 80155d0:	e73a      	b.n	8015448 <__gethex+0xf8>
 80155d2:	1e71      	subs	r1, r6, #1
 80155d4:	4620      	mov	r0, r4
 80155d6:	f000 fedb 	bl	8016390 <__any_on>
 80155da:	2800      	cmp	r0, #0
 80155dc:	d1ed      	bne.n	80155ba <__gethex+0x26a>
 80155de:	9801      	ldr	r0, [sp, #4]
 80155e0:	4621      	mov	r1, r4
 80155e2:	f000 fa8f 	bl	8015b04 <_Bfree>
 80155e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80155e8:	2300      	movs	r3, #0
 80155ea:	6013      	str	r3, [r2, #0]
 80155ec:	2550      	movs	r5, #80	@ 0x50
 80155ee:	e72b      	b.n	8015448 <__gethex+0xf8>
 80155f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d1f3      	bne.n	80155de <__gethex+0x28e>
 80155f6:	e7e0      	b.n	80155ba <__gethex+0x26a>
 80155f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d1dd      	bne.n	80155ba <__gethex+0x26a>
 80155fe:	e7ee      	b.n	80155de <__gethex+0x28e>
 8015600:	08017274 	.word	0x08017274
 8015604:	0801732e 	.word	0x0801732e
 8015608:	0801733f 	.word	0x0801733f
 801560c:	1e6f      	subs	r7, r5, #1
 801560e:	f1b9 0f00 	cmp.w	r9, #0
 8015612:	d130      	bne.n	8015676 <__gethex+0x326>
 8015614:	b127      	cbz	r7, 8015620 <__gethex+0x2d0>
 8015616:	4639      	mov	r1, r7
 8015618:	4620      	mov	r0, r4
 801561a:	f000 feb9 	bl	8016390 <__any_on>
 801561e:	4681      	mov	r9, r0
 8015620:	117a      	asrs	r2, r7, #5
 8015622:	2301      	movs	r3, #1
 8015624:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015628:	f007 071f 	and.w	r7, r7, #31
 801562c:	40bb      	lsls	r3, r7
 801562e:	4213      	tst	r3, r2
 8015630:	4629      	mov	r1, r5
 8015632:	4620      	mov	r0, r4
 8015634:	bf18      	it	ne
 8015636:	f049 0902 	orrne.w	r9, r9, #2
 801563a:	f7ff fe21 	bl	8015280 <rshift>
 801563e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015642:	1b76      	subs	r6, r6, r5
 8015644:	2502      	movs	r5, #2
 8015646:	f1b9 0f00 	cmp.w	r9, #0
 801564a:	d047      	beq.n	80156dc <__gethex+0x38c>
 801564c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015650:	2b02      	cmp	r3, #2
 8015652:	d015      	beq.n	8015680 <__gethex+0x330>
 8015654:	2b03      	cmp	r3, #3
 8015656:	d017      	beq.n	8015688 <__gethex+0x338>
 8015658:	2b01      	cmp	r3, #1
 801565a:	d109      	bne.n	8015670 <__gethex+0x320>
 801565c:	f019 0f02 	tst.w	r9, #2
 8015660:	d006      	beq.n	8015670 <__gethex+0x320>
 8015662:	f8da 3000 	ldr.w	r3, [sl]
 8015666:	ea49 0903 	orr.w	r9, r9, r3
 801566a:	f019 0f01 	tst.w	r9, #1
 801566e:	d10e      	bne.n	801568e <__gethex+0x33e>
 8015670:	f045 0510 	orr.w	r5, r5, #16
 8015674:	e032      	b.n	80156dc <__gethex+0x38c>
 8015676:	f04f 0901 	mov.w	r9, #1
 801567a:	e7d1      	b.n	8015620 <__gethex+0x2d0>
 801567c:	2501      	movs	r5, #1
 801567e:	e7e2      	b.n	8015646 <__gethex+0x2f6>
 8015680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015682:	f1c3 0301 	rsb	r3, r3, #1
 8015686:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801568a:	2b00      	cmp	r3, #0
 801568c:	d0f0      	beq.n	8015670 <__gethex+0x320>
 801568e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015692:	f104 0314 	add.w	r3, r4, #20
 8015696:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801569a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801569e:	f04f 0c00 	mov.w	ip, #0
 80156a2:	4618      	mov	r0, r3
 80156a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80156a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80156ac:	d01b      	beq.n	80156e6 <__gethex+0x396>
 80156ae:	3201      	adds	r2, #1
 80156b0:	6002      	str	r2, [r0, #0]
 80156b2:	2d02      	cmp	r5, #2
 80156b4:	f104 0314 	add.w	r3, r4, #20
 80156b8:	d13c      	bne.n	8015734 <__gethex+0x3e4>
 80156ba:	f8d8 2000 	ldr.w	r2, [r8]
 80156be:	3a01      	subs	r2, #1
 80156c0:	42b2      	cmp	r2, r6
 80156c2:	d109      	bne.n	80156d8 <__gethex+0x388>
 80156c4:	1171      	asrs	r1, r6, #5
 80156c6:	2201      	movs	r2, #1
 80156c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80156cc:	f006 061f 	and.w	r6, r6, #31
 80156d0:	fa02 f606 	lsl.w	r6, r2, r6
 80156d4:	421e      	tst	r6, r3
 80156d6:	d13a      	bne.n	801574e <__gethex+0x3fe>
 80156d8:	f045 0520 	orr.w	r5, r5, #32
 80156dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80156de:	601c      	str	r4, [r3, #0]
 80156e0:	9b02      	ldr	r3, [sp, #8]
 80156e2:	601f      	str	r7, [r3, #0]
 80156e4:	e6b0      	b.n	8015448 <__gethex+0xf8>
 80156e6:	4299      	cmp	r1, r3
 80156e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80156ec:	d8d9      	bhi.n	80156a2 <__gethex+0x352>
 80156ee:	68a3      	ldr	r3, [r4, #8]
 80156f0:	459b      	cmp	fp, r3
 80156f2:	db17      	blt.n	8015724 <__gethex+0x3d4>
 80156f4:	6861      	ldr	r1, [r4, #4]
 80156f6:	9801      	ldr	r0, [sp, #4]
 80156f8:	3101      	adds	r1, #1
 80156fa:	f000 f9c3 	bl	8015a84 <_Balloc>
 80156fe:	4681      	mov	r9, r0
 8015700:	b918      	cbnz	r0, 801570a <__gethex+0x3ba>
 8015702:	4b1a      	ldr	r3, [pc, #104]	@ (801576c <__gethex+0x41c>)
 8015704:	4602      	mov	r2, r0
 8015706:	2184      	movs	r1, #132	@ 0x84
 8015708:	e6c5      	b.n	8015496 <__gethex+0x146>
 801570a:	6922      	ldr	r2, [r4, #16]
 801570c:	3202      	adds	r2, #2
 801570e:	f104 010c 	add.w	r1, r4, #12
 8015712:	0092      	lsls	r2, r2, #2
 8015714:	300c      	adds	r0, #12
 8015716:	f7fe ff64 	bl	80145e2 <memcpy>
 801571a:	4621      	mov	r1, r4
 801571c:	9801      	ldr	r0, [sp, #4]
 801571e:	f000 f9f1 	bl	8015b04 <_Bfree>
 8015722:	464c      	mov	r4, r9
 8015724:	6923      	ldr	r3, [r4, #16]
 8015726:	1c5a      	adds	r2, r3, #1
 8015728:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801572c:	6122      	str	r2, [r4, #16]
 801572e:	2201      	movs	r2, #1
 8015730:	615a      	str	r2, [r3, #20]
 8015732:	e7be      	b.n	80156b2 <__gethex+0x362>
 8015734:	6922      	ldr	r2, [r4, #16]
 8015736:	455a      	cmp	r2, fp
 8015738:	dd0b      	ble.n	8015752 <__gethex+0x402>
 801573a:	2101      	movs	r1, #1
 801573c:	4620      	mov	r0, r4
 801573e:	f7ff fd9f 	bl	8015280 <rshift>
 8015742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015746:	3701      	adds	r7, #1
 8015748:	42bb      	cmp	r3, r7
 801574a:	f6ff aee0 	blt.w	801550e <__gethex+0x1be>
 801574e:	2501      	movs	r5, #1
 8015750:	e7c2      	b.n	80156d8 <__gethex+0x388>
 8015752:	f016 061f 	ands.w	r6, r6, #31
 8015756:	d0fa      	beq.n	801574e <__gethex+0x3fe>
 8015758:	4453      	add	r3, sl
 801575a:	f1c6 0620 	rsb	r6, r6, #32
 801575e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015762:	f000 fa81 	bl	8015c68 <__hi0bits>
 8015766:	42b0      	cmp	r0, r6
 8015768:	dbe7      	blt.n	801573a <__gethex+0x3ea>
 801576a:	e7f0      	b.n	801574e <__gethex+0x3fe>
 801576c:	0801732e 	.word	0x0801732e

08015770 <L_shift>:
 8015770:	f1c2 0208 	rsb	r2, r2, #8
 8015774:	0092      	lsls	r2, r2, #2
 8015776:	b570      	push	{r4, r5, r6, lr}
 8015778:	f1c2 0620 	rsb	r6, r2, #32
 801577c:	6843      	ldr	r3, [r0, #4]
 801577e:	6804      	ldr	r4, [r0, #0]
 8015780:	fa03 f506 	lsl.w	r5, r3, r6
 8015784:	432c      	orrs	r4, r5
 8015786:	40d3      	lsrs	r3, r2
 8015788:	6004      	str	r4, [r0, #0]
 801578a:	f840 3f04 	str.w	r3, [r0, #4]!
 801578e:	4288      	cmp	r0, r1
 8015790:	d3f4      	bcc.n	801577c <L_shift+0xc>
 8015792:	bd70      	pop	{r4, r5, r6, pc}

08015794 <__match>:
 8015794:	b530      	push	{r4, r5, lr}
 8015796:	6803      	ldr	r3, [r0, #0]
 8015798:	3301      	adds	r3, #1
 801579a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801579e:	b914      	cbnz	r4, 80157a6 <__match+0x12>
 80157a0:	6003      	str	r3, [r0, #0]
 80157a2:	2001      	movs	r0, #1
 80157a4:	bd30      	pop	{r4, r5, pc}
 80157a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157aa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80157ae:	2d19      	cmp	r5, #25
 80157b0:	bf98      	it	ls
 80157b2:	3220      	addls	r2, #32
 80157b4:	42a2      	cmp	r2, r4
 80157b6:	d0f0      	beq.n	801579a <__match+0x6>
 80157b8:	2000      	movs	r0, #0
 80157ba:	e7f3      	b.n	80157a4 <__match+0x10>

080157bc <__hexnan>:
 80157bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157c0:	680b      	ldr	r3, [r1, #0]
 80157c2:	6801      	ldr	r1, [r0, #0]
 80157c4:	115e      	asrs	r6, r3, #5
 80157c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80157ca:	f013 031f 	ands.w	r3, r3, #31
 80157ce:	b087      	sub	sp, #28
 80157d0:	bf18      	it	ne
 80157d2:	3604      	addne	r6, #4
 80157d4:	2500      	movs	r5, #0
 80157d6:	1f37      	subs	r7, r6, #4
 80157d8:	4682      	mov	sl, r0
 80157da:	4690      	mov	r8, r2
 80157dc:	9301      	str	r3, [sp, #4]
 80157de:	f846 5c04 	str.w	r5, [r6, #-4]
 80157e2:	46b9      	mov	r9, r7
 80157e4:	463c      	mov	r4, r7
 80157e6:	9502      	str	r5, [sp, #8]
 80157e8:	46ab      	mov	fp, r5
 80157ea:	784a      	ldrb	r2, [r1, #1]
 80157ec:	1c4b      	adds	r3, r1, #1
 80157ee:	9303      	str	r3, [sp, #12]
 80157f0:	b342      	cbz	r2, 8015844 <__hexnan+0x88>
 80157f2:	4610      	mov	r0, r2
 80157f4:	9105      	str	r1, [sp, #20]
 80157f6:	9204      	str	r2, [sp, #16]
 80157f8:	f7ff fd94 	bl	8015324 <__hexdig_fun>
 80157fc:	2800      	cmp	r0, #0
 80157fe:	d151      	bne.n	80158a4 <__hexnan+0xe8>
 8015800:	9a04      	ldr	r2, [sp, #16]
 8015802:	9905      	ldr	r1, [sp, #20]
 8015804:	2a20      	cmp	r2, #32
 8015806:	d818      	bhi.n	801583a <__hexnan+0x7e>
 8015808:	9b02      	ldr	r3, [sp, #8]
 801580a:	459b      	cmp	fp, r3
 801580c:	dd13      	ble.n	8015836 <__hexnan+0x7a>
 801580e:	454c      	cmp	r4, r9
 8015810:	d206      	bcs.n	8015820 <__hexnan+0x64>
 8015812:	2d07      	cmp	r5, #7
 8015814:	dc04      	bgt.n	8015820 <__hexnan+0x64>
 8015816:	462a      	mov	r2, r5
 8015818:	4649      	mov	r1, r9
 801581a:	4620      	mov	r0, r4
 801581c:	f7ff ffa8 	bl	8015770 <L_shift>
 8015820:	4544      	cmp	r4, r8
 8015822:	d952      	bls.n	80158ca <__hexnan+0x10e>
 8015824:	2300      	movs	r3, #0
 8015826:	f1a4 0904 	sub.w	r9, r4, #4
 801582a:	f844 3c04 	str.w	r3, [r4, #-4]
 801582e:	f8cd b008 	str.w	fp, [sp, #8]
 8015832:	464c      	mov	r4, r9
 8015834:	461d      	mov	r5, r3
 8015836:	9903      	ldr	r1, [sp, #12]
 8015838:	e7d7      	b.n	80157ea <__hexnan+0x2e>
 801583a:	2a29      	cmp	r2, #41	@ 0x29
 801583c:	d157      	bne.n	80158ee <__hexnan+0x132>
 801583e:	3102      	adds	r1, #2
 8015840:	f8ca 1000 	str.w	r1, [sl]
 8015844:	f1bb 0f00 	cmp.w	fp, #0
 8015848:	d051      	beq.n	80158ee <__hexnan+0x132>
 801584a:	454c      	cmp	r4, r9
 801584c:	d206      	bcs.n	801585c <__hexnan+0xa0>
 801584e:	2d07      	cmp	r5, #7
 8015850:	dc04      	bgt.n	801585c <__hexnan+0xa0>
 8015852:	462a      	mov	r2, r5
 8015854:	4649      	mov	r1, r9
 8015856:	4620      	mov	r0, r4
 8015858:	f7ff ff8a 	bl	8015770 <L_shift>
 801585c:	4544      	cmp	r4, r8
 801585e:	d936      	bls.n	80158ce <__hexnan+0x112>
 8015860:	f1a8 0204 	sub.w	r2, r8, #4
 8015864:	4623      	mov	r3, r4
 8015866:	f853 1b04 	ldr.w	r1, [r3], #4
 801586a:	f842 1f04 	str.w	r1, [r2, #4]!
 801586e:	429f      	cmp	r7, r3
 8015870:	d2f9      	bcs.n	8015866 <__hexnan+0xaa>
 8015872:	1b3b      	subs	r3, r7, r4
 8015874:	f023 0303 	bic.w	r3, r3, #3
 8015878:	3304      	adds	r3, #4
 801587a:	3401      	adds	r4, #1
 801587c:	3e03      	subs	r6, #3
 801587e:	42b4      	cmp	r4, r6
 8015880:	bf88      	it	hi
 8015882:	2304      	movhi	r3, #4
 8015884:	4443      	add	r3, r8
 8015886:	2200      	movs	r2, #0
 8015888:	f843 2b04 	str.w	r2, [r3], #4
 801588c:	429f      	cmp	r7, r3
 801588e:	d2fb      	bcs.n	8015888 <__hexnan+0xcc>
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	b91b      	cbnz	r3, 801589c <__hexnan+0xe0>
 8015894:	4547      	cmp	r7, r8
 8015896:	d128      	bne.n	80158ea <__hexnan+0x12e>
 8015898:	2301      	movs	r3, #1
 801589a:	603b      	str	r3, [r7, #0]
 801589c:	2005      	movs	r0, #5
 801589e:	b007      	add	sp, #28
 80158a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158a4:	3501      	adds	r5, #1
 80158a6:	2d08      	cmp	r5, #8
 80158a8:	f10b 0b01 	add.w	fp, fp, #1
 80158ac:	dd06      	ble.n	80158bc <__hexnan+0x100>
 80158ae:	4544      	cmp	r4, r8
 80158b0:	d9c1      	bls.n	8015836 <__hexnan+0x7a>
 80158b2:	2300      	movs	r3, #0
 80158b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80158b8:	2501      	movs	r5, #1
 80158ba:	3c04      	subs	r4, #4
 80158bc:	6822      	ldr	r2, [r4, #0]
 80158be:	f000 000f 	and.w	r0, r0, #15
 80158c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80158c6:	6020      	str	r0, [r4, #0]
 80158c8:	e7b5      	b.n	8015836 <__hexnan+0x7a>
 80158ca:	2508      	movs	r5, #8
 80158cc:	e7b3      	b.n	8015836 <__hexnan+0x7a>
 80158ce:	9b01      	ldr	r3, [sp, #4]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d0dd      	beq.n	8015890 <__hexnan+0xd4>
 80158d4:	f1c3 0320 	rsb	r3, r3, #32
 80158d8:	f04f 32ff 	mov.w	r2, #4294967295
 80158dc:	40da      	lsrs	r2, r3
 80158de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80158e2:	4013      	ands	r3, r2
 80158e4:	f846 3c04 	str.w	r3, [r6, #-4]
 80158e8:	e7d2      	b.n	8015890 <__hexnan+0xd4>
 80158ea:	3f04      	subs	r7, #4
 80158ec:	e7d0      	b.n	8015890 <__hexnan+0xd4>
 80158ee:	2004      	movs	r0, #4
 80158f0:	e7d5      	b.n	801589e <__hexnan+0xe2>
	...

080158f4 <malloc>:
 80158f4:	4b02      	ldr	r3, [pc, #8]	@ (8015900 <malloc+0xc>)
 80158f6:	4601      	mov	r1, r0
 80158f8:	6818      	ldr	r0, [r3, #0]
 80158fa:	f000 b825 	b.w	8015948 <_malloc_r>
 80158fe:	bf00      	nop
 8015900:	240001f8 	.word	0x240001f8

08015904 <sbrk_aligned>:
 8015904:	b570      	push	{r4, r5, r6, lr}
 8015906:	4e0f      	ldr	r6, [pc, #60]	@ (8015944 <sbrk_aligned+0x40>)
 8015908:	460c      	mov	r4, r1
 801590a:	6831      	ldr	r1, [r6, #0]
 801590c:	4605      	mov	r5, r0
 801590e:	b911      	cbnz	r1, 8015916 <sbrk_aligned+0x12>
 8015910:	f000 ffee 	bl	80168f0 <_sbrk_r>
 8015914:	6030      	str	r0, [r6, #0]
 8015916:	4621      	mov	r1, r4
 8015918:	4628      	mov	r0, r5
 801591a:	f000 ffe9 	bl	80168f0 <_sbrk_r>
 801591e:	1c43      	adds	r3, r0, #1
 8015920:	d103      	bne.n	801592a <sbrk_aligned+0x26>
 8015922:	f04f 34ff 	mov.w	r4, #4294967295
 8015926:	4620      	mov	r0, r4
 8015928:	bd70      	pop	{r4, r5, r6, pc}
 801592a:	1cc4      	adds	r4, r0, #3
 801592c:	f024 0403 	bic.w	r4, r4, #3
 8015930:	42a0      	cmp	r0, r4
 8015932:	d0f8      	beq.n	8015926 <sbrk_aligned+0x22>
 8015934:	1a21      	subs	r1, r4, r0
 8015936:	4628      	mov	r0, r5
 8015938:	f000 ffda 	bl	80168f0 <_sbrk_r>
 801593c:	3001      	adds	r0, #1
 801593e:	d1f2      	bne.n	8015926 <sbrk_aligned+0x22>
 8015940:	e7ef      	b.n	8015922 <sbrk_aligned+0x1e>
 8015942:	bf00      	nop
 8015944:	24007508 	.word	0x24007508

08015948 <_malloc_r>:
 8015948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801594c:	1ccd      	adds	r5, r1, #3
 801594e:	f025 0503 	bic.w	r5, r5, #3
 8015952:	3508      	adds	r5, #8
 8015954:	2d0c      	cmp	r5, #12
 8015956:	bf38      	it	cc
 8015958:	250c      	movcc	r5, #12
 801595a:	2d00      	cmp	r5, #0
 801595c:	4606      	mov	r6, r0
 801595e:	db01      	blt.n	8015964 <_malloc_r+0x1c>
 8015960:	42a9      	cmp	r1, r5
 8015962:	d904      	bls.n	801596e <_malloc_r+0x26>
 8015964:	230c      	movs	r3, #12
 8015966:	6033      	str	r3, [r6, #0]
 8015968:	2000      	movs	r0, #0
 801596a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801596e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015a44 <_malloc_r+0xfc>
 8015972:	f000 f87b 	bl	8015a6c <__malloc_lock>
 8015976:	f8d8 3000 	ldr.w	r3, [r8]
 801597a:	461c      	mov	r4, r3
 801597c:	bb44      	cbnz	r4, 80159d0 <_malloc_r+0x88>
 801597e:	4629      	mov	r1, r5
 8015980:	4630      	mov	r0, r6
 8015982:	f7ff ffbf 	bl	8015904 <sbrk_aligned>
 8015986:	1c43      	adds	r3, r0, #1
 8015988:	4604      	mov	r4, r0
 801598a:	d158      	bne.n	8015a3e <_malloc_r+0xf6>
 801598c:	f8d8 4000 	ldr.w	r4, [r8]
 8015990:	4627      	mov	r7, r4
 8015992:	2f00      	cmp	r7, #0
 8015994:	d143      	bne.n	8015a1e <_malloc_r+0xd6>
 8015996:	2c00      	cmp	r4, #0
 8015998:	d04b      	beq.n	8015a32 <_malloc_r+0xea>
 801599a:	6823      	ldr	r3, [r4, #0]
 801599c:	4639      	mov	r1, r7
 801599e:	4630      	mov	r0, r6
 80159a0:	eb04 0903 	add.w	r9, r4, r3
 80159a4:	f000 ffa4 	bl	80168f0 <_sbrk_r>
 80159a8:	4581      	cmp	r9, r0
 80159aa:	d142      	bne.n	8015a32 <_malloc_r+0xea>
 80159ac:	6821      	ldr	r1, [r4, #0]
 80159ae:	1a6d      	subs	r5, r5, r1
 80159b0:	4629      	mov	r1, r5
 80159b2:	4630      	mov	r0, r6
 80159b4:	f7ff ffa6 	bl	8015904 <sbrk_aligned>
 80159b8:	3001      	adds	r0, #1
 80159ba:	d03a      	beq.n	8015a32 <_malloc_r+0xea>
 80159bc:	6823      	ldr	r3, [r4, #0]
 80159be:	442b      	add	r3, r5
 80159c0:	6023      	str	r3, [r4, #0]
 80159c2:	f8d8 3000 	ldr.w	r3, [r8]
 80159c6:	685a      	ldr	r2, [r3, #4]
 80159c8:	bb62      	cbnz	r2, 8015a24 <_malloc_r+0xdc>
 80159ca:	f8c8 7000 	str.w	r7, [r8]
 80159ce:	e00f      	b.n	80159f0 <_malloc_r+0xa8>
 80159d0:	6822      	ldr	r2, [r4, #0]
 80159d2:	1b52      	subs	r2, r2, r5
 80159d4:	d420      	bmi.n	8015a18 <_malloc_r+0xd0>
 80159d6:	2a0b      	cmp	r2, #11
 80159d8:	d917      	bls.n	8015a0a <_malloc_r+0xc2>
 80159da:	1961      	adds	r1, r4, r5
 80159dc:	42a3      	cmp	r3, r4
 80159de:	6025      	str	r5, [r4, #0]
 80159e0:	bf18      	it	ne
 80159e2:	6059      	strne	r1, [r3, #4]
 80159e4:	6863      	ldr	r3, [r4, #4]
 80159e6:	bf08      	it	eq
 80159e8:	f8c8 1000 	streq.w	r1, [r8]
 80159ec:	5162      	str	r2, [r4, r5]
 80159ee:	604b      	str	r3, [r1, #4]
 80159f0:	4630      	mov	r0, r6
 80159f2:	f000 f841 	bl	8015a78 <__malloc_unlock>
 80159f6:	f104 000b 	add.w	r0, r4, #11
 80159fa:	1d23      	adds	r3, r4, #4
 80159fc:	f020 0007 	bic.w	r0, r0, #7
 8015a00:	1ac2      	subs	r2, r0, r3
 8015a02:	bf1c      	itt	ne
 8015a04:	1a1b      	subne	r3, r3, r0
 8015a06:	50a3      	strne	r3, [r4, r2]
 8015a08:	e7af      	b.n	801596a <_malloc_r+0x22>
 8015a0a:	6862      	ldr	r2, [r4, #4]
 8015a0c:	42a3      	cmp	r3, r4
 8015a0e:	bf0c      	ite	eq
 8015a10:	f8c8 2000 	streq.w	r2, [r8]
 8015a14:	605a      	strne	r2, [r3, #4]
 8015a16:	e7eb      	b.n	80159f0 <_malloc_r+0xa8>
 8015a18:	4623      	mov	r3, r4
 8015a1a:	6864      	ldr	r4, [r4, #4]
 8015a1c:	e7ae      	b.n	801597c <_malloc_r+0x34>
 8015a1e:	463c      	mov	r4, r7
 8015a20:	687f      	ldr	r7, [r7, #4]
 8015a22:	e7b6      	b.n	8015992 <_malloc_r+0x4a>
 8015a24:	461a      	mov	r2, r3
 8015a26:	685b      	ldr	r3, [r3, #4]
 8015a28:	42a3      	cmp	r3, r4
 8015a2a:	d1fb      	bne.n	8015a24 <_malloc_r+0xdc>
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	6053      	str	r3, [r2, #4]
 8015a30:	e7de      	b.n	80159f0 <_malloc_r+0xa8>
 8015a32:	230c      	movs	r3, #12
 8015a34:	6033      	str	r3, [r6, #0]
 8015a36:	4630      	mov	r0, r6
 8015a38:	f000 f81e 	bl	8015a78 <__malloc_unlock>
 8015a3c:	e794      	b.n	8015968 <_malloc_r+0x20>
 8015a3e:	6005      	str	r5, [r0, #0]
 8015a40:	e7d6      	b.n	80159f0 <_malloc_r+0xa8>
 8015a42:	bf00      	nop
 8015a44:	2400750c 	.word	0x2400750c

08015a48 <__ascii_mbtowc>:
 8015a48:	b082      	sub	sp, #8
 8015a4a:	b901      	cbnz	r1, 8015a4e <__ascii_mbtowc+0x6>
 8015a4c:	a901      	add	r1, sp, #4
 8015a4e:	b142      	cbz	r2, 8015a62 <__ascii_mbtowc+0x1a>
 8015a50:	b14b      	cbz	r3, 8015a66 <__ascii_mbtowc+0x1e>
 8015a52:	7813      	ldrb	r3, [r2, #0]
 8015a54:	600b      	str	r3, [r1, #0]
 8015a56:	7812      	ldrb	r2, [r2, #0]
 8015a58:	1e10      	subs	r0, r2, #0
 8015a5a:	bf18      	it	ne
 8015a5c:	2001      	movne	r0, #1
 8015a5e:	b002      	add	sp, #8
 8015a60:	4770      	bx	lr
 8015a62:	4610      	mov	r0, r2
 8015a64:	e7fb      	b.n	8015a5e <__ascii_mbtowc+0x16>
 8015a66:	f06f 0001 	mvn.w	r0, #1
 8015a6a:	e7f8      	b.n	8015a5e <__ascii_mbtowc+0x16>

08015a6c <__malloc_lock>:
 8015a6c:	4801      	ldr	r0, [pc, #4]	@ (8015a74 <__malloc_lock+0x8>)
 8015a6e:	f7fe bdb6 	b.w	80145de <__retarget_lock_acquire_recursive>
 8015a72:	bf00      	nop
 8015a74:	24007504 	.word	0x24007504

08015a78 <__malloc_unlock>:
 8015a78:	4801      	ldr	r0, [pc, #4]	@ (8015a80 <__malloc_unlock+0x8>)
 8015a7a:	f7fe bdb1 	b.w	80145e0 <__retarget_lock_release_recursive>
 8015a7e:	bf00      	nop
 8015a80:	24007504 	.word	0x24007504

08015a84 <_Balloc>:
 8015a84:	b570      	push	{r4, r5, r6, lr}
 8015a86:	69c6      	ldr	r6, [r0, #28]
 8015a88:	4604      	mov	r4, r0
 8015a8a:	460d      	mov	r5, r1
 8015a8c:	b976      	cbnz	r6, 8015aac <_Balloc+0x28>
 8015a8e:	2010      	movs	r0, #16
 8015a90:	f7ff ff30 	bl	80158f4 <malloc>
 8015a94:	4602      	mov	r2, r0
 8015a96:	61e0      	str	r0, [r4, #28]
 8015a98:	b920      	cbnz	r0, 8015aa4 <_Balloc+0x20>
 8015a9a:	4b18      	ldr	r3, [pc, #96]	@ (8015afc <_Balloc+0x78>)
 8015a9c:	4818      	ldr	r0, [pc, #96]	@ (8015b00 <_Balloc+0x7c>)
 8015a9e:	216b      	movs	r1, #107	@ 0x6b
 8015aa0:	f000 ff36 	bl	8016910 <__assert_func>
 8015aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015aa8:	6006      	str	r6, [r0, #0]
 8015aaa:	60c6      	str	r6, [r0, #12]
 8015aac:	69e6      	ldr	r6, [r4, #28]
 8015aae:	68f3      	ldr	r3, [r6, #12]
 8015ab0:	b183      	cbz	r3, 8015ad4 <_Balloc+0x50>
 8015ab2:	69e3      	ldr	r3, [r4, #28]
 8015ab4:	68db      	ldr	r3, [r3, #12]
 8015ab6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015aba:	b9b8      	cbnz	r0, 8015aec <_Balloc+0x68>
 8015abc:	2101      	movs	r1, #1
 8015abe:	fa01 f605 	lsl.w	r6, r1, r5
 8015ac2:	1d72      	adds	r2, r6, #5
 8015ac4:	0092      	lsls	r2, r2, #2
 8015ac6:	4620      	mov	r0, r4
 8015ac8:	f000 ff40 	bl	801694c <_calloc_r>
 8015acc:	b160      	cbz	r0, 8015ae8 <_Balloc+0x64>
 8015ace:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015ad2:	e00e      	b.n	8015af2 <_Balloc+0x6e>
 8015ad4:	2221      	movs	r2, #33	@ 0x21
 8015ad6:	2104      	movs	r1, #4
 8015ad8:	4620      	mov	r0, r4
 8015ada:	f000 ff37 	bl	801694c <_calloc_r>
 8015ade:	69e3      	ldr	r3, [r4, #28]
 8015ae0:	60f0      	str	r0, [r6, #12]
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d1e4      	bne.n	8015ab2 <_Balloc+0x2e>
 8015ae8:	2000      	movs	r0, #0
 8015aea:	bd70      	pop	{r4, r5, r6, pc}
 8015aec:	6802      	ldr	r2, [r0, #0]
 8015aee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015af2:	2300      	movs	r3, #0
 8015af4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015af8:	e7f7      	b.n	8015aea <_Balloc+0x66>
 8015afa:	bf00      	nop
 8015afc:	080172bf 	.word	0x080172bf
 8015b00:	0801739f 	.word	0x0801739f

08015b04 <_Bfree>:
 8015b04:	b570      	push	{r4, r5, r6, lr}
 8015b06:	69c6      	ldr	r6, [r0, #28]
 8015b08:	4605      	mov	r5, r0
 8015b0a:	460c      	mov	r4, r1
 8015b0c:	b976      	cbnz	r6, 8015b2c <_Bfree+0x28>
 8015b0e:	2010      	movs	r0, #16
 8015b10:	f7ff fef0 	bl	80158f4 <malloc>
 8015b14:	4602      	mov	r2, r0
 8015b16:	61e8      	str	r0, [r5, #28]
 8015b18:	b920      	cbnz	r0, 8015b24 <_Bfree+0x20>
 8015b1a:	4b09      	ldr	r3, [pc, #36]	@ (8015b40 <_Bfree+0x3c>)
 8015b1c:	4809      	ldr	r0, [pc, #36]	@ (8015b44 <_Bfree+0x40>)
 8015b1e:	218f      	movs	r1, #143	@ 0x8f
 8015b20:	f000 fef6 	bl	8016910 <__assert_func>
 8015b24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b28:	6006      	str	r6, [r0, #0]
 8015b2a:	60c6      	str	r6, [r0, #12]
 8015b2c:	b13c      	cbz	r4, 8015b3e <_Bfree+0x3a>
 8015b2e:	69eb      	ldr	r3, [r5, #28]
 8015b30:	6862      	ldr	r2, [r4, #4]
 8015b32:	68db      	ldr	r3, [r3, #12]
 8015b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b38:	6021      	str	r1, [r4, #0]
 8015b3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015b3e:	bd70      	pop	{r4, r5, r6, pc}
 8015b40:	080172bf 	.word	0x080172bf
 8015b44:	0801739f 	.word	0x0801739f

08015b48 <__multadd>:
 8015b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b4c:	690d      	ldr	r5, [r1, #16]
 8015b4e:	4607      	mov	r7, r0
 8015b50:	460c      	mov	r4, r1
 8015b52:	461e      	mov	r6, r3
 8015b54:	f101 0c14 	add.w	ip, r1, #20
 8015b58:	2000      	movs	r0, #0
 8015b5a:	f8dc 3000 	ldr.w	r3, [ip]
 8015b5e:	b299      	uxth	r1, r3
 8015b60:	fb02 6101 	mla	r1, r2, r1, r6
 8015b64:	0c1e      	lsrs	r6, r3, #16
 8015b66:	0c0b      	lsrs	r3, r1, #16
 8015b68:	fb02 3306 	mla	r3, r2, r6, r3
 8015b6c:	b289      	uxth	r1, r1
 8015b6e:	3001      	adds	r0, #1
 8015b70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015b74:	4285      	cmp	r5, r0
 8015b76:	f84c 1b04 	str.w	r1, [ip], #4
 8015b7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015b7e:	dcec      	bgt.n	8015b5a <__multadd+0x12>
 8015b80:	b30e      	cbz	r6, 8015bc6 <__multadd+0x7e>
 8015b82:	68a3      	ldr	r3, [r4, #8]
 8015b84:	42ab      	cmp	r3, r5
 8015b86:	dc19      	bgt.n	8015bbc <__multadd+0x74>
 8015b88:	6861      	ldr	r1, [r4, #4]
 8015b8a:	4638      	mov	r0, r7
 8015b8c:	3101      	adds	r1, #1
 8015b8e:	f7ff ff79 	bl	8015a84 <_Balloc>
 8015b92:	4680      	mov	r8, r0
 8015b94:	b928      	cbnz	r0, 8015ba2 <__multadd+0x5a>
 8015b96:	4602      	mov	r2, r0
 8015b98:	4b0c      	ldr	r3, [pc, #48]	@ (8015bcc <__multadd+0x84>)
 8015b9a:	480d      	ldr	r0, [pc, #52]	@ (8015bd0 <__multadd+0x88>)
 8015b9c:	21ba      	movs	r1, #186	@ 0xba
 8015b9e:	f000 feb7 	bl	8016910 <__assert_func>
 8015ba2:	6922      	ldr	r2, [r4, #16]
 8015ba4:	3202      	adds	r2, #2
 8015ba6:	f104 010c 	add.w	r1, r4, #12
 8015baa:	0092      	lsls	r2, r2, #2
 8015bac:	300c      	adds	r0, #12
 8015bae:	f7fe fd18 	bl	80145e2 <memcpy>
 8015bb2:	4621      	mov	r1, r4
 8015bb4:	4638      	mov	r0, r7
 8015bb6:	f7ff ffa5 	bl	8015b04 <_Bfree>
 8015bba:	4644      	mov	r4, r8
 8015bbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015bc0:	3501      	adds	r5, #1
 8015bc2:	615e      	str	r6, [r3, #20]
 8015bc4:	6125      	str	r5, [r4, #16]
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bcc:	0801732e 	.word	0x0801732e
 8015bd0:	0801739f 	.word	0x0801739f

08015bd4 <__s2b>:
 8015bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bd8:	460c      	mov	r4, r1
 8015bda:	4615      	mov	r5, r2
 8015bdc:	461f      	mov	r7, r3
 8015bde:	2209      	movs	r2, #9
 8015be0:	3308      	adds	r3, #8
 8015be2:	4606      	mov	r6, r0
 8015be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8015be8:	2100      	movs	r1, #0
 8015bea:	2201      	movs	r2, #1
 8015bec:	429a      	cmp	r2, r3
 8015bee:	db09      	blt.n	8015c04 <__s2b+0x30>
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	f7ff ff47 	bl	8015a84 <_Balloc>
 8015bf6:	b940      	cbnz	r0, 8015c0a <__s2b+0x36>
 8015bf8:	4602      	mov	r2, r0
 8015bfa:	4b19      	ldr	r3, [pc, #100]	@ (8015c60 <__s2b+0x8c>)
 8015bfc:	4819      	ldr	r0, [pc, #100]	@ (8015c64 <__s2b+0x90>)
 8015bfe:	21d3      	movs	r1, #211	@ 0xd3
 8015c00:	f000 fe86 	bl	8016910 <__assert_func>
 8015c04:	0052      	lsls	r2, r2, #1
 8015c06:	3101      	adds	r1, #1
 8015c08:	e7f0      	b.n	8015bec <__s2b+0x18>
 8015c0a:	9b08      	ldr	r3, [sp, #32]
 8015c0c:	6143      	str	r3, [r0, #20]
 8015c0e:	2d09      	cmp	r5, #9
 8015c10:	f04f 0301 	mov.w	r3, #1
 8015c14:	6103      	str	r3, [r0, #16]
 8015c16:	dd16      	ble.n	8015c46 <__s2b+0x72>
 8015c18:	f104 0909 	add.w	r9, r4, #9
 8015c1c:	46c8      	mov	r8, r9
 8015c1e:	442c      	add	r4, r5
 8015c20:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015c24:	4601      	mov	r1, r0
 8015c26:	3b30      	subs	r3, #48	@ 0x30
 8015c28:	220a      	movs	r2, #10
 8015c2a:	4630      	mov	r0, r6
 8015c2c:	f7ff ff8c 	bl	8015b48 <__multadd>
 8015c30:	45a0      	cmp	r8, r4
 8015c32:	d1f5      	bne.n	8015c20 <__s2b+0x4c>
 8015c34:	f1a5 0408 	sub.w	r4, r5, #8
 8015c38:	444c      	add	r4, r9
 8015c3a:	1b2d      	subs	r5, r5, r4
 8015c3c:	1963      	adds	r3, r4, r5
 8015c3e:	42bb      	cmp	r3, r7
 8015c40:	db04      	blt.n	8015c4c <__s2b+0x78>
 8015c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c46:	340a      	adds	r4, #10
 8015c48:	2509      	movs	r5, #9
 8015c4a:	e7f6      	b.n	8015c3a <__s2b+0x66>
 8015c4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015c50:	4601      	mov	r1, r0
 8015c52:	3b30      	subs	r3, #48	@ 0x30
 8015c54:	220a      	movs	r2, #10
 8015c56:	4630      	mov	r0, r6
 8015c58:	f7ff ff76 	bl	8015b48 <__multadd>
 8015c5c:	e7ee      	b.n	8015c3c <__s2b+0x68>
 8015c5e:	bf00      	nop
 8015c60:	0801732e 	.word	0x0801732e
 8015c64:	0801739f 	.word	0x0801739f

08015c68 <__hi0bits>:
 8015c68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	bf36      	itet	cc
 8015c70:	0403      	lslcc	r3, r0, #16
 8015c72:	2000      	movcs	r0, #0
 8015c74:	2010      	movcc	r0, #16
 8015c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015c7a:	bf3c      	itt	cc
 8015c7c:	021b      	lslcc	r3, r3, #8
 8015c7e:	3008      	addcc	r0, #8
 8015c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015c84:	bf3c      	itt	cc
 8015c86:	011b      	lslcc	r3, r3, #4
 8015c88:	3004      	addcc	r0, #4
 8015c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015c8e:	bf3c      	itt	cc
 8015c90:	009b      	lslcc	r3, r3, #2
 8015c92:	3002      	addcc	r0, #2
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	db05      	blt.n	8015ca4 <__hi0bits+0x3c>
 8015c98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015c9c:	f100 0001 	add.w	r0, r0, #1
 8015ca0:	bf08      	it	eq
 8015ca2:	2020      	moveq	r0, #32
 8015ca4:	4770      	bx	lr

08015ca6 <__lo0bits>:
 8015ca6:	6803      	ldr	r3, [r0, #0]
 8015ca8:	4602      	mov	r2, r0
 8015caa:	f013 0007 	ands.w	r0, r3, #7
 8015cae:	d00b      	beq.n	8015cc8 <__lo0bits+0x22>
 8015cb0:	07d9      	lsls	r1, r3, #31
 8015cb2:	d421      	bmi.n	8015cf8 <__lo0bits+0x52>
 8015cb4:	0798      	lsls	r0, r3, #30
 8015cb6:	bf49      	itett	mi
 8015cb8:	085b      	lsrmi	r3, r3, #1
 8015cba:	089b      	lsrpl	r3, r3, #2
 8015cbc:	2001      	movmi	r0, #1
 8015cbe:	6013      	strmi	r3, [r2, #0]
 8015cc0:	bf5c      	itt	pl
 8015cc2:	6013      	strpl	r3, [r2, #0]
 8015cc4:	2002      	movpl	r0, #2
 8015cc6:	4770      	bx	lr
 8015cc8:	b299      	uxth	r1, r3
 8015cca:	b909      	cbnz	r1, 8015cd0 <__lo0bits+0x2a>
 8015ccc:	0c1b      	lsrs	r3, r3, #16
 8015cce:	2010      	movs	r0, #16
 8015cd0:	b2d9      	uxtb	r1, r3
 8015cd2:	b909      	cbnz	r1, 8015cd8 <__lo0bits+0x32>
 8015cd4:	3008      	adds	r0, #8
 8015cd6:	0a1b      	lsrs	r3, r3, #8
 8015cd8:	0719      	lsls	r1, r3, #28
 8015cda:	bf04      	itt	eq
 8015cdc:	091b      	lsreq	r3, r3, #4
 8015cde:	3004      	addeq	r0, #4
 8015ce0:	0799      	lsls	r1, r3, #30
 8015ce2:	bf04      	itt	eq
 8015ce4:	089b      	lsreq	r3, r3, #2
 8015ce6:	3002      	addeq	r0, #2
 8015ce8:	07d9      	lsls	r1, r3, #31
 8015cea:	d403      	bmi.n	8015cf4 <__lo0bits+0x4e>
 8015cec:	085b      	lsrs	r3, r3, #1
 8015cee:	f100 0001 	add.w	r0, r0, #1
 8015cf2:	d003      	beq.n	8015cfc <__lo0bits+0x56>
 8015cf4:	6013      	str	r3, [r2, #0]
 8015cf6:	4770      	bx	lr
 8015cf8:	2000      	movs	r0, #0
 8015cfa:	4770      	bx	lr
 8015cfc:	2020      	movs	r0, #32
 8015cfe:	4770      	bx	lr

08015d00 <__i2b>:
 8015d00:	b510      	push	{r4, lr}
 8015d02:	460c      	mov	r4, r1
 8015d04:	2101      	movs	r1, #1
 8015d06:	f7ff febd 	bl	8015a84 <_Balloc>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	b928      	cbnz	r0, 8015d1a <__i2b+0x1a>
 8015d0e:	4b05      	ldr	r3, [pc, #20]	@ (8015d24 <__i2b+0x24>)
 8015d10:	4805      	ldr	r0, [pc, #20]	@ (8015d28 <__i2b+0x28>)
 8015d12:	f240 1145 	movw	r1, #325	@ 0x145
 8015d16:	f000 fdfb 	bl	8016910 <__assert_func>
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	6144      	str	r4, [r0, #20]
 8015d1e:	6103      	str	r3, [r0, #16]
 8015d20:	bd10      	pop	{r4, pc}
 8015d22:	bf00      	nop
 8015d24:	0801732e 	.word	0x0801732e
 8015d28:	0801739f 	.word	0x0801739f

08015d2c <__multiply>:
 8015d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d30:	4617      	mov	r7, r2
 8015d32:	690a      	ldr	r2, [r1, #16]
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	429a      	cmp	r2, r3
 8015d38:	bfa8      	it	ge
 8015d3a:	463b      	movge	r3, r7
 8015d3c:	4689      	mov	r9, r1
 8015d3e:	bfa4      	itt	ge
 8015d40:	460f      	movge	r7, r1
 8015d42:	4699      	movge	r9, r3
 8015d44:	693d      	ldr	r5, [r7, #16]
 8015d46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	6879      	ldr	r1, [r7, #4]
 8015d4e:	eb05 060a 	add.w	r6, r5, sl
 8015d52:	42b3      	cmp	r3, r6
 8015d54:	b085      	sub	sp, #20
 8015d56:	bfb8      	it	lt
 8015d58:	3101      	addlt	r1, #1
 8015d5a:	f7ff fe93 	bl	8015a84 <_Balloc>
 8015d5e:	b930      	cbnz	r0, 8015d6e <__multiply+0x42>
 8015d60:	4602      	mov	r2, r0
 8015d62:	4b41      	ldr	r3, [pc, #260]	@ (8015e68 <__multiply+0x13c>)
 8015d64:	4841      	ldr	r0, [pc, #260]	@ (8015e6c <__multiply+0x140>)
 8015d66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015d6a:	f000 fdd1 	bl	8016910 <__assert_func>
 8015d6e:	f100 0414 	add.w	r4, r0, #20
 8015d72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015d76:	4623      	mov	r3, r4
 8015d78:	2200      	movs	r2, #0
 8015d7a:	4573      	cmp	r3, lr
 8015d7c:	d320      	bcc.n	8015dc0 <__multiply+0x94>
 8015d7e:	f107 0814 	add.w	r8, r7, #20
 8015d82:	f109 0114 	add.w	r1, r9, #20
 8015d86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015d8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015d8e:	9302      	str	r3, [sp, #8]
 8015d90:	1beb      	subs	r3, r5, r7
 8015d92:	3b15      	subs	r3, #21
 8015d94:	f023 0303 	bic.w	r3, r3, #3
 8015d98:	3304      	adds	r3, #4
 8015d9a:	3715      	adds	r7, #21
 8015d9c:	42bd      	cmp	r5, r7
 8015d9e:	bf38      	it	cc
 8015da0:	2304      	movcc	r3, #4
 8015da2:	9301      	str	r3, [sp, #4]
 8015da4:	9b02      	ldr	r3, [sp, #8]
 8015da6:	9103      	str	r1, [sp, #12]
 8015da8:	428b      	cmp	r3, r1
 8015daa:	d80c      	bhi.n	8015dc6 <__multiply+0x9a>
 8015dac:	2e00      	cmp	r6, #0
 8015dae:	dd03      	ble.n	8015db8 <__multiply+0x8c>
 8015db0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d055      	beq.n	8015e64 <__multiply+0x138>
 8015db8:	6106      	str	r6, [r0, #16]
 8015dba:	b005      	add	sp, #20
 8015dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dc0:	f843 2b04 	str.w	r2, [r3], #4
 8015dc4:	e7d9      	b.n	8015d7a <__multiply+0x4e>
 8015dc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8015dca:	f1ba 0f00 	cmp.w	sl, #0
 8015dce:	d01f      	beq.n	8015e10 <__multiply+0xe4>
 8015dd0:	46c4      	mov	ip, r8
 8015dd2:	46a1      	mov	r9, r4
 8015dd4:	2700      	movs	r7, #0
 8015dd6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015dda:	f8d9 3000 	ldr.w	r3, [r9]
 8015dde:	fa1f fb82 	uxth.w	fp, r2
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	fb0a 330b 	mla	r3, sl, fp, r3
 8015de8:	443b      	add	r3, r7
 8015dea:	f8d9 7000 	ldr.w	r7, [r9]
 8015dee:	0c12      	lsrs	r2, r2, #16
 8015df0:	0c3f      	lsrs	r7, r7, #16
 8015df2:	fb0a 7202 	mla	r2, sl, r2, r7
 8015df6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015dfa:	b29b      	uxth	r3, r3
 8015dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015e00:	4565      	cmp	r5, ip
 8015e02:	f849 3b04 	str.w	r3, [r9], #4
 8015e06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015e0a:	d8e4      	bhi.n	8015dd6 <__multiply+0xaa>
 8015e0c:	9b01      	ldr	r3, [sp, #4]
 8015e0e:	50e7      	str	r7, [r4, r3]
 8015e10:	9b03      	ldr	r3, [sp, #12]
 8015e12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015e16:	3104      	adds	r1, #4
 8015e18:	f1b9 0f00 	cmp.w	r9, #0
 8015e1c:	d020      	beq.n	8015e60 <__multiply+0x134>
 8015e1e:	6823      	ldr	r3, [r4, #0]
 8015e20:	4647      	mov	r7, r8
 8015e22:	46a4      	mov	ip, r4
 8015e24:	f04f 0a00 	mov.w	sl, #0
 8015e28:	f8b7 b000 	ldrh.w	fp, [r7]
 8015e2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015e30:	fb09 220b 	mla	r2, r9, fp, r2
 8015e34:	4452      	add	r2, sl
 8015e36:	b29b      	uxth	r3, r3
 8015e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015e3c:	f84c 3b04 	str.w	r3, [ip], #4
 8015e40:	f857 3b04 	ldr.w	r3, [r7], #4
 8015e44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e48:	f8bc 3000 	ldrh.w	r3, [ip]
 8015e4c:	fb09 330a 	mla	r3, r9, sl, r3
 8015e50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015e54:	42bd      	cmp	r5, r7
 8015e56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e5a:	d8e5      	bhi.n	8015e28 <__multiply+0xfc>
 8015e5c:	9a01      	ldr	r2, [sp, #4]
 8015e5e:	50a3      	str	r3, [r4, r2]
 8015e60:	3404      	adds	r4, #4
 8015e62:	e79f      	b.n	8015da4 <__multiply+0x78>
 8015e64:	3e01      	subs	r6, #1
 8015e66:	e7a1      	b.n	8015dac <__multiply+0x80>
 8015e68:	0801732e 	.word	0x0801732e
 8015e6c:	0801739f 	.word	0x0801739f

08015e70 <__pow5mult>:
 8015e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e74:	4615      	mov	r5, r2
 8015e76:	f012 0203 	ands.w	r2, r2, #3
 8015e7a:	4607      	mov	r7, r0
 8015e7c:	460e      	mov	r6, r1
 8015e7e:	d007      	beq.n	8015e90 <__pow5mult+0x20>
 8015e80:	4c25      	ldr	r4, [pc, #148]	@ (8015f18 <__pow5mult+0xa8>)
 8015e82:	3a01      	subs	r2, #1
 8015e84:	2300      	movs	r3, #0
 8015e86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e8a:	f7ff fe5d 	bl	8015b48 <__multadd>
 8015e8e:	4606      	mov	r6, r0
 8015e90:	10ad      	asrs	r5, r5, #2
 8015e92:	d03d      	beq.n	8015f10 <__pow5mult+0xa0>
 8015e94:	69fc      	ldr	r4, [r7, #28]
 8015e96:	b97c      	cbnz	r4, 8015eb8 <__pow5mult+0x48>
 8015e98:	2010      	movs	r0, #16
 8015e9a:	f7ff fd2b 	bl	80158f4 <malloc>
 8015e9e:	4602      	mov	r2, r0
 8015ea0:	61f8      	str	r0, [r7, #28]
 8015ea2:	b928      	cbnz	r0, 8015eb0 <__pow5mult+0x40>
 8015ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8015f1c <__pow5mult+0xac>)
 8015ea6:	481e      	ldr	r0, [pc, #120]	@ (8015f20 <__pow5mult+0xb0>)
 8015ea8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015eac:	f000 fd30 	bl	8016910 <__assert_func>
 8015eb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015eb4:	6004      	str	r4, [r0, #0]
 8015eb6:	60c4      	str	r4, [r0, #12]
 8015eb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015ebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015ec0:	b94c      	cbnz	r4, 8015ed6 <__pow5mult+0x66>
 8015ec2:	f240 2171 	movw	r1, #625	@ 0x271
 8015ec6:	4638      	mov	r0, r7
 8015ec8:	f7ff ff1a 	bl	8015d00 <__i2b>
 8015ecc:	2300      	movs	r3, #0
 8015ece:	f8c8 0008 	str.w	r0, [r8, #8]
 8015ed2:	4604      	mov	r4, r0
 8015ed4:	6003      	str	r3, [r0, #0]
 8015ed6:	f04f 0900 	mov.w	r9, #0
 8015eda:	07eb      	lsls	r3, r5, #31
 8015edc:	d50a      	bpl.n	8015ef4 <__pow5mult+0x84>
 8015ede:	4631      	mov	r1, r6
 8015ee0:	4622      	mov	r2, r4
 8015ee2:	4638      	mov	r0, r7
 8015ee4:	f7ff ff22 	bl	8015d2c <__multiply>
 8015ee8:	4631      	mov	r1, r6
 8015eea:	4680      	mov	r8, r0
 8015eec:	4638      	mov	r0, r7
 8015eee:	f7ff fe09 	bl	8015b04 <_Bfree>
 8015ef2:	4646      	mov	r6, r8
 8015ef4:	106d      	asrs	r5, r5, #1
 8015ef6:	d00b      	beq.n	8015f10 <__pow5mult+0xa0>
 8015ef8:	6820      	ldr	r0, [r4, #0]
 8015efa:	b938      	cbnz	r0, 8015f0c <__pow5mult+0x9c>
 8015efc:	4622      	mov	r2, r4
 8015efe:	4621      	mov	r1, r4
 8015f00:	4638      	mov	r0, r7
 8015f02:	f7ff ff13 	bl	8015d2c <__multiply>
 8015f06:	6020      	str	r0, [r4, #0]
 8015f08:	f8c0 9000 	str.w	r9, [r0]
 8015f0c:	4604      	mov	r4, r0
 8015f0e:	e7e4      	b.n	8015eda <__pow5mult+0x6a>
 8015f10:	4630      	mov	r0, r6
 8015f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f16:	bf00      	nop
 8015f18:	08017498 	.word	0x08017498
 8015f1c:	080172bf 	.word	0x080172bf
 8015f20:	0801739f 	.word	0x0801739f

08015f24 <__lshift>:
 8015f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f28:	460c      	mov	r4, r1
 8015f2a:	6849      	ldr	r1, [r1, #4]
 8015f2c:	6923      	ldr	r3, [r4, #16]
 8015f2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015f32:	68a3      	ldr	r3, [r4, #8]
 8015f34:	4607      	mov	r7, r0
 8015f36:	4691      	mov	r9, r2
 8015f38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f3c:	f108 0601 	add.w	r6, r8, #1
 8015f40:	42b3      	cmp	r3, r6
 8015f42:	db0b      	blt.n	8015f5c <__lshift+0x38>
 8015f44:	4638      	mov	r0, r7
 8015f46:	f7ff fd9d 	bl	8015a84 <_Balloc>
 8015f4a:	4605      	mov	r5, r0
 8015f4c:	b948      	cbnz	r0, 8015f62 <__lshift+0x3e>
 8015f4e:	4602      	mov	r2, r0
 8015f50:	4b28      	ldr	r3, [pc, #160]	@ (8015ff4 <__lshift+0xd0>)
 8015f52:	4829      	ldr	r0, [pc, #164]	@ (8015ff8 <__lshift+0xd4>)
 8015f54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015f58:	f000 fcda 	bl	8016910 <__assert_func>
 8015f5c:	3101      	adds	r1, #1
 8015f5e:	005b      	lsls	r3, r3, #1
 8015f60:	e7ee      	b.n	8015f40 <__lshift+0x1c>
 8015f62:	2300      	movs	r3, #0
 8015f64:	f100 0114 	add.w	r1, r0, #20
 8015f68:	f100 0210 	add.w	r2, r0, #16
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	4553      	cmp	r3, sl
 8015f70:	db33      	blt.n	8015fda <__lshift+0xb6>
 8015f72:	6920      	ldr	r0, [r4, #16]
 8015f74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f78:	f104 0314 	add.w	r3, r4, #20
 8015f7c:	f019 091f 	ands.w	r9, r9, #31
 8015f80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015f88:	d02b      	beq.n	8015fe2 <__lshift+0xbe>
 8015f8a:	f1c9 0e20 	rsb	lr, r9, #32
 8015f8e:	468a      	mov	sl, r1
 8015f90:	2200      	movs	r2, #0
 8015f92:	6818      	ldr	r0, [r3, #0]
 8015f94:	fa00 f009 	lsl.w	r0, r0, r9
 8015f98:	4310      	orrs	r0, r2
 8015f9a:	f84a 0b04 	str.w	r0, [sl], #4
 8015f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fa2:	459c      	cmp	ip, r3
 8015fa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8015fa8:	d8f3      	bhi.n	8015f92 <__lshift+0x6e>
 8015faa:	ebac 0304 	sub.w	r3, ip, r4
 8015fae:	3b15      	subs	r3, #21
 8015fb0:	f023 0303 	bic.w	r3, r3, #3
 8015fb4:	3304      	adds	r3, #4
 8015fb6:	f104 0015 	add.w	r0, r4, #21
 8015fba:	4560      	cmp	r0, ip
 8015fbc:	bf88      	it	hi
 8015fbe:	2304      	movhi	r3, #4
 8015fc0:	50ca      	str	r2, [r1, r3]
 8015fc2:	b10a      	cbz	r2, 8015fc8 <__lshift+0xa4>
 8015fc4:	f108 0602 	add.w	r6, r8, #2
 8015fc8:	3e01      	subs	r6, #1
 8015fca:	4638      	mov	r0, r7
 8015fcc:	612e      	str	r6, [r5, #16]
 8015fce:	4621      	mov	r1, r4
 8015fd0:	f7ff fd98 	bl	8015b04 <_Bfree>
 8015fd4:	4628      	mov	r0, r5
 8015fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fda:	f842 0f04 	str.w	r0, [r2, #4]!
 8015fde:	3301      	adds	r3, #1
 8015fe0:	e7c5      	b.n	8015f6e <__lshift+0x4a>
 8015fe2:	3904      	subs	r1, #4
 8015fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fe8:	f841 2f04 	str.w	r2, [r1, #4]!
 8015fec:	459c      	cmp	ip, r3
 8015fee:	d8f9      	bhi.n	8015fe4 <__lshift+0xc0>
 8015ff0:	e7ea      	b.n	8015fc8 <__lshift+0xa4>
 8015ff2:	bf00      	nop
 8015ff4:	0801732e 	.word	0x0801732e
 8015ff8:	0801739f 	.word	0x0801739f

08015ffc <__mcmp>:
 8015ffc:	690a      	ldr	r2, [r1, #16]
 8015ffe:	4603      	mov	r3, r0
 8016000:	6900      	ldr	r0, [r0, #16]
 8016002:	1a80      	subs	r0, r0, r2
 8016004:	b530      	push	{r4, r5, lr}
 8016006:	d10e      	bne.n	8016026 <__mcmp+0x2a>
 8016008:	3314      	adds	r3, #20
 801600a:	3114      	adds	r1, #20
 801600c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016010:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016014:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016018:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801601c:	4295      	cmp	r5, r2
 801601e:	d003      	beq.n	8016028 <__mcmp+0x2c>
 8016020:	d205      	bcs.n	801602e <__mcmp+0x32>
 8016022:	f04f 30ff 	mov.w	r0, #4294967295
 8016026:	bd30      	pop	{r4, r5, pc}
 8016028:	42a3      	cmp	r3, r4
 801602a:	d3f3      	bcc.n	8016014 <__mcmp+0x18>
 801602c:	e7fb      	b.n	8016026 <__mcmp+0x2a>
 801602e:	2001      	movs	r0, #1
 8016030:	e7f9      	b.n	8016026 <__mcmp+0x2a>
	...

08016034 <__mdiff>:
 8016034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016038:	4689      	mov	r9, r1
 801603a:	4606      	mov	r6, r0
 801603c:	4611      	mov	r1, r2
 801603e:	4648      	mov	r0, r9
 8016040:	4614      	mov	r4, r2
 8016042:	f7ff ffdb 	bl	8015ffc <__mcmp>
 8016046:	1e05      	subs	r5, r0, #0
 8016048:	d112      	bne.n	8016070 <__mdiff+0x3c>
 801604a:	4629      	mov	r1, r5
 801604c:	4630      	mov	r0, r6
 801604e:	f7ff fd19 	bl	8015a84 <_Balloc>
 8016052:	4602      	mov	r2, r0
 8016054:	b928      	cbnz	r0, 8016062 <__mdiff+0x2e>
 8016056:	4b3f      	ldr	r3, [pc, #252]	@ (8016154 <__mdiff+0x120>)
 8016058:	f240 2137 	movw	r1, #567	@ 0x237
 801605c:	483e      	ldr	r0, [pc, #248]	@ (8016158 <__mdiff+0x124>)
 801605e:	f000 fc57 	bl	8016910 <__assert_func>
 8016062:	2301      	movs	r3, #1
 8016064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016068:	4610      	mov	r0, r2
 801606a:	b003      	add	sp, #12
 801606c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016070:	bfbc      	itt	lt
 8016072:	464b      	movlt	r3, r9
 8016074:	46a1      	movlt	r9, r4
 8016076:	4630      	mov	r0, r6
 8016078:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801607c:	bfba      	itte	lt
 801607e:	461c      	movlt	r4, r3
 8016080:	2501      	movlt	r5, #1
 8016082:	2500      	movge	r5, #0
 8016084:	f7ff fcfe 	bl	8015a84 <_Balloc>
 8016088:	4602      	mov	r2, r0
 801608a:	b918      	cbnz	r0, 8016094 <__mdiff+0x60>
 801608c:	4b31      	ldr	r3, [pc, #196]	@ (8016154 <__mdiff+0x120>)
 801608e:	f240 2145 	movw	r1, #581	@ 0x245
 8016092:	e7e3      	b.n	801605c <__mdiff+0x28>
 8016094:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016098:	6926      	ldr	r6, [r4, #16]
 801609a:	60c5      	str	r5, [r0, #12]
 801609c:	f109 0310 	add.w	r3, r9, #16
 80160a0:	f109 0514 	add.w	r5, r9, #20
 80160a4:	f104 0e14 	add.w	lr, r4, #20
 80160a8:	f100 0b14 	add.w	fp, r0, #20
 80160ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80160b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80160b4:	9301      	str	r3, [sp, #4]
 80160b6:	46d9      	mov	r9, fp
 80160b8:	f04f 0c00 	mov.w	ip, #0
 80160bc:	9b01      	ldr	r3, [sp, #4]
 80160be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80160c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80160c6:	9301      	str	r3, [sp, #4]
 80160c8:	fa1f f38a 	uxth.w	r3, sl
 80160cc:	4619      	mov	r1, r3
 80160ce:	b283      	uxth	r3, r0
 80160d0:	1acb      	subs	r3, r1, r3
 80160d2:	0c00      	lsrs	r0, r0, #16
 80160d4:	4463      	add	r3, ip
 80160d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80160da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80160de:	b29b      	uxth	r3, r3
 80160e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80160e4:	4576      	cmp	r6, lr
 80160e6:	f849 3b04 	str.w	r3, [r9], #4
 80160ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80160ee:	d8e5      	bhi.n	80160bc <__mdiff+0x88>
 80160f0:	1b33      	subs	r3, r6, r4
 80160f2:	3b15      	subs	r3, #21
 80160f4:	f023 0303 	bic.w	r3, r3, #3
 80160f8:	3415      	adds	r4, #21
 80160fa:	3304      	adds	r3, #4
 80160fc:	42a6      	cmp	r6, r4
 80160fe:	bf38      	it	cc
 8016100:	2304      	movcc	r3, #4
 8016102:	441d      	add	r5, r3
 8016104:	445b      	add	r3, fp
 8016106:	461e      	mov	r6, r3
 8016108:	462c      	mov	r4, r5
 801610a:	4544      	cmp	r4, r8
 801610c:	d30e      	bcc.n	801612c <__mdiff+0xf8>
 801610e:	f108 0103 	add.w	r1, r8, #3
 8016112:	1b49      	subs	r1, r1, r5
 8016114:	f021 0103 	bic.w	r1, r1, #3
 8016118:	3d03      	subs	r5, #3
 801611a:	45a8      	cmp	r8, r5
 801611c:	bf38      	it	cc
 801611e:	2100      	movcc	r1, #0
 8016120:	440b      	add	r3, r1
 8016122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016126:	b191      	cbz	r1, 801614e <__mdiff+0x11a>
 8016128:	6117      	str	r7, [r2, #16]
 801612a:	e79d      	b.n	8016068 <__mdiff+0x34>
 801612c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016130:	46e6      	mov	lr, ip
 8016132:	0c08      	lsrs	r0, r1, #16
 8016134:	fa1c fc81 	uxtah	ip, ip, r1
 8016138:	4471      	add	r1, lr
 801613a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801613e:	b289      	uxth	r1, r1
 8016140:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016144:	f846 1b04 	str.w	r1, [r6], #4
 8016148:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801614c:	e7dd      	b.n	801610a <__mdiff+0xd6>
 801614e:	3f01      	subs	r7, #1
 8016150:	e7e7      	b.n	8016122 <__mdiff+0xee>
 8016152:	bf00      	nop
 8016154:	0801732e 	.word	0x0801732e
 8016158:	0801739f 	.word	0x0801739f

0801615c <__ulp>:
 801615c:	b082      	sub	sp, #8
 801615e:	ed8d 0b00 	vstr	d0, [sp]
 8016162:	9a01      	ldr	r2, [sp, #4]
 8016164:	4b0f      	ldr	r3, [pc, #60]	@ (80161a4 <__ulp+0x48>)
 8016166:	4013      	ands	r3, r2
 8016168:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801616c:	2b00      	cmp	r3, #0
 801616e:	dc08      	bgt.n	8016182 <__ulp+0x26>
 8016170:	425b      	negs	r3, r3
 8016172:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016176:	ea4f 5223 	mov.w	r2, r3, asr #20
 801617a:	da04      	bge.n	8016186 <__ulp+0x2a>
 801617c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016180:	4113      	asrs	r3, r2
 8016182:	2200      	movs	r2, #0
 8016184:	e008      	b.n	8016198 <__ulp+0x3c>
 8016186:	f1a2 0314 	sub.w	r3, r2, #20
 801618a:	2b1e      	cmp	r3, #30
 801618c:	bfda      	itte	le
 801618e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016192:	40da      	lsrle	r2, r3
 8016194:	2201      	movgt	r2, #1
 8016196:	2300      	movs	r3, #0
 8016198:	4619      	mov	r1, r3
 801619a:	4610      	mov	r0, r2
 801619c:	ec41 0b10 	vmov	d0, r0, r1
 80161a0:	b002      	add	sp, #8
 80161a2:	4770      	bx	lr
 80161a4:	7ff00000 	.word	0x7ff00000

080161a8 <__b2d>:
 80161a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161ac:	6906      	ldr	r6, [r0, #16]
 80161ae:	f100 0814 	add.w	r8, r0, #20
 80161b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80161b6:	1f37      	subs	r7, r6, #4
 80161b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80161bc:	4610      	mov	r0, r2
 80161be:	f7ff fd53 	bl	8015c68 <__hi0bits>
 80161c2:	f1c0 0320 	rsb	r3, r0, #32
 80161c6:	280a      	cmp	r0, #10
 80161c8:	600b      	str	r3, [r1, #0]
 80161ca:	491b      	ldr	r1, [pc, #108]	@ (8016238 <__b2d+0x90>)
 80161cc:	dc15      	bgt.n	80161fa <__b2d+0x52>
 80161ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80161d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80161d6:	45b8      	cmp	r8, r7
 80161d8:	ea43 0501 	orr.w	r5, r3, r1
 80161dc:	bf34      	ite	cc
 80161de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80161e2:	2300      	movcs	r3, #0
 80161e4:	3015      	adds	r0, #21
 80161e6:	fa02 f000 	lsl.w	r0, r2, r0
 80161ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80161ee:	4303      	orrs	r3, r0
 80161f0:	461c      	mov	r4, r3
 80161f2:	ec45 4b10 	vmov	d0, r4, r5
 80161f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161fa:	45b8      	cmp	r8, r7
 80161fc:	bf3a      	itte	cc
 80161fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016202:	f1a6 0708 	subcc.w	r7, r6, #8
 8016206:	2300      	movcs	r3, #0
 8016208:	380b      	subs	r0, #11
 801620a:	d012      	beq.n	8016232 <__b2d+0x8a>
 801620c:	f1c0 0120 	rsb	r1, r0, #32
 8016210:	fa23 f401 	lsr.w	r4, r3, r1
 8016214:	4082      	lsls	r2, r0
 8016216:	4322      	orrs	r2, r4
 8016218:	4547      	cmp	r7, r8
 801621a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801621e:	bf8c      	ite	hi
 8016220:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016224:	2200      	movls	r2, #0
 8016226:	4083      	lsls	r3, r0
 8016228:	40ca      	lsrs	r2, r1
 801622a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801622e:	4313      	orrs	r3, r2
 8016230:	e7de      	b.n	80161f0 <__b2d+0x48>
 8016232:	ea42 0501 	orr.w	r5, r2, r1
 8016236:	e7db      	b.n	80161f0 <__b2d+0x48>
 8016238:	3ff00000 	.word	0x3ff00000

0801623c <__d2b>:
 801623c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016240:	460f      	mov	r7, r1
 8016242:	2101      	movs	r1, #1
 8016244:	ec59 8b10 	vmov	r8, r9, d0
 8016248:	4616      	mov	r6, r2
 801624a:	f7ff fc1b 	bl	8015a84 <_Balloc>
 801624e:	4604      	mov	r4, r0
 8016250:	b930      	cbnz	r0, 8016260 <__d2b+0x24>
 8016252:	4602      	mov	r2, r0
 8016254:	4b23      	ldr	r3, [pc, #140]	@ (80162e4 <__d2b+0xa8>)
 8016256:	4824      	ldr	r0, [pc, #144]	@ (80162e8 <__d2b+0xac>)
 8016258:	f240 310f 	movw	r1, #783	@ 0x30f
 801625c:	f000 fb58 	bl	8016910 <__assert_func>
 8016260:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016264:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016268:	b10d      	cbz	r5, 801626e <__d2b+0x32>
 801626a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801626e:	9301      	str	r3, [sp, #4]
 8016270:	f1b8 0300 	subs.w	r3, r8, #0
 8016274:	d023      	beq.n	80162be <__d2b+0x82>
 8016276:	4668      	mov	r0, sp
 8016278:	9300      	str	r3, [sp, #0]
 801627a:	f7ff fd14 	bl	8015ca6 <__lo0bits>
 801627e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016282:	b1d0      	cbz	r0, 80162ba <__d2b+0x7e>
 8016284:	f1c0 0320 	rsb	r3, r0, #32
 8016288:	fa02 f303 	lsl.w	r3, r2, r3
 801628c:	430b      	orrs	r3, r1
 801628e:	40c2      	lsrs	r2, r0
 8016290:	6163      	str	r3, [r4, #20]
 8016292:	9201      	str	r2, [sp, #4]
 8016294:	9b01      	ldr	r3, [sp, #4]
 8016296:	61a3      	str	r3, [r4, #24]
 8016298:	2b00      	cmp	r3, #0
 801629a:	bf0c      	ite	eq
 801629c:	2201      	moveq	r2, #1
 801629e:	2202      	movne	r2, #2
 80162a0:	6122      	str	r2, [r4, #16]
 80162a2:	b1a5      	cbz	r5, 80162ce <__d2b+0x92>
 80162a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80162a8:	4405      	add	r5, r0
 80162aa:	603d      	str	r5, [r7, #0]
 80162ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80162b0:	6030      	str	r0, [r6, #0]
 80162b2:	4620      	mov	r0, r4
 80162b4:	b003      	add	sp, #12
 80162b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162ba:	6161      	str	r1, [r4, #20]
 80162bc:	e7ea      	b.n	8016294 <__d2b+0x58>
 80162be:	a801      	add	r0, sp, #4
 80162c0:	f7ff fcf1 	bl	8015ca6 <__lo0bits>
 80162c4:	9b01      	ldr	r3, [sp, #4]
 80162c6:	6163      	str	r3, [r4, #20]
 80162c8:	3020      	adds	r0, #32
 80162ca:	2201      	movs	r2, #1
 80162cc:	e7e8      	b.n	80162a0 <__d2b+0x64>
 80162ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80162d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80162d6:	6038      	str	r0, [r7, #0]
 80162d8:	6918      	ldr	r0, [r3, #16]
 80162da:	f7ff fcc5 	bl	8015c68 <__hi0bits>
 80162de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80162e2:	e7e5      	b.n	80162b0 <__d2b+0x74>
 80162e4:	0801732e 	.word	0x0801732e
 80162e8:	0801739f 	.word	0x0801739f

080162ec <__ratio>:
 80162ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162f0:	4688      	mov	r8, r1
 80162f2:	4669      	mov	r1, sp
 80162f4:	4681      	mov	r9, r0
 80162f6:	f7ff ff57 	bl	80161a8 <__b2d>
 80162fa:	a901      	add	r1, sp, #4
 80162fc:	4640      	mov	r0, r8
 80162fe:	ec55 4b10 	vmov	r4, r5, d0
 8016302:	f7ff ff51 	bl	80161a8 <__b2d>
 8016306:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801630a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801630e:	1ad2      	subs	r2, r2, r3
 8016310:	e9dd 3100 	ldrd	r3, r1, [sp]
 8016314:	1a5b      	subs	r3, r3, r1
 8016316:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801631a:	ec57 6b10 	vmov	r6, r7, d0
 801631e:	2b00      	cmp	r3, #0
 8016320:	bfd6      	itet	le
 8016322:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016326:	462a      	movgt	r2, r5
 8016328:	463a      	movle	r2, r7
 801632a:	46ab      	mov	fp, r5
 801632c:	46a2      	mov	sl, r4
 801632e:	bfce      	itee	gt
 8016330:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8016334:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016338:	ee00 3a90 	vmovle	s1, r3
 801633c:	ec4b ab17 	vmov	d7, sl, fp
 8016340:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016344:	b003      	add	sp, #12
 8016346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801634a <__copybits>:
 801634a:	3901      	subs	r1, #1
 801634c:	b570      	push	{r4, r5, r6, lr}
 801634e:	1149      	asrs	r1, r1, #5
 8016350:	6914      	ldr	r4, [r2, #16]
 8016352:	3101      	adds	r1, #1
 8016354:	f102 0314 	add.w	r3, r2, #20
 8016358:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801635c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016360:	1f05      	subs	r5, r0, #4
 8016362:	42a3      	cmp	r3, r4
 8016364:	d30c      	bcc.n	8016380 <__copybits+0x36>
 8016366:	1aa3      	subs	r3, r4, r2
 8016368:	3b11      	subs	r3, #17
 801636a:	f023 0303 	bic.w	r3, r3, #3
 801636e:	3211      	adds	r2, #17
 8016370:	42a2      	cmp	r2, r4
 8016372:	bf88      	it	hi
 8016374:	2300      	movhi	r3, #0
 8016376:	4418      	add	r0, r3
 8016378:	2300      	movs	r3, #0
 801637a:	4288      	cmp	r0, r1
 801637c:	d305      	bcc.n	801638a <__copybits+0x40>
 801637e:	bd70      	pop	{r4, r5, r6, pc}
 8016380:	f853 6b04 	ldr.w	r6, [r3], #4
 8016384:	f845 6f04 	str.w	r6, [r5, #4]!
 8016388:	e7eb      	b.n	8016362 <__copybits+0x18>
 801638a:	f840 3b04 	str.w	r3, [r0], #4
 801638e:	e7f4      	b.n	801637a <__copybits+0x30>

08016390 <__any_on>:
 8016390:	f100 0214 	add.w	r2, r0, #20
 8016394:	6900      	ldr	r0, [r0, #16]
 8016396:	114b      	asrs	r3, r1, #5
 8016398:	4298      	cmp	r0, r3
 801639a:	b510      	push	{r4, lr}
 801639c:	db11      	blt.n	80163c2 <__any_on+0x32>
 801639e:	dd0a      	ble.n	80163b6 <__any_on+0x26>
 80163a0:	f011 011f 	ands.w	r1, r1, #31
 80163a4:	d007      	beq.n	80163b6 <__any_on+0x26>
 80163a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80163aa:	fa24 f001 	lsr.w	r0, r4, r1
 80163ae:	fa00 f101 	lsl.w	r1, r0, r1
 80163b2:	428c      	cmp	r4, r1
 80163b4:	d10b      	bne.n	80163ce <__any_on+0x3e>
 80163b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80163ba:	4293      	cmp	r3, r2
 80163bc:	d803      	bhi.n	80163c6 <__any_on+0x36>
 80163be:	2000      	movs	r0, #0
 80163c0:	bd10      	pop	{r4, pc}
 80163c2:	4603      	mov	r3, r0
 80163c4:	e7f7      	b.n	80163b6 <__any_on+0x26>
 80163c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80163ca:	2900      	cmp	r1, #0
 80163cc:	d0f5      	beq.n	80163ba <__any_on+0x2a>
 80163ce:	2001      	movs	r0, #1
 80163d0:	e7f6      	b.n	80163c0 <__any_on+0x30>

080163d2 <__ascii_wctomb>:
 80163d2:	4603      	mov	r3, r0
 80163d4:	4608      	mov	r0, r1
 80163d6:	b141      	cbz	r1, 80163ea <__ascii_wctomb+0x18>
 80163d8:	2aff      	cmp	r2, #255	@ 0xff
 80163da:	d904      	bls.n	80163e6 <__ascii_wctomb+0x14>
 80163dc:	228a      	movs	r2, #138	@ 0x8a
 80163de:	601a      	str	r2, [r3, #0]
 80163e0:	f04f 30ff 	mov.w	r0, #4294967295
 80163e4:	4770      	bx	lr
 80163e6:	700a      	strb	r2, [r1, #0]
 80163e8:	2001      	movs	r0, #1
 80163ea:	4770      	bx	lr

080163ec <__sfputc_r>:
 80163ec:	6893      	ldr	r3, [r2, #8]
 80163ee:	3b01      	subs	r3, #1
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	b410      	push	{r4}
 80163f4:	6093      	str	r3, [r2, #8]
 80163f6:	da08      	bge.n	801640a <__sfputc_r+0x1e>
 80163f8:	6994      	ldr	r4, [r2, #24]
 80163fa:	42a3      	cmp	r3, r4
 80163fc:	db01      	blt.n	8016402 <__sfputc_r+0x16>
 80163fe:	290a      	cmp	r1, #10
 8016400:	d103      	bne.n	801640a <__sfputc_r+0x1e>
 8016402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016406:	f000 b9df 	b.w	80167c8 <__swbuf_r>
 801640a:	6813      	ldr	r3, [r2, #0]
 801640c:	1c58      	adds	r0, r3, #1
 801640e:	6010      	str	r0, [r2, #0]
 8016410:	7019      	strb	r1, [r3, #0]
 8016412:	4608      	mov	r0, r1
 8016414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016418:	4770      	bx	lr

0801641a <__sfputs_r>:
 801641a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801641c:	4606      	mov	r6, r0
 801641e:	460f      	mov	r7, r1
 8016420:	4614      	mov	r4, r2
 8016422:	18d5      	adds	r5, r2, r3
 8016424:	42ac      	cmp	r4, r5
 8016426:	d101      	bne.n	801642c <__sfputs_r+0x12>
 8016428:	2000      	movs	r0, #0
 801642a:	e007      	b.n	801643c <__sfputs_r+0x22>
 801642c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016430:	463a      	mov	r2, r7
 8016432:	4630      	mov	r0, r6
 8016434:	f7ff ffda 	bl	80163ec <__sfputc_r>
 8016438:	1c43      	adds	r3, r0, #1
 801643a:	d1f3      	bne.n	8016424 <__sfputs_r+0xa>
 801643c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016440 <_vfiprintf_r>:
 8016440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016444:	460d      	mov	r5, r1
 8016446:	b09d      	sub	sp, #116	@ 0x74
 8016448:	4614      	mov	r4, r2
 801644a:	4698      	mov	r8, r3
 801644c:	4606      	mov	r6, r0
 801644e:	b118      	cbz	r0, 8016458 <_vfiprintf_r+0x18>
 8016450:	6a03      	ldr	r3, [r0, #32]
 8016452:	b90b      	cbnz	r3, 8016458 <_vfiprintf_r+0x18>
 8016454:	f7fd fee2 	bl	801421c <__sinit>
 8016458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801645a:	07d9      	lsls	r1, r3, #31
 801645c:	d405      	bmi.n	801646a <_vfiprintf_r+0x2a>
 801645e:	89ab      	ldrh	r3, [r5, #12]
 8016460:	059a      	lsls	r2, r3, #22
 8016462:	d402      	bmi.n	801646a <_vfiprintf_r+0x2a>
 8016464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016466:	f7fe f8ba 	bl	80145de <__retarget_lock_acquire_recursive>
 801646a:	89ab      	ldrh	r3, [r5, #12]
 801646c:	071b      	lsls	r3, r3, #28
 801646e:	d501      	bpl.n	8016474 <_vfiprintf_r+0x34>
 8016470:	692b      	ldr	r3, [r5, #16]
 8016472:	b99b      	cbnz	r3, 801649c <_vfiprintf_r+0x5c>
 8016474:	4629      	mov	r1, r5
 8016476:	4630      	mov	r0, r6
 8016478:	f000 f9e4 	bl	8016844 <__swsetup_r>
 801647c:	b170      	cbz	r0, 801649c <_vfiprintf_r+0x5c>
 801647e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016480:	07dc      	lsls	r4, r3, #31
 8016482:	d504      	bpl.n	801648e <_vfiprintf_r+0x4e>
 8016484:	f04f 30ff 	mov.w	r0, #4294967295
 8016488:	b01d      	add	sp, #116	@ 0x74
 801648a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801648e:	89ab      	ldrh	r3, [r5, #12]
 8016490:	0598      	lsls	r0, r3, #22
 8016492:	d4f7      	bmi.n	8016484 <_vfiprintf_r+0x44>
 8016494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016496:	f7fe f8a3 	bl	80145e0 <__retarget_lock_release_recursive>
 801649a:	e7f3      	b.n	8016484 <_vfiprintf_r+0x44>
 801649c:	2300      	movs	r3, #0
 801649e:	9309      	str	r3, [sp, #36]	@ 0x24
 80164a0:	2320      	movs	r3, #32
 80164a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80164a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80164aa:	2330      	movs	r3, #48	@ 0x30
 80164ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801665c <_vfiprintf_r+0x21c>
 80164b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80164b4:	f04f 0901 	mov.w	r9, #1
 80164b8:	4623      	mov	r3, r4
 80164ba:	469a      	mov	sl, r3
 80164bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164c0:	b10a      	cbz	r2, 80164c6 <_vfiprintf_r+0x86>
 80164c2:	2a25      	cmp	r2, #37	@ 0x25
 80164c4:	d1f9      	bne.n	80164ba <_vfiprintf_r+0x7a>
 80164c6:	ebba 0b04 	subs.w	fp, sl, r4
 80164ca:	d00b      	beq.n	80164e4 <_vfiprintf_r+0xa4>
 80164cc:	465b      	mov	r3, fp
 80164ce:	4622      	mov	r2, r4
 80164d0:	4629      	mov	r1, r5
 80164d2:	4630      	mov	r0, r6
 80164d4:	f7ff ffa1 	bl	801641a <__sfputs_r>
 80164d8:	3001      	adds	r0, #1
 80164da:	f000 80a7 	beq.w	801662c <_vfiprintf_r+0x1ec>
 80164de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80164e0:	445a      	add	r2, fp
 80164e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80164e4:	f89a 3000 	ldrb.w	r3, [sl]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f000 809f 	beq.w	801662c <_vfiprintf_r+0x1ec>
 80164ee:	2300      	movs	r3, #0
 80164f0:	f04f 32ff 	mov.w	r2, #4294967295
 80164f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164f8:	f10a 0a01 	add.w	sl, sl, #1
 80164fc:	9304      	str	r3, [sp, #16]
 80164fe:	9307      	str	r3, [sp, #28]
 8016500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016504:	931a      	str	r3, [sp, #104]	@ 0x68
 8016506:	4654      	mov	r4, sl
 8016508:	2205      	movs	r2, #5
 801650a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801650e:	4853      	ldr	r0, [pc, #332]	@ (801665c <_vfiprintf_r+0x21c>)
 8016510:	f7e9 fee6 	bl	80002e0 <memchr>
 8016514:	9a04      	ldr	r2, [sp, #16]
 8016516:	b9d8      	cbnz	r0, 8016550 <_vfiprintf_r+0x110>
 8016518:	06d1      	lsls	r1, r2, #27
 801651a:	bf44      	itt	mi
 801651c:	2320      	movmi	r3, #32
 801651e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016522:	0713      	lsls	r3, r2, #28
 8016524:	bf44      	itt	mi
 8016526:	232b      	movmi	r3, #43	@ 0x2b
 8016528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801652c:	f89a 3000 	ldrb.w	r3, [sl]
 8016530:	2b2a      	cmp	r3, #42	@ 0x2a
 8016532:	d015      	beq.n	8016560 <_vfiprintf_r+0x120>
 8016534:	9a07      	ldr	r2, [sp, #28]
 8016536:	4654      	mov	r4, sl
 8016538:	2000      	movs	r0, #0
 801653a:	f04f 0c0a 	mov.w	ip, #10
 801653e:	4621      	mov	r1, r4
 8016540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016544:	3b30      	subs	r3, #48	@ 0x30
 8016546:	2b09      	cmp	r3, #9
 8016548:	d94b      	bls.n	80165e2 <_vfiprintf_r+0x1a2>
 801654a:	b1b0      	cbz	r0, 801657a <_vfiprintf_r+0x13a>
 801654c:	9207      	str	r2, [sp, #28]
 801654e:	e014      	b.n	801657a <_vfiprintf_r+0x13a>
 8016550:	eba0 0308 	sub.w	r3, r0, r8
 8016554:	fa09 f303 	lsl.w	r3, r9, r3
 8016558:	4313      	orrs	r3, r2
 801655a:	9304      	str	r3, [sp, #16]
 801655c:	46a2      	mov	sl, r4
 801655e:	e7d2      	b.n	8016506 <_vfiprintf_r+0xc6>
 8016560:	9b03      	ldr	r3, [sp, #12]
 8016562:	1d19      	adds	r1, r3, #4
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	9103      	str	r1, [sp, #12]
 8016568:	2b00      	cmp	r3, #0
 801656a:	bfbb      	ittet	lt
 801656c:	425b      	neglt	r3, r3
 801656e:	f042 0202 	orrlt.w	r2, r2, #2
 8016572:	9307      	strge	r3, [sp, #28]
 8016574:	9307      	strlt	r3, [sp, #28]
 8016576:	bfb8      	it	lt
 8016578:	9204      	strlt	r2, [sp, #16]
 801657a:	7823      	ldrb	r3, [r4, #0]
 801657c:	2b2e      	cmp	r3, #46	@ 0x2e
 801657e:	d10a      	bne.n	8016596 <_vfiprintf_r+0x156>
 8016580:	7863      	ldrb	r3, [r4, #1]
 8016582:	2b2a      	cmp	r3, #42	@ 0x2a
 8016584:	d132      	bne.n	80165ec <_vfiprintf_r+0x1ac>
 8016586:	9b03      	ldr	r3, [sp, #12]
 8016588:	1d1a      	adds	r2, r3, #4
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	9203      	str	r2, [sp, #12]
 801658e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016592:	3402      	adds	r4, #2
 8016594:	9305      	str	r3, [sp, #20]
 8016596:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801666c <_vfiprintf_r+0x22c>
 801659a:	7821      	ldrb	r1, [r4, #0]
 801659c:	2203      	movs	r2, #3
 801659e:	4650      	mov	r0, sl
 80165a0:	f7e9 fe9e 	bl	80002e0 <memchr>
 80165a4:	b138      	cbz	r0, 80165b6 <_vfiprintf_r+0x176>
 80165a6:	9b04      	ldr	r3, [sp, #16]
 80165a8:	eba0 000a 	sub.w	r0, r0, sl
 80165ac:	2240      	movs	r2, #64	@ 0x40
 80165ae:	4082      	lsls	r2, r0
 80165b0:	4313      	orrs	r3, r2
 80165b2:	3401      	adds	r4, #1
 80165b4:	9304      	str	r3, [sp, #16]
 80165b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165ba:	4829      	ldr	r0, [pc, #164]	@ (8016660 <_vfiprintf_r+0x220>)
 80165bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80165c0:	2206      	movs	r2, #6
 80165c2:	f7e9 fe8d 	bl	80002e0 <memchr>
 80165c6:	2800      	cmp	r0, #0
 80165c8:	d03f      	beq.n	801664a <_vfiprintf_r+0x20a>
 80165ca:	4b26      	ldr	r3, [pc, #152]	@ (8016664 <_vfiprintf_r+0x224>)
 80165cc:	bb1b      	cbnz	r3, 8016616 <_vfiprintf_r+0x1d6>
 80165ce:	9b03      	ldr	r3, [sp, #12]
 80165d0:	3307      	adds	r3, #7
 80165d2:	f023 0307 	bic.w	r3, r3, #7
 80165d6:	3308      	adds	r3, #8
 80165d8:	9303      	str	r3, [sp, #12]
 80165da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80165dc:	443b      	add	r3, r7
 80165de:	9309      	str	r3, [sp, #36]	@ 0x24
 80165e0:	e76a      	b.n	80164b8 <_vfiprintf_r+0x78>
 80165e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80165e6:	460c      	mov	r4, r1
 80165e8:	2001      	movs	r0, #1
 80165ea:	e7a8      	b.n	801653e <_vfiprintf_r+0xfe>
 80165ec:	2300      	movs	r3, #0
 80165ee:	3401      	adds	r4, #1
 80165f0:	9305      	str	r3, [sp, #20]
 80165f2:	4619      	mov	r1, r3
 80165f4:	f04f 0c0a 	mov.w	ip, #10
 80165f8:	4620      	mov	r0, r4
 80165fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165fe:	3a30      	subs	r2, #48	@ 0x30
 8016600:	2a09      	cmp	r2, #9
 8016602:	d903      	bls.n	801660c <_vfiprintf_r+0x1cc>
 8016604:	2b00      	cmp	r3, #0
 8016606:	d0c6      	beq.n	8016596 <_vfiprintf_r+0x156>
 8016608:	9105      	str	r1, [sp, #20]
 801660a:	e7c4      	b.n	8016596 <_vfiprintf_r+0x156>
 801660c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016610:	4604      	mov	r4, r0
 8016612:	2301      	movs	r3, #1
 8016614:	e7f0      	b.n	80165f8 <_vfiprintf_r+0x1b8>
 8016616:	ab03      	add	r3, sp, #12
 8016618:	9300      	str	r3, [sp, #0]
 801661a:	462a      	mov	r2, r5
 801661c:	4b12      	ldr	r3, [pc, #72]	@ (8016668 <_vfiprintf_r+0x228>)
 801661e:	a904      	add	r1, sp, #16
 8016620:	4630      	mov	r0, r6
 8016622:	f7fd f9c9 	bl	80139b8 <_printf_float>
 8016626:	4607      	mov	r7, r0
 8016628:	1c78      	adds	r0, r7, #1
 801662a:	d1d6      	bne.n	80165da <_vfiprintf_r+0x19a>
 801662c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801662e:	07d9      	lsls	r1, r3, #31
 8016630:	d405      	bmi.n	801663e <_vfiprintf_r+0x1fe>
 8016632:	89ab      	ldrh	r3, [r5, #12]
 8016634:	059a      	lsls	r2, r3, #22
 8016636:	d402      	bmi.n	801663e <_vfiprintf_r+0x1fe>
 8016638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801663a:	f7fd ffd1 	bl	80145e0 <__retarget_lock_release_recursive>
 801663e:	89ab      	ldrh	r3, [r5, #12]
 8016640:	065b      	lsls	r3, r3, #25
 8016642:	f53f af1f 	bmi.w	8016484 <_vfiprintf_r+0x44>
 8016646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016648:	e71e      	b.n	8016488 <_vfiprintf_r+0x48>
 801664a:	ab03      	add	r3, sp, #12
 801664c:	9300      	str	r3, [sp, #0]
 801664e:	462a      	mov	r2, r5
 8016650:	4b05      	ldr	r3, [pc, #20]	@ (8016668 <_vfiprintf_r+0x228>)
 8016652:	a904      	add	r1, sp, #16
 8016654:	4630      	mov	r0, r6
 8016656:	f7fd fc37 	bl	8013ec8 <_printf_i>
 801665a:	e7e4      	b.n	8016626 <_vfiprintf_r+0x1e6>
 801665c:	080173f8 	.word	0x080173f8
 8016660:	08017402 	.word	0x08017402
 8016664:	080139b9 	.word	0x080139b9
 8016668:	0801641b 	.word	0x0801641b
 801666c:	080173fe 	.word	0x080173fe

08016670 <__sflush_r>:
 8016670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016678:	0716      	lsls	r6, r2, #28
 801667a:	4605      	mov	r5, r0
 801667c:	460c      	mov	r4, r1
 801667e:	d454      	bmi.n	801672a <__sflush_r+0xba>
 8016680:	684b      	ldr	r3, [r1, #4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	dc02      	bgt.n	801668c <__sflush_r+0x1c>
 8016686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016688:	2b00      	cmp	r3, #0
 801668a:	dd48      	ble.n	801671e <__sflush_r+0xae>
 801668c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801668e:	2e00      	cmp	r6, #0
 8016690:	d045      	beq.n	801671e <__sflush_r+0xae>
 8016692:	2300      	movs	r3, #0
 8016694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016698:	682f      	ldr	r7, [r5, #0]
 801669a:	6a21      	ldr	r1, [r4, #32]
 801669c:	602b      	str	r3, [r5, #0]
 801669e:	d030      	beq.n	8016702 <__sflush_r+0x92>
 80166a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80166a2:	89a3      	ldrh	r3, [r4, #12]
 80166a4:	0759      	lsls	r1, r3, #29
 80166a6:	d505      	bpl.n	80166b4 <__sflush_r+0x44>
 80166a8:	6863      	ldr	r3, [r4, #4]
 80166aa:	1ad2      	subs	r2, r2, r3
 80166ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80166ae:	b10b      	cbz	r3, 80166b4 <__sflush_r+0x44>
 80166b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80166b2:	1ad2      	subs	r2, r2, r3
 80166b4:	2300      	movs	r3, #0
 80166b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80166b8:	6a21      	ldr	r1, [r4, #32]
 80166ba:	4628      	mov	r0, r5
 80166bc:	47b0      	blx	r6
 80166be:	1c43      	adds	r3, r0, #1
 80166c0:	89a3      	ldrh	r3, [r4, #12]
 80166c2:	d106      	bne.n	80166d2 <__sflush_r+0x62>
 80166c4:	6829      	ldr	r1, [r5, #0]
 80166c6:	291d      	cmp	r1, #29
 80166c8:	d82b      	bhi.n	8016722 <__sflush_r+0xb2>
 80166ca:	4a2a      	ldr	r2, [pc, #168]	@ (8016774 <__sflush_r+0x104>)
 80166cc:	40ca      	lsrs	r2, r1
 80166ce:	07d6      	lsls	r6, r2, #31
 80166d0:	d527      	bpl.n	8016722 <__sflush_r+0xb2>
 80166d2:	2200      	movs	r2, #0
 80166d4:	6062      	str	r2, [r4, #4]
 80166d6:	04d9      	lsls	r1, r3, #19
 80166d8:	6922      	ldr	r2, [r4, #16]
 80166da:	6022      	str	r2, [r4, #0]
 80166dc:	d504      	bpl.n	80166e8 <__sflush_r+0x78>
 80166de:	1c42      	adds	r2, r0, #1
 80166e0:	d101      	bne.n	80166e6 <__sflush_r+0x76>
 80166e2:	682b      	ldr	r3, [r5, #0]
 80166e4:	b903      	cbnz	r3, 80166e8 <__sflush_r+0x78>
 80166e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80166e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80166ea:	602f      	str	r7, [r5, #0]
 80166ec:	b1b9      	cbz	r1, 801671e <__sflush_r+0xae>
 80166ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80166f2:	4299      	cmp	r1, r3
 80166f4:	d002      	beq.n	80166fc <__sflush_r+0x8c>
 80166f6:	4628      	mov	r0, r5
 80166f8:	f7fe fd78 	bl	80151ec <_free_r>
 80166fc:	2300      	movs	r3, #0
 80166fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8016700:	e00d      	b.n	801671e <__sflush_r+0xae>
 8016702:	2301      	movs	r3, #1
 8016704:	4628      	mov	r0, r5
 8016706:	47b0      	blx	r6
 8016708:	4602      	mov	r2, r0
 801670a:	1c50      	adds	r0, r2, #1
 801670c:	d1c9      	bne.n	80166a2 <__sflush_r+0x32>
 801670e:	682b      	ldr	r3, [r5, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d0c6      	beq.n	80166a2 <__sflush_r+0x32>
 8016714:	2b1d      	cmp	r3, #29
 8016716:	d001      	beq.n	801671c <__sflush_r+0xac>
 8016718:	2b16      	cmp	r3, #22
 801671a:	d11e      	bne.n	801675a <__sflush_r+0xea>
 801671c:	602f      	str	r7, [r5, #0]
 801671e:	2000      	movs	r0, #0
 8016720:	e022      	b.n	8016768 <__sflush_r+0xf8>
 8016722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016726:	b21b      	sxth	r3, r3
 8016728:	e01b      	b.n	8016762 <__sflush_r+0xf2>
 801672a:	690f      	ldr	r7, [r1, #16]
 801672c:	2f00      	cmp	r7, #0
 801672e:	d0f6      	beq.n	801671e <__sflush_r+0xae>
 8016730:	0793      	lsls	r3, r2, #30
 8016732:	680e      	ldr	r6, [r1, #0]
 8016734:	bf08      	it	eq
 8016736:	694b      	ldreq	r3, [r1, #20]
 8016738:	600f      	str	r7, [r1, #0]
 801673a:	bf18      	it	ne
 801673c:	2300      	movne	r3, #0
 801673e:	eba6 0807 	sub.w	r8, r6, r7
 8016742:	608b      	str	r3, [r1, #8]
 8016744:	f1b8 0f00 	cmp.w	r8, #0
 8016748:	dde9      	ble.n	801671e <__sflush_r+0xae>
 801674a:	6a21      	ldr	r1, [r4, #32]
 801674c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801674e:	4643      	mov	r3, r8
 8016750:	463a      	mov	r2, r7
 8016752:	4628      	mov	r0, r5
 8016754:	47b0      	blx	r6
 8016756:	2800      	cmp	r0, #0
 8016758:	dc08      	bgt.n	801676c <__sflush_r+0xfc>
 801675a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801675e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016762:	81a3      	strh	r3, [r4, #12]
 8016764:	f04f 30ff 	mov.w	r0, #4294967295
 8016768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801676c:	4407      	add	r7, r0
 801676e:	eba8 0800 	sub.w	r8, r8, r0
 8016772:	e7e7      	b.n	8016744 <__sflush_r+0xd4>
 8016774:	20400001 	.word	0x20400001

08016778 <_fflush_r>:
 8016778:	b538      	push	{r3, r4, r5, lr}
 801677a:	690b      	ldr	r3, [r1, #16]
 801677c:	4605      	mov	r5, r0
 801677e:	460c      	mov	r4, r1
 8016780:	b913      	cbnz	r3, 8016788 <_fflush_r+0x10>
 8016782:	2500      	movs	r5, #0
 8016784:	4628      	mov	r0, r5
 8016786:	bd38      	pop	{r3, r4, r5, pc}
 8016788:	b118      	cbz	r0, 8016792 <_fflush_r+0x1a>
 801678a:	6a03      	ldr	r3, [r0, #32]
 801678c:	b90b      	cbnz	r3, 8016792 <_fflush_r+0x1a>
 801678e:	f7fd fd45 	bl	801421c <__sinit>
 8016792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d0f3      	beq.n	8016782 <_fflush_r+0xa>
 801679a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801679c:	07d0      	lsls	r0, r2, #31
 801679e:	d404      	bmi.n	80167aa <_fflush_r+0x32>
 80167a0:	0599      	lsls	r1, r3, #22
 80167a2:	d402      	bmi.n	80167aa <_fflush_r+0x32>
 80167a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80167a6:	f7fd ff1a 	bl	80145de <__retarget_lock_acquire_recursive>
 80167aa:	4628      	mov	r0, r5
 80167ac:	4621      	mov	r1, r4
 80167ae:	f7ff ff5f 	bl	8016670 <__sflush_r>
 80167b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80167b4:	07da      	lsls	r2, r3, #31
 80167b6:	4605      	mov	r5, r0
 80167b8:	d4e4      	bmi.n	8016784 <_fflush_r+0xc>
 80167ba:	89a3      	ldrh	r3, [r4, #12]
 80167bc:	059b      	lsls	r3, r3, #22
 80167be:	d4e1      	bmi.n	8016784 <_fflush_r+0xc>
 80167c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80167c2:	f7fd ff0d 	bl	80145e0 <__retarget_lock_release_recursive>
 80167c6:	e7dd      	b.n	8016784 <_fflush_r+0xc>

080167c8 <__swbuf_r>:
 80167c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ca:	460e      	mov	r6, r1
 80167cc:	4614      	mov	r4, r2
 80167ce:	4605      	mov	r5, r0
 80167d0:	b118      	cbz	r0, 80167da <__swbuf_r+0x12>
 80167d2:	6a03      	ldr	r3, [r0, #32]
 80167d4:	b90b      	cbnz	r3, 80167da <__swbuf_r+0x12>
 80167d6:	f7fd fd21 	bl	801421c <__sinit>
 80167da:	69a3      	ldr	r3, [r4, #24]
 80167dc:	60a3      	str	r3, [r4, #8]
 80167de:	89a3      	ldrh	r3, [r4, #12]
 80167e0:	071a      	lsls	r2, r3, #28
 80167e2:	d501      	bpl.n	80167e8 <__swbuf_r+0x20>
 80167e4:	6923      	ldr	r3, [r4, #16]
 80167e6:	b943      	cbnz	r3, 80167fa <__swbuf_r+0x32>
 80167e8:	4621      	mov	r1, r4
 80167ea:	4628      	mov	r0, r5
 80167ec:	f000 f82a 	bl	8016844 <__swsetup_r>
 80167f0:	b118      	cbz	r0, 80167fa <__swbuf_r+0x32>
 80167f2:	f04f 37ff 	mov.w	r7, #4294967295
 80167f6:	4638      	mov	r0, r7
 80167f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	6922      	ldr	r2, [r4, #16]
 80167fe:	1a98      	subs	r0, r3, r2
 8016800:	6963      	ldr	r3, [r4, #20]
 8016802:	b2f6      	uxtb	r6, r6
 8016804:	4283      	cmp	r3, r0
 8016806:	4637      	mov	r7, r6
 8016808:	dc05      	bgt.n	8016816 <__swbuf_r+0x4e>
 801680a:	4621      	mov	r1, r4
 801680c:	4628      	mov	r0, r5
 801680e:	f7ff ffb3 	bl	8016778 <_fflush_r>
 8016812:	2800      	cmp	r0, #0
 8016814:	d1ed      	bne.n	80167f2 <__swbuf_r+0x2a>
 8016816:	68a3      	ldr	r3, [r4, #8]
 8016818:	3b01      	subs	r3, #1
 801681a:	60a3      	str	r3, [r4, #8]
 801681c:	6823      	ldr	r3, [r4, #0]
 801681e:	1c5a      	adds	r2, r3, #1
 8016820:	6022      	str	r2, [r4, #0]
 8016822:	701e      	strb	r6, [r3, #0]
 8016824:	6962      	ldr	r2, [r4, #20]
 8016826:	1c43      	adds	r3, r0, #1
 8016828:	429a      	cmp	r2, r3
 801682a:	d004      	beq.n	8016836 <__swbuf_r+0x6e>
 801682c:	89a3      	ldrh	r3, [r4, #12]
 801682e:	07db      	lsls	r3, r3, #31
 8016830:	d5e1      	bpl.n	80167f6 <__swbuf_r+0x2e>
 8016832:	2e0a      	cmp	r6, #10
 8016834:	d1df      	bne.n	80167f6 <__swbuf_r+0x2e>
 8016836:	4621      	mov	r1, r4
 8016838:	4628      	mov	r0, r5
 801683a:	f7ff ff9d 	bl	8016778 <_fflush_r>
 801683e:	2800      	cmp	r0, #0
 8016840:	d0d9      	beq.n	80167f6 <__swbuf_r+0x2e>
 8016842:	e7d6      	b.n	80167f2 <__swbuf_r+0x2a>

08016844 <__swsetup_r>:
 8016844:	b538      	push	{r3, r4, r5, lr}
 8016846:	4b29      	ldr	r3, [pc, #164]	@ (80168ec <__swsetup_r+0xa8>)
 8016848:	4605      	mov	r5, r0
 801684a:	6818      	ldr	r0, [r3, #0]
 801684c:	460c      	mov	r4, r1
 801684e:	b118      	cbz	r0, 8016858 <__swsetup_r+0x14>
 8016850:	6a03      	ldr	r3, [r0, #32]
 8016852:	b90b      	cbnz	r3, 8016858 <__swsetup_r+0x14>
 8016854:	f7fd fce2 	bl	801421c <__sinit>
 8016858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801685c:	0719      	lsls	r1, r3, #28
 801685e:	d422      	bmi.n	80168a6 <__swsetup_r+0x62>
 8016860:	06da      	lsls	r2, r3, #27
 8016862:	d407      	bmi.n	8016874 <__swsetup_r+0x30>
 8016864:	2209      	movs	r2, #9
 8016866:	602a      	str	r2, [r5, #0]
 8016868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801686c:	81a3      	strh	r3, [r4, #12]
 801686e:	f04f 30ff 	mov.w	r0, #4294967295
 8016872:	e033      	b.n	80168dc <__swsetup_r+0x98>
 8016874:	0758      	lsls	r0, r3, #29
 8016876:	d512      	bpl.n	801689e <__swsetup_r+0x5a>
 8016878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801687a:	b141      	cbz	r1, 801688e <__swsetup_r+0x4a>
 801687c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016880:	4299      	cmp	r1, r3
 8016882:	d002      	beq.n	801688a <__swsetup_r+0x46>
 8016884:	4628      	mov	r0, r5
 8016886:	f7fe fcb1 	bl	80151ec <_free_r>
 801688a:	2300      	movs	r3, #0
 801688c:	6363      	str	r3, [r4, #52]	@ 0x34
 801688e:	89a3      	ldrh	r3, [r4, #12]
 8016890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016894:	81a3      	strh	r3, [r4, #12]
 8016896:	2300      	movs	r3, #0
 8016898:	6063      	str	r3, [r4, #4]
 801689a:	6923      	ldr	r3, [r4, #16]
 801689c:	6023      	str	r3, [r4, #0]
 801689e:	89a3      	ldrh	r3, [r4, #12]
 80168a0:	f043 0308 	orr.w	r3, r3, #8
 80168a4:	81a3      	strh	r3, [r4, #12]
 80168a6:	6923      	ldr	r3, [r4, #16]
 80168a8:	b94b      	cbnz	r3, 80168be <__swsetup_r+0x7a>
 80168aa:	89a3      	ldrh	r3, [r4, #12]
 80168ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80168b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80168b4:	d003      	beq.n	80168be <__swsetup_r+0x7a>
 80168b6:	4621      	mov	r1, r4
 80168b8:	4628      	mov	r0, r5
 80168ba:	f000 f893 	bl	80169e4 <__smakebuf_r>
 80168be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168c2:	f013 0201 	ands.w	r2, r3, #1
 80168c6:	d00a      	beq.n	80168de <__swsetup_r+0x9a>
 80168c8:	2200      	movs	r2, #0
 80168ca:	60a2      	str	r2, [r4, #8]
 80168cc:	6962      	ldr	r2, [r4, #20]
 80168ce:	4252      	negs	r2, r2
 80168d0:	61a2      	str	r2, [r4, #24]
 80168d2:	6922      	ldr	r2, [r4, #16]
 80168d4:	b942      	cbnz	r2, 80168e8 <__swsetup_r+0xa4>
 80168d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80168da:	d1c5      	bne.n	8016868 <__swsetup_r+0x24>
 80168dc:	bd38      	pop	{r3, r4, r5, pc}
 80168de:	0799      	lsls	r1, r3, #30
 80168e0:	bf58      	it	pl
 80168e2:	6962      	ldrpl	r2, [r4, #20]
 80168e4:	60a2      	str	r2, [r4, #8]
 80168e6:	e7f4      	b.n	80168d2 <__swsetup_r+0x8e>
 80168e8:	2000      	movs	r0, #0
 80168ea:	e7f7      	b.n	80168dc <__swsetup_r+0x98>
 80168ec:	240001f8 	.word	0x240001f8

080168f0 <_sbrk_r>:
 80168f0:	b538      	push	{r3, r4, r5, lr}
 80168f2:	4d06      	ldr	r5, [pc, #24]	@ (801690c <_sbrk_r+0x1c>)
 80168f4:	2300      	movs	r3, #0
 80168f6:	4604      	mov	r4, r0
 80168f8:	4608      	mov	r0, r1
 80168fa:	602b      	str	r3, [r5, #0]
 80168fc:	f7ef f9ea 	bl	8005cd4 <_sbrk>
 8016900:	1c43      	adds	r3, r0, #1
 8016902:	d102      	bne.n	801690a <_sbrk_r+0x1a>
 8016904:	682b      	ldr	r3, [r5, #0]
 8016906:	b103      	cbz	r3, 801690a <_sbrk_r+0x1a>
 8016908:	6023      	str	r3, [r4, #0]
 801690a:	bd38      	pop	{r3, r4, r5, pc}
 801690c:	24007500 	.word	0x24007500

08016910 <__assert_func>:
 8016910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016912:	4614      	mov	r4, r2
 8016914:	461a      	mov	r2, r3
 8016916:	4b09      	ldr	r3, [pc, #36]	@ (801693c <__assert_func+0x2c>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	4605      	mov	r5, r0
 801691c:	68d8      	ldr	r0, [r3, #12]
 801691e:	b14c      	cbz	r4, 8016934 <__assert_func+0x24>
 8016920:	4b07      	ldr	r3, [pc, #28]	@ (8016940 <__assert_func+0x30>)
 8016922:	9100      	str	r1, [sp, #0]
 8016924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016928:	4906      	ldr	r1, [pc, #24]	@ (8016944 <__assert_func+0x34>)
 801692a:	462b      	mov	r3, r5
 801692c:	f000 f822 	bl	8016974 <fiprintf>
 8016930:	f000 f8b6 	bl	8016aa0 <abort>
 8016934:	4b04      	ldr	r3, [pc, #16]	@ (8016948 <__assert_func+0x38>)
 8016936:	461c      	mov	r4, r3
 8016938:	e7f3      	b.n	8016922 <__assert_func+0x12>
 801693a:	bf00      	nop
 801693c:	240001f8 	.word	0x240001f8
 8016940:	08017409 	.word	0x08017409
 8016944:	08017416 	.word	0x08017416
 8016948:	08017444 	.word	0x08017444

0801694c <_calloc_r>:
 801694c:	b570      	push	{r4, r5, r6, lr}
 801694e:	fba1 5402 	umull	r5, r4, r1, r2
 8016952:	b934      	cbnz	r4, 8016962 <_calloc_r+0x16>
 8016954:	4629      	mov	r1, r5
 8016956:	f7fe fff7 	bl	8015948 <_malloc_r>
 801695a:	4606      	mov	r6, r0
 801695c:	b928      	cbnz	r0, 801696a <_calloc_r+0x1e>
 801695e:	4630      	mov	r0, r6
 8016960:	bd70      	pop	{r4, r5, r6, pc}
 8016962:	220c      	movs	r2, #12
 8016964:	6002      	str	r2, [r0, #0]
 8016966:	2600      	movs	r6, #0
 8016968:	e7f9      	b.n	801695e <_calloc_r+0x12>
 801696a:	462a      	mov	r2, r5
 801696c:	4621      	mov	r1, r4
 801696e:	f7fd fcfa 	bl	8014366 <memset>
 8016972:	e7f4      	b.n	801695e <_calloc_r+0x12>

08016974 <fiprintf>:
 8016974:	b40e      	push	{r1, r2, r3}
 8016976:	b503      	push	{r0, r1, lr}
 8016978:	4601      	mov	r1, r0
 801697a:	ab03      	add	r3, sp, #12
 801697c:	4805      	ldr	r0, [pc, #20]	@ (8016994 <fiprintf+0x20>)
 801697e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016982:	6800      	ldr	r0, [r0, #0]
 8016984:	9301      	str	r3, [sp, #4]
 8016986:	f7ff fd5b 	bl	8016440 <_vfiprintf_r>
 801698a:	b002      	add	sp, #8
 801698c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016990:	b003      	add	sp, #12
 8016992:	4770      	bx	lr
 8016994:	240001f8 	.word	0x240001f8

08016998 <__swhatbuf_r>:
 8016998:	b570      	push	{r4, r5, r6, lr}
 801699a:	460c      	mov	r4, r1
 801699c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169a0:	2900      	cmp	r1, #0
 80169a2:	b096      	sub	sp, #88	@ 0x58
 80169a4:	4615      	mov	r5, r2
 80169a6:	461e      	mov	r6, r3
 80169a8:	da0d      	bge.n	80169c6 <__swhatbuf_r+0x2e>
 80169aa:	89a3      	ldrh	r3, [r4, #12]
 80169ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80169b0:	f04f 0100 	mov.w	r1, #0
 80169b4:	bf14      	ite	ne
 80169b6:	2340      	movne	r3, #64	@ 0x40
 80169b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80169bc:	2000      	movs	r0, #0
 80169be:	6031      	str	r1, [r6, #0]
 80169c0:	602b      	str	r3, [r5, #0]
 80169c2:	b016      	add	sp, #88	@ 0x58
 80169c4:	bd70      	pop	{r4, r5, r6, pc}
 80169c6:	466a      	mov	r2, sp
 80169c8:	f000 f848 	bl	8016a5c <_fstat_r>
 80169cc:	2800      	cmp	r0, #0
 80169ce:	dbec      	blt.n	80169aa <__swhatbuf_r+0x12>
 80169d0:	9901      	ldr	r1, [sp, #4]
 80169d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80169d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80169da:	4259      	negs	r1, r3
 80169dc:	4159      	adcs	r1, r3
 80169de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80169e2:	e7eb      	b.n	80169bc <__swhatbuf_r+0x24>

080169e4 <__smakebuf_r>:
 80169e4:	898b      	ldrh	r3, [r1, #12]
 80169e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169e8:	079d      	lsls	r5, r3, #30
 80169ea:	4606      	mov	r6, r0
 80169ec:	460c      	mov	r4, r1
 80169ee:	d507      	bpl.n	8016a00 <__smakebuf_r+0x1c>
 80169f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80169f4:	6023      	str	r3, [r4, #0]
 80169f6:	6123      	str	r3, [r4, #16]
 80169f8:	2301      	movs	r3, #1
 80169fa:	6163      	str	r3, [r4, #20]
 80169fc:	b003      	add	sp, #12
 80169fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a00:	ab01      	add	r3, sp, #4
 8016a02:	466a      	mov	r2, sp
 8016a04:	f7ff ffc8 	bl	8016998 <__swhatbuf_r>
 8016a08:	9f00      	ldr	r7, [sp, #0]
 8016a0a:	4605      	mov	r5, r0
 8016a0c:	4639      	mov	r1, r7
 8016a0e:	4630      	mov	r0, r6
 8016a10:	f7fe ff9a 	bl	8015948 <_malloc_r>
 8016a14:	b948      	cbnz	r0, 8016a2a <__smakebuf_r+0x46>
 8016a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a1a:	059a      	lsls	r2, r3, #22
 8016a1c:	d4ee      	bmi.n	80169fc <__smakebuf_r+0x18>
 8016a1e:	f023 0303 	bic.w	r3, r3, #3
 8016a22:	f043 0302 	orr.w	r3, r3, #2
 8016a26:	81a3      	strh	r3, [r4, #12]
 8016a28:	e7e2      	b.n	80169f0 <__smakebuf_r+0xc>
 8016a2a:	89a3      	ldrh	r3, [r4, #12]
 8016a2c:	6020      	str	r0, [r4, #0]
 8016a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a32:	81a3      	strh	r3, [r4, #12]
 8016a34:	9b01      	ldr	r3, [sp, #4]
 8016a36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016a3a:	b15b      	cbz	r3, 8016a54 <__smakebuf_r+0x70>
 8016a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a40:	4630      	mov	r0, r6
 8016a42:	f000 f81d 	bl	8016a80 <_isatty_r>
 8016a46:	b128      	cbz	r0, 8016a54 <__smakebuf_r+0x70>
 8016a48:	89a3      	ldrh	r3, [r4, #12]
 8016a4a:	f023 0303 	bic.w	r3, r3, #3
 8016a4e:	f043 0301 	orr.w	r3, r3, #1
 8016a52:	81a3      	strh	r3, [r4, #12]
 8016a54:	89a3      	ldrh	r3, [r4, #12]
 8016a56:	431d      	orrs	r5, r3
 8016a58:	81a5      	strh	r5, [r4, #12]
 8016a5a:	e7cf      	b.n	80169fc <__smakebuf_r+0x18>

08016a5c <_fstat_r>:
 8016a5c:	b538      	push	{r3, r4, r5, lr}
 8016a5e:	4d07      	ldr	r5, [pc, #28]	@ (8016a7c <_fstat_r+0x20>)
 8016a60:	2300      	movs	r3, #0
 8016a62:	4604      	mov	r4, r0
 8016a64:	4608      	mov	r0, r1
 8016a66:	4611      	mov	r1, r2
 8016a68:	602b      	str	r3, [r5, #0]
 8016a6a:	f7ef f90b 	bl	8005c84 <_fstat>
 8016a6e:	1c43      	adds	r3, r0, #1
 8016a70:	d102      	bne.n	8016a78 <_fstat_r+0x1c>
 8016a72:	682b      	ldr	r3, [r5, #0]
 8016a74:	b103      	cbz	r3, 8016a78 <_fstat_r+0x1c>
 8016a76:	6023      	str	r3, [r4, #0]
 8016a78:	bd38      	pop	{r3, r4, r5, pc}
 8016a7a:	bf00      	nop
 8016a7c:	24007500 	.word	0x24007500

08016a80 <_isatty_r>:
 8016a80:	b538      	push	{r3, r4, r5, lr}
 8016a82:	4d06      	ldr	r5, [pc, #24]	@ (8016a9c <_isatty_r+0x1c>)
 8016a84:	2300      	movs	r3, #0
 8016a86:	4604      	mov	r4, r0
 8016a88:	4608      	mov	r0, r1
 8016a8a:	602b      	str	r3, [r5, #0]
 8016a8c:	f7ef f90a 	bl	8005ca4 <_isatty>
 8016a90:	1c43      	adds	r3, r0, #1
 8016a92:	d102      	bne.n	8016a9a <_isatty_r+0x1a>
 8016a94:	682b      	ldr	r3, [r5, #0]
 8016a96:	b103      	cbz	r3, 8016a9a <_isatty_r+0x1a>
 8016a98:	6023      	str	r3, [r4, #0]
 8016a9a:	bd38      	pop	{r3, r4, r5, pc}
 8016a9c:	24007500 	.word	0x24007500

08016aa0 <abort>:
 8016aa0:	b508      	push	{r3, lr}
 8016aa2:	2006      	movs	r0, #6
 8016aa4:	f000 f82c 	bl	8016b00 <raise>
 8016aa8:	2001      	movs	r0, #1
 8016aaa:	f7ef f8b7 	bl	8005c1c <_exit>

08016aae <_raise_r>:
 8016aae:	291f      	cmp	r1, #31
 8016ab0:	b538      	push	{r3, r4, r5, lr}
 8016ab2:	4605      	mov	r5, r0
 8016ab4:	460c      	mov	r4, r1
 8016ab6:	d904      	bls.n	8016ac2 <_raise_r+0x14>
 8016ab8:	2316      	movs	r3, #22
 8016aba:	6003      	str	r3, [r0, #0]
 8016abc:	f04f 30ff 	mov.w	r0, #4294967295
 8016ac0:	bd38      	pop	{r3, r4, r5, pc}
 8016ac2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016ac4:	b112      	cbz	r2, 8016acc <_raise_r+0x1e>
 8016ac6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016aca:	b94b      	cbnz	r3, 8016ae0 <_raise_r+0x32>
 8016acc:	4628      	mov	r0, r5
 8016ace:	f000 f831 	bl	8016b34 <_getpid_r>
 8016ad2:	4622      	mov	r2, r4
 8016ad4:	4601      	mov	r1, r0
 8016ad6:	4628      	mov	r0, r5
 8016ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016adc:	f000 b818 	b.w	8016b10 <_kill_r>
 8016ae0:	2b01      	cmp	r3, #1
 8016ae2:	d00a      	beq.n	8016afa <_raise_r+0x4c>
 8016ae4:	1c59      	adds	r1, r3, #1
 8016ae6:	d103      	bne.n	8016af0 <_raise_r+0x42>
 8016ae8:	2316      	movs	r3, #22
 8016aea:	6003      	str	r3, [r0, #0]
 8016aec:	2001      	movs	r0, #1
 8016aee:	e7e7      	b.n	8016ac0 <_raise_r+0x12>
 8016af0:	2100      	movs	r1, #0
 8016af2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016af6:	4620      	mov	r0, r4
 8016af8:	4798      	blx	r3
 8016afa:	2000      	movs	r0, #0
 8016afc:	e7e0      	b.n	8016ac0 <_raise_r+0x12>
	...

08016b00 <raise>:
 8016b00:	4b02      	ldr	r3, [pc, #8]	@ (8016b0c <raise+0xc>)
 8016b02:	4601      	mov	r1, r0
 8016b04:	6818      	ldr	r0, [r3, #0]
 8016b06:	f7ff bfd2 	b.w	8016aae <_raise_r>
 8016b0a:	bf00      	nop
 8016b0c:	240001f8 	.word	0x240001f8

08016b10 <_kill_r>:
 8016b10:	b538      	push	{r3, r4, r5, lr}
 8016b12:	4d07      	ldr	r5, [pc, #28]	@ (8016b30 <_kill_r+0x20>)
 8016b14:	2300      	movs	r3, #0
 8016b16:	4604      	mov	r4, r0
 8016b18:	4608      	mov	r0, r1
 8016b1a:	4611      	mov	r1, r2
 8016b1c:	602b      	str	r3, [r5, #0]
 8016b1e:	f7ef f86d 	bl	8005bfc <_kill>
 8016b22:	1c43      	adds	r3, r0, #1
 8016b24:	d102      	bne.n	8016b2c <_kill_r+0x1c>
 8016b26:	682b      	ldr	r3, [r5, #0]
 8016b28:	b103      	cbz	r3, 8016b2c <_kill_r+0x1c>
 8016b2a:	6023      	str	r3, [r4, #0]
 8016b2c:	bd38      	pop	{r3, r4, r5, pc}
 8016b2e:	bf00      	nop
 8016b30:	24007500 	.word	0x24007500

08016b34 <_getpid_r>:
 8016b34:	f7ef b85a 	b.w	8005bec <_getpid>

08016b38 <fmax>:
 8016b38:	b508      	push	{r3, lr}
 8016b3a:	ed2d 8b04 	vpush	{d8-d9}
 8016b3e:	eeb0 8b40 	vmov.f64	d8, d0
 8016b42:	eeb0 9b41 	vmov.f64	d9, d1
 8016b46:	f000 f831 	bl	8016bac <__fpclassifyd>
 8016b4a:	b930      	cbnz	r0, 8016b5a <fmax+0x22>
 8016b4c:	eeb0 8b49 	vmov.f64	d8, d9
 8016b50:	eeb0 0b48 	vmov.f64	d0, d8
 8016b54:	ecbd 8b04 	vpop	{d8-d9}
 8016b58:	bd08      	pop	{r3, pc}
 8016b5a:	eeb0 0b49 	vmov.f64	d0, d9
 8016b5e:	f000 f825 	bl	8016bac <__fpclassifyd>
 8016b62:	2800      	cmp	r0, #0
 8016b64:	d0f4      	beq.n	8016b50 <fmax+0x18>
 8016b66:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8016b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b6e:	dded      	ble.n	8016b4c <fmax+0x14>
 8016b70:	e7ee      	b.n	8016b50 <fmax+0x18>

08016b72 <fmin>:
 8016b72:	b508      	push	{r3, lr}
 8016b74:	ed2d 8b04 	vpush	{d8-d9}
 8016b78:	eeb0 8b40 	vmov.f64	d8, d0
 8016b7c:	eeb0 9b41 	vmov.f64	d9, d1
 8016b80:	f000 f814 	bl	8016bac <__fpclassifyd>
 8016b84:	b930      	cbnz	r0, 8016b94 <fmin+0x22>
 8016b86:	eeb0 8b49 	vmov.f64	d8, d9
 8016b8a:	eeb0 0b48 	vmov.f64	d0, d8
 8016b8e:	ecbd 8b04 	vpop	{d8-d9}
 8016b92:	bd08      	pop	{r3, pc}
 8016b94:	eeb0 0b49 	vmov.f64	d0, d9
 8016b98:	f000 f808 	bl	8016bac <__fpclassifyd>
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	d0f4      	beq.n	8016b8a <fmin+0x18>
 8016ba0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8016ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ba8:	d5ed      	bpl.n	8016b86 <fmin+0x14>
 8016baa:	e7ee      	b.n	8016b8a <fmin+0x18>

08016bac <__fpclassifyd>:
 8016bac:	ec51 0b10 	vmov	r0, r1, d0
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8016bb6:	b510      	push	{r4, lr}
 8016bb8:	d104      	bne.n	8016bc4 <__fpclassifyd+0x18>
 8016bba:	2800      	cmp	r0, #0
 8016bbc:	bf0c      	ite	eq
 8016bbe:	2002      	moveq	r0, #2
 8016bc0:	2003      	movne	r0, #3
 8016bc2:	bd10      	pop	{r4, pc}
 8016bc4:	4a09      	ldr	r2, [pc, #36]	@ (8016bec <__fpclassifyd+0x40>)
 8016bc6:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8016bca:	4294      	cmp	r4, r2
 8016bcc:	d908      	bls.n	8016be0 <__fpclassifyd+0x34>
 8016bce:	4a08      	ldr	r2, [pc, #32]	@ (8016bf0 <__fpclassifyd+0x44>)
 8016bd0:	4213      	tst	r3, r2
 8016bd2:	d007      	beq.n	8016be4 <__fpclassifyd+0x38>
 8016bd4:	4291      	cmp	r1, r2
 8016bd6:	d107      	bne.n	8016be8 <__fpclassifyd+0x3c>
 8016bd8:	fab0 f080 	clz	r0, r0
 8016bdc:	0940      	lsrs	r0, r0, #5
 8016bde:	e7f0      	b.n	8016bc2 <__fpclassifyd+0x16>
 8016be0:	2004      	movs	r0, #4
 8016be2:	e7ee      	b.n	8016bc2 <__fpclassifyd+0x16>
 8016be4:	2003      	movs	r0, #3
 8016be6:	e7ec      	b.n	8016bc2 <__fpclassifyd+0x16>
 8016be8:	2000      	movs	r0, #0
 8016bea:	e7ea      	b.n	8016bc2 <__fpclassifyd+0x16>
 8016bec:	7fdfffff 	.word	0x7fdfffff
 8016bf0:	7ff00000 	.word	0x7ff00000

08016bf4 <fmaxf>:
 8016bf4:	b508      	push	{r3, lr}
 8016bf6:	ed2d 8b02 	vpush	{d8}
 8016bfa:	eeb0 8a40 	vmov.f32	s16, s0
 8016bfe:	eef0 8a60 	vmov.f32	s17, s1
 8016c02:	f000 f815 	bl	8016c30 <__fpclassifyf>
 8016c06:	b930      	cbnz	r0, 8016c16 <fmaxf+0x22>
 8016c08:	eeb0 8a68 	vmov.f32	s16, s17
 8016c0c:	eeb0 0a48 	vmov.f32	s0, s16
 8016c10:	ecbd 8b02 	vpop	{d8}
 8016c14:	bd08      	pop	{r3, pc}
 8016c16:	eeb0 0a68 	vmov.f32	s0, s17
 8016c1a:	f000 f809 	bl	8016c30 <__fpclassifyf>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	d0f4      	beq.n	8016c0c <fmaxf+0x18>
 8016c22:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c2a:	dded      	ble.n	8016c08 <fmaxf+0x14>
 8016c2c:	e7ee      	b.n	8016c0c <fmaxf+0x18>
	...

08016c30 <__fpclassifyf>:
 8016c30:	ee10 3a10 	vmov	r3, s0
 8016c34:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8016c38:	d00d      	beq.n	8016c56 <__fpclassifyf+0x26>
 8016c3a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8016c3e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8016c42:	d30a      	bcc.n	8016c5a <__fpclassifyf+0x2a>
 8016c44:	4b07      	ldr	r3, [pc, #28]	@ (8016c64 <__fpclassifyf+0x34>)
 8016c46:	1e42      	subs	r2, r0, #1
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d908      	bls.n	8016c5e <__fpclassifyf+0x2e>
 8016c4c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8016c50:	4258      	negs	r0, r3
 8016c52:	4158      	adcs	r0, r3
 8016c54:	4770      	bx	lr
 8016c56:	2002      	movs	r0, #2
 8016c58:	4770      	bx	lr
 8016c5a:	2004      	movs	r0, #4
 8016c5c:	4770      	bx	lr
 8016c5e:	2003      	movs	r0, #3
 8016c60:	4770      	bx	lr
 8016c62:	bf00      	nop
 8016c64:	007ffffe 	.word	0x007ffffe

08016c68 <sinf_poly>:
 8016c68:	07cb      	lsls	r3, r1, #31
 8016c6a:	d412      	bmi.n	8016c92 <sinf_poly+0x2a>
 8016c6c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8016c70:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8016c74:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8016c78:	eea6 7b01 	vfma.f64	d7, d6, d1
 8016c7c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8016c80:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016c84:	eea6 0b05 	vfma.f64	d0, d6, d5
 8016c88:	eea7 0b01 	vfma.f64	d0, d7, d1
 8016c8c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016c90:	4770      	bx	lr
 8016c92:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8016c96:	ee21 5b01 	vmul.f64	d5, d1, d1
 8016c9a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8016c9e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8016ca2:	eea1 7b06 	vfma.f64	d7, d1, d6
 8016ca6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8016caa:	eea1 0b06 	vfma.f64	d0, d1, d6
 8016cae:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8016cb2:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016cb6:	eea5 0b06 	vfma.f64	d0, d5, d6
 8016cba:	e7e5      	b.n	8016c88 <sinf_poly+0x20>
 8016cbc:	0000      	movs	r0, r0
	...

08016cc0 <sinf>:
 8016cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cc2:	ee10 4a10 	vmov	r4, s0
 8016cc6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8016cca:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8016cce:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016cd2:	eef0 7a40 	vmov.f32	s15, s0
 8016cd6:	d218      	bcs.n	8016d0a <sinf+0x4a>
 8016cd8:	ee26 1b06 	vmul.f64	d1, d6, d6
 8016cdc:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8016ce0:	d20a      	bcs.n	8016cf8 <sinf+0x38>
 8016ce2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8016ce6:	d103      	bne.n	8016cf0 <sinf+0x30>
 8016ce8:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8016cec:	ed8d 1a01 	vstr	s2, [sp, #4]
 8016cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8016cf4:	b003      	add	sp, #12
 8016cf6:	bd30      	pop	{r4, r5, pc}
 8016cf8:	483b      	ldr	r0, [pc, #236]	@ (8016de8 <sinf+0x128>)
 8016cfa:	eeb0 0b46 	vmov.f64	d0, d6
 8016cfe:	2100      	movs	r1, #0
 8016d00:	b003      	add	sp, #12
 8016d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d06:	f7ff bfaf 	b.w	8016c68 <sinf_poly>
 8016d0a:	f240 422e 	movw	r2, #1070	@ 0x42e
 8016d0e:	4293      	cmp	r3, r2
 8016d10:	d824      	bhi.n	8016d5c <sinf+0x9c>
 8016d12:	4b35      	ldr	r3, [pc, #212]	@ (8016de8 <sinf+0x128>)
 8016d14:	ed93 7b08 	vldr	d7, [r3, #32]
 8016d18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016d1c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8016d20:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016d24:	ee17 1a90 	vmov	r1, s15
 8016d28:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8016d2c:	1609      	asrs	r1, r1, #24
 8016d2e:	ee07 1a90 	vmov	s15, r1
 8016d32:	f001 0203 	and.w	r2, r1, #3
 8016d36:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016d3a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8016d3e:	ed92 0b00 	vldr	d0, [r2]
 8016d42:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8016d46:	f011 0f02 	tst.w	r1, #2
 8016d4a:	eea5 6b47 	vfms.f64	d6, d5, d7
 8016d4e:	bf08      	it	eq
 8016d50:	4618      	moveq	r0, r3
 8016d52:	ee26 1b06 	vmul.f64	d1, d6, d6
 8016d56:	ee20 0b06 	vmul.f64	d0, d0, d6
 8016d5a:	e7d1      	b.n	8016d00 <sinf+0x40>
 8016d5c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8016d60:	d237      	bcs.n	8016dd2 <sinf+0x112>
 8016d62:	4922      	ldr	r1, [pc, #136]	@ (8016dec <sinf+0x12c>)
 8016d64:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8016d68:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8016d6c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8016d70:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8016d74:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016d78:	6a10      	ldr	r0, [r2, #32]
 8016d7a:	6912      	ldr	r2, [r2, #16]
 8016d7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8016d80:	40ab      	lsls	r3, r5
 8016d82:	fba0 5003 	umull	r5, r0, r0, r3
 8016d86:	4359      	muls	r1, r3
 8016d88:	fbe3 0102 	umlal	r0, r1, r3, r2
 8016d8c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8016d90:	0f9d      	lsrs	r5, r3, #30
 8016d92:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8016d96:	1ac9      	subs	r1, r1, r3
 8016d98:	f7e9 fc88 	bl	80006ac <__aeabi_l2d>
 8016d9c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8016da0:	4b11      	ldr	r3, [pc, #68]	@ (8016de8 <sinf+0x128>)
 8016da2:	f004 0203 	and.w	r2, r4, #3
 8016da6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016daa:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8016de0 <sinf+0x120>
 8016dae:	ed92 0b00 	vldr	d0, [r2]
 8016db2:	ec41 0b17 	vmov	d7, r0, r1
 8016db6:	f014 0f02 	tst.w	r4, #2
 8016dba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016dbe:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016dc2:	4629      	mov	r1, r5
 8016dc4:	bf08      	it	eq
 8016dc6:	4618      	moveq	r0, r3
 8016dc8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8016dcc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016dd0:	e796      	b.n	8016d00 <sinf+0x40>
 8016dd2:	b003      	add	sp, #12
 8016dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016dd8:	f000 b8e4 	b.w	8016fa4 <__math_invalidf>
 8016ddc:	f3af 8000 	nop.w
 8016de0:	54442d18 	.word	0x54442d18
 8016de4:	3c1921fb 	.word	0x3c1921fb
 8016de8:	08017700 	.word	0x08017700
 8016dec:	0801769c 	.word	0x0801769c

08016df0 <sinf_poly>:
 8016df0:	07cb      	lsls	r3, r1, #31
 8016df2:	d412      	bmi.n	8016e1a <sinf_poly+0x2a>
 8016df4:	ee21 5b00 	vmul.f64	d5, d1, d0
 8016df8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8016dfc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8016e00:	eea6 7b01 	vfma.f64	d7, d6, d1
 8016e04:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8016e08:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016e0c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8016e10:	eea7 0b01 	vfma.f64	d0, d7, d1
 8016e14:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016e18:	4770      	bx	lr
 8016e1a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8016e1e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8016e22:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8016e26:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8016e2a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8016e2e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8016e32:	eea1 0b06 	vfma.f64	d0, d1, d6
 8016e36:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8016e3a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8016e3e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8016e42:	e7e5      	b.n	8016e10 <sinf_poly+0x20>
 8016e44:	0000      	movs	r0, r0
	...

08016e48 <cosf>:
 8016e48:	b538      	push	{r3, r4, r5, lr}
 8016e4a:	ee10 4a10 	vmov	r4, s0
 8016e4e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8016e52:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8016e56:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8016e5a:	d21f      	bcs.n	8016e9c <cosf+0x54>
 8016e5c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8016e60:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8016e64:	f0c0 8082 	bcc.w	8016f6c <cosf+0x124>
 8016e68:	ee27 4b07 	vmul.f64	d4, d7, d7
 8016e6c:	4b44      	ldr	r3, [pc, #272]	@ (8016f80 <cosf+0x138>)
 8016e6e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8016e72:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8016e76:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8016e7a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016e7e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8016e82:	eea7 0b05 	vfma.f64	d0, d7, d5
 8016e86:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8016e8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016e8e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8016e92:	eea6 0b07 	vfma.f64	d0, d6, d7
 8016e96:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016e9a:	bd38      	pop	{r3, r4, r5, pc}
 8016e9c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8016ea0:	4293      	cmp	r3, r2
 8016ea2:	d829      	bhi.n	8016ef8 <cosf+0xb0>
 8016ea4:	4b36      	ldr	r3, [pc, #216]	@ (8016f80 <cosf+0x138>)
 8016ea6:	ed93 6b08 	vldr	d6, [r3, #32]
 8016eaa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8016eae:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8016eb2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016eb6:	ee16 1a90 	vmov	r1, s13
 8016eba:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8016ebe:	1609      	asrs	r1, r1, #24
 8016ec0:	ee06 1a90 	vmov	s13, r1
 8016ec4:	f001 0203 	and.w	r2, r1, #3
 8016ec8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016ecc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8016ed0:	ed92 0b00 	vldr	d0, [r2]
 8016ed4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8016ed8:	f011 0f02 	tst.w	r1, #2
 8016edc:	f081 0101 	eor.w	r1, r1, #1
 8016ee0:	eea5 7b46 	vfms.f64	d7, d5, d6
 8016ee4:	bf08      	it	eq
 8016ee6:	4618      	moveq	r0, r3
 8016ee8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8016eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016ef0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016ef4:	f7ff bf7c 	b.w	8016df0 <sinf_poly>
 8016ef8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8016efc:	d232      	bcs.n	8016f64 <cosf+0x11c>
 8016efe:	4921      	ldr	r1, [pc, #132]	@ (8016f84 <cosf+0x13c>)
 8016f00:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8016f04:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8016f08:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8016f0c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8016f10:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8016f14:	6a10      	ldr	r0, [r2, #32]
 8016f16:	6912      	ldr	r2, [r2, #16]
 8016f18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8016f1c:	40ab      	lsls	r3, r5
 8016f1e:	fba0 5003 	umull	r5, r0, r0, r3
 8016f22:	4359      	muls	r1, r3
 8016f24:	fbe3 0102 	umlal	r0, r1, r3, r2
 8016f28:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8016f2c:	0f9d      	lsrs	r5, r3, #30
 8016f2e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8016f32:	1ac9      	subs	r1, r1, r3
 8016f34:	f7e9 fbba 	bl	80006ac <__aeabi_l2d>
 8016f38:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8016f3c:	4b10      	ldr	r3, [pc, #64]	@ (8016f80 <cosf+0x138>)
 8016f3e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8016f78 <cosf+0x130>
 8016f42:	ec41 0b17 	vmov	d7, r0, r1
 8016f46:	f004 0203 	and.w	r2, r4, #3
 8016f4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8016f4e:	ed92 0b00 	vldr	d0, [r2]
 8016f52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f56:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8016f5a:	f014 0f02 	tst.w	r4, #2
 8016f5e:	f085 0101 	eor.w	r1, r5, #1
 8016f62:	e7bf      	b.n	8016ee4 <cosf+0x9c>
 8016f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f68:	f000 b81c 	b.w	8016fa4 <__math_invalidf>
 8016f6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8016f70:	e793      	b.n	8016e9a <cosf+0x52>
 8016f72:	bf00      	nop
 8016f74:	f3af 8000 	nop.w
 8016f78:	54442d18 	.word	0x54442d18
 8016f7c:	3c1921fb 	.word	0x3c1921fb
 8016f80:	08017700 	.word	0x08017700
 8016f84:	0801769c 	.word	0x0801769c

08016f88 <with_errnof>:
 8016f88:	b510      	push	{r4, lr}
 8016f8a:	ed2d 8b02 	vpush	{d8}
 8016f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8016f92:	4604      	mov	r4, r0
 8016f94:	f7fd faf8 	bl	8014588 <__errno>
 8016f98:	eeb0 0a48 	vmov.f32	s0, s16
 8016f9c:	ecbd 8b02 	vpop	{d8}
 8016fa0:	6004      	str	r4, [r0, #0]
 8016fa2:	bd10      	pop	{r4, pc}

08016fa4 <__math_invalidf>:
 8016fa4:	eef0 7a40 	vmov.f32	s15, s0
 8016fa8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016fac:	eef4 7a67 	vcmp.f32	s15, s15
 8016fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fb4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8016fb8:	d602      	bvs.n	8016fc0 <__math_invalidf+0x1c>
 8016fba:	2021      	movs	r0, #33	@ 0x21
 8016fbc:	f7ff bfe4 	b.w	8016f88 <with_errnof>
 8016fc0:	4770      	bx	lr
	...

08016fc4 <_init>:
 8016fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fc6:	bf00      	nop
 8016fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fca:	bc08      	pop	{r3}
 8016fcc:	469e      	mov	lr, r3
 8016fce:	4770      	bx	lr

08016fd0 <_fini>:
 8016fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fd2:	bf00      	nop
 8016fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fd6:	bc08      	pop	{r3}
 8016fd8:	469e      	mov	lr, r3
 8016fda:	4770      	bx	lr
