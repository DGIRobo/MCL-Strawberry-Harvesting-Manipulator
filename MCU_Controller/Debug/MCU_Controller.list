
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000149dc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  08014c80  08014c80  00015c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015478  08015478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015480  08015480  00016480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015484  08015484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  08015488  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005fd0  24000248  080156d0  00017248  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24006218  080156d0  00018218  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017248  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cdf9  00000000  00000000  00017276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005083  00000000  00000000  0004406f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f00  00000000  00000000  000490f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017d8  00000000  00000000  0004aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00006402  00000000  00000000  0004c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026f9f  00000000  00000000  00052bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f173  00000000  00000000  00079b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001f8ce4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000099a0  00000000  00000000  001f8d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  0020273c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  002027b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  0020385b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014c64 	.word	0x08014c64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	08014c64 	.word	0x08014c64

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b9c2 	b.w	8000cc0 <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f840 	bl	80009c8 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__aeabi_d2lz>:
 8000954:	b508      	push	{r3, lr}
 8000956:	4602      	mov	r2, r0
 8000958:	460b      	mov	r3, r1
 800095a:	ec43 2b17 	vmov	d7, r2, r3
 800095e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	d403      	bmi.n	8000970 <__aeabi_d2lz+0x1c>
 8000968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800096c:	f000 b80c 	b.w	8000988 <__aeabi_d2ulz>
 8000970:	eeb1 7b47 	vneg.f64	d7, d7
 8000974:	ec51 0b17 	vmov	r0, r1, d7
 8000978:	f000 f806 	bl	8000988 <__aeabi_d2ulz>
 800097c:	4240      	negs	r0, r0
 800097e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000982:	bd08      	pop	{r3, pc}
 8000984:	0000      	movs	r0, r0
	...

08000988 <__aeabi_d2ulz>:
 8000988:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80009b8 <__aeabi_d2ulz+0x30>
 800098c:	ec41 0b17 	vmov	d7, r0, r1
 8000990:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80009c0 <__aeabi_d2ulz+0x38>
 8000994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000998:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800099c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80009a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80009a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a8:	ee16 1a10 	vmov	r1, s12
 80009ac:	ee17 0a90 	vmov	r0, s15
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	f3af 8000 	nop.w
 80009b8:	00000000 	.word	0x00000000
 80009bc:	3df00000 	.word	0x3df00000
 80009c0:	00000000 	.word	0x00000000
 80009c4:	41f00000 	.word	0x41f00000

080009c8 <__udivmoddi4>:
 80009c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009cc:	9d08      	ldr	r5, [sp, #32]
 80009ce:	468e      	mov	lr, r1
 80009d0:	4604      	mov	r4, r0
 80009d2:	4688      	mov	r8, r1
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d14a      	bne.n	8000a6e <__udivmoddi4+0xa6>
 80009d8:	428a      	cmp	r2, r1
 80009da:	4617      	mov	r7, r2
 80009dc:	d962      	bls.n	8000aa4 <__udivmoddi4+0xdc>
 80009de:	fab2 f682 	clz	r6, r2
 80009e2:	b14e      	cbz	r6, 80009f8 <__udivmoddi4+0x30>
 80009e4:	f1c6 0320 	rsb	r3, r6, #32
 80009e8:	fa01 f806 	lsl.w	r8, r1, r6
 80009ec:	fa20 f303 	lsr.w	r3, r0, r3
 80009f0:	40b7      	lsls	r7, r6
 80009f2:	ea43 0808 	orr.w	r8, r3, r8
 80009f6:	40b4      	lsls	r4, r6
 80009f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009fc:	fa1f fc87 	uxth.w	ip, r7
 8000a00:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a04:	0c23      	lsrs	r3, r4, #16
 8000a06:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a0a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0e:	fb01 f20c 	mul.w	r2, r1, ip
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x62>
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a1c:	f080 80ea 	bcs.w	8000bf4 <__udivmoddi4+0x22c>
 8000a20:	429a      	cmp	r2, r3
 8000a22:	f240 80e7 	bls.w	8000bf4 <__udivmoddi4+0x22c>
 8000a26:	3902      	subs	r1, #2
 8000a28:	443b      	add	r3, r7
 8000a2a:	1a9a      	subs	r2, r3, r2
 8000a2c:	b2a3      	uxth	r3, r4
 8000a2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a3a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a3e:	459c      	cmp	ip, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x8e>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a48:	f080 80d6 	bcs.w	8000bf8 <__udivmoddi4+0x230>
 8000a4c:	459c      	cmp	ip, r3
 8000a4e:	f240 80d3 	bls.w	8000bf8 <__udivmoddi4+0x230>
 8000a52:	443b      	add	r3, r7
 8000a54:	3802      	subs	r0, #2
 8000a56:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a5a:	eba3 030c 	sub.w	r3, r3, ip
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa2>
 8000a62:	40f3      	lsrs	r3, r6
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xb6>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb0>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x14c>
 8000a86:	4573      	cmp	r3, lr
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xc8>
 8000a8a:	4282      	cmp	r2, r0
 8000a8c:	f200 8105 	bhi.w	8000c9a <__udivmoddi4+0x2d2>
 8000a90:	1a84      	subs	r4, r0, r2
 8000a92:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	4690      	mov	r8, r2
 8000a9a:	2d00      	cmp	r5, #0
 8000a9c:	d0e5      	beq.n	8000a6a <__udivmoddi4+0xa2>
 8000a9e:	e9c5 4800 	strd	r4, r8, [r5]
 8000aa2:	e7e2      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	f000 8090 	beq.w	8000bca <__udivmoddi4+0x202>
 8000aaa:	fab2 f682 	clz	r6, r2
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	f040 80a4 	bne.w	8000bfc <__udivmoddi4+0x234>
 8000ab4:	1a8a      	subs	r2, r1, r2
 8000ab6:	0c03      	lsrs	r3, r0, #16
 8000ab8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000abc:	b280      	uxth	r0, r0
 8000abe:	b2bc      	uxth	r4, r7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ac6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ace:	fb04 f20c 	mul.w	r2, r4, ip
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d907      	bls.n	8000ae6 <__udivmoddi4+0x11e>
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000adc:	d202      	bcs.n	8000ae4 <__udivmoddi4+0x11c>
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	f200 80e0 	bhi.w	8000ca4 <__udivmoddi4+0x2dc>
 8000ae4:	46c4      	mov	ip, r8
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000aec:	fb0e 3312 	mls	r3, lr, r2, r3
 8000af0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af4:	fb02 f404 	mul.w	r4, r2, r4
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d907      	bls.n	8000b0c <__udivmoddi4+0x144>
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x142>
 8000b04:	429c      	cmp	r4, r3
 8000b06:	f200 80ca 	bhi.w	8000c9e <__udivmoddi4+0x2d6>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	1b1b      	subs	r3, r3, r4
 8000b0e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x98>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa0e f401 	lsl.w	r4, lr, r1
 8000b24:	fa20 f306 	lsr.w	r3, r0, r6
 8000b28:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b30:	4323      	orrs	r3, r4
 8000b32:	fa00 f801 	lsl.w	r8, r0, r1
 8000b36:	fa1f fc87 	uxth.w	ip, r7
 8000b3a:	fbbe f0f9 	udiv	r0, lr, r9
 8000b3e:	0c1c      	lsrs	r4, r3, #16
 8000b40:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b44:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b48:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b4c:	45a6      	cmp	lr, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x1a0>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b5a:	f080 809c 	bcs.w	8000c96 <__udivmoddi4+0x2ce>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8099 	bls.w	8000c96 <__udivmoddi4+0x2ce>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	eba4 040e 	sub.w	r4, r4, lr
 8000b6c:	fa1f fe83 	uxth.w	lr, r3
 8000b70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b74:	fb09 4413 	mls	r4, r9, r3, r4
 8000b78:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b7c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x1ce>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b8a:	f080 8082 	bcs.w	8000c92 <__udivmoddi4+0x2ca>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d97f      	bls.n	8000c92 <__udivmoddi4+0x2ca>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b9a:	eba4 040c 	sub.w	r4, r4, ip
 8000b9e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ba2:	4564      	cmp	r4, ip
 8000ba4:	4673      	mov	r3, lr
 8000ba6:	46e1      	mov	r9, ip
 8000ba8:	d362      	bcc.n	8000c70 <__udivmoddi4+0x2a8>
 8000baa:	d05f      	beq.n	8000c6c <__udivmoddi4+0x2a4>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x1fe>
 8000bae:	ebb8 0203 	subs.w	r2, r8, r3
 8000bb2:	eb64 0409 	sbc.w	r4, r4, r9
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	fa22 f301 	lsr.w	r3, r2, r1
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	40cc      	lsrs	r4, r1
 8000bc2:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	e74f      	b.n	8000a6a <__udivmoddi4+0xa2>
 8000bca:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bce:	0c01      	lsrs	r1, r0, #16
 8000bd0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd4:	b280      	uxth	r0, r0
 8000bd6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4638      	mov	r0, r7
 8000bde:	463c      	mov	r4, r7
 8000be0:	46b8      	mov	r8, r7
 8000be2:	46be      	mov	lr, r7
 8000be4:	2620      	movs	r6, #32
 8000be6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000bea:	eba2 0208 	sub.w	r2, r2, r8
 8000bee:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bf2:	e766      	b.n	8000ac2 <__udivmoddi4+0xfa>
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	e718      	b.n	8000a2a <__udivmoddi4+0x62>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	e72c      	b.n	8000a56 <__udivmoddi4+0x8e>
 8000bfc:	f1c6 0220 	rsb	r2, r6, #32
 8000c00:	fa2e f302 	lsr.w	r3, lr, r2
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b1      	lsls	r1, r6
 8000c08:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c10:	430a      	orrs	r2, r1
 8000c12:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c16:	b2bc      	uxth	r4, r7
 8000c18:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c22:	fb08 f904 	mul.w	r9, r8, r4
 8000c26:	40b0      	lsls	r0, r6
 8000c28:	4589      	cmp	r9, r1
 8000c2a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c2e:	b280      	uxth	r0, r0
 8000c30:	d93e      	bls.n	8000cb0 <__udivmoddi4+0x2e8>
 8000c32:	1879      	adds	r1, r7, r1
 8000c34:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c38:	d201      	bcs.n	8000c3e <__udivmoddi4+0x276>
 8000c3a:	4589      	cmp	r9, r1
 8000c3c:	d81f      	bhi.n	8000c7e <__udivmoddi4+0x2b6>
 8000c3e:	eba1 0109 	sub.w	r1, r1, r9
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	4542      	cmp	r2, r8
 8000c56:	d229      	bcs.n	8000cac <__udivmoddi4+0x2e4>
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c5e:	d2c4      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c60:	4542      	cmp	r2, r8
 8000c62:	d2c2      	bcs.n	8000bea <__udivmoddi4+0x222>
 8000c64:	f1a9 0102 	sub.w	r1, r9, #2
 8000c68:	443a      	add	r2, r7
 8000c6a:	e7be      	b.n	8000bea <__udivmoddi4+0x222>
 8000c6c:	45f0      	cmp	r8, lr
 8000c6e:	d29d      	bcs.n	8000bac <__udivmoddi4+0x1e4>
 8000c70:	ebbe 0302 	subs.w	r3, lr, r2
 8000c74:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c78:	3801      	subs	r0, #1
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	e796      	b.n	8000bac <__udivmoddi4+0x1e4>
 8000c7e:	eba7 0909 	sub.w	r9, r7, r9
 8000c82:	4449      	add	r1, r9
 8000c84:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c88:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c8c:	fb09 f804 	mul.w	r8, r9, r4
 8000c90:	e7db      	b.n	8000c4a <__udivmoddi4+0x282>
 8000c92:	4673      	mov	r3, lr
 8000c94:	e77f      	b.n	8000b96 <__udivmoddi4+0x1ce>
 8000c96:	4650      	mov	r0, sl
 8000c98:	e766      	b.n	8000b68 <__udivmoddi4+0x1a0>
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e6fd      	b.n	8000a9a <__udivmoddi4+0xd2>
 8000c9e:	443b      	add	r3, r7
 8000ca0:	3a02      	subs	r2, #2
 8000ca2:	e733      	b.n	8000b0c <__udivmoddi4+0x144>
 8000ca4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	e71c      	b.n	8000ae6 <__udivmoddi4+0x11e>
 8000cac:	4649      	mov	r1, r9
 8000cae:	e79c      	b.n	8000bea <__udivmoddi4+0x222>
 8000cb0:	eba1 0109 	sub.w	r1, r1, r9
 8000cb4:	46c4      	mov	ip, r8
 8000cb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cba:	fb09 f804 	mul.w	r8, r9, r4
 8000cbe:	e7c4      	b.n	8000c4a <__udivmoddi4+0x282>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
int _write(int file, char* p, int len){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
	/*for(int i=0; i<len; i++){
		ITM_SendChar((*p++));
	}*/
	HAL_UART_Transmit(&huart3, (uint8_t*)p, len, HAL_MAX_DELAY);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	4804      	ldr	r0, [pc, #16]	@ (8000cec <_write+0x28>)
 8000cdc:	f00a f9ca 	bl	800b074 <HAL_UART_Transmit>
	return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000328 	.word	0x24000328

08000cf0 <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d103      	bne.n	8000d0a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 8000d08:	e002      	b.n	8000d10 <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 8000d0a:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	24001018 	.word	0x24001018

08000d20 <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d103      	bne.n	8000d38 <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 8000d30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d34:	f7ff ffdc 	bl	8000cf0 <HAL_GPIO_EXTI_Callback>
    }
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d44:	ed2d 8b02 	vpush	{d8}
 8000d48:	b087      	sub	sp, #28
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000d50:	edc7 0a02 	vstr	s1, [r7, #8]
 8000d54:	ed87 1a01 	vstr	s2, [r7, #4]
 8000d58:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 8000d5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d66:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 8000d6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7a:	d502      	bpl.n	8000d82 <float32_t_to_uint+0x42>
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	60f9      	str	r1, [r7, #12]
 8000d80:	e00a      	b.n	8000d98 <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8000d82:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d92:	dd01      	ble.n	8000d98 <float32_t_to_uint+0x58>
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 8000d98:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000da0:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000da4:	f04f 0001 	mov.w	r0, #1
 8000da8:	f04f 0100 	mov.w	r1, #0
 8000dac:	683c      	ldr	r4, [r7, #0]
 8000dae:	f1a4 0620 	sub.w	r6, r4, #32
 8000db2:	f1c4 0520 	rsb	r5, r4, #32
 8000db6:	fa01 f304 	lsl.w	r3, r1, r4
 8000dba:	fa00 f606 	lsl.w	r6, r0, r6
 8000dbe:	4333      	orrs	r3, r6
 8000dc0:	fa20 f505 	lsr.w	r5, r0, r5
 8000dc4:	432b      	orrs	r3, r5
 8000dc6:	fa00 f204 	lsl.w	r2, r0, r4
 8000dca:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000dce:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000dd2:	4640      	mov	r0, r8
 8000dd4:	4649      	mov	r1, r9
 8000dd6:	f7ff fd5f 	bl	8000898 <__aeabi_ul2f>
 8000dda:	ee06 0a90 	vmov	s13, r0
 8000dde:	ed97 7a05 	vldr	s14, [r7, #20]
 8000de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dee:	ee17 3a90 	vmov	r3, s15
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	371c      	adds	r7, #28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	ecbd 8b02 	vpop	{d8}
 8000dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e00 <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e04:	ed2d 8b02 	vpush	{d8}
 8000e08:	b087      	sub	sp, #28
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e12:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 8000e18:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e24:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	ee07 1a90 	vmov	s15, r1
 8000e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000e3e:	f04f 0001 	mov.w	r0, #1
 8000e42:	f04f 0100 	mov.w	r1, #0
 8000e46:	683c      	ldr	r4, [r7, #0]
 8000e48:	f1a4 0620 	sub.w	r6, r4, #32
 8000e4c:	f1c4 0520 	rsb	r5, r4, #32
 8000e50:	fa01 f304 	lsl.w	r3, r1, r4
 8000e54:	fa00 f606 	lsl.w	r6, r0, r6
 8000e58:	4333      	orrs	r3, r6
 8000e5a:	fa20 f505 	lsr.w	r5, r0, r5
 8000e5e:	432b      	orrs	r3, r5
 8000e60:	fa00 f204 	lsl.w	r2, r0, r4
 8000e64:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000e68:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	4649      	mov	r1, r9
 8000e70:	f7ff fd12 	bl	8000898 <__aeabi_ul2f>
 8000e74:	ee07 0a90 	vmov	s15, r0
 8000e78:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8000e7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e80:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e84:	eeb0 0a67 	vmov.f32	s0, s15
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	ecbd 8b02 	vpop	{d8}
 8000e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e94 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 8000e9e:	23ff      	movs	r3, #255	@ 0xff
 8000ea0:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000ea2:	23ff      	movs	r3, #255	@ 0xff
 8000ea4:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000ea6:	23ff      	movs	r3, #255	@ 0xff
 8000ea8:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000eaa:	23ff      	movs	r3, #255	@ 0xff
 8000eac:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000eae:	23ff      	movs	r3, #255	@ 0xff
 8000eb0:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000eb2:	23ff      	movs	r3, #255	@ 0xff
 8000eb4:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000eb6:	23ff      	movs	r3, #255	@ 0xff
 8000eb8:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 8000eba:	23fe      	movs	r3, #254	@ 0xfe
 8000ebc:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ec2:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	@ (8000f1c <MIT_reset_origin+0x88>)
 8000efc:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <MIT_reset_origin+0x8c>)
 8000efe:	f005 fdce 	bl	8006a9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <MIT_reset_origin+0x7e>
		sta = 1;
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MIT_reset_origin+0x90>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000f0e:	f003 fef3 	bl	8004cf8 <Error_Handler>
	}
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000264 	.word	0x24000264
 8000f20:	24000288 	.word	0x24000288
 8000f24:	24001684 	.word	0x24001684

08000f28 <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000f32:	23ff      	movs	r3, #255	@ 0xff
 8000f34:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000f36:	23ff      	movs	r3, #255	@ 0xff
 8000f38:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000f3a:	23ff      	movs	r3, #255	@ 0xff
 8000f3c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000f3e:	23ff      	movs	r3, #255	@ 0xff
 8000f40:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000f42:	23ff      	movs	r3, #255	@ 0xff
 8000f44:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000f46:	23ff      	movs	r3, #255	@ 0xff
 8000f48:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000f4a:	23ff      	movs	r3, #255	@ 0xff
 8000f4c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 8000f4e:	23fc      	movs	r3, #252	@ 0xfc
 8000f50:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	4a16      	ldr	r2, [pc, #88]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f56:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f58:	4b15      	ldr	r3, [pc, #84]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	@ (8000fb0 <MIT_enter_control_mode+0x88>)
 8000f90:	4808      	ldr	r0, [pc, #32]	@ (8000fb4 <MIT_enter_control_mode+0x8c>)
 8000f92:	f005 fd84 	bl	8006a9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <MIT_enter_control_mode+0x7e>
		sta = 1;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MIT_enter_control_mode+0x90>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000fa2:	f003 fea9 	bl	8004cf8 <Error_Handler>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	24000264 	.word	0x24000264
 8000fb4:	24000288 	.word	0x24000288
 8000fb8:	24001684 	.word	0x24001684

08000fbc <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000fc6:	23ff      	movs	r3, #255	@ 0xff
 8000fc8:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000fca:	23ff      	movs	r3, #255	@ 0xff
 8000fcc:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000fce:	23ff      	movs	r3, #255	@ 0xff
 8000fd0:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000fd2:	23ff      	movs	r3, #255	@ 0xff
 8000fd4:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000fd6:	23ff      	movs	r3, #255	@ 0xff
 8000fd8:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000fda:	23ff      	movs	r3, #255	@ 0xff
 8000fdc:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000fde:	23ff      	movs	r3, #255	@ 0xff
 8000fe0:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 8000fe2:	23fd      	movs	r3, #253	@ 0xfd
 8000fe4:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4a16      	ldr	r2, [pc, #88]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8000fea:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000fec:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MIT_exit_control_mode+0x88>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	461a      	mov	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	@ (8001044 <MIT_exit_control_mode+0x88>)
 8001024:	4808      	ldr	r0, [pc, #32]	@ (8001048 <MIT_exit_control_mode+0x8c>)
 8001026:	f005 fd3a 	bl	8006a9e <HAL_FDCAN_AddMessageToTxFifoQ>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <MIT_exit_control_mode+0x7e>
		sta = 1;
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MIT_exit_control_mode+0x90>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8001036:	f003 fe5f 	bl	8004cf8 <Error_Handler>
	}
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	24000264 	.word	0x24000264
 8001048:	24000288 	.word	0x24000288
 800104c:	24001684 	.word	0x24001684

08001050 <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3301      	adds	r3, #1
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3302      	adds	r3, #2
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3303      	adds	r3, #3
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3304      	adds	r3, #4
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3305      	adds	r3, #5
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	121b      	asrs	r3, r3, #8
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3306      	adds	r3, #6
 8001094:	f002 020f 	and.w	r2, r2, #15
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3307      	adds	r3, #7
 80010a0:	887a      	ldrh	r2, [r7, #2]
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	ed87 0a00 	vstr	s0, [r7]
 80010c0:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 80010c2:	4b32      	ldr	r3, [pc, #200]	@ (800118c <MIT_Mode+0xd8>)
 80010c4:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <MIT_Mode+0xdc>)
 80010c8:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 80010ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80010ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d2:	edd7 6a00 	vldr	s13, [r7]
 80010d6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80010da:	eeb0 1b46 	vmov.f64	d1, d6
 80010de:	eeb0 0b47 	vmov.f64	d0, d7
 80010e2:	f013 fb79 	bl	80147d8 <fmax>
 80010e6:	eeb0 6b40 	vmov.f64	d6, d0
 80010ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f2:	eeb0 1b47 	vmov.f64	d1, d7
 80010f6:	eeb0 0b46 	vmov.f64	d0, d6
 80010fa:	f013 fb8a 	bl	8014812 <fmin>
 80010fe:	eeb0 7b40 	vmov.f64	d7, d0
 8001102:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001106:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 800110a:	200c      	movs	r0, #12
 800110c:	ed97 1a06 	vldr	s2, [r7, #24]
 8001110:	edd7 0a07 	vldr	s1, [r7, #28]
 8001114:	ed97 0a00 	vldr	s0, [r7]
 8001118:	f7ff fe12 	bl	8000d40 <float32_t_to_uint>
 800111c:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	b21a      	sxth	r2, r3
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff91 	bl	8001050 <MIT_TxData>

	TxHeader.Identifier = motor_id;
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <MIT_Mode+0xe0>)
 8001132:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001134:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <MIT_Mode+0xe0>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MIT_Mode+0xe0>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <MIT_Mode+0xe0>)
 8001142:	2208      	movs	r2, #8
 8001144:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <MIT_Mode+0xe0>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MIT_Mode+0xe0>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <MIT_Mode+0xe0>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MIT_Mode+0xe0>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <MIT_Mode+0xe0>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	461a      	mov	r2, r3
 800116a:	490a      	ldr	r1, [pc, #40]	@ (8001194 <MIT_Mode+0xe0>)
 800116c:	480a      	ldr	r0, [pc, #40]	@ (8001198 <MIT_Mode+0xe4>)
 800116e:	f005 fc96 	bl	8006a9e <HAL_FDCAN_AddMessageToTxFifoQ>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <MIT_Mode+0xce>
		sta = 1;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <MIT_Mode+0xe8>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800117e:	f003 fdbb 	bl	8004cf8 <Error_Handler>
	}
}
 8001182:	bf00      	nop
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	c1c80000 	.word	0xc1c80000
 8001190:	41c80000 	.word	0x41c80000
 8001194:	24000264 	.word	0x24000264
 8001198:	24000288 	.word	0x24000288
 800119c:	24001684 	.word	0x24001684

080011a0 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b092      	sub	sp, #72	@ 0x48
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d04b      	beq.n	800124c <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80011b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011b8:	f107 020c 	add.w	r2, r7, #12
 80011bc:	2140      	movs	r1, #64	@ 0x40
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f005 fcc8 	bl	8006b54 <HAL_FDCAN_GetRxMessage>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d004      	beq.n	80011d4 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 80011ca:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	601a      	str	r2, [r3, #0]
            Error_Handler();
 80011d0:	f003 fd92 	bl	8004cf8 <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 80011d4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80011d8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 80011dc:	2300      	movs	r3, #0
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
 80011e0:	e02b      	b.n	800123a <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 80011e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 80011e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011e6:	2198      	movs	r1, #152	@ 0x98
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	3308      	adds	r3, #8
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d11c      	bne.n	8001234 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 80011fe:	4a16      	ldr	r2, [pc, #88]	@ (8001258 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001202:	2198      	movs	r1, #152	@ 0x98
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	3310      	adds	r3, #16
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001212:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001216:	2300      	movs	r3, #0
 8001218:	f00c ff76 	bl	800e108 <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800121c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00f      	beq.n	8001242 <HAL_FDCAN_RxFifo0Callback+0xa2>
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_FDCAN_RxFifo0Callback+0xbc>)
 8001224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	f3bf 8f4f 	dsb	sy
 800122e:	f3bf 8f6f 	isb	sy
                break;
 8001232:	e006      	b.n	8001242 <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001236:	3301      	adds	r3, #1
 8001238:	647b      	str	r3, [r7, #68]	@ 0x44
 800123a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800123c:	2b02      	cmp	r3, #2
 800123e:	ddd0      	ble.n	80011e2 <HAL_FDCAN_RxFifo0Callback+0x42>
 8001240:	e000      	b.n	8001244 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 8001242:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	4806      	ldr	r0, [pc, #24]	@ (8001260 <HAL_FDCAN_RxFifo0Callback+0xc0>)
 8001248:	f006 fd53 	bl	8007cf2 <HAL_GPIO_TogglePin>
    }
}
 800124c:	bf00      	nop
 800124e:	3748      	adds	r7, #72	@ 0x48
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24001684 	.word	0x24001684
 8001258:	24001018 	.word	0x24001018
 800125c:	e000ed04 	.word	0xe000ed04
 8001260:	58021000 	.word	0x58021000

08001264 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	ed87 0a03 	vstr	s0, [r7, #12]
 800126e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001272:	ed87 1a01 	vstr	s2, [r7, #4]
 8001276:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 800127a:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80012f4 <tustin_derivative+0x90>
 800127e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001282:	edd7 7a00 	vldr	s15, [r7]
 8001286:	ee27 7a27 	vmul.f32	s14, s14, s15
 800128a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800128e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001292:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 800129c:	ed97 7a03 	vldr	s14, [r7, #12]
 80012a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012ac:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80012f8 <tustin_derivative+0x94>
 80012b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80012f8 <tustin_derivative+0x94>
 80012d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80012d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012dc:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	ee07 3a90 	vmov	s15, r3
}
 80012e6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40490fd8 	.word	0x40490fd8
 80012f8:	3b03126f 	.word	0x3b03126f

080012fc <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 800135a:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 8001364:	61bb      	str	r3, [r7, #24]
	uint8_t buf[8];
	if (xQueueReceive(m->canRxQueue, buf, pdMS_TO_TICKS(1)) == pdPASS)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f107 0108 	add.w	r1, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f00c ff67 	bl	800e244 <xQueueReceive>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d11f      	bne.n	80013bc <motor_encoder_read+0xc0>
	{
		// CAN 메시지가 이미 수신되었거나 1ms 이내 수신 성공 시
		unsigned int p_int = ((buf[1]<<8)|buf[2]);
 800137c:	7a7b      	ldrb	r3, [r7, #9]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	7aba      	ldrb	r2, [r7, #10]
 8001382:	4313      	orrs	r3, r2
 8001384:	617b      	str	r3, [r7, #20]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 8001386:	2110      	movs	r1, #16
 8001388:	edd7 0a06 	vldr	s1, [r7, #24]
 800138c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff fd35 	bl	8000e00 <uint_to_float32_t>
 8001396:	ed87 0a04 	vstr	s0, [r7, #16]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 800139a:	eddf 7a28 	vldr	s15, [pc, #160]	@ 800143c <motor_encoder_read+0x140>
 800139e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80013a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 80013ba:	e004      	b.n	80013c6 <motor_encoder_read+0xca>
	}
	else
	{
		sta = 2;
 80013bc:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <motor_encoder_read+0x144>)
 80013be:	2202      	movs	r2, #2
 80013c0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 80013c2:	f003 fc99 	bl	8004cf8 <Error_Handler>
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		//m->pos = m->pos_old;
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	ed93 6a06 	vldr	s12, [r3, #24]
 80013de:	eef0 1a46 	vmov.f32	s3, s12
 80013e2:	eeb0 1a66 	vmov.f32	s2, s13
 80013e6:	eef0 0a47 	vmov.f32	s1, s14
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	f7ff ff39 	bl	8001264 <tustin_derivative>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	ed93 6a06 	vldr	s12, [r3, #24]
 8001414:	eef0 1a46 	vmov.f32	s3, s12
 8001418:	eeb0 1a66 	vmov.f32	s2, s13
 800141c:	eef0 0a47 	vmov.f32	s1, s14
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	f7ff ff1e 	bl	8001264 <tustin_derivative>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40490fd8 	.word	0x40490fd8
 8001440:	24001684 	.word	0x24001684

08001444 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edd3 7a04 	vldr	s15, [r3, #16]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	ed93 7a05 	vldr	s14, [r3, #20]
 8001464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148c:	dd1a      	ble.n	80014c4 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 800149a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80014d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d400      	bmi.n	80014dc <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 80014da:	e01a      	b.n	8001512 <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80014e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eeb0 0a67 	vmov.f32	s0, s15
 8001536:	f013 fa13 	bl	8014960 <sinf>
 800153a:	ed87 0a08 	vstr	s0, [r7, #32]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eeb0 0a67 	vmov.f32	s0, s15
 800154c:	f013 facc 	bl	8014ae8 <cosf>
 8001550:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800155a:	3304      	adds	r3, #4
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	f013 f9fc 	bl	8014960 <sinf>
 8001568:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001572:	3304      	adds	r3, #4
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f013 fab4 	bl	8014ae8 <cosf>
 8001580:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800158a:	3308      	adds	r3, #8
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	f013 f9e4 	bl	8014960 <sinf>
 8001598:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80015a2:	3308      	adds	r3, #8
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	f013 fa9c 	bl	8014ae8 <cosf>
 80015b0:	ed87 0a03 	vstr	s0, [r7, #12]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b8:	e02c      	b.n	8001614 <robot_forward_kinematics_cal+0xf4>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 80015c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	441a      	add	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80015dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	441a      	add	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	441a      	add	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	3301      	adds	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	2b02      	cmp	r3, #2
 8001618:	ddcf      	ble.n	80015ba <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001620:	edd7 7a05 	vldr	s15, [r7, #20]
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800162e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001640:	edd7 7a07 	vldr	s15, [r7, #28]
 8001644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001648:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001652:	edd7 7a05 	vldr	s15, [r7, #20]
 8001656:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001660:	edd7 7a03 	vldr	s15, [r7, #12]
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001672:	3304      	adds	r3, #4
 8001674:	edd7 7a08 	vldr	s15, [r7, #32]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 800168c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800169e:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80016ac:	3308      	adds	r3, #8
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 80016c8:	461a      	mov	r2, r3
 80016ca:	f00e ff8b 	bl	80105e4 <arm_mat_mult_f32>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <robot_forward_kinematics_cal+0x1be>
 80016d4:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <robot_forward_kinematics_cal+0x1c8>)
 80016d6:	2204      	movs	r2, #4
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f003 fb0d 	bl	8004cf8 <Error_Handler>
}
 80016de:	bf00      	nop
 80016e0:	3728      	adds	r7, #40	@ 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24001684 	.word	0x24001684

080016ec <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0f0      	sub	sp, #448	@ 0x1c0
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016fa:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 80016fc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001700:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	f013 f925 	bl	8014960 <sinf>
 8001716:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 800171a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800171e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	f013 f9da 	bl	8014ae8 <cosf>
 8001734:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 8001738:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800173c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001746:	3304      	adds	r3, #4
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	f013 f906 	bl	8014960 <sinf>
 8001754:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 8001758:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800175c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001766:	3304      	adds	r3, #4
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	eeb0 0a67 	vmov.f32	s0, s15
 8001770:	f013 f9ba 	bl	8014ae8 <cosf>
 8001774:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001778:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800177c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001786:	3308      	adds	r3, #8
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	eeb0 0a67 	vmov.f32	s0, s15
 8001790:	f013 f8e6 	bl	8014960 <sinf>
 8001794:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001798:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800179c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017a6:	3308      	adds	r3, #8
 80017a8:	edd3 7a00 	vldr	s15, [r3]
 80017ac:	eeb0 0a67 	vmov.f32	s0, s15
 80017b0:	f013 f99a 	bl	8014ae8 <cosf>
 80017b4:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 80017b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017c6:	3308      	adds	r3, #8
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017da:	3304      	adds	r3, #4
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e4:	eeb0 0a67 	vmov.f32	s0, s15
 80017e8:	f013 f8ba 	bl	8014960 <sinf>
 80017ec:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 80017f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80017fe:	3308      	adds	r3, #8
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001808:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001812:	3304      	adds	r3, #4
 8001814:	edd3 7a00 	vldr	s15, [r3]
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f013 f962 	bl	8014ae8 <cosf>
 8001824:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 8001828:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800182c:	eeb1 7a67 	vneg.f32	s14, s15
 8001830:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001834:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 800183e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001842:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001846:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800184a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	ed93 6ac3 	vldr	s12, [r3, #780]	@ 0x30c
 8001854:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001858:	ee66 7a27 	vmul.f32	s15, s12, s15
 800185c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001860:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001864:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 800186e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001872:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 8001876:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800187a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001884:	eeb1 7a67 	vneg.f32	s14, s15
 8001888:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800188c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001890:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001894:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 800189e:	3304      	adds	r3, #4
 80018a0:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 80018a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a8:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 80018ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80018ba:	eeb1 7a67 	vneg.f32	s14, s15
 80018be:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80018c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018ca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 80018d4:	3308      	adds	r3, #8
 80018d6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80018da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018de:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 80018e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018e6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80018f0:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80018f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001906:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001912:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001916:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001920:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001924:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193a:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 800193e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001942:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 800194c:	eeb1 7a67 	vneg.f32	s14, s15
 8001950:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001958:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800195c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001966:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800196a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001974:	3301      	adds	r3, #1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 8001986:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800198a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001994:	eeb1 7a67 	vneg.f32	s14, s15
 8001998:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 800199c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80019ae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019bc:	3302      	adds	r3, #2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 80019ce:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019d2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80019dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4413      	add	r3, r2
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 80019f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001a02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001a10:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	3304      	adds	r3, #4
 8001a22:	4413      	add	r3, r2
 8001a24:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 8001a30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8001a3e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a42:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001a4c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a50:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 8001a6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 8001a7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f00e fd4c 	bl	8010528 <arm_mat_trans_f32>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <robot_model_param_cal+0x3bc>
 8001a96:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <robot_model_param_cal+0x3b8>)
 8001a98:	2204      	movs	r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f003 f92c 	bl	8004cf8 <Error_Handler>
 8001aa0:	e002      	b.n	8001aa8 <robot_model_param_cal+0x3bc>
 8001aa2:	bf00      	nop
 8001aa4:	24001684 	.word	0x24001684

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 8001aa8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001aac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001ab6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001abe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ac2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	edd3 6ac8 	vldr	s13, [r3, #800]	@ 0x320
 8001acc:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad8:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001adc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ae0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	ed93 7ac4 	vldr	s14, [r3, #784]	@ 0x310
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 8001aea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001aee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	edd3 6abf 	vldr	s13, [r3, #764]	@ 0x2fc
 8001af8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001afc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001b06:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001b0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001b20:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001b24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001b30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001b3e:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b46:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001b4e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b52:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001b60:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001b64:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001b72:	eeb1 7a67 	vneg.f32	s14, s15
 8001b76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9a:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001b9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001baa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001bb8:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001bbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bc4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001bce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd2:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001bda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bde:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001be8:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001bea:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001bee:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 8001bf2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bf6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001c00:	eeb1 7a67 	vneg.f32	s14, s15
 8001c04:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c22:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c36:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 8001c3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001c48:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001c56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	6852      	ldr	r2, [r2, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001c6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	ed93 7ac5 	vldr	s14, [r3, #788]	@ 0x314
											+ r->m3 * r->l2 * r->l2;
 8001c7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001c88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001cac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001cba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cbe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001cc8:	3301      	adds	r3, #1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 8001cce:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001cd2:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 8001cd6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cda:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8001ce4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ce8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cfa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d08:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d0c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d16:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d1a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d24:	3302      	adds	r3, #2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8001d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d32:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 8001d36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d3a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d44:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d48:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001d52:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d56:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	440b      	add	r3, r1
 8001d64:	6892      	ldr	r2, [r2, #8]
 8001d66:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 8001d68:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d84:	3302      	adds	r3, #2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	441a      	add	r2, r3
 8001d8a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d8e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001d98:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	3304      	adds	r3, #4
 8001daa:	440b      	add	r3, r1
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 8001db0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001db4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001dbe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dc2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001dcc:	3301      	adds	r3, #1
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8001dd6:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	f8d2 2318 	ldr.w	r2, [r2, #792]	@ 0x318
 8001de0:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001de2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001de6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001df0:	eeb1 7a67 	vneg.f32	s14, s15
 8001df4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001df8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e18:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001e24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e36:	3304      	adds	r3, #4
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 8001e40:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001e4e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e52:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001e5c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001e60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e64:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e68:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001e72:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001e76:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e7a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001e90:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001e94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e98:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001ea6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001eaa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001eae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001eb2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eb6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ece:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001ed8:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001edc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001ee0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ee4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001eee:	3308      	adds	r3, #8
 8001ef0:	ed93 5a00 	vldr	s10, [r3]
 8001ef4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ef8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f02:	3304      	adds	r3, #4
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001f0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f10:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f18:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001f1c:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 8001f20:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f24:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001f32:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
							 ) * r->qdot_bi.pData[0];
 8001f40:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001f44:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 8001f48:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001f56:	eeb1 7a67 	vneg.f32	s14, s15
 8001f5a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f5e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7e:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f86:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f8a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f94:	3308      	adds	r3, #8
 8001f96:	edd3 6a00 	vldr	s13, [r3]
 8001f9a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f9e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fa8:	3304      	adds	r3, #4
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	edd3 6a00 	vldr	s13, [r3]
 8001fca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fd8:	3304      	adds	r3, #4
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fe2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fe6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff6:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 8001ffa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ffe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8002008:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800200c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800201a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800201e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8002028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202c:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8002030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002034:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002038:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002042:	3304      	adds	r3, #4
 8002044:	edd3 6a00 	vldr	s13, [r3]
 8002048:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800204c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8002056:	3304      	adds	r3, #4
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002060:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002064:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800206e:	3308      	adds	r3, #8
 8002070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002074:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002078:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800207c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 800208c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002090:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	ed93 7abf 	vldr	s14, [r3, #764]	@ 0x2fc
 800209a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800209e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 80020a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 80020ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80020c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80022ec <robot_model_param_cal+0xc00>
 80020d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80020e6:	3304      	adds	r3, #4
 80020e8:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80020ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f0:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 80020f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020f8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8002102:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80022ec <robot_model_param_cal+0xc00>
 8002106:	ee27 7a87 	vmul.f32	s14, s15, s14
 800210a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800210e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8002118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002120:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800212a:	3308      	adds	r3, #8
 800212c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002134:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 8002138:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800213c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002146:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 800214a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002152:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800215c:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 800216c:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 8002170:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002178:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 800217c:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8002180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002188:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 800218c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002190:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800219a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800219e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 80022f0 <robot_model_param_cal+0xc04>
 80021b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80021b4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80021c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80022f4 <robot_model_param_cal+0xc08>
 80021d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021dc:	eef0 0a67 	vmov.f32	s1, s15
 80021e0:	eeb0 0a66 	vmov.f32	s0, s13
 80021e4:	f012 fb56 	bl	8014894 <fmaxf>
 80021e8:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 80021ec:	4b42      	ldr	r3, [pc, #264]	@ (80022f8 <robot_model_param_cal+0xc0c>)
 80021ee:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 80021f2:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 80021f6:	eef0 7ae7 	vabs.f32	s15, s15
 80021fa:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 80021fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002206:	dc0b      	bgt.n	8002220 <robot_model_param_cal+0xb34>
 8002208:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800220c:	eef0 7ae7 	vabs.f32	s15, s15
 8002210:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 8002214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	f340 82aa 	ble.w	8002774 <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8002228:	2203      	movs	r2, #3
 800222a:	2103      	movs	r1, #3
 800222c:	f00e fb7c 	bl	8010928 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 8002230:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002234:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8002238:	2203      	movs	r2, #3
 800223a:	2103      	movs	r1, #3
 800223c:	f00e fb74 	bl	8010928 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 8002240:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002244:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 8002248:	2203      	movs	r2, #3
 800224a:	2103      	movs	r1, #3
 800224c:	f00e fb6c 	bl	8010928 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002250:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002254:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800225e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002262:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 800226c:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8002270:	4619      	mov	r1, r3
 8002272:	f00e f9b7 	bl	80105e4 <arm_mat_mult_f32>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <robot_model_param_cal+0xb9a>
 800227c:	4b1f      	ldr	r3, [pc, #124]	@ (80022fc <robot_model_param_cal+0xc10>)
 800227e:	2204      	movs	r2, #4
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f002 fd39 	bl	8004cf8 <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002286:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800228a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002296:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800229a:	edd3 7a04 	vldr	s15, [r3, #16]
 800229e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022a6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80022aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 80022b6:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 80022ba:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80022be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80022f0 <robot_model_param_cal+0xc04>
 80022c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002300 <robot_model_param_cal+0xc14>
 80022ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d2:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 80022d6:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 80022da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022de:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80022e8:	e023      	b.n	8002332 <robot_model_param_cal+0xc46>
 80022ea:	bf00      	nop
 80022ec:	411ce80a 	.word	0x411ce80a
 80022f0:	358637bd 	.word	0x358637bd
 80022f4:	34000000 	.word	0x34000000
 80022f8:	358637bd 	.word	0x358637bd
 80022fc:	24001684 	.word	0x24001684
 8002300:	3d4ccccd 	.word	0x3d4ccccd
 8002304:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002308:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 800230c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800231a:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 800231e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800232c:	3301      	adds	r3, #1
 800232e:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002332:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8002336:	2b08      	cmp	r3, #8
 8002338:	dde4      	ble.n	8002304 <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 800233a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800233e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 800234a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002352:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002356:	edc3 7a00 	vstr	s15, [r3]
 800235a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800235e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002362:	ed93 7a04 	vldr	s14, [r3, #16]
 8002366:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 800236a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002372:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002376:	edc3 7a04 	vstr	s15, [r3, #16]
 800237a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800237e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002382:	ed93 7a08 	vldr	s14, [r3, #32]
 8002386:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 800238a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002392:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002396:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800239a:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800239e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f00e f9c1 	bl	801072c <arm_mat_inverse_f32>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <robot_model_param_cal+0xcce>
 80023b0:	4b82      	ldr	r3, [pc, #520]	@ (80025bc <robot_model_param_cal+0xed0>)
 80023b2:	2204      	movs	r2, #4
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	f002 fc9f 	bl	8004cf8 <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80023ba:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023be:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 80023c8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023cc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 80023d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80023da:	4619      	mov	r1, r3
 80023dc:	f00e f902 	bl	80105e4 <arm_mat_mult_f32>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <robot_model_param_cal+0xd04>
 80023e6:	4b75      	ldr	r3, [pc, #468]	@ (80025bc <robot_model_param_cal+0xed0>)
 80023e8:	2204      	movs	r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f002 fc84 	bl	8004cf8 <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80023f0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80023f4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 80023fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002402:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f00e f88a 	bl	8010528 <arm_mat_trans_f32>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d004      	beq.n	8002424 <robot_model_param_cal+0xd38>
 800241a:	4b68      	ldr	r3, [pc, #416]	@ (80025bc <robot_model_param_cal+0xed0>)
 800241c:	2204      	movs	r2, #4
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	f002 fc6a 	bl	8004cf8 <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 8002424:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002428:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 800242c:	2203      	movs	r2, #3
 800242e:	2103      	movs	r1, #3
 8002430:	f00e fa7a 	bl	8010928 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 8002434:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002438:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 800243c:	2203      	movs	r2, #3
 800243e:	2103      	movs	r1, #3
 8002440:	f00e fa72 	bl	8010928 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 8002444:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002448:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800244c:	2203      	movs	r2, #3
 800244e:	2103      	movs	r1, #3
 8002450:	f00e fa6a 	bl	8010928 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 8002454:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8002458:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800245c:	2203      	movs	r2, #3
 800245e:	2103      	movs	r1, #3
 8002460:	f00e fa62 	bl	8010928 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 8002464:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002468:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800246c:	2203      	movs	r2, #3
 800246e:	2103      	movs	r1, #3
 8002470:	f00e fa5a 	bl	8010928 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002474:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002478:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 8002482:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f00e f94f 	bl	801072c <arm_mat_inverse_f32>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f040 80b2 	bne.w	80025fa <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002496:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800249a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80024a4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80024a8:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80024ac:	4618      	mov	r0, r3
 80024ae:	f00e f899 	bl	80105e4 <arm_mat_mult_f32>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <robot_model_param_cal+0xdd6>
 80024b8:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <robot_model_param_cal+0xed0>)
 80024ba:	2204      	movs	r2, #4
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f002 fc1b 	bl	8004cf8 <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80024c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 715f 	add.w	r1, r3, #892	@ 0x37c
 80024d0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80024d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80024d8:	4618      	mov	r0, r3
 80024da:	f00e f883 	bl	80105e4 <arm_mat_mult_f32>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <robot_model_param_cal+0xe02>
 80024e4:	4b35      	ldr	r3, [pc, #212]	@ (80025bc <robot_model_param_cal+0xed0>)
 80024e6:	2204      	movs	r2, #4
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f002 fc05 	bl	8004cf8 <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80024f4:	e016      	b.n	8002524 <robot_model_param_cal+0xe38>
 80024f6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024fa:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80024fe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800250c:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 8002510:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800251e:	3301      	adds	r3, #1
 8002520:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002524:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8002528:	2b08      	cmp	r3, #8
 800252a:	dde4      	ble.n	80024f6 <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 8002534:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002548:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800254c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002550:	edc3 7a00 	vstr	s15, [r3]
 8002554:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002558:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800255c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002560:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002568:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800256c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002570:	edc3 7a04 	vstr	s15, [r3, #16]
 8002574:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800257c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002580:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002588:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800258c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002590:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002594:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002598:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f00e f8c4 	bl	801072c <arm_mat_inverse_f32>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <robot_model_param_cal+0xec8>
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <robot_model_param_cal+0xed0>)
 80025ac:	2204      	movs	r2, #4
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f002 fba2 	bl	8004cf8 <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80025ba:	e01a      	b.n	80025f2 <robot_model_param_cal+0xf06>
 80025bc:	24001684 	.word	0x24001684
 80025c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80025ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 80025e0:	443a      	add	r2, r7
 80025e2:	3ae0      	subs	r2, #224	@ 0xe0
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80025ec:	3301      	adds	r3, #1
 80025ee:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80025f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	dde2      	ble.n	80025c0 <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 80025fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025fe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002608:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800260c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 800261a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800261e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002628:	3304      	adds	r3, #4
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002630:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002634:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800263e:	3308      	adds	r3, #8
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002646:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800264a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002654:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002658:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 800266c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002670:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 800267a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800267e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002688:	3301      	adds	r3, #1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	441a      	add	r2, r3
 800268e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002692:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 800269c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026aa:	3301      	adds	r3, #1
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 80026b4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80026c2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026c6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026d0:	3302      	adds	r3, #2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 80026dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80026ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002702:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002706:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002710:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002714:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	3304      	adds	r3, #4
 8002722:	4413      	add	r3, r2
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 800272a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800272e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002738:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800273c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002746:	3301      	adds	r3, #1
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	441a      	add	r2, r3
 800274c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002750:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 800275a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800275e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002768:	3301      	adds	r3, #1
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	601a      	str	r2, [r3, #0]
	{
 8002772:	e227      	b.n	8002bc4 <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 8002774:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002778:	eef1 6a67 	vneg.f32	s13, s15
 800277c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002780:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 800278a:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800278e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002792:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 8002796:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800279a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80027a4:	3304      	adds	r3, #4
 80027a6:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 80027aa:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 80027ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 80027b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 80027c4:	3308      	adds	r3, #8
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 80027cc:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80027d0:	eeb1 7a67 	vneg.f32	s14, s15
 80027d4:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80027d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80027ea:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80027ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002800:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002804:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002816:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 800281a:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800281e:	eeb1 7a67 	vneg.f32	s14, s15
 8002822:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002826:	ee67 6a27 	vmul.f32	s13, s14, s15
 800282a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800282e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002838:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800283c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002840:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002844:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800284e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002852:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800285c:	3301      	adds	r3, #1
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002866:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 800286a:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800286e:	eef1 6a67 	vneg.f32	s13, s15
 8002872:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002876:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002880:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002888:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800288c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002896:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800289a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80028a4:	3302      	adds	r3, #2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ae:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 80028b2:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 80028b6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80028ba:	ee67 6a27 	vmul.f32	s13, s14, s15
 80028be:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80028cc:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80028d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80028e2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028e6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028f8:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 80028fc:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8002900:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002904:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002908:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800290c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002916:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800291a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002922:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800292c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002930:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	3304      	adds	r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002944:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 8002948:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800294c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002956:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800295a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002962:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800296c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002970:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800297a:	3301      	adds	r3, #1
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 8002984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002988:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800298c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002990:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 800299a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800299e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f00d fdbc 	bl	8010528 <arm_mat_trans_f32>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d004      	beq.n	80029c0 <robot_model_param_cal+0x12d4>
 80029b6:	4b86      	ldr	r3, [pc, #536]	@ (8002bd0 <robot_model_param_cal+0x14e4>)
 80029b8:	2204      	movs	r2, #4
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	f002 f99c 	bl	8004cf8 <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 80029c0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029c4:	2224      	movs	r2, #36	@ 0x24
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f00f fb1c 	bl	8012006 <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 80029ce:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029d2:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80029d6:	2203      	movs	r2, #3
 80029d8:	2103      	movs	r1, #3
 80029da:	f00d ffa5 	bl	8010928 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80029de:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f503 7075 	add.w	r0, r3, #980	@ 0x3d4
 80029ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80029fa:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80029fe:	4619      	mov	r1, r3
 8002a00:	f00d fdf0 	bl	80105e4 <arm_mat_mult_f32>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <robot_model_param_cal+0x1328>
 8002a0a:	4b71      	ldr	r3, [pc, #452]	@ (8002bd0 <robot_model_param_cal+0x14e4>)
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f002 f972 	bl	8004cf8 <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002a14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8002a22:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a26:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 8002a30:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002a34:	4619      	mov	r1, r3
 8002a36:	f00d fdd5 	bl	80105e4 <arm_mat_mult_f32>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <robot_model_param_cal+0x135e>
 8002a40:	4b63      	ldr	r3, [pc, #396]	@ (8002bd0 <robot_model_param_cal+0x14e4>)
 8002a42:	2204      	movs	r2, #4
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f002 f957 	bl	8004cf8 <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8002a4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002a58:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a5c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002a6a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a78:	3304      	adds	r3, #4
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002a80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a8e:	3308      	adds	r3, #8
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002a96:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a9a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002aa4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aa8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8002abc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ac0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002aca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ace:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002ad8:	3301      	adds	r3, #1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	441a      	add	r2, r3
 8002ade:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ae2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002aec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002af0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002afa:	3301      	adds	r3, #1
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	6812      	ldr	r2, [r2, #0]
 8002b02:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002b04:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002b12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b20:	3302      	adds	r3, #2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002b2c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b30:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002b3a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b3e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002b52:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b56:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002b60:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b64:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	3304      	adds	r3, #4
 8002b72:	4413      	add	r3, r2
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 8002b7a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002b88:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002b96:	3301      	adds	r3, #1
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	441a      	add	r2, r3
 8002b9c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ba0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002baa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002bae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002bb8:	3301      	adds	r3, #1
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	601a      	str	r2, [r3, #0]
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	24001684 	.word	0x24001684

08002bd4 <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	e0cb      	b.n	8002d7a <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	3374      	adds	r3, #116	@ 0x74
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	ed93 7a00 	vldr	s14, [r3]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2198      	movs	r1, #152	@ 0x98
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	332c      	adds	r3, #44	@ 0x2c
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c06:	4bae      	ldr	r3, [pc, #696]	@ (8002ec0 <robot_state_update+0x2ec>)
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3374      	adds	r3, #116	@ 0x74
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	ed93 7a00 	vldr	s14, [r3]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	2198      	movs	r1, #152	@ 0x98
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3330      	adds	r3, #48	@ 0x30
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ec0 <robot_state_update+0x2ec>)
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6a:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	3374      	adds	r3, #116	@ 0x74
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	ed93 7a00 	vldr	s14, [r3]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2198      	movs	r1, #152	@ 0x98
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	3334      	adds	r3, #52	@ 0x34
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9e:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	3374      	adds	r3, #116	@ 0x74
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	ed93 7a00 	vldr	s14, [r3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2198      	movs	r1, #152	@ 0x98
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3338      	adds	r3, #56	@ 0x38
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	3374      	adds	r3, #116	@ 0x74
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	ed93 7a00 	vldr	s14, [r3]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2198      	movs	r1, #152	@ 0x98
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	333c      	adds	r3, #60	@ 0x3c
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d06:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3374      	adds	r3, #116	@ 0x74
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	ed93 7a00 	vldr	s14, [r3]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	2198      	movs	r1, #152	@ 0x98
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3340      	adds	r3, #64	@ 0x40
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3a:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3374      	adds	r3, #116	@ 0x74
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	ed93 7a00 	vldr	s14, [r3]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	2198      	movs	r1, #152	@ 0x98
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d70:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	3301      	adds	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	f77f af30 	ble.w	8002be2 <robot_state_update+0xe>
	}

	// 2. Range of Motion Checking
	r->q.pData[0] = r->q_bi.pData[0];
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	601a      	str	r2, [r3, #0]
	r->q.pData[1] = r->q_bi.pData[1];
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d9e:	3304      	adds	r3, #4
 8002da0:	6852      	ldr	r2, [r2, #4]
 8002da2:	601a      	str	r2, [r3, #0]
	r->q.pData[2] = r->q_bi.pData[2] - r->q_bi.pData[1];
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002daa:	3308      	adds	r3, #8
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002db6:	3304      	adds	r3, #4
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc8:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	e036      	b.n	8002e40 <robot_state_update+0x26c>
		if (r->q.pData[i] > r->q_upper_ROM[i]) { sta=5; Error_Handler(); }
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	ed93 7a00 	vldr	s14, [r3]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	337c      	adds	r3, #124	@ 0x7c
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	dd05      	ble.n	8002e06 <robot_state_update+0x232>
 8002dfa:	4b32      	ldr	r3, [pc, #200]	@ (8002ec4 <robot_state_update+0x2f0>)
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	f001 ff7a 	bl	8004cf8 <Error_Handler>
 8002e04:	e019      	b.n	8002e3a <robot_state_update+0x266>
		else if (r->q.pData[i] < r->q_lower_ROM[i]) { sta=5; Error_Handler(); }
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	ed93 7a00 	vldr	s14, [r3]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	337e      	adds	r3, #126	@ 0x7e
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d504      	bpl.n	8002e3a <robot_state_update+0x266>
 8002e30:	4b24      	ldr	r3, [pc, #144]	@ (8002ec4 <robot_state_update+0x2f0>)
 8002e32:	2205      	movs	r2, #5
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f001 ff5f 	bl	8004cf8 <Error_Handler>
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	ddc5      	ble.n	8002dd2 <robot_state_update+0x1fe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe fc50 	bl	80016ec <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fe fb67 	bl	8001520 <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e02c      	b.n	8002eb2 <robot_state_update+0x2de>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	441a      	add	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	@ 0x4d4
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	441a      	add	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 1510 	ldr.w	r1, [r3, #1296]	@ 0x510
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	441a      	add	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	ddcf      	ble.n	8002e58 <robot_state_update+0x284>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	e03f      	b.n	8002f3e <robot_state_update+0x36a>
 8002ebe:	bf00      	nop
 8002ec0:	24000ff4 	.word	0x24000ff4
 8002ec4:	24001684 	.word	0x24001684
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 1580 	ldr.w	r1, [r3, #1408]	@ 0x580
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	441a      	add	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	441a      	add	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	441a      	add	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	ddc1      	ble.n	8002ec8 <robot_state_update+0x2f4>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	e01e      	b.n	8002f88 <robot_state_update+0x3b4>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	441a      	add	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8d3 165c 	ldr.w	r1, [r3, #1628]	@ 0x65c
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3301      	adds	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	dddd      	ble.n	8002f4a <robot_state_update+0x376>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f503 61c6 	add.w	r1, r3, #1584	@ 0x630
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f00d fb1f 	bl	80105e4 <arm_mat_mult_f32>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <robot_state_update+0x3e2>
 8002fac:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <robot_state_update+0x3ec>)
 8002fae:	2204      	movs	r2, #4
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f001 fea1 	bl	8004cf8 <Error_Handler>
}
 8002fb6:	bf00      	nop
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	24001684 	.word	0x24001684

08002fc4 <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e040      	b.n	800305a <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	4413      	add	r3, r2
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4413      	add	r3, r2
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3304      	adds	r3, #4
 8003020:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	6a3a      	ldr	r2, [r7, #32]
 8003028:	4413      	add	r3, r2
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68f9      	ldr	r1, [r7, #12]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3304      	adds	r3, #4
 800303a:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003042:	4413      	add	r3, r2
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68f9      	ldr	r1, [r7, #12]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3301      	adds	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b02      	cmp	r3, #2
 800305e:	ddbb      	ble.n	8002fd8 <robot_pos_pid_gain_setting+0x14>
	}
}
 8003060:	bf00      	nop
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e145      	b.n	8003310 <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 8003084:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 8003348 <robot_pos_pid+0x2d8>
 8003088:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	edd3 7a00 	vldr	s15, [r3]
 800309c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a8:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	441a      	add	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	ed93 7a00 	vldr	s14, [r3]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f4:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	ed93 7a00 	vldr	s14, [r3]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	edd3 7a00 	vldr	s15, [r3]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003128:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800334c <robot_pos_pid+0x2dc>
 8003142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003146:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800314a:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 800314e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	ed93 7a00 	vldr	s14, [r3]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	edd3 5a00 	vldr	s11, [r3]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	3304      	adds	r3, #4
 80031ae:	edd3 5a00 	vldr	s11, [r3]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80031c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	edd3 7a00 	vldr	s15, [r3]
 80031e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031fa:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003212:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003216:	edd7 7a04 	vldr	s15, [r7, #16]
 800321a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800321e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8003222:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800334c <robot_pos_pid+0x2dc>
 8003226:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800322a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800322e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	ed93 7a00 	vldr	s14, [r3]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800325a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800325e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800334c <robot_pos_pid+0x2dc>
 8003262:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003266:	edd7 7a04 	vldr	s15, [r7, #16]
 800326a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800326e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003272:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003276:	edd7 7a04 	vldr	s15, [r7, #16]
 800327a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800327e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003282:	eddf 7a32 	vldr	s15, [pc, #200]	@ 800334c <robot_pos_pid+0x2dc>
 8003286:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800328a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800328e:	ee84 5b07 	vdiv.f64	d5, d4, d7
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	edd3 7a00 	vldr	s15, [r3]
 80032a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80032aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032be:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	ed93 7a00 	vldr	s14, [r3]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003306:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b02      	cmp	r3, #2
 8003314:	f77f aeb6 	ble.w	8003084 <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f503 61a9 	add.w	r1, r3, #1352	@ 0x548
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 800332a:	461a      	mov	r2, r3
 800332c:	f00d f95a 	bl	80105e4 <arm_mat_mult_f32>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d004      	beq.n	8003340 <robot_pos_pid+0x2d0>
 8003336:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <robot_pos_pid+0x2e0>)
 8003338:	2204      	movs	r2, #4
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f001 fcdc 	bl	8004cf8 <Error_Handler>
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40490fd8 	.word	0x40490fd8
 800334c:	3b03126f 	.word	0x3b03126f
 8003350:	24001684 	.word	0x24001684

08003354 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a17      	ldr	r2, [pc, #92]	@ (80033c0 <HAL_UART_RxCpltCallback+0x6c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d127      	bne.n	80033b6 <HAL_UART_RxCpltCallback+0x62>
  {
    // 링버퍼에 바이트 저장 (넘치면 가장 오래된 바이트를 버림)
    uint16_t next = (uart3_widx + 1) & (UART3_RBUF_SIZE - 1);
 8003366:	4b17      	ldr	r3, [pc, #92]	@ (80033c4 <HAL_UART_RxCpltCallback+0x70>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	3301      	adds	r3, #1
 800336e:	b29b      	uxth	r3, r3
 8003370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003374:	81fb      	strh	r3, [r7, #14]
    if (next == uart3_ridx) {
 8003376:	4b14      	ldr	r3, [pc, #80]	@ (80033c8 <HAL_UART_RxCpltCallback+0x74>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	89fa      	ldrh	r2, [r7, #14]
 800337e:	429a      	cmp	r2, r3
 8003380:	d109      	bne.n	8003396 <HAL_UART_RxCpltCallback+0x42>
      // 버퍼 풀 → reader를 한 칸 앞으로 밀어 가장 오래된 것 1바이트 drop
      uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 8003382:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <HAL_UART_RxCpltCallback+0x74>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	3301      	adds	r3, #1
 800338a:	b29b      	uxth	r3, r3
 800338c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003390:	b29a      	uxth	r2, r3
 8003392:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <HAL_UART_RxCpltCallback+0x74>)
 8003394:	801a      	strh	r2, [r3, #0]
    }
    uart3_rbuf[uart3_widx] = uart3_rx_byte;
 8003396:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_UART_RxCpltCallback+0x70>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_UART_RxCpltCallback+0x78>)
 80033a0:	7819      	ldrb	r1, [r3, #0]
 80033a2:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_UART_RxCpltCallback+0x7c>)
 80033a4:	5499      	strb	r1, [r3, r2]
    uart3_widx = next;
 80033a6:	4a07      	ldr	r2, [pc, #28]	@ (80033c4 <HAL_UART_RxCpltCallback+0x70>)
 80033a8:	89fb      	ldrh	r3, [r7, #14]
 80033aa:	8013      	strh	r3, [r2, #0]

    // 다음 바이트 수신 재개
    HAL_UART_Receive_IT(&huart3, &uart3_rx_byte, 1);
 80033ac:	2201      	movs	r2, #1
 80033ae:	4907      	ldr	r1, [pc, #28]	@ (80033cc <HAL_UART_RxCpltCallback+0x78>)
 80033b0:	4808      	ldr	r0, [pc, #32]	@ (80033d4 <HAL_UART_RxCpltCallback+0x80>)
 80033b2:	f007 feed 	bl	800b190 <HAL_UART_Receive_IT>
  }
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40004800 	.word	0x40004800
 80033c4:	24000bc4 	.word	0x24000bc4
 80033c8:	24000bc6 	.word	0x24000bc6
 80033cc:	24000bc8 	.word	0x24000bc8
 80033d0:	240003c4 	.word	0x240003c4
 80033d4:	24000328 	.word	0x24000328

080033d8 <uart3_rb_pop>:

// 링버퍼에서 1바이트 pop (읽을 게 없으면 0 반환)
static int uart3_rb_pop(uint8_t *out)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if (uart3_ridx == uart3_widx) return 0;  // empty
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <uart3_rb_pop+0x50>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	4b11      	ldr	r3, [pc, #68]	@ (800342c <uart3_rb_pop+0x54>)
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d101      	bne.n	80033f4 <uart3_rb_pop+0x1c>
 80033f0:	2300      	movs	r3, #0
 80033f2:	e012      	b.n	800341a <uart3_rb_pop+0x42>
  *out = uart3_rbuf[uart3_ridx];
 80033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <uart3_rb_pop+0x50>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <uart3_rb_pop+0x58>)
 80033fe:	5c9a      	ldrb	r2, [r3, r2]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	701a      	strb	r2, [r3, #0]
  uart3_ridx = (uart3_ridx + 1) & (UART3_RBUF_SIZE - 1);
 8003404:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <uart3_rb_pop+0x50>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	3301      	adds	r3, #1
 800340c:	b29b      	uxth	r3, r3
 800340e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003412:	b29a      	uxth	r2, r3
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <uart3_rb_pop+0x50>)
 8003416:	801a      	strh	r2, [r3, #0]
  return 1;
 8003418:	2301      	movs	r3, #1
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	24000bc6 	.word	0x24000bc6
 800342c:	24000bc4 	.word	0x24000bc4
 8003430:	240003c4 	.word	0x240003c4

08003434 <trim_spaces>:

// 좌우 공백 제거
static inline void trim_spaces(char *s) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  char *p = s;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60fb      	str	r3, [r7, #12]
  while (*p==' ' || *p=='\t') ++p;
 8003440:	e002      	b.n	8003448 <trim_spaces+0x14>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b20      	cmp	r3, #32
 800344e:	d0f8      	beq.n	8003442 <trim_spaces+0xe>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b09      	cmp	r3, #9
 8003456:	d0f4      	beq.n	8003442 <trim_spaces+0xe>
  if (p!=s) memmove(s, p, strlen(p)+1);
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d009      	beq.n	8003474 <trim_spaces+0x40>
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7fc ff8d 	bl	8000380 <strlen>
 8003466:	4603      	mov	r3, r0
 8003468:	3301      	adds	r3, #1
 800346a:	461a      	mov	r2, r3
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f00e fdaf 	bl	8011fd2 <memmove>
  for (int i=(int)strlen(s)-1; i>=0 && (s[i]==' ' || s[i]=='\t'); --i) s[i]='\0';
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fc ff83 	bl	8000380 <strlen>
 800347a:	4603      	mov	r3, r0
 800347c:	3b01      	subs	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	e007      	b.n	8003492 <trim_spaces+0x5e>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4413      	add	r3, r2
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3b01      	subs	r3, #1
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db0b      	blt.n	80034b0 <trim_spaces+0x7c>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	4413      	add	r3, r2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d0ee      	beq.n	8003482 <trim_spaces+0x4e>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	d0e8      	beq.n	8003482 <trim_spaces+0x4e>
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <parse_pc_line_to_floats>:

// 한 줄을 파싱: [ ... 19개 ... ] 에서 float들 추출
static int parse_pc_line_to_floats(char *line, float vals[], int maxn)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b08b      	sub	sp, #44	@ 0x2c
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  // 대괄호 범위 찾기
  char *L = strchr(line, '[');
 80034c4:	215b      	movs	r1, #91	@ 0x5b
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f00e fda5 	bl	8012016 <strchr>
 80034cc:	61f8      	str	r0, [r7, #28]
  char *R = strrchr(line, ']');
 80034ce:	215d      	movs	r1, #93	@ 0x5d
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f00e fdbf 	bl	8012054 <strrchr>
 80034d6:	61b8      	str	r0, [r7, #24]
  if (!L || !R || R <= L) return 0;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <parse_pc_line_to_floats+0x34>
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <parse_pc_line_to_floats+0x34>
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d801      	bhi.n	80034f0 <parse_pc_line_to_floats+0x38>
 80034ec:	2300      	movs	r3, #0
 80034ee:	e033      	b.n	8003558 <parse_pc_line_to_floats+0xa0>

  *R = '\0';   // ']' 대신 문자열 끝
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
  ++L;         // '[' 다음부터
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]

  int count = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
  char *save = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  char *tok = strtok_r(L, ",", &save);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	461a      	mov	r2, r3
 800350a:	4915      	ldr	r1, [pc, #84]	@ (8003560 <parse_pc_line_to_floats+0xa8>)
 800350c:	69f8      	ldr	r0, [r7, #28]
 800350e:	f00e fddf 	bl	80120d0 <strtok_r>
 8003512:	6238      	str	r0, [r7, #32]
  while (tok && count < maxn) {
 8003514:	e018      	b.n	8003548 <parse_pc_line_to_floats+0x90>
    trim_spaces(tok);
 8003516:	6a38      	ldr	r0, [r7, #32]
 8003518:	f7ff ff8c 	bl	8003434 <trim_spaces>
    vals[count++] = strtof(tok, NULL);
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	627a      	str	r2, [r7, #36]	@ 0x24
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	18d4      	adds	r4, r2, r3
 8003528:	2100      	movs	r1, #0
 800352a:	6a38      	ldr	r0, [r7, #32]
 800352c:	f00d ffb8 	bl	80114a0 <strtof>
 8003530:	eef0 7a40 	vmov.f32	s15, s0
 8003534:	edc4 7a00 	vstr	s15, [r4]
    tok = strtok_r(NULL, ",", &save);
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	461a      	mov	r2, r3
 800353e:	4908      	ldr	r1, [pc, #32]	@ (8003560 <parse_pc_line_to_floats+0xa8>)
 8003540:	2000      	movs	r0, #0
 8003542:	f00e fdc5 	bl	80120d0 <strtok_r>
 8003546:	6238      	str	r0, [r7, #32]
  while (tok && count < maxn) {
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <parse_pc_line_to_floats+0x9e>
 800354e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	429a      	cmp	r2, r3
 8003554:	dbdf      	blt.n	8003516 <parse_pc_line_to_floats+0x5e>
  }
  return count;
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003558:	4618      	mov	r0, r3
 800355a:	372c      	adds	r7, #44	@ 0x2c
 800355c:	46bd      	mov	sp, r7
 800355e:	bd90      	pop	{r4, r7, pc}
 8003560:	08014c94 	.word	0x08014c94

08003564 <apply_pc_floats>:

// 파싱 결과를 시스템 파라미터에 반영 (요청대로 DataLoggingTask에서 직접 반영)
static void apply_pc_floats(const float v[PC_MSG_FIELDS])
{
 8003564:	b480      	push	{r7}
 8003566:	b097      	sub	sp, #92	@ 0x5c
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	// 인덱스 매핑
	const int T   = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	657b      	str	r3, [r7, #84]	@ 0x54
	const int tx  = 1,  ty  = 2,  tz  = 3;
 8003570:	2301      	movs	r3, #1
 8003572:	653b      	str	r3, [r7, #80]	@ 0x50
 8003574:	2302      	movs	r3, #2
 8003576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003578:	2303      	movs	r3, #3
 800357a:	64bb      	str	r3, [r7, #72]	@ 0x48
	const int xKp = 4,  xKi = 5,  xKd = 6,  xCf = 7,  xAw = 8;
 800357c:	2304      	movs	r3, #4
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003580:	2305      	movs	r3, #5
 8003582:	643b      	str	r3, [r7, #64]	@ 0x40
 8003584:	2306      	movs	r3, #6
 8003586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003588:	2307      	movs	r3, #7
 800358a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800358c:	2308      	movs	r3, #8
 800358e:	637b      	str	r3, [r7, #52]	@ 0x34
	const int yKp = 9,  yKi =10,  yKd =11,  yCf =12,  yAw =13;
 8003590:	2309      	movs	r3, #9
 8003592:	633b      	str	r3, [r7, #48]	@ 0x30
 8003594:	230a      	movs	r3, #10
 8003596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003598:	230b      	movs	r3, #11
 800359a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359c:	230c      	movs	r3, #12
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a0:	230d      	movs	r3, #13
 80035a2:	623b      	str	r3, [r7, #32]
	const int zKp =14,  zKi =15,  zKd =16,  zCf =17,  zAw =18;
 80035a4:	230e      	movs	r3, #14
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	230f      	movs	r3, #15
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	2310      	movs	r3, #16
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	2311      	movs	r3, #17
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	2312      	movs	r3, #18
 80035b6:	60fb      	str	r3, [r7, #12]

	// 간단한 유효성 (원하면 강화)
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	edd3 7a00 	vldr	s15, [r3]
 80035c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035cc:	d97f      	bls.n	80036ce <apply_pc_floats+0x16a>
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	d974      	bls.n	80036ce <apply_pc_floats+0x16a>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	d969      	bls.n	80036ce <apply_pc_floats+0x16a>
	//  target_posXYZ.pData[0] = v[tx];
	//  target_posXYZ.pData[1] = v[ty];
	//  target_posXYZ.pData[2] = v[tz];

	// 3) XYZ 게인/컷오프/안티윈드업
	taskspace_p_gain[0]     	   = v[xKp];
 80035fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a35      	ldr	r2, [pc, #212]	@ (80036dc <apply_pc_floats+0x178>)
 8003606:	6013      	str	r3, [r2, #0]
	taskspace_i_gain[0]     	   = v[xKi];
 8003608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a33      	ldr	r2, [pc, #204]	@ (80036e0 <apply_pc_floats+0x17c>)
 8003614:	6013      	str	r3, [r2, #0]
	taskspace_d_gain[0]     	   = v[xKd];
 8003616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a30      	ldr	r2, [pc, #192]	@ (80036e4 <apply_pc_floats+0x180>)
 8003622:	6013      	str	r3, [r2, #0]
	taskspace_pid_cutoff[0]        = v[xCf];
 8003624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	4413      	add	r3, r2
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2e      	ldr	r2, [pc, #184]	@ (80036e8 <apply_pc_floats+0x184>)
 8003630:	6013      	str	r3, [r2, #0]
	taskspace_windup_gain[0]       = v[xAw];
 8003632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <apply_pc_floats+0x188>)
 800363e:	6013      	str	r3, [r2, #0]

	taskspace_p_gain[1]     	   = v[yKp];
 8003640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a24      	ldr	r2, [pc, #144]	@ (80036dc <apply_pc_floats+0x178>)
 800364c:	6053      	str	r3, [r2, #4]
	taskspace_i_gain[1]     	   = v[yKi];
 800364e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a21      	ldr	r2, [pc, #132]	@ (80036e0 <apply_pc_floats+0x17c>)
 800365a:	6053      	str	r3, [r2, #4]
	taskspace_d_gain[1]     	   = v[yKd];
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1f      	ldr	r2, [pc, #124]	@ (80036e4 <apply_pc_floats+0x180>)
 8003668:	6053      	str	r3, [r2, #4]
	taskspace_pid_cutoff[1]        = v[yCf];
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <apply_pc_floats+0x184>)
 8003676:	6053      	str	r3, [r2, #4]
	taskspace_windup_gain[1]       = v[yAw];
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1a      	ldr	r2, [pc, #104]	@ (80036ec <apply_pc_floats+0x188>)
 8003684:	6053      	str	r3, [r2, #4]

	taskspace_p_gain[2]     	   = v[zKp];
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4413      	add	r3, r2
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a12      	ldr	r2, [pc, #72]	@ (80036dc <apply_pc_floats+0x178>)
 8003692:	6093      	str	r3, [r2, #8]
	taskspace_i_gain[2]    	       = v[zKi];
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a10      	ldr	r2, [pc, #64]	@ (80036e0 <apply_pc_floats+0x17c>)
 80036a0:	6093      	str	r3, [r2, #8]
	taskspace_d_gain[2]     	   = v[zKd];
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <apply_pc_floats+0x180>)
 80036ae:	6093      	str	r3, [r2, #8]
	taskspace_pid_cutoff[2]        = v[zCf];
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a0b      	ldr	r2, [pc, #44]	@ (80036e8 <apply_pc_floats+0x184>)
 80036bc:	6093      	str	r3, [r2, #8]
	taskspace_windup_gain[2]       = v[zAw];
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <apply_pc_floats+0x188>)
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	e000      	b.n	80036d0 <apply_pc_floats+0x16c>
	if (v[xCf] <= 0 || v[yCf] <= 0 || v[zCf] <= 0) return;
 80036ce:	bf00      	nop
}
 80036d0:	375c      	adds	r7, #92	@ 0x5c
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	24000024 	.word	0x24000024
 80036e0:	24000030 	.word	0x24000030
 80036e4:	2400003c 	.word	0x2400003c
 80036e8:	24000048 	.word	0x24000048
 80036ec:	2400100c 	.word	0x2400100c

080036f0 <uart3_poll_and_process_lines>:

// 링버퍼에서 줄 단위로 꺼내 처리 (CR 무시, LF로 완료)
static void uart3_poll_and_process_lines(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b096      	sub	sp, #88	@ 0x58
 80036f4:	af00      	add	r7, sp, #0
  uint8_t b;
  while (uart3_rb_pop(&b)) {
 80036f6:	e03b      	b.n	8003770 <uart3_poll_and_process_lines+0x80>
    char c = (char)b;
 80036f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80036fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (c == '\r') continue;
 8003700:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003704:	2b0d      	cmp	r3, #13
 8003706:	d032      	beq.n	800376e <uart3_poll_and_process_lines+0x7e>

    if (c == '\n') {
 8003708:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800370c:	2b0a      	cmp	r3, #10
 800370e:	d11a      	bne.n	8003746 <uart3_poll_and_process_lines+0x56>
      if (uart3_line_len > 0) {
 8003710:	4b1e      	ldr	r3, [pc, #120]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02b      	beq.n	8003770 <uart3_poll_and_process_lines+0x80>
        uart3_line[uart3_line_len] = '\0';
 8003718:	4b1c      	ldr	r3, [pc, #112]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1c      	ldr	r2, [pc, #112]	@ (8003790 <uart3_poll_and_process_lines+0xa0>)
 800371e:	2100      	movs	r1, #0
 8003720:	54d1      	strb	r1, [r2, r3]

        float vals[PC_MSG_FIELDS];
        int n = parse_pc_line_to_floats(uart3_line, vals, PC_MSG_FIELDS);
 8003722:	463b      	mov	r3, r7
 8003724:	2213      	movs	r2, #19
 8003726:	4619      	mov	r1, r3
 8003728:	4819      	ldr	r0, [pc, #100]	@ (8003790 <uart3_poll_and_process_lines+0xa0>)
 800372a:	f7ff fec5 	bl	80034b8 <parse_pc_line_to_floats>
 800372e:	6538      	str	r0, [r7, #80]	@ 0x50
        if (n == PC_MSG_FIELDS) {
 8003730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003732:	2b13      	cmp	r3, #19
 8003734:	d103      	bne.n	800373e <uart3_poll_and_process_lines+0x4e>
          apply_pc_floats(vals);
 8003736:	463b      	mov	r3, r7
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff13 	bl	8003564 <apply_pc_floats>
        } else {
          // 형식 불일치 시 무시(필요하면 printf로 경고)
          // printf("UART parse fail: got %d fields\r\n", n);
        }
        uart3_line_len = 0;
 800373e:	4b13      	ldr	r3, [pc, #76]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e014      	b.n	8003770 <uart3_poll_and_process_lines+0x80>
      }
    } else {
      if (uart3_line_len < UART3_LINE_MAX - 1) {
 8003746:	4b11      	ldr	r3, [pc, #68]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800374e:	4293      	cmp	r3, r2
 8003750:	d809      	bhi.n	8003766 <uart3_poll_and_process_lines+0x76>
        uart3_line[uart3_line_len++] = c;
 8003752:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	490c      	ldr	r1, [pc, #48]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 800375a:	600a      	str	r2, [r1, #0]
 800375c:	490c      	ldr	r1, [pc, #48]	@ (8003790 <uart3_poll_and_process_lines+0xa0>)
 800375e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8003762:	54ca      	strb	r2, [r1, r3]
 8003764:	e004      	b.n	8003770 <uart3_poll_and_process_lines+0x80>
      } else {
        // 라인 과길이 → 드롭 & 리셋
        uart3_line_len = 0;
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <uart3_poll_and_process_lines+0x9c>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e000      	b.n	8003770 <uart3_poll_and_process_lines+0x80>
    if (c == '\r') continue;
 800376e:	bf00      	nop
  while (uart3_rb_pop(&b)) {
 8003770:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fe2f 	bl	80033d8 <uart3_rb_pop>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1bb      	bne.n	80036f8 <uart3_poll_and_process_lines+0x8>
      }
    }
  }
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3758      	adds	r7, #88	@ 0x58
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	24000fcc 	.word	0x24000fcc
 8003790:	24000bcc 	.word	0x24000bcc

08003794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	e060      	b.n	8003862 <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	49bf      	ldr	r1, [pc, #764]	@ (8003aa4 <main+0x310>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2098      	movs	r0, #152	@ 0x98
 80037aa:	fb00 f303 	mul.w	r3, r0, r3
 80037ae:	440b      	add	r3, r1
 80037b0:	3308      	adds	r3, #8
 80037b2:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 80037b4:	4abb      	ldr	r2, [pc, #748]	@ (8003aa4 <main+0x310>)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2198      	movs	r1, #152	@ 0x98
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	330c      	adds	r3, #12
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 80037c6:	4ab7      	ldr	r2, [pc, #732]	@ (8003aa4 <main+0x310>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2198      	movs	r1, #152	@ 0x98
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3314      	adds	r3, #20
 80037d4:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80037d8:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 80037da:	4ab2      	ldr	r2, [pc, #712]	@ (8003aa4 <main+0x310>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2198      	movs	r1, #152	@ 0x98
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	3318      	adds	r3, #24
 80037e8:	4aaf      	ldr	r2, [pc, #700]	@ (8003aa8 <main+0x314>)
 80037ea:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 80037ec:	4aad      	ldr	r2, [pc, #692]	@ (8003aa4 <main+0x310>)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2198      	movs	r1, #152	@ 0x98
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	4413      	add	r3, r2
 80037f8:	331c      	adds	r3, #28
 80037fa:	4aac      	ldr	r2, [pc, #688]	@ (8003aac <main+0x318>)
 80037fc:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 80037fe:	2200      	movs	r2, #0
 8003800:	2108      	movs	r1, #8
 8003802:	2008      	movs	r0, #8
 8003804:	f00a fb1f 	bl	800de46 <xQueueGenericCreate>
 8003808:	4602      	mov	r2, r0
 800380a:	49a6      	ldr	r1, [pc, #664]	@ (8003aa4 <main+0x310>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2098      	movs	r0, #152	@ 0x98
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	440b      	add	r3, r1
 8003816:	3310      	adds	r3, #16
 8003818:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 800381a:	4aa2      	ldr	r2, [pc, #648]	@ (8003aa4 <main+0x310>)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2198      	movs	r1, #152	@ 0x98
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3310      	adds	r3, #16
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <main+0xa4>
			sta = 3;
 800382e:	4ba0      	ldr	r3, [pc, #640]	@ (8003ab0 <main+0x31c>)
 8003830:	2203      	movs	r2, #3
 8003832:	601a      	str	r2, [r3, #0]
			Error_Handler();
 8003834:	f001 fa60 	bl	8004cf8 <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 8003838:	4a9a      	ldr	r2, [pc, #616]	@ (8003aa4 <main+0x310>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2198      	movs	r1, #152	@ 0x98
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3394      	adds	r3, #148	@ 0x94
 8003846:	4a9b      	ldr	r2, [pc, #620]	@ (8003ab4 <main+0x320>)
 8003848:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 800384a:	4a96      	ldr	r2, [pc, #600]	@ (8003aa4 <main+0x310>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3301      	adds	r3, #1
 8003850:	2198      	movs	r1, #152	@ 0x98
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	4a97      	ldr	r2, [pc, #604]	@ (8003ab8 <main+0x324>)
 800385a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3301      	adds	r3, #1
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b02      	cmp	r3, #2
 8003866:	dd9b      	ble.n	80037a0 <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 8003868:	4b94      	ldr	r3, [pc, #592]	@ (8003abc <main+0x328>)
 800386a:	2201      	movs	r2, #1
 800386c:	2103      	movs	r1, #3
 800386e:	4894      	ldr	r0, [pc, #592]	@ (8003ac0 <main+0x32c>)
 8003870:	f00d f85a 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 8003874:	4b93      	ldr	r3, [pc, #588]	@ (8003ac4 <main+0x330>)
 8003876:	2201      	movs	r2, #1
 8003878:	2103      	movs	r1, #3
 800387a:	4893      	ldr	r0, [pc, #588]	@ (8003ac8 <main+0x334>)
 800387c:	f00d f854 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 8003880:	4b92      	ldr	r3, [pc, #584]	@ (8003acc <main+0x338>)
 8003882:	2201      	movs	r2, #1
 8003884:	2103      	movs	r1, #3
 8003886:	4892      	ldr	r0, [pc, #584]	@ (8003ad0 <main+0x33c>)
 8003888:	f00d f84e 	bl	8010928 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 800388c:	4b85      	ldr	r3, [pc, #532]	@ (8003aa4 <main+0x310>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 8003892:	4b84      	ldr	r3, [pc, #528]	@ (8003aa4 <main+0x310>)
 8003894:	2200      	movs	r2, #0
 8003896:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 8003898:	4b82      	ldr	r3, [pc, #520]	@ (8003aa4 <main+0x310>)
 800389a:	4a8e      	ldr	r2, [pc, #568]	@ (8003ad4 <main+0x340>)
 800389c:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 80038a0:	4b80      	ldr	r3, [pc, #512]	@ (8003aa4 <main+0x310>)
 80038a2:	4a8c      	ldr	r2, [pc, #560]	@ (8003ad4 <main+0x340>)
 80038a4:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 80038a8:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa4 <main+0x310>)
 80038aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038ae:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi;
 80038b2:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8003ad8 <main+0x344>
 80038b6:	eef1 7a67 	vneg.f32	s15, s15
 80038ba:	4b7a      	ldr	r3, [pc, #488]	@ (8003aa4 <main+0x310>)
 80038bc:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi;
 80038c0:	4a86      	ldr	r2, [pc, #536]	@ (8003adc <main+0x348>)
 80038c2:	4b78      	ldr	r3, [pc, #480]	@ (8003aa4 <main+0x310>)
 80038c4:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 80038c8:	4b76      	ldr	r3, [pc, #472]	@ (8003aa4 <main+0x310>)
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 80038d2:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8003ad8 <main+0x344>
 80038d6:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8003ae0 <main+0x34c>
 80038da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038de:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003ae4 <main+0x350>
 80038e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038e6:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa4 <main+0x310>)
 80038e8:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 80038ec:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8003ad8 <main+0x344>
 80038f0:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003ae0 <main+0x34c>
 80038f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f8:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003ae8 <main+0x354>
 80038fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003900:	4b68      	ldr	r3, [pc, #416]	@ (8003aa4 <main+0x310>)
 8003902:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 8003906:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003ad8 <main+0x344>
 800390a:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8003ae0 <main+0x34c>
 800390e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003912:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8003aec <main+0x358>
 8003916:	ee67 7a87 	vmul.f32	s15, s15, s14
 800391a:	4b62      	ldr	r3, [pc, #392]	@ (8003aa4 <main+0x310>)
 800391c:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 8003920:	4b60      	ldr	r3, [pc, #384]	@ (8003aa4 <main+0x310>)
 8003922:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <main+0x35c>)
 8003924:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	strawberry_robot.l2 = 0.46;
 8003928:	4b5e      	ldr	r3, [pc, #376]	@ (8003aa4 <main+0x310>)
 800392a:	4a72      	ldr	r2, [pc, #456]	@ (8003af4 <main+0x360>)
 800392c:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	strawberry_robot.l3 = 0.46;
 8003930:	4b5c      	ldr	r3, [pc, #368]	@ (8003aa4 <main+0x310>)
 8003932:	4a70      	ldr	r2, [pc, #448]	@ (8003af4 <main+0x360>)
 8003934:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

	// link mass setting
	strawberry_robot.m1 = 3.93949;
 8003938:	4b5a      	ldr	r3, [pc, #360]	@ (8003aa4 <main+0x310>)
 800393a:	4a6f      	ldr	r2, [pc, #444]	@ (8003af8 <main+0x364>)
 800393c:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
	strawberry_robot.m2 = 0;
 8003940:	4b58      	ldr	r3, [pc, #352]	@ (8003aa4 <main+0x310>)
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
	strawberry_robot.m3 = 0;
 800394a:	4b56      	ldr	r3, [pc, #344]	@ (8003aa4 <main+0x310>)
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300

	// link CoM position setting
	strawberry_robot.d2 = 0;
 8003954:	4b53      	ldr	r3, [pc, #332]	@ (8003aa4 <main+0x310>)
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	strawberry_robot.d3 = 0;
 800395e:	4b51      	ldr	r3, [pc, #324]	@ (8003aa4 <main+0x310>)
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

	// link inertia setting
	strawberry_robot.J1 = 0;
 8003968:	4b4e      	ldr	r3, [pc, #312]	@ (8003aa4 <main+0x310>)
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	strawberry_robot.J2 = 0;
 8003972:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa4 <main+0x310>)
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	strawberry_robot.J3 = 0;
 800397c:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <main+0x310>)
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 8003986:	4b5d      	ldr	r3, [pc, #372]	@ (8003afc <main+0x368>)
 8003988:	2201      	movs	r2, #1
 800398a:	2103      	movs	r1, #3
 800398c:	485c      	ldr	r0, [pc, #368]	@ (8003b00 <main+0x36c>)
 800398e:	f00c ffcb 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 8003992:	4b5c      	ldr	r3, [pc, #368]	@ (8003b04 <main+0x370>)
 8003994:	2201      	movs	r2, #1
 8003996:	2103      	movs	r1, #3
 8003998:	485b      	ldr	r0, [pc, #364]	@ (8003b08 <main+0x374>)
 800399a:	f00c ffc5 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 800399e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <main+0x378>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	2103      	movs	r1, #3
 80039a4:	485a      	ldr	r0, [pc, #360]	@ (8003b10 <main+0x37c>)
 80039a6:	f00c ffbf 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 80039aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003b14 <main+0x380>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	2103      	movs	r1, #3
 80039b0:	4859      	ldr	r0, [pc, #356]	@ (8003b18 <main+0x384>)
 80039b2:	f00c ffb9 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 80039b6:	4b59      	ldr	r3, [pc, #356]	@ (8003b1c <main+0x388>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	2103      	movs	r1, #3
 80039bc:	4858      	ldr	r0, [pc, #352]	@ (8003b20 <main+0x38c>)
 80039be:	f00c ffb3 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 80039c2:	4b58      	ldr	r3, [pc, #352]	@ (8003b24 <main+0x390>)
 80039c4:	2201      	movs	r2, #1
 80039c6:	2103      	movs	r1, #3
 80039c8:	4857      	ldr	r0, [pc, #348]	@ (8003b28 <main+0x394>)
 80039ca:	f00c ffad 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 80039ce:	4b57      	ldr	r3, [pc, #348]	@ (8003b2c <main+0x398>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	2103      	movs	r1, #3
 80039d4:	4856      	ldr	r0, [pc, #344]	@ (8003b30 <main+0x39c>)
 80039d6:	f00c ffa7 	bl	8010928 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 80039da:	4b56      	ldr	r3, [pc, #344]	@ (8003b34 <main+0x3a0>)
 80039dc:	2201      	movs	r2, #1
 80039de:	2103      	movs	r1, #3
 80039e0:	4855      	ldr	r0, [pc, #340]	@ (8003b38 <main+0x3a4>)
 80039e2:	f00c ffa1 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 80039e6:	4b55      	ldr	r3, [pc, #340]	@ (8003b3c <main+0x3a8>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	2103      	movs	r1, #3
 80039ec:	4854      	ldr	r0, [pc, #336]	@ (8003b40 <main+0x3ac>)
 80039ee:	f00c ff9b 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 80039f2:	4b54      	ldr	r3, [pc, #336]	@ (8003b44 <main+0x3b0>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	2103      	movs	r1, #3
 80039f8:	4853      	ldr	r0, [pc, #332]	@ (8003b48 <main+0x3b4>)
 80039fa:	f00c ff95 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 80039fe:	4b53      	ldr	r3, [pc, #332]	@ (8003b4c <main+0x3b8>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	2103      	movs	r1, #3
 8003a04:	4852      	ldr	r0, [pc, #328]	@ (8003b50 <main+0x3bc>)
 8003a06:	f00c ff8f 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 8003a0a:	4b52      	ldr	r3, [pc, #328]	@ (8003b54 <main+0x3c0>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2103      	movs	r1, #3
 8003a10:	4851      	ldr	r0, [pc, #324]	@ (8003b58 <main+0x3c4>)
 8003a12:	f00c ff89 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 8003a16:	4b51      	ldr	r3, [pc, #324]	@ (8003b5c <main+0x3c8>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	4850      	ldr	r0, [pc, #320]	@ (8003b60 <main+0x3cc>)
 8003a1e:	f00c ff83 	bl	8010928 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 8003a22:	4b50      	ldr	r3, [pc, #320]	@ (8003b64 <main+0x3d0>)
 8003a24:	2203      	movs	r2, #3
 8003a26:	2103      	movs	r1, #3
 8003a28:	484f      	ldr	r0, [pc, #316]	@ (8003b68 <main+0x3d4>)
 8003a2a:	f00c ff7d 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 8003a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8003b6c <main+0x3d8>)
 8003a30:	2203      	movs	r2, #3
 8003a32:	2103      	movs	r1, #3
 8003a34:	484e      	ldr	r0, [pc, #312]	@ (8003b70 <main+0x3dc>)
 8003a36:	f00c ff77 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b74 <main+0x3e0>)
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	2103      	movs	r1, #3
 8003a40:	484d      	ldr	r0, [pc, #308]	@ (8003b78 <main+0x3e4>)
 8003a42:	f00c ff71 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 8003a46:	4b4d      	ldr	r3, [pc, #308]	@ (8003b7c <main+0x3e8>)
 8003a48:	2203      	movs	r2, #3
 8003a4a:	2103      	movs	r1, #3
 8003a4c:	484c      	ldr	r0, [pc, #304]	@ (8003b80 <main+0x3ec>)
 8003a4e:	f00c ff6b 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 8003a52:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <main+0x3f0>)
 8003a54:	2203      	movs	r2, #3
 8003a56:	2103      	movs	r1, #3
 8003a58:	484b      	ldr	r0, [pc, #300]	@ (8003b88 <main+0x3f4>)
 8003a5a:	f00c ff65 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 8003a5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b8c <main+0x3f8>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	2103      	movs	r1, #3
 8003a64:	484a      	ldr	r0, [pc, #296]	@ (8003b90 <main+0x3fc>)
 8003a66:	f00c ff5f 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <main+0x400>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	2103      	movs	r1, #3
 8003a70:	4849      	ldr	r0, [pc, #292]	@ (8003b98 <main+0x404>)
 8003a72:	f00c ff59 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 8003a76:	4b49      	ldr	r3, [pc, #292]	@ (8003b9c <main+0x408>)
 8003a78:	2203      	movs	r2, #3
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	4848      	ldr	r0, [pc, #288]	@ (8003ba0 <main+0x40c>)
 8003a7e:	f00c ff53 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 8003a82:	4b48      	ldr	r3, [pc, #288]	@ (8003ba4 <main+0x410>)
 8003a84:	2203      	movs	r2, #3
 8003a86:	2103      	movs	r1, #3
 8003a88:	4847      	ldr	r0, [pc, #284]	@ (8003ba8 <main+0x414>)
 8003a8a:	f00c ff4d 	bl	8010928 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 8003a8e:	4b47      	ldr	r3, [pc, #284]	@ (8003bac <main+0x418>)
 8003a90:	2201      	movs	r2, #1
 8003a92:	2103      	movs	r1, #3
 8003a94:	4846      	ldr	r0, [pc, #280]	@ (8003bb0 <main+0x41c>)
 8003a96:	f00c ff47 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 8003a9a:	4b46      	ldr	r3, [pc, #280]	@ (8003bb4 <main+0x420>)
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	e08a      	b.n	8003bb8 <main+0x424>
 8003aa2:	bf00      	nop
 8003aa4:	24001018 	.word	0x24001018
 8003aa8:	41200000 	.word	0x41200000
 8003aac:	3dfbe76d 	.word	0x3dfbe76d
 8003ab0:	24001684 	.word	0x24001684
 8003ab4:	40e66666 	.word	0x40e66666
 8003ab8:	c0e66666 	.word	0xc0e66666
 8003abc:	24000000 	.word	0x24000000
 8003ac0:	24000ff4 	.word	0x24000ff4
 8003ac4:	2400000c 	.word	0x2400000c
 8003ac8:	24000ffc 	.word	0x24000ffc
 8003acc:	24000018 	.word	0x24000018
 8003ad0:	24001004 	.word	0x24001004
 8003ad4:	bf800000 	.word	0xbf800000
 8003ad8:	40490fd8 	.word	0x40490fd8
 8003adc:	40490fd8 	.word	0x40490fd8
 8003ae0:	43340000 	.word	0x43340000
 8003ae4:	42aa0000 	.word	0x42aa0000
 8003ae8:	c3200000 	.word	0xc3200000
 8003aec:	c2200000 	.word	0xc2200000
 8003af0:	3e343958 	.word	0x3e343958
 8003af4:	3eeb851f 	.word	0x3eeb851f
 8003af8:	407c209b 	.word	0x407c209b
 8003afc:	240011fc 	.word	0x240011fc
 8003b00:	240011f4 	.word	0x240011f4
 8003b04:	24001228 	.word	0x24001228
 8003b08:	24001220 	.word	0x24001220
 8003b0c:	2400123c 	.word	0x2400123c
 8003b10:	24001234 	.word	0x24001234
 8003b14:	24001250 	.word	0x24001250
 8003b18:	24001248 	.word	0x24001248
 8003b1c:	24001264 	.word	0x24001264
 8003b20:	2400125c 	.word	0x2400125c
 8003b24:	24001278 	.word	0x24001278
 8003b28:	24001270 	.word	0x24001270
 8003b2c:	2400128c 	.word	0x2400128c
 8003b30:	24001284 	.word	0x24001284
 8003b34:	240012a0 	.word	0x240012a0
 8003b38:	24001298 	.word	0x24001298
 8003b3c:	240012b4 	.word	0x240012b4
 8003b40:	240012ac 	.word	0x240012ac
 8003b44:	240012c8 	.word	0x240012c8
 8003b48:	240012c0 	.word	0x240012c0
 8003b4c:	240012dc 	.word	0x240012dc
 8003b50:	240012d4 	.word	0x240012d4
 8003b54:	240012f0 	.word	0x240012f0
 8003b58:	240012e8 	.word	0x240012e8
 8003b5c:	24001304 	.word	0x24001304
 8003b60:	240012fc 	.word	0x240012fc
 8003b64:	24001344 	.word	0x24001344
 8003b68:	2400133c 	.word	0x2400133c
 8003b6c:	24001370 	.word	0x24001370
 8003b70:	24001368 	.word	0x24001368
 8003b74:	2400139c 	.word	0x2400139c
 8003b78:	24001394 	.word	0x24001394
 8003b7c:	240013c8 	.word	0x240013c8
 8003b80:	240013c0 	.word	0x240013c0
 8003b84:	240013f4 	.word	0x240013f4
 8003b88:	240013ec 	.word	0x240013ec
 8003b8c:	24001420 	.word	0x24001420
 8003b90:	24001418 	.word	0x24001418
 8003b94:	24001434 	.word	0x24001434
 8003b98:	2400142c 	.word	0x2400142c
 8003b9c:	24001448 	.word	0x24001448
 8003ba0:	24001440 	.word	0x24001440
 8003ba4:	24001474 	.word	0x24001474
 8003ba8:	2400146c 	.word	0x2400146c
 8003bac:	240014dc 	.word	0x240014dc
 8003bb0:	240014d4 	.word	0x240014d4
 8003bb4:	240014f0 	.word	0x240014f0
 8003bb8:	4854      	ldr	r0, [pc, #336]	@ (8003d0c <main+0x578>)
 8003bba:	f00c feb5 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 8003bbe:	4b54      	ldr	r3, [pc, #336]	@ (8003d10 <main+0x57c>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	2103      	movs	r1, #3
 8003bc4:	4853      	ldr	r0, [pc, #332]	@ (8003d14 <main+0x580>)
 8003bc6:	f00c feaf 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 8003bca:	4b53      	ldr	r3, [pc, #332]	@ (8003d18 <main+0x584>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2103      	movs	r1, #3
 8003bd0:	4852      	ldr	r0, [pc, #328]	@ (8003d1c <main+0x588>)
 8003bd2:	f00c fea9 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 8003bd6:	4b52      	ldr	r3, [pc, #328]	@ (8003d20 <main+0x58c>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2103      	movs	r1, #3
 8003bdc:	4851      	ldr	r0, [pc, #324]	@ (8003d24 <main+0x590>)
 8003bde:	f00c fea3 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 8003be2:	4b51      	ldr	r3, [pc, #324]	@ (8003d28 <main+0x594>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	2103      	movs	r1, #3
 8003be8:	4850      	ldr	r0, [pc, #320]	@ (8003d2c <main+0x598>)
 8003bea:	f00c fe9d 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 8003bee:	4b50      	ldr	r3, [pc, #320]	@ (8003d30 <main+0x59c>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	484f      	ldr	r0, [pc, #316]	@ (8003d34 <main+0x5a0>)
 8003bf6:	f00c fe97 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 8003bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8003d38 <main+0x5a4>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2103      	movs	r1, #3
 8003c00:	484e      	ldr	r0, [pc, #312]	@ (8003d3c <main+0x5a8>)
 8003c02:	f00c fe91 	bl	8010928 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 8003c06:	4b4e      	ldr	r3, [pc, #312]	@ (8003d40 <main+0x5ac>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	484d      	ldr	r0, [pc, #308]	@ (8003d44 <main+0x5b0>)
 8003c0e:	f00c fe8b 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 8003c12:	4b4d      	ldr	r3, [pc, #308]	@ (8003d48 <main+0x5b4>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	2103      	movs	r1, #3
 8003c18:	484c      	ldr	r0, [pc, #304]	@ (8003d4c <main+0x5b8>)
 8003c1a:	f00c fe85 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 8003c1e:	4b4c      	ldr	r3, [pc, #304]	@ (8003d50 <main+0x5bc>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	2103      	movs	r1, #3
 8003c24:	484b      	ldr	r0, [pc, #300]	@ (8003d54 <main+0x5c0>)
 8003c26:	f00c fe7f 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 8003c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d58 <main+0x5c4>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	2103      	movs	r1, #3
 8003c30:	484a      	ldr	r0, [pc, #296]	@ (8003d5c <main+0x5c8>)
 8003c32:	f00c fe79 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 8003c36:	4b4a      	ldr	r3, [pc, #296]	@ (8003d60 <main+0x5cc>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2103      	movs	r1, #3
 8003c3c:	4849      	ldr	r0, [pc, #292]	@ (8003d64 <main+0x5d0>)
 8003c3e:	f00c fe73 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 8003c42:	4b49      	ldr	r3, [pc, #292]	@ (8003d68 <main+0x5d4>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	2103      	movs	r1, #3
 8003c48:	4848      	ldr	r0, [pc, #288]	@ (8003d6c <main+0x5d8>)
 8003c4a:	f00c fe6d 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 8003c4e:	4b48      	ldr	r3, [pc, #288]	@ (8003d70 <main+0x5dc>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	2103      	movs	r1, #3
 8003c54:	4847      	ldr	r0, [pc, #284]	@ (8003d74 <main+0x5e0>)
 8003c56:	f00c fe67 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 8003c5a:	4b47      	ldr	r3, [pc, #284]	@ (8003d78 <main+0x5e4>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	2103      	movs	r1, #3
 8003c60:	4846      	ldr	r0, [pc, #280]	@ (8003d7c <main+0x5e8>)
 8003c62:	f00c fe61 	bl	8010928 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 8003c66:	4b46      	ldr	r3, [pc, #280]	@ (8003d80 <main+0x5ec>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	2103      	movs	r1, #3
 8003c6c:	4845      	ldr	r0, [pc, #276]	@ (8003d84 <main+0x5f0>)
 8003c6e:	f00c fe5b 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 8003c72:	4b45      	ldr	r3, [pc, #276]	@ (8003d88 <main+0x5f4>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	2103      	movs	r1, #3
 8003c78:	4844      	ldr	r0, [pc, #272]	@ (8003d8c <main+0x5f8>)
 8003c7a:	f00c fe55 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 8003c7e:	4b44      	ldr	r3, [pc, #272]	@ (8003d90 <main+0x5fc>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	2103      	movs	r1, #3
 8003c84:	4843      	ldr	r0, [pc, #268]	@ (8003d94 <main+0x600>)
 8003c86:	f00c fe4f 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 8003c8a:	4b43      	ldr	r3, [pc, #268]	@ (8003d98 <main+0x604>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	2103      	movs	r1, #3
 8003c90:	4842      	ldr	r0, [pc, #264]	@ (8003d9c <main+0x608>)
 8003c92:	f00c fe49 	bl	8010928 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 8003c96:	4b42      	ldr	r3, [pc, #264]	@ (8003da0 <main+0x60c>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	2103      	movs	r1, #3
 8003c9c:	4841      	ldr	r0, [pc, #260]	@ (8003da4 <main+0x610>)
 8003c9e:	f00c fe43 	bl	8010928 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8003ca2:	f000 ffeb 	bl	8004c7c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ca6:	f001 fd45 	bl	8005734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003caa:	f000 f88d 	bl	8003dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cae:	f000 f9f9 	bl	80040a4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8003cb2:	f000 f903 	bl	8003ebc <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8003cb6:	f000 f9a9 	bl	800400c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // UART3 1바이트 인터럽트 수신 시작
  HAL_UART_Receive_IT(&huart3, &uart3_rx_byte, 1);
 8003cba:	2201      	movs	r2, #1
 8003cbc:	493a      	ldr	r1, [pc, #232]	@ (8003da8 <main+0x614>)
 8003cbe:	483b      	ldr	r0, [pc, #236]	@ (8003dac <main+0x618>)
 8003cc0:	f007 fa66 	bl	800b190 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003cc4:	f009 fe14 	bl	800d8f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8003cc8:	4a39      	ldr	r2, [pc, #228]	@ (8003db0 <main+0x61c>)
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4839      	ldr	r0, [pc, #228]	@ (8003db4 <main+0x620>)
 8003cce:	f009 fe59 	bl	800d984 <osThreadNew>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4a38      	ldr	r2, [pc, #224]	@ (8003db8 <main+0x624>)
 8003cd6:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 8003cd8:	4a38      	ldr	r2, [pc, #224]	@ (8003dbc <main+0x628>)
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4838      	ldr	r0, [pc, #224]	@ (8003dc0 <main+0x62c>)
 8003cde:	f009 fe51 	bl	800d984 <osThreadNew>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	4a37      	ldr	r2, [pc, #220]	@ (8003dc4 <main+0x630>)
 8003ce6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f001 fc21 	bl	8005530 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f001 fc1e 	bl	8005530 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003cf4:	2002      	movs	r0, #2
 8003cf6:	f001 fc1b 	bl	8005530 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f001 fc8d 	bl	800561c <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 8003d02:	f009 fe19 	bl	800d938 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d06:	bf00      	nop
 8003d08:	e7fd      	b.n	8003d06 <main+0x572>
 8003d0a:	bf00      	nop
 8003d0c:	240014e8 	.word	0x240014e8
 8003d10:	24001504 	.word	0x24001504
 8003d14:	240014fc 	.word	0x240014fc
 8003d18:	24001518 	.word	0x24001518
 8003d1c:	24001510 	.word	0x24001510
 8003d20:	2400152c 	.word	0x2400152c
 8003d24:	24001524 	.word	0x24001524
 8003d28:	24001540 	.word	0x24001540
 8003d2c:	24001538 	.word	0x24001538
 8003d30:	24001554 	.word	0x24001554
 8003d34:	2400154c 	.word	0x2400154c
 8003d38:	24001568 	.word	0x24001568
 8003d3c:	24001560 	.word	0x24001560
 8003d40:	24001588 	.word	0x24001588
 8003d44:	24001580 	.word	0x24001580
 8003d48:	2400159c 	.word	0x2400159c
 8003d4c:	24001594 	.word	0x24001594
 8003d50:	240015b0 	.word	0x240015b0
 8003d54:	240015a8 	.word	0x240015a8
 8003d58:	240015c4 	.word	0x240015c4
 8003d5c:	240015bc 	.word	0x240015bc
 8003d60:	240015d8 	.word	0x240015d8
 8003d64:	240015d0 	.word	0x240015d0
 8003d68:	240015ec 	.word	0x240015ec
 8003d6c:	240015e4 	.word	0x240015e4
 8003d70:	24001600 	.word	0x24001600
 8003d74:	240015f8 	.word	0x240015f8
 8003d78:	24001614 	.word	0x24001614
 8003d7c:	2400160c 	.word	0x2400160c
 8003d80:	24001628 	.word	0x24001628
 8003d84:	24001620 	.word	0x24001620
 8003d88:	2400163c 	.word	0x2400163c
 8003d8c:	24001634 	.word	0x24001634
 8003d90:	24001650 	.word	0x24001650
 8003d94:	24001648 	.word	0x24001648
 8003d98:	24001664 	.word	0x24001664
 8003d9c:	2400165c 	.word	0x2400165c
 8003da0:	24001678 	.word	0x24001678
 8003da4:	24001670 	.word	0x24001670
 8003da8:	24000bc8 	.word	0x24000bc8
 8003dac:	24000328 	.word	0x24000328
 8003db0:	08014e70 	.word	0x08014e70
 8003db4:	080041f1 	.word	0x080041f1
 8003db8:	240003bc 	.word	0x240003bc
 8003dbc:	08014e94 	.word	0x08014e94
 8003dc0:	08004985 	.word	0x08004985
 8003dc4:	240003c0 	.word	0x240003c0

08003dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b09c      	sub	sp, #112	@ 0x70
 8003dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dd2:	224c      	movs	r2, #76	@ 0x4c
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f00e f915 	bl	8012006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	2220      	movs	r2, #32
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f00e f90f 	bl	8012006 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003de8:	2002      	movs	r0, #2
 8003dea:	f003 ff9d 	bl	8007d28 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4b30      	ldr	r3, [pc, #192]	@ (8003eb4 <SystemClock_Config+0xec>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <SystemClock_Config+0xec>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <SystemClock_Config+0xec>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb8 <SystemClock_Config+0xf0>)
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb8 <SystemClock_Config+0xf0>)
 8003e0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e12:	6193      	str	r3, [r2, #24]
 8003e14:	4b28      	ldr	r3, [pc, #160]	@ (8003eb8 <SystemClock_Config+0xf0>)
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003e20:	bf00      	nop
 8003e22:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <SystemClock_Config+0xf0>)
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e2e:	d1f8      	bne.n	8003e22 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e30:	2301      	movs	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003e46:	2364      	movs	r3, #100	@ 0x64
 8003e48:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8003e4e:	2310      	movs	r3, #16
 8003e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003e52:	2302      	movs	r3, #2
 8003e54:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003e56:	230c      	movs	r3, #12
 8003e58:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 ff98 	bl	8007d9c <HAL_RCC_OscConfig>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003e72:	f000 ff41 	bl	8004cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e76:	233f      	movs	r3, #63	@ 0x3f
 8003e78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003e82:	2308      	movs	r3, #8
 8003e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003e86:	2340      	movs	r3, #64	@ 0x40
 8003e88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003e8a:	2340      	movs	r3, #64	@ 0x40
 8003e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003e8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e92:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003e94:	2340      	movs	r3, #64	@ 0x40
 8003e96:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f004 fbd7 	bl	8008650 <HAL_RCC_ClockConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8003ea8:	f000 ff26 	bl	8004cf8 <Error_Handler>
  }
}
 8003eac:	bf00      	nop
 8003eae:	3770      	adds	r7, #112	@ 0x70
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58000400 	.word	0x58000400
 8003eb8:	58024800 	.word	0x58024800

08003ebc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8004000 <MX_FDCAN1_Init+0x144>)
 8003ec6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003ec8:	4b4c      	ldr	r3, [pc, #304]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003ece:	4b4b      	ldr	r3, [pc, #300]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003ed4:	4b49      	ldr	r3, [pc, #292]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003eda:	4b48      	ldr	r3, [pc, #288]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003ee0:	4b46      	ldr	r3, [pc, #280]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003ee6:	4b45      	ldr	r3, [pc, #276]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8003eec:	4b43      	ldr	r3, [pc, #268]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003eee:	2208      	movs	r2, #8
 8003ef0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8003ef2:	4b42      	ldr	r3, [pc, #264]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003ef4:	221f      	movs	r2, #31
 8003ef6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8003ef8:	4b40      	ldr	r3, [pc, #256]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003efa:	2208      	movs	r2, #8
 8003efc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003efe:	4b3f      	ldr	r3, [pc, #252]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003f04:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f06:	2204      	movs	r2, #4
 8003f08:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f0c:	2205      	movs	r2, #5
 8003f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003f10:	4b3a      	ldr	r3, [pc, #232]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f12:	2204      	movs	r2, #4
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003f16:	4b39      	ldr	r3, [pc, #228]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8003f1c:	4b37      	ldr	r3, [pc, #220]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003f22:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003f28:	4b34      	ldr	r3, [pc, #208]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f2a:	2240      	movs	r2, #64	@ 0x40
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003f2e:	4b33      	ldr	r3, [pc, #204]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f30:	2204      	movs	r2, #4
 8003f32:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003f34:	4b31      	ldr	r3, [pc, #196]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003f3a:	4b30      	ldr	r3, [pc, #192]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8003f40:	4b2e      	ldr	r3, [pc, #184]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f42:	2204      	movs	r2, #4
 8003f44:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003f46:	4b2d      	ldr	r3, [pc, #180]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f48:	2204      	movs	r2, #4
 8003f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f4e:	2210      	movs	r2, #16
 8003f50:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 8003f52:	4b2a      	ldr	r3, [pc, #168]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f54:	2210      	movs	r2, #16
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8003f58:	4b28      	ldr	r3, [pc, #160]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003f5e:	4b27      	ldr	r3, [pc, #156]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003f64:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f66:	2204      	movs	r2, #4
 8003f68:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003f6a:	4824      	ldr	r0, [pc, #144]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f6c:	f002 fb8e 	bl	800668c <HAL_FDCAN_Init>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003f76:	f000 febf 	bl	8004cf8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	481f      	ldr	r0, [pc, #124]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f80:	f002 ff66 	bl	8006e50 <HAL_FDCAN_ActivateNotification>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d004      	beq.n	8003f94 <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <MX_FDCAN1_Init+0x148>)
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003f90:	f000 feb2 	bl	8004cf8 <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003f94:	4819      	ldr	r0, [pc, #100]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003f96:	f002 fd57 	bl	8006a48 <HAL_FDCAN_Start>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8003fa0:	4b18      	ldr	r3, [pc, #96]	@ (8004004 <MX_FDCAN1_Init+0x148>)
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003fa6:	f000 fea7 	bl	8004cf8 <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	e01d      	b.n	8003fec <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003fb0:	4812      	ldr	r0, [pc, #72]	@ (8003ffc <MX_FDCAN1_Init+0x140>)
 8003fb2:	f002 ff3b 	bl	8006e2c <HAL_FDCAN_GetTxFifoFreeLevel>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d014      	beq.n	8003fe6 <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8003fbc:	4a12      	ldr	r2, [pc, #72]	@ (8004008 <MX_FDCAN1_Init+0x14c>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2198      	movs	r1, #152	@ 0x98
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3308      	adds	r3, #8
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc fff4 	bl	8000fbc <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 8003fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8004008 <MX_FDCAN1_Init+0x14c>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2198      	movs	r1, #152	@ 0x98
 8003fda:	fb01 f303 	mul.w	r3, r1, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	ddde      	ble.n	8003fb0 <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	24000288 	.word	0x24000288
 8004000:	4000a000 	.word	0x4000a000
 8004004:	24001684 	.word	0x24001684
 8004008:	24001018 	.word	0x24001018

0800400c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004010:	4b22      	ldr	r3, [pc, #136]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004012:	4a23      	ldr	r2, [pc, #140]	@ (80040a0 <MX_USART3_UART_Init+0x94>)
 8004014:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 8004016:	4b21      	ldr	r3, [pc, #132]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004018:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800401c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800401e:	4b1f      	ldr	r3, [pc, #124]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004020:	2200      	movs	r2, #0
 8004022:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004026:	2200      	movs	r2, #0
 8004028:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800402a:	4b1c      	ldr	r3, [pc, #112]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800402c:	2200      	movs	r2, #0
 800402e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004032:	220c      	movs	r2, #12
 8004034:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004036:	4b19      	ldr	r3, [pc, #100]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004038:	2200      	movs	r2, #0
 800403a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800403c:	4b17      	ldr	r3, [pc, #92]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800403e:	2200      	movs	r2, #0
 8004040:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004042:	4b16      	ldr	r3, [pc, #88]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004044:	2200      	movs	r2, #0
 8004046:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004048:	4b14      	ldr	r3, [pc, #80]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800404a:	2200      	movs	r2, #0
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800404e:	4b13      	ldr	r3, [pc, #76]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004050:	2200      	movs	r2, #0
 8004052:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004054:	4811      	ldr	r0, [pc, #68]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004056:	f006 ffbd 	bl	800afd4 <HAL_UART_Init>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004060:	f000 fe4a 	bl	8004cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004064:	2100      	movs	r1, #0
 8004066:	480d      	ldr	r0, [pc, #52]	@ (800409c <MX_USART3_UART_Init+0x90>)
 8004068:	f009 fb33 	bl	800d6d2 <HAL_UARTEx_SetTxFifoThreshold>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004072:	f000 fe41 	bl	8004cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004076:	2100      	movs	r1, #0
 8004078:	4808      	ldr	r0, [pc, #32]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800407a:	f009 fb68 	bl	800d74e <HAL_UARTEx_SetRxFifoThreshold>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004084:	f000 fe38 	bl	8004cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004088:	4804      	ldr	r0, [pc, #16]	@ (800409c <MX_USART3_UART_Init+0x90>)
 800408a:	f009 fae9 	bl	800d660 <HAL_UARTEx_DisableFifoMode>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004094:	f000 fe30 	bl	8004cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}
 800409c:	24000328 	.word	0x24000328
 80040a0:	40004800 	.word	0x40004800

080040a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	@ 0x30
 80040a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040aa:	f107 031c 	add.w	r3, r7, #28
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
 80040b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ba:	4b49      	ldr	r3, [pc, #292]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040c0:	4a47      	ldr	r2, [pc, #284]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040c2:	f043 0304 	orr.w	r3, r3, #4
 80040c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040ca:	4b45      	ldr	r3, [pc, #276]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
 80040d6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040d8:	4b41      	ldr	r3, [pc, #260]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040de:	4a40      	ldr	r2, [pc, #256]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040e8:	4b3d      	ldr	r3, [pc, #244]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	4b3a      	ldr	r3, [pc, #232]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040fc:	4a38      	ldr	r2, [pc, #224]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 80040fe:	f043 0302 	orr.w	r3, r3, #2
 8004102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004106:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004114:	4b32      	ldr	r3, [pc, #200]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800411a:	4a31      	ldr	r2, [pc, #196]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 800411c:	f043 0308 	orr.w	r3, r3, #8
 8004120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004124:	4b2e      	ldr	r3, [pc, #184]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004132:	4b2b      	ldr	r3, [pc, #172]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004138:	4a29      	ldr	r2, [pc, #164]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004142:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004150:	4b23      	ldr	r3, [pc, #140]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004156:	4a22      	ldr	r2, [pc, #136]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004158:	f043 0310 	orr.w	r3, r3, #16
 800415c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004160:	4b1f      	ldr	r3, [pc, #124]	@ (80041e0 <MX_GPIO_Init+0x13c>)
 8004162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800416e:	2200      	movs	r2, #0
 8004170:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004174:	481b      	ldr	r0, [pc, #108]	@ (80041e4 <MX_GPIO_Init+0x140>)
 8004176:	f003 fda3 	bl	8007cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800417a:	2200      	movs	r2, #0
 800417c:	2102      	movs	r1, #2
 800417e:	481a      	ldr	r0, [pc, #104]	@ (80041e8 <MX_GPIO_Init+0x144>)
 8004180:	f003 fd9e 	bl	8007cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004184:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800418a:	2300      	movs	r3, #0
 800418c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004192:	f107 031c 	add.w	r3, r7, #28
 8004196:	4619      	mov	r1, r3
 8004198:	4814      	ldr	r0, [pc, #80]	@ (80041ec <MX_GPIO_Init+0x148>)
 800419a:	f003 fbe1 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 800419e:	f244 0301 	movw	r3, #16385	@ 0x4001
 80041a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041a4:	2301      	movs	r3, #1
 80041a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ac:	2300      	movs	r3, #0
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	4619      	mov	r1, r3
 80041b6:	480b      	ldr	r0, [pc, #44]	@ (80041e4 <MX_GPIO_Init+0x140>)
 80041b8:	f003 fbd2 	bl	8007960 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80041bc:	2302      	movs	r3, #2
 80041be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c0:	2301      	movs	r3, #1
 80041c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	2300      	movs	r3, #0
 80041ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80041cc:	f107 031c 	add.w	r3, r7, #28
 80041d0:	4619      	mov	r1, r3
 80041d2:	4805      	ldr	r0, [pc, #20]	@ (80041e8 <MX_GPIO_Init+0x144>)
 80041d4:	f003 fbc4 	bl	8007960 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80041d8:	bf00      	nop
 80041da:	3730      	adds	r7, #48	@ 0x30
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	58024400 	.word	0x58024400
 80041e4:	58020400 	.word	0x58020400
 80041e8:	58021000 	.word	0x58021000
 80041ec:	58020800 	.word	0x58020800

080041f0 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	ed2d 8b02 	vpush	{d8}
 80041f6:	b090      	sub	sp, #64	@ 0x40
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 80041fc:	f00a fdcc 	bl	800ed98 <xTaskGetTickCount>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8004204:	2301      	movs	r3, #1
 8004206:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004208:	f107 0314 	add.w	r3, r7, #20
 800420c:	69b9      	ldr	r1, [r7, #24]
 800420e:	4618      	mov	r0, r3
 8004210:	f00a fc26 	bl	800ea60 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 8004214:	4b83      	ldr	r3, [pc, #524]	@ (8004424 <ControlTask+0x234>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a83      	ldr	r2, [pc, #524]	@ (8004428 <ControlTask+0x238>)
 800421a:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	005a      	lsls	r2, r3, #1
 8004220:	4b80      	ldr	r3, [pc, #512]	@ (8004424 <ControlTask+0x234>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4413      	add	r3, r2
 8004226:	4a7f      	ldr	r2, [pc, #508]	@ (8004424 <ControlTask+0x234>)
 8004228:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 800422a:	2101      	movs	r1, #1
 800422c:	487f      	ldr	r0, [pc, #508]	@ (800442c <ControlTask+0x23c>)
 800422e:	f003 fd60 	bl	8007cf2 <HAL_GPIO_TogglePin>

		// 6) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 8004232:	4b7f      	ldr	r3, [pc, #508]	@ (8004430 <ControlTask+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	f040 80eb 	bne.w	8004412 <ControlTask+0x222>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 800423c:	4b7c      	ldr	r3, [pc, #496]	@ (8004430 <ControlTask+0x240>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d152      	bne.n	80042ea <ControlTask+0xfa>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004244:	2300      	movs	r3, #0
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
 8004248:	e048      	b.n	80042dc <ControlTask+0xec>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 800424a:	2180      	movs	r1, #128	@ 0x80
 800424c:	4877      	ldr	r0, [pc, #476]	@ (800442c <ControlTask+0x23c>)
 800424e:	f003 fd50 	bl	8007cf2 <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8004252:	4a77      	ldr	r2, [pc, #476]	@ (8004430 <ControlTask+0x240>)
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	2198      	movs	r1, #152	@ 0x98
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	338c      	adds	r3, #140	@ 0x8c
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004266:	4873      	ldr	r0, [pc, #460]	@ (8004434 <ControlTask+0x244>)
 8004268:	f002 fde0 	bl	8006e2c <HAL_FDCAN_GetTxFifoFreeLevel>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <ControlTask+0xb0>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004272:	4a6f      	ldr	r2, [pc, #444]	@ (8004430 <ControlTask+0x240>)
 8004274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004276:	2198      	movs	r1, #152	@ 0x98
 8004278:	fb01 f303 	mul.w	r3, r1, r3
 800427c:	4413      	add	r3, r2
 800427e:	3308      	adds	r3, #8
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b29a      	uxth	r2, r3
 8004284:	496a      	ldr	r1, [pc, #424]	@ (8004430 <ControlTask+0x240>)
 8004286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004288:	2098      	movs	r0, #152	@ 0x98
 800428a:	fb00 f303 	mul.w	r3, r0, r3
 800428e:	440b      	add	r3, r1
 8004290:	338c      	adds	r3, #140	@ 0x8c
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	eeb0 0a67 	vmov.f32	s0, s15
 800429a:	4610      	mov	r0, r2
 800429c:	f7fc ff0a 	bl	80010b4 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80042a0:	4864      	ldr	r0, [pc, #400]	@ (8004434 <ControlTask+0x244>)
 80042a2:	f002 fdc3 	bl	8006e2c <HAL_FDCAN_GetTxFifoFreeLevel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d014      	beq.n	80042d6 <ControlTask+0xe6>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 80042ac:	4a60      	ldr	r2, [pc, #384]	@ (8004430 <ControlTask+0x240>)
 80042ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b0:	2198      	movs	r1, #152	@ 0x98
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	3308      	adds	r3, #8
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc fe7c 	bl	8000fbc <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 80042c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004430 <ControlTask+0x240>)
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	2198      	movs	r1, #152	@ 0x98
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	330c      	adds	r3, #12
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80042d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d8:	3301      	adds	r3, #1
 80042da:	637b      	str	r3, [r7, #52]	@ 0x34
 80042dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042de:	2b02      	cmp	r3, #2
 80042e0:	ddb3      	ble.n	800424a <ControlTask+0x5a>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 80042e2:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <ControlTask+0x240>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e78e      	b.n	8004208 <ControlTask+0x18>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 80042ea:	2300      	movs	r3, #0
 80042ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ee:	e00e      	b.n	800430e <ControlTask+0x11e>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	2298      	movs	r2, #152	@ 0x98
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	3308      	adds	r3, #8
 80042fa:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <ControlTask+0x240>)
 80042fc:	4413      	add	r3, r2
 80042fe:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8004438 <ControlTask+0x248>
 8004302:	4618      	mov	r0, r3
 8004304:	f7fc fffa 	bl	80012fc <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	3301      	adds	r3, #1
 800430c:	633b      	str	r3, [r7, #48]	@ 0x30
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	2b02      	cmp	r3, #2
 8004312:	dded      	ble.n	80042f0 <ControlTask+0x100>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 8004314:	4846      	ldr	r0, [pc, #280]	@ (8004430 <ControlTask+0x240>)
 8004316:	f7fe fc5d 	bl	8002bd4 <robot_state_update>
				// 2. 로봇의 task space PID값 설정
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 800431a:	4b48      	ldr	r3, [pc, #288]	@ (800443c <ControlTask+0x24c>)
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	4b48      	ldr	r3, [pc, #288]	@ (8004440 <ControlTask+0x250>)
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4b48      	ldr	r3, [pc, #288]	@ (8004444 <ControlTask+0x254>)
 8004324:	4a48      	ldr	r2, [pc, #288]	@ (8004448 <ControlTask+0x258>)
 8004326:	4949      	ldr	r1, [pc, #292]	@ (800444c <ControlTask+0x25c>)
 8004328:	4841      	ldr	r0, [pc, #260]	@ (8004430 <ControlTask+0x240>)
 800432a:	f7fe fe4b 	bl	8002fc4 <robot_pos_pid_gain_setting>
				// 3. 로봇의 Control Input 계산
				target_posXYZ.pData[0] = homing_posXYZ.pData[0] + 0.2f * sinf(2.0f * pi * 5.0f * ((float32_t)ctrl_time_ms) / 1000.0f);
 800432e:	4b48      	ldr	r3, [pc, #288]	@ (8004450 <ControlTask+0x260>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	ed93 8a00 	vldr	s16, [r3]
 8004336:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8004454 <ControlTask+0x264>
 800433a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800433e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004346:	4b37      	ldr	r3, [pc, #220]	@ (8004424 <ControlTask+0x234>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004356:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8004458 <ControlTask+0x268>
 800435a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800435e:	eeb0 0a47 	vmov.f32	s0, s14
 8004362:	f010 fafd 	bl	8014960 <sinf>
 8004366:	eef0 7a40 	vmov.f32	s15, s0
 800436a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 800445c <ControlTask+0x26c>
 800436e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004372:	4b3b      	ldr	r3, [pc, #236]	@ (8004460 <ControlTask+0x270>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	ee78 7a27 	vadd.f32	s15, s16, s15
 800437a:	edc3 7a00 	vstr	s15, [r3]
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 800437e:	4b38      	ldr	r3, [pc, #224]	@ (8004460 <ControlTask+0x270>)
 8004380:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004384:	482a      	ldr	r0, [pc, #168]	@ (8004430 <ControlTask+0x240>)
 8004386:	f7fe fe73 	bl	8003070 <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 800438a:	2300      	movs	r3, #0
 800438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800438e:	e03c      	b.n	800440a <ControlTask+0x21a>
				{
					// 4. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 8004390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004392:	2298      	movs	r2, #152	@ 0x98
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	3308      	adds	r3, #8
 800439a:	4a25      	ldr	r2, [pc, #148]	@ (8004430 <ControlTask+0x240>)
 800439c:	1899      	adds	r1, r3, r2
 800439e:	4b24      	ldr	r3, [pc, #144]	@ (8004430 <ControlTask+0x240>)
 80043a0:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80043a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	ed93 7a00 	vldr	s14, [r3]
 80043ae:	4a20      	ldr	r2, [pc, #128]	@ (8004430 <ControlTask+0x240>)
 80043b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b2:	3374      	adds	r3, #116	@ 0x74
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	edd3 7a00 	vldr	s15, [r3]
 80043bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c0:	eeb0 0a67 	vmov.f32	s0, s15
 80043c4:	4608      	mov	r0, r1
 80043c6:	f7fd f83d 	bl	8001444 <motor_feedforward_torque>
					// 5. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80043ca:	481a      	ldr	r0, [pc, #104]	@ (8004434 <ControlTask+0x244>)
 80043cc:	f002 fd2e 	bl	8006e2c <HAL_FDCAN_GetTxFifoFreeLevel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <ControlTask+0x214>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 80043d6:	4a16      	ldr	r2, [pc, #88]	@ (8004430 <ControlTask+0x240>)
 80043d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043da:	2198      	movs	r1, #152	@ 0x98
 80043dc:	fb01 f303 	mul.w	r3, r1, r3
 80043e0:	4413      	add	r3, r2
 80043e2:	3308      	adds	r3, #8
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	4911      	ldr	r1, [pc, #68]	@ (8004430 <ControlTask+0x240>)
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	2098      	movs	r0, #152	@ 0x98
 80043ee:	fb00 f303 	mul.w	r3, r0, r3
 80043f2:	440b      	add	r3, r1
 80043f4:	338c      	adds	r3, #140	@ 0x8c
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	eeb0 0a67 	vmov.f32	s0, s15
 80043fe:	4610      	mov	r0, r2
 8004400:	f7fc fe58 	bl	80010b4 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	3301      	adds	r3, #1
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	2b02      	cmp	r3, #2
 800440e:	ddbf      	ble.n	8004390 <ControlTask+0x1a0>
 8004410:	e6fa      	b.n	8004208 <ControlTask+0x18>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <ControlTask+0x240>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b01      	cmp	r3, #1
 8004418:	f47f aef6 	bne.w	8004208 <ControlTask+0x18>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 800441c:	2300      	movs	r3, #0
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004420:	e1ed      	b.n	80047fe <ControlTask+0x60e>
 8004422:	bf00      	nop
 8004424:	24000fd0 	.word	0x24000fd0
 8004428:	24000fd4 	.word	0x24000fd4
 800442c:	58020400 	.word	0x58020400
 8004430:	24001018 	.word	0x24001018
 8004434:	24000288 	.word	0x24000288
 8004438:	428c0000 	.word	0x428c0000
 800443c:	24000048 	.word	0x24000048
 8004440:	2400100c 	.word	0x2400100c
 8004444:	24000030 	.word	0x24000030
 8004448:	2400003c 	.word	0x2400003c
 800444c:	24000024 	.word	0x24000024
 8004450:	24000ffc 	.word	0x24000ffc
 8004454:	40490fd8 	.word	0x40490fd8
 8004458:	447a0000 	.word	0x447a0000
 800445c:	3e4ccccd 	.word	0x3e4ccccd
 8004460:	24001004 	.word	0x24001004
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004464:	2180      	movs	r1, #128	@ 0x80
 8004466:	48bf      	ldr	r0, [pc, #764]	@ (8004764 <ControlTask+0x574>)
 8004468:	f003 fc43 	bl	8007cf2 <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 800446c:	4bbe      	ldr	r3, [pc, #760]	@ (8004768 <ControlTask+0x578>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8004472:	4bbe      	ldr	r3, [pc, #760]	@ (800476c <ControlTask+0x57c>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004478:	48bd      	ldr	r0, [pc, #756]	@ (8004770 <ControlTask+0x580>)
 800447a:	f002 fcd7 	bl	8006e2c <HAL_FDCAN_GetTxFifoFreeLevel>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <ControlTask+0x2ac>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8004484:	4abb      	ldr	r2, [pc, #748]	@ (8004774 <ControlTask+0x584>)
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	2198      	movs	r1, #152	@ 0x98
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3308      	adds	r3, #8
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc fcfc 	bl	8000e94 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 800449c:	bf00      	nop
 800449e:	4ab5      	ldr	r2, [pc, #724]	@ (8004774 <ControlTask+0x584>)
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	2198      	movs	r1, #152	@ 0x98
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	3310      	adds	r3, #16
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f107 010c 	add.w	r1, r7, #12
 80044b2:	2200      	movs	r2, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f009 fec5 	bl	800e244 <xQueueReceive>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d0ee      	beq.n	800449e <ControlTask+0x2ae>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 80044c0:	48ab      	ldr	r0, [pc, #684]	@ (8004770 <ControlTask+0x580>)
 80044c2:	f002 fcb3 	bl	8006e2c <HAL_FDCAN_GetTxFifoFreeLevel>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d014      	beq.n	80044f6 <ControlTask+0x306>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 80044cc:	4aa9      	ldr	r2, [pc, #676]	@ (8004774 <ControlTask+0x584>)
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	2198      	movs	r1, #152	@ 0x98
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	3308      	adds	r3, #8
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc fd22 	bl	8000f28 <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 80044e4:	4aa3      	ldr	r2, [pc, #652]	@ (8004774 <ControlTask+0x584>)
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	2198      	movs	r1, #152	@ 0x98
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	330c      	adds	r3, #12
 80044f2:	2201      	movs	r2, #1
 80044f4:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 80044f6:	4a9f      	ldr	r2, [pc, #636]	@ (8004774 <ControlTask+0x584>)
 80044f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fa:	2198      	movs	r1, #152	@ 0x98
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	338c      	adds	r3, #140	@ 0x8c
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 800450a:	4a9a      	ldr	r2, [pc, #616]	@ (8004774 <ControlTask+0x584>)
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450e:	2198      	movs	r1, #152	@ 0x98
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	3390      	adds	r3, #144	@ 0x90
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 800451e:	4a95      	ldr	r2, [pc, #596]	@ (8004774 <ControlTask+0x584>)
 8004520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004522:	3301      	adds	r3, #1
 8004524:	2198      	movs	r1, #152	@ 0x98
 8004526:	fb01 f303 	mul.w	r3, r1, r3
 800452a:	4413      	add	r3, r2
 800452c:	3304      	adds	r3, #4
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 8004534:	4a8f      	ldr	r2, [pc, #572]	@ (8004774 <ControlTask+0x584>)
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	2198      	movs	r1, #152	@ 0x98
 800453a:	fb01 f303 	mul.w	r3, r1, r3
 800453e:	4413      	add	r3, r2
 8004540:	332c      	adds	r3, #44	@ 0x2c
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 8004548:	4a8a      	ldr	r2, [pc, #552]	@ (8004774 <ControlTask+0x584>)
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	2198      	movs	r1, #152	@ 0x98
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	4413      	add	r3, r2
 8004554:	332c      	adds	r3, #44	@ 0x2c
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4986      	ldr	r1, [pc, #536]	@ (8004774 <ControlTask+0x584>)
 800455a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455c:	2098      	movs	r0, #152	@ 0x98
 800455e:	fb00 f303 	mul.w	r3, r0, r3
 8004562:	440b      	add	r3, r1
 8004564:	3330      	adds	r3, #48	@ 0x30
 8004566:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 8004568:	4a82      	ldr	r2, [pc, #520]	@ (8004774 <ControlTask+0x584>)
 800456a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456c:	2198      	movs	r1, #152	@ 0x98
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	3334      	adds	r3, #52	@ 0x34
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 800457c:	4a7d      	ldr	r2, [pc, #500]	@ (8004774 <ControlTask+0x584>)
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	2198      	movs	r1, #152	@ 0x98
 8004582:	fb01 f303 	mul.w	r3, r1, r3
 8004586:	4413      	add	r3, r2
 8004588:	3334      	adds	r3, #52	@ 0x34
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4979      	ldr	r1, [pc, #484]	@ (8004774 <ControlTask+0x584>)
 800458e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004590:	2098      	movs	r0, #152	@ 0x98
 8004592:	fb00 f303 	mul.w	r3, r0, r3
 8004596:	440b      	add	r3, r1
 8004598:	3338      	adds	r3, #56	@ 0x38
 800459a:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 800459c:	4a76      	ldr	r2, [pc, #472]	@ (8004778 <ControlTask+0x588>)
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4973      	ldr	r1, [pc, #460]	@ (8004774 <ControlTask+0x584>)
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	2098      	movs	r0, #152	@ 0x98
 80045ac:	fb00 f303 	mul.w	r3, r0, r3
 80045b0:	440b      	add	r3, r1
 80045b2:	3324      	adds	r3, #36	@ 0x24
 80045b4:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 80045b6:	4a71      	ldr	r2, [pc, #452]	@ (800477c <ControlTask+0x58c>)
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	496c      	ldr	r1, [pc, #432]	@ (8004774 <ControlTask+0x584>)
 80045c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045c4:	2098      	movs	r0, #152	@ 0x98
 80045c6:	fb00 f303 	mul.w	r3, r0, r3
 80045ca:	440b      	add	r3, r1
 80045cc:	3328      	adds	r3, #40	@ 0x28
 80045ce:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 80045d0:	4a68      	ldr	r2, [pc, #416]	@ (8004774 <ControlTask+0x584>)
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	2198      	movs	r1, #152	@ 0x98
 80045d6:	fb01 f303 	mul.w	r3, r1, r3
 80045da:	4413      	add	r3, r2
 80045dc:	3324      	adds	r3, #36	@ 0x24
 80045de:	ed93 7a00 	vldr	s14, [r3]
 80045e2:	4a64      	ldr	r2, [pc, #400]	@ (8004774 <ControlTask+0x584>)
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	2198      	movs	r1, #152	@ 0x98
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	332c      	adds	r3, #44	@ 0x2c
 80045f0:	edd3 7a00 	vldr	s15, [r3]
 80045f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004774 <ControlTask+0x584>)
 80045fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fc:	2198      	movs	r1, #152	@ 0x98
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3344      	adds	r3, #68	@ 0x44
 8004606:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 800460a:	4a5a      	ldr	r2, [pc, #360]	@ (8004774 <ControlTask+0x584>)
 800460c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460e:	2198      	movs	r1, #152	@ 0x98
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	3344      	adds	r3, #68	@ 0x44
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4956      	ldr	r1, [pc, #344]	@ (8004774 <ControlTask+0x584>)
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	2098      	movs	r0, #152	@ 0x98
 8004620:	fb00 f303 	mul.w	r3, r0, r3
 8004624:	440b      	add	r3, r1
 8004626:	3348      	adds	r3, #72	@ 0x48
 8004628:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 800462a:	4a52      	ldr	r2, [pc, #328]	@ (8004774 <ControlTask+0x584>)
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	2198      	movs	r1, #152	@ 0x98
 8004630:	fb01 f303 	mul.w	r3, r1, r3
 8004634:	4413      	add	r3, r2
 8004636:	334c      	adds	r3, #76	@ 0x4c
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 800463e:	4a4d      	ldr	r2, [pc, #308]	@ (8004774 <ControlTask+0x584>)
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	2198      	movs	r1, #152	@ 0x98
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	4413      	add	r3, r2
 800464a:	3350      	adds	r3, #80	@ 0x50
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term_old = strawberry_robot.motors[i].pos_I_term;
 8004652:	4a48      	ldr	r2, [pc, #288]	@ (8004774 <ControlTask+0x584>)
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	2198      	movs	r1, #152	@ 0x98
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	3350      	adds	r3, #80	@ 0x50
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4944      	ldr	r1, [pc, #272]	@ (8004774 <ControlTask+0x584>)
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	2098      	movs	r0, #152	@ 0x98
 8004668:	fb00 f303 	mul.w	r3, r0, r3
 800466c:	440b      	add	r3, r1
 800466e:	3354      	adds	r3, #84	@ 0x54
 8004670:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8004672:	4a40      	ldr	r2, [pc, #256]	@ (8004774 <ControlTask+0x584>)
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	2198      	movs	r1, #152	@ 0x98
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3358      	adds	r3, #88	@ 0x58
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term_old = strawberry_robot.motors[i].pos_D_term;
 8004686:	4a3b      	ldr	r2, [pc, #236]	@ (8004774 <ControlTask+0x584>)
 8004688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468a:	2198      	movs	r1, #152	@ 0x98
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3358      	adds	r3, #88	@ 0x58
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4937      	ldr	r1, [pc, #220]	@ (8004774 <ControlTask+0x584>)
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	2098      	movs	r0, #152	@ 0x98
 800469c:	fb00 f303 	mul.w	r3, r0, r3
 80046a0:	440b      	add	r3, r1
 80046a2:	335c      	adds	r3, #92	@ 0x5c
 80046a4:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 80046a6:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <ControlTask+0x584>)
 80046a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046aa:	2198      	movs	r1, #152	@ 0x98
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	4413      	add	r3, r2
 80046b2:	3328      	adds	r3, #40	@ 0x28
 80046b4:	ed93 7a00 	vldr	s14, [r3]
 80046b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004774 <ControlTask+0x584>)
 80046ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046bc:	2198      	movs	r1, #152	@ 0x98
 80046be:	fb01 f303 	mul.w	r3, r1, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	3334      	adds	r3, #52	@ 0x34
 80046c6:	edd3 7a00 	vldr	s15, [r3]
 80046ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ce:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <ControlTask+0x584>)
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	2198      	movs	r1, #152	@ 0x98
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	3360      	adds	r3, #96	@ 0x60
 80046dc:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 80046e0:	4a24      	ldr	r2, [pc, #144]	@ (8004774 <ControlTask+0x584>)
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	2198      	movs	r1, #152	@ 0x98
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	3360      	adds	r3, #96	@ 0x60
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	4920      	ldr	r1, [pc, #128]	@ (8004774 <ControlTask+0x584>)
 80046f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f4:	2098      	movs	r0, #152	@ 0x98
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	440b      	add	r3, r1
 80046fc:	3364      	adds	r3, #100	@ 0x64
 80046fe:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 8004700:	4a1c      	ldr	r2, [pc, #112]	@ (8004774 <ControlTask+0x584>)
 8004702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004704:	2198      	movs	r1, #152	@ 0x98
 8004706:	fb01 f303 	mul.w	r3, r1, r3
 800470a:	4413      	add	r3, r2
 800470c:	3368      	adds	r3, #104	@ 0x68
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 8004714:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <ControlTask+0x584>)
 8004716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004718:	2198      	movs	r1, #152	@ 0x98
 800471a:	fb01 f303 	mul.w	r3, r1, r3
 800471e:	4413      	add	r3, r2
 8004720:	336c      	adds	r3, #108	@ 0x6c
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 8004728:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <ControlTask+0x584>)
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	2198      	movs	r1, #152	@ 0x98
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	4413      	add	r3, r2
 8004734:	336c      	adds	r3, #108	@ 0x6c
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	490e      	ldr	r1, [pc, #56]	@ (8004774 <ControlTask+0x584>)
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	2098      	movs	r0, #152	@ 0x98
 800473e:	fb00 f303 	mul.w	r3, r0, r3
 8004742:	440b      	add	r3, r1
 8004744:	3370      	adds	r3, #112	@ 0x70
 8004746:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 8004748:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <ControlTask+0x584>)
 800474a:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <ControlTask+0x584>)
 800475c:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8004760:	e00e      	b.n	8004780 <ControlTask+0x590>
 8004762:	bf00      	nop
 8004764:	58020400 	.word	0x58020400
 8004768:	24000fd0 	.word	0x24000fd0
 800476c:	24000fd4 	.word	0x24000fd4
 8004770:	24000288 	.word	0x24000288
 8004774:	24001018 	.word	0x24001018
 8004778:	24000fdc 	.word	0x24000fdc
 800477c:	24000fe8 	.word	0x24000fe8
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 800478c:	4b7b      	ldr	r3, [pc, #492]	@ (800497c <ControlTask+0x78c>)
 800478e:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 800479e:	4b77      	ldr	r3, [pc, #476]	@ (800497c <ControlTask+0x78c>)
 80047a0:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 80047b0:	4b72      	ldr	r3, [pc, #456]	@ (800497c <ControlTask+0x78c>)
 80047b2:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 80047c2:	4b6e      	ldr	r3, [pc, #440]	@ (800497c <ControlTask+0x78c>)
 80047c4:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 80047d4:	4b69      	ldr	r3, [pc, #420]	@ (800497c <ControlTask+0x78c>)
 80047d6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 80047e6:	4b65      	ldr	r3, [pc, #404]	@ (800497c <ControlTask+0x78c>)
 80047e8:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 80047ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80047f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fa:	3301      	adds	r3, #1
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004800:	2b02      	cmp	r3, #2
 8004802:	f77f ae2f 	ble.w	8004464 <ControlTask+0x274>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24
 800480a:	e060      	b.n	80048ce <ControlTask+0x6de>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = target_posXYZ.pData[i];
 800480c:	4b5c      	ldr	r3, [pc, #368]	@ (8004980 <ControlTask+0x790>)
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	4b59      	ldr	r3, [pc, #356]	@ (800497c <ControlTask+0x78c>)
 8004818:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 800481c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 8004826:	4b55      	ldr	r3, [pc, #340]	@ (800497c <ControlTask+0x78c>)
 8004828:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 800482c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 8004838:	4b50      	ldr	r3, [pc, #320]	@ (800497c <ControlTask+0x78c>)
 800483a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 800484a:	4b4c      	ldr	r3, [pc, #304]	@ (800497c <ControlTask+0x78c>)
 800484c:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 800485c:	4b47      	ldr	r3, [pc, #284]	@ (800497c <ControlTask+0x78c>)
 800485e:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 800486e:	4b43      	ldr	r3, [pc, #268]	@ (800497c <ControlTask+0x78c>)
 8004870:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8004874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 8004880:	4b3e      	ldr	r3, [pc, #248]	@ (800497c <ControlTask+0x78c>)
 8004882:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 8004892:	4b3a      	ldr	r3, [pc, #232]	@ (800497c <ControlTask+0x78c>)
 8004894:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 80048a4:	4b35      	ldr	r3, [pc, #212]	@ (800497c <ControlTask+0x78c>)
 80048a6:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 80048b6:	4b31      	ldr	r3, [pc, #196]	@ (800497c <ControlTask+0x78c>)
 80048b8:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	3301      	adds	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	dd9b      	ble.n	800480c <ControlTask+0x61c>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]
 80048d8:	e00b      	b.n	80048f2 <ControlTask+0x702>
 80048da:	4b28      	ldr	r3, [pc, #160]	@ (800497c <ControlTask+0x78c>)
 80048dc:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	3301      	adds	r3, #1
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	ddf0      	ble.n	80048da <ControlTask+0x6ea>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 80048f8:	4b20      	ldr	r3, [pc, #128]	@ (800497c <ControlTask+0x78c>)
 80048fa:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80048fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004902:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 8004904:	4b1d      	ldr	r3, [pc, #116]	@ (800497c <ControlTask+0x78c>)
 8004906:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 800490a:	3310      	adds	r3, #16
 800490c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004910:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 8004912:	4b1a      	ldr	r3, [pc, #104]	@ (800497c <ControlTask+0x78c>)
 8004914:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 8004918:	3320      	adds	r3, #32
 800491a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800491e:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e00b      	b.n	800493e <ControlTask+0x74e>
 8004926:	4b15      	ldr	r3, [pc, #84]	@ (800497c <ControlTask+0x78c>)
 8004928:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	f04f 0200 	mov.w	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3301      	adds	r3, #1
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b08      	cmp	r3, #8
 8004942:	ddf0      	ble.n	8004926 <ControlTask+0x736>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 8004944:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <ControlTask+0x78c>)
 8004946:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800494a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800494e:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 8004950:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <ControlTask+0x78c>)
 8004952:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004956:	3310      	adds	r3, #16
 8004958:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800495c:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 800495e:	4b07      	ldr	r3, [pc, #28]	@ (800497c <ControlTask+0x78c>)
 8004960:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004964:	3320      	adds	r3, #32
 8004966:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800496a:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 800496c:	4803      	ldr	r0, [pc, #12]	@ (800497c <ControlTask+0x78c>)
 800496e:	f7fe f931 	bl	8002bd4 <robot_state_update>
				// 15. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 8004972:	4b02      	ldr	r3, [pc, #8]	@ (800497c <ControlTask+0x78c>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004978:	e446      	b.n	8004208 <ControlTask+0x18>
 800497a:	bf00      	nop
 800497c:	24001018 	.word	0x24001018
 8004980:	24001004 	.word	0x24001004

08004984 <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8004984:	b590      	push	{r4, r7, lr}
 8004986:	ed2d 8b10 	vpush	{d8-d15}
 800498a:	b0a9      	sub	sp, #164	@ 0xa4
 800498c:	af24      	add	r7, sp, #144	@ 0x90
 800498e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 8004990:	f00a fa02 	bl	800ed98 <xTaskGetTickCount>
 8004994:	4603      	mov	r3, r0
 8004996:	60bb      	str	r3, [r7, #8]

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8004998:	2301      	movs	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 800499c:	f107 0308 	add.w	r3, r7, #8
 80049a0:	68f9      	ldr	r1, [r7, #12]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f00a f85c 	bl	800ea60 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	005a      	lsls	r2, r3, #1
 80049ac:	4bae      	ldr	r3, [pc, #696]	@ (8004c68 <DataLoggingTask+0x2e4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	4aad      	ldr	r2, [pc, #692]	@ (8004c68 <DataLoggingTask+0x2e4>)
 80049b4:	6013      	str	r3, [r2, #0]

			// 5) 여기서 PC로부터 들어온 명령을 처리
			uart3_poll_and_process_lines();
 80049b6:	f7fe fe9b 	bl	80036f0 <uart3_poll_and_process_lines>

			// 6) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 80049ba:	4bac      	ldr	r3, [pc, #688]	@ (8004c6c <DataLoggingTask+0x2e8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	f040 80a9 	bne.w	8004b16 <DataLoggingTask+0x192>
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 80049c4:	4baa      	ldr	r3, [pc, #680]	@ (8004c70 <DataLoggingTask+0x2ec>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049d0:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8004c74 <DataLoggingTask+0x2f0>
 80049d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80049d8:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 80049dc:	4ba3      	ldr	r3, [pc, #652]	@ (8004c6c <DataLoggingTask+0x2e8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4aa2      	ldr	r2, [pc, #648]	@ (8004c6c <DataLoggingTask+0x2e8>)
 80049e2:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 80049e4:	49a1      	ldr	r1, [pc, #644]	@ (8004c6c <DataLoggingTask+0x2e8>)
 80049e6:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80049ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80049ee:	499f      	ldr	r1, [pc, #636]	@ (8004c6c <DataLoggingTask+0x2e8>)
 80049f0:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 80049f4:	489d      	ldr	r0, [pc, #628]	@ (8004c6c <DataLoggingTask+0x2e8>)
 80049f6:	edd0 6a49 	vldr	s13, [r0, #292]	@ 0x124
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 80049fa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80049fe:	489b      	ldr	r0, [pc, #620]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a00:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 8004a04:	4c99      	ldr	r4, [pc, #612]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a06:	edd4 5a6f 	vldr	s11, [r4, #444]	@ 0x1bc
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a0a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004a0e:	4c97      	ldr	r4, [pc, #604]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a10:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004a14:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a18:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004a1c:	4c93      	ldr	r4, [pc, #588]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a1e:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004a22:	3404      	adds	r4, #4
 8004a24:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a28:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004a2c:	4c8f      	ldr	r4, [pc, #572]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a2e:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004a32:	3408      	adds	r4, #8
 8004a34:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a38:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004a3c:	4c8b      	ldr	r4, [pc, #556]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a3e:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004a42:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a46:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004a4a:	4c88      	ldr	r4, [pc, #544]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a4c:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004a50:	3404      	adds	r4, #4
 8004a52:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a56:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004a5a:	4c84      	ldr	r4, [pc, #528]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a5c:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004a60:	3408      	adds	r4, #8
 8004a62:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a66:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004a6a:	4c80      	ldr	r4, [pc, #512]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a6c:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8004a70:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a74:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004a78:	4c7c      	ldr	r4, [pc, #496]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a7a:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8004a7e:	3404      	adds	r4, #4
 8004a80:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a84:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004a88:	4c78      	ldr	r4, [pc, #480]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a8a:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8004a8e:	3408      	adds	r4, #8
 8004a90:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004a94:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8004a98:	4c74      	ldr	r4, [pc, #464]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004a9a:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8004a9e:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004aa2:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8004aa6:	4c71      	ldr	r4, [pc, #452]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004aa8:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8004aac:	3404      	adds	r4, #4
 8004aae:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004ab2:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8004ab6:	4c6d      	ldr	r4, [pc, #436]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004ab8:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8004abc:	3408      	adds	r4, #8
 8004abe:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004ac2:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8004ac6:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8004aca:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8004ace:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 8004ad2:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 8004ad6:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 8004ada:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 8004ade:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8004ae2:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 8004ae6:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 8004aea:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 8004aee:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 8004af2:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 8004af6:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8004afa:	9008      	str	r0, [sp, #32]
 8004afc:	ed8d 6b06 	vstr	d6, [sp, #24]
 8004b00:	9104      	str	r1, [sp, #16]
 8004b02:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b06:	9201      	str	r2, [sp, #4]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	ec53 2b1f 	vmov	r2, r3, d15
 8004b0e:	485a      	ldr	r0, [pc, #360]	@ (8004c78 <DataLoggingTask+0x2f4>)
 8004b10:	f00d fa0a 	bl	8011f28 <iprintf>
 8004b14:	e742      	b.n	800499c <DataLoggingTask+0x18>
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
						(float32_t) ctrl_time_ms/1000, strawberry_robot.current_robot_mode,
 8004b16:	4b56      	ldr	r3, [pc, #344]	@ (8004c70 <DataLoggingTask+0x2ec>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b22:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8004c74 <DataLoggingTask+0x2f0>
 8004b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004b2a:	eeb7 fae7 	vcvt.f64.f32	d15, s15
 8004b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a4e      	ldr	r2, [pc, #312]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b34:	68d2      	ldr	r2, [r2, #12]
						strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input,
 8004b36:	494d      	ldr	r1, [pc, #308]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b38:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004b3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004b40:	494a      	ldr	r1, [pc, #296]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b42:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
						strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input,
 8004b46:	4849      	ldr	r0, [pc, #292]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b48:	edd0 6a49 	vldr	s13, [r0, #292]	@ 0x124
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004b4c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8004b50:	4846      	ldr	r0, [pc, #280]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b52:	f8d0 013c 	ldr.w	r0, [r0, #316]	@ 0x13c
						strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input,
 8004b56:	4c45      	ldr	r4, [pc, #276]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b58:	edd4 5a6f 	vldr	s11, [r4, #444]	@ 0x1bc
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004b5c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004b60:	4c42      	ldr	r4, [pc, #264]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b62:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004b66:	edd4 4a00 	vldr	s9, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004b6a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004b6e:	4c3f      	ldr	r4, [pc, #252]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b70:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004b74:	3404      	adds	r4, #4
 8004b76:	edd4 3a00 	vldr	s7, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004b7a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
						strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2],
 8004b7e:	4c3b      	ldr	r4, [pc, #236]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b80:	f8d4 420c 	ldr.w	r4, [r4, #524]	@ 0x20c
 8004b84:	3408      	adds	r4, #8
 8004b86:	edd4 2a00 	vldr	s5, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004b8a:	eeb7 2ae2 	vcvt.f64.f32	d2, s5
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004b8e:	4c37      	ldr	r4, [pc, #220]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b90:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004b94:	edd4 1a00 	vldr	s3, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004b98:	eeb7 1ae1 	vcvt.f64.f32	d1, s3
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004b9c:	4c33      	ldr	r4, [pc, #204]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004b9e:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004ba2:	3404      	adds	r4, #4
 8004ba4:	edd4 0a00 	vldr	s1, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004ba8:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
						strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2],
 8004bac:	4c2f      	ldr	r4, [pc, #188]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004bae:	f8d4 4284 	ldr.w	r4, [r4, #644]	@ 0x284
 8004bb2:	3408      	adds	r4, #8
 8004bb4:	ed94 8a00 	vldr	s16, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004bb8:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004bbc:	4c2b      	ldr	r4, [pc, #172]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004bbe:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8004bc2:	ed94 9a00 	vldr	s18, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004bc6:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004bca:	4c28      	ldr	r4, [pc, #160]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004bcc:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8004bd0:	3404      	adds	r4, #4
 8004bd2:	ed94 aa00 	vldr	s20, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004bd6:	eeb7 aaca 	vcvt.f64.f32	d10, s20
						strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2],
 8004bda:	4c24      	ldr	r4, [pc, #144]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004bdc:	f8d4 42ac 	ldr.w	r4, [r4, #684]	@ 0x2ac
 8004be0:	3408      	adds	r4, #8
 8004be2:	ed94 ba00 	vldr	s22, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004be6:	eeb7 bacb 	vcvt.f64.f32	d11, s22
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8004bea:	4c20      	ldr	r4, [pc, #128]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004bec:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8004bf0:	ed94 ca00 	vldr	s24, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004bf4:	eeb7 cacc 	vcvt.f64.f32	d12, s24
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8004bf8:	4c1c      	ldr	r4, [pc, #112]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004bfa:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8004bfe:	3404      	adds	r4, #4
 8004c00:	ed94 da00 	vldr	s26, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004c04:	eeb7 dacd 	vcvt.f64.f32	d13, s26
						strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 8004c08:	4c18      	ldr	r4, [pc, #96]	@ (8004c6c <DataLoggingTask+0x2e8>)
 8004c0a:	f8d4 44fc 	ldr.w	r4, [r4, #1276]	@ 0x4fc
 8004c0e:	3408      	adds	r4, #8
 8004c10:	ed94 ea00 	vldr	s28, [r4]
				printf("[%.3f, %d, %d, %.3f, %d, %.3f, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f]\r\n",
 8004c14:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8004c18:	ed8d eb22 	vstr	d14, [sp, #136]	@ 0x88
 8004c1c:	ed8d db20 	vstr	d13, [sp, #128]	@ 0x80
 8004c20:	ed8d cb1e 	vstr	d12, [sp, #120]	@ 0x78
 8004c24:	ed8d bb1c 	vstr	d11, [sp, #112]	@ 0x70
 8004c28:	ed8d ab1a 	vstr	d10, [sp, #104]	@ 0x68
 8004c2c:	ed8d 9b18 	vstr	d9, [sp, #96]	@ 0x60
 8004c30:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8004c34:	ed8d 0b14 	vstr	d0, [sp, #80]	@ 0x50
 8004c38:	ed8d 1b12 	vstr	d1, [sp, #72]	@ 0x48
 8004c3c:	ed8d 2b10 	vstr	d2, [sp, #64]	@ 0x40
 8004c40:	ed8d 3b0e 	vstr	d3, [sp, #56]	@ 0x38
 8004c44:	ed8d 4b0c 	vstr	d4, [sp, #48]	@ 0x30
 8004c48:	ed8d 5b0a 	vstr	d5, [sp, #40]	@ 0x28
 8004c4c:	9008      	str	r0, [sp, #32]
 8004c4e:	ed8d 6b06 	vstr	d6, [sp, #24]
 8004c52:	9104      	str	r1, [sp, #16]
 8004c54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c58:	9201      	str	r2, [sp, #4]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	ec53 2b1f 	vmov	r2, r3, d15
 8004c60:	4805      	ldr	r0, [pc, #20]	@ (8004c78 <DataLoggingTask+0x2f4>)
 8004c62:	f00d f961 	bl	8011f28 <iprintf>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8004c66:	e699      	b.n	800499c <DataLoggingTask+0x18>
 8004c68:	24000fd8 	.word	0x24000fd8
 8004c6c:	24001018 	.word	0x24001018
 8004c70:	24000fd0 	.word	0x24000fd0
 8004c74:	447a0000 	.word	0x447a0000
 8004c78:	08014c98 	.word	0x08014c98

08004c7c <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004c82:	463b      	mov	r3, r7
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8004c8e:	f000 febd 	bl	8005a0c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004c92:	2301      	movs	r3, #1
 8004c94:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004c9e:	231f      	movs	r3, #31
 8004ca0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004ca2:	2387      	movs	r3, #135	@ 0x87
 8004ca4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8004caa:	2300      	movs	r3, #0
 8004cac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 fedb 	bl	8005a7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004cc6:	2004      	movs	r0, #4
 8004cc8:	f000 feb8 	bl	8005a3c <HAL_MPU_Enable>

}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	@ (8004cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004ce6:	f000 fd61 	bl	80057ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40001400 	.word	0x40001400

08004cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 8004cfe:	4b52      	ldr	r3, [pc, #328]	@ (8004e48 <Error_Handler+0x150>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d148      	bne.n	8004d98 <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	e03f      	b.n	8004d8c <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8004d0c:	2180      	movs	r1, #128	@ 0x80
 8004d0e:	484f      	ldr	r0, [pc, #316]	@ (8004e4c <Error_Handler+0x154>)
 8004d10:	f002 ffef 	bl	8007cf2 <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 8004d14:	4a4c      	ldr	r2, [pc, #304]	@ (8004e48 <Error_Handler+0x150>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2198      	movs	r1, #152	@ 0x98
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	338c      	adds	r3, #140	@ 0x8c
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004d28:	4849      	ldr	r0, [pc, #292]	@ (8004e50 <Error_Handler+0x158>)
 8004d2a:	f002 f87f 	bl	8006e2c <HAL_FDCAN_GetTxFifoFreeLevel>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d016      	beq.n	8004d62 <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004d34:	4a44      	ldr	r2, [pc, #272]	@ (8004e48 <Error_Handler+0x150>)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2198      	movs	r1, #152	@ 0x98
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	3308      	adds	r3, #8
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	4940      	ldr	r1, [pc, #256]	@ (8004e48 <Error_Handler+0x150>)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2098      	movs	r0, #152	@ 0x98
 8004d4c:	fb00 f303 	mul.w	r3, r0, r3
 8004d50:	440b      	add	r3, r1
 8004d52:	338c      	adds	r3, #140	@ 0x8c
 8004d54:	edd3 7a00 	vldr	s15, [r3]
 8004d58:	eeb0 0a67 	vmov.f32	s0, s15
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fc f9a9 	bl	80010b4 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004d62:	483b      	ldr	r0, [pc, #236]	@ (8004e50 <Error_Handler+0x158>)
 8004d64:	f002 f862 	bl	8006e2c <HAL_FDCAN_GetTxFifoFreeLevel>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8004d6e:	4a36      	ldr	r2, [pc, #216]	@ (8004e48 <Error_Handler+0x150>)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2198      	movs	r1, #152	@ 0x98
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fc f91b 	bl	8000fbc <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	ddbc      	ble.n	8004d0c <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 8004d92:	4b2d      	ldr	r3, [pc, #180]	@ (8004e48 <Error_Handler+0x150>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 8004d98:	4b2e      	ldr	r3, [pc, #184]	@ (8004e54 <Error_Handler+0x15c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d82f      	bhi.n	8004e02 <Error_Handler+0x10a>
 8004da2:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <Error_Handler+0xb0>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004dbd 	.word	0x08004dbd
 8004dac:	08004dcb 	.word	0x08004dcb
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004de7 	.word	0x08004de7
 8004db8:	08004df5 	.word	0x08004df5
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 8004dbc:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <Error_Handler+0x15c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4825      	ldr	r0, [pc, #148]	@ (8004e58 <Error_Handler+0x160>)
 8004dc4:	f00d f8b0 	bl	8011f28 <iprintf>
 8004dc8:	e01e      	b.n	8004e08 <Error_Handler+0x110>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 8004dca:	4b22      	ldr	r3, [pc, #136]	@ (8004e54 <Error_Handler+0x15c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4822      	ldr	r0, [pc, #136]	@ (8004e5c <Error_Handler+0x164>)
 8004dd2:	f00d f8a9 	bl	8011f28 <iprintf>
 8004dd6:	e017      	b.n	8004e08 <Error_Handler+0x110>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e54 <Error_Handler+0x15c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4820      	ldr	r0, [pc, #128]	@ (8004e60 <Error_Handler+0x168>)
 8004de0:	f00d f8a2 	bl	8011f28 <iprintf>
 8004de4:	e010      	b.n	8004e08 <Error_Handler+0x110>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 8004de6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <Error_Handler+0x15c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4619      	mov	r1, r3
 8004dec:	481d      	ldr	r0, [pc, #116]	@ (8004e64 <Error_Handler+0x16c>)
 8004dee:	f00d f89b 	bl	8011f28 <iprintf>
 8004df2:	e009      	b.n	8004e08 <Error_Handler+0x110>
	  case 5: printf("Error Code: %d, This is Range of Motion Error.\r\n", sta); break;
 8004df4:	4b17      	ldr	r3, [pc, #92]	@ (8004e54 <Error_Handler+0x15c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	481b      	ldr	r0, [pc, #108]	@ (8004e68 <Error_Handler+0x170>)
 8004dfc:	f00d f894 	bl	8011f28 <iprintf>
 8004e00:	e002      	b.n	8004e08 <Error_Handler+0x110>
	  default: printf("Error Code: Unknown");
 8004e02:	481a      	ldr	r0, [pc, #104]	@ (8004e6c <Error_Handler+0x174>)
 8004e04:	f00d f890 	bl	8011f28 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 8004e08:	2300      	movs	r3, #0
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	e012      	b.n	8004e34 <Error_Handler+0x13c>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 8004e0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e12:	480e      	ldr	r0, [pc, #56]	@ (8004e4c <Error_Handler+0x154>)
 8004e14:	f002 ff6d 	bl	8007cf2 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 8004e18:	20c8      	movs	r0, #200	@ 0xc8
 8004e1a:	f000 fce7 	bl	80057ec <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 8004e1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004e22:	480a      	ldr	r0, [pc, #40]	@ (8004e4c <Error_Handler+0x154>)
 8004e24:	f002 ff65 	bl	8007cf2 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 8004e28:	20c8      	movs	r0, #200	@ 0xc8
 8004e2a:	f000 fcdf 	bl	80057ec <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <Error_Handler+0x15c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	dbe7      	blt.n	8004e0e <Error_Handler+0x116>
	  }
	  HAL_Delay(1000);
 8004e3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e42:	f000 fcd3 	bl	80057ec <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004e46:	e7df      	b.n	8004e08 <Error_Handler+0x110>
 8004e48:	24001018 	.word	0x24001018
 8004e4c:	58020400 	.word	0x58020400
 8004e50:	24000288 	.word	0x24000288
 8004e54:	24001684 	.word	0x24001684
 8004e58:	08014d0c 	.word	0x08014d0c
 8004e5c:	08014d34 	.word	0x08014d34
 8004e60:	08014d5c 	.word	0x08014d5c
 8004e64:	08014d90 	.word	0x08014d90
 8004e68:	08014dc4 	.word	0x08014dc4
 8004e6c:	08014df8 	.word	0x08014df8

08004e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea8 <HAL_MspInit+0x38>)
 8004e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea8 <HAL_MspInit+0x38>)
 8004e7e:	f043 0302 	orr.w	r3, r3, #2
 8004e82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <HAL_MspInit+0x38>)
 8004e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	607b      	str	r3, [r7, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e94:	2200      	movs	r2, #0
 8004e96:	210f      	movs	r1, #15
 8004e98:	f06f 0001 	mvn.w	r0, #1
 8004e9c:	f000 fd8e 	bl	80059bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	58024400 	.word	0x58024400

08004eac <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b0ba      	sub	sp, #232	@ 0xe8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ec4:	f107 0310 	add.w	r3, r7, #16
 8004ec8:	22c0      	movs	r2, #192	@ 0xc0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f00d f89a 	bl	8012006 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a37      	ldr	r2, [pc, #220]	@ (8004fb4 <HAL_FDCAN_MspInit+0x108>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d166      	bne.n	8004faa <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004edc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004ee0:	f04f 0300 	mov.w	r3, #0
 8004ee4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8004eec:	2364      	movs	r3, #100	@ 0x64
 8004eee:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8004ef4:	2314      	movs	r3, #20
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004efc:	23c0      	movs	r3, #192	@ 0xc0
 8004efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8004f08:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004f0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f10:	f107 0310 	add.w	r3, r7, #16
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 ff69 	bl	8008dec <HAL_RCCEx_PeriphCLKConfig>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8004f20:	f7ff feea 	bl	8004cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004f24:	4b24      	ldr	r3, [pc, #144]	@ (8004fb8 <HAL_FDCAN_MspInit+0x10c>)
 8004f26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004f2a:	4a23      	ldr	r2, [pc, #140]	@ (8004fb8 <HAL_FDCAN_MspInit+0x10c>)
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f30:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8004f34:	4b20      	ldr	r3, [pc, #128]	@ (8004fb8 <HAL_FDCAN_MspInit+0x10c>)
 8004f36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f42:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <HAL_FDCAN_MspInit+0x10c>)
 8004f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f48:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <HAL_FDCAN_MspInit+0x10c>)
 8004f4a:	f043 0308 	orr.w	r3, r3, #8
 8004f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f52:	4b19      	ldr	r3, [pc, #100]	@ (8004fb8 <HAL_FDCAN_MspInit+0x10c>)
 8004f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f60:	2303      	movs	r3, #3
 8004f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f66:	2302      	movs	r3, #2
 8004f68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f72:	2302      	movs	r3, #2
 8004f74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004f78:	2309      	movs	r3, #9
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004f82:	4619      	mov	r1, r3
 8004f84:	480d      	ldr	r0, [pc, #52]	@ (8004fbc <HAL_FDCAN_MspInit+0x110>)
 8004f86:	f002 fceb 	bl	8007960 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2105      	movs	r1, #5
 8004f8e:	2013      	movs	r0, #19
 8004f90:	f000 fd14 	bl	80059bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004f94:	2013      	movs	r0, #19
 8004f96:	f000 fd2b 	bl	80059f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2105      	movs	r1, #5
 8004f9e:	2015      	movs	r0, #21
 8004fa0:	f000 fd0c 	bl	80059bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004fa4:	2015      	movs	r0, #21
 8004fa6:	f000 fd23 	bl	80059f0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004faa:	bf00      	nop
 8004fac:	37e8      	adds	r7, #232	@ 0xe8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	4000a000 	.word	0x4000a000
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	58020c00 	.word	0x58020c00

08004fc0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	605a      	str	r2, [r3, #4]
 8004fd2:	609a      	str	r2, [r3, #8]
 8004fd4:	60da      	str	r2, [r3, #12]
 8004fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fd8:	f107 0310 	add.w	r3, r7, #16
 8004fdc:	22c0      	movs	r2, #192	@ 0xc0
 8004fde:	2100      	movs	r1, #0
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f00d f810 	bl	8012006 <memset>
  if(huart->Instance==USART3)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2b      	ldr	r2, [pc, #172]	@ (8005098 <HAL_UART_MspInit+0xd8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d14e      	bne.n	800508e <HAL_UART_MspInit+0xce>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004ff0:	f04f 0202 	mov.w	r2, #2
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005002:	f107 0310 	add.w	r3, r7, #16
 8005006:	4618      	mov	r0, r3
 8005008:	f003 fef0 	bl	8008dec <HAL_RCCEx_PeriphCLKConfig>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005012:	f7ff fe71 	bl	8004cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005016:	4b21      	ldr	r3, [pc, #132]	@ (800509c <HAL_UART_MspInit+0xdc>)
 8005018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800501c:	4a1f      	ldr	r2, [pc, #124]	@ (800509c <HAL_UART_MspInit+0xdc>)
 800501e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005022:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005026:	4b1d      	ldr	r3, [pc, #116]	@ (800509c <HAL_UART_MspInit+0xdc>)
 8005028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800502c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005034:	4b19      	ldr	r3, [pc, #100]	@ (800509c <HAL_UART_MspInit+0xdc>)
 8005036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800503a:	4a18      	ldr	r2, [pc, #96]	@ (800509c <HAL_UART_MspInit+0xdc>)
 800503c:	f043 0308 	orr.w	r3, r3, #8
 8005040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005044:	4b15      	ldr	r3, [pc, #84]	@ (800509c <HAL_UART_MspInit+0xdc>)
 8005046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005052:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005056:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800505a:	2302      	movs	r3, #2
 800505c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005066:	2300      	movs	r3, #0
 8005068:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800506c:	2307      	movs	r3, #7
 800506e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005072:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005076:	4619      	mov	r1, r3
 8005078:	4809      	ldr	r0, [pc, #36]	@ (80050a0 <HAL_UART_MspInit+0xe0>)
 800507a:	f002 fc71 	bl	8007960 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800507e:	2200      	movs	r2, #0
 8005080:	2105      	movs	r1, #5
 8005082:	2027      	movs	r0, #39	@ 0x27
 8005084:	f000 fc9a 	bl	80059bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005088:	2027      	movs	r0, #39	@ 0x27
 800508a:	f000 fcb1 	bl	80059f0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800508e:	bf00      	nop
 8005090:	37e8      	adds	r7, #232	@ 0xe8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40004800 	.word	0x40004800
 800509c:	58024400 	.word	0x58024400
 80050a0:	58020c00 	.word	0x58020c00

080050a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b090      	sub	sp, #64	@ 0x40
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b0f      	cmp	r3, #15
 80050b0:	d827      	bhi.n	8005102 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80050b2:	2200      	movs	r2, #0
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	2037      	movs	r0, #55	@ 0x37
 80050b8:	f000 fc80 	bl	80059bc <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80050bc:	2037      	movs	r0, #55	@ 0x37
 80050be:	f000 fc97 	bl	80059f0 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80050c2:	4a29      	ldr	r2, [pc, #164]	@ (8005168 <HAL_InitTick+0xc4>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80050c8:	4b28      	ldr	r3, [pc, #160]	@ (800516c <HAL_InitTick+0xc8>)
 80050ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050ce:	4a27      	ldr	r2, [pc, #156]	@ (800516c <HAL_InitTick+0xc8>)
 80050d0:	f043 0320 	orr.w	r3, r3, #32
 80050d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050d8:	4b24      	ldr	r3, [pc, #144]	@ (800516c <HAL_InitTick+0xc8>)
 80050da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80050e6:	f107 0210 	add.w	r2, r7, #16
 80050ea:	f107 0314 	add.w	r3, r7, #20
 80050ee:	4611      	mov	r1, r2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f003 fe39 	bl	8008d68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <HAL_InitTick+0x6a>
 8005100:	e001      	b.n	8005106 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e02b      	b.n	800515e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005106:	f003 fe03 	bl	8008d10 <HAL_RCC_GetPCLK1Freq>
 800510a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800510c:	e004      	b.n	8005118 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800510e:	f003 fdff 	bl	8008d10 <HAL_RCC_GetPCLK1Freq>
 8005112:	4603      	mov	r3, r0
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511a:	4a15      	ldr	r2, [pc, #84]	@ (8005170 <HAL_InitTick+0xcc>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	0c9b      	lsrs	r3, r3, #18
 8005122:	3b01      	subs	r3, #1
 8005124:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8005126:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <HAL_InitTick+0xd0>)
 8005128:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <HAL_InitTick+0xd4>)
 800512a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800512c:	4b11      	ldr	r3, [pc, #68]	@ (8005174 <HAL_InitTick+0xd0>)
 800512e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005132:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8005134:	4a0f      	ldr	r2, [pc, #60]	@ (8005174 <HAL_InitTick+0xd0>)
 8005136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005138:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800513a:	4b0e      	ldr	r3, [pc, #56]	@ (8005174 <HAL_InitTick+0xd0>)
 800513c:	2200      	movs	r2, #0
 800513e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005140:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <HAL_InitTick+0xd0>)
 8005142:	2200      	movs	r2, #0
 8005144:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8005146:	480b      	ldr	r0, [pc, #44]	@ (8005174 <HAL_InitTick+0xd0>)
 8005148:	f005 fc7c 	bl	800aa44 <HAL_TIM_Base_Init>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d104      	bne.n	800515c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8005152:	4808      	ldr	r0, [pc, #32]	@ (8005174 <HAL_InitTick+0xd0>)
 8005154:	f005 fcd8 	bl	800ab08 <HAL_TIM_Base_Start_IT>
 8005158:	4603      	mov	r3, r0
 800515a:	e000      	b.n	800515e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
}
 800515e:	4618      	mov	r0, r3
 8005160:	3740      	adds	r7, #64	@ 0x40
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	24000074 	.word	0x24000074
 800516c:	58024400 	.word	0x58024400
 8005170:	431bde83 	.word	0x431bde83
 8005174:	24001688 	.word	0x24001688
 8005178:	40001400 	.word	0x40001400

0800517c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005180:	bf00      	nop
 8005182:	e7fd      	b.n	8005180 <NMI_Handler+0x4>

08005184 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005188:	bf00      	nop
 800518a:	e7fd      	b.n	8005188 <HardFault_Handler+0x4>

0800518c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005190:	bf00      	nop
 8005192:	e7fd      	b.n	8005190 <MemManage_Handler+0x4>

08005194 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <BusFault_Handler+0x4>

0800519c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051a0:	bf00      	nop
 80051a2:	e7fd      	b.n	80051a0 <UsageFault_Handler+0x4>

080051a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80051b8:	4802      	ldr	r0, [pc, #8]	@ (80051c4 <FDCAN1_IT0_IRQHandler+0x10>)
 80051ba:	f001 fec3 	bl	8006f44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	24000288 	.word	0x24000288

080051c8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80051cc:	4802      	ldr	r0, [pc, #8]	@ (80051d8 <FDCAN1_IT1_IRQHandler+0x10>)
 80051ce:	f001 feb9 	bl	8006f44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80051d2:	bf00      	nop
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	24000288 	.word	0x24000288

080051dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80051e0:	4802      	ldr	r0, [pc, #8]	@ (80051ec <USART3_IRQHandler+0x10>)
 80051e2:	f006 f821 	bl	800b228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80051e6:	bf00      	nop
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	24000328 	.word	0x24000328

080051f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80051f4:	2000      	movs	r0, #0
 80051f6:	f000 fa83 	bl	8005700 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80051fa:	bf00      	nop
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005204:	4802      	ldr	r0, [pc, #8]	@ (8005210 <TIM7_IRQHandler+0x10>)
 8005206:	f005 fcf7 	bl	800abf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800520a:	bf00      	nop
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	24001688 	.word	0x24001688

08005214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return 1;
 8005218:	2301      	movs	r3, #1
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <_kill>:

int _kill(int pid, int sig)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800522e:	f00c fffb 	bl	8012228 <__errno>
 8005232:	4603      	mov	r3, r0
 8005234:	2216      	movs	r2, #22
 8005236:	601a      	str	r2, [r3, #0]
  return -1;
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <_exit>:

void _exit (int status)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800524c:	f04f 31ff 	mov.w	r1, #4294967295
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff ffe7 	bl	8005224 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005256:	bf00      	nop
 8005258:	e7fd      	b.n	8005256 <_exit+0x12>

0800525a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005266:	2300      	movs	r3, #0
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e00a      	b.n	8005282 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800526c:	f3af 8000 	nop.w
 8005270:	4601      	mov	r1, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	60ba      	str	r2, [r7, #8]
 8005278:	b2ca      	uxtb	r2, r1
 800527a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3301      	adds	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	dbf0      	blt.n	800526c <_read+0x12>
  }

  return len;
 800528a:	687b      	ldr	r3, [r7, #4]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800529c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80052bc:	605a      	str	r2, [r3, #4]
  return 0;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <_isatty>:

int _isatty(int file)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80052d4:	2301      	movs	r3, #1
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005304:	4a14      	ldr	r2, [pc, #80]	@ (8005358 <_sbrk+0x5c>)
 8005306:	4b15      	ldr	r3, [pc, #84]	@ (800535c <_sbrk+0x60>)
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005310:	4b13      	ldr	r3, [pc, #76]	@ (8005360 <_sbrk+0x64>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005318:	4b11      	ldr	r3, [pc, #68]	@ (8005360 <_sbrk+0x64>)
 800531a:	4a12      	ldr	r2, [pc, #72]	@ (8005364 <_sbrk+0x68>)
 800531c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800531e:	4b10      	ldr	r3, [pc, #64]	@ (8005360 <_sbrk+0x64>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4413      	add	r3, r2
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	429a      	cmp	r2, r3
 800532a:	d207      	bcs.n	800533c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800532c:	f00c ff7c 	bl	8012228 <__errno>
 8005330:	4603      	mov	r3, r0
 8005332:	220c      	movs	r2, #12
 8005334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005336:	f04f 33ff 	mov.w	r3, #4294967295
 800533a:	e009      	b.n	8005350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800533c:	4b08      	ldr	r3, [pc, #32]	@ (8005360 <_sbrk+0x64>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005342:	4b07      	ldr	r3, [pc, #28]	@ (8005360 <_sbrk+0x64>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	4a05      	ldr	r2, [pc, #20]	@ (8005360 <_sbrk+0x64>)
 800534c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	24080000 	.word	0x24080000
 800535c:	00000400 	.word	0x00000400
 8005360:	240016d4 	.word	0x240016d4
 8005364:	24006218 	.word	0x24006218

08005368 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800536c:	4b43      	ldr	r3, [pc, #268]	@ (800547c <SystemInit+0x114>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005372:	4a42      	ldr	r2, [pc, #264]	@ (800547c <SystemInit+0x114>)
 8005374:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005378:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800537c:	4b40      	ldr	r3, [pc, #256]	@ (8005480 <SystemInit+0x118>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	2b06      	cmp	r3, #6
 8005386:	d807      	bhi.n	8005398 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005388:	4b3d      	ldr	r3, [pc, #244]	@ (8005480 <SystemInit+0x118>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 030f 	bic.w	r3, r3, #15
 8005390:	4a3b      	ldr	r2, [pc, #236]	@ (8005480 <SystemInit+0x118>)
 8005392:	f043 0307 	orr.w	r3, r3, #7
 8005396:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005398:	4b3a      	ldr	r3, [pc, #232]	@ (8005484 <SystemInit+0x11c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a39      	ldr	r2, [pc, #228]	@ (8005484 <SystemInit+0x11c>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80053a4:	4b37      	ldr	r3, [pc, #220]	@ (8005484 <SystemInit+0x11c>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80053aa:	4b36      	ldr	r3, [pc, #216]	@ (8005484 <SystemInit+0x11c>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4935      	ldr	r1, [pc, #212]	@ (8005484 <SystemInit+0x11c>)
 80053b0:	4b35      	ldr	r3, [pc, #212]	@ (8005488 <SystemInit+0x120>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80053b6:	4b32      	ldr	r3, [pc, #200]	@ (8005480 <SystemInit+0x118>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d007      	beq.n	80053d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80053c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005480 <SystemInit+0x118>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 030f 	bic.w	r3, r3, #15
 80053ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005480 <SystemInit+0x118>)
 80053cc:	f043 0307 	orr.w	r3, r3, #7
 80053d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80053d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005484 <SystemInit+0x11c>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80053d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005484 <SystemInit+0x11c>)
 80053da:	2200      	movs	r2, #0
 80053dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80053de:	4b29      	ldr	r3, [pc, #164]	@ (8005484 <SystemInit+0x11c>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80053e4:	4b27      	ldr	r3, [pc, #156]	@ (8005484 <SystemInit+0x11c>)
 80053e6:	4a29      	ldr	r2, [pc, #164]	@ (800548c <SystemInit+0x124>)
 80053e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80053ea:	4b26      	ldr	r3, [pc, #152]	@ (8005484 <SystemInit+0x11c>)
 80053ec:	4a28      	ldr	r2, [pc, #160]	@ (8005490 <SystemInit+0x128>)
 80053ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80053f0:	4b24      	ldr	r3, [pc, #144]	@ (8005484 <SystemInit+0x11c>)
 80053f2:	4a28      	ldr	r2, [pc, #160]	@ (8005494 <SystemInit+0x12c>)
 80053f4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80053f6:	4b23      	ldr	r3, [pc, #140]	@ (8005484 <SystemInit+0x11c>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80053fc:	4b21      	ldr	r3, [pc, #132]	@ (8005484 <SystemInit+0x11c>)
 80053fe:	4a25      	ldr	r2, [pc, #148]	@ (8005494 <SystemInit+0x12c>)
 8005400:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005402:	4b20      	ldr	r3, [pc, #128]	@ (8005484 <SystemInit+0x11c>)
 8005404:	2200      	movs	r2, #0
 8005406:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005408:	4b1e      	ldr	r3, [pc, #120]	@ (8005484 <SystemInit+0x11c>)
 800540a:	4a22      	ldr	r2, [pc, #136]	@ (8005494 <SystemInit+0x12c>)
 800540c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800540e:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <SystemInit+0x11c>)
 8005410:	2200      	movs	r2, #0
 8005412:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005414:	4b1b      	ldr	r3, [pc, #108]	@ (8005484 <SystemInit+0x11c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1a      	ldr	r2, [pc, #104]	@ (8005484 <SystemInit+0x11c>)
 800541a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800541e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005420:	4b18      	ldr	r3, [pc, #96]	@ (8005484 <SystemInit+0x11c>)
 8005422:	2200      	movs	r2, #0
 8005424:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005426:	4b1c      	ldr	r3, [pc, #112]	@ (8005498 <SystemInit+0x130>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b1c      	ldr	r3, [pc, #112]	@ (800549c <SystemInit+0x134>)
 800542c:	4013      	ands	r3, r2
 800542e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005432:	d202      	bcs.n	800543a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005434:	4b1a      	ldr	r3, [pc, #104]	@ (80054a0 <SystemInit+0x138>)
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800543a:	4b12      	ldr	r3, [pc, #72]	@ (8005484 <SystemInit+0x11c>)
 800543c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d113      	bne.n	8005470 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005448:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <SystemInit+0x11c>)
 800544a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800544e:	4a0d      	ldr	r2, [pc, #52]	@ (8005484 <SystemInit+0x11c>)
 8005450:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005454:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005458:	4b12      	ldr	r3, [pc, #72]	@ (80054a4 <SystemInit+0x13c>)
 800545a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800545e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005460:	4b08      	ldr	r3, [pc, #32]	@ (8005484 <SystemInit+0x11c>)
 8005462:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005466:	4a07      	ldr	r2, [pc, #28]	@ (8005484 <SystemInit+0x11c>)
 8005468:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800546c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005470:	bf00      	nop
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	e000ed00 	.word	0xe000ed00
 8005480:	52002000 	.word	0x52002000
 8005484:	58024400 	.word	0x58024400
 8005488:	eaf6ed7f 	.word	0xeaf6ed7f
 800548c:	02020200 	.word	0x02020200
 8005490:	01ff0000 	.word	0x01ff0000
 8005494:	01010280 	.word	0x01010280
 8005498:	5c001000 	.word	0x5c001000
 800549c:	ffff0000 	.word	0xffff0000
 80054a0:	51008108 	.word	0x51008108
 80054a4:	52004000 	.word	0x52004000

080054a8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80054ac:	4b09      	ldr	r3, [pc, #36]	@ (80054d4 <ExitRun0Mode+0x2c>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4a08      	ldr	r2, [pc, #32]	@ (80054d4 <ExitRun0Mode+0x2c>)
 80054b2:	f043 0302 	orr.w	r3, r3, #2
 80054b6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80054b8:	bf00      	nop
 80054ba:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <ExitRun0Mode+0x2c>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f9      	beq.n	80054ba <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	58024800 	.word	0x58024800

080054d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80054d8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005514 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80054dc:	f7ff ffe4 	bl	80054a8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80054e0:	f7ff ff42 	bl	8005368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054e4:	480c      	ldr	r0, [pc, #48]	@ (8005518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80054e6:	490d      	ldr	r1, [pc, #52]	@ (800551c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80054e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80054ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054ec:	e002      	b.n	80054f4 <LoopCopyDataInit>

080054ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054f2:	3304      	adds	r3, #4

080054f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054f8:	d3f9      	bcc.n	80054ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80054fc:	4c0a      	ldr	r4, [pc, #40]	@ (8005528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80054fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005500:	e001      	b.n	8005506 <LoopFillZerobss>

08005502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005504:	3204      	adds	r2, #4

08005506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005508:	d3fb      	bcc.n	8005502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800550a:	f00c fe93 	bl	8012234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800550e:	f7fe f941 	bl	8003794 <main>
  bx  lr
 8005512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005514:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005518:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800551c:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 8005520:	08015488 	.word	0x08015488
  ldr r2, =_sbss
 8005524:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8005528:	24006218 	.word	0x24006218

0800552c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800552c:	e7fe      	b.n	800552c <ADC3_IRQHandler>
	...

08005530 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08c      	sub	sp, #48	@ 0x30
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800553a:	2300      	movs	r3, #0
 800553c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d009      	beq.n	8005558 <BSP_LED_Init+0x28>
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d006      	beq.n	8005558 <BSP_LED_Init+0x28>
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d003      	beq.n	8005558 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005550:	f06f 0301 	mvn.w	r3, #1
 8005554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005556:	e055      	b.n	8005604 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10f      	bne.n	800557e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800555e:	4b2c      	ldr	r3, [pc, #176]	@ (8005610 <BSP_LED_Init+0xe0>)
 8005560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005564:	4a2a      	ldr	r2, [pc, #168]	@ (8005610 <BSP_LED_Init+0xe0>)
 8005566:	f043 0302 	orr.w	r3, r3, #2
 800556a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800556e:	4b28      	ldr	r3, [pc, #160]	@ (8005610 <BSP_LED_Init+0xe0>)
 8005570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	e021      	b.n	80055c2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d10f      	bne.n	80055a4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8005584:	4b22      	ldr	r3, [pc, #136]	@ (8005610 <BSP_LED_Init+0xe0>)
 8005586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800558a:	4a21      	ldr	r2, [pc, #132]	@ (8005610 <BSP_LED_Init+0xe0>)
 800558c:	f043 0302 	orr.w	r3, r3, #2
 8005590:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005594:	4b1e      	ldr	r3, [pc, #120]	@ (8005610 <BSP_LED_Init+0xe0>)
 8005596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	e00e      	b.n	80055c2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80055a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005610 <BSP_LED_Init+0xe0>)
 80055a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055aa:	4a19      	ldr	r2, [pc, #100]	@ (8005610 <BSP_LED_Init+0xe0>)
 80055ac:	f043 0302 	orr.w	r3, r3, #2
 80055b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055b4:	4b16      	ldr	r3, [pc, #88]	@ (8005610 <BSP_LED_Init+0xe0>)
 80055b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	4a13      	ldr	r2, [pc, #76]	@ (8005614 <BSP_LED_Init+0xe4>)
 80055c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ca:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80055cc:	2301      	movs	r3, #1
 80055ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d4:	2303      	movs	r3, #3
 80055d6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	4a0f      	ldr	r2, [pc, #60]	@ (8005618 <BSP_LED_Init+0xe8>)
 80055dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e0:	f107 0218 	add.w	r2, r7, #24
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f002 f9ba 	bl	8007960 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005618 <BSP_LED_Init+0xe8>)
 80055f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	4a07      	ldr	r2, [pc, #28]	@ (8005614 <BSP_LED_Init+0xe4>)
 80055f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055fc:	2200      	movs	r2, #0
 80055fe:	4619      	mov	r1, r3
 8005600:	f002 fb5e 	bl	8007cc0 <HAL_GPIO_WritePin>
  }

  return ret;
 8005604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005606:	4618      	mov	r0, r3
 8005608:	3730      	adds	r7, #48	@ 0x30
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	58024400 	.word	0x58024400
 8005614:	08014ec8 	.word	0x08014ec8
 8005618:	2400005c 	.word	0x2400005c

0800561c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	460a      	mov	r2, r1
 8005626:	71fb      	strb	r3, [r7, #7]
 8005628:	4613      	mov	r3, r2
 800562a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800562c:	4b2e      	ldr	r3, [pc, #184]	@ (80056e8 <BSP_PB_Init+0xcc>)
 800562e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005632:	4a2d      	ldr	r2, [pc, #180]	@ (80056e8 <BSP_PB_Init+0xcc>)
 8005634:	f043 0304 	orr.w	r3, r3, #4
 8005638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800563c:	4b2a      	ldr	r3, [pc, #168]	@ (80056e8 <BSP_PB_Init+0xcc>)
 800563e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800564a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800564e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005650:	2302      	movs	r3, #2
 8005652:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005654:	2302      	movs	r3, #2
 8005656:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005658:	79bb      	ldrb	r3, [r7, #6]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10c      	bne.n	8005678 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	4a21      	ldr	r2, [pc, #132]	@ (80056ec <BSP_PB_Init+0xd0>)
 8005666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566a:	f107 020c 	add.w	r2, r7, #12
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f002 f975 	bl	8007960 <HAL_GPIO_Init>
 8005676:	e031      	b.n	80056dc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005678:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800567c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <BSP_PB_Init+0xd0>)
 8005682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005686:	f107 020c 	add.w	r2, r7, #12
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f002 f967 	bl	8007960 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	4a16      	ldr	r2, [pc, #88]	@ (80056f0 <BSP_PB_Init+0xd4>)
 8005698:	441a      	add	r2, r3
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	4915      	ldr	r1, [pc, #84]	@ (80056f4 <BSP_PB_Init+0xd8>)
 800569e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f000 ffac 	bl	8006602 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	4a10      	ldr	r2, [pc, #64]	@ (80056f0 <BSP_PB_Init+0xd4>)
 80056b0:	1898      	adds	r0, r3, r2
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	4a10      	ldr	r2, [pc, #64]	@ (80056f8 <BSP_PB_Init+0xdc>)
 80056b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ba:	461a      	mov	r2, r3
 80056bc:	2100      	movs	r1, #0
 80056be:	f000 ff81 	bl	80065c4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80056c2:	2028      	movs	r0, #40	@ 0x28
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	4a0d      	ldr	r2, [pc, #52]	@ (80056fc <BSP_PB_Init+0xe0>)
 80056c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056cc:	2200      	movs	r2, #0
 80056ce:	4619      	mov	r1, r3
 80056d0:	f000 f974 	bl	80059bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80056d4:	2328      	movs	r3, #40	@ 0x28
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f98a 	bl	80059f0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	24000068 	.word	0x24000068
 80056f0:	240016d8 	.word	0x240016d8
 80056f4:	08014ed0 	.word	0x08014ed0
 80056f8:	2400006c 	.word	0x2400006c
 80056fc:	24000070 	.word	0x24000070

08005700 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4a04      	ldr	r2, [pc, #16]	@ (8005720 <BSP_PB_IRQHandler+0x20>)
 8005710:	4413      	add	r3, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f000 ff8a 	bl	800662c <HAL_EXTI_IRQHandler>
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	240016d8 	.word	0x240016d8

08005724 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005728:	2000      	movs	r0, #0
 800572a:	f7fb faf9 	bl	8000d20 <BSP_PB_Callback>
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800573a:	2003      	movs	r0, #3
 800573c:	f000 f933 	bl	80059a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005740:	f003 f93c 	bl	80089bc <HAL_RCC_GetSysClockFreq>
 8005744:	4602      	mov	r2, r0
 8005746:	4b15      	ldr	r3, [pc, #84]	@ (800579c <HAL_Init+0x68>)
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	f003 030f 	and.w	r3, r3, #15
 8005750:	4913      	ldr	r1, [pc, #76]	@ (80057a0 <HAL_Init+0x6c>)
 8005752:	5ccb      	ldrb	r3, [r1, r3]
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
 800575c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800575e:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <HAL_Init+0x68>)
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	4a0e      	ldr	r2, [pc, #56]	@ (80057a0 <HAL_Init+0x6c>)
 8005768:	5cd3      	ldrb	r3, [r2, r3]
 800576a:	f003 031f 	and.w	r3, r3, #31
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	fa22 f303 	lsr.w	r3, r2, r3
 8005774:	4a0b      	ldr	r2, [pc, #44]	@ (80057a4 <HAL_Init+0x70>)
 8005776:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005778:	4a0b      	ldr	r2, [pc, #44]	@ (80057a8 <HAL_Init+0x74>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800577e:	200f      	movs	r0, #15
 8005780:	f7ff fc90 	bl	80050a4 <HAL_InitTick>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e002      	b.n	8005794 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800578e:	f7ff fb6f 	bl	8004e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	58024400 	.word	0x58024400
 80057a0:	08014eb8 	.word	0x08014eb8
 80057a4:	24000058 	.word	0x24000058
 80057a8:	24000054 	.word	0x24000054

080057ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <HAL_IncTick+0x20>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	4b06      	ldr	r3, [pc, #24]	@ (80057d0 <HAL_IncTick+0x24>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4413      	add	r3, r2
 80057bc:	4a04      	ldr	r2, [pc, #16]	@ (80057d0 <HAL_IncTick+0x24>)
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	24000078 	.word	0x24000078
 80057d0:	240016e0 	.word	0x240016e0

080057d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return uwTick;
 80057d8:	4b03      	ldr	r3, [pc, #12]	@ (80057e8 <HAL_GetTick+0x14>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	240016e0 	.word	0x240016e0

080057ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057f4:	f7ff ffee 	bl	80057d4 <HAL_GetTick>
 80057f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d005      	beq.n	8005812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005806:	4b0a      	ldr	r3, [pc, #40]	@ (8005830 <HAL_Delay+0x44>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005812:	bf00      	nop
 8005814:	f7ff ffde 	bl	80057d4 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	d8f7      	bhi.n	8005814 <HAL_Delay+0x28>
  {
  }
}
 8005824:	bf00      	nop
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	24000078 	.word	0x24000078

08005834 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005838:	4b03      	ldr	r3, [pc, #12]	@ (8005848 <HAL_GetREVID+0x14>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	0c1b      	lsrs	r3, r3, #16
}
 800583e:	4618      	mov	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	5c001000 	.word	0x5c001000

0800584c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <__NVIC_SetPriorityGrouping+0x40>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005868:	4013      	ands	r3, r2
 800586a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005874:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <__NVIC_SetPriorityGrouping+0x44>)
 8005876:	4313      	orrs	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800587a:	4a04      	ldr	r2, [pc, #16]	@ (800588c <__NVIC_SetPriorityGrouping+0x40>)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	60d3      	str	r3, [r2, #12]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	e000ed00 	.word	0xe000ed00
 8005890:	05fa0000 	.word	0x05fa0000

08005894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005898:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <__NVIC_GetPriorityGrouping+0x18>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	0a1b      	lsrs	r3, r3, #8
 800589e:	f003 0307 	and.w	r3, r3, #7
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	e000ed00 	.word	0xe000ed00

080058b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	db0b      	blt.n	80058da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058c2:	88fb      	ldrh	r3, [r7, #6]
 80058c4:	f003 021f 	and.w	r2, r3, #31
 80058c8:	4907      	ldr	r1, [pc, #28]	@ (80058e8 <__NVIC_EnableIRQ+0x38>)
 80058ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	2001      	movs	r0, #1
 80058d2:	fa00 f202 	lsl.w	r2, r0, r2
 80058d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	e000e100 	.word	0xe000e100

080058ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	6039      	str	r1, [r7, #0]
 80058f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	db0a      	blt.n	8005916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	b2da      	uxtb	r2, r3
 8005904:	490c      	ldr	r1, [pc, #48]	@ (8005938 <__NVIC_SetPriority+0x4c>)
 8005906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800590a:	0112      	lsls	r2, r2, #4
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	440b      	add	r3, r1
 8005910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005914:	e00a      	b.n	800592c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	b2da      	uxtb	r2, r3
 800591a:	4908      	ldr	r1, [pc, #32]	@ (800593c <__NVIC_SetPriority+0x50>)
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	3b04      	subs	r3, #4
 8005924:	0112      	lsls	r2, r2, #4
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	440b      	add	r3, r1
 800592a:	761a      	strb	r2, [r3, #24]
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	e000e100 	.word	0xe000e100
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	@ 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f1c3 0307 	rsb	r3, r3, #7
 800595a:	2b04      	cmp	r3, #4
 800595c:	bf28      	it	cs
 800595e:	2304      	movcs	r3, #4
 8005960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	3304      	adds	r3, #4
 8005966:	2b06      	cmp	r3, #6
 8005968:	d902      	bls.n	8005970 <NVIC_EncodePriority+0x30>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3b03      	subs	r3, #3
 800596e:	e000      	b.n	8005972 <NVIC_EncodePriority+0x32>
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005974:	f04f 32ff 	mov.w	r2, #4294967295
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43da      	mvns	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	401a      	ands	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005988:	f04f 31ff 	mov.w	r1, #4294967295
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	43d9      	mvns	r1, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005998:	4313      	orrs	r3, r2
         );
}
 800599a:	4618      	mov	r0, r3
 800599c:	3724      	adds	r7, #36	@ 0x24
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff ff4c 	bl	800584c <__NVIC_SetPriorityGrouping>
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059ca:	f7ff ff63 	bl	8005894 <__NVIC_GetPriorityGrouping>
 80059ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	6978      	ldr	r0, [r7, #20]
 80059d6:	f7ff ffb3 	bl	8005940 <NVIC_EncodePriority>
 80059da:	4602      	mov	r2, r0
 80059dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059e0:	4611      	mov	r1, r2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff ff82 	bl	80058ec <__NVIC_SetPriority>
}
 80059e8:	bf00      	nop
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff ff56 	bl	80058b0 <__NVIC_EnableIRQ>
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005a10:	f3bf 8f5f 	dmb	sy
}
 8005a14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005a16:	4b07      	ldr	r3, [pc, #28]	@ (8005a34 <HAL_MPU_Disable+0x28>)
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	4a06      	ldr	r2, [pc, #24]	@ (8005a34 <HAL_MPU_Disable+0x28>)
 8005a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a20:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005a22:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_MPU_Disable+0x2c>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	e000ed00 	.word	0xe000ed00
 8005a38:	e000ed90 	.word	0xe000ed90

08005a3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005a44:	4a0b      	ldr	r2, [pc, #44]	@ (8005a74 <HAL_MPU_Enable+0x38>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <HAL_MPU_Enable+0x3c>)
 8005a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a52:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <HAL_MPU_Enable+0x3c>)
 8005a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a58:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005a5a:	f3bf 8f4f 	dsb	sy
}
 8005a5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a60:	f3bf 8f6f 	isb	sy
}
 8005a64:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	e000ed90 	.word	0xe000ed90
 8005a78:	e000ed00 	.word	0xe000ed00

08005a7c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	785a      	ldrb	r2, [r3, #1]
 8005a88:	4b1b      	ldr	r3, [pc, #108]	@ (8005af8 <HAL_MPU_ConfigRegion+0x7c>)
 8005a8a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005af8 <HAL_MPU_ConfigRegion+0x7c>)
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	4a19      	ldr	r2, [pc, #100]	@ (8005af8 <HAL_MPU_ConfigRegion+0x7c>)
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005a98:	4a17      	ldr	r2, [pc, #92]	@ (8005af8 <HAL_MPU_ConfigRegion+0x7c>)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7b1b      	ldrb	r3, [r3, #12]
 8005aa4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	7adb      	ldrb	r3, [r3, #11]
 8005aaa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005aac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	7a9b      	ldrb	r3, [r3, #10]
 8005ab2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005ab4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7b5b      	ldrb	r3, [r3, #13]
 8005aba:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005abc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	7b9b      	ldrb	r3, [r3, #14]
 8005ac2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005ac4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7bdb      	ldrb	r3, [r3, #15]
 8005aca:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005acc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	7a5b      	ldrb	r3, [r3, #9]
 8005ad2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005ad4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	7a1b      	ldrb	r3, [r3, #8]
 8005ada:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005adc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	7812      	ldrb	r2, [r2, #0]
 8005ae2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ae4:	4a04      	ldr	r2, [pc, #16]	@ (8005af8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005ae6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ae8:	6113      	str	r3, [r2, #16]
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	e000ed90 	.word	0xe000ed90

08005afc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005b04:	f7ff fe66 	bl	80057d4 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e2dc      	b.n	80060ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d008      	beq.n	8005b32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2280      	movs	r2, #128	@ 0x80
 8005b24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e2cd      	b.n	80060ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a76      	ldr	r2, [pc, #472]	@ (8005d10 <HAL_DMA_Abort+0x214>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d04a      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a74      	ldr	r2, [pc, #464]	@ (8005d14 <HAL_DMA_Abort+0x218>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d045      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a73      	ldr	r2, [pc, #460]	@ (8005d18 <HAL_DMA_Abort+0x21c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d040      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a71      	ldr	r2, [pc, #452]	@ (8005d1c <HAL_DMA_Abort+0x220>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d03b      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a70      	ldr	r2, [pc, #448]	@ (8005d20 <HAL_DMA_Abort+0x224>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d036      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a6e      	ldr	r2, [pc, #440]	@ (8005d24 <HAL_DMA_Abort+0x228>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d031      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a6d      	ldr	r2, [pc, #436]	@ (8005d28 <HAL_DMA_Abort+0x22c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d02c      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005d2c <HAL_DMA_Abort+0x230>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d027      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6a      	ldr	r2, [pc, #424]	@ (8005d30 <HAL_DMA_Abort+0x234>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d022      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a68      	ldr	r2, [pc, #416]	@ (8005d34 <HAL_DMA_Abort+0x238>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01d      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a67      	ldr	r2, [pc, #412]	@ (8005d38 <HAL_DMA_Abort+0x23c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d018      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a65      	ldr	r2, [pc, #404]	@ (8005d3c <HAL_DMA_Abort+0x240>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a64      	ldr	r2, [pc, #400]	@ (8005d40 <HAL_DMA_Abort+0x244>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a62      	ldr	r2, [pc, #392]	@ (8005d44 <HAL_DMA_Abort+0x248>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a61      	ldr	r2, [pc, #388]	@ (8005d48 <HAL_DMA_Abort+0x24c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_DMA_Abort+0xd6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a5f      	ldr	r2, [pc, #380]	@ (8005d4c <HAL_DMA_Abort+0x250>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d101      	bne.n	8005bd6 <HAL_DMA_Abort+0xda>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <HAL_DMA_Abort+0xdc>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d013      	beq.n	8005c04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 021e 	bic.w	r2, r2, #30
 8005bea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bfa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e00a      	b.n	8005c1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 020e 	bic.w	r2, r2, #14
 8005c12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a3c      	ldr	r2, [pc, #240]	@ (8005d10 <HAL_DMA_Abort+0x214>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d072      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a3a      	ldr	r2, [pc, #232]	@ (8005d14 <HAL_DMA_Abort+0x218>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d06d      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a39      	ldr	r2, [pc, #228]	@ (8005d18 <HAL_DMA_Abort+0x21c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d068      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a37      	ldr	r2, [pc, #220]	@ (8005d1c <HAL_DMA_Abort+0x220>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d063      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a36      	ldr	r2, [pc, #216]	@ (8005d20 <HAL_DMA_Abort+0x224>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d05e      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a34      	ldr	r2, [pc, #208]	@ (8005d24 <HAL_DMA_Abort+0x228>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d059      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a33      	ldr	r2, [pc, #204]	@ (8005d28 <HAL_DMA_Abort+0x22c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d054      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a31      	ldr	r2, [pc, #196]	@ (8005d2c <HAL_DMA_Abort+0x230>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d04f      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a30      	ldr	r2, [pc, #192]	@ (8005d30 <HAL_DMA_Abort+0x234>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d04a      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a2e      	ldr	r2, [pc, #184]	@ (8005d34 <HAL_DMA_Abort+0x238>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d045      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a2d      	ldr	r2, [pc, #180]	@ (8005d38 <HAL_DMA_Abort+0x23c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d040      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005d3c <HAL_DMA_Abort+0x240>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d03b      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2a      	ldr	r2, [pc, #168]	@ (8005d40 <HAL_DMA_Abort+0x244>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d036      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a28      	ldr	r2, [pc, #160]	@ (8005d44 <HAL_DMA_Abort+0x248>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d031      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a27      	ldr	r2, [pc, #156]	@ (8005d48 <HAL_DMA_Abort+0x24c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d02c      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a25      	ldr	r2, [pc, #148]	@ (8005d4c <HAL_DMA_Abort+0x250>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d027      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a24      	ldr	r2, [pc, #144]	@ (8005d50 <HAL_DMA_Abort+0x254>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d022      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a22      	ldr	r2, [pc, #136]	@ (8005d54 <HAL_DMA_Abort+0x258>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01d      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a21      	ldr	r2, [pc, #132]	@ (8005d58 <HAL_DMA_Abort+0x25c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d018      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d5c <HAL_DMA_Abort+0x260>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d60 <HAL_DMA_Abort+0x264>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00e      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d64 <HAL_DMA_Abort+0x268>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8005d68 <HAL_DMA_Abort+0x26c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d004      	beq.n	8005d0a <HAL_DMA_Abort+0x20e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a19      	ldr	r2, [pc, #100]	@ (8005d6c <HAL_DMA_Abort+0x270>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d132      	bne.n	8005d70 <HAL_DMA_Abort+0x274>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e031      	b.n	8005d72 <HAL_DMA_Abort+0x276>
 8005d0e:	bf00      	nop
 8005d10:	40020010 	.word	0x40020010
 8005d14:	40020028 	.word	0x40020028
 8005d18:	40020040 	.word	0x40020040
 8005d1c:	40020058 	.word	0x40020058
 8005d20:	40020070 	.word	0x40020070
 8005d24:	40020088 	.word	0x40020088
 8005d28:	400200a0 	.word	0x400200a0
 8005d2c:	400200b8 	.word	0x400200b8
 8005d30:	40020410 	.word	0x40020410
 8005d34:	40020428 	.word	0x40020428
 8005d38:	40020440 	.word	0x40020440
 8005d3c:	40020458 	.word	0x40020458
 8005d40:	40020470 	.word	0x40020470
 8005d44:	40020488 	.word	0x40020488
 8005d48:	400204a0 	.word	0x400204a0
 8005d4c:	400204b8 	.word	0x400204b8
 8005d50:	58025408 	.word	0x58025408
 8005d54:	5802541c 	.word	0x5802541c
 8005d58:	58025430 	.word	0x58025430
 8005d5c:	58025444 	.word	0x58025444
 8005d60:	58025458 	.word	0x58025458
 8005d64:	5802546c 	.word	0x5802546c
 8005d68:	58025480 	.word	0x58025480
 8005d6c:	58025494 	.word	0x58025494
 8005d70:	2300      	movs	r3, #0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a6d      	ldr	r2, [pc, #436]	@ (8005f40 <HAL_DMA_Abort+0x444>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d04a      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a6b      	ldr	r2, [pc, #428]	@ (8005f44 <HAL_DMA_Abort+0x448>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d045      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a6a      	ldr	r2, [pc, #424]	@ (8005f48 <HAL_DMA_Abort+0x44c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d040      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a68      	ldr	r2, [pc, #416]	@ (8005f4c <HAL_DMA_Abort+0x450>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d03b      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a67      	ldr	r2, [pc, #412]	@ (8005f50 <HAL_DMA_Abort+0x454>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d036      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a65      	ldr	r2, [pc, #404]	@ (8005f54 <HAL_DMA_Abort+0x458>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d031      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a64      	ldr	r2, [pc, #400]	@ (8005f58 <HAL_DMA_Abort+0x45c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d02c      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a62      	ldr	r2, [pc, #392]	@ (8005f5c <HAL_DMA_Abort+0x460>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d027      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a61      	ldr	r2, [pc, #388]	@ (8005f60 <HAL_DMA_Abort+0x464>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d022      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a5f      	ldr	r2, [pc, #380]	@ (8005f64 <HAL_DMA_Abort+0x468>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d01d      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5e      	ldr	r2, [pc, #376]	@ (8005f68 <HAL_DMA_Abort+0x46c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d018      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a5c      	ldr	r2, [pc, #368]	@ (8005f6c <HAL_DMA_Abort+0x470>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a5b      	ldr	r2, [pc, #364]	@ (8005f70 <HAL_DMA_Abort+0x474>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00e      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a59      	ldr	r2, [pc, #356]	@ (8005f74 <HAL_DMA_Abort+0x478>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a58      	ldr	r2, [pc, #352]	@ (8005f78 <HAL_DMA_Abort+0x47c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_DMA_Abort+0x32a>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a56      	ldr	r2, [pc, #344]	@ (8005f7c <HAL_DMA_Abort+0x480>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d108      	bne.n	8005e38 <HAL_DMA_Abort+0x33c>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0201 	bic.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	e007      	b.n	8005e48 <HAL_DMA_Abort+0x34c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e48:	e013      	b.n	8005e72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e4a:	f7ff fcc3 	bl	80057d4 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b05      	cmp	r3, #5
 8005e56:	d90c      	bls.n	8005e72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2203      	movs	r2, #3
 8005e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e12d      	b.n	80060ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a2f      	ldr	r2, [pc, #188]	@ (8005f40 <HAL_DMA_Abort+0x444>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d04a      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f44 <HAL_DMA_Abort+0x448>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d045      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2c      	ldr	r2, [pc, #176]	@ (8005f48 <HAL_DMA_Abort+0x44c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d040      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <HAL_DMA_Abort+0x450>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d03b      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a29      	ldr	r2, [pc, #164]	@ (8005f50 <HAL_DMA_Abort+0x454>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d036      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a27      	ldr	r2, [pc, #156]	@ (8005f54 <HAL_DMA_Abort+0x458>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d031      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a26      	ldr	r2, [pc, #152]	@ (8005f58 <HAL_DMA_Abort+0x45c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d02c      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a24      	ldr	r2, [pc, #144]	@ (8005f5c <HAL_DMA_Abort+0x460>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d027      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a23      	ldr	r2, [pc, #140]	@ (8005f60 <HAL_DMA_Abort+0x464>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d022      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a21      	ldr	r2, [pc, #132]	@ (8005f64 <HAL_DMA_Abort+0x468>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d01d      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a20      	ldr	r2, [pc, #128]	@ (8005f68 <HAL_DMA_Abort+0x46c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d018      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8005f6c <HAL_DMA_Abort+0x470>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1d      	ldr	r2, [pc, #116]	@ (8005f70 <HAL_DMA_Abort+0x474>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00e      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1b      	ldr	r2, [pc, #108]	@ (8005f74 <HAL_DMA_Abort+0x478>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f78 <HAL_DMA_Abort+0x47c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d004      	beq.n	8005f1e <HAL_DMA_Abort+0x422>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a18      	ldr	r2, [pc, #96]	@ (8005f7c <HAL_DMA_Abort+0x480>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d101      	bne.n	8005f22 <HAL_DMA_Abort+0x426>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_DMA_Abort+0x428>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d02b      	beq.n	8005f80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	223f      	movs	r2, #63	@ 0x3f
 8005f38:	409a      	lsls	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	609a      	str	r2, [r3, #8]
 8005f3e:	e02a      	b.n	8005f96 <HAL_DMA_Abort+0x49a>
 8005f40:	40020010 	.word	0x40020010
 8005f44:	40020028 	.word	0x40020028
 8005f48:	40020040 	.word	0x40020040
 8005f4c:	40020058 	.word	0x40020058
 8005f50:	40020070 	.word	0x40020070
 8005f54:	40020088 	.word	0x40020088
 8005f58:	400200a0 	.word	0x400200a0
 8005f5c:	400200b8 	.word	0x400200b8
 8005f60:	40020410 	.word	0x40020410
 8005f64:	40020428 	.word	0x40020428
 8005f68:	40020440 	.word	0x40020440
 8005f6c:	40020458 	.word	0x40020458
 8005f70:	40020470 	.word	0x40020470
 8005f74:	40020488 	.word	0x40020488
 8005f78:	400204a0 	.word	0x400204a0
 8005f7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8a:	f003 031f 	and.w	r3, r3, #31
 8005f8e:	2201      	movs	r2, #1
 8005f90:	409a      	lsls	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4f      	ldr	r2, [pc, #316]	@ (80060d8 <HAL_DMA_Abort+0x5dc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d072      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a4d      	ldr	r2, [pc, #308]	@ (80060dc <HAL_DMA_Abort+0x5e0>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d06d      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a4c      	ldr	r2, [pc, #304]	@ (80060e0 <HAL_DMA_Abort+0x5e4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d068      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80060e4 <HAL_DMA_Abort+0x5e8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d063      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a49      	ldr	r2, [pc, #292]	@ (80060e8 <HAL_DMA_Abort+0x5ec>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d05e      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a47      	ldr	r2, [pc, #284]	@ (80060ec <HAL_DMA_Abort+0x5f0>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d059      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a46      	ldr	r2, [pc, #280]	@ (80060f0 <HAL_DMA_Abort+0x5f4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d054      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a44      	ldr	r2, [pc, #272]	@ (80060f4 <HAL_DMA_Abort+0x5f8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d04f      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a43      	ldr	r2, [pc, #268]	@ (80060f8 <HAL_DMA_Abort+0x5fc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d04a      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a41      	ldr	r2, [pc, #260]	@ (80060fc <HAL_DMA_Abort+0x600>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d045      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a40      	ldr	r2, [pc, #256]	@ (8006100 <HAL_DMA_Abort+0x604>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d040      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a3e      	ldr	r2, [pc, #248]	@ (8006104 <HAL_DMA_Abort+0x608>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d03b      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a3d      	ldr	r2, [pc, #244]	@ (8006108 <HAL_DMA_Abort+0x60c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d036      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a3b      	ldr	r2, [pc, #236]	@ (800610c <HAL_DMA_Abort+0x610>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d031      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a3a      	ldr	r2, [pc, #232]	@ (8006110 <HAL_DMA_Abort+0x614>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d02c      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a38      	ldr	r2, [pc, #224]	@ (8006114 <HAL_DMA_Abort+0x618>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d027      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a37      	ldr	r2, [pc, #220]	@ (8006118 <HAL_DMA_Abort+0x61c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d022      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a35      	ldr	r2, [pc, #212]	@ (800611c <HAL_DMA_Abort+0x620>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d01d      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a34      	ldr	r2, [pc, #208]	@ (8006120 <HAL_DMA_Abort+0x624>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d018      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a32      	ldr	r2, [pc, #200]	@ (8006124 <HAL_DMA_Abort+0x628>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a31      	ldr	r2, [pc, #196]	@ (8006128 <HAL_DMA_Abort+0x62c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00e      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2f      	ldr	r2, [pc, #188]	@ (800612c <HAL_DMA_Abort+0x630>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2e      	ldr	r2, [pc, #184]	@ (8006130 <HAL_DMA_Abort+0x634>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_DMA_Abort+0x58a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a2c      	ldr	r2, [pc, #176]	@ (8006134 <HAL_DMA_Abort+0x638>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d101      	bne.n	800608a <HAL_DMA_Abort+0x58e>
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <HAL_DMA_Abort+0x590>
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d015      	beq.n	80060bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006098:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00c      	beq.n	80060bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40020010 	.word	0x40020010
 80060dc:	40020028 	.word	0x40020028
 80060e0:	40020040 	.word	0x40020040
 80060e4:	40020058 	.word	0x40020058
 80060e8:	40020070 	.word	0x40020070
 80060ec:	40020088 	.word	0x40020088
 80060f0:	400200a0 	.word	0x400200a0
 80060f4:	400200b8 	.word	0x400200b8
 80060f8:	40020410 	.word	0x40020410
 80060fc:	40020428 	.word	0x40020428
 8006100:	40020440 	.word	0x40020440
 8006104:	40020458 	.word	0x40020458
 8006108:	40020470 	.word	0x40020470
 800610c:	40020488 	.word	0x40020488
 8006110:	400204a0 	.word	0x400204a0
 8006114:	400204b8 	.word	0x400204b8
 8006118:	58025408 	.word	0x58025408
 800611c:	5802541c 	.word	0x5802541c
 8006120:	58025430 	.word	0x58025430
 8006124:	58025444 	.word	0x58025444
 8006128:	58025458 	.word	0x58025458
 800612c:	5802546c 	.word	0x5802546c
 8006130:	58025480 	.word	0x58025480
 8006134:	58025494 	.word	0x58025494

08006138 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e237      	b.n	80065ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d004      	beq.n	8006160 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2280      	movs	r2, #128	@ 0x80
 800615a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e22c      	b.n	80065ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a5c      	ldr	r2, [pc, #368]	@ (80062d8 <HAL_DMA_Abort_IT+0x1a0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d04a      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a5b      	ldr	r2, [pc, #364]	@ (80062dc <HAL_DMA_Abort_IT+0x1a4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d045      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a59      	ldr	r2, [pc, #356]	@ (80062e0 <HAL_DMA_Abort_IT+0x1a8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d040      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a58      	ldr	r2, [pc, #352]	@ (80062e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d03b      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a56      	ldr	r2, [pc, #344]	@ (80062e8 <HAL_DMA_Abort_IT+0x1b0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d036      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a55      	ldr	r2, [pc, #340]	@ (80062ec <HAL_DMA_Abort_IT+0x1b4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d031      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a53      	ldr	r2, [pc, #332]	@ (80062f0 <HAL_DMA_Abort_IT+0x1b8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d02c      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a52      	ldr	r2, [pc, #328]	@ (80062f4 <HAL_DMA_Abort_IT+0x1bc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d027      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a50      	ldr	r2, [pc, #320]	@ (80062f8 <HAL_DMA_Abort_IT+0x1c0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d022      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4f      	ldr	r2, [pc, #316]	@ (80062fc <HAL_DMA_Abort_IT+0x1c4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d01d      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a4d      	ldr	r2, [pc, #308]	@ (8006300 <HAL_DMA_Abort_IT+0x1c8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d018      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a4c      	ldr	r2, [pc, #304]	@ (8006304 <HAL_DMA_Abort_IT+0x1cc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006308 <HAL_DMA_Abort_IT+0x1d0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00e      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a49      	ldr	r2, [pc, #292]	@ (800630c <HAL_DMA_Abort_IT+0x1d4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d009      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a47      	ldr	r2, [pc, #284]	@ (8006310 <HAL_DMA_Abort_IT+0x1d8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_DMA_Abort_IT+0xc8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a46      	ldr	r2, [pc, #280]	@ (8006314 <HAL_DMA_Abort_IT+0x1dc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d101      	bne.n	8006204 <HAL_DMA_Abort_IT+0xcc>
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <HAL_DMA_Abort_IT+0xce>
 8006204:	2300      	movs	r3, #0
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8086 	beq.w	8006318 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2204      	movs	r2, #4
 8006210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2f      	ldr	r2, [pc, #188]	@ (80062d8 <HAL_DMA_Abort_IT+0x1a0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d04a      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2e      	ldr	r2, [pc, #184]	@ (80062dc <HAL_DMA_Abort_IT+0x1a4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d045      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2c      	ldr	r2, [pc, #176]	@ (80062e0 <HAL_DMA_Abort_IT+0x1a8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d040      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2b      	ldr	r2, [pc, #172]	@ (80062e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d03b      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a29      	ldr	r2, [pc, #164]	@ (80062e8 <HAL_DMA_Abort_IT+0x1b0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d036      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a28      	ldr	r2, [pc, #160]	@ (80062ec <HAL_DMA_Abort_IT+0x1b4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d031      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a26      	ldr	r2, [pc, #152]	@ (80062f0 <HAL_DMA_Abort_IT+0x1b8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d02c      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a25      	ldr	r2, [pc, #148]	@ (80062f4 <HAL_DMA_Abort_IT+0x1bc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d027      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a23      	ldr	r2, [pc, #140]	@ (80062f8 <HAL_DMA_Abort_IT+0x1c0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d022      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a22      	ldr	r2, [pc, #136]	@ (80062fc <HAL_DMA_Abort_IT+0x1c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d01d      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a20      	ldr	r2, [pc, #128]	@ (8006300 <HAL_DMA_Abort_IT+0x1c8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1f      	ldr	r2, [pc, #124]	@ (8006304 <HAL_DMA_Abort_IT+0x1cc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1d      	ldr	r2, [pc, #116]	@ (8006308 <HAL_DMA_Abort_IT+0x1d0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1c      	ldr	r2, [pc, #112]	@ (800630c <HAL_DMA_Abort_IT+0x1d4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006310 <HAL_DMA_Abort_IT+0x1d8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_DMA_Abort_IT+0x17c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <HAL_DMA_Abort_IT+0x1dc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d108      	bne.n	80062c6 <HAL_DMA_Abort_IT+0x18e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	e178      	b.n	80065b8 <HAL_DMA_Abort_IT+0x480>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e16f      	b.n	80065b8 <HAL_DMA_Abort_IT+0x480>
 80062d8:	40020010 	.word	0x40020010
 80062dc:	40020028 	.word	0x40020028
 80062e0:	40020040 	.word	0x40020040
 80062e4:	40020058 	.word	0x40020058
 80062e8:	40020070 	.word	0x40020070
 80062ec:	40020088 	.word	0x40020088
 80062f0:	400200a0 	.word	0x400200a0
 80062f4:	400200b8 	.word	0x400200b8
 80062f8:	40020410 	.word	0x40020410
 80062fc:	40020428 	.word	0x40020428
 8006300:	40020440 	.word	0x40020440
 8006304:	40020458 	.word	0x40020458
 8006308:	40020470 	.word	0x40020470
 800630c:	40020488 	.word	0x40020488
 8006310:	400204a0 	.word	0x400204a0
 8006314:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 020e 	bic.w	r2, r2, #14
 8006326:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a6c      	ldr	r2, [pc, #432]	@ (80064e0 <HAL_DMA_Abort_IT+0x3a8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d04a      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a6b      	ldr	r2, [pc, #428]	@ (80064e4 <HAL_DMA_Abort_IT+0x3ac>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d045      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a69      	ldr	r2, [pc, #420]	@ (80064e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d040      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a68      	ldr	r2, [pc, #416]	@ (80064ec <HAL_DMA_Abort_IT+0x3b4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d03b      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a66      	ldr	r2, [pc, #408]	@ (80064f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d036      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a65      	ldr	r2, [pc, #404]	@ (80064f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d031      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a63      	ldr	r2, [pc, #396]	@ (80064f8 <HAL_DMA_Abort_IT+0x3c0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d02c      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a62      	ldr	r2, [pc, #392]	@ (80064fc <HAL_DMA_Abort_IT+0x3c4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d027      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a60      	ldr	r2, [pc, #384]	@ (8006500 <HAL_DMA_Abort_IT+0x3c8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d022      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a5f      	ldr	r2, [pc, #380]	@ (8006504 <HAL_DMA_Abort_IT+0x3cc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d01d      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a5d      	ldr	r2, [pc, #372]	@ (8006508 <HAL_DMA_Abort_IT+0x3d0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d018      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a5c      	ldr	r2, [pc, #368]	@ (800650c <HAL_DMA_Abort_IT+0x3d4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a5a      	ldr	r2, [pc, #360]	@ (8006510 <HAL_DMA_Abort_IT+0x3d8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d00e      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a59      	ldr	r2, [pc, #356]	@ (8006514 <HAL_DMA_Abort_IT+0x3dc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d009      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a57      	ldr	r2, [pc, #348]	@ (8006518 <HAL_DMA_Abort_IT+0x3e0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d004      	beq.n	80063c8 <HAL_DMA_Abort_IT+0x290>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a56      	ldr	r2, [pc, #344]	@ (800651c <HAL_DMA_Abort_IT+0x3e4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d108      	bne.n	80063da <HAL_DMA_Abort_IT+0x2a2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0201 	bic.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e007      	b.n	80063ea <HAL_DMA_Abort_IT+0x2b2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a3c      	ldr	r2, [pc, #240]	@ (80064e0 <HAL_DMA_Abort_IT+0x3a8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d072      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a3a      	ldr	r2, [pc, #232]	@ (80064e4 <HAL_DMA_Abort_IT+0x3ac>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d06d      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a39      	ldr	r2, [pc, #228]	@ (80064e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d068      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a37      	ldr	r2, [pc, #220]	@ (80064ec <HAL_DMA_Abort_IT+0x3b4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d063      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a36      	ldr	r2, [pc, #216]	@ (80064f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d05e      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a34      	ldr	r2, [pc, #208]	@ (80064f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d059      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a33      	ldr	r2, [pc, #204]	@ (80064f8 <HAL_DMA_Abort_IT+0x3c0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d054      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a31      	ldr	r2, [pc, #196]	@ (80064fc <HAL_DMA_Abort_IT+0x3c4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d04f      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a30      	ldr	r2, [pc, #192]	@ (8006500 <HAL_DMA_Abort_IT+0x3c8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d04a      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2e      	ldr	r2, [pc, #184]	@ (8006504 <HAL_DMA_Abort_IT+0x3cc>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d045      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a2d      	ldr	r2, [pc, #180]	@ (8006508 <HAL_DMA_Abort_IT+0x3d0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d040      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a2b      	ldr	r2, [pc, #172]	@ (800650c <HAL_DMA_Abort_IT+0x3d4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d03b      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a2a      	ldr	r2, [pc, #168]	@ (8006510 <HAL_DMA_Abort_IT+0x3d8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d036      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a28      	ldr	r2, [pc, #160]	@ (8006514 <HAL_DMA_Abort_IT+0x3dc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d031      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a27      	ldr	r2, [pc, #156]	@ (8006518 <HAL_DMA_Abort_IT+0x3e0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d02c      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a25      	ldr	r2, [pc, #148]	@ (800651c <HAL_DMA_Abort_IT+0x3e4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d027      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a24      	ldr	r2, [pc, #144]	@ (8006520 <HAL_DMA_Abort_IT+0x3e8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d022      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a22      	ldr	r2, [pc, #136]	@ (8006524 <HAL_DMA_Abort_IT+0x3ec>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d01d      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a21      	ldr	r2, [pc, #132]	@ (8006528 <HAL_DMA_Abort_IT+0x3f0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d018      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1f      	ldr	r2, [pc, #124]	@ (800652c <HAL_DMA_Abort_IT+0x3f4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d013      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <HAL_DMA_Abort_IT+0x3f8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00e      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006534 <HAL_DMA_Abort_IT+0x3fc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d009      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006538 <HAL_DMA_Abort_IT+0x400>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d004      	beq.n	80064da <HAL_DMA_Abort_IT+0x3a2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a19      	ldr	r2, [pc, #100]	@ (800653c <HAL_DMA_Abort_IT+0x404>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d132      	bne.n	8006540 <HAL_DMA_Abort_IT+0x408>
 80064da:	2301      	movs	r3, #1
 80064dc:	e031      	b.n	8006542 <HAL_DMA_Abort_IT+0x40a>
 80064de:	bf00      	nop
 80064e0:	40020010 	.word	0x40020010
 80064e4:	40020028 	.word	0x40020028
 80064e8:	40020040 	.word	0x40020040
 80064ec:	40020058 	.word	0x40020058
 80064f0:	40020070 	.word	0x40020070
 80064f4:	40020088 	.word	0x40020088
 80064f8:	400200a0 	.word	0x400200a0
 80064fc:	400200b8 	.word	0x400200b8
 8006500:	40020410 	.word	0x40020410
 8006504:	40020428 	.word	0x40020428
 8006508:	40020440 	.word	0x40020440
 800650c:	40020458 	.word	0x40020458
 8006510:	40020470 	.word	0x40020470
 8006514:	40020488 	.word	0x40020488
 8006518:	400204a0 	.word	0x400204a0
 800651c:	400204b8 	.word	0x400204b8
 8006520:	58025408 	.word	0x58025408
 8006524:	5802541c 	.word	0x5802541c
 8006528:	58025430 	.word	0x58025430
 800652c:	58025444 	.word	0x58025444
 8006530:	58025458 	.word	0x58025458
 8006534:	5802546c 	.word	0x5802546c
 8006538:	58025480 	.word	0x58025480
 800653c:	58025494 	.word	0x58025494
 8006540:	2300      	movs	r3, #0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d028      	beq.n	8006598 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006550:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006554:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800655a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	2201      	movs	r2, #1
 8006566:	409a      	lsls	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006574:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00c      	beq.n	8006598 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006588:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800658c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006596:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop

080065c4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	460b      	mov	r3, r1
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e00a      	b.n	80065f6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80065e0:	7afb      	ldrb	r3, [r7, #11]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	605a      	str	r2, [r3, #4]
      break;
 80065ec:	e002      	b.n	80065f4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	75fb      	strb	r3, [r7, #23]
      break;
 80065f2:	bf00      	nop
  }

  return status;
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e003      	b.n	800661e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800661c:	2300      	movs	r3, #0
  }
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	0c1b      	lsrs	r3, r3, #16
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2201      	movs	r2, #1
 800664a:	fa02 f303 	lsl.w	r3, r2, r3
 800664e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	011a      	lsls	r2, r3, #4
 8006654:	4b0c      	ldr	r3, [pc, #48]	@ (8006688 <HAL_EXTI_IRQHandler+0x5c>)
 8006656:	4413      	add	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4013      	ands	r3, r2
 8006662:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d009      	beq.n	800667e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4798      	blx	r3
    }
  }
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	58000088 	.word	0x58000088

0800668c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b098      	sub	sp, #96	@ 0x60
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006694:	4a84      	ldr	r2, [pc, #528]	@ (80068a8 <HAL_FDCAN_Init+0x21c>)
 8006696:	f107 030c 	add.w	r3, r7, #12
 800669a:	4611      	mov	r1, r2
 800669c:	224c      	movs	r2, #76	@ 0x4c
 800669e:	4618      	mov	r0, r3
 80066a0:	f00b fdef 	bl	8012282 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e1c6      	b.n	8006a3c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a7e      	ldr	r2, [pc, #504]	@ (80068ac <HAL_FDCAN_Init+0x220>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d106      	bne.n	80066c6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fe fbe6 	bl	8004eac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699a      	ldr	r2, [r3, #24]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0210 	bic.w	r2, r2, #16
 80066ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066f0:	f7ff f870 	bl	80057d4 <HAL_GetTick>
 80066f4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80066f6:	e014      	b.n	8006722 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80066f8:	f7ff f86c 	bl	80057d4 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b0a      	cmp	r3, #10
 8006704:	d90d      	bls.n	8006722 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800670c:	f043 0201 	orr.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e18c      	b.n	8006a3c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b08      	cmp	r3, #8
 800672e:	d0e3      	beq.n	80066f8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0201 	orr.w	r2, r2, #1
 800673e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006740:	f7ff f848 	bl	80057d4 <HAL_GetTick>
 8006744:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006746:	e014      	b.n	8006772 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006748:	f7ff f844 	bl	80057d4 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b0a      	cmp	r3, #10
 8006754:	d90d      	bls.n	8006772 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800675c:	f043 0201 	orr.w	r2, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2203      	movs	r2, #3
 800676a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e164      	b.n	8006a3c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0e3      	beq.n	8006748 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0202 	orr.w	r2, r2, #2
 800678e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7c1b      	ldrb	r3, [r3, #16]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d108      	bne.n	80067aa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067a6:	619a      	str	r2, [r3, #24]
 80067a8:	e007      	b.n	80067ba <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	7c5b      	ldrb	r3, [r3, #17]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d108      	bne.n	80067d4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067d0:	619a      	str	r2, [r3, #24]
 80067d2:	e007      	b.n	80067e4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7c9b      	ldrb	r3, [r3, #18]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d108      	bne.n	80067fe <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067fa:	619a      	str	r2, [r3, #24]
 80067fc:	e007      	b.n	800680e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800680c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006832:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0210 	bic.w	r2, r2, #16
 8006842:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d108      	bne.n	800685e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0204 	orr.w	r2, r2, #4
 800685a:	619a      	str	r2, [r3, #24]
 800685c:	e030      	b.n	80068c0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d02c      	beq.n	80068c0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d020      	beq.n	80068b0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800687c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0210 	orr.w	r2, r2, #16
 800688c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	2b03      	cmp	r3, #3
 8006894:	d114      	bne.n	80068c0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f042 0220 	orr.w	r2, r2, #32
 80068a4:	619a      	str	r2, [r3, #24]
 80068a6:	e00b      	b.n	80068c0 <HAL_FDCAN_Init+0x234>
 80068a8:	08014e0c 	.word	0x08014e0c
 80068ac:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0220 	orr.w	r2, r2, #32
 80068be:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	3b01      	subs	r3, #1
 80068ce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068d0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068d8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068e8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068ea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f4:	d115      	bne.n	8006922 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	3b01      	subs	r3, #1
 8006902:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006904:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800690a:	3b01      	subs	r3, #1
 800690c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800690e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	3b01      	subs	r3, #1
 8006918:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800691e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006920:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006948:	4413      	add	r3, r2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d011      	beq.n	8006972 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006956:	f023 0107 	bic.w	r1, r3, #7
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	3360      	adds	r3, #96	@ 0x60
 8006962:	443b      	add	r3, r7
 8006964:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d011      	beq.n	800699e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006982:	f023 0107 	bic.w	r1, r3, #7
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	3360      	adds	r3, #96	@ 0x60
 800698e:	443b      	add	r3, r7
 8006990:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d012      	beq.n	80069cc <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80069ae:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	3360      	adds	r3, #96	@ 0x60
 80069ba:	443b      	add	r3, r7
 80069bc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80069c0:	011a      	lsls	r2, r3, #4
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d012      	beq.n	80069fa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80069dc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	3360      	adds	r3, #96	@ 0x60
 80069e8:	443b      	add	r3, r7
 80069ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80069ee:	021a      	lsls	r2, r3, #8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a11      	ldr	r2, [pc, #68]	@ (8006a44 <HAL_FDCAN_Init+0x3b8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d107      	bne.n	8006a14 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f022 0203 	bic.w	r2, r2, #3
 8006a12:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fd93 	bl	8007558 <FDCAN_CalcultateRamBlockAddresses>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8006a38:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3760      	adds	r7, #96	@ 0x60
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	4000a000 	.word	0x4000a000

08006a48 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d111      	bne.n	8006a80 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e008      	b.n	8006a92 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
  }
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d141      	bne.n	8006b3a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006abe:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006acc:	f043 0220 	orr.w	r2, r3, #32
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e038      	b.n	8006b4c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006ae2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006af0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e026      	b.n	8006b4c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b06:	0c1b      	lsrs	r3, r3, #16
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fea5 	bl	8007864 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2101      	movs	r1, #1
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	fa01 f202 	lsl.w	r2, r1, r2
 8006b26:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e008      	b.n	8006b4c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b40:	f043 0208 	orr.w	r2, r3, #8
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b08b      	sub	sp, #44	@ 0x2c
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b6c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006b6e:	7efb      	ldrb	r3, [r7, #27]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	f040 8149 	bne.w	8006e08 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b40      	cmp	r3, #64	@ 0x40
 8006b7a:	d14c      	bne.n	8006c16 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006b84:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d109      	bne.n	8006ba0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b92:	f043 0220 	orr.w	r2, r3, #32
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e13c      	b.n	8006e1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d109      	bne.n	8006bc4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e12a      	b.n	8006e1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bd4:	d10a      	bne.n	8006bec <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006be2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006be6:	d101      	bne.n	8006bec <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006be8:	2301      	movs	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006bf4:	0a1b      	lsrs	r3, r3, #8
 8006bf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c08:	69f9      	ldr	r1, [r7, #28]
 8006c0a:	fb01 f303 	mul.w	r3, r1, r3
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4413      	add	r3, r2
 8006c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c14:	e068      	b.n	8006ce8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b41      	cmp	r3, #65	@ 0x41
 8006c1a:	d14c      	bne.n	8006cb6 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c24:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c32:	f043 0220 	orr.w	r2, r3, #32
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e0ec      	b.n	8006e1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d109      	bne.n	8006c64 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e0da      	b.n	8006e1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c74:	d10a      	bne.n	8006c8c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c86:	d101      	bne.n	8006c8c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006c94:	0a1b      	lsrs	r3, r3, #8
 8006c96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ca8:	69f9      	ldr	r1, [r7, #28]
 8006caa:	fb01 f303 	mul.w	r3, r1, r3
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cb4:	e018      	b.n	8006ce8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d309      	bcc.n	8006cd4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006cc6:	f043 0220 	orr.w	r2, r3, #32
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0a2      	b.n	8006e1a <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	fb01 f303 	mul.w	r3, r1, r3
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d107      	bne.n	8006d0c <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	0c9b      	lsrs	r3, r3, #18
 8006d02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e005      	b.n	8006d18 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	3304      	adds	r3, #4
 8006d34:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	f003 020f 	and.w	r2, r3, #15
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	0e1b      	lsrs	r3, r3, #24
 8006d6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	0fda      	lsrs	r2, r3, #31
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	3304      	adds	r3, #4
 8006d82:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	623b      	str	r3, [r7, #32]
 8006d8c:	e00a      	b.n	8006da4 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	441a      	add	r2, r3
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	440b      	add	r3, r1
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	3301      	adds	r3, #1
 8006da2:	623b      	str	r3, [r7, #32]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e28 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8006daa:	5cd3      	ldrb	r3, [r2, r3]
 8006dac:	461a      	mov	r2, r3
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d3ec      	bcc.n	8006d8e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b40      	cmp	r3, #64	@ 0x40
 8006db8:	d105      	bne.n	8006dc6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8006dc4:	e01e      	b.n	8006e04 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b41      	cmp	r3, #65	@ 0x41
 8006dca:	d105      	bne.n	8006dd8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8006dd6:	e015      	b.n	8006e04 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b1f      	cmp	r3, #31
 8006ddc:	d808      	bhi.n	8006df0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2101      	movs	r1, #1
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	fa01 f202 	lsl.w	r2, r1, r2
 8006dea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8006dee:	e009      	b.n	8006e04 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 021f 	and.w	r2, r3, #31
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8006e00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	e008      	b.n	8006e1a <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e0e:	f043 0208 	orr.w	r2, r3, #8
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	372c      	adds	r7, #44	@ 0x2c
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	08014ed4 	.word	0x08014ed4

08006e2c <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e40:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8006e42:	68fb      	ldr	r3, [r7, #12]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006e62:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d002      	beq.n	8006e70 <HAL_FDCAN_ActivateNotification+0x20>
 8006e6a:	7dfb      	ldrb	r3, [r7, #23]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d155      	bne.n	8006f1c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0201 	orr.w	r2, r2, #1
 8006e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e8e:	e014      	b.n	8006eba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d108      	bne.n	8006eb2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0202 	orr.w	r2, r2, #2
 8006eae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006eb0:	e003      	b.n	8006eba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	4b0f      	ldr	r3, [pc, #60]	@ (8006f3c <HAL_FDCAN_ActivateNotification+0xec>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	430b      	orrs	r3, r1
 8006f08:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f40 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006f0c:	695a      	ldr	r2, [r3, #20]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	0f9b      	lsrs	r3, r3, #30
 8006f12:	490b      	ldr	r1, [pc, #44]	@ (8006f40 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e008      	b.n	8006f2e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f22:	f043 0202 	orr.w	r2, r3, #2
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
  }
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	3fcfffff 	.word	0x3fcfffff
 8006f40:	4000a800 	.word	0x4000a800

08006f44 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b096      	sub	sp, #88	@ 0x58
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006f4c:	4b9a      	ldr	r3, [pc, #616]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	079b      	lsls	r3, r3, #30
 8006f52:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006f54:	4b98      	ldr	r3, [pc, #608]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	079b      	lsls	r3, r3, #30
 8006f5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f66:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006f6a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f74:	4013      	ands	r3, r2
 8006f76:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fae:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8006fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fc6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8006fca:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fe6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d010      	beq.n	8007016 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	0a1b      	lsrs	r3, r3, #8
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007008:	651a      	str	r2, [r3, #80]	@ 0x50
 800700a:	4b6b      	ldr	r3, [pc, #428]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 800700c:	2200      	movs	r2, #0
 800700e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fa54 	bl	80074be <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007018:	0a9b      	lsrs	r3, r3, #10
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01d      	beq.n	800705e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007024:	0a9b      	lsrs	r3, r3, #10
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d017      	beq.n	800705e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007042:	4013      	ands	r3, r2
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800704e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007050:	4b59      	ldr	r3, [pc, #356]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 8007052:	2200      	movs	r2, #0
 8007054:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007056:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fa07 	bl	800746c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800705e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00d      	beq.n	8007080 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800706a:	4b54      	ldr	r3, [pc, #336]	@ (80071bc <HAL_FDCAN_IRQHandler+0x278>)
 800706c:	400b      	ands	r3, r1
 800706e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007070:	4a51      	ldr	r2, [pc, #324]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 8007072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007074:	0f9b      	lsrs	r3, r3, #30
 8007076:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007078:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f9c0 	bl	8007400 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00d      	beq.n	80070a2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800708c:	4b4b      	ldr	r3, [pc, #300]	@ (80071bc <HAL_FDCAN_IRQHandler+0x278>)
 800708e:	400b      	ands	r3, r1
 8007090:	6513      	str	r3, [r2, #80]	@ 0x50
 8007092:	4a49      	ldr	r2, [pc, #292]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 8007094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007096:	0f9b      	lsrs	r3, r3, #30
 8007098:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800709a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f9ba 	bl	8007416 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80070a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80070ae:	4b43      	ldr	r3, [pc, #268]	@ (80071bc <HAL_FDCAN_IRQHandler+0x278>)
 80070b0:	400b      	ands	r3, r1
 80070b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80070b4:	4a40      	ldr	r2, [pc, #256]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 80070b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070b8:	0f9b      	lsrs	r3, r3, #30
 80070ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80070bc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fa f86e 	bl	80011a0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80070c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80070d0:	4b3a      	ldr	r3, [pc, #232]	@ (80071bc <HAL_FDCAN_IRQHandler+0x278>)
 80070d2:	400b      	ands	r3, r1
 80070d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80070d6:	4a38      	ldr	r2, [pc, #224]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 80070d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070da:	0f9b      	lsrs	r3, r3, #30
 80070dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80070de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f9a3 	bl	800742c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80070e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070e8:	0adb      	lsrs	r3, r3, #11
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d010      	beq.n	8007114 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	0adb      	lsrs	r3, r3, #11
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007106:	651a      	str	r2, [r3, #80]	@ 0x50
 8007108:	4b2b      	ldr	r3, [pc, #172]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 800710a:	2200      	movs	r2, #0
 800710c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f997 	bl	8007442 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8007114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007116:	0a5b      	lsrs	r3, r3, #9
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d01d      	beq.n	800715c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007122:	0a5b      	lsrs	r3, r3, #9
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d017      	beq.n	800715c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007134:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800713e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007140:	4013      	ands	r3, r2
 8007142:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800714c:	651a      	str	r2, [r3, #80]	@ 0x50
 800714e:	4b1a      	ldr	r3, [pc, #104]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 8007150:	2200      	movs	r2, #0
 8007152:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007154:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f97d 	bl	8007456 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800715c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800715e:	0cdb      	lsrs	r3, r3, #19
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d010      	beq.n	800718a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	0cdb      	lsrs	r3, r3, #19
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800717c:	651a      	str	r2, [r3, #80]	@ 0x50
 800717e:	4b0e      	ldr	r3, [pc, #56]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 8007180:	2200      	movs	r2, #0
 8007182:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f97c 	bl	8007482 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800718a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d016      	beq.n	80071c4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007198:	0c1b      	lsrs	r3, r3, #16
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d010      	beq.n	80071c4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80071aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80071ac:	4b02      	ldr	r3, [pc, #8]	@ (80071b8 <HAL_FDCAN_IRQHandler+0x274>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	e004      	b.n	80071c0 <HAL_FDCAN_IRQHandler+0x27c>
 80071b6:	bf00      	nop
 80071b8:	4000a800 	.word	0x4000a800
 80071bc:	3fcfffff 	.word	0x3fcfffff
 80071c0:	f000 f969 	bl	8007496 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80071c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c6:	0c9b      	lsrs	r3, r3, #18
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d010      	beq.n	80071f2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	0c9b      	lsrs	r3, r3, #18
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80071e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80071e6:	4b83      	ldr	r3, [pc, #524]	@ (80073f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f95c 	bl	80074aa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80071f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f4:	0c5b      	lsrs	r3, r3, #17
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d015      	beq.n	800722a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80071fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007200:	0c5b      	lsrs	r3, r3, #17
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00f      	beq.n	800722a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007212:	651a      	str	r2, [r3, #80]	@ 0x50
 8007214:	4b77      	ldr	r3, [pc, #476]	@ (80073f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007216:	2200      	movs	r2, #0
 8007218:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007220:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800722a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00d      	beq.n	800724c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007236:	4b70      	ldr	r3, [pc, #448]	@ (80073f8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007238:	400b      	ands	r3, r1
 800723a:	6513      	str	r3, [r2, #80]	@ 0x50
 800723c:	4a6d      	ldr	r2, [pc, #436]	@ (80073f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800723e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007240:	0f9b      	lsrs	r3, r3, #30
 8007242:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007244:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f94d 	bl	80074e6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800724c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800724e:	2b00      	cmp	r3, #0
 8007250:	d011      	beq.n	8007276 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007258:	4b67      	ldr	r3, [pc, #412]	@ (80073f8 <HAL_FDCAN_IRQHandler+0x4b4>)
 800725a:	400b      	ands	r3, r1
 800725c:	6513      	str	r3, [r2, #80]	@ 0x50
 800725e:	4a65      	ldr	r2, [pc, #404]	@ (80073f4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007262:	0f9b      	lsrs	r3, r3, #30
 8007264:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800726c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800726e:	431a      	orrs	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a60      	ldr	r2, [pc, #384]	@ (80073fc <HAL_FDCAN_IRQHandler+0x4b8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	f040 80ac 	bne.w	80073da <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80a4 	beq.w	80073da <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a6:	4013      	ands	r3, r2
 80072a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072be:	4013      	ands	r3, r2
 80072c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d6:	4013      	ands	r3, r2
 80072d8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80072e4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	4013      	ands	r3, r2
 80072f0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80072fc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	4013      	ands	r3, r2
 8007308:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007326:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007328:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f8e6 	bl	80074fc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800733c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800733e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f8e6 	bl	8007512 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	099b      	lsrs	r3, r3, #6
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d01a      	beq.n	8007388 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	099b      	lsrs	r3, r3, #6
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d014      	beq.n	8007388 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	b29b      	uxth	r3, r3
 8007368:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007374:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2240      	movs	r2, #64	@ 0x40
 800737c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	6939      	ldr	r1, [r7, #16]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f8d0 	bl	8007528 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007394:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007396:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f8d1 	bl	8007540 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	6a3a      	ldr	r2, [r7, #32]
 80073aa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f874 	bl	80074d2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80073ea:	bf00      	nop
 80073ec:	3758      	adds	r7, #88	@ 0x58
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	4000a800 	.word	0x4000a800
 80073f8:	3fcfffff 	.word	0x3fcfffff
 80073fc:	4000a000 	.word	0x4000a000

08007400 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007534:	bf00      	nop
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007564:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800756e:	4ba7      	ldr	r3, [pc, #668]	@ (800780c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007570:	4013      	ands	r3, r2
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	0091      	lsls	r1, r2, #2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	430b      	orrs	r3, r1
 800757c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007588:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007590:	041a      	lsls	r2, r3, #16
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	4413      	add	r3, r2
 80075a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80075ae:	4b97      	ldr	r3, [pc, #604]	@ (800780c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	0091      	lsls	r1, r2, #2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	430b      	orrs	r3, r1
 80075bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d0:	041a      	lsls	r2, r3, #16
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	4413      	add	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80075f0:	4b86      	ldr	r3, [pc, #536]	@ (800780c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	0091      	lsls	r1, r2, #2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	430b      	orrs	r3, r1
 80075fe:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800760a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007612:	041a      	lsls	r2, r3, #16
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	4413      	add	r3, r2
 800762e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007638:	4b74      	ldr	r3, [pc, #464]	@ (800780c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800763a:	4013      	ands	r3, r2
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	0091      	lsls	r1, r2, #2
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	430b      	orrs	r3, r1
 8007646:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007652:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800765a:	041a      	lsls	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800766e:	fb02 f303 	mul.w	r3, r2, r3
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007680:	4b62      	ldr	r3, [pc, #392]	@ (800780c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007682:	4013      	ands	r3, r2
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	0091      	lsls	r1, r2, #2
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	6812      	ldr	r2, [r2, #0]
 800768c:	430b      	orrs	r3, r1
 800768e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800769a:	fb02 f303 	mul.w	r3, r2, r3
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80076ac:	4b57      	ldr	r3, [pc, #348]	@ (800780c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076ae:	4013      	ands	r3, r2
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	0091      	lsls	r1, r2, #2
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	430b      	orrs	r3, r1
 80076ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076c6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ce:	041a      	lsls	r2, r3, #16
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	4413      	add	r3, r2
 80076e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80076ee:	4b47      	ldr	r3, [pc, #284]	@ (800780c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	0091      	lsls	r1, r2, #2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	430b      	orrs	r3, r1
 80076fc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007708:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007710:	041a      	lsls	r2, r3, #16
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007724:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800772c:	061a      	lsls	r2, r3, #24
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800773c:	4b34      	ldr	r3, [pc, #208]	@ (8007810 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800773e:	4413      	add	r3, r2
 8007740:	009a      	lsls	r2, r3, #2
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	441a      	add	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007772:	fb01 f303 	mul.w	r3, r1, r3
 8007776:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007778:	441a      	add	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007790:	441a      	add	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800779e:	6879      	ldr	r1, [r7, #4]
 80077a0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80077a8:	441a      	add	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ba:	00db      	lsls	r3, r3, #3
 80077bc:	441a      	add	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ce:	6879      	ldr	r1, [r7, #4]
 80077d0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80077d2:	fb01 f303 	mul.w	r3, r1, r3
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	441a      	add	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80077f4:	441a      	add	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007802:	4a04      	ldr	r2, [pc, #16]	@ (8007814 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d915      	bls.n	8007834 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007808:	e006      	b.n	8007818 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800780a:	bf00      	nop
 800780c:	ffff0003 	.word	0xffff0003
 8007810:	10002b00 	.word	0x10002b00
 8007814:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800781e:	f043 0220 	orr.w	r2, r3, #32
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2203      	movs	r2, #3
 800782c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e010      	b.n	8007856 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	e005      	b.n	8007848 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3304      	adds	r3, #4
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	429a      	cmp	r2, r3
 8007852:	d3f3      	bcc.n	800783c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop

08007864 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007864:	b480      	push	{r7}
 8007866:	b089      	sub	sp, #36	@ 0x24
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007882:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800788a:	4313      	orrs	r3, r2
 800788c:	61fb      	str	r3, [r7, #28]
 800788e:	e00a      	b.n	80078a6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007898:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800789e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80078a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078a4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80078b0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80078b6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80078bc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80078c4:	4313      	orrs	r3, r2
 80078c6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	fb01 f303 	mul.w	r3, r1, r3
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	3304      	adds	r3, #4
 80078e8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	3304      	adds	r3, #4
 80078f4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e020      	b.n	800793e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	3303      	adds	r3, #3
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	3302      	adds	r3, #2
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	440b      	add	r3, r1
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007914:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	3301      	adds	r3, #1
 800791a:	6879      	ldr	r1, [r7, #4]
 800791c:	440b      	add	r3, r1
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007922:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007924:	6879      	ldr	r1, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	440a      	add	r2, r1
 800792a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800792c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	3304      	adds	r3, #4
 8007936:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	3304      	adds	r3, #4
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	4a06      	ldr	r2, [pc, #24]	@ (800795c <FDCAN_CopyMessageToRAM+0xf8>)
 8007944:	5cd3      	ldrb	r3, [r2, r3]
 8007946:	461a      	mov	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	4293      	cmp	r3, r2
 800794c:	d3d6      	bcc.n	80078fc <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	3724      	adds	r7, #36	@ 0x24
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	08014ed4 	.word	0x08014ed4

08007960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007960:	b480      	push	{r7}
 8007962:	b089      	sub	sp, #36	@ 0x24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800796e:	4b89      	ldr	r3, [pc, #548]	@ (8007b94 <HAL_GPIO_Init+0x234>)
 8007970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007972:	e194      	b.n	8007c9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	2101      	movs	r1, #1
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	fa01 f303 	lsl.w	r3, r1, r3
 8007980:	4013      	ands	r3, r2
 8007982:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8186 	beq.w	8007c98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f003 0303 	and.w	r3, r3, #3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d005      	beq.n	80079a4 <HAL_GPIO_Init+0x44>
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 0303 	and.w	r3, r3, #3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d130      	bne.n	8007a06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	2203      	movs	r2, #3
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	43db      	mvns	r3, r3
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	4013      	ands	r3, r2
 80079ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	fa02 f303 	lsl.w	r3, r2, r3
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079da:	2201      	movs	r2, #1
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	fa02 f303 	lsl.w	r3, r2, r3
 80079e2:	43db      	mvns	r3, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	4013      	ands	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	091b      	lsrs	r3, r3, #4
 80079f0:	f003 0201 	and.w	r2, r3, #1
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	fa02 f303 	lsl.w	r3, r2, r3
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d017      	beq.n	8007a42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	43db      	mvns	r3, r3
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	4013      	ands	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	fa02 f303 	lsl.w	r3, r2, r3
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d123      	bne.n	8007a96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	08da      	lsrs	r2, r3, #3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3208      	adds	r2, #8
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	220f      	movs	r2, #15
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	43db      	mvns	r3, r3
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	08da      	lsrs	r2, r3, #3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3208      	adds	r2, #8
 8007a90:	69b9      	ldr	r1, [r7, #24]
 8007a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	43db      	mvns	r3, r3
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f003 0203 	and.w	r2, r3, #3
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	005b      	lsls	r3, r3, #1
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 80e0 	beq.w	8007c98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8007b98 <HAL_GPIO_Init+0x238>)
 8007ada:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ade:	4a2e      	ldr	r2, [pc, #184]	@ (8007b98 <HAL_GPIO_Init+0x238>)
 8007ae0:	f043 0302 	orr.w	r3, r3, #2
 8007ae4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8007b98 <HAL_GPIO_Init+0x238>)
 8007aea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007af6:	4a29      	ldr	r2, [pc, #164]	@ (8007b9c <HAL_GPIO_Init+0x23c>)
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	089b      	lsrs	r3, r3, #2
 8007afc:	3302      	adds	r3, #2
 8007afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	220f      	movs	r2, #15
 8007b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b12:	43db      	mvns	r3, r3
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	4013      	ands	r3, r2
 8007b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a20      	ldr	r2, [pc, #128]	@ (8007ba0 <HAL_GPIO_Init+0x240>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d052      	beq.n	8007bc8 <HAL_GPIO_Init+0x268>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba4 <HAL_GPIO_Init+0x244>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d031      	beq.n	8007b8e <HAL_GPIO_Init+0x22e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba8 <HAL_GPIO_Init+0x248>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d02b      	beq.n	8007b8a <HAL_GPIO_Init+0x22a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1d      	ldr	r2, [pc, #116]	@ (8007bac <HAL_GPIO_Init+0x24c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d025      	beq.n	8007b86 <HAL_GPIO_Init+0x226>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb0 <HAL_GPIO_Init+0x250>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d01f      	beq.n	8007b82 <HAL_GPIO_Init+0x222>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb4 <HAL_GPIO_Init+0x254>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d019      	beq.n	8007b7e <HAL_GPIO_Init+0x21e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007bb8 <HAL_GPIO_Init+0x258>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d013      	beq.n	8007b7a <HAL_GPIO_Init+0x21a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a19      	ldr	r2, [pc, #100]	@ (8007bbc <HAL_GPIO_Init+0x25c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00d      	beq.n	8007b76 <HAL_GPIO_Init+0x216>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a18      	ldr	r2, [pc, #96]	@ (8007bc0 <HAL_GPIO_Init+0x260>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d007      	beq.n	8007b72 <HAL_GPIO_Init+0x212>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a17      	ldr	r2, [pc, #92]	@ (8007bc4 <HAL_GPIO_Init+0x264>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d101      	bne.n	8007b6e <HAL_GPIO_Init+0x20e>
 8007b6a:	2309      	movs	r3, #9
 8007b6c:	e02d      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b6e:	230a      	movs	r3, #10
 8007b70:	e02b      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b72:	2308      	movs	r3, #8
 8007b74:	e029      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b76:	2307      	movs	r3, #7
 8007b78:	e027      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b7a:	2306      	movs	r3, #6
 8007b7c:	e025      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b7e:	2305      	movs	r3, #5
 8007b80:	e023      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b82:	2304      	movs	r3, #4
 8007b84:	e021      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b86:	2303      	movs	r3, #3
 8007b88:	e01f      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e01d      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e01b      	b.n	8007bca <HAL_GPIO_Init+0x26a>
 8007b92:	bf00      	nop
 8007b94:	58000080 	.word	0x58000080
 8007b98:	58024400 	.word	0x58024400
 8007b9c:	58000400 	.word	0x58000400
 8007ba0:	58020000 	.word	0x58020000
 8007ba4:	58020400 	.word	0x58020400
 8007ba8:	58020800 	.word	0x58020800
 8007bac:	58020c00 	.word	0x58020c00
 8007bb0:	58021000 	.word	0x58021000
 8007bb4:	58021400 	.word	0x58021400
 8007bb8:	58021800 	.word	0x58021800
 8007bbc:	58021c00 	.word	0x58021c00
 8007bc0:	58022000 	.word	0x58022000
 8007bc4:	58022400 	.word	0x58022400
 8007bc8:	2300      	movs	r3, #0
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	f002 0203 	and.w	r2, r2, #3
 8007bd0:	0092      	lsls	r2, r2, #2
 8007bd2:	4093      	lsls	r3, r2
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bda:	4938      	ldr	r1, [pc, #224]	@ (8007cbc <HAL_GPIO_Init+0x35c>)
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	089b      	lsrs	r3, r3, #2
 8007be0:	3302      	adds	r3, #2
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	43db      	mvns	r3, r3
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	4013      	ands	r3, r2
 8007c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	43db      	mvns	r3, r3
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	4013      	ands	r3, r2
 8007c52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	43db      	mvns	r3, r3
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f47f ae63 	bne.w	8007974 <HAL_GPIO_Init+0x14>
  }
}
 8007cae:	bf00      	nop
 8007cb0:	bf00      	nop
 8007cb2:	3724      	adds	r7, #36	@ 0x24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	58000400 	.word	0x58000400

08007cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	807b      	strh	r3, [r7, #2]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cd0:	787b      	ldrb	r3, [r7, #1]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cd6:	887a      	ldrh	r2, [r7, #2]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007cdc:	e003      	b.n	8007ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007cde:	887b      	ldrh	r3, [r7, #2]
 8007ce0:	041a      	lsls	r2, r3, #16
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	619a      	str	r2, [r3, #24]
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b085      	sub	sp, #20
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d04:	887a      	ldrh	r2, [r7, #2]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	041a      	lsls	r2, r3, #16
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	43d9      	mvns	r1, r3
 8007d10:	887b      	ldrh	r3, [r7, #2]
 8007d12:	400b      	ands	r3, r1
 8007d14:	431a      	orrs	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	619a      	str	r2, [r3, #24]
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d30:	4b19      	ldr	r3, [pc, #100]	@ (8007d98 <HAL_PWREx_ConfigSupply+0x70>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d00a      	beq.n	8007d52 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d3c:	4b16      	ldr	r3, [pc, #88]	@ (8007d98 <HAL_PWREx_ConfigSupply+0x70>)
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d001      	beq.n	8007d4e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e01f      	b.n	8007d8e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e01d      	b.n	8007d8e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d52:	4b11      	ldr	r3, [pc, #68]	@ (8007d98 <HAL_PWREx_ConfigSupply+0x70>)
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f023 0207 	bic.w	r2, r3, #7
 8007d5a:	490f      	ldr	r1, [pc, #60]	@ (8007d98 <HAL_PWREx_ConfigSupply+0x70>)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d62:	f7fd fd37 	bl	80057d4 <HAL_GetTick>
 8007d66:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d68:	e009      	b.n	8007d7e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d6a:	f7fd fd33 	bl	80057d4 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d78:	d901      	bls.n	8007d7e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e007      	b.n	8007d8e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d7e:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <HAL_PWREx_ConfigSupply+0x70>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d8a:	d1ee      	bne.n	8007d6a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	58024800 	.word	0x58024800

08007d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08c      	sub	sp, #48	@ 0x30
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d102      	bne.n	8007db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f000 bc48 	b.w	8008640 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f000 8088 	beq.w	8007ece <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dbe:	4b99      	ldr	r3, [pc, #612]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dc8:	4b96      	ldr	r3, [pc, #600]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd0:	2b10      	cmp	r3, #16
 8007dd2:	d007      	beq.n	8007de4 <HAL_RCC_OscConfig+0x48>
 8007dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd6:	2b18      	cmp	r3, #24
 8007dd8:	d111      	bne.n	8007dfe <HAL_RCC_OscConfig+0x62>
 8007dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d10c      	bne.n	8007dfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007de4:	4b8f      	ldr	r3, [pc, #572]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d06d      	beq.n	8007ecc <HAL_RCC_OscConfig+0x130>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d169      	bne.n	8007ecc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f000 bc21 	b.w	8008640 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e06:	d106      	bne.n	8007e16 <HAL_RCC_OscConfig+0x7a>
 8007e08:	4b86      	ldr	r3, [pc, #536]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a85      	ldr	r2, [pc, #532]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	e02e      	b.n	8007e74 <HAL_RCC_OscConfig+0xd8>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10c      	bne.n	8007e38 <HAL_RCC_OscConfig+0x9c>
 8007e1e:	4b81      	ldr	r3, [pc, #516]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a80      	ldr	r2, [pc, #512]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	4b7e      	ldr	r3, [pc, #504]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a7d      	ldr	r2, [pc, #500]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	e01d      	b.n	8007e74 <HAL_RCC_OscConfig+0xd8>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e40:	d10c      	bne.n	8007e5c <HAL_RCC_OscConfig+0xc0>
 8007e42:	4b78      	ldr	r3, [pc, #480]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a77      	ldr	r2, [pc, #476]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	4b75      	ldr	r3, [pc, #468]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a74      	ldr	r2, [pc, #464]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e00b      	b.n	8007e74 <HAL_RCC_OscConfig+0xd8>
 8007e5c:	4b71      	ldr	r3, [pc, #452]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a70      	ldr	r2, [pc, #448]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	4b6e      	ldr	r3, [pc, #440]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a6d      	ldr	r2, [pc, #436]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d013      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7c:	f7fd fcaa 	bl	80057d4 <HAL_GetTick>
 8007e80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e84:	f7fd fca6 	bl	80057d4 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b64      	cmp	r3, #100	@ 0x64
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e3d4      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e96:	4b63      	ldr	r3, [pc, #396]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0f0      	beq.n	8007e84 <HAL_RCC_OscConfig+0xe8>
 8007ea2:	e014      	b.n	8007ece <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea4:	f7fd fc96 	bl	80057d4 <HAL_GetTick>
 8007ea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007eaa:	e008      	b.n	8007ebe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eac:	f7fd fc92 	bl	80057d4 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b64      	cmp	r3, #100	@ 0x64
 8007eb8:	d901      	bls.n	8007ebe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e3c0      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ebe:	4b59      	ldr	r3, [pc, #356]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1f0      	bne.n	8007eac <HAL_RCC_OscConfig+0x110>
 8007eca:	e000      	b.n	8007ece <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 80ca 	beq.w	8008070 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007edc:	4b51      	ldr	r3, [pc, #324]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ee4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <HAL_RCC_OscConfig+0x166>
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	2b18      	cmp	r3, #24
 8007ef6:	d156      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x20a>
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d151      	bne.n	8007fa6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f02:	4b48      	ldr	r3, [pc, #288]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_RCC_OscConfig+0x17e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e392      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f1a:	4b42      	ldr	r3, [pc, #264]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f023 0219 	bic.w	r2, r3, #25
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	493f      	ldr	r1, [pc, #252]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7fd fc52 	bl	80057d4 <HAL_GetTick>
 8007f30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f34:	f7fd fc4e 	bl	80057d4 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e37c      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f46:	4b37      	ldr	r3, [pc, #220]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0304 	and.w	r3, r3, #4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f52:	f7fd fc6f 	bl	8005834 <HAL_GetREVID>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d817      	bhi.n	8007f90 <HAL_RCC_OscConfig+0x1f4>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	2b40      	cmp	r3, #64	@ 0x40
 8007f66:	d108      	bne.n	8007f7a <HAL_RCC_OscConfig+0x1de>
 8007f68:	4b2e      	ldr	r3, [pc, #184]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007f70:	4a2c      	ldr	r2, [pc, #176]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f76:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f78:	e07a      	b.n	8008070 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	031b      	lsls	r3, r3, #12
 8007f88:	4926      	ldr	r1, [pc, #152]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f8e:	e06f      	b.n	8008070 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f90:	4b24      	ldr	r3, [pc, #144]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	061b      	lsls	r3, r3, #24
 8007f9e:	4921      	ldr	r1, [pc, #132]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fa4:	e064      	b.n	8008070 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d047      	beq.n	800803e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fae:	4b1d      	ldr	r3, [pc, #116]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 0219 	bic.w	r2, r3, #25
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	491a      	ldr	r1, [pc, #104]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc0:	f7fd fc08 	bl	80057d4 <HAL_GetTick>
 8007fc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fc8:	f7fd fc04 	bl	80057d4 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e332      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fda:	4b12      	ldr	r3, [pc, #72]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f0      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe6:	f7fd fc25 	bl	8005834 <HAL_GetREVID>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d819      	bhi.n	8008028 <HAL_RCC_OscConfig+0x28c>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b40      	cmp	r3, #64	@ 0x40
 8007ffa:	d108      	bne.n	800800e <HAL_RCC_OscConfig+0x272>
 8007ffc:	4b09      	ldr	r3, [pc, #36]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008004:	4a07      	ldr	r2, [pc, #28]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8008006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800800a:	6053      	str	r3, [r2, #4]
 800800c:	e030      	b.n	8008070 <HAL_RCC_OscConfig+0x2d4>
 800800e:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	031b      	lsls	r3, r3, #12
 800801c:	4901      	ldr	r1, [pc, #4]	@ (8008024 <HAL_RCC_OscConfig+0x288>)
 800801e:	4313      	orrs	r3, r2
 8008020:	604b      	str	r3, [r1, #4]
 8008022:	e025      	b.n	8008070 <HAL_RCC_OscConfig+0x2d4>
 8008024:	58024400 	.word	0x58024400
 8008028:	4b9a      	ldr	r3, [pc, #616]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	061b      	lsls	r3, r3, #24
 8008036:	4997      	ldr	r1, [pc, #604]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008038:	4313      	orrs	r3, r2
 800803a:	604b      	str	r3, [r1, #4]
 800803c:	e018      	b.n	8008070 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800803e:	4b95      	ldr	r3, [pc, #596]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a94      	ldr	r2, [pc, #592]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008044:	f023 0301 	bic.w	r3, r3, #1
 8008048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804a:	f7fd fbc3 	bl	80057d4 <HAL_GetTick>
 800804e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008052:	f7fd fbbf 	bl	80057d4 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e2ed      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008064:	4b8b      	ldr	r3, [pc, #556]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1f0      	bne.n	8008052 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 80a9 	beq.w	80081d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800807e:	4b85      	ldr	r3, [pc, #532]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008086:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008088:	4b82      	ldr	r3, [pc, #520]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800808a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b08      	cmp	r3, #8
 8008092:	d007      	beq.n	80080a4 <HAL_RCC_OscConfig+0x308>
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b18      	cmp	r3, #24
 8008098:	d13a      	bne.n	8008110 <HAL_RCC_OscConfig+0x374>
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d135      	bne.n	8008110 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080a4:	4b7b      	ldr	r3, [pc, #492]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <HAL_RCC_OscConfig+0x320>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	2b80      	cmp	r3, #128	@ 0x80
 80080b6:	d001      	beq.n	80080bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e2c1      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080bc:	f7fd fbba 	bl	8005834 <HAL_GetREVID>
 80080c0:	4603      	mov	r3, r0
 80080c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d817      	bhi.n	80080fa <HAL_RCC_OscConfig+0x35e>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d108      	bne.n	80080e4 <HAL_RCC_OscConfig+0x348>
 80080d2:	4b70      	ldr	r3, [pc, #448]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80080da:	4a6e      	ldr	r2, [pc, #440]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80080dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080e2:	e075      	b.n	80081d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080e4:	4b6b      	ldr	r3, [pc, #428]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	069b      	lsls	r3, r3, #26
 80080f2:	4968      	ldr	r1, [pc, #416]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080f8:	e06a      	b.n	80081d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080fa:	4b66      	ldr	r3, [pc, #408]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	061b      	lsls	r3, r3, #24
 8008108:	4962      	ldr	r1, [pc, #392]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800810a:	4313      	orrs	r3, r2
 800810c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800810e:	e05f      	b.n	80081d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d042      	beq.n	800819e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008118:	4b5e      	ldr	r3, [pc, #376]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a5d      	ldr	r2, [pc, #372]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800811e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008124:	f7fd fb56 	bl	80057d4 <HAL_GetTick>
 8008128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800812c:	f7fd fb52 	bl	80057d4 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e280      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800813e:	4b55      	ldr	r3, [pc, #340]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0f0      	beq.n	800812c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800814a:	f7fd fb73 	bl	8005834 <HAL_GetREVID>
 800814e:	4603      	mov	r3, r0
 8008150:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008154:	4293      	cmp	r3, r2
 8008156:	d817      	bhi.n	8008188 <HAL_RCC_OscConfig+0x3ec>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	2b20      	cmp	r3, #32
 800815e:	d108      	bne.n	8008172 <HAL_RCC_OscConfig+0x3d6>
 8008160:	4b4c      	ldr	r3, [pc, #304]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008168:	4a4a      	ldr	r2, [pc, #296]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800816a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800816e:	6053      	str	r3, [r2, #4]
 8008170:	e02e      	b.n	80081d0 <HAL_RCC_OscConfig+0x434>
 8008172:	4b48      	ldr	r3, [pc, #288]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	069b      	lsls	r3, r3, #26
 8008180:	4944      	ldr	r1, [pc, #272]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008182:	4313      	orrs	r3, r2
 8008184:	604b      	str	r3, [r1, #4]
 8008186:	e023      	b.n	80081d0 <HAL_RCC_OscConfig+0x434>
 8008188:	4b42      	ldr	r3, [pc, #264]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	061b      	lsls	r3, r3, #24
 8008196:	493f      	ldr	r1, [pc, #252]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008198:	4313      	orrs	r3, r2
 800819a:	60cb      	str	r3, [r1, #12]
 800819c:	e018      	b.n	80081d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800819e:	4b3d      	ldr	r3, [pc, #244]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a3c      	ldr	r2, [pc, #240]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80081a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081aa:	f7fd fb13 	bl	80057d4 <HAL_GetTick>
 80081ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081b0:	e008      	b.n	80081c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80081b2:	f7fd fb0f 	bl	80057d4 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e23d      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081c4:	4b33      	ldr	r3, [pc, #204]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1f0      	bne.n	80081b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0308 	and.w	r3, r3, #8
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d036      	beq.n	800824a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d019      	beq.n	8008218 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80081e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f0:	f7fd faf0 	bl	80057d4 <HAL_GetTick>
 80081f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081f6:	e008      	b.n	800820a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081f8:	f7fd faec 	bl	80057d4 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e21a      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800820a:	4b22      	ldr	r3, [pc, #136]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800820c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0f0      	beq.n	80081f8 <HAL_RCC_OscConfig+0x45c>
 8008216:	e018      	b.n	800824a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008218:	4b1e      	ldr	r3, [pc, #120]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800821a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800821c:	4a1d      	ldr	r2, [pc, #116]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 800821e:	f023 0301 	bic.w	r3, r3, #1
 8008222:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008224:	f7fd fad6 	bl	80057d4 <HAL_GetTick>
 8008228:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800822c:	f7fd fad2 	bl	80057d4 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b02      	cmp	r3, #2
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e200      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800823e:	4b15      	ldr	r3, [pc, #84]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f0      	bne.n	800822c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d039      	beq.n	80082ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01c      	beq.n	8008298 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800825e:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a0c      	ldr	r2, [pc, #48]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008264:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008268:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800826a:	f7fd fab3 	bl	80057d4 <HAL_GetTick>
 800826e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008270:	e008      	b.n	8008284 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008272:	f7fd faaf 	bl	80057d4 <HAL_GetTick>
 8008276:	4602      	mov	r2, r0
 8008278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	2b02      	cmp	r3, #2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e1dd      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008284:	4b03      	ldr	r3, [pc, #12]	@ (8008294 <HAL_RCC_OscConfig+0x4f8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0f0      	beq.n	8008272 <HAL_RCC_OscConfig+0x4d6>
 8008290:	e01b      	b.n	80082ca <HAL_RCC_OscConfig+0x52e>
 8008292:	bf00      	nop
 8008294:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008298:	4b9b      	ldr	r3, [pc, #620]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a9a      	ldr	r2, [pc, #616]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800829e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082a4:	f7fd fa96 	bl	80057d4 <HAL_GetTick>
 80082a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082aa:	e008      	b.n	80082be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082ac:	f7fd fa92 	bl	80057d4 <HAL_GetTick>
 80082b0:	4602      	mov	r2, r0
 80082b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e1c0      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082be:	4b92      	ldr	r3, [pc, #584]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1f0      	bne.n	80082ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 8081 	beq.w	80083da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082d8:	4b8c      	ldr	r3, [pc, #560]	@ (800850c <HAL_RCC_OscConfig+0x770>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a8b      	ldr	r2, [pc, #556]	@ (800850c <HAL_RCC_OscConfig+0x770>)
 80082de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082e4:	f7fd fa76 	bl	80057d4 <HAL_GetTick>
 80082e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082ec:	f7fd fa72 	bl	80057d4 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b64      	cmp	r3, #100	@ 0x64
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e1a0      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082fe:	4b83      	ldr	r3, [pc, #524]	@ (800850c <HAL_RCC_OscConfig+0x770>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f0      	beq.n	80082ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d106      	bne.n	8008320 <HAL_RCC_OscConfig+0x584>
 8008312:	4b7d      	ldr	r3, [pc, #500]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008316:	4a7c      	ldr	r2, [pc, #496]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	6713      	str	r3, [r2, #112]	@ 0x70
 800831e:	e02d      	b.n	800837c <HAL_RCC_OscConfig+0x5e0>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10c      	bne.n	8008342 <HAL_RCC_OscConfig+0x5a6>
 8008328:	4b77      	ldr	r3, [pc, #476]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800832a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800832c:	4a76      	ldr	r2, [pc, #472]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	6713      	str	r3, [r2, #112]	@ 0x70
 8008334:	4b74      	ldr	r3, [pc, #464]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008338:	4a73      	ldr	r2, [pc, #460]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800833a:	f023 0304 	bic.w	r3, r3, #4
 800833e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008340:	e01c      	b.n	800837c <HAL_RCC_OscConfig+0x5e0>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	2b05      	cmp	r3, #5
 8008348:	d10c      	bne.n	8008364 <HAL_RCC_OscConfig+0x5c8>
 800834a:	4b6f      	ldr	r3, [pc, #444]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800834e:	4a6e      	ldr	r2, [pc, #440]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008350:	f043 0304 	orr.w	r3, r3, #4
 8008354:	6713      	str	r3, [r2, #112]	@ 0x70
 8008356:	4b6c      	ldr	r3, [pc, #432]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800835a:	4a6b      	ldr	r2, [pc, #428]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800835c:	f043 0301 	orr.w	r3, r3, #1
 8008360:	6713      	str	r3, [r2, #112]	@ 0x70
 8008362:	e00b      	b.n	800837c <HAL_RCC_OscConfig+0x5e0>
 8008364:	4b68      	ldr	r3, [pc, #416]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008368:	4a67      	ldr	r2, [pc, #412]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800836a:	f023 0301 	bic.w	r3, r3, #1
 800836e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008370:	4b65      	ldr	r3, [pc, #404]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008374:	4a64      	ldr	r2, [pc, #400]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008376:	f023 0304 	bic.w	r3, r3, #4
 800837a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d015      	beq.n	80083b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008384:	f7fd fa26 	bl	80057d4 <HAL_GetTick>
 8008388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800838a:	e00a      	b.n	80083a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800838c:	f7fd fa22 	bl	80057d4 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800839a:	4293      	cmp	r3, r2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e14e      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083a2:	4b59      	ldr	r3, [pc, #356]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80083a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0ee      	beq.n	800838c <HAL_RCC_OscConfig+0x5f0>
 80083ae:	e014      	b.n	80083da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b0:	f7fd fa10 	bl	80057d4 <HAL_GetTick>
 80083b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083b6:	e00a      	b.n	80083ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b8:	f7fd fa0c 	bl	80057d4 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d901      	bls.n	80083ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e138      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083ce:	4b4e      	ldr	r3, [pc, #312]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80083d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1ee      	bne.n	80083b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 812d 	beq.w	800863e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80083e4:	4b48      	ldr	r3, [pc, #288]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083ec:	2b18      	cmp	r3, #24
 80083ee:	f000 80bd 	beq.w	800856c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	f040 809e 	bne.w	8008538 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083fc:	4b42      	ldr	r3, [pc, #264]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a41      	ldr	r2, [pc, #260]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008402:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008408:	f7fd f9e4 	bl	80057d4 <HAL_GetTick>
 800840c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800840e:	e008      	b.n	8008422 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008410:	f7fd f9e0 	bl	80057d4 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d901      	bls.n	8008422 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e10e      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008422:	4b39      	ldr	r3, [pc, #228]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1f0      	bne.n	8008410 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800842e:	4b36      	ldr	r3, [pc, #216]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008432:	4b37      	ldr	r3, [pc, #220]	@ (8008510 <HAL_RCC_OscConfig+0x774>)
 8008434:	4013      	ands	r3, r2
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800843e:	0112      	lsls	r2, r2, #4
 8008440:	430a      	orrs	r2, r1
 8008442:	4931      	ldr	r1, [pc, #196]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008444:	4313      	orrs	r3, r2
 8008446:	628b      	str	r3, [r1, #40]	@ 0x28
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844c:	3b01      	subs	r3, #1
 800844e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008456:	3b01      	subs	r3, #1
 8008458:	025b      	lsls	r3, r3, #9
 800845a:	b29b      	uxth	r3, r3
 800845c:	431a      	orrs	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008462:	3b01      	subs	r3, #1
 8008464:	041b      	lsls	r3, r3, #16
 8008466:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008470:	3b01      	subs	r3, #1
 8008472:	061b      	lsls	r3, r3, #24
 8008474:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008478:	4923      	ldr	r1, [pc, #140]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800847a:	4313      	orrs	r3, r2
 800847c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800847e:	4b22      	ldr	r3, [pc, #136]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	4a21      	ldr	r2, [pc, #132]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800848a:	4b1f      	ldr	r3, [pc, #124]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800848c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800848e:	4b21      	ldr	r3, [pc, #132]	@ (8008514 <HAL_RCC_OscConfig+0x778>)
 8008490:	4013      	ands	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008496:	00d2      	lsls	r2, r2, #3
 8008498:	491b      	ldr	r1, [pc, #108]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800849e:	4b1a      	ldr	r3, [pc, #104]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a2:	f023 020c 	bic.w	r2, r3, #12
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	4917      	ldr	r1, [pc, #92]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80084b0:	4b15      	ldr	r3, [pc, #84]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b4:	f023 0202 	bic.w	r2, r3, #2
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084bc:	4912      	ldr	r1, [pc, #72]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084c2:	4b11      	ldr	r3, [pc, #68]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	4a10      	ldr	r2, [pc, #64]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80084da:	4b0b      	ldr	r3, [pc, #44]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084de:	4a0a      	ldr	r2, [pc, #40]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80084e6:	4b08      	ldr	r3, [pc, #32]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ea:	4a07      	ldr	r2, [pc, #28]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084f2:	4b05      	ldr	r3, [pc, #20]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a04      	ldr	r2, [pc, #16]	@ (8008508 <HAL_RCC_OscConfig+0x76c>)
 80084f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fe:	f7fd f969 	bl	80057d4 <HAL_GetTick>
 8008502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008504:	e011      	b.n	800852a <HAL_RCC_OscConfig+0x78e>
 8008506:	bf00      	nop
 8008508:	58024400 	.word	0x58024400
 800850c:	58024800 	.word	0x58024800
 8008510:	fffffc0c 	.word	0xfffffc0c
 8008514:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008518:	f7fd f95c 	bl	80057d4 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b02      	cmp	r3, #2
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e08a      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800852a:	4b47      	ldr	r3, [pc, #284]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f0      	beq.n	8008518 <HAL_RCC_OscConfig+0x77c>
 8008536:	e082      	b.n	800863e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008538:	4b43      	ldr	r3, [pc, #268]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a42      	ldr	r2, [pc, #264]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 800853e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008544:	f7fd f946 	bl	80057d4 <HAL_GetTick>
 8008548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800854c:	f7fd f942 	bl	80057d4 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e070      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800855e:	4b3a      	ldr	r3, [pc, #232]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f0      	bne.n	800854c <HAL_RCC_OscConfig+0x7b0>
 800856a:	e068      	b.n	800863e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800856c:	4b36      	ldr	r3, [pc, #216]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 800856e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008570:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008572:	4b35      	ldr	r3, [pc, #212]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 8008574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008576:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857c:	2b01      	cmp	r3, #1
 800857e:	d031      	beq.n	80085e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f003 0203 	and.w	r2, r3, #3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800858a:	429a      	cmp	r2, r3
 800858c:	d12a      	bne.n	80085e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	091b      	lsrs	r3, r3, #4
 8008592:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800859a:	429a      	cmp	r2, r3
 800859c:	d122      	bne.n	80085e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d11a      	bne.n	80085e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	0a5b      	lsrs	r3, r3, #9
 80085b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085bc:	429a      	cmp	r2, r3
 80085be:	d111      	bne.n	80085e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	0c1b      	lsrs	r3, r3, #16
 80085c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d108      	bne.n	80085e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	0e1b      	lsrs	r3, r3, #24
 80085d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d001      	beq.n	80085e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e02b      	b.n	8008640 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80085e8:	4b17      	ldr	r3, [pc, #92]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 80085ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ec:	08db      	lsrs	r3, r3, #3
 80085ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d01f      	beq.n	800863e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80085fe:	4b12      	ldr	r3, [pc, #72]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 8008600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008602:	4a11      	ldr	r2, [pc, #68]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800860a:	f7fd f8e3 	bl	80057d4 <HAL_GetTick>
 800860e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008610:	bf00      	nop
 8008612:	f7fd f8df 	bl	80057d4 <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861a:	4293      	cmp	r3, r2
 800861c:	d0f9      	beq.n	8008612 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800861e:	4b0a      	ldr	r3, [pc, #40]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 8008620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008622:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <HAL_RCC_OscConfig+0x8b0>)
 8008624:	4013      	ands	r3, r2
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800862a:	00d2      	lsls	r2, r2, #3
 800862c:	4906      	ldr	r1, [pc, #24]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 800862e:	4313      	orrs	r3, r2
 8008630:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008632:	4b05      	ldr	r3, [pc, #20]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 8008634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008636:	4a04      	ldr	r2, [pc, #16]	@ (8008648 <HAL_RCC_OscConfig+0x8ac>)
 8008638:	f043 0301 	orr.w	r3, r3, #1
 800863c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3730      	adds	r7, #48	@ 0x30
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	58024400 	.word	0x58024400
 800864c:	ffff0007 	.word	0xffff0007

08008650 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e19c      	b.n	800899e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008664:	4b8a      	ldr	r3, [pc, #552]	@ (8008890 <HAL_RCC_ClockConfig+0x240>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d910      	bls.n	8008694 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008672:	4b87      	ldr	r3, [pc, #540]	@ (8008890 <HAL_RCC_ClockConfig+0x240>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f023 020f 	bic.w	r2, r3, #15
 800867a:	4985      	ldr	r1, [pc, #532]	@ (8008890 <HAL_RCC_ClockConfig+0x240>)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	4313      	orrs	r3, r2
 8008680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008682:	4b83      	ldr	r3, [pc, #524]	@ (8008890 <HAL_RCC_ClockConfig+0x240>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d001      	beq.n	8008694 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e184      	b.n	800899e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d010      	beq.n	80086c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	4b7b      	ldr	r3, [pc, #492]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d908      	bls.n	80086c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80086b0:	4b78      	ldr	r3, [pc, #480]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80086b2:	699b      	ldr	r3, [r3, #24]
 80086b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	4975      	ldr	r1, [pc, #468]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d010      	beq.n	80086f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	695a      	ldr	r2, [r3, #20]
 80086d2:	4b70      	ldr	r3, [pc, #448]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086da:	429a      	cmp	r2, r3
 80086dc:	d908      	bls.n	80086f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80086de:	4b6d      	ldr	r3, [pc, #436]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	496a      	ldr	r1, [pc, #424]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d010      	beq.n	800871e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699a      	ldr	r2, [r3, #24]
 8008700:	4b64      	ldr	r3, [pc, #400]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008702:	69db      	ldr	r3, [r3, #28]
 8008704:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008708:	429a      	cmp	r2, r3
 800870a:	d908      	bls.n	800871e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800870c:	4b61      	ldr	r3, [pc, #388]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	495e      	ldr	r1, [pc, #376]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 800871a:	4313      	orrs	r3, r2
 800871c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d010      	beq.n	800874c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	69da      	ldr	r2, [r3, #28]
 800872e:	4b59      	ldr	r3, [pc, #356]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008736:	429a      	cmp	r2, r3
 8008738:	d908      	bls.n	800874c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800873a:	4b56      	ldr	r3, [pc, #344]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	4953      	ldr	r1, [pc, #332]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008748:	4313      	orrs	r3, r2
 800874a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d010      	beq.n	800877a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68da      	ldr	r2, [r3, #12]
 800875c:	4b4d      	ldr	r3, [pc, #308]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	f003 030f 	and.w	r3, r3, #15
 8008764:	429a      	cmp	r2, r3
 8008766:	d908      	bls.n	800877a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008768:	4b4a      	ldr	r3, [pc, #296]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	f023 020f 	bic.w	r2, r3, #15
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	4947      	ldr	r1, [pc, #284]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008776:	4313      	orrs	r3, r2
 8008778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d055      	beq.n	8008832 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008786:	4b43      	ldr	r3, [pc, #268]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	4940      	ldr	r1, [pc, #256]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008794:	4313      	orrs	r3, r2
 8008796:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d107      	bne.n	80087b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d121      	bne.n	80087f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e0f6      	b.n	800899e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d107      	bne.n	80087c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087b8:	4b36      	ldr	r3, [pc, #216]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d115      	bne.n	80087f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0ea      	b.n	800899e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d107      	bne.n	80087e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087d0:	4b30      	ldr	r3, [pc, #192]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d109      	bne.n	80087f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e0de      	b.n	800899e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087e0:	4b2c      	ldr	r3, [pc, #176]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0d6      	b.n	800899e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80087f0:	4b28      	ldr	r3, [pc, #160]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f023 0207 	bic.w	r2, r3, #7
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	4925      	ldr	r1, [pc, #148]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008802:	f7fc ffe7 	bl	80057d4 <HAL_GetTick>
 8008806:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008808:	e00a      	b.n	8008820 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800880a:	f7fc ffe3 	bl	80057d4 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008818:	4293      	cmp	r3, r2
 800881a:	d901      	bls.n	8008820 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e0be      	b.n	800899e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008820:	4b1c      	ldr	r3, [pc, #112]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	429a      	cmp	r2, r3
 8008830:	d1eb      	bne.n	800880a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d010      	beq.n	8008860 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	4b14      	ldr	r3, [pc, #80]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f003 030f 	and.w	r3, r3, #15
 800884a:	429a      	cmp	r2, r3
 800884c:	d208      	bcs.n	8008860 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800884e:	4b11      	ldr	r3, [pc, #68]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	f023 020f 	bic.w	r2, r3, #15
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	490e      	ldr	r1, [pc, #56]	@ (8008894 <HAL_RCC_ClockConfig+0x244>)
 800885c:	4313      	orrs	r3, r2
 800885e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008860:	4b0b      	ldr	r3, [pc, #44]	@ (8008890 <HAL_RCC_ClockConfig+0x240>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 030f 	and.w	r3, r3, #15
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d214      	bcs.n	8008898 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800886e:	4b08      	ldr	r3, [pc, #32]	@ (8008890 <HAL_RCC_ClockConfig+0x240>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f023 020f 	bic.w	r2, r3, #15
 8008876:	4906      	ldr	r1, [pc, #24]	@ (8008890 <HAL_RCC_ClockConfig+0x240>)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	4313      	orrs	r3, r2
 800887c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800887e:	4b04      	ldr	r3, [pc, #16]	@ (8008890 <HAL_RCC_ClockConfig+0x240>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 030f 	and.w	r3, r3, #15
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	429a      	cmp	r2, r3
 800888a:	d005      	beq.n	8008898 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e086      	b.n	800899e <HAL_RCC_ClockConfig+0x34e>
 8008890:	52002000 	.word	0x52002000
 8008894:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d010      	beq.n	80088c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691a      	ldr	r2, [r3, #16]
 80088a8:	4b3f      	ldr	r3, [pc, #252]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d208      	bcs.n	80088c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088b4:	4b3c      	ldr	r3, [pc, #240]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	4939      	ldr	r1, [pc, #228]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0308 	and.w	r3, r3, #8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d010      	beq.n	80088f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	695a      	ldr	r2, [r3, #20]
 80088d6:	4b34      	ldr	r3, [pc, #208]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088de:	429a      	cmp	r2, r3
 80088e0:	d208      	bcs.n	80088f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088e2:	4b31      	ldr	r3, [pc, #196]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	492e      	ldr	r1, [pc, #184]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0310 	and.w	r3, r3, #16
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d010      	beq.n	8008922 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	699a      	ldr	r2, [r3, #24]
 8008904:	4b28      	ldr	r3, [pc, #160]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800890c:	429a      	cmp	r2, r3
 800890e:	d208      	bcs.n	8008922 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008910:	4b25      	ldr	r3, [pc, #148]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	4922      	ldr	r1, [pc, #136]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 800891e:	4313      	orrs	r3, r2
 8008920:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d010      	beq.n	8008950 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	69da      	ldr	r2, [r3, #28]
 8008932:	4b1d      	ldr	r3, [pc, #116]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800893a:	429a      	cmp	r2, r3
 800893c:	d208      	bcs.n	8008950 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800893e:	4b1a      	ldr	r3, [pc, #104]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	4917      	ldr	r1, [pc, #92]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 800894c:	4313      	orrs	r3, r2
 800894e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008950:	f000 f834 	bl	80089bc <HAL_RCC_GetSysClockFreq>
 8008954:	4602      	mov	r2, r0
 8008956:	4b14      	ldr	r3, [pc, #80]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 8008958:	699b      	ldr	r3, [r3, #24]
 800895a:	0a1b      	lsrs	r3, r3, #8
 800895c:	f003 030f 	and.w	r3, r3, #15
 8008960:	4912      	ldr	r1, [pc, #72]	@ (80089ac <HAL_RCC_ClockConfig+0x35c>)
 8008962:	5ccb      	ldrb	r3, [r1, r3]
 8008964:	f003 031f 	and.w	r3, r3, #31
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
 800896c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800896e:	4b0e      	ldr	r3, [pc, #56]	@ (80089a8 <HAL_RCC_ClockConfig+0x358>)
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	f003 030f 	and.w	r3, r3, #15
 8008976:	4a0d      	ldr	r2, [pc, #52]	@ (80089ac <HAL_RCC_ClockConfig+0x35c>)
 8008978:	5cd3      	ldrb	r3, [r2, r3]
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	fa22 f303 	lsr.w	r3, r2, r3
 8008984:	4a0a      	ldr	r2, [pc, #40]	@ (80089b0 <HAL_RCC_ClockConfig+0x360>)
 8008986:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008988:	4a0a      	ldr	r2, [pc, #40]	@ (80089b4 <HAL_RCC_ClockConfig+0x364>)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800898e:	4b0a      	ldr	r3, [pc, #40]	@ (80089b8 <HAL_RCC_ClockConfig+0x368>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f7fc fb86 	bl	80050a4 <HAL_InitTick>
 8008998:	4603      	mov	r3, r0
 800899a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800899c:	7bfb      	ldrb	r3, [r7, #15]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	58024400 	.word	0x58024400
 80089ac:	08014eb8 	.word	0x08014eb8
 80089b0:	24000058 	.word	0x24000058
 80089b4:	24000054 	.word	0x24000054
 80089b8:	24000074 	.word	0x24000074

080089bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089bc:	b480      	push	{r7}
 80089be:	b089      	sub	sp, #36	@ 0x24
 80089c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089c2:	4bb3      	ldr	r3, [pc, #716]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089ca:	2b18      	cmp	r3, #24
 80089cc:	f200 8155 	bhi.w	8008c7a <HAL_RCC_GetSysClockFreq+0x2be>
 80089d0:	a201      	add	r2, pc, #4	@ (adr r2, 80089d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80089d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d6:	bf00      	nop
 80089d8:	08008a3d 	.word	0x08008a3d
 80089dc:	08008c7b 	.word	0x08008c7b
 80089e0:	08008c7b 	.word	0x08008c7b
 80089e4:	08008c7b 	.word	0x08008c7b
 80089e8:	08008c7b 	.word	0x08008c7b
 80089ec:	08008c7b 	.word	0x08008c7b
 80089f0:	08008c7b 	.word	0x08008c7b
 80089f4:	08008c7b 	.word	0x08008c7b
 80089f8:	08008a63 	.word	0x08008a63
 80089fc:	08008c7b 	.word	0x08008c7b
 8008a00:	08008c7b 	.word	0x08008c7b
 8008a04:	08008c7b 	.word	0x08008c7b
 8008a08:	08008c7b 	.word	0x08008c7b
 8008a0c:	08008c7b 	.word	0x08008c7b
 8008a10:	08008c7b 	.word	0x08008c7b
 8008a14:	08008c7b 	.word	0x08008c7b
 8008a18:	08008a69 	.word	0x08008a69
 8008a1c:	08008c7b 	.word	0x08008c7b
 8008a20:	08008c7b 	.word	0x08008c7b
 8008a24:	08008c7b 	.word	0x08008c7b
 8008a28:	08008c7b 	.word	0x08008c7b
 8008a2c:	08008c7b 	.word	0x08008c7b
 8008a30:	08008c7b 	.word	0x08008c7b
 8008a34:	08008c7b 	.word	0x08008c7b
 8008a38:	08008a6f 	.word	0x08008a6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a3c:	4b94      	ldr	r3, [pc, #592]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d009      	beq.n	8008a5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a48:	4b91      	ldr	r3, [pc, #580]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	08db      	lsrs	r3, r3, #3
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	4a90      	ldr	r2, [pc, #576]	@ (8008c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
 8008a58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008a5a:	e111      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a5c:	4b8d      	ldr	r3, [pc, #564]	@ (8008c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a5e:	61bb      	str	r3, [r7, #24]
      break;
 8008a60:	e10e      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008a62:	4b8d      	ldr	r3, [pc, #564]	@ (8008c98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a64:	61bb      	str	r3, [r7, #24]
      break;
 8008a66:	e10b      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008a68:	4b8c      	ldr	r3, [pc, #560]	@ (8008c9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a6a:	61bb      	str	r3, [r7, #24]
      break;
 8008a6c:	e108      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a6e:	4b88      	ldr	r3, [pc, #544]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a78:	4b85      	ldr	r3, [pc, #532]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7c:	091b      	lsrs	r3, r3, #4
 8008a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a84:	4b82      	ldr	r3, [pc, #520]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a8e:	4b80      	ldr	r3, [pc, #512]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a92:	08db      	lsrs	r3, r3, #3
 8008a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 80e1 	beq.w	8008c74 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	f000 8083 	beq.w	8008bc0 <HAL_RCC_GetSysClockFreq+0x204>
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	f200 80a1 	bhi.w	8008c04 <HAL_RCC_GetSysClockFreq+0x248>
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d003      	beq.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x114>
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d056      	beq.n	8008b7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008ace:	e099      	b.n	8008c04 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d02d      	beq.n	8008b38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008adc:	4b6c      	ldr	r3, [pc, #432]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	08db      	lsrs	r3, r3, #3
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	4a6b      	ldr	r2, [pc, #428]	@ (8008c94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8008aec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	ee07 3a90 	vmov	s15, r3
 8008af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	ee07 3a90 	vmov	s15, r3
 8008afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b06:	4b62      	ldr	r3, [pc, #392]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008b36:	e087      	b.n	8008c48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008ca4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b4a:	4b51      	ldr	r3, [pc, #324]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b7a:	e065      	b.n	8008c48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008ca8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8e:	4b40      	ldr	r3, [pc, #256]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ba2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bbe:	e043      	b.n	8008c48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	ee07 3a90 	vmov	s15, r3
 8008bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008cac <HAL_RCC_GetSysClockFreq+0x2f0>
 8008bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008be6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c02:	e021      	b.n	8008c48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008ca8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c16:	4b1e      	ldr	r3, [pc, #120]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c2a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ca0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008c48:	4b11      	ldr	r3, [pc, #68]	@ (8008c90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c4c:	0a5b      	lsrs	r3, r3, #9
 8008c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c52:	3301      	adds	r3, #1
 8008c54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	ee07 3a90 	vmov	s15, r3
 8008c5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c6c:	ee17 3a90 	vmov	r3, s15
 8008c70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008c72:	e005      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	61bb      	str	r3, [r7, #24]
      break;
 8008c78:	e002      	b.n	8008c80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008c7a:	4b07      	ldr	r3, [pc, #28]	@ (8008c98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c7c:	61bb      	str	r3, [r7, #24]
      break;
 8008c7e:	bf00      	nop
  }

  return sysclockfreq;
 8008c80:	69bb      	ldr	r3, [r7, #24]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3724      	adds	r7, #36	@ 0x24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	58024400 	.word	0x58024400
 8008c94:	03d09000 	.word	0x03d09000
 8008c98:	003d0900 	.word	0x003d0900
 8008c9c:	007a1200 	.word	0x007a1200
 8008ca0:	46000000 	.word	0x46000000
 8008ca4:	4c742400 	.word	0x4c742400
 8008ca8:	4a742400 	.word	0x4a742400
 8008cac:	4af42400 	.word	0x4af42400

08008cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008cb6:	f7ff fe81 	bl	80089bc <HAL_RCC_GetSysClockFreq>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	4b10      	ldr	r3, [pc, #64]	@ (8008d00 <HAL_RCC_GetHCLKFreq+0x50>)
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	0a1b      	lsrs	r3, r3, #8
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	490f      	ldr	r1, [pc, #60]	@ (8008d04 <HAL_RCC_GetHCLKFreq+0x54>)
 8008cc8:	5ccb      	ldrb	r3, [r1, r3]
 8008cca:	f003 031f 	and.w	r3, r3, #31
 8008cce:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <HAL_RCC_GetHCLKFreq+0x50>)
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	4a09      	ldr	r2, [pc, #36]	@ (8008d04 <HAL_RCC_GetHCLKFreq+0x54>)
 8008cde:	5cd3      	ldrb	r3, [r2, r3]
 8008ce0:	f003 031f 	and.w	r3, r3, #31
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	4a07      	ldr	r2, [pc, #28]	@ (8008d08 <HAL_RCC_GetHCLKFreq+0x58>)
 8008cec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008cee:	4a07      	ldr	r2, [pc, #28]	@ (8008d0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008cf4:	4b04      	ldr	r3, [pc, #16]	@ (8008d08 <HAL_RCC_GetHCLKFreq+0x58>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	58024400 	.word	0x58024400
 8008d04:	08014eb8 	.word	0x08014eb8
 8008d08:	24000058 	.word	0x24000058
 8008d0c:	24000054 	.word	0x24000054

08008d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d14:	f7ff ffcc 	bl	8008cb0 <HAL_RCC_GetHCLKFreq>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	4b06      	ldr	r3, [pc, #24]	@ (8008d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	091b      	lsrs	r3, r3, #4
 8008d20:	f003 0307 	and.w	r3, r3, #7
 8008d24:	4904      	ldr	r1, [pc, #16]	@ (8008d38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d26:	5ccb      	ldrb	r3, [r1, r3]
 8008d28:	f003 031f 	and.w	r3, r3, #31
 8008d2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	58024400 	.word	0x58024400
 8008d38:	08014eb8 	.word	0x08014eb8

08008d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008d40:	f7ff ffb6 	bl	8008cb0 <HAL_RCC_GetHCLKFreq>
 8008d44:	4602      	mov	r2, r0
 8008d46:	4b06      	ldr	r3, [pc, #24]	@ (8008d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	0a1b      	lsrs	r3, r3, #8
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	4904      	ldr	r1, [pc, #16]	@ (8008d64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d52:	5ccb      	ldrb	r3, [r1, r3]
 8008d54:	f003 031f 	and.w	r3, r3, #31
 8008d58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	58024400 	.word	0x58024400
 8008d64:	08014eb8 	.word	0x08014eb8

08008d68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	223f      	movs	r2, #63	@ 0x3f
 8008d76:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d78:	4b1a      	ldr	r3, [pc, #104]	@ (8008de4 <HAL_RCC_GetClockConfig+0x7c>)
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f003 0207 	and.w	r2, r3, #7
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008d84:	4b17      	ldr	r3, [pc, #92]	@ (8008de4 <HAL_RCC_GetClockConfig+0x7c>)
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008d90:	4b14      	ldr	r3, [pc, #80]	@ (8008de4 <HAL_RCC_GetClockConfig+0x7c>)
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	f003 020f 	and.w	r2, r3, #15
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008d9c:	4b11      	ldr	r3, [pc, #68]	@ (8008de4 <HAL_RCC_GetClockConfig+0x7c>)
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008da8:	4b0e      	ldr	r3, [pc, #56]	@ (8008de4 <HAL_RCC_GetClockConfig+0x7c>)
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008db4:	4b0b      	ldr	r3, [pc, #44]	@ (8008de4 <HAL_RCC_GetClockConfig+0x7c>)
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008dc0:	4b08      	ldr	r3, [pc, #32]	@ (8008de4 <HAL_RCC_GetClockConfig+0x7c>)
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008dcc:	4b06      	ldr	r3, [pc, #24]	@ (8008de8 <HAL_RCC_GetClockConfig+0x80>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 020f 	and.w	r2, r3, #15
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	601a      	str	r2, [r3, #0]
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	58024400 	.word	0x58024400
 8008de8:	52002000 	.word	0x52002000

08008dec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df0:	b0ca      	sub	sp, #296	@ 0x128
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008e10:	2500      	movs	r5, #0
 8008e12:	ea54 0305 	orrs.w	r3, r4, r5
 8008e16:	d049      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e22:	d02f      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e28:	d828      	bhi.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e2e:	d01a      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e34:	d822      	bhi.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e3e:	d007      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e40:	e01c      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e42:	4bb8      	ldr	r3, [pc, #736]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e46:	4ab7      	ldr	r2, [pc, #732]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e4e:	e01a      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e54:	3308      	adds	r3, #8
 8008e56:	2102      	movs	r1, #2
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f001 fc8f 	bl	800a77c <RCCEx_PLL2_Config>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e64:	e00f      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6a:	3328      	adds	r3, #40	@ 0x28
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fd36 	bl	800a8e0 <RCCEx_PLL3_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e7a:	e004      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e82:	e000      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10a      	bne.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e8e:	4ba5      	ldr	r3, [pc, #660]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e9c:	4aa1      	ldr	r2, [pc, #644]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ea2:	e003      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008eb8:	f04f 0900 	mov.w	r9, #0
 8008ebc:	ea58 0309 	orrs.w	r3, r8, r9
 8008ec0:	d047      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d82a      	bhi.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed2:	bf00      	nop
 8008ed4:	08008ee9 	.word	0x08008ee9
 8008ed8:	08008ef7 	.word	0x08008ef7
 8008edc:	08008f0d 	.word	0x08008f0d
 8008ee0:	08008f2b 	.word	0x08008f2b
 8008ee4:	08008f2b 	.word	0x08008f2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eec:	4a8d      	ldr	r2, [pc, #564]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ef4:	e01a      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efa:	3308      	adds	r3, #8
 8008efc:	2100      	movs	r1, #0
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 fc3c 	bl	800a77c <RCCEx_PLL2_Config>
 8008f04:	4603      	mov	r3, r0
 8008f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f0a:	e00f      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f10:	3328      	adds	r3, #40	@ 0x28
 8008f12:	2100      	movs	r1, #0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f001 fce3 	bl	800a8e0 <RCCEx_PLL3_Config>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f20:	e004      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f28:	e000      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f34:	4b7b      	ldr	r3, [pc, #492]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f38:	f023 0107 	bic.w	r1, r3, #7
 8008f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f42:	4a78      	ldr	r2, [pc, #480]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f44:	430b      	orrs	r3, r1
 8008f46:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f48:	e003      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008f5e:	f04f 0b00 	mov.w	fp, #0
 8008f62:	ea5a 030b 	orrs.w	r3, sl, fp
 8008f66:	d04c      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f72:	d030      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008f74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f78:	d829      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f7c:	d02d      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f80:	d825      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f82:	2b80      	cmp	r3, #128	@ 0x80
 8008f84:	d018      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008f86:	2b80      	cmp	r3, #128	@ 0x80
 8008f88:	d821      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008f8e:	2b40      	cmp	r3, #64	@ 0x40
 8008f90:	d007      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008f92:	e01c      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f94:	4b63      	ldr	r3, [pc, #396]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f98:	4a62      	ldr	r2, [pc, #392]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fa0:	e01c      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	2100      	movs	r1, #0
 8008faa:	4618      	mov	r0, r3
 8008fac:	f001 fbe6 	bl	800a77c <RCCEx_PLL2_Config>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fb6:	e011      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbc:	3328      	adds	r3, #40	@ 0x28
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f001 fc8d 	bl	800a8e0 <RCCEx_PLL3_Config>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fcc:	e006      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fd4:	e002      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008fd6:	bf00      	nop
 8008fd8:	e000      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fe8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ff2:	4a4c      	ldr	r2, [pc, #304]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ff4:	430b      	orrs	r3, r1
 8008ff6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ff8:	e003      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ffe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800900e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009012:	2300      	movs	r3, #0
 8009014:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009018:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800901c:	460b      	mov	r3, r1
 800901e:	4313      	orrs	r3, r2
 8009020:	d053      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800902a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800902e:	d035      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009030:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009034:	d82e      	bhi.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009036:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800903a:	d031      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800903c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009040:	d828      	bhi.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009042:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009046:	d01a      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800904c:	d822      	bhi.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009052:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009056:	d007      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009058:	e01c      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800905a:	4b32      	ldr	r3, [pc, #200]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	4a31      	ldr	r2, [pc, #196]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009066:	e01c      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906c:	3308      	adds	r3, #8
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f001 fb83 	bl	800a77c <RCCEx_PLL2_Config>
 8009076:	4603      	mov	r3, r0
 8009078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800907c:	e011      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800907e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009082:	3328      	adds	r3, #40	@ 0x28
 8009084:	2100      	movs	r1, #0
 8009086:	4618      	mov	r0, r3
 8009088:	f001 fc2a 	bl	800a8e0 <RCCEx_PLL3_Config>
 800908c:	4603      	mov	r3, r0
 800908e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009092:	e006      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800909a:	e002      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80090a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10b      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80090aa:	4b1e      	ldr	r3, [pc, #120]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ae:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80090ba:	4a1a      	ldr	r2, [pc, #104]	@ (8009124 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090bc:	430b      	orrs	r3, r1
 80090be:	6593      	str	r3, [r2, #88]	@ 0x58
 80090c0:	e003      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80090d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80090da:	2300      	movs	r3, #0
 80090dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80090e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80090e4:	460b      	mov	r3, r1
 80090e6:	4313      	orrs	r3, r2
 80090e8:	d056      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090f6:	d038      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80090f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80090fc:	d831      	bhi.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009102:	d034      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009104:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009108:	d82b      	bhi.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800910a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800910e:	d01d      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009110:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009114:	d825      	bhi.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d006      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800911a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800911e:	d00a      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009120:	e01f      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009122:	bf00      	nop
 8009124:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009128:	4ba2      	ldr	r3, [pc, #648]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	4aa1      	ldr	r2, [pc, #644]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800912e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009134:	e01c      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913a:	3308      	adds	r3, #8
 800913c:	2100      	movs	r1, #0
 800913e:	4618      	mov	r0, r3
 8009140:	f001 fb1c 	bl	800a77c <RCCEx_PLL2_Config>
 8009144:	4603      	mov	r3, r0
 8009146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800914a:	e011      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800914c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009150:	3328      	adds	r3, #40	@ 0x28
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f001 fbc3 	bl	800a8e0 <RCCEx_PLL3_Config>
 800915a:	4603      	mov	r3, r0
 800915c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009160:	e006      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009168:	e002      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800916a:	bf00      	nop
 800916c:	e000      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800916e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10b      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009178:	4b8e      	ldr	r3, [pc, #568]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800917a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800917c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009184:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009188:	4a8a      	ldr	r2, [pc, #552]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800918a:	430b      	orrs	r3, r1
 800918c:	6593      	str	r3, [r2, #88]	@ 0x58
 800918e:	e003      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80091a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80091a8:	2300      	movs	r3, #0
 80091aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80091ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80091b2:	460b      	mov	r3, r1
 80091b4:	4313      	orrs	r3, r2
 80091b6:	d03a      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80091b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091be:	2b30      	cmp	r3, #48	@ 0x30
 80091c0:	d01f      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80091c2:	2b30      	cmp	r3, #48	@ 0x30
 80091c4:	d819      	bhi.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80091c6:	2b20      	cmp	r3, #32
 80091c8:	d00c      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d815      	bhi.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d019      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d111      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091d6:	4b77      	ldr	r3, [pc, #476]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091da:	4a76      	ldr	r2, [pc, #472]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80091e2:	e011      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e8:	3308      	adds	r3, #8
 80091ea:	2102      	movs	r1, #2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 fac5 	bl	800a77c <RCCEx_PLL2_Config>
 80091f2:	4603      	mov	r3, r0
 80091f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80091f8:	e006      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009200:	e002      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009202:	bf00      	nop
 8009204:	e000      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10a      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009210:	4b68      	ldr	r3, [pc, #416]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009214:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800921e:	4a65      	ldr	r2, [pc, #404]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009220:	430b      	orrs	r3, r1
 8009222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009224:	e003      	b.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009226:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800922a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800922e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800923a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800923e:	2300      	movs	r3, #0
 8009240:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009244:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009248:	460b      	mov	r3, r1
 800924a:	4313      	orrs	r3, r2
 800924c:	d051      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800924e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009258:	d035      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800925a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800925e:	d82e      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009260:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009264:	d031      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009266:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800926a:	d828      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800926c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009270:	d01a      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009276:	d822      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800927c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009280:	d007      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009282:	e01c      	b.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009284:	4b4b      	ldr	r3, [pc, #300]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009288:	4a4a      	ldr	r2, [pc, #296]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800928a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800928e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009290:	e01c      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009296:	3308      	adds	r3, #8
 8009298:	2100      	movs	r1, #0
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fa6e 	bl	800a77c <RCCEx_PLL2_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092a6:	e011      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ac:	3328      	adds	r3, #40	@ 0x28
 80092ae:	2100      	movs	r1, #0
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 fb15 	bl	800a8e0 <RCCEx_PLL3_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092bc:	e006      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092c4:	e002      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80092c6:	bf00      	nop
 80092c8:	e000      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80092ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10a      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092d4:	4b37      	ldr	r3, [pc, #220]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80092dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092e2:	4a34      	ldr	r2, [pc, #208]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092e4:	430b      	orrs	r3, r1
 80092e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80092e8:	e003      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80092f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80092fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009302:	2300      	movs	r3, #0
 8009304:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009308:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800930c:	460b      	mov	r3, r1
 800930e:	4313      	orrs	r3, r2
 8009310:	d056      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009316:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800931c:	d033      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800931e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009322:	d82c      	bhi.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009324:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009328:	d02f      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800932a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800932e:	d826      	bhi.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009330:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009334:	d02b      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009336:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800933a:	d820      	bhi.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800933c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009340:	d012      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009342:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009346:	d81a      	bhi.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009348:	2b00      	cmp	r3, #0
 800934a:	d022      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800934c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009350:	d115      	bne.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009356:	3308      	adds	r3, #8
 8009358:	2101      	movs	r1, #1
 800935a:	4618      	mov	r0, r3
 800935c:	f001 fa0e 	bl	800a77c <RCCEx_PLL2_Config>
 8009360:	4603      	mov	r3, r0
 8009362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009366:	e015      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936c:	3328      	adds	r3, #40	@ 0x28
 800936e:	2101      	movs	r1, #1
 8009370:	4618      	mov	r0, r3
 8009372:	f001 fab5 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009376:	4603      	mov	r3, r0
 8009378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800937c:	e00a      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009384:	e006      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009386:	bf00      	nop
 8009388:	e004      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800938a:	bf00      	nop
 800938c:	e002      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800938e:	bf00      	nop
 8009390:	e000      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10d      	bne.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800939c:	4b05      	ldr	r3, [pc, #20]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800939e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093a0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80093a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093aa:	4a02      	ldr	r2, [pc, #8]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ac:	430b      	orrs	r3, r1
 80093ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80093b0:	e006      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80093b2:	bf00      	nop
 80093b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80093c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80093cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80093d0:	2300      	movs	r3, #0
 80093d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80093da:	460b      	mov	r3, r1
 80093dc:	4313      	orrs	r3, r2
 80093de:	d055      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80093e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093ec:	d033      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80093ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093f2:	d82c      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093f8:	d02f      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80093fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093fe:	d826      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009400:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009404:	d02b      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800940a:	d820      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800940c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009410:	d012      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009416:	d81a      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d022      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800941c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009420:	d115      	bne.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009426:	3308      	adds	r3, #8
 8009428:	2101      	movs	r1, #1
 800942a:	4618      	mov	r0, r3
 800942c:	f001 f9a6 	bl	800a77c <RCCEx_PLL2_Config>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009436:	e015      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	3328      	adds	r3, #40	@ 0x28
 800943e:	2101      	movs	r1, #1
 8009440:	4618      	mov	r0, r3
 8009442:	f001 fa4d 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800944c:	e00a      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009454:	e006      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009456:	bf00      	nop
 8009458:	e004      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800945a:	bf00      	nop
 800945c:	e002      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800945e:	bf00      	nop
 8009460:	e000      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10b      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800946c:	4ba3      	ldr	r3, [pc, #652]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800946e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009470:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800947c:	4a9f      	ldr	r2, [pc, #636]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800947e:	430b      	orrs	r3, r1
 8009480:	6593      	str	r3, [r2, #88]	@ 0x58
 8009482:	e003      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800948c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009498:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800949c:	2300      	movs	r3, #0
 800949e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80094a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80094a6:	460b      	mov	r3, r1
 80094a8:	4313      	orrs	r3, r2
 80094aa:	d037      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80094ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094b6:	d00e      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80094b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094bc:	d816      	bhi.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x700>
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d018      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80094c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094c6:	d111      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c8:	4b8c      	ldr	r3, [pc, #560]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094cc:	4a8b      	ldr	r2, [pc, #556]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094d4:	e00f      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094da:	3308      	adds	r3, #8
 80094dc:	2101      	movs	r1, #1
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 f94c 	bl	800a77c <RCCEx_PLL2_Config>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094ea:	e004      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094f2:	e000      	b.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80094f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10a      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80094fe:	4b7f      	ldr	r3, [pc, #508]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009502:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800950c:	4a7b      	ldr	r2, [pc, #492]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800950e:	430b      	orrs	r3, r1
 8009510:	6513      	str	r3, [r2, #80]	@ 0x50
 8009512:	e003      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800952c:	2300      	movs	r3, #0
 800952e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009532:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009536:	460b      	mov	r3, r1
 8009538:	4313      	orrs	r3, r2
 800953a:	d039      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800953c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009542:	2b03      	cmp	r3, #3
 8009544:	d81c      	bhi.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009546:	a201      	add	r2, pc, #4	@ (adr r2, 800954c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	08009589 	.word	0x08009589
 8009550:	0800955d 	.word	0x0800955d
 8009554:	0800956b 	.word	0x0800956b
 8009558:	08009589 	.word	0x08009589
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800955c:	4b67      	ldr	r3, [pc, #412]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	4a66      	ldr	r2, [pc, #408]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009568:	e00f      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956e:	3308      	adds	r3, #8
 8009570:	2102      	movs	r1, #2
 8009572:	4618      	mov	r0, r3
 8009574:	f001 f902 	bl	800a77c <RCCEx_PLL2_Config>
 8009578:	4603      	mov	r3, r0
 800957a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800957e:	e004      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009586:	e000      	b.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800958a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009592:	4b5a      	ldr	r3, [pc, #360]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009596:	f023 0103 	bic.w	r1, r3, #3
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095a0:	4a56      	ldr	r2, [pc, #344]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095a2:	430b      	orrs	r3, r1
 80095a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095a6:	e003      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80095bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80095ca:	460b      	mov	r3, r1
 80095cc:	4313      	orrs	r3, r2
 80095ce:	f000 809f 	beq.w	8009710 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095d2:	4b4b      	ldr	r3, [pc, #300]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a4a      	ldr	r2, [pc, #296]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095de:	f7fc f8f9 	bl	80057d4 <HAL_GetTick>
 80095e2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095e6:	e00b      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095e8:	f7fc f8f4 	bl	80057d4 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b64      	cmp	r3, #100	@ 0x64
 80095f6:	d903      	bls.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095fe:	e005      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009600:	4b3f      	ldr	r3, [pc, #252]	@ (8009700 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0ed      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800960c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009610:	2b00      	cmp	r3, #0
 8009612:	d179      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009614:	4b39      	ldr	r3, [pc, #228]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009616:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009620:	4053      	eors	r3, r2
 8009622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009626:	2b00      	cmp	r3, #0
 8009628:	d015      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800962a:	4b34      	ldr	r3, [pc, #208]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800962c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800962e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009632:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009636:	4b31      	ldr	r3, [pc, #196]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800963a:	4a30      	ldr	r2, [pc, #192]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800963c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009640:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009642:	4b2e      	ldr	r3, [pc, #184]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009646:	4a2d      	ldr	r2, [pc, #180]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800964c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800964e:	4a2b      	ldr	r2, [pc, #172]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009650:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009654:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800965e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009662:	d118      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009664:	f7fc f8b6 	bl	80057d4 <HAL_GetTick>
 8009668:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800966c:	e00d      	b.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800966e:	f7fc f8b1 	bl	80057d4 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009678:	1ad2      	subs	r2, r2, r3
 800967a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800967e:	429a      	cmp	r2, r3
 8009680:	d903      	bls.n	800968a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009688:	e005      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800968a:	4b1c      	ldr	r3, [pc, #112]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800968c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800968e:	f003 0302 	and.w	r3, r3, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0eb      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800969a:	2b00      	cmp	r3, #0
 800969c:	d129      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800969e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80096aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096ae:	d10e      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80096b0:	4b12      	ldr	r3, [pc, #72]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80096b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096c0:	091a      	lsrs	r2, r3, #4
 80096c2:	4b10      	ldr	r3, [pc, #64]	@ (8009704 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80096c4:	4013      	ands	r3, r2
 80096c6:	4a0d      	ldr	r2, [pc, #52]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c8:	430b      	orrs	r3, r1
 80096ca:	6113      	str	r3, [r2, #16]
 80096cc:	e005      	b.n	80096da <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80096ce:	4b0b      	ldr	r3, [pc, #44]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	4a0a      	ldr	r2, [pc, #40]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80096d8:	6113      	str	r3, [r2, #16]
 80096da:	4b08      	ldr	r3, [pc, #32]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096dc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80096de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096ea:	4a04      	ldr	r2, [pc, #16]	@ (80096fc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ec:	430b      	orrs	r3, r1
 80096ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80096f0:	e00e      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80096fa:	e009      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80096fc:	58024400 	.word	0x58024400
 8009700:	58024800 	.word	0x58024800
 8009704:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800970c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f002 0301 	and.w	r3, r2, #1
 800971c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009720:	2300      	movs	r3, #0
 8009722:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009726:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800972a:	460b      	mov	r3, r1
 800972c:	4313      	orrs	r3, r2
 800972e:	f000 8089 	beq.w	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009738:	2b28      	cmp	r3, #40	@ 0x28
 800973a:	d86b      	bhi.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800973c:	a201      	add	r2, pc, #4	@ (adr r2, 8009744 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800973e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009742:	bf00      	nop
 8009744:	0800981d 	.word	0x0800981d
 8009748:	08009815 	.word	0x08009815
 800974c:	08009815 	.word	0x08009815
 8009750:	08009815 	.word	0x08009815
 8009754:	08009815 	.word	0x08009815
 8009758:	08009815 	.word	0x08009815
 800975c:	08009815 	.word	0x08009815
 8009760:	08009815 	.word	0x08009815
 8009764:	080097e9 	.word	0x080097e9
 8009768:	08009815 	.word	0x08009815
 800976c:	08009815 	.word	0x08009815
 8009770:	08009815 	.word	0x08009815
 8009774:	08009815 	.word	0x08009815
 8009778:	08009815 	.word	0x08009815
 800977c:	08009815 	.word	0x08009815
 8009780:	08009815 	.word	0x08009815
 8009784:	080097ff 	.word	0x080097ff
 8009788:	08009815 	.word	0x08009815
 800978c:	08009815 	.word	0x08009815
 8009790:	08009815 	.word	0x08009815
 8009794:	08009815 	.word	0x08009815
 8009798:	08009815 	.word	0x08009815
 800979c:	08009815 	.word	0x08009815
 80097a0:	08009815 	.word	0x08009815
 80097a4:	0800981d 	.word	0x0800981d
 80097a8:	08009815 	.word	0x08009815
 80097ac:	08009815 	.word	0x08009815
 80097b0:	08009815 	.word	0x08009815
 80097b4:	08009815 	.word	0x08009815
 80097b8:	08009815 	.word	0x08009815
 80097bc:	08009815 	.word	0x08009815
 80097c0:	08009815 	.word	0x08009815
 80097c4:	0800981d 	.word	0x0800981d
 80097c8:	08009815 	.word	0x08009815
 80097cc:	08009815 	.word	0x08009815
 80097d0:	08009815 	.word	0x08009815
 80097d4:	08009815 	.word	0x08009815
 80097d8:	08009815 	.word	0x08009815
 80097dc:	08009815 	.word	0x08009815
 80097e0:	08009815 	.word	0x08009815
 80097e4:	0800981d 	.word	0x0800981d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ec:	3308      	adds	r3, #8
 80097ee:	2101      	movs	r1, #1
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 ffc3 	bl	800a77c <RCCEx_PLL2_Config>
 80097f6:	4603      	mov	r3, r0
 80097f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80097fc:	e00f      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009802:	3328      	adds	r3, #40	@ 0x28
 8009804:	2101      	movs	r1, #1
 8009806:	4618      	mov	r0, r3
 8009808:	f001 f86a 	bl	800a8e0 <RCCEx_PLL3_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009812:	e004      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800981a:	e000      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800981c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800981e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10a      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009826:	4bbf      	ldr	r3, [pc, #764]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800982a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800982e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009832:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009834:	4abb      	ldr	r2, [pc, #748]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009836:	430b      	orrs	r3, r1
 8009838:	6553      	str	r3, [r2, #84]	@ 0x54
 800983a:	e003      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f002 0302 	and.w	r3, r2, #2
 8009850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009854:	2300      	movs	r3, #0
 8009856:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800985a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800985e:	460b      	mov	r3, r1
 8009860:	4313      	orrs	r3, r2
 8009862:	d041      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800986a:	2b05      	cmp	r3, #5
 800986c:	d824      	bhi.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800986e:	a201      	add	r2, pc, #4	@ (adr r2, 8009874 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009874:	080098c1 	.word	0x080098c1
 8009878:	0800988d 	.word	0x0800988d
 800987c:	080098a3 	.word	0x080098a3
 8009880:	080098c1 	.word	0x080098c1
 8009884:	080098c1 	.word	0x080098c1
 8009888:	080098c1 	.word	0x080098c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800988c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009890:	3308      	adds	r3, #8
 8009892:	2101      	movs	r1, #1
 8009894:	4618      	mov	r0, r3
 8009896:	f000 ff71 	bl	800a77c <RCCEx_PLL2_Config>
 800989a:	4603      	mov	r3, r0
 800989c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098a0:	e00f      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a6:	3328      	adds	r3, #40	@ 0x28
 80098a8:	2101      	movs	r1, #1
 80098aa:	4618      	mov	r0, r3
 80098ac:	f001 f818 	bl	800a8e0 <RCCEx_PLL3_Config>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80098b6:	e004      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098be:	e000      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80098c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10a      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80098ca:	4b96      	ldr	r3, [pc, #600]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ce:	f023 0107 	bic.w	r1, r3, #7
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098d8:	4a92      	ldr	r2, [pc, #584]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098da:	430b      	orrs	r3, r1
 80098dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80098de:	e003      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	f002 0304 	and.w	r3, r2, #4
 80098f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098f8:	2300      	movs	r3, #0
 80098fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80098fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009902:	460b      	mov	r3, r1
 8009904:	4313      	orrs	r3, r2
 8009906:	d044      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009910:	2b05      	cmp	r3, #5
 8009912:	d825      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009914:	a201      	add	r2, pc, #4	@ (adr r2, 800991c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991a:	bf00      	nop
 800991c:	08009969 	.word	0x08009969
 8009920:	08009935 	.word	0x08009935
 8009924:	0800994b 	.word	0x0800994b
 8009928:	08009969 	.word	0x08009969
 800992c:	08009969 	.word	0x08009969
 8009930:	08009969 	.word	0x08009969
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009938:	3308      	adds	r3, #8
 800993a:	2101      	movs	r1, #1
 800993c:	4618      	mov	r0, r3
 800993e:	f000 ff1d 	bl	800a77c <RCCEx_PLL2_Config>
 8009942:	4603      	mov	r3, r0
 8009944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009948:	e00f      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800994a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994e:	3328      	adds	r3, #40	@ 0x28
 8009950:	2101      	movs	r1, #1
 8009952:	4618      	mov	r0, r3
 8009954:	f000 ffc4 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800995e:	e004      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009966:	e000      	b.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800996a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10b      	bne.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009972:	4b6c      	ldr	r3, [pc, #432]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009976:	f023 0107 	bic.w	r1, r3, #7
 800997a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800997e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009982:	4a68      	ldr	r2, [pc, #416]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009984:	430b      	orrs	r3, r1
 8009986:	6593      	str	r3, [r2, #88]	@ 0x58
 8009988:	e003      	b.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800998e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	f002 0320 	and.w	r3, r2, #32
 800999e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099a2:	2300      	movs	r3, #0
 80099a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099ac:	460b      	mov	r3, r1
 80099ae:	4313      	orrs	r3, r2
 80099b0:	d055      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80099b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099be:	d033      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80099c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099c4:	d82c      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ca:	d02f      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80099cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d0:	d826      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099d6:	d02b      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80099d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099dc:	d820      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e2:	d012      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80099e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e8:	d81a      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d022      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80099ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099f2:	d115      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099f8:	3308      	adds	r3, #8
 80099fa:	2100      	movs	r1, #0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 febd 	bl	800a77c <RCCEx_PLL2_Config>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a08:	e015      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a0e:	3328      	adds	r3, #40	@ 0x28
 8009a10:	2102      	movs	r1, #2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 ff64 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a1e:	e00a      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a26:	e006      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a28:	bf00      	nop
 8009a2a:	e004      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a2c:	bf00      	nop
 8009a2e:	e002      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a30:	bf00      	nop
 8009a32:	e000      	b.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d10b      	bne.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a3e:	4b39      	ldr	r3, [pc, #228]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a4e:	4a35      	ldr	r2, [pc, #212]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a50:	430b      	orrs	r3, r1
 8009a52:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a54:	e003      	b.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	d058      	beq.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a86:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009a8a:	d033      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009a8c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009a90:	d82c      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a96:	d02f      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a9c:	d826      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aa2:	d02b      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009aa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009aa8:	d820      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009aae:	d012      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ab4:	d81a      	bhi.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d022      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009abe:	d115      	bne.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fe57 	bl	800a77c <RCCEx_PLL2_Config>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ad4:	e015      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ada:	3328      	adds	r3, #40	@ 0x28
 8009adc:	2102      	movs	r1, #2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fefe 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009aea:	e00a      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009af2:	e006      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009af4:	bf00      	nop
 8009af6:	e004      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009af8:	bf00      	nop
 8009afa:	e002      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10e      	bne.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b0a:	4b06      	ldr	r3, [pc, #24]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b0e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b1a:	4a02      	ldr	r2, [pc, #8]	@ (8009b24 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b20:	e006      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009b22:	bf00      	nop
 8009b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009b3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b40:	2300      	movs	r3, #0
 8009b42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	d055      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b58:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b5c:	d033      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009b5e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009b62:	d82c      	bhi.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b68:	d02f      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b6e:	d826      	bhi.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b70:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b74:	d02b      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009b76:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009b7a:	d820      	bhi.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b80:	d012      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b86:	d81a      	bhi.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d022      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b90:	d115      	bne.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b96:	3308      	adds	r3, #8
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f000 fdee 	bl	800a77c <RCCEx_PLL2_Config>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ba6:	e015      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bac:	3328      	adds	r3, #40	@ 0x28
 8009bae:	2102      	movs	r1, #2
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 fe95 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009bbc:	e00a      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bc4:	e006      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bc6:	bf00      	nop
 8009bc8:	e004      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bca:	bf00      	nop
 8009bcc:	e002      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bce:	bf00      	nop
 8009bd0:	e000      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10b      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009bdc:	4ba1      	ldr	r3, [pc, #644]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009bec:	4a9d      	ldr	r2, [pc, #628]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bf2:	e003      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f002 0308 	and.w	r3, r2, #8
 8009c08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c16:	460b      	mov	r3, r1
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	d01e      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c28:	d10c      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c2e:	3328      	adds	r3, #40	@ 0x28
 8009c30:	2102      	movs	r1, #2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f000 fe54 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d002      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009c44:	4b87      	ldr	r3, [pc, #540]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c48:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c54:	4a83      	ldr	r2, [pc, #524]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c56:	430b      	orrs	r3, r1
 8009c58:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c62:	f002 0310 	and.w	r3, r2, #16
 8009c66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009c70:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009c74:	460b      	mov	r3, r1
 8009c76:	4313      	orrs	r3, r2
 8009c78:	d01e      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c86:	d10c      	bne.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c8c:	3328      	adds	r3, #40	@ 0x28
 8009c8e:	2102      	movs	r1, #2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fe25 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ca2:	4b70      	ldr	r3, [pc, #448]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ca6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cb2:	4a6c      	ldr	r2, [pc, #432]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cb4:	430b      	orrs	r3, r1
 8009cb6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009cc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	d03e      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ce4:	d022      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009ce6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009cea:	d81b      	bhi.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d003      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cf4:	d00b      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009cf6:	e015      	b.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	2100      	movs	r1, #0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fd3b 	bl	800a77c <RCCEx_PLL2_Config>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d0c:	e00f      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	3328      	adds	r3, #40	@ 0x28
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 fde2 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d22:	e004      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d2a:	e000      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10b      	bne.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d36:	4b4b      	ldr	r3, [pc, #300]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d46:	4a47      	ldr	r2, [pc, #284]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d48:	430b      	orrs	r3, r1
 8009d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d4c:	e003      	b.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009d62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d64:	2300      	movs	r3, #0
 8009d66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d68:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	d03b      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d7e:	d01f      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009d80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d84:	d818      	bhi.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d8a:	d003      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d90:	d007      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009d92:	e011      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d94:	4b33      	ldr	r3, [pc, #204]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d98:	4a32      	ldr	r2, [pc, #200]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009da0:	e00f      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da6:	3328      	adds	r3, #40	@ 0x28
 8009da8:	2101      	movs	r1, #1
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 fd98 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009db0:	4603      	mov	r3, r0
 8009db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009db6:	e004      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dbe:	e000      	b.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d10b      	bne.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009dca:	4b26      	ldr	r3, [pc, #152]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dda:	4a22      	ldr	r2, [pc, #136]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	6553      	str	r3, [r2, #84]	@ 0x54
 8009de0:	e003      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009df6:	673b      	str	r3, [r7, #112]	@ 0x70
 8009df8:	2300      	movs	r3, #0
 8009dfa:	677b      	str	r3, [r7, #116]	@ 0x74
 8009dfc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009e00:	460b      	mov	r3, r1
 8009e02:	4313      	orrs	r3, r2
 8009e04:	d034      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d003      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e14:	d007      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009e16:	e011      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e18:	4b12      	ldr	r3, [pc, #72]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1c:	4a11      	ldr	r2, [pc, #68]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e24:	e00e      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	2102      	movs	r1, #2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fca4 	bl	800a77c <RCCEx_PLL2_Config>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e3a:	e003      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10d      	bne.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e4c:	4b05      	ldr	r3, [pc, #20]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e50:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e5a:	4a02      	ldr	r2, [pc, #8]	@ (8009e64 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e60:	e006      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009e62:	bf00      	nop
 8009e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e7e:	2300      	movs	r3, #0
 8009e80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e82:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009e86:	460b      	mov	r3, r1
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	d00c      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e90:	3328      	adds	r3, #40	@ 0x28
 8009e92:	2102      	movs	r1, #2
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 fd23 	bl	800a8e0 <RCCEx_PLL3_Config>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009eb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009eb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	d038      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ece:	d018      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009ed0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ed4:	d811      	bhi.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ed6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009eda:	d014      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ee0:	d80b      	bhi.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d011      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eea:	d106      	bne.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eec:	4bc3      	ldr	r3, [pc, #780]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef0:	4ac2      	ldr	r2, [pc, #776]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009ef8:	e008      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f00:	e004      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f02:	bf00      	nop
 8009f04:	e002      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f06:	bf00      	nop
 8009f08:	e000      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10b      	bne.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f14:	4bb9      	ldr	r3, [pc, #740]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f24:	4ab5      	ldr	r2, [pc, #724]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f26:	430b      	orrs	r3, r1
 8009f28:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f2a:	e003      	b.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009f40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f42:	2300      	movs	r3, #0
 8009f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	d009      	beq.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f50:	4baa      	ldr	r3, [pc, #680]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f5e:	4aa7      	ldr	r2, [pc, #668]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f60:	430b      	orrs	r3, r1
 8009f62:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009f70:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f72:	2300      	movs	r3, #0
 8009f74:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	d00a      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f80:	4b9e      	ldr	r3, [pc, #632]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009f90:	4a9a      	ldr	r2, [pc, #616]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f92:	430b      	orrs	r3, r1
 8009f94:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fa8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009fac:	460b      	mov	r3, r1
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	d009      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fb2:	4b92      	ldr	r3, [pc, #584]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fb6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fc0:	4a8e      	ldr	r2, [pc, #568]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc2:	430b      	orrs	r3, r1
 8009fc4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009fd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fd8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	d00e      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fe2:	4b86      	ldr	r3, [pc, #536]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	4a85      	ldr	r2, [pc, #532]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fe8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009fec:	6113      	str	r3, [r2, #16]
 8009fee:	4b83      	ldr	r3, [pc, #524]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ff0:	6919      	ldr	r1, [r3, #16]
 8009ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009ffa:	4a80      	ldr	r2, [pc, #512]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a00c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a00e:	2300      	movs	r3, #0
 800a010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a012:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a016:	460b      	mov	r3, r1
 800a018:	4313      	orrs	r3, r2
 800a01a:	d009      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a01c:	4b77      	ldr	r3, [pc, #476]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a01e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a020:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02a:	4a74      	ldr	r2, [pc, #464]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a02c:	430b      	orrs	r3, r1
 800a02e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a03c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a03e:	2300      	movs	r3, #0
 800a040:	637b      	str	r3, [r7, #52]	@ 0x34
 800a042:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a046:	460b      	mov	r3, r1
 800a048:	4313      	orrs	r3, r2
 800a04a:	d00a      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a04c:	4b6b      	ldr	r3, [pc, #428]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a04e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a050:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a058:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a05c:	4a67      	ldr	r2, [pc, #412]	@ (800a1fc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a05e:	430b      	orrs	r3, r1
 800a060:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	2100      	movs	r1, #0
 800a06c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a074:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a078:	460b      	mov	r3, r1
 800a07a:	4313      	orrs	r3, r2
 800a07c:	d011      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a082:	3308      	adds	r3, #8
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fb78 	bl	800a77c <RCCEx_PLL2_Config>
 800a08c:	4603      	mov	r3, r0
 800a08e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a09e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	6239      	str	r1, [r7, #32]
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	d011      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fb58 	bl	800a77c <RCCEx_PLL2_Config>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	61b9      	str	r1, [r7, #24]
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	d011      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a102:	3308      	adds	r3, #8
 800a104:	2102      	movs	r1, #2
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fb38 	bl	800a77c <RCCEx_PLL2_Config>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a11e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	2100      	movs	r1, #0
 800a12c:	6139      	str	r1, [r7, #16]
 800a12e:	f003 0308 	and.w	r3, r3, #8
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a138:	460b      	mov	r3, r1
 800a13a:	4313      	orrs	r3, r2
 800a13c:	d011      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a142:	3328      	adds	r3, #40	@ 0x28
 800a144:	2100      	movs	r1, #0
 800a146:	4618      	mov	r0, r3
 800a148:	f000 fbca 	bl	800a8e0 <RCCEx_PLL3_Config>
 800a14c:	4603      	mov	r3, r0
 800a14e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a15e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	2100      	movs	r1, #0
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	f003 0310 	and.w	r3, r3, #16
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a178:	460b      	mov	r3, r1
 800a17a:	4313      	orrs	r3, r2
 800a17c:	d011      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a182:	3328      	adds	r3, #40	@ 0x28
 800a184:	2101      	movs	r1, #1
 800a186:	4618      	mov	r0, r3
 800a188:	f000 fbaa 	bl	800a8e0 <RCCEx_PLL3_Config>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a19a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a19e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	6039      	str	r1, [r7, #0]
 800a1ae:	f003 0320 	and.w	r3, r3, #32
 800a1b2:	607b      	str	r3, [r7, #4]
 800a1b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	d011      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c2:	3328      	adds	r3, #40	@ 0x28
 800a1c4:	2102      	movs	r1, #2
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 fb8a 	bl	800a8e0 <RCCEx_PLL3_Config>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a1e2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	e000      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1fc:	58024400 	.word	0x58024400

0800a200 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a204:	f7fe fd54 	bl	8008cb0 <HAL_RCC_GetHCLKFreq>
 800a208:	4602      	mov	r2, r0
 800a20a:	4b06      	ldr	r3, [pc, #24]	@ (800a224 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	091b      	lsrs	r3, r3, #4
 800a210:	f003 0307 	and.w	r3, r3, #7
 800a214:	4904      	ldr	r1, [pc, #16]	@ (800a228 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a216:	5ccb      	ldrb	r3, [r1, r3]
 800a218:	f003 031f 	and.w	r3, r3, #31
 800a21c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a220:	4618      	mov	r0, r3
 800a222:	bd80      	pop	{r7, pc}
 800a224:	58024400 	.word	0x58024400
 800a228:	08014eb8 	.word	0x08014eb8

0800a22c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b089      	sub	sp, #36	@ 0x24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a234:	4ba1      	ldr	r3, [pc, #644]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a238:	f003 0303 	and.w	r3, r3, #3
 800a23c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a23e:	4b9f      	ldr	r3, [pc, #636]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a242:	0b1b      	lsrs	r3, r3, #12
 800a244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a248:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a24a:	4b9c      	ldr	r3, [pc, #624]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24e:	091b      	lsrs	r3, r3, #4
 800a250:	f003 0301 	and.w	r3, r3, #1
 800a254:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a256:	4b99      	ldr	r3, [pc, #612]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a25a:	08db      	lsrs	r3, r3, #3
 800a25c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	fb02 f303 	mul.w	r3, r2, r3
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 8111 	beq.w	800a49c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	f000 8083 	beq.w	800a388 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	2b02      	cmp	r3, #2
 800a286:	f200 80a1 	bhi.w	800a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d056      	beq.n	800a344 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a296:	e099      	b.n	800a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a298:	4b88      	ldr	r3, [pc, #544]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 0320 	and.w	r3, r3, #32
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d02d      	beq.n	800a300 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2a4:	4b85      	ldr	r3, [pc, #532]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	08db      	lsrs	r3, r3, #3
 800a2aa:	f003 0303 	and.w	r3, r3, #3
 800a2ae:	4a84      	ldr	r2, [pc, #528]	@ (800a4c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	ee07 3a90 	vmov	s15, r3
 800a2bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ce:	4b7b      	ldr	r3, [pc, #492]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d6:	ee07 3a90 	vmov	s15, r3
 800a2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a4c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2fe:	e087      	b.n	800a410 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	ee07 3a90 	vmov	s15, r3
 800a306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a30a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a312:	4b6a      	ldr	r3, [pc, #424]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a322:	ed97 6a03 	vldr	s12, [r7, #12]
 800a326:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a4c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a342:	e065      	b.n	800a410 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	ee07 3a90 	vmov	s15, r3
 800a34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a4cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a356:	4b59      	ldr	r3, [pc, #356]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35e:	ee07 3a90 	vmov	s15, r3
 800a362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a366:	ed97 6a03 	vldr	s12, [r7, #12]
 800a36a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a4c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a36e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a37a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a386:	e043      	b.n	800a410 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a392:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a4d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a39a:	4b48      	ldr	r3, [pc, #288]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a4c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3ca:	e021      	b.n	800a410 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	ee07 3a90 	vmov	s15, r3
 800a3d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a4cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a3da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3de:	4b37      	ldr	r3, [pc, #220]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e6:	ee07 3a90 	vmov	s15, r3
 800a3ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a4c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a40a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a40e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a410:	4b2a      	ldr	r3, [pc, #168]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a414:	0a5b      	lsrs	r3, r3, #9
 800a416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a422:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a426:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a42a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a42e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a436:	ee17 2a90 	vmov	r2, s15
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a43e:	4b1f      	ldr	r3, [pc, #124]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a442:	0c1b      	lsrs	r3, r3, #16
 800a444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a448:	ee07 3a90 	vmov	s15, r3
 800a44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a450:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a454:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a458:	edd7 6a07 	vldr	s13, [r7, #28]
 800a45c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a464:	ee17 2a90 	vmov	r2, s15
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a46c:	4b13      	ldr	r3, [pc, #76]	@ (800a4bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a46e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a470:	0e1b      	lsrs	r3, r3, #24
 800a472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a476:	ee07 3a90 	vmov	s15, r3
 800a47a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a482:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a486:	edd7 6a07 	vldr	s13, [r7, #28]
 800a48a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a48e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a492:	ee17 2a90 	vmov	r2, s15
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a49a:	e008      	b.n	800a4ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	609a      	str	r2, [r3, #8]
}
 800a4ae:	bf00      	nop
 800a4b0:	3724      	adds	r7, #36	@ 0x24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	58024400 	.word	0x58024400
 800a4c0:	03d09000 	.word	0x03d09000
 800a4c4:	46000000 	.word	0x46000000
 800a4c8:	4c742400 	.word	0x4c742400
 800a4cc:	4a742400 	.word	0x4a742400
 800a4d0:	4af42400 	.word	0x4af42400

0800a4d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b089      	sub	sp, #36	@ 0x24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a4dc:	4ba1      	ldr	r3, [pc, #644]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e0:	f003 0303 	and.w	r3, r3, #3
 800a4e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a4e6:	4b9f      	ldr	r3, [pc, #636]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ea:	0d1b      	lsrs	r3, r3, #20
 800a4ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a4f2:	4b9c      	ldr	r3, [pc, #624]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f6:	0a1b      	lsrs	r3, r3, #8
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a4fe:	4b99      	ldr	r3, [pc, #612]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a502:	08db      	lsrs	r3, r3, #3
 800a504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	fb02 f303 	mul.w	r3, r2, r3
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a516:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 8111 	beq.w	800a744 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	2b02      	cmp	r3, #2
 800a526:	f000 8083 	beq.w	800a630 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	f200 80a1 	bhi.w	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d056      	beq.n	800a5ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a53e:	e099      	b.n	800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a540:	4b88      	ldr	r3, [pc, #544]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0320 	and.w	r3, r3, #32
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d02d      	beq.n	800a5a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a54c:	4b85      	ldr	r3, [pc, #532]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	08db      	lsrs	r3, r3, #3
 800a552:	f003 0303 	and.w	r3, r3, #3
 800a556:	4a84      	ldr	r2, [pc, #528]	@ (800a768 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a558:	fa22 f303 	lsr.w	r3, r2, r3
 800a55c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	ee07 3a90 	vmov	s15, r3
 800a564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a576:	4b7b      	ldr	r3, [pc, #492]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a57e:	ee07 3a90 	vmov	s15, r3
 800a582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a586:	ed97 6a03 	vldr	s12, [r7, #12]
 800a58a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a76c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a5a6:	e087      	b.n	800a6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	ee07 3a90 	vmov	s15, r3
 800a5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a770 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ba:	4b6a      	ldr	r3, [pc, #424]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c2:	ee07 3a90 	vmov	s15, r3
 800a5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a76c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ea:	e065      	b.n	800a6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	ee07 3a90 	vmov	s15, r3
 800a5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5fe:	4b59      	ldr	r3, [pc, #356]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a606:	ee07 3a90 	vmov	s15, r3
 800a60a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a60e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a612:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a76c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a61a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a61e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a62a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a62e:	e043      	b.n	800a6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	ee07 3a90 	vmov	s15, r3
 800a636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a63a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a63e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a642:	4b48      	ldr	r3, [pc, #288]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64a:	ee07 3a90 	vmov	s15, r3
 800a64e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a652:	ed97 6a03 	vldr	s12, [r7, #12]
 800a656:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a76c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a65a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a65e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a662:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a66a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a66e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a672:	e021      	b.n	800a6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a774 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a686:	4b37      	ldr	r3, [pc, #220]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a68e:	ee07 3a90 	vmov	s15, r3
 800a692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a696:	ed97 6a03 	vldr	s12, [r7, #12]
 800a69a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a76c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a6b8:	4b2a      	ldr	r3, [pc, #168]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6bc:	0a5b      	lsrs	r3, r3, #9
 800a6be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6de:	ee17 2a90 	vmov	r2, s15
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a6e6:	4b1f      	ldr	r3, [pc, #124]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ea:	0c1b      	lsrs	r3, r3, #16
 800a6ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6f0:	ee07 3a90 	vmov	s15, r3
 800a6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a700:	edd7 6a07 	vldr	s13, [r7, #28]
 800a704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a70c:	ee17 2a90 	vmov	r2, s15
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a714:	4b13      	ldr	r3, [pc, #76]	@ (800a764 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a718:	0e1b      	lsrs	r3, r3, #24
 800a71a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a72a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a72e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a73a:	ee17 2a90 	vmov	r2, s15
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a742:	e008      	b.n	800a756 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	609a      	str	r2, [r3, #8]
}
 800a756:	bf00      	nop
 800a758:	3724      	adds	r7, #36	@ 0x24
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	58024400 	.word	0x58024400
 800a768:	03d09000 	.word	0x03d09000
 800a76c:	46000000 	.word	0x46000000
 800a770:	4c742400 	.word	0x4c742400
 800a774:	4a742400 	.word	0x4a742400
 800a778:	4af42400 	.word	0x4af42400

0800a77c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a78a:	4b53      	ldr	r3, [pc, #332]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78e:	f003 0303 	and.w	r3, r3, #3
 800a792:	2b03      	cmp	r3, #3
 800a794:	d101      	bne.n	800a79a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e099      	b.n	800a8ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a79a:	4b4f      	ldr	r3, [pc, #316]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a4e      	ldr	r2, [pc, #312]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a7a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a7a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7a6:	f7fb f815 	bl	80057d4 <HAL_GetTick>
 800a7aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7ac:	e008      	b.n	800a7c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a7ae:	f7fb f811 	bl	80057d4 <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d901      	bls.n	800a7c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e086      	b.n	800a8ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a7c0:	4b45      	ldr	r3, [pc, #276]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1f0      	bne.n	800a7ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a7cc:	4b42      	ldr	r3, [pc, #264]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	031b      	lsls	r3, r3, #12
 800a7da:	493f      	ldr	r1, [pc, #252]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	628b      	str	r3, [r1, #40]	@ 0x28
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	025b      	lsls	r3, r3, #9
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	431a      	orrs	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	041b      	lsls	r3, r3, #16
 800a7fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a802:	431a      	orrs	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	3b01      	subs	r3, #1
 800a80a:	061b      	lsls	r3, r3, #24
 800a80c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a810:	4931      	ldr	r1, [pc, #196]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a812:	4313      	orrs	r3, r2
 800a814:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a816:	4b30      	ldr	r3, [pc, #192]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	492d      	ldr	r1, [pc, #180]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a824:	4313      	orrs	r3, r2
 800a826:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a828:	4b2b      	ldr	r3, [pc, #172]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82c:	f023 0220 	bic.w	r2, r3, #32
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	4928      	ldr	r1, [pc, #160]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a836:	4313      	orrs	r3, r2
 800a838:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a83a:	4b27      	ldr	r3, [pc, #156]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a83e:	4a26      	ldr	r2, [pc, #152]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a840:	f023 0310 	bic.w	r3, r3, #16
 800a844:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a846:	4b24      	ldr	r3, [pc, #144]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a84a:	4b24      	ldr	r3, [pc, #144]	@ (800a8dc <RCCEx_PLL2_Config+0x160>)
 800a84c:	4013      	ands	r3, r2
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	69d2      	ldr	r2, [r2, #28]
 800a852:	00d2      	lsls	r2, r2, #3
 800a854:	4920      	ldr	r1, [pc, #128]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a856:	4313      	orrs	r3, r2
 800a858:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a85a:	4b1f      	ldr	r3, [pc, #124]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85e:	4a1e      	ldr	r2, [pc, #120]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a860:	f043 0310 	orr.w	r3, r3, #16
 800a864:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d106      	bne.n	800a87a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a86c:	4b1a      	ldr	r3, [pc, #104]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a870:	4a19      	ldr	r2, [pc, #100]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a872:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a878:	e00f      	b.n	800a89a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d106      	bne.n	800a88e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a880:	4b15      	ldr	r3, [pc, #84]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a884:	4a14      	ldr	r2, [pc, #80]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a88a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a88c:	e005      	b.n	800a89a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a88e:	4b12      	ldr	r3, [pc, #72]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a892:	4a11      	ldr	r2, [pc, #68]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a894:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a898:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a89a:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a0e      	ldr	r2, [pc, #56]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a8a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a8a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8a6:	f7fa ff95 	bl	80057d4 <HAL_GetTick>
 800a8aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8ac:	e008      	b.n	800a8c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a8ae:	f7fa ff91 	bl	80057d4 <HAL_GetTick>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	2b02      	cmp	r3, #2
 800a8ba:	d901      	bls.n	800a8c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e006      	b.n	800a8ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a8c0:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <RCCEx_PLL2_Config+0x15c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d0f0      	beq.n	800a8ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	58024400 	.word	0x58024400
 800a8dc:	ffff0007 	.word	0xffff0007

0800a8e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8ee:	4b53      	ldr	r3, [pc, #332]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f2:	f003 0303 	and.w	r3, r3, #3
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d101      	bne.n	800a8fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e099      	b.n	800aa32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a8fe:	4b4f      	ldr	r3, [pc, #316]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a4e      	ldr	r2, [pc, #312]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a90a:	f7fa ff63 	bl	80057d4 <HAL_GetTick>
 800a90e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a910:	e008      	b.n	800a924 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a912:	f7fa ff5f 	bl	80057d4 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d901      	bls.n	800a924 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a920:	2303      	movs	r3, #3
 800a922:	e086      	b.n	800aa32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a924:	4b45      	ldr	r3, [pc, #276]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1f0      	bne.n	800a912 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a930:	4b42      	ldr	r3, [pc, #264]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a934:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	051b      	lsls	r3, r3, #20
 800a93e:	493f      	ldr	r1, [pc, #252]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a940:	4313      	orrs	r3, r2
 800a942:	628b      	str	r3, [r1, #40]	@ 0x28
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	3b01      	subs	r3, #1
 800a94a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	3b01      	subs	r3, #1
 800a954:	025b      	lsls	r3, r3, #9
 800a956:	b29b      	uxth	r3, r3
 800a958:	431a      	orrs	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	3b01      	subs	r3, #1
 800a960:	041b      	lsls	r3, r3, #16
 800a962:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a966:	431a      	orrs	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	061b      	lsls	r3, r3, #24
 800a970:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a974:	4931      	ldr	r1, [pc, #196]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a976:	4313      	orrs	r3, r2
 800a978:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a97a:	4b30      	ldr	r3, [pc, #192]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a97e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	492d      	ldr	r1, [pc, #180]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a98c:	4b2b      	ldr	r3, [pc, #172]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a98e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a990:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	4928      	ldr	r1, [pc, #160]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a99a:	4313      	orrs	r3, r2
 800a99c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a99e:	4b27      	ldr	r3, [pc, #156]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a2:	4a26      	ldr	r2, [pc, #152]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a9aa:	4b24      	ldr	r3, [pc, #144]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9ae:	4b24      	ldr	r3, [pc, #144]	@ (800aa40 <RCCEx_PLL3_Config+0x160>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	69d2      	ldr	r2, [r2, #28]
 800a9b6:	00d2      	lsls	r2, r2, #3
 800a9b8:	4920      	ldr	r1, [pc, #128]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a9be:	4b1f      	ldr	r3, [pc, #124]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c2:	4a1e      	ldr	r2, [pc, #120]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a9d0:	4b1a      	ldr	r3, [pc, #104]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9d4:	4a19      	ldr	r2, [pc, #100]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a9da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9dc:	e00f      	b.n	800a9fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d106      	bne.n	800a9f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a9e4:	4b15      	ldr	r3, [pc, #84]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e8:	4a14      	ldr	r2, [pc, #80]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a9ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9f0:	e005      	b.n	800a9fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a9f2:	4b12      	ldr	r3, [pc, #72]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f6:	4a11      	ldr	r2, [pc, #68]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800a9f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a9fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a0e      	ldr	r2, [pc, #56]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800aa04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa0a:	f7fa fee3 	bl	80057d4 <HAL_GetTick>
 800aa0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa10:	e008      	b.n	800aa24 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa12:	f7fa fedf 	bl	80057d4 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	d901      	bls.n	800aa24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e006      	b.n	800aa32 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa24:	4b05      	ldr	r3, [pc, #20]	@ (800aa3c <RCCEx_PLL3_Config+0x15c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0f0      	beq.n	800aa12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	58024400 	.word	0x58024400
 800aa40:	ffff0007 	.word	0xffff0007

0800aa44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d101      	bne.n	800aa56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	e049      	b.n	800aaea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f841 	bl	800aaf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	4619      	mov	r1, r3
 800aa82:	4610      	mov	r0, r2
 800aa84:	f000 f9e8 	bl	800ae58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800aafa:	bf00      	nop
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
	...

0800ab08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d001      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e054      	b.n	800abca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	68da      	ldr	r2, [r3, #12]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f042 0201 	orr.w	r2, r2, #1
 800ab36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a26      	ldr	r2, [pc, #152]	@ (800abd8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d022      	beq.n	800ab88 <HAL_TIM_Base_Start_IT+0x80>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab4a:	d01d      	beq.n	800ab88 <HAL_TIM_Base_Start_IT+0x80>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a22      	ldr	r2, [pc, #136]	@ (800abdc <HAL_TIM_Base_Start_IT+0xd4>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d018      	beq.n	800ab88 <HAL_TIM_Base_Start_IT+0x80>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a21      	ldr	r2, [pc, #132]	@ (800abe0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d013      	beq.n	800ab88 <HAL_TIM_Base_Start_IT+0x80>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a1f      	ldr	r2, [pc, #124]	@ (800abe4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d00e      	beq.n	800ab88 <HAL_TIM_Base_Start_IT+0x80>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a1e      	ldr	r2, [pc, #120]	@ (800abe8 <HAL_TIM_Base_Start_IT+0xe0>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d009      	beq.n	800ab88 <HAL_TIM_Base_Start_IT+0x80>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a1c      	ldr	r2, [pc, #112]	@ (800abec <HAL_TIM_Base_Start_IT+0xe4>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d004      	beq.n	800ab88 <HAL_TIM_Base_Start_IT+0x80>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a1b      	ldr	r2, [pc, #108]	@ (800abf0 <HAL_TIM_Base_Start_IT+0xe8>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d115      	bne.n	800abb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689a      	ldr	r2, [r3, #8]
 800ab8e:	4b19      	ldr	r3, [pc, #100]	@ (800abf4 <HAL_TIM_Base_Start_IT+0xec>)
 800ab90:	4013      	ands	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b06      	cmp	r3, #6
 800ab98:	d015      	beq.n	800abc6 <HAL_TIM_Base_Start_IT+0xbe>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aba0:	d011      	beq.n	800abc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f042 0201 	orr.w	r2, r2, #1
 800abb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb2:	e008      	b.n	800abc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f042 0201 	orr.w	r2, r2, #1
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	e000      	b.n	800abc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	40010000 	.word	0x40010000
 800abdc:	40000400 	.word	0x40000400
 800abe0:	40000800 	.word	0x40000800
 800abe4:	40000c00 	.word	0x40000c00
 800abe8:	40010400 	.word	0x40010400
 800abec:	40001800 	.word	0x40001800
 800abf0:	40014000 	.word	0x40014000
 800abf4:	00010007 	.word	0x00010007

0800abf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d020      	beq.n	800ac5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f003 0302 	and.w	r3, r3, #2
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01b      	beq.n	800ac5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f06f 0202 	mvn.w	r2, #2
 800ac2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2201      	movs	r2, #1
 800ac32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	f003 0303 	and.w	r3, r3, #3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d003      	beq.n	800ac4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f8e9 	bl	800ae1a <HAL_TIM_IC_CaptureCallback>
 800ac48:	e005      	b.n	800ac56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f8db 	bl	800ae06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f8ec 	bl	800ae2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	f003 0304 	and.w	r3, r3, #4
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d020      	beq.n	800aca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01b      	beq.n	800aca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f06f 0204 	mvn.w	r2, #4
 800ac78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d003      	beq.n	800ac96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f8c3 	bl	800ae1a <HAL_TIM_IC_CaptureCallback>
 800ac94:	e005      	b.n	800aca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f8b5 	bl	800ae06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f8c6 	bl	800ae2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	f003 0308 	and.w	r3, r3, #8
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d020      	beq.n	800acf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f003 0308 	and.w	r3, r3, #8
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d01b      	beq.n	800acf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f06f 0208 	mvn.w	r2, #8
 800acc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2204      	movs	r2, #4
 800acca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	69db      	ldr	r3, [r3, #28]
 800acd2:	f003 0303 	and.w	r3, r3, #3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f89d 	bl	800ae1a <HAL_TIM_IC_CaptureCallback>
 800ace0:	e005      	b.n	800acee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f88f 	bl	800ae06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f8a0 	bl	800ae2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	f003 0310 	and.w	r3, r3, #16
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d020      	beq.n	800ad40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f003 0310 	and.w	r3, r3, #16
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01b      	beq.n	800ad40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f06f 0210 	mvn.w	r2, #16
 800ad10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2208      	movs	r2, #8
 800ad16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f877 	bl	800ae1a <HAL_TIM_IC_CaptureCallback>
 800ad2c:	e005      	b.n	800ad3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f869 	bl	800ae06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f87a 	bl	800ae2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00c      	beq.n	800ad64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d007      	beq.n	800ad64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f06f 0201 	mvn.w	r2, #1
 800ad5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f7f9 ffb8 	bl	8004cd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d104      	bne.n	800ad78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00c      	beq.n	800ad92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d007      	beq.n	800ad92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ad8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f90d 	bl	800afac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00c      	beq.n	800adb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d007      	beq.n	800adb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800adae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f905 	bl	800afc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00c      	beq.n	800adda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d007      	beq.n	800adda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800add2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f834 	bl	800ae42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00c      	beq.n	800adfe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f003 0320 	and.w	r3, r3, #32
 800adea:	2b00      	cmp	r3, #0
 800adec:	d007      	beq.n	800adfe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f06f 0220 	mvn.w	r2, #32
 800adf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f8cd 	bl	800af98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adfe:	bf00      	nop
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae0e:	bf00      	nop
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae22:	bf00      	nop
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr

0800ae42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae42:	b480      	push	{r7}
 800ae44:	b083      	sub	sp, #12
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae4a:	bf00      	nop
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
	...

0800ae58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a43      	ldr	r2, [pc, #268]	@ (800af78 <TIM_Base_SetConfig+0x120>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d013      	beq.n	800ae98 <TIM_Base_SetConfig+0x40>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae76:	d00f      	beq.n	800ae98 <TIM_Base_SetConfig+0x40>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a40      	ldr	r2, [pc, #256]	@ (800af7c <TIM_Base_SetConfig+0x124>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d00b      	beq.n	800ae98 <TIM_Base_SetConfig+0x40>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a3f      	ldr	r2, [pc, #252]	@ (800af80 <TIM_Base_SetConfig+0x128>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d007      	beq.n	800ae98 <TIM_Base_SetConfig+0x40>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a3e      	ldr	r2, [pc, #248]	@ (800af84 <TIM_Base_SetConfig+0x12c>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d003      	beq.n	800ae98 <TIM_Base_SetConfig+0x40>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a3d      	ldr	r2, [pc, #244]	@ (800af88 <TIM_Base_SetConfig+0x130>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d108      	bne.n	800aeaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a32      	ldr	r2, [pc, #200]	@ (800af78 <TIM_Base_SetConfig+0x120>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d01f      	beq.n	800aef2 <TIM_Base_SetConfig+0x9a>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeb8:	d01b      	beq.n	800aef2 <TIM_Base_SetConfig+0x9a>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a2f      	ldr	r2, [pc, #188]	@ (800af7c <TIM_Base_SetConfig+0x124>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d017      	beq.n	800aef2 <TIM_Base_SetConfig+0x9a>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a2e      	ldr	r2, [pc, #184]	@ (800af80 <TIM_Base_SetConfig+0x128>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d013      	beq.n	800aef2 <TIM_Base_SetConfig+0x9a>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a2d      	ldr	r2, [pc, #180]	@ (800af84 <TIM_Base_SetConfig+0x12c>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d00f      	beq.n	800aef2 <TIM_Base_SetConfig+0x9a>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a2c      	ldr	r2, [pc, #176]	@ (800af88 <TIM_Base_SetConfig+0x130>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d00b      	beq.n	800aef2 <TIM_Base_SetConfig+0x9a>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a2b      	ldr	r2, [pc, #172]	@ (800af8c <TIM_Base_SetConfig+0x134>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d007      	beq.n	800aef2 <TIM_Base_SetConfig+0x9a>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a2a      	ldr	r2, [pc, #168]	@ (800af90 <TIM_Base_SetConfig+0x138>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d003      	beq.n	800aef2 <TIM_Base_SetConfig+0x9a>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a29      	ldr	r2, [pc, #164]	@ (800af94 <TIM_Base_SetConfig+0x13c>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d108      	bne.n	800af04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	4313      	orrs	r3, r2
 800af02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	4313      	orrs	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a14      	ldr	r2, [pc, #80]	@ (800af78 <TIM_Base_SetConfig+0x120>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d00f      	beq.n	800af4a <TIM_Base_SetConfig+0xf2>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a16      	ldr	r2, [pc, #88]	@ (800af88 <TIM_Base_SetConfig+0x130>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d00b      	beq.n	800af4a <TIM_Base_SetConfig+0xf2>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	4a15      	ldr	r2, [pc, #84]	@ (800af8c <TIM_Base_SetConfig+0x134>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d007      	beq.n	800af4a <TIM_Base_SetConfig+0xf2>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	4a14      	ldr	r2, [pc, #80]	@ (800af90 <TIM_Base_SetConfig+0x138>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d003      	beq.n	800af4a <TIM_Base_SetConfig+0xf2>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	4a13      	ldr	r2, [pc, #76]	@ (800af94 <TIM_Base_SetConfig+0x13c>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d103      	bne.n	800af52 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	691a      	ldr	r2, [r3, #16]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f043 0204 	orr.w	r2, r3, #4
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2201      	movs	r2, #1
 800af62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	601a      	str	r2, [r3, #0]
}
 800af6a:	bf00      	nop
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	40010000 	.word	0x40010000
 800af7c:	40000400 	.word	0x40000400
 800af80:	40000800 	.word	0x40000800
 800af84:	40000c00 	.word	0x40000c00
 800af88:	40010400 	.word	0x40010400
 800af8c:	40014000 	.word	0x40014000
 800af90:	40014400 	.word	0x40014400
 800af94:	40014800 	.word	0x40014800

0800af98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e042      	b.n	800b06c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afec:	2b00      	cmp	r3, #0
 800afee:	d106      	bne.n	800affe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7f9 ffe1 	bl	8004fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2224      	movs	r2, #36	@ 0x24
 800b002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 0201 	bic.w	r2, r2, #1
 800b014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f001 fa60 	bl	800c4e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fcf5 	bl	800ba14 <UART_SetConfig>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d101      	bne.n	800b034 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e01b      	b.n	800b06c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689a      	ldr	r2, [r3, #8]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f042 0201 	orr.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 fadf 	bl	800c628 <UART_CheckIdleState>
 800b06a:	4603      	mov	r3, r0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	@ 0x28
 800b078:	af02      	add	r7, sp, #8
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	4613      	mov	r3, r2
 800b082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b08a:	2b20      	cmp	r3, #32
 800b08c:	d17b      	bne.n	800b186 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <HAL_UART_Transmit+0x26>
 800b094:	88fb      	ldrh	r3, [r7, #6]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d101      	bne.n	800b09e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e074      	b.n	800b188 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2221      	movs	r2, #33	@ 0x21
 800b0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0ae:	f7fa fb91 	bl	80057d4 <HAL_GetTick>
 800b0b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	88fa      	ldrh	r2, [r7, #6]
 800b0b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	88fa      	ldrh	r2, [r7, #6]
 800b0c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0cc:	d108      	bne.n	800b0e0 <HAL_UART_Transmit+0x6c>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d104      	bne.n	800b0e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	61bb      	str	r3, [r7, #24]
 800b0de:	e003      	b.n	800b0e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b0e8:	e030      	b.n	800b14c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	9300      	str	r3, [sp, #0]
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2180      	movs	r1, #128	@ 0x80
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f001 fb41 	bl	800c77c <UART_WaitOnFlagUntilTimeout>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d005      	beq.n	800b10c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2220      	movs	r2, #32
 800b104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e03d      	b.n	800b188 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10b      	bne.n	800b12a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b120:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	3302      	adds	r3, #2
 800b126:	61bb      	str	r3, [r7, #24]
 800b128:	e007      	b.n	800b13a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	781a      	ldrb	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b134:	69fb      	ldr	r3, [r7, #28]
 800b136:	3301      	adds	r3, #1
 800b138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b140:	b29b      	uxth	r3, r3
 800b142:	3b01      	subs	r3, #1
 800b144:	b29a      	uxth	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b152:	b29b      	uxth	r3, r3
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1c8      	bne.n	800b0ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	2200      	movs	r2, #0
 800b160:	2140      	movs	r1, #64	@ 0x40
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f001 fb0a 	bl	800c77c <UART_WaitOnFlagUntilTimeout>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d005      	beq.n	800b17a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2220      	movs	r2, #32
 800b172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e006      	b.n	800b188 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	e000      	b.n	800b188 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b186:	2302      	movs	r3, #2
  }
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3720      	adds	r7, #32
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08a      	sub	sp, #40	@ 0x28
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	4613      	mov	r3, r2
 800b19c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1a4:	2b20      	cmp	r3, #32
 800b1a6:	d137      	bne.n	800b218 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <HAL_UART_Receive_IT+0x24>
 800b1ae:	88fb      	ldrh	r3, [r7, #6]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e030      	b.n	800b21a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a18      	ldr	r2, [pc, #96]	@ (800b224 <HAL_UART_Receive_IT+0x94>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d01f      	beq.n	800b208 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d018      	beq.n	800b208 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f4:	623b      	str	r3, [r7, #32]
 800b1f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f8:	69f9      	ldr	r1, [r7, #28]
 800b1fa:	6a3a      	ldr	r2, [r7, #32]
 800b1fc:	e841 2300 	strex	r3, r2, [r1]
 800b200:	61bb      	str	r3, [r7, #24]
   return(result);
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1e6      	bne.n	800b1d6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	461a      	mov	r2, r3
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f001 fb22 	bl	800c858 <UART_Start_Receive_IT>
 800b214:	4603      	mov	r3, r0
 800b216:	e000      	b.n	800b21a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b218:	2302      	movs	r3, #2
  }
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3728      	adds	r7, #40	@ 0x28
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	58000c00 	.word	0x58000c00

0800b228 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b0ba      	sub	sp, #232	@ 0xe8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b24e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b252:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b256:	4013      	ands	r3, r2
 800b258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b25c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b260:	2b00      	cmp	r3, #0
 800b262:	d11b      	bne.n	800b29c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b268:	f003 0320 	and.w	r3, r3, #32
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d015      	beq.n	800b29c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b274:	f003 0320 	and.w	r3, r3, #32
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d105      	bne.n	800b288 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d009      	beq.n	800b29c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8393 	beq.w	800b9b8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	4798      	blx	r3
      }
      return;
 800b29a:	e38d      	b.n	800b9b8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b29c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 8123 	beq.w	800b4ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b2a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b2aa:	4b8d      	ldr	r3, [pc, #564]	@ (800b4e0 <HAL_UART_IRQHandler+0x2b8>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b2b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b2b6:	4b8b      	ldr	r3, [pc, #556]	@ (800b4e4 <HAL_UART_IRQHandler+0x2bc>)
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f000 8116 	beq.w	800b4ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d011      	beq.n	800b2f0 <HAL_UART_IRQHandler+0xc8>
 800b2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00b      	beq.n	800b2f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2e6:	f043 0201 	orr.w	r2, r3, #1
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d011      	beq.n	800b320 <HAL_UART_IRQHandler+0xf8>
 800b2fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b300:	f003 0301 	and.w	r3, r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00b      	beq.n	800b320 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2202      	movs	r2, #2
 800b30e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b316:	f043 0204 	orr.w	r2, r3, #4
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b324:	f003 0304 	and.w	r3, r3, #4
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d011      	beq.n	800b350 <HAL_UART_IRQHandler+0x128>
 800b32c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b330:	f003 0301 	and.w	r3, r3, #1
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2204      	movs	r2, #4
 800b33e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b346:	f043 0202 	orr.w	r2, r3, #2
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b354:	f003 0308 	and.w	r3, r3, #8
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d017      	beq.n	800b38c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b360:	f003 0320 	and.w	r3, r3, #32
 800b364:	2b00      	cmp	r3, #0
 800b366:	d105      	bne.n	800b374 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b368:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b36c:	4b5c      	ldr	r3, [pc, #368]	@ (800b4e0 <HAL_UART_IRQHandler+0x2b8>)
 800b36e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00b      	beq.n	800b38c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2208      	movs	r2, #8
 800b37a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b382:	f043 0208 	orr.w	r2, r3, #8
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b394:	2b00      	cmp	r3, #0
 800b396:	d012      	beq.n	800b3be <HAL_UART_IRQHandler+0x196>
 800b398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b39c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00c      	beq.n	800b3be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b3ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3b4:	f043 0220 	orr.w	r2, r3, #32
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 82f9 	beq.w	800b9bc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3ce:	f003 0320 	and.w	r3, r3, #32
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d013      	beq.n	800b3fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3da:	f003 0320 	and.w	r3, r3, #32
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d007      	beq.n	800b3fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d003      	beq.n	800b3fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b404:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b412:	2b40      	cmp	r3, #64	@ 0x40
 800b414:	d005      	beq.n	800b422 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b416:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b41a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d054      	beq.n	800b4cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 fb3a 	bl	800ca9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b432:	2b40      	cmp	r3, #64	@ 0x40
 800b434:	d146      	bne.n	800b4c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3308      	adds	r3, #8
 800b43c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b440:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b44c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3308      	adds	r3, #8
 800b45e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b462:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b466:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b46e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b472:	e841 2300 	strex	r3, r2, [r1]
 800b476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b47a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1d9      	bne.n	800b436 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d017      	beq.n	800b4bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b492:	4a15      	ldr	r2, [pc, #84]	@ (800b4e8 <HAL_UART_IRQHandler+0x2c0>)
 800b494:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fa fe4b 	bl	8006138 <HAL_DMA_Abort_IT>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d019      	beq.n	800b4dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ba:	e00f      	b.n	800b4dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fa93 	bl	800b9e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4c2:	e00b      	b.n	800b4dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fa8f 	bl	800b9e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4ca:	e007      	b.n	800b4dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fa8b 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b4da:	e26f      	b.n	800b9bc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4dc:	bf00      	nop
    return;
 800b4de:	e26d      	b.n	800b9bc <HAL_UART_IRQHandler+0x794>
 800b4e0:	10000001 	.word	0x10000001
 800b4e4:	04000120 	.word	0x04000120
 800b4e8:	0800cb69 	.word	0x0800cb69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	f040 8203 	bne.w	800b8fc <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b4f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4fa:	f003 0310 	and.w	r3, r3, #16
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 81fc 	beq.w	800b8fc <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b508:	f003 0310 	and.w	r3, r3, #16
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 81f5 	beq.w	800b8fc <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2210      	movs	r2, #16
 800b518:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b524:	2b40      	cmp	r3, #64	@ 0x40
 800b526:	f040 816d 	bne.w	800b804 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4aa4      	ldr	r2, [pc, #656]	@ (800b7c4 <HAL_UART_IRQHandler+0x59c>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d068      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4aa1      	ldr	r2, [pc, #644]	@ (800b7c8 <HAL_UART_IRQHandler+0x5a0>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d061      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a9f      	ldr	r2, [pc, #636]	@ (800b7cc <HAL_UART_IRQHandler+0x5a4>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d05a      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a9c      	ldr	r2, [pc, #624]	@ (800b7d0 <HAL_UART_IRQHandler+0x5a8>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d053      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a9a      	ldr	r2, [pc, #616]	@ (800b7d4 <HAL_UART_IRQHandler+0x5ac>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d04c      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a97      	ldr	r2, [pc, #604]	@ (800b7d8 <HAL_UART_IRQHandler+0x5b0>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d045      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a95      	ldr	r2, [pc, #596]	@ (800b7dc <HAL_UART_IRQHandler+0x5b4>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d03e      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a92      	ldr	r2, [pc, #584]	@ (800b7e0 <HAL_UART_IRQHandler+0x5b8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d037      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a90      	ldr	r2, [pc, #576]	@ (800b7e4 <HAL_UART_IRQHandler+0x5bc>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d030      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a8d      	ldr	r2, [pc, #564]	@ (800b7e8 <HAL_UART_IRQHandler+0x5c0>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d029      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a8b      	ldr	r2, [pc, #556]	@ (800b7ec <HAL_UART_IRQHandler+0x5c4>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d022      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a88      	ldr	r2, [pc, #544]	@ (800b7f0 <HAL_UART_IRQHandler+0x5c8>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d01b      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a86      	ldr	r2, [pc, #536]	@ (800b7f4 <HAL_UART_IRQHandler+0x5cc>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d014      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a83      	ldr	r2, [pc, #524]	@ (800b7f8 <HAL_UART_IRQHandler+0x5d0>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d00d      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a81      	ldr	r2, [pc, #516]	@ (800b7fc <HAL_UART_IRQHandler+0x5d4>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d006      	beq.n	800b60a <HAL_UART_IRQHandler+0x3e2>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a7e      	ldr	r2, [pc, #504]	@ (800b800 <HAL_UART_IRQHandler+0x5d8>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d106      	bne.n	800b618 <HAL_UART_IRQHandler+0x3f0>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	b29b      	uxth	r3, r3
 800b616:	e005      	b.n	800b624 <HAL_UART_IRQHandler+0x3fc>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	b29b      	uxth	r3, r3
 800b624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 80ad 	beq.w	800b78c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b638:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b63c:	429a      	cmp	r2, r3
 800b63e:	f080 80a5 	bcs.w	800b78c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b648:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b658:	f000 8087 	beq.w	800b76a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b68a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b69e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1da      	bne.n	800b65c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3308      	adds	r3, #8
 800b6ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6b0:	e853 3f00 	ldrex	r3, [r3]
 800b6b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b6b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b6b8:	f023 0301 	bic.w	r3, r3, #1
 800b6bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3308      	adds	r3, #8
 800b6c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b6ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b6ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b6d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b6d6:	e841 2300 	strex	r3, r2, [r1]
 800b6da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b6dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1e1      	bne.n	800b6a6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	3308      	adds	r3, #8
 800b6e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6ec:	e853 3f00 	ldrex	r3, [r3]
 800b6f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b6f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3308      	adds	r3, #8
 800b702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b70c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e3      	bne.n	800b6e2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2220      	movs	r2, #32
 800b71e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b730:	e853 3f00 	ldrex	r3, [r3]
 800b734:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b738:	f023 0310 	bic.w	r3, r3, #16
 800b73c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	461a      	mov	r2, r3
 800b746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b74a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b74c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b752:	e841 2300 	strex	r3, r2, [r1]
 800b756:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e4      	bne.n	800b728 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b764:	4618      	mov	r0, r3
 800b766:	f7fa f9c9 	bl	8005afc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2202      	movs	r2, #2
 800b76e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	b29b      	uxth	r3, r3
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 f939 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b78a:	e119      	b.n	800b9c0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b796:	429a      	cmp	r2, r3
 800b798:	f040 8112 	bne.w	800b9c0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7a2:	69db      	ldr	r3, [r3, #28]
 800b7a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7a8:	f040 810a 	bne.w	800b9c0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f91e 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
      return;
 800b7c0:	e0fe      	b.n	800b9c0 <HAL_UART_IRQHandler+0x798>
 800b7c2:	bf00      	nop
 800b7c4:	40020010 	.word	0x40020010
 800b7c8:	40020028 	.word	0x40020028
 800b7cc:	40020040 	.word	0x40020040
 800b7d0:	40020058 	.word	0x40020058
 800b7d4:	40020070 	.word	0x40020070
 800b7d8:	40020088 	.word	0x40020088
 800b7dc:	400200a0 	.word	0x400200a0
 800b7e0:	400200b8 	.word	0x400200b8
 800b7e4:	40020410 	.word	0x40020410
 800b7e8:	40020428 	.word	0x40020428
 800b7ec:	40020440 	.word	0x40020440
 800b7f0:	40020458 	.word	0x40020458
 800b7f4:	40020470 	.word	0x40020470
 800b7f8:	40020488 	.word	0x40020488
 800b7fc:	400204a0 	.word	0x400204a0
 800b800:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b810:	b29b      	uxth	r3, r3
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 80cf 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800b826:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f000 80ca 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b838:	e853 3f00 	ldrex	r3, [r3]
 800b83c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b83e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b840:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	461a      	mov	r2, r3
 800b84e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b852:	647b      	str	r3, [r7, #68]	@ 0x44
 800b854:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b858:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b860:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e4      	bne.n	800b830 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3308      	adds	r3, #8
 800b86c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	623b      	str	r3, [r7, #32]
   return(result);
 800b876:	6a3a      	ldr	r2, [r7, #32]
 800b878:	4b55      	ldr	r3, [pc, #340]	@ (800b9d0 <HAL_UART_IRQHandler+0x7a8>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3308      	adds	r3, #8
 800b886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b88a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b88c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b892:	e841 2300 	strex	r3, r2, [r1]
 800b896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e3      	bne.n	800b866 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2220      	movs	r2, #32
 800b8a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f023 0310 	bic.w	r3, r3, #16
 800b8c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b8d4:	61fb      	str	r3, [r7, #28]
 800b8d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	69b9      	ldr	r1, [r7, #24]
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e4      	bne.n	800b8b2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f881 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8fa:	e063      	b.n	800b9c4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b900:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00e      	beq.n	800b926 <HAL_UART_IRQHandler+0x6fe>
 800b908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b90c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d008      	beq.n	800b926 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b91c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f001 fe80 	bl	800d624 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b924:	e051      	b.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b92a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d014      	beq.n	800b95c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d105      	bne.n	800b94a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b93e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b946:	2b00      	cmp	r3, #0
 800b948:	d008      	beq.n	800b95c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d03a      	beq.n	800b9c8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	4798      	blx	r3
    }
    return;
 800b95a:	e035      	b.n	800b9c8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b964:	2b00      	cmp	r3, #0
 800b966:	d009      	beq.n	800b97c <HAL_UART_IRQHandler+0x754>
 800b968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f001 f909 	bl	800cb8c <UART_EndTransmit_IT>
    return;
 800b97a:	e026      	b.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b97c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b980:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d009      	beq.n	800b99c <HAL_UART_IRQHandler+0x774>
 800b988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b98c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b990:	2b00      	cmp	r3, #0
 800b992:	d003      	beq.n	800b99c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f001 fe59 	bl	800d64c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b99a:	e016      	b.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b9a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d010      	beq.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
 800b9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	da0c      	bge.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f001 fe41 	bl	800d638 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9b6:	e008      	b.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800b9b8:	bf00      	nop
 800b9ba:	e006      	b.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
    return;
 800b9bc:	bf00      	nop
 800b9be:	e004      	b.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800b9c0:	bf00      	nop
 800b9c2:	e002      	b.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
      return;
 800b9c4:	bf00      	nop
 800b9c6:	e000      	b.n	800b9ca <HAL_UART_IRQHandler+0x7a2>
    return;
 800b9c8:	bf00      	nop
  }
}
 800b9ca:	37e8      	adds	r7, #232	@ 0xe8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	effffffe 	.word	0xeffffffe

0800b9d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba18:	b092      	sub	sp, #72	@ 0x48
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	431a      	orrs	r2, r3
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	69db      	ldr	r3, [r3, #28]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	4bbe      	ldr	r3, [pc, #760]	@ (800bd3c <UART_SetConfig+0x328>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba4c:	430b      	orrs	r3, r1
 800ba4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	68da      	ldr	r2, [r3, #12]
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4ab3      	ldr	r2, [pc, #716]	@ (800bd40 <UART_SetConfig+0x32c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d004      	beq.n	800ba80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	689a      	ldr	r2, [r3, #8]
 800ba86:	4baf      	ldr	r3, [pc, #700]	@ (800bd44 <UART_SetConfig+0x330>)
 800ba88:	4013      	ands	r3, r2
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	6812      	ldr	r2, [r2, #0]
 800ba8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ba90:	430b      	orrs	r3, r1
 800ba92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9a:	f023 010f 	bic.w	r1, r3, #15
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	430a      	orrs	r2, r1
 800baa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4aa6      	ldr	r2, [pc, #664]	@ (800bd48 <UART_SetConfig+0x334>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d177      	bne.n	800bba4 <UART_SetConfig+0x190>
 800bab4:	4ba5      	ldr	r3, [pc, #660]	@ (800bd4c <UART_SetConfig+0x338>)
 800bab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bab8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800babc:	2b28      	cmp	r3, #40	@ 0x28
 800babe:	d86d      	bhi.n	800bb9c <UART_SetConfig+0x188>
 800bac0:	a201      	add	r2, pc, #4	@ (adr r2, 800bac8 <UART_SetConfig+0xb4>)
 800bac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac6:	bf00      	nop
 800bac8:	0800bb6d 	.word	0x0800bb6d
 800bacc:	0800bb9d 	.word	0x0800bb9d
 800bad0:	0800bb9d 	.word	0x0800bb9d
 800bad4:	0800bb9d 	.word	0x0800bb9d
 800bad8:	0800bb9d 	.word	0x0800bb9d
 800badc:	0800bb9d 	.word	0x0800bb9d
 800bae0:	0800bb9d 	.word	0x0800bb9d
 800bae4:	0800bb9d 	.word	0x0800bb9d
 800bae8:	0800bb75 	.word	0x0800bb75
 800baec:	0800bb9d 	.word	0x0800bb9d
 800baf0:	0800bb9d 	.word	0x0800bb9d
 800baf4:	0800bb9d 	.word	0x0800bb9d
 800baf8:	0800bb9d 	.word	0x0800bb9d
 800bafc:	0800bb9d 	.word	0x0800bb9d
 800bb00:	0800bb9d 	.word	0x0800bb9d
 800bb04:	0800bb9d 	.word	0x0800bb9d
 800bb08:	0800bb7d 	.word	0x0800bb7d
 800bb0c:	0800bb9d 	.word	0x0800bb9d
 800bb10:	0800bb9d 	.word	0x0800bb9d
 800bb14:	0800bb9d 	.word	0x0800bb9d
 800bb18:	0800bb9d 	.word	0x0800bb9d
 800bb1c:	0800bb9d 	.word	0x0800bb9d
 800bb20:	0800bb9d 	.word	0x0800bb9d
 800bb24:	0800bb9d 	.word	0x0800bb9d
 800bb28:	0800bb85 	.word	0x0800bb85
 800bb2c:	0800bb9d 	.word	0x0800bb9d
 800bb30:	0800bb9d 	.word	0x0800bb9d
 800bb34:	0800bb9d 	.word	0x0800bb9d
 800bb38:	0800bb9d 	.word	0x0800bb9d
 800bb3c:	0800bb9d 	.word	0x0800bb9d
 800bb40:	0800bb9d 	.word	0x0800bb9d
 800bb44:	0800bb9d 	.word	0x0800bb9d
 800bb48:	0800bb8d 	.word	0x0800bb8d
 800bb4c:	0800bb9d 	.word	0x0800bb9d
 800bb50:	0800bb9d 	.word	0x0800bb9d
 800bb54:	0800bb9d 	.word	0x0800bb9d
 800bb58:	0800bb9d 	.word	0x0800bb9d
 800bb5c:	0800bb9d 	.word	0x0800bb9d
 800bb60:	0800bb9d 	.word	0x0800bb9d
 800bb64:	0800bb9d 	.word	0x0800bb9d
 800bb68:	0800bb95 	.word	0x0800bb95
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb72:	e222      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bb74:	2304      	movs	r3, #4
 800bb76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7a:	e21e      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bb7c:	2308      	movs	r3, #8
 800bb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb82:	e21a      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bb84:	2310      	movs	r3, #16
 800bb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8a:	e216      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bb8c:	2320      	movs	r3, #32
 800bb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb92:	e212      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bb94:	2340      	movs	r3, #64	@ 0x40
 800bb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb9a:	e20e      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bb9c:	2380      	movs	r3, #128	@ 0x80
 800bb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bba2:	e20a      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a69      	ldr	r2, [pc, #420]	@ (800bd50 <UART_SetConfig+0x33c>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d130      	bne.n	800bc10 <UART_SetConfig+0x1fc>
 800bbae:	4b67      	ldr	r3, [pc, #412]	@ (800bd4c <UART_SetConfig+0x338>)
 800bbb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbb2:	f003 0307 	and.w	r3, r3, #7
 800bbb6:	2b05      	cmp	r3, #5
 800bbb8:	d826      	bhi.n	800bc08 <UART_SetConfig+0x1f4>
 800bbba:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc0 <UART_SetConfig+0x1ac>)
 800bbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc0:	0800bbd9 	.word	0x0800bbd9
 800bbc4:	0800bbe1 	.word	0x0800bbe1
 800bbc8:	0800bbe9 	.word	0x0800bbe9
 800bbcc:	0800bbf1 	.word	0x0800bbf1
 800bbd0:	0800bbf9 	.word	0x0800bbf9
 800bbd4:	0800bc01 	.word	0x0800bc01
 800bbd8:	2300      	movs	r3, #0
 800bbda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbde:	e1ec      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe6:	e1e8      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bbe8:	2308      	movs	r3, #8
 800bbea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbee:	e1e4      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bbf0:	2310      	movs	r3, #16
 800bbf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf6:	e1e0      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bbf8:	2320      	movs	r3, #32
 800bbfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbfe:	e1dc      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc00:	2340      	movs	r3, #64	@ 0x40
 800bc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc06:	e1d8      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc08:	2380      	movs	r3, #128	@ 0x80
 800bc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc0e:	e1d4      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a4f      	ldr	r2, [pc, #316]	@ (800bd54 <UART_SetConfig+0x340>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d130      	bne.n	800bc7c <UART_SetConfig+0x268>
 800bc1a:	4b4c      	ldr	r3, [pc, #304]	@ (800bd4c <UART_SetConfig+0x338>)
 800bc1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc1e:	f003 0307 	and.w	r3, r3, #7
 800bc22:	2b05      	cmp	r3, #5
 800bc24:	d826      	bhi.n	800bc74 <UART_SetConfig+0x260>
 800bc26:	a201      	add	r2, pc, #4	@ (adr r2, 800bc2c <UART_SetConfig+0x218>)
 800bc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2c:	0800bc45 	.word	0x0800bc45
 800bc30:	0800bc4d 	.word	0x0800bc4d
 800bc34:	0800bc55 	.word	0x0800bc55
 800bc38:	0800bc5d 	.word	0x0800bc5d
 800bc3c:	0800bc65 	.word	0x0800bc65
 800bc40:	0800bc6d 	.word	0x0800bc6d
 800bc44:	2300      	movs	r3, #0
 800bc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4a:	e1b6      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc4c:	2304      	movs	r3, #4
 800bc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc52:	e1b2      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc54:	2308      	movs	r3, #8
 800bc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5a:	e1ae      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc5c:	2310      	movs	r3, #16
 800bc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc62:	e1aa      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc64:	2320      	movs	r3, #32
 800bc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc6a:	e1a6      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc6c:	2340      	movs	r3, #64	@ 0x40
 800bc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc72:	e1a2      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc74:	2380      	movs	r3, #128	@ 0x80
 800bc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc7a:	e19e      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a35      	ldr	r2, [pc, #212]	@ (800bd58 <UART_SetConfig+0x344>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d130      	bne.n	800bce8 <UART_SetConfig+0x2d4>
 800bc86:	4b31      	ldr	r3, [pc, #196]	@ (800bd4c <UART_SetConfig+0x338>)
 800bc88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc8a:	f003 0307 	and.w	r3, r3, #7
 800bc8e:	2b05      	cmp	r3, #5
 800bc90:	d826      	bhi.n	800bce0 <UART_SetConfig+0x2cc>
 800bc92:	a201      	add	r2, pc, #4	@ (adr r2, 800bc98 <UART_SetConfig+0x284>)
 800bc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc98:	0800bcb1 	.word	0x0800bcb1
 800bc9c:	0800bcb9 	.word	0x0800bcb9
 800bca0:	0800bcc1 	.word	0x0800bcc1
 800bca4:	0800bcc9 	.word	0x0800bcc9
 800bca8:	0800bcd1 	.word	0x0800bcd1
 800bcac:	0800bcd9 	.word	0x0800bcd9
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcb6:	e180      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bcb8:	2304      	movs	r3, #4
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcbe:	e17c      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bcc0:	2308      	movs	r3, #8
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e178      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bcc8:	2310      	movs	r3, #16
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e174      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bcd0:	2320      	movs	r3, #32
 800bcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd6:	e170      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bcd8:	2340      	movs	r3, #64	@ 0x40
 800bcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcde:	e16c      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bce0:	2380      	movs	r3, #128	@ 0x80
 800bce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce6:	e168      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a1b      	ldr	r2, [pc, #108]	@ (800bd5c <UART_SetConfig+0x348>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d142      	bne.n	800bd78 <UART_SetConfig+0x364>
 800bcf2:	4b16      	ldr	r3, [pc, #88]	@ (800bd4c <UART_SetConfig+0x338>)
 800bcf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcf6:	f003 0307 	and.w	r3, r3, #7
 800bcfa:	2b05      	cmp	r3, #5
 800bcfc:	d838      	bhi.n	800bd70 <UART_SetConfig+0x35c>
 800bcfe:	a201      	add	r2, pc, #4	@ (adr r2, 800bd04 <UART_SetConfig+0x2f0>)
 800bd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd04:	0800bd1d 	.word	0x0800bd1d
 800bd08:	0800bd25 	.word	0x0800bd25
 800bd0c:	0800bd2d 	.word	0x0800bd2d
 800bd10:	0800bd35 	.word	0x0800bd35
 800bd14:	0800bd61 	.word	0x0800bd61
 800bd18:	0800bd69 	.word	0x0800bd69
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd22:	e14a      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bd24:	2304      	movs	r3, #4
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2a:	e146      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bd2c:	2308      	movs	r3, #8
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd32:	e142      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bd34:	2310      	movs	r3, #16
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3a:	e13e      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bd3c:	cfff69f3 	.word	0xcfff69f3
 800bd40:	58000c00 	.word	0x58000c00
 800bd44:	11fff4ff 	.word	0x11fff4ff
 800bd48:	40011000 	.word	0x40011000
 800bd4c:	58024400 	.word	0x58024400
 800bd50:	40004400 	.word	0x40004400
 800bd54:	40004800 	.word	0x40004800
 800bd58:	40004c00 	.word	0x40004c00
 800bd5c:	40005000 	.word	0x40005000
 800bd60:	2320      	movs	r3, #32
 800bd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd66:	e128      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bd68:	2340      	movs	r3, #64	@ 0x40
 800bd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd6e:	e124      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bd70:	2380      	movs	r3, #128	@ 0x80
 800bd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd76:	e120      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4acb      	ldr	r2, [pc, #812]	@ (800c0ac <UART_SetConfig+0x698>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d176      	bne.n	800be70 <UART_SetConfig+0x45c>
 800bd82:	4bcb      	ldr	r3, [pc, #812]	@ (800c0b0 <UART_SetConfig+0x69c>)
 800bd84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd8a:	2b28      	cmp	r3, #40	@ 0x28
 800bd8c:	d86c      	bhi.n	800be68 <UART_SetConfig+0x454>
 800bd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd94 <UART_SetConfig+0x380>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800be39 	.word	0x0800be39
 800bd98:	0800be69 	.word	0x0800be69
 800bd9c:	0800be69 	.word	0x0800be69
 800bda0:	0800be69 	.word	0x0800be69
 800bda4:	0800be69 	.word	0x0800be69
 800bda8:	0800be69 	.word	0x0800be69
 800bdac:	0800be69 	.word	0x0800be69
 800bdb0:	0800be69 	.word	0x0800be69
 800bdb4:	0800be41 	.word	0x0800be41
 800bdb8:	0800be69 	.word	0x0800be69
 800bdbc:	0800be69 	.word	0x0800be69
 800bdc0:	0800be69 	.word	0x0800be69
 800bdc4:	0800be69 	.word	0x0800be69
 800bdc8:	0800be69 	.word	0x0800be69
 800bdcc:	0800be69 	.word	0x0800be69
 800bdd0:	0800be69 	.word	0x0800be69
 800bdd4:	0800be49 	.word	0x0800be49
 800bdd8:	0800be69 	.word	0x0800be69
 800bddc:	0800be69 	.word	0x0800be69
 800bde0:	0800be69 	.word	0x0800be69
 800bde4:	0800be69 	.word	0x0800be69
 800bde8:	0800be69 	.word	0x0800be69
 800bdec:	0800be69 	.word	0x0800be69
 800bdf0:	0800be69 	.word	0x0800be69
 800bdf4:	0800be51 	.word	0x0800be51
 800bdf8:	0800be69 	.word	0x0800be69
 800bdfc:	0800be69 	.word	0x0800be69
 800be00:	0800be69 	.word	0x0800be69
 800be04:	0800be69 	.word	0x0800be69
 800be08:	0800be69 	.word	0x0800be69
 800be0c:	0800be69 	.word	0x0800be69
 800be10:	0800be69 	.word	0x0800be69
 800be14:	0800be59 	.word	0x0800be59
 800be18:	0800be69 	.word	0x0800be69
 800be1c:	0800be69 	.word	0x0800be69
 800be20:	0800be69 	.word	0x0800be69
 800be24:	0800be69 	.word	0x0800be69
 800be28:	0800be69 	.word	0x0800be69
 800be2c:	0800be69 	.word	0x0800be69
 800be30:	0800be69 	.word	0x0800be69
 800be34:	0800be61 	.word	0x0800be61
 800be38:	2301      	movs	r3, #1
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3e:	e0bc      	b.n	800bfba <UART_SetConfig+0x5a6>
 800be40:	2304      	movs	r3, #4
 800be42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be46:	e0b8      	b.n	800bfba <UART_SetConfig+0x5a6>
 800be48:	2308      	movs	r3, #8
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4e:	e0b4      	b.n	800bfba <UART_SetConfig+0x5a6>
 800be50:	2310      	movs	r3, #16
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be56:	e0b0      	b.n	800bfba <UART_SetConfig+0x5a6>
 800be58:	2320      	movs	r3, #32
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5e:	e0ac      	b.n	800bfba <UART_SetConfig+0x5a6>
 800be60:	2340      	movs	r3, #64	@ 0x40
 800be62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be66:	e0a8      	b.n	800bfba <UART_SetConfig+0x5a6>
 800be68:	2380      	movs	r3, #128	@ 0x80
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6e:	e0a4      	b.n	800bfba <UART_SetConfig+0x5a6>
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a8f      	ldr	r2, [pc, #572]	@ (800c0b4 <UART_SetConfig+0x6a0>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d130      	bne.n	800bedc <UART_SetConfig+0x4c8>
 800be7a:	4b8d      	ldr	r3, [pc, #564]	@ (800c0b0 <UART_SetConfig+0x69c>)
 800be7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be7e:	f003 0307 	and.w	r3, r3, #7
 800be82:	2b05      	cmp	r3, #5
 800be84:	d826      	bhi.n	800bed4 <UART_SetConfig+0x4c0>
 800be86:	a201      	add	r2, pc, #4	@ (adr r2, 800be8c <UART_SetConfig+0x478>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800bea5 	.word	0x0800bea5
 800be90:	0800bead 	.word	0x0800bead
 800be94:	0800beb5 	.word	0x0800beb5
 800be98:	0800bebd 	.word	0x0800bebd
 800be9c:	0800bec5 	.word	0x0800bec5
 800bea0:	0800becd 	.word	0x0800becd
 800bea4:	2300      	movs	r3, #0
 800bea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beaa:	e086      	b.n	800bfba <UART_SetConfig+0x5a6>
 800beac:	2304      	movs	r3, #4
 800beae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beb2:	e082      	b.n	800bfba <UART_SetConfig+0x5a6>
 800beb4:	2308      	movs	r3, #8
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beba:	e07e      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bebc:	2310      	movs	r3, #16
 800bebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bec2:	e07a      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bec4:	2320      	movs	r3, #32
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beca:	e076      	b.n	800bfba <UART_SetConfig+0x5a6>
 800becc:	2340      	movs	r3, #64	@ 0x40
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bed2:	e072      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bed4:	2380      	movs	r3, #128	@ 0x80
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beda:	e06e      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a75      	ldr	r2, [pc, #468]	@ (800c0b8 <UART_SetConfig+0x6a4>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d130      	bne.n	800bf48 <UART_SetConfig+0x534>
 800bee6:	4b72      	ldr	r3, [pc, #456]	@ (800c0b0 <UART_SetConfig+0x69c>)
 800bee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800beea:	f003 0307 	and.w	r3, r3, #7
 800beee:	2b05      	cmp	r3, #5
 800bef0:	d826      	bhi.n	800bf40 <UART_SetConfig+0x52c>
 800bef2:	a201      	add	r2, pc, #4	@ (adr r2, 800bef8 <UART_SetConfig+0x4e4>)
 800bef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef8:	0800bf11 	.word	0x0800bf11
 800befc:	0800bf19 	.word	0x0800bf19
 800bf00:	0800bf21 	.word	0x0800bf21
 800bf04:	0800bf29 	.word	0x0800bf29
 800bf08:	0800bf31 	.word	0x0800bf31
 800bf0c:	0800bf39 	.word	0x0800bf39
 800bf10:	2300      	movs	r3, #0
 800bf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf16:	e050      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf18:	2304      	movs	r3, #4
 800bf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf1e:	e04c      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf20:	2308      	movs	r3, #8
 800bf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf26:	e048      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf28:	2310      	movs	r3, #16
 800bf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2e:	e044      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf30:	2320      	movs	r3, #32
 800bf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf36:	e040      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf38:	2340      	movs	r3, #64	@ 0x40
 800bf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3e:	e03c      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf40:	2380      	movs	r3, #128	@ 0x80
 800bf42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf46:	e038      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a5b      	ldr	r2, [pc, #364]	@ (800c0bc <UART_SetConfig+0x6a8>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d130      	bne.n	800bfb4 <UART_SetConfig+0x5a0>
 800bf52:	4b57      	ldr	r3, [pc, #348]	@ (800c0b0 <UART_SetConfig+0x69c>)
 800bf54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf56:	f003 0307 	and.w	r3, r3, #7
 800bf5a:	2b05      	cmp	r3, #5
 800bf5c:	d826      	bhi.n	800bfac <UART_SetConfig+0x598>
 800bf5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf64 <UART_SetConfig+0x550>)
 800bf60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf64:	0800bf7d 	.word	0x0800bf7d
 800bf68:	0800bf85 	.word	0x0800bf85
 800bf6c:	0800bf8d 	.word	0x0800bf8d
 800bf70:	0800bf95 	.word	0x0800bf95
 800bf74:	0800bf9d 	.word	0x0800bf9d
 800bf78:	0800bfa5 	.word	0x0800bfa5
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf82:	e01a      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf84:	2304      	movs	r3, #4
 800bf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf8a:	e016      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf8c:	2308      	movs	r3, #8
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf92:	e012      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf94:	2310      	movs	r3, #16
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9a:	e00e      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bf9c:	2320      	movs	r3, #32
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa2:	e00a      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bfa4:	2340      	movs	r3, #64	@ 0x40
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfaa:	e006      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bfac:	2380      	movs	r3, #128	@ 0x80
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfb2:	e002      	b.n	800bfba <UART_SetConfig+0x5a6>
 800bfb4:	2380      	movs	r3, #128	@ 0x80
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a3f      	ldr	r2, [pc, #252]	@ (800c0bc <UART_SetConfig+0x6a8>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	f040 80f8 	bne.w	800c1b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfc6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bfca:	2b20      	cmp	r3, #32
 800bfcc:	dc46      	bgt.n	800c05c <UART_SetConfig+0x648>
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	f2c0 8082 	blt.w	800c0d8 <UART_SetConfig+0x6c4>
 800bfd4:	3b02      	subs	r3, #2
 800bfd6:	2b1e      	cmp	r3, #30
 800bfd8:	d87e      	bhi.n	800c0d8 <UART_SetConfig+0x6c4>
 800bfda:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe0 <UART_SetConfig+0x5cc>)
 800bfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe0:	0800c063 	.word	0x0800c063
 800bfe4:	0800c0d9 	.word	0x0800c0d9
 800bfe8:	0800c06b 	.word	0x0800c06b
 800bfec:	0800c0d9 	.word	0x0800c0d9
 800bff0:	0800c0d9 	.word	0x0800c0d9
 800bff4:	0800c0d9 	.word	0x0800c0d9
 800bff8:	0800c07b 	.word	0x0800c07b
 800bffc:	0800c0d9 	.word	0x0800c0d9
 800c000:	0800c0d9 	.word	0x0800c0d9
 800c004:	0800c0d9 	.word	0x0800c0d9
 800c008:	0800c0d9 	.word	0x0800c0d9
 800c00c:	0800c0d9 	.word	0x0800c0d9
 800c010:	0800c0d9 	.word	0x0800c0d9
 800c014:	0800c0d9 	.word	0x0800c0d9
 800c018:	0800c08b 	.word	0x0800c08b
 800c01c:	0800c0d9 	.word	0x0800c0d9
 800c020:	0800c0d9 	.word	0x0800c0d9
 800c024:	0800c0d9 	.word	0x0800c0d9
 800c028:	0800c0d9 	.word	0x0800c0d9
 800c02c:	0800c0d9 	.word	0x0800c0d9
 800c030:	0800c0d9 	.word	0x0800c0d9
 800c034:	0800c0d9 	.word	0x0800c0d9
 800c038:	0800c0d9 	.word	0x0800c0d9
 800c03c:	0800c0d9 	.word	0x0800c0d9
 800c040:	0800c0d9 	.word	0x0800c0d9
 800c044:	0800c0d9 	.word	0x0800c0d9
 800c048:	0800c0d9 	.word	0x0800c0d9
 800c04c:	0800c0d9 	.word	0x0800c0d9
 800c050:	0800c0d9 	.word	0x0800c0d9
 800c054:	0800c0d9 	.word	0x0800c0d9
 800c058:	0800c0cb 	.word	0x0800c0cb
 800c05c:	2b40      	cmp	r3, #64	@ 0x40
 800c05e:	d037      	beq.n	800c0d0 <UART_SetConfig+0x6bc>
 800c060:	e03a      	b.n	800c0d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c062:	f7fe f8cd 	bl	800a200 <HAL_RCCEx_GetD3PCLK1Freq>
 800c066:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c068:	e03c      	b.n	800c0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c06a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe f8dc 	bl	800a22c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c078:	e034      	b.n	800c0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c07a:	f107 0318 	add.w	r3, r7, #24
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fa28 	bl	800a4d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c088:	e02c      	b.n	800c0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c08a:	4b09      	ldr	r3, [pc, #36]	@ (800c0b0 <UART_SetConfig+0x69c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f003 0320 	and.w	r3, r3, #32
 800c092:	2b00      	cmp	r3, #0
 800c094:	d016      	beq.n	800c0c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c096:	4b06      	ldr	r3, [pc, #24]	@ (800c0b0 <UART_SetConfig+0x69c>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	08db      	lsrs	r3, r3, #3
 800c09c:	f003 0303 	and.w	r3, r3, #3
 800c0a0:	4a07      	ldr	r2, [pc, #28]	@ (800c0c0 <UART_SetConfig+0x6ac>)
 800c0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0a8:	e01c      	b.n	800c0e4 <UART_SetConfig+0x6d0>
 800c0aa:	bf00      	nop
 800c0ac:	40011400 	.word	0x40011400
 800c0b0:	58024400 	.word	0x58024400
 800c0b4:	40007800 	.word	0x40007800
 800c0b8:	40007c00 	.word	0x40007c00
 800c0bc:	58000c00 	.word	0x58000c00
 800c0c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c0c4:	4b9d      	ldr	r3, [pc, #628]	@ (800c33c <UART_SetConfig+0x928>)
 800c0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0c8:	e00c      	b.n	800c0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0ca:	4b9d      	ldr	r3, [pc, #628]	@ (800c340 <UART_SetConfig+0x92c>)
 800c0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0ce:	e009      	b.n	800c0e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0d6:	e005      	b.n	800c0e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c0e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 81de 	beq.w	800c4a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0f0:	4a94      	ldr	r2, [pc, #592]	@ (800c344 <UART_SetConfig+0x930>)
 800c0f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	4613      	mov	r3, r2
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	4413      	add	r3, r2
 800c10a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d305      	bcc.n	800c11c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c118:	429a      	cmp	r2, r3
 800c11a:	d903      	bls.n	800c124 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
 800c11e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c122:	e1c1      	b.n	800c4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c126:	2200      	movs	r2, #0
 800c128:	60bb      	str	r3, [r7, #8]
 800c12a:	60fa      	str	r2, [r7, #12]
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c130:	4a84      	ldr	r2, [pc, #528]	@ (800c344 <UART_SetConfig+0x930>)
 800c132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c136:	b29b      	uxth	r3, r3
 800c138:	2200      	movs	r2, #0
 800c13a:	603b      	str	r3, [r7, #0]
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c146:	f7f4 fbed 	bl	8000924 <__aeabi_uldivmod>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	4610      	mov	r0, r2
 800c150:	4619      	mov	r1, r3
 800c152:	f04f 0200 	mov.w	r2, #0
 800c156:	f04f 0300 	mov.w	r3, #0
 800c15a:	020b      	lsls	r3, r1, #8
 800c15c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c160:	0202      	lsls	r2, r0, #8
 800c162:	6979      	ldr	r1, [r7, #20]
 800c164:	6849      	ldr	r1, [r1, #4]
 800c166:	0849      	lsrs	r1, r1, #1
 800c168:	2000      	movs	r0, #0
 800c16a:	460c      	mov	r4, r1
 800c16c:	4605      	mov	r5, r0
 800c16e:	eb12 0804 	adds.w	r8, r2, r4
 800c172:	eb43 0905 	adc.w	r9, r3, r5
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	469a      	mov	sl, r3
 800c17e:	4693      	mov	fp, r2
 800c180:	4652      	mov	r2, sl
 800c182:	465b      	mov	r3, fp
 800c184:	4640      	mov	r0, r8
 800c186:	4649      	mov	r1, r9
 800c188:	f7f4 fbcc 	bl	8000924 <__aeabi_uldivmod>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4613      	mov	r3, r2
 800c192:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c19a:	d308      	bcc.n	800c1ae <UART_SetConfig+0x79a>
 800c19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1a2:	d204      	bcs.n	800c1ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1aa:	60da      	str	r2, [r3, #12]
 800c1ac:	e17c      	b.n	800c4a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c1b4:	e178      	b.n	800c4a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	69db      	ldr	r3, [r3, #28]
 800c1ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1be:	f040 80c5 	bne.w	800c34c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c1c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1c6:	2b20      	cmp	r3, #32
 800c1c8:	dc48      	bgt.n	800c25c <UART_SetConfig+0x848>
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	db7b      	blt.n	800c2c6 <UART_SetConfig+0x8b2>
 800c1ce:	2b20      	cmp	r3, #32
 800c1d0:	d879      	bhi.n	800c2c6 <UART_SetConfig+0x8b2>
 800c1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1d8 <UART_SetConfig+0x7c4>)
 800c1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d8:	0800c263 	.word	0x0800c263
 800c1dc:	0800c26b 	.word	0x0800c26b
 800c1e0:	0800c2c7 	.word	0x0800c2c7
 800c1e4:	0800c2c7 	.word	0x0800c2c7
 800c1e8:	0800c273 	.word	0x0800c273
 800c1ec:	0800c2c7 	.word	0x0800c2c7
 800c1f0:	0800c2c7 	.word	0x0800c2c7
 800c1f4:	0800c2c7 	.word	0x0800c2c7
 800c1f8:	0800c283 	.word	0x0800c283
 800c1fc:	0800c2c7 	.word	0x0800c2c7
 800c200:	0800c2c7 	.word	0x0800c2c7
 800c204:	0800c2c7 	.word	0x0800c2c7
 800c208:	0800c2c7 	.word	0x0800c2c7
 800c20c:	0800c2c7 	.word	0x0800c2c7
 800c210:	0800c2c7 	.word	0x0800c2c7
 800c214:	0800c2c7 	.word	0x0800c2c7
 800c218:	0800c293 	.word	0x0800c293
 800c21c:	0800c2c7 	.word	0x0800c2c7
 800c220:	0800c2c7 	.word	0x0800c2c7
 800c224:	0800c2c7 	.word	0x0800c2c7
 800c228:	0800c2c7 	.word	0x0800c2c7
 800c22c:	0800c2c7 	.word	0x0800c2c7
 800c230:	0800c2c7 	.word	0x0800c2c7
 800c234:	0800c2c7 	.word	0x0800c2c7
 800c238:	0800c2c7 	.word	0x0800c2c7
 800c23c:	0800c2c7 	.word	0x0800c2c7
 800c240:	0800c2c7 	.word	0x0800c2c7
 800c244:	0800c2c7 	.word	0x0800c2c7
 800c248:	0800c2c7 	.word	0x0800c2c7
 800c24c:	0800c2c7 	.word	0x0800c2c7
 800c250:	0800c2c7 	.word	0x0800c2c7
 800c254:	0800c2c7 	.word	0x0800c2c7
 800c258:	0800c2b9 	.word	0x0800c2b9
 800c25c:	2b40      	cmp	r3, #64	@ 0x40
 800c25e:	d02e      	beq.n	800c2be <UART_SetConfig+0x8aa>
 800c260:	e031      	b.n	800c2c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c262:	f7fc fd55 	bl	8008d10 <HAL_RCC_GetPCLK1Freq>
 800c266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c268:	e033      	b.n	800c2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c26a:	f7fc fd67 	bl	8008d3c <HAL_RCC_GetPCLK2Freq>
 800c26e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c270:	e02f      	b.n	800c2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c276:	4618      	mov	r0, r3
 800c278:	f7fd ffd8 	bl	800a22c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c280:	e027      	b.n	800c2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c282:	f107 0318 	add.w	r3, r7, #24
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe f924 	bl	800a4d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c290:	e01f      	b.n	800c2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c292:	4b2d      	ldr	r3, [pc, #180]	@ (800c348 <UART_SetConfig+0x934>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 0320 	and.w	r3, r3, #32
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d009      	beq.n	800c2b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c29e:	4b2a      	ldr	r3, [pc, #168]	@ (800c348 <UART_SetConfig+0x934>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	08db      	lsrs	r3, r3, #3
 800c2a4:	f003 0303 	and.w	r3, r3, #3
 800c2a8:	4a24      	ldr	r2, [pc, #144]	@ (800c33c <UART_SetConfig+0x928>)
 800c2aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2b0:	e00f      	b.n	800c2d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c2b2:	4b22      	ldr	r3, [pc, #136]	@ (800c33c <UART_SetConfig+0x928>)
 800c2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2b6:	e00c      	b.n	800c2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2b8:	4b21      	ldr	r3, [pc, #132]	@ (800c340 <UART_SetConfig+0x92c>)
 800c2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2bc:	e009      	b.n	800c2d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c4:	e005      	b.n	800c2d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c2d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 80e7 	beq.w	800c4a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2de:	4a19      	ldr	r2, [pc, #100]	@ (800c344 <UART_SetConfig+0x930>)
 800c2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ec:	005a      	lsls	r2, r3, #1
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	685b      	ldr	r3, [r3, #4]
 800c2f2:	085b      	lsrs	r3, r3, #1
 800c2f4:	441a      	add	r2, r3
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c302:	2b0f      	cmp	r3, #15
 800c304:	d916      	bls.n	800c334 <UART_SetConfig+0x920>
 800c306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c30c:	d212      	bcs.n	800c334 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c310:	b29b      	uxth	r3, r3
 800c312:	f023 030f 	bic.w	r3, r3, #15
 800c316:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31a:	085b      	lsrs	r3, r3, #1
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	f003 0307 	and.w	r3, r3, #7
 800c322:	b29a      	uxth	r2, r3
 800c324:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c326:	4313      	orrs	r3, r2
 800c328:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c330:	60da      	str	r2, [r3, #12]
 800c332:	e0b9      	b.n	800c4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c33a:	e0b5      	b.n	800c4a8 <UART_SetConfig+0xa94>
 800c33c:	03d09000 	.word	0x03d09000
 800c340:	003d0900 	.word	0x003d0900
 800c344:	08014ee4 	.word	0x08014ee4
 800c348:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c34c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c350:	2b20      	cmp	r3, #32
 800c352:	dc49      	bgt.n	800c3e8 <UART_SetConfig+0x9d4>
 800c354:	2b00      	cmp	r3, #0
 800c356:	db7c      	blt.n	800c452 <UART_SetConfig+0xa3e>
 800c358:	2b20      	cmp	r3, #32
 800c35a:	d87a      	bhi.n	800c452 <UART_SetConfig+0xa3e>
 800c35c:	a201      	add	r2, pc, #4	@ (adr r2, 800c364 <UART_SetConfig+0x950>)
 800c35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c362:	bf00      	nop
 800c364:	0800c3ef 	.word	0x0800c3ef
 800c368:	0800c3f7 	.word	0x0800c3f7
 800c36c:	0800c453 	.word	0x0800c453
 800c370:	0800c453 	.word	0x0800c453
 800c374:	0800c3ff 	.word	0x0800c3ff
 800c378:	0800c453 	.word	0x0800c453
 800c37c:	0800c453 	.word	0x0800c453
 800c380:	0800c453 	.word	0x0800c453
 800c384:	0800c40f 	.word	0x0800c40f
 800c388:	0800c453 	.word	0x0800c453
 800c38c:	0800c453 	.word	0x0800c453
 800c390:	0800c453 	.word	0x0800c453
 800c394:	0800c453 	.word	0x0800c453
 800c398:	0800c453 	.word	0x0800c453
 800c39c:	0800c453 	.word	0x0800c453
 800c3a0:	0800c453 	.word	0x0800c453
 800c3a4:	0800c41f 	.word	0x0800c41f
 800c3a8:	0800c453 	.word	0x0800c453
 800c3ac:	0800c453 	.word	0x0800c453
 800c3b0:	0800c453 	.word	0x0800c453
 800c3b4:	0800c453 	.word	0x0800c453
 800c3b8:	0800c453 	.word	0x0800c453
 800c3bc:	0800c453 	.word	0x0800c453
 800c3c0:	0800c453 	.word	0x0800c453
 800c3c4:	0800c453 	.word	0x0800c453
 800c3c8:	0800c453 	.word	0x0800c453
 800c3cc:	0800c453 	.word	0x0800c453
 800c3d0:	0800c453 	.word	0x0800c453
 800c3d4:	0800c453 	.word	0x0800c453
 800c3d8:	0800c453 	.word	0x0800c453
 800c3dc:	0800c453 	.word	0x0800c453
 800c3e0:	0800c453 	.word	0x0800c453
 800c3e4:	0800c445 	.word	0x0800c445
 800c3e8:	2b40      	cmp	r3, #64	@ 0x40
 800c3ea:	d02e      	beq.n	800c44a <UART_SetConfig+0xa36>
 800c3ec:	e031      	b.n	800c452 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3ee:	f7fc fc8f 	bl	8008d10 <HAL_RCC_GetPCLK1Freq>
 800c3f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3f4:	e033      	b.n	800c45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3f6:	f7fc fca1 	bl	8008d3c <HAL_RCC_GetPCLK2Freq>
 800c3fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3fc:	e02f      	b.n	800c45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c402:	4618      	mov	r0, r3
 800c404:	f7fd ff12 	bl	800a22c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c40c:	e027      	b.n	800c45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c40e:	f107 0318 	add.w	r3, r7, #24
 800c412:	4618      	mov	r0, r3
 800c414:	f7fe f85e 	bl	800a4d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c41c:	e01f      	b.n	800c45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c41e:	4b2d      	ldr	r3, [pc, #180]	@ (800c4d4 <UART_SetConfig+0xac0>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0320 	and.w	r3, r3, #32
 800c426:	2b00      	cmp	r3, #0
 800c428:	d009      	beq.n	800c43e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c42a:	4b2a      	ldr	r3, [pc, #168]	@ (800c4d4 <UART_SetConfig+0xac0>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	08db      	lsrs	r3, r3, #3
 800c430:	f003 0303 	and.w	r3, r3, #3
 800c434:	4a28      	ldr	r2, [pc, #160]	@ (800c4d8 <UART_SetConfig+0xac4>)
 800c436:	fa22 f303 	lsr.w	r3, r2, r3
 800c43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c43c:	e00f      	b.n	800c45e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c43e:	4b26      	ldr	r3, [pc, #152]	@ (800c4d8 <UART_SetConfig+0xac4>)
 800c440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c442:	e00c      	b.n	800c45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c444:	4b25      	ldr	r3, [pc, #148]	@ (800c4dc <UART_SetConfig+0xac8>)
 800c446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c448:	e009      	b.n	800c45e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c44a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c450:	e005      	b.n	800c45e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c45c:	bf00      	nop
    }

    if (pclk != 0U)
 800c45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c460:	2b00      	cmp	r3, #0
 800c462:	d021      	beq.n	800c4a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c468:	4a1d      	ldr	r2, [pc, #116]	@ (800c4e0 <UART_SetConfig+0xacc>)
 800c46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c46e:	461a      	mov	r2, r3
 800c470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c472:	fbb3 f2f2 	udiv	r2, r3, r2
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	085b      	lsrs	r3, r3, #1
 800c47c:	441a      	add	r2, r3
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	fbb2 f3f3 	udiv	r3, r2, r3
 800c486:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48a:	2b0f      	cmp	r3, #15
 800c48c:	d909      	bls.n	800c4a2 <UART_SetConfig+0xa8e>
 800c48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c494:	d205      	bcs.n	800c4a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	b29a      	uxth	r2, r3
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	60da      	str	r2, [r3, #12]
 800c4a0:	e002      	b.n	800c4a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c4c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3748      	adds	r7, #72	@ 0x48
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4d2:	bf00      	nop
 800c4d4:	58024400 	.word	0x58024400
 800c4d8:	03d09000 	.word	0x03d09000
 800c4dc:	003d0900 	.word	0x003d0900
 800c4e0:	08014ee4 	.word	0x08014ee4

0800c4e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f0:	f003 0308 	and.w	r3, r3, #8
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00a      	beq.n	800c50e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	430a      	orrs	r2, r1
 800c50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c512:	f003 0301 	and.w	r3, r3, #1
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00a      	beq.n	800c530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	430a      	orrs	r2, r1
 800c52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c534:	f003 0302 	and.w	r3, r3, #2
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00a      	beq.n	800c552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	430a      	orrs	r2, r1
 800c550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c556:	f003 0304 	and.w	r3, r3, #4
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00a      	beq.n	800c574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	430a      	orrs	r2, r1
 800c572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c578:	f003 0310 	and.w	r3, r3, #16
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00a      	beq.n	800c596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	430a      	orrs	r2, r1
 800c594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c59a:	f003 0320 	and.w	r3, r3, #32
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00a      	beq.n	800c5b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	430a      	orrs	r2, r1
 800c5b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d01a      	beq.n	800c5fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	430a      	orrs	r2, r1
 800c5d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5e2:	d10a      	bne.n	800c5fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	430a      	orrs	r2, r1
 800c5f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00a      	beq.n	800c61c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	430a      	orrs	r2, r1
 800c61a:	605a      	str	r2, [r3, #4]
  }
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b098      	sub	sp, #96	@ 0x60
 800c62c:	af02      	add	r7, sp, #8
 800c62e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c638:	f7f9 f8cc 	bl	80057d4 <HAL_GetTick>
 800c63c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f003 0308 	and.w	r3, r3, #8
 800c648:	2b08      	cmp	r3, #8
 800c64a:	d12f      	bne.n	800c6ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c64c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c654:	2200      	movs	r2, #0
 800c656:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f88e 	bl	800c77c <UART_WaitOnFlagUntilTimeout>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d022      	beq.n	800c6ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66e:	e853 3f00 	ldrex	r3, [r3]
 800c672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c67a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	461a      	mov	r2, r3
 800c682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c684:	647b      	str	r3, [r7, #68]	@ 0x44
 800c686:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c688:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c68a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c68c:	e841 2300 	strex	r3, r2, [r1]
 800c690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1e6      	bne.n	800c666 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2220      	movs	r2, #32
 800c69c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	e063      	b.n	800c774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 0304 	and.w	r3, r3, #4
 800c6b6:	2b04      	cmp	r3, #4
 800c6b8:	d149      	bne.n	800c74e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f857 	bl	800c77c <UART_WaitOnFlagUntilTimeout>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d03c      	beq.n	800c74e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6dc:	e853 3f00 	ldrex	r3, [r3]
 800c6e0:	623b      	str	r3, [r7, #32]
   return(result);
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6fa:	e841 2300 	strex	r3, r2, [r1]
 800c6fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1e6      	bne.n	800c6d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3308      	adds	r3, #8
 800c70c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	e853 3f00 	ldrex	r3, [r3]
 800c714:	60fb      	str	r3, [r7, #12]
   return(result);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f023 0301 	bic.w	r3, r3, #1
 800c71c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3308      	adds	r3, #8
 800c724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c726:	61fa      	str	r2, [r7, #28]
 800c728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72a:	69b9      	ldr	r1, [r7, #24]
 800c72c:	69fa      	ldr	r2, [r7, #28]
 800c72e:	e841 2300 	strex	r3, r2, [r1]
 800c732:	617b      	str	r3, [r7, #20]
   return(result);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1e5      	bne.n	800c706 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c74a:	2303      	movs	r3, #3
 800c74c:	e012      	b.n	800c774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2220      	movs	r2, #32
 800c752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2220      	movs	r2, #32
 800c75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3758      	adds	r7, #88	@ 0x58
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	60f8      	str	r0, [r7, #12]
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	603b      	str	r3, [r7, #0]
 800c788:	4613      	mov	r3, r2
 800c78a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c78c:	e04f      	b.n	800c82e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c78e:	69bb      	ldr	r3, [r7, #24]
 800c790:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c794:	d04b      	beq.n	800c82e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c796:	f7f9 f81d 	bl	80057d4 <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	69ba      	ldr	r2, [r7, #24]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d302      	bcc.n	800c7ac <UART_WaitOnFlagUntilTimeout+0x30>
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d101      	bne.n	800c7b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	e04e      	b.n	800c84e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 0304 	and.w	r3, r3, #4
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d037      	beq.n	800c82e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2b80      	cmp	r3, #128	@ 0x80
 800c7c2:	d034      	beq.n	800c82e <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2b40      	cmp	r3, #64	@ 0x40
 800c7c8:	d031      	beq.n	800c82e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	69db      	ldr	r3, [r3, #28]
 800c7d0:	f003 0308 	and.w	r3, r3, #8
 800c7d4:	2b08      	cmp	r3, #8
 800c7d6:	d110      	bne.n	800c7fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2208      	movs	r2, #8
 800c7de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 f95b 	bl	800ca9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2208      	movs	r2, #8
 800c7ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e029      	b.n	800c84e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	69db      	ldr	r3, [r3, #28]
 800c800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c808:	d111      	bne.n	800c82e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f000 f941 	bl	800ca9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2220      	movs	r2, #32
 800c81e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c82a:	2303      	movs	r3, #3
 800c82c:	e00f      	b.n	800c84e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	69da      	ldr	r2, [r3, #28]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	4013      	ands	r3, r2
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	bf0c      	ite	eq
 800c83e:	2301      	moveq	r3, #1
 800c840:	2300      	movne	r3, #0
 800c842:	b2db      	uxtb	r3, r3
 800c844:	461a      	mov	r2, r3
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d0a0      	beq.n	800c78e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
	...

0800c858 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c858:	b480      	push	{r7}
 800c85a:	b0a3      	sub	sp, #140	@ 0x8c
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4613      	mov	r3, r2
 800c864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	88fa      	ldrh	r2, [r7, #6]
 800c870:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	88fa      	ldrh	r2, [r7, #6]
 800c878:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c88a:	d10e      	bne.n	800c8aa <UART_Start_Receive_IT+0x52>
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	691b      	ldr	r3, [r3, #16]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d105      	bne.n	800c8a0 <UART_Start_Receive_IT+0x48>
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c89a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c89e:	e02d      	b.n	800c8fc <UART_Start_Receive_IT+0xa4>
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	22ff      	movs	r2, #255	@ 0xff
 800c8a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c8a8:	e028      	b.n	800c8fc <UART_Start_Receive_IT+0xa4>
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10d      	bne.n	800c8ce <UART_Start_Receive_IT+0x76>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d104      	bne.n	800c8c4 <UART_Start_Receive_IT+0x6c>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	22ff      	movs	r2, #255	@ 0xff
 800c8be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c8c2:	e01b      	b.n	800c8fc <UART_Start_Receive_IT+0xa4>
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	227f      	movs	r2, #127	@ 0x7f
 800c8c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c8cc:	e016      	b.n	800c8fc <UART_Start_Receive_IT+0xa4>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c8d6:	d10d      	bne.n	800c8f4 <UART_Start_Receive_IT+0x9c>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	691b      	ldr	r3, [r3, #16]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d104      	bne.n	800c8ea <UART_Start_Receive_IT+0x92>
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	227f      	movs	r2, #127	@ 0x7f
 800c8e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c8e8:	e008      	b.n	800c8fc <UART_Start_Receive_IT+0xa4>
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	223f      	movs	r2, #63	@ 0x3f
 800c8ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c8f2:	e003      	b.n	800c8fc <UART_Start_Receive_IT+0xa4>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2222      	movs	r2, #34	@ 0x22
 800c908:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3308      	adds	r3, #8
 800c912:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c914:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c916:	e853 3f00 	ldrex	r3, [r3]
 800c91a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c91c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c91e:	f043 0301 	orr.w	r3, r3, #1
 800c922:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3308      	adds	r3, #8
 800c92c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c930:	673a      	str	r2, [r7, #112]	@ 0x70
 800c932:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c934:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c936:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c938:	e841 2300 	strex	r3, r2, [r1]
 800c93c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c93e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1e3      	bne.n	800c90c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c94c:	d14f      	bne.n	800c9ee <UART_Start_Receive_IT+0x196>
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c954:	88fa      	ldrh	r2, [r7, #6]
 800c956:	429a      	cmp	r2, r3
 800c958:	d349      	bcc.n	800c9ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c962:	d107      	bne.n	800c974 <UART_Start_Receive_IT+0x11c>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d103      	bne.n	800c974 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	4a47      	ldr	r2, [pc, #284]	@ (800ca8c <UART_Start_Receive_IT+0x234>)
 800c970:	675a      	str	r2, [r3, #116]	@ 0x74
 800c972:	e002      	b.n	800c97a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	4a46      	ldr	r2, [pc, #280]	@ (800ca90 <UART_Start_Receive_IT+0x238>)
 800c978:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d01a      	beq.n	800c9b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c990:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c996:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c9a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c9a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c9aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c9ac:	e841 2300 	strex	r3, r2, [r1]
 800c9b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c9b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d1e4      	bne.n	800c982 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	3308      	adds	r3, #8
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c2:	e853 3f00 	ldrex	r3, [r3]
 800c9c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c9ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c9d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c9da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c9de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9e0:	e841 2300 	strex	r3, r2, [r1]
 800c9e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c9e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1e5      	bne.n	800c9b8 <UART_Start_Receive_IT+0x160>
 800c9ec:	e046      	b.n	800ca7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9f6:	d107      	bne.n	800ca08 <UART_Start_Receive_IT+0x1b0>
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d103      	bne.n	800ca08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	4a24      	ldr	r2, [pc, #144]	@ (800ca94 <UART_Start_Receive_IT+0x23c>)
 800ca04:	675a      	str	r2, [r3, #116]	@ 0x74
 800ca06:	e002      	b.n	800ca0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4a23      	ldr	r2, [pc, #140]	@ (800ca98 <UART_Start_Receive_IT+0x240>)
 800ca0c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d019      	beq.n	800ca4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1e:	e853 3f00 	ldrex	r3, [r3]
 800ca22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca26:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ca2a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	461a      	mov	r2, r3
 800ca32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca36:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca3c:	e841 2300 	strex	r3, r2, [r1]
 800ca40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ca42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1e6      	bne.n	800ca16 <UART_Start_Receive_IT+0x1be>
 800ca48:	e018      	b.n	800ca7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	e853 3f00 	ldrex	r3, [r3]
 800ca56:	613b      	str	r3, [r7, #16]
   return(result);
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	f043 0320 	orr.w	r3, r3, #32
 800ca5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	461a      	mov	r2, r3
 800ca66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca68:	623b      	str	r3, [r7, #32]
 800ca6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6c:	69f9      	ldr	r1, [r7, #28]
 800ca6e:	6a3a      	ldr	r2, [r7, #32]
 800ca70:	e841 2300 	strex	r3, r2, [r1]
 800ca74:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e6      	bne.n	800ca4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ca7c:	2300      	movs	r3, #0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	378c      	adds	r7, #140	@ 0x8c
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	0800d2b9 	.word	0x0800d2b9
 800ca90:	0800cf55 	.word	0x0800cf55
 800ca94:	0800cd9d 	.word	0x0800cd9d
 800ca98:	0800cbe5 	.word	0x0800cbe5

0800ca9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b095      	sub	sp, #84	@ 0x54
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caac:	e853 3f00 	ldrex	r3, [r3]
 800cab0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	461a      	mov	r2, r3
 800cac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cac2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cac8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800caca:	e841 2300 	strex	r3, r2, [r1]
 800cace:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1e6      	bne.n	800caa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3308      	adds	r3, #8
 800cadc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	e853 3f00 	ldrex	r3, [r3]
 800cae4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cae6:	69fa      	ldr	r2, [r7, #28]
 800cae8:	4b1e      	ldr	r3, [pc, #120]	@ (800cb64 <UART_EndRxTransfer+0xc8>)
 800caea:	4013      	ands	r3, r2
 800caec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3308      	adds	r3, #8
 800caf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800caf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800caf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cafc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cafe:	e841 2300 	strex	r3, r2, [r1]
 800cb02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1e5      	bne.n	800cad6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d118      	bne.n	800cb44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	e853 3f00 	ldrex	r3, [r3]
 800cb1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f023 0310 	bic.w	r3, r3, #16
 800cb26:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb30:	61bb      	str	r3, [r7, #24]
 800cb32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb34:	6979      	ldr	r1, [r7, #20]
 800cb36:	69ba      	ldr	r2, [r7, #24]
 800cb38:	e841 2300 	strex	r3, r2, [r1]
 800cb3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1e6      	bne.n	800cb12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cb58:	bf00      	nop
 800cb5a:	3754      	adds	r7, #84	@ 0x54
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	effffffe 	.word	0xeffffffe

0800cb68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f7fe ff32 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb84:	bf00      	nop
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	e853 3f00 	ldrex	r3, [r3]
 800cba0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cba8:	61fb      	str	r3, [r7, #28]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	61bb      	str	r3, [r7, #24]
 800cbb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb6:	6979      	ldr	r1, [r7, #20]
 800cbb8:	69ba      	ldr	r2, [r7, #24]
 800cbba:	e841 2300 	strex	r3, r2, [r1]
 800cbbe:	613b      	str	r3, [r7, #16]
   return(result);
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d1e6      	bne.n	800cb94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2220      	movs	r2, #32
 800cbca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7fe fefd 	bl	800b9d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbda:	bf00      	nop
 800cbdc:	3720      	adds	r7, #32
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
	...

0800cbe4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b09c      	sub	sp, #112	@ 0x70
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cbf2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbfc:	2b22      	cmp	r3, #34	@ 0x22
 800cbfe:	f040 80be 	bne.w	800cd7e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cc10:	b2d9      	uxtb	r1, r3
 800cc12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc1c:	400a      	ands	r2, r1
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	3b01      	subs	r3, #1
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f040 80a1 	bne.w	800cd8e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc54:	e853 3f00 	ldrex	r3, [r3]
 800cc58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc60:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	461a      	mov	r2, r3
 800cc68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc72:	e841 2300 	strex	r3, r2, [r1]
 800cc76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d1e6      	bne.n	800cc4c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	3308      	adds	r3, #8
 800cc84:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc88:	e853 3f00 	ldrex	r3, [r3]
 800cc8c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc90:	f023 0301 	bic.w	r3, r3, #1
 800cc94:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cc9e:	647a      	str	r2, [r7, #68]	@ 0x44
 800cca0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cca4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cca6:	e841 2300 	strex	r3, r2, [r1]
 800ccaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1e5      	bne.n	800cc7e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a33      	ldr	r2, [pc, #204]	@ (800cd98 <UART_RxISR_8BIT+0x1b4>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d01f      	beq.n	800cd10 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d018      	beq.n	800cd10 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce6:	e853 3f00 	ldrex	r3, [r3]
 800ccea:	623b      	str	r3, [r7, #32]
   return(result);
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ccf2:	663b      	str	r3, [r7, #96]	@ 0x60
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ccfc:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd04:	e841 2300 	strex	r3, r2, [r1]
 800cd08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1e6      	bne.n	800ccde <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d12e      	bne.n	800cd76 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	e853 3f00 	ldrex	r3, [r3]
 800cd2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f023 0310 	bic.w	r3, r3, #16
 800cd32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	461a      	mov	r2, r3
 800cd3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd3c:	61fb      	str	r3, [r7, #28]
 800cd3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd40:	69b9      	ldr	r1, [r7, #24]
 800cd42:	69fa      	ldr	r2, [r7, #28]
 800cd44:	e841 2300 	strex	r3, r2, [r1]
 800cd48:	617b      	str	r3, [r7, #20]
   return(result);
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1e6      	bne.n	800cd1e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	f003 0310 	and.w	r3, r3, #16
 800cd5a:	2b10      	cmp	r3, #16
 800cd5c:	d103      	bne.n	800cd66 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2210      	movs	r2, #16
 800cd64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7fe fe44 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd74:	e00b      	b.n	800cd8e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7f6 faec 	bl	8003354 <HAL_UART_RxCpltCallback>
}
 800cd7c:	e007      	b.n	800cd8e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	699a      	ldr	r2, [r3, #24]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f042 0208 	orr.w	r2, r2, #8
 800cd8c:	619a      	str	r2, [r3, #24]
}
 800cd8e:	bf00      	nop
 800cd90:	3770      	adds	r7, #112	@ 0x70
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	58000c00 	.word	0x58000c00

0800cd9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b09c      	sub	sp, #112	@ 0x70
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cdaa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdb4:	2b22      	cmp	r3, #34	@ 0x22
 800cdb6:	f040 80be 	bne.w	800cf36 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cdca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800cdce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdd8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdde:	1c9a      	adds	r2, r3, #2
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	3b01      	subs	r3, #1
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f040 80a1 	bne.w	800cf46 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce0c:	e853 3f00 	ldrex	r3, [r3]
 800ce10:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ce12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce18:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce22:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce24:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce2a:	e841 2300 	strex	r3, r2, [r1]
 800ce2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1e6      	bne.n	800ce04 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	3308      	adds	r3, #8
 800ce3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce40:	e853 3f00 	ldrex	r3, [r3]
 800ce44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce48:	f023 0301 	bic.w	r3, r3, #1
 800ce4c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3308      	adds	r3, #8
 800ce54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce56:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce5e:	e841 2300 	strex	r3, r2, [r1]
 800ce62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1e5      	bne.n	800ce36 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2220      	movs	r2, #32
 800ce6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a33      	ldr	r2, [pc, #204]	@ (800cf50 <UART_RxISR_16BIT+0x1b4>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d01f      	beq.n	800cec8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d018      	beq.n	800cec8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	e853 3f00 	ldrex	r3, [r3]
 800cea2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ceaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ceb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ceb6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ceba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cebc:	e841 2300 	strex	r3, r2, [r1]
 800cec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d1e6      	bne.n	800ce96 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d12e      	bne.n	800cf2e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	e853 3f00 	ldrex	r3, [r3]
 800cee2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	f023 0310 	bic.w	r3, r3, #16
 800ceea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	461a      	mov	r2, r3
 800cef2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cef4:	61bb      	str	r3, [r7, #24]
 800cef6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef8:	6979      	ldr	r1, [r7, #20]
 800cefa:	69ba      	ldr	r2, [r7, #24]
 800cefc:	e841 2300 	strex	r3, r2, [r1]
 800cf00:	613b      	str	r3, [r7, #16]
   return(result);
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1e6      	bne.n	800ced6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	69db      	ldr	r3, [r3, #28]
 800cf0e:	f003 0310 	and.w	r3, r3, #16
 800cf12:	2b10      	cmp	r3, #16
 800cf14:	d103      	bne.n	800cf1e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2210      	movs	r2, #16
 800cf1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7fe fd68 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf2c:	e00b      	b.n	800cf46 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7f6 fa10 	bl	8003354 <HAL_UART_RxCpltCallback>
}
 800cf34:	e007      	b.n	800cf46 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	699a      	ldr	r2, [r3, #24]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f042 0208 	orr.w	r2, r2, #8
 800cf44:	619a      	str	r2, [r3, #24]
}
 800cf46:	bf00      	nop
 800cf48:	3770      	adds	r7, #112	@ 0x70
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	58000c00 	.word	0x58000c00

0800cf54 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b0ac      	sub	sp, #176	@ 0xb0
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf62:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	69db      	ldr	r3, [r3, #28]
 800cf6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cf8a:	2b22      	cmp	r3, #34	@ 0x22
 800cf8c:	f040 8181 	bne.w	800d292 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cf96:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cf9a:	e124      	b.n	800d1e6 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfa2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cfa6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800cfaa:	b2d9      	uxtb	r1, r3
 800cfac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfb6:	400a      	ands	r2, r1
 800cfb8:	b2d2      	uxtb	r2, r2
 800cfba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfc0:	1c5a      	adds	r2, r3, #1
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cfe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfe6:	f003 0307 	and.w	r3, r3, #7
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d053      	beq.n	800d096 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cfee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d011      	beq.n	800d01e <UART_RxISR_8BIT_FIFOEN+0xca>
 800cffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00b      	beq.n	800d01e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2201      	movs	r2, #1
 800d00c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d014:	f043 0201 	orr.w	r2, r3, #1
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d01e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d022:	f003 0302 	and.w	r3, r3, #2
 800d026:	2b00      	cmp	r3, #0
 800d028:	d011      	beq.n	800d04e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d02a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d02e:	f003 0301 	and.w	r3, r3, #1
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00b      	beq.n	800d04e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2202      	movs	r2, #2
 800d03c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d044:	f043 0204 	orr.w	r2, r3, #4
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d04e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d052:	f003 0304 	and.w	r3, r3, #4
 800d056:	2b00      	cmp	r3, #0
 800d058:	d011      	beq.n	800d07e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d05a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00b      	beq.n	800d07e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2204      	movs	r2, #4
 800d06c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d074:	f043 0202 	orr.w	r2, r3, #2
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d084:	2b00      	cmp	r3, #0
 800d086:	d006      	beq.n	800d096 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7fe fcad 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f040 80a1 	bne.w	800d1e6 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d0ac:	e853 3f00 	ldrex	r3, [r3]
 800d0b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d0b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d0b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d0c8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ca:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d0cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d0ce:	e841 2300 	strex	r3, r2, [r1]
 800d0d2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d0d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1e4      	bne.n	800d0a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	3308      	adds	r3, #8
 800d0e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0e4:	e853 3f00 	ldrex	r3, [r3]
 800d0e8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d0ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0ec:	4b6f      	ldr	r3, [pc, #444]	@ (800d2ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3308      	adds	r3, #8
 800d0fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0fe:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d100:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d102:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d104:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d106:	e841 2300 	strex	r3, r2, [r1]
 800d10a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d10c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1e3      	bne.n	800d0da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2220      	movs	r2, #32
 800d116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a61      	ldr	r2, [pc, #388]	@ (800d2b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d021      	beq.n	800d174 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d01a      	beq.n	800d174 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d146:	e853 3f00 	ldrex	r3, [r3]
 800d14a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d14c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d14e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d152:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	461a      	mov	r2, r3
 800d15c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d160:	657b      	str	r3, [r7, #84]	@ 0x54
 800d162:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d164:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d166:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d168:	e841 2300 	strex	r3, r2, [r1]
 800d16c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d16e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d170:	2b00      	cmp	r3, #0
 800d172:	d1e4      	bne.n	800d13e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d130      	bne.n	800d1de <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d18a:	e853 3f00 	ldrex	r3, [r3]
 800d18e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d192:	f023 0310 	bic.w	r3, r3, #16
 800d196:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1ac:	e841 2300 	strex	r3, r2, [r1]
 800d1b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d1e4      	bne.n	800d182 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	69db      	ldr	r3, [r3, #28]
 800d1be:	f003 0310 	and.w	r3, r3, #16
 800d1c2:	2b10      	cmp	r3, #16
 800d1c4:	d103      	bne.n	800d1ce <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2210      	movs	r2, #16
 800d1cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7fe fc10 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800d1dc:	e00e      	b.n	800d1fc <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7f6 f8b8 	bl	8003354 <HAL_UART_RxCpltCallback>
        break;
 800d1e4:	e00a      	b.n	800d1fc <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d1e6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d006      	beq.n	800d1fc <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800d1ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1f2:	f003 0320 	and.w	r3, r3, #32
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f47f aed0 	bne.w	800cf9c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d202:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d206:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d049      	beq.n	800d2a2 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d214:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d218:	429a      	cmp	r2, r3
 800d21a:	d242      	bcs.n	800d2a2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3308      	adds	r3, #8
 800d222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d224:	6a3b      	ldr	r3, [r7, #32]
 800d226:	e853 3f00 	ldrex	r3, [r3]
 800d22a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d22c:	69fb      	ldr	r3, [r7, #28]
 800d22e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d232:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	3308      	adds	r3, #8
 800d23c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d248:	e841 2300 	strex	r3, r2, [r1]
 800d24c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1e3      	bne.n	800d21c <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a17      	ldr	r2, [pc, #92]	@ (800d2b4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800d258:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	e853 3f00 	ldrex	r3, [r3]
 800d266:	60bb      	str	r3, [r7, #8]
   return(result);
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	f043 0320 	orr.w	r3, r3, #32
 800d26e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	461a      	mov	r2, r3
 800d278:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d27c:	61bb      	str	r3, [r7, #24]
 800d27e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d280:	6979      	ldr	r1, [r7, #20]
 800d282:	69ba      	ldr	r2, [r7, #24]
 800d284:	e841 2300 	strex	r3, r2, [r1]
 800d288:	613b      	str	r3, [r7, #16]
   return(result);
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e4      	bne.n	800d25a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d290:	e007      	b.n	800d2a2 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	699a      	ldr	r2, [r3, #24]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f042 0208 	orr.w	r2, r2, #8
 800d2a0:	619a      	str	r2, [r3, #24]
}
 800d2a2:	bf00      	nop
 800d2a4:	37b0      	adds	r7, #176	@ 0xb0
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	effffffe 	.word	0xeffffffe
 800d2b0:	58000c00 	.word	0x58000c00
 800d2b4:	0800cbe5 	.word	0x0800cbe5

0800d2b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b0ae      	sub	sp, #184	@ 0xb8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d2c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	69db      	ldr	r3, [r3, #28]
 800d2d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2ee:	2b22      	cmp	r3, #34	@ 0x22
 800d2f0:	f040 8185 	bne.w	800d5fe <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d2fa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d2fe:	e128      	b.n	800d552 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d306:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d30e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d312:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d316:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d31a:	4013      	ands	r3, r2
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d322:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d328:	1c9a      	adds	r2, r3, #2
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d334:	b29b      	uxth	r3, r3
 800d336:	3b01      	subs	r3, #1
 800d338:	b29a      	uxth	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d34a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d34e:	f003 0307 	and.w	r3, r3, #7
 800d352:	2b00      	cmp	r3, #0
 800d354:	d053      	beq.n	800d3fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d35a:	f003 0301 	and.w	r3, r3, #1
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d011      	beq.n	800d386 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00b      	beq.n	800d386 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2201      	movs	r2, #1
 800d374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d37c:	f043 0201 	orr.w	r2, r3, #1
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d38a:	f003 0302 	and.w	r3, r3, #2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d011      	beq.n	800d3b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00b      	beq.n	800d3b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ac:	f043 0204 	orr.w	r2, r3, #4
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3ba:	f003 0304 	and.w	r3, r3, #4
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d011      	beq.n	800d3e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d3c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00b      	beq.n	800d3e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2204      	movs	r2, #4
 800d3d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3dc:	f043 0202 	orr.w	r2, r3, #2
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d006      	beq.n	800d3fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7fe faf9 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d404:	b29b      	uxth	r3, r3
 800d406:	2b00      	cmp	r3, #0
 800d408:	f040 80a3 	bne.w	800d552 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d414:	e853 3f00 	ldrex	r3, [r3]
 800d418:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d41a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d41c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	461a      	mov	r2, r3
 800d42a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d42e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d432:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d434:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d436:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d43a:	e841 2300 	strex	r3, r2, [r1]
 800d43e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1e2      	bne.n	800d40c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	3308      	adds	r3, #8
 800d44c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d44e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d450:	e853 3f00 	ldrex	r3, [r3]
 800d454:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d456:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d458:	4b6f      	ldr	r3, [pc, #444]	@ (800d618 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d45a:	4013      	ands	r3, r2
 800d45c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	3308      	adds	r3, #8
 800d466:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d46a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d46c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d470:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d472:	e841 2300 	strex	r3, r2, [r1]
 800d476:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1e3      	bne.n	800d446 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2220      	movs	r2, #32
 800d482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2200      	movs	r2, #0
 800d48a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4a61      	ldr	r2, [pc, #388]	@ (800d61c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d021      	beq.n	800d4e0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d01a      	beq.n	800d4e0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4b2:	e853 3f00 	ldrex	r3, [r3]
 800d4b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d4be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d4cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4ce:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4d4:	e841 2300 	strex	r3, r2, [r1]
 800d4d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1e4      	bne.n	800d4aa <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d130      	bne.n	800d54a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4f6:	e853 3f00 	ldrex	r3, [r3]
 800d4fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4fe:	f023 0310 	bic.w	r3, r3, #16
 800d502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	461a      	mov	r2, r3
 800d50c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d510:	647b      	str	r3, [r7, #68]	@ 0x44
 800d512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d518:	e841 2300 	strex	r3, r2, [r1]
 800d51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d1e4      	bne.n	800d4ee <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	69db      	ldr	r3, [r3, #28]
 800d52a:	f003 0310 	and.w	r3, r3, #16
 800d52e:	2b10      	cmp	r3, #16
 800d530:	d103      	bne.n	800d53a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2210      	movs	r2, #16
 800d538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7fe fa5a 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800d548:	e00e      	b.n	800d568 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7f5 ff02 	bl	8003354 <HAL_UART_RxCpltCallback>
        break;
 800d550:	e00a      	b.n	800d568 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d552:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d556:	2b00      	cmp	r3, #0
 800d558:	d006      	beq.n	800d568 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800d55a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d55e:	f003 0320 	and.w	r3, r3, #32
 800d562:	2b00      	cmp	r3, #0
 800d564:	f47f aecc 	bne.w	800d300 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d56e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d572:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d576:	2b00      	cmp	r3, #0
 800d578:	d049      	beq.n	800d60e <UART_RxISR_16BIT_FIFOEN+0x356>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d580:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d584:	429a      	cmp	r2, r3
 800d586:	d242      	bcs.n	800d60e <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	3308      	adds	r3, #8
 800d58e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d592:	e853 3f00 	ldrex	r3, [r3]
 800d596:	623b      	str	r3, [r7, #32]
   return(result);
 800d598:	6a3b      	ldr	r3, [r7, #32]
 800d59a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d59e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	3308      	adds	r3, #8
 800d5a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d5ac:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5b4:	e841 2300 	strex	r3, r2, [r1]
 800d5b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1e3      	bne.n	800d588 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a17      	ldr	r2, [pc, #92]	@ (800d620 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800d5c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	e853 3f00 	ldrex	r3, [r3]
 800d5d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f043 0320 	orr.w	r3, r3, #32
 800d5da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d5e8:	61fb      	str	r3, [r7, #28]
 800d5ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ec:	69b9      	ldr	r1, [r7, #24]
 800d5ee:	69fa      	ldr	r2, [r7, #28]
 800d5f0:	e841 2300 	strex	r3, r2, [r1]
 800d5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1e4      	bne.n	800d5c6 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d5fc:	e007      	b.n	800d60e <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	699a      	ldr	r2, [r3, #24]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f042 0208 	orr.w	r2, r2, #8
 800d60c:	619a      	str	r2, [r3, #24]
}
 800d60e:	bf00      	nop
 800d610:	37b8      	adds	r7, #184	@ 0xb8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	effffffe 	.word	0xeffffffe
 800d61c:	58000c00 	.word	0x58000c00
 800d620:	0800cd9d 	.word	0x0800cd9d

0800d624 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d101      	bne.n	800d676 <HAL_UARTEx_DisableFifoMode+0x16>
 800d672:	2302      	movs	r3, #2
 800d674:	e027      	b.n	800d6c6 <HAL_UARTEx_DisableFifoMode+0x66>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2201      	movs	r2, #1
 800d67a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2224      	movs	r2, #36	@ 0x24
 800d682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f022 0201 	bic.w	r2, r2, #1
 800d69c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d6a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3714      	adds	r7, #20
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b084      	sub	sp, #16
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
 800d6da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d101      	bne.n	800d6ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d6e6:	2302      	movs	r3, #2
 800d6e8:	e02d      	b.n	800d746 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2224      	movs	r2, #36	@ 0x24
 800d6f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f022 0201 	bic.w	r2, r2, #1
 800d710:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	683a      	ldr	r2, [r7, #0]
 800d722:	430a      	orrs	r2, r1
 800d724:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f850 	bl	800d7cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2220      	movs	r2, #32
 800d738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
 800d756:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d101      	bne.n	800d766 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d762:	2302      	movs	r3, #2
 800d764:	e02d      	b.n	800d7c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2201      	movs	r2, #1
 800d76a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2224      	movs	r2, #36	@ 0x24
 800d772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f022 0201 	bic.w	r2, r2, #1
 800d78c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	683a      	ldr	r2, [r7, #0]
 800d79e:	430a      	orrs	r2, r1
 800d7a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f812 	bl	800d7cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	68fa      	ldr	r2, [r7, #12]
 800d7ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2220      	movs	r2, #32
 800d7b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7c0:	2300      	movs	r3, #0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
	...

0800d7cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d108      	bne.n	800d7ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d7ec:	e031      	b.n	800d852 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d7ee:	2310      	movs	r3, #16
 800d7f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d7f2:	2310      	movs	r3, #16
 800d7f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	0e5b      	lsrs	r3, r3, #25
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	f003 0307 	and.w	r3, r3, #7
 800d804:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	0f5b      	lsrs	r3, r3, #29
 800d80e:	b2db      	uxtb	r3, r3
 800d810:	f003 0307 	and.w	r3, r3, #7
 800d814:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d816:	7bbb      	ldrb	r3, [r7, #14]
 800d818:	7b3a      	ldrb	r2, [r7, #12]
 800d81a:	4911      	ldr	r1, [pc, #68]	@ (800d860 <UARTEx_SetNbDataToProcess+0x94>)
 800d81c:	5c8a      	ldrb	r2, [r1, r2]
 800d81e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d822:	7b3a      	ldrb	r2, [r7, #12]
 800d824:	490f      	ldr	r1, [pc, #60]	@ (800d864 <UARTEx_SetNbDataToProcess+0x98>)
 800d826:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d828:	fb93 f3f2 	sdiv	r3, r3, r2
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	7b7a      	ldrb	r2, [r7, #13]
 800d838:	4909      	ldr	r1, [pc, #36]	@ (800d860 <UARTEx_SetNbDataToProcess+0x94>)
 800d83a:	5c8a      	ldrb	r2, [r1, r2]
 800d83c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d840:	7b7a      	ldrb	r2, [r7, #13]
 800d842:	4908      	ldr	r1, [pc, #32]	@ (800d864 <UARTEx_SetNbDataToProcess+0x98>)
 800d844:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d846:	fb93 f3f2 	sdiv	r3, r3, r2
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d852:	bf00      	nop
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	08014efc 	.word	0x08014efc
 800d864:	08014f04 	.word	0x08014f04

0800d868 <__NVIC_SetPriority>:
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	4603      	mov	r3, r0
 800d870:	6039      	str	r1, [r7, #0]
 800d872:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	db0a      	blt.n	800d892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	490c      	ldr	r1, [pc, #48]	@ (800d8b4 <__NVIC_SetPriority+0x4c>)
 800d882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d886:	0112      	lsls	r2, r2, #4
 800d888:	b2d2      	uxtb	r2, r2
 800d88a:	440b      	add	r3, r1
 800d88c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d890:	e00a      	b.n	800d8a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	b2da      	uxtb	r2, r3
 800d896:	4908      	ldr	r1, [pc, #32]	@ (800d8b8 <__NVIC_SetPriority+0x50>)
 800d898:	88fb      	ldrh	r3, [r7, #6]
 800d89a:	f003 030f 	and.w	r3, r3, #15
 800d89e:	3b04      	subs	r3, #4
 800d8a0:	0112      	lsls	r2, r2, #4
 800d8a2:	b2d2      	uxtb	r2, r2
 800d8a4:	440b      	add	r3, r1
 800d8a6:	761a      	strb	r2, [r3, #24]
}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr
 800d8b4:	e000e100 	.word	0xe000e100
 800d8b8:	e000ed00 	.word	0xe000ed00

0800d8bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d8c0:	4b05      	ldr	r3, [pc, #20]	@ (800d8d8 <SysTick_Handler+0x1c>)
 800d8c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d8c4:	f001 fdb0 	bl	800f428 <xTaskGetSchedulerState>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d001      	beq.n	800d8d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d8ce:	f002 fbab 	bl	8010028 <xPortSysTickHandler>
  }
}
 800d8d2:	bf00      	nop
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	e000e010 	.word	0xe000e010

0800d8dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	f06f 0004 	mvn.w	r0, #4
 800d8e6:	f7ff ffbf 	bl	800d868 <__NVIC_SetPriority>
#endif
}
 800d8ea:	bf00      	nop
 800d8ec:	bd80      	pop	{r7, pc}
	...

0800d8f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8f6:	f3ef 8305 	mrs	r3, IPSR
 800d8fa:	603b      	str	r3, [r7, #0]
  return(result);
 800d8fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d902:	f06f 0305 	mvn.w	r3, #5
 800d906:	607b      	str	r3, [r7, #4]
 800d908:	e00c      	b.n	800d924 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d90a:	4b0a      	ldr	r3, [pc, #40]	@ (800d934 <osKernelInitialize+0x44>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d105      	bne.n	800d91e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d912:	4b08      	ldr	r3, [pc, #32]	@ (800d934 <osKernelInitialize+0x44>)
 800d914:	2201      	movs	r2, #1
 800d916:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d918:	2300      	movs	r3, #0
 800d91a:	607b      	str	r3, [r7, #4]
 800d91c:	e002      	b.n	800d924 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d91e:	f04f 33ff 	mov.w	r3, #4294967295
 800d922:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d924:	687b      	ldr	r3, [r7, #4]
}
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	240016e4 	.word	0x240016e4

0800d938 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d93e:	f3ef 8305 	mrs	r3, IPSR
 800d942:	603b      	str	r3, [r7, #0]
  return(result);
 800d944:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d94a:	f06f 0305 	mvn.w	r3, #5
 800d94e:	607b      	str	r3, [r7, #4]
 800d950:	e010      	b.n	800d974 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d952:	4b0b      	ldr	r3, [pc, #44]	@ (800d980 <osKernelStart+0x48>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d109      	bne.n	800d96e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d95a:	f7ff ffbf 	bl	800d8dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d95e:	4b08      	ldr	r3, [pc, #32]	@ (800d980 <osKernelStart+0x48>)
 800d960:	2202      	movs	r2, #2
 800d962:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d964:	f001 f8fc 	bl	800eb60 <vTaskStartScheduler>
      stat = osOK;
 800d968:	2300      	movs	r3, #0
 800d96a:	607b      	str	r3, [r7, #4]
 800d96c:	e002      	b.n	800d974 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d96e:	f04f 33ff 	mov.w	r3, #4294967295
 800d972:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d974:	687b      	ldr	r3, [r7, #4]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3708      	adds	r7, #8
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	240016e4 	.word	0x240016e4

0800d984 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d984:	b580      	push	{r7, lr}
 800d986:	b08e      	sub	sp, #56	@ 0x38
 800d988:	af04      	add	r7, sp, #16
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d990:	2300      	movs	r3, #0
 800d992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d994:	f3ef 8305 	mrs	r3, IPSR
 800d998:	617b      	str	r3, [r7, #20]
  return(result);
 800d99a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d17e      	bne.n	800da9e <osThreadNew+0x11a>
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d07b      	beq.n	800da9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d9a6:	2380      	movs	r3, #128	@ 0x80
 800d9a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d9aa:	2318      	movs	r3, #24
 800d9ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d045      	beq.n	800da4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <osThreadNew+0x48>
        name = attr->name;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	699b      	ldr	r3, [r3, #24]
 800d9d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d008      	beq.n	800d9f2 <osThreadNew+0x6e>
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	2b38      	cmp	r3, #56	@ 0x38
 800d9e4:	d805      	bhi.n	800d9f2 <osThreadNew+0x6e>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	685b      	ldr	r3, [r3, #4]
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <osThreadNew+0x72>
        return (NULL);
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	e054      	b.n	800daa0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	695b      	ldr	r3, [r3, #20]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	695b      	ldr	r3, [r3, #20]
 800da02:	089b      	lsrs	r3, r3, #2
 800da04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00e      	beq.n	800da2c <osThreadNew+0xa8>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	2ba7      	cmp	r3, #167	@ 0xa7
 800da14:	d90a      	bls.n	800da2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d006      	beq.n	800da2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d002      	beq.n	800da2c <osThreadNew+0xa8>
        mem = 1;
 800da26:	2301      	movs	r3, #1
 800da28:	61bb      	str	r3, [r7, #24]
 800da2a:	e010      	b.n	800da4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10c      	bne.n	800da4e <osThreadNew+0xca>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d108      	bne.n	800da4e <osThreadNew+0xca>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	691b      	ldr	r3, [r3, #16]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d104      	bne.n	800da4e <osThreadNew+0xca>
          mem = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	61bb      	str	r3, [r7, #24]
 800da48:	e001      	b.n	800da4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800da4a:	2300      	movs	r3, #0
 800da4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	2b01      	cmp	r3, #1
 800da52:	d110      	bne.n	800da76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800da5c:	9202      	str	r2, [sp, #8]
 800da5e:	9301      	str	r3, [sp, #4]
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	9300      	str	r3, [sp, #0]
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	6a3a      	ldr	r2, [r7, #32]
 800da68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 fe3a 	bl	800e6e4 <xTaskCreateStatic>
 800da70:	4603      	mov	r3, r0
 800da72:	613b      	str	r3, [r7, #16]
 800da74:	e013      	b.n	800da9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d110      	bne.n	800da9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	b29a      	uxth	r2, r3
 800da80:	f107 0310 	add.w	r3, r7, #16
 800da84:	9301      	str	r3, [sp, #4]
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f000 fe88 	bl	800e7a4 <xTaskCreate>
 800da94:	4603      	mov	r3, r0
 800da96:	2b01      	cmp	r3, #1
 800da98:	d001      	beq.n	800da9e <osThreadNew+0x11a>
            hTask = NULL;
 800da9a:	2300      	movs	r3, #0
 800da9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800da9e:	693b      	ldr	r3, [r7, #16]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3728      	adds	r7, #40	@ 0x28
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	4a07      	ldr	r2, [pc, #28]	@ (800dad4 <vApplicationGetIdleTaskMemory+0x2c>)
 800dab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	4a06      	ldr	r2, [pc, #24]	@ (800dad8 <vApplicationGetIdleTaskMemory+0x30>)
 800dabe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2280      	movs	r2, #128	@ 0x80
 800dac4:	601a      	str	r2, [r3, #0]
}
 800dac6:	bf00      	nop
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	240016e8 	.word	0x240016e8
 800dad8:	24001790 	.word	0x24001790

0800dadc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	4a07      	ldr	r2, [pc, #28]	@ (800db08 <vApplicationGetTimerTaskMemory+0x2c>)
 800daec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	4a06      	ldr	r2, [pc, #24]	@ (800db0c <vApplicationGetTimerTaskMemory+0x30>)
 800daf2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dafa:	601a      	str	r2, [r3, #0]
}
 800dafc:	bf00      	nop
 800dafe:	3714      	adds	r7, #20
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr
 800db08:	24001990 	.word	0x24001990
 800db0c:	24001a38 	.word	0x24001a38

0800db10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f103 0208 	add.w	r2, r3, #8
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f04f 32ff 	mov.w	r2, #4294967295
 800db28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f103 0208 	add.w	r2, r3, #8
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f103 0208 	add.w	r2, r3, #8
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800db44:	bf00      	nop
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800db5e:	bf00      	nop
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800db6a:	b480      	push	{r7}
 800db6c:	b085      	sub	sp, #20
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
 800db72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	68fa      	ldr	r2, [r7, #12]
 800db7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	689a      	ldr	r2, [r3, #8]
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	683a      	ldr	r2, [r7, #0]
 800db8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	1c5a      	adds	r2, r3, #1
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	601a      	str	r2, [r3, #0]
}
 800dba6:	bf00      	nop
 800dba8:	3714      	adds	r7, #20
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr

0800dbb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dbb2:	b480      	push	{r7}
 800dbb4:	b085      	sub	sp, #20
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
 800dbba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc8:	d103      	bne.n	800dbd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	691b      	ldr	r3, [r3, #16]
 800dbce:	60fb      	str	r3, [r7, #12]
 800dbd0:	e00c      	b.n	800dbec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	3308      	adds	r3, #8
 800dbd6:	60fb      	str	r3, [r7, #12]
 800dbd8:	e002      	b.n	800dbe0 <vListInsert+0x2e>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d2f6      	bcs.n	800dbda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	685a      	ldr	r2, [r3, #4]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	1c5a      	adds	r2, r3, #1
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	601a      	str	r2, [r3, #0]
}
 800dc18:	bf00      	nop
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dc24:	b480      	push	{r7}
 800dc26:	b085      	sub	sp, #20
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	6892      	ldr	r2, [r2, #8]
 800dc3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	6852      	ldr	r2, [r2, #4]
 800dc44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d103      	bne.n	800dc58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	689a      	ldr	r2, [r3, #8]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	1e5a      	subs	r2, r3, #1
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
 800dc80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10b      	bne.n	800dca4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc90:	f383 8811 	msr	BASEPRI, r3
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dc9e:	bf00      	nop
 800dca0:	bf00      	nop
 800dca2:	e7fd      	b.n	800dca0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dca4:	f002 f930 	bl	800ff08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcb0:	68f9      	ldr	r1, [r7, #12]
 800dcb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dcb4:	fb01 f303 	mul.w	r3, r1, r3
 800dcb8:	441a      	add	r2, r3
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcd4:	3b01      	subs	r3, #1
 800dcd6:	68f9      	ldr	r1, [r7, #12]
 800dcd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800dcda:	fb01 f303 	mul.w	r3, r1, r3
 800dcde:	441a      	add	r2, r3
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	22ff      	movs	r2, #255	@ 0xff
 800dce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	22ff      	movs	r2, #255	@ 0xff
 800dcf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d114      	bne.n	800dd24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	691b      	ldr	r3, [r3, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d01a      	beq.n	800dd38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3310      	adds	r3, #16
 800dd06:	4618      	mov	r0, r3
 800dd08:	f001 f9c8 	bl	800f09c <xTaskRemoveFromEventList>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d012      	beq.n	800dd38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dd12:	4b0d      	ldr	r3, [pc, #52]	@ (800dd48 <xQueueGenericReset+0xd0>)
 800dd14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd18:	601a      	str	r2, [r3, #0]
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	e009      	b.n	800dd38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3310      	adds	r3, #16
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7ff fef1 	bl	800db10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3324      	adds	r3, #36	@ 0x24
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff feec 	bl	800db10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800dd38:	f002 f918 	bl	800ff6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dd3c:	2301      	movs	r3, #1
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	e000ed04 	.word	0xe000ed04

0800dd4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08e      	sub	sp, #56	@ 0x38
 800dd50:	af02      	add	r7, sp, #8
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10b      	bne.n	800dd78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800dd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dd72:	bf00      	nop
 800dd74:	bf00      	nop
 800dd76:	e7fd      	b.n	800dd74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d10b      	bne.n	800dd96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800dd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd82:	f383 8811 	msr	BASEPRI, r3
 800dd86:	f3bf 8f6f 	isb	sy
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dd90:	bf00      	nop
 800dd92:	bf00      	nop
 800dd94:	e7fd      	b.n	800dd92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d002      	beq.n	800dda2 <xQueueGenericCreateStatic+0x56>
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <xQueueGenericCreateStatic+0x5a>
 800dda2:	2301      	movs	r3, #1
 800dda4:	e000      	b.n	800dda8 <xQueueGenericCreateStatic+0x5c>
 800dda6:	2300      	movs	r3, #0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10b      	bne.n	800ddc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	623b      	str	r3, [r7, #32]
}
 800ddbe:	bf00      	nop
 800ddc0:	bf00      	nop
 800ddc2:	e7fd      	b.n	800ddc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d102      	bne.n	800ddd0 <xQueueGenericCreateStatic+0x84>
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <xQueueGenericCreateStatic+0x88>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e000      	b.n	800ddd6 <xQueueGenericCreateStatic+0x8a>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10b      	bne.n	800ddf2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	61fb      	str	r3, [r7, #28]
}
 800ddec:	bf00      	nop
 800ddee:	bf00      	nop
 800ddf0:	e7fd      	b.n	800ddee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ddf2:	2350      	movs	r3, #80	@ 0x50
 800ddf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2b50      	cmp	r3, #80	@ 0x50
 800ddfa:	d00b      	beq.n	800de14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ddfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	61bb      	str	r3, [r7, #24]
}
 800de0e:	bf00      	nop
 800de10:	bf00      	nop
 800de12:	e7fd      	b.n	800de10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800de14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800de1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d00d      	beq.n	800de3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800de20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de22:	2201      	movs	r2, #1
 800de24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800de28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800de2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	4613      	mov	r3, r2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	68b9      	ldr	r1, [r7, #8]
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f000 f840 	bl	800debc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800de3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800de3e:	4618      	mov	r0, r3
 800de40:	3730      	adds	r7, #48	@ 0x30
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}

0800de46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800de46:	b580      	push	{r7, lr}
 800de48:	b08a      	sub	sp, #40	@ 0x28
 800de4a:	af02      	add	r7, sp, #8
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	4613      	mov	r3, r2
 800de52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d10b      	bne.n	800de72 <xQueueGenericCreate+0x2c>
	__asm volatile
 800de5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5e:	f383 8811 	msr	BASEPRI, r3
 800de62:	f3bf 8f6f 	isb	sy
 800de66:	f3bf 8f4f 	dsb	sy
 800de6a:	613b      	str	r3, [r7, #16]
}
 800de6c:	bf00      	nop
 800de6e:	bf00      	nop
 800de70:	e7fd      	b.n	800de6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	fb02 f303 	mul.w	r3, r2, r3
 800de7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	3350      	adds	r3, #80	@ 0x50
 800de80:	4618      	mov	r0, r3
 800de82:	f002 f963 	bl	801014c <pvPortMalloc>
 800de86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d011      	beq.n	800deb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	3350      	adds	r3, #80	@ 0x50
 800de96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	2200      	movs	r2, #0
 800de9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dea0:	79fa      	ldrb	r2, [r7, #7]
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	4613      	mov	r3, r2
 800dea8:	697a      	ldr	r2, [r7, #20]
 800deaa:	68b9      	ldr	r1, [r7, #8]
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f000 f805 	bl	800debc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800deb2:	69bb      	ldr	r3, [r7, #24]
	}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3720      	adds	r7, #32
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d103      	bne.n	800ded8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	69ba      	ldr	r2, [r7, #24]
 800ded4:	601a      	str	r2, [r3, #0]
 800ded6:	e002      	b.n	800dede <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dede:	69bb      	ldr	r3, [r7, #24]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800deea:	2101      	movs	r1, #1
 800deec:	69b8      	ldr	r0, [r7, #24]
 800deee:	f7ff fec3 	bl	800dc78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	78fa      	ldrb	r2, [r7, #3]
 800def6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800defa:	bf00      	nop
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
	...

0800df04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08e      	sub	sp, #56	@ 0x38
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800df12:	2300      	movs	r3, #0
 800df14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800df1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10b      	bne.n	800df38 <xQueueGenericSend+0x34>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800df32:	bf00      	nop
 800df34:	bf00      	nop
 800df36:	e7fd      	b.n	800df34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d103      	bne.n	800df46 <xQueueGenericSend+0x42>
 800df3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df42:	2b00      	cmp	r3, #0
 800df44:	d101      	bne.n	800df4a <xQueueGenericSend+0x46>
 800df46:	2301      	movs	r3, #1
 800df48:	e000      	b.n	800df4c <xQueueGenericSend+0x48>
 800df4a:	2300      	movs	r3, #0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10b      	bne.n	800df68 <xQueueGenericSend+0x64>
	__asm volatile
 800df50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800df62:	bf00      	nop
 800df64:	bf00      	nop
 800df66:	e7fd      	b.n	800df64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	d103      	bne.n	800df76 <xQueueGenericSend+0x72>
 800df6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df72:	2b01      	cmp	r3, #1
 800df74:	d101      	bne.n	800df7a <xQueueGenericSend+0x76>
 800df76:	2301      	movs	r3, #1
 800df78:	e000      	b.n	800df7c <xQueueGenericSend+0x78>
 800df7a:	2300      	movs	r3, #0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10b      	bne.n	800df98 <xQueueGenericSend+0x94>
	__asm volatile
 800df80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df84:	f383 8811 	msr	BASEPRI, r3
 800df88:	f3bf 8f6f 	isb	sy
 800df8c:	f3bf 8f4f 	dsb	sy
 800df90:	623b      	str	r3, [r7, #32]
}
 800df92:	bf00      	nop
 800df94:	bf00      	nop
 800df96:	e7fd      	b.n	800df94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df98:	f001 fa46 	bl	800f428 <xTaskGetSchedulerState>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d102      	bne.n	800dfa8 <xQueueGenericSend+0xa4>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d101      	bne.n	800dfac <xQueueGenericSend+0xa8>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e000      	b.n	800dfae <xQueueGenericSend+0xaa>
 800dfac:	2300      	movs	r3, #0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d10b      	bne.n	800dfca <xQueueGenericSend+0xc6>
	__asm volatile
 800dfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	61fb      	str	r3, [r7, #28]
}
 800dfc4:	bf00      	nop
 800dfc6:	bf00      	nop
 800dfc8:	e7fd      	b.n	800dfc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dfca:	f001 ff9d 	bl	800ff08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d302      	bcc.n	800dfe0 <xQueueGenericSend+0xdc>
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	2b02      	cmp	r3, #2
 800dfde:	d129      	bne.n	800e034 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dfe0:	683a      	ldr	r2, [r7, #0]
 800dfe2:	68b9      	ldr	r1, [r7, #8]
 800dfe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dfe6:	f000 fa0f 	bl	800e408 <prvCopyDataToQueue>
 800dfea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d010      	beq.n	800e016 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff6:	3324      	adds	r3, #36	@ 0x24
 800dff8:	4618      	mov	r0, r3
 800dffa:	f001 f84f 	bl	800f09c <xTaskRemoveFromEventList>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d013      	beq.n	800e02c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e004:	4b3f      	ldr	r3, [pc, #252]	@ (800e104 <xQueueGenericSend+0x200>)
 800e006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	e00a      	b.n	800e02c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d007      	beq.n	800e02c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e01c:	4b39      	ldr	r3, [pc, #228]	@ (800e104 <xQueueGenericSend+0x200>)
 800e01e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e02c:	f001 ff9e 	bl	800ff6c <vPortExitCritical>
				return pdPASS;
 800e030:	2301      	movs	r3, #1
 800e032:	e063      	b.n	800e0fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d103      	bne.n	800e042 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e03a:	f001 ff97 	bl	800ff6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e03e:	2300      	movs	r3, #0
 800e040:	e05c      	b.n	800e0fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e044:	2b00      	cmp	r3, #0
 800e046:	d106      	bne.n	800e056 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e048:	f107 0314 	add.w	r3, r7, #20
 800e04c:	4618      	mov	r0, r3
 800e04e:	f001 f889 	bl	800f164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e052:	2301      	movs	r3, #1
 800e054:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e056:	f001 ff89 	bl	800ff6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e05a:	f000 fdf1 	bl	800ec40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e05e:	f001 ff53 	bl	800ff08 <vPortEnterCritical>
 800e062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e068:	b25b      	sxtb	r3, r3
 800e06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e06e:	d103      	bne.n	800e078 <xQueueGenericSend+0x174>
 800e070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e07e:	b25b      	sxtb	r3, r3
 800e080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e084:	d103      	bne.n	800e08e <xQueueGenericSend+0x18a>
 800e086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e08e:	f001 ff6d 	bl	800ff6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e092:	1d3a      	adds	r2, r7, #4
 800e094:	f107 0314 	add.w	r3, r7, #20
 800e098:	4611      	mov	r1, r2
 800e09a:	4618      	mov	r0, r3
 800e09c:	f001 f878 	bl	800f190 <xTaskCheckForTimeOut>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d124      	bne.n	800e0f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e0a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0a8:	f000 faa6 	bl	800e5f8 <prvIsQueueFull>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d018      	beq.n	800e0e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b4:	3310      	adds	r3, #16
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	4611      	mov	r1, r2
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 ff9c 	bl	800eff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e0c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0c2:	f000 fa31 	bl	800e528 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e0c6:	f000 fdc9 	bl	800ec5c <xTaskResumeAll>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f47f af7c 	bne.w	800dfca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e104 <xQueueGenericSend+0x200>)
 800e0d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	f3bf 8f4f 	dsb	sy
 800e0de:	f3bf 8f6f 	isb	sy
 800e0e2:	e772      	b.n	800dfca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e0e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0e6:	f000 fa1f 	bl	800e528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0ea:	f000 fdb7 	bl	800ec5c <xTaskResumeAll>
 800e0ee:	e76c      	b.n	800dfca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e0f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e0f2:	f000 fa19 	bl	800e528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0f6:	f000 fdb1 	bl	800ec5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e0fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3738      	adds	r7, #56	@ 0x38
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	e000ed04 	.word	0xe000ed04

0800e108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b090      	sub	sp, #64	@ 0x40
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d10b      	bne.n	800e138 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e132:	bf00      	nop
 800e134:	bf00      	nop
 800e136:	e7fd      	b.n	800e134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d103      	bne.n	800e146 <xQueueGenericSendFromISR+0x3e>
 800e13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e142:	2b00      	cmp	r3, #0
 800e144:	d101      	bne.n	800e14a <xQueueGenericSendFromISR+0x42>
 800e146:	2301      	movs	r3, #1
 800e148:	e000      	b.n	800e14c <xQueueGenericSendFromISR+0x44>
 800e14a:	2300      	movs	r3, #0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d10b      	bne.n	800e168 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e154:	f383 8811 	msr	BASEPRI, r3
 800e158:	f3bf 8f6f 	isb	sy
 800e15c:	f3bf 8f4f 	dsb	sy
 800e160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e162:	bf00      	nop
 800e164:	bf00      	nop
 800e166:	e7fd      	b.n	800e164 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d103      	bne.n	800e176 <xQueueGenericSendFromISR+0x6e>
 800e16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e172:	2b01      	cmp	r3, #1
 800e174:	d101      	bne.n	800e17a <xQueueGenericSendFromISR+0x72>
 800e176:	2301      	movs	r3, #1
 800e178:	e000      	b.n	800e17c <xQueueGenericSendFromISR+0x74>
 800e17a:	2300      	movs	r3, #0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10b      	bne.n	800e198 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	623b      	str	r3, [r7, #32]
}
 800e192:	bf00      	nop
 800e194:	bf00      	nop
 800e196:	e7fd      	b.n	800e194 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e198:	f001 ff96 	bl	80100c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e19c:	f3ef 8211 	mrs	r2, BASEPRI
 800e1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	61fa      	str	r2, [r7, #28]
 800e1b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e1b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d302      	bcc.n	800e1ca <xQueueGenericSendFromISR+0xc2>
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	2b02      	cmp	r3, #2
 800e1c8:	d12f      	bne.n	800e22a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e1d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e1da:	683a      	ldr	r2, [r7, #0]
 800e1dc:	68b9      	ldr	r1, [r7, #8]
 800e1de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e1e0:	f000 f912 	bl	800e408 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e1e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ec:	d112      	bne.n	800e214 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d016      	beq.n	800e224 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1f8:	3324      	adds	r3, #36	@ 0x24
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f000 ff4e 	bl	800f09c <xTaskRemoveFromEventList>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00e      	beq.n	800e224 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00b      	beq.n	800e224 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2201      	movs	r2, #1
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	e007      	b.n	800e224 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e218:	3301      	adds	r3, #1
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	b25a      	sxtb	r2, r3
 800e21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e224:	2301      	movs	r3, #1
 800e226:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e228:	e001      	b.n	800e22e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e22a:	2300      	movs	r3, #0
 800e22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e22e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e230:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e23a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3740      	adds	r7, #64	@ 0x40
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08c      	sub	sp, #48	@ 0x30
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e250:	2300      	movs	r3, #0
 800e252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d10b      	bne.n	800e276 <xQueueReceive+0x32>
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	623b      	str	r3, [r7, #32]
}
 800e270:	bf00      	nop
 800e272:	bf00      	nop
 800e274:	e7fd      	b.n	800e272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d103      	bne.n	800e284 <xQueueReceive+0x40>
 800e27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e280:	2b00      	cmp	r3, #0
 800e282:	d101      	bne.n	800e288 <xQueueReceive+0x44>
 800e284:	2301      	movs	r3, #1
 800e286:	e000      	b.n	800e28a <xQueueReceive+0x46>
 800e288:	2300      	movs	r3, #0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d10b      	bne.n	800e2a6 <xQueueReceive+0x62>
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	61fb      	str	r3, [r7, #28]
}
 800e2a0:	bf00      	nop
 800e2a2:	bf00      	nop
 800e2a4:	e7fd      	b.n	800e2a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2a6:	f001 f8bf 	bl	800f428 <xTaskGetSchedulerState>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d102      	bne.n	800e2b6 <xQueueReceive+0x72>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <xQueueReceive+0x76>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <xQueueReceive+0x78>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10b      	bne.n	800e2d8 <xQueueReceive+0x94>
	__asm volatile
 800e2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c4:	f383 8811 	msr	BASEPRI, r3
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	61bb      	str	r3, [r7, #24]
}
 800e2d2:	bf00      	nop
 800e2d4:	bf00      	nop
 800e2d6:	e7fd      	b.n	800e2d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2d8:	f001 fe16 	bl	800ff08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d01f      	beq.n	800e328 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e2e8:	68b9      	ldr	r1, [r7, #8]
 800e2ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2ec:	f000 f8f6 	bl	800e4dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f2:	1e5a      	subs	r2, r3, #1
 800e2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fa:	691b      	ldr	r3, [r3, #16]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00f      	beq.n	800e320 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e302:	3310      	adds	r3, #16
 800e304:	4618      	mov	r0, r3
 800e306:	f000 fec9 	bl	800f09c <xTaskRemoveFromEventList>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d007      	beq.n	800e320 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e310:	4b3c      	ldr	r3, [pc, #240]	@ (800e404 <xQueueReceive+0x1c0>)
 800e312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e316:	601a      	str	r2, [r3, #0]
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e320:	f001 fe24 	bl	800ff6c <vPortExitCritical>
				return pdPASS;
 800e324:	2301      	movs	r3, #1
 800e326:	e069      	b.n	800e3fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d103      	bne.n	800e336 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e32e:	f001 fe1d 	bl	800ff6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e332:	2300      	movs	r3, #0
 800e334:	e062      	b.n	800e3fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d106      	bne.n	800e34a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e33c:	f107 0310 	add.w	r3, r7, #16
 800e340:	4618      	mov	r0, r3
 800e342:	f000 ff0f 	bl	800f164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e346:	2301      	movs	r3, #1
 800e348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e34a:	f001 fe0f 	bl	800ff6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e34e:	f000 fc77 	bl	800ec40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e352:	f001 fdd9 	bl	800ff08 <vPortEnterCritical>
 800e356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e35c:	b25b      	sxtb	r3, r3
 800e35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e362:	d103      	bne.n	800e36c <xQueueReceive+0x128>
 800e364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e366:	2200      	movs	r2, #0
 800e368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e36e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e372:	b25b      	sxtb	r3, r3
 800e374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e378:	d103      	bne.n	800e382 <xQueueReceive+0x13e>
 800e37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37c:	2200      	movs	r2, #0
 800e37e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e382:	f001 fdf3 	bl	800ff6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e386:	1d3a      	adds	r2, r7, #4
 800e388:	f107 0310 	add.w	r3, r7, #16
 800e38c:	4611      	mov	r1, r2
 800e38e:	4618      	mov	r0, r3
 800e390:	f000 fefe 	bl	800f190 <xTaskCheckForTimeOut>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d123      	bne.n	800e3e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e39a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e39c:	f000 f916 	bl	800e5cc <prvIsQueueEmpty>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d017      	beq.n	800e3d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a8:	3324      	adds	r3, #36	@ 0x24
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f000 fe22 	bl	800eff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e3b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3b6:	f000 f8b7 	bl	800e528 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e3ba:	f000 fc4f 	bl	800ec5c <xTaskResumeAll>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d189      	bne.n	800e2d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e3c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e404 <xQueueReceive+0x1c0>)
 800e3c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3ca:	601a      	str	r2, [r3, #0]
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	e780      	b.n	800e2d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e3d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3d8:	f000 f8a6 	bl	800e528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3dc:	f000 fc3e 	bl	800ec5c <xTaskResumeAll>
 800e3e0:	e77a      	b.n	800e2d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e3e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3e4:	f000 f8a0 	bl	800e528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e3e8:	f000 fc38 	bl	800ec5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3ee:	f000 f8ed 	bl	800e5cc <prvIsQueueEmpty>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f43f af6f 	beq.w	800e2d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e3fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3730      	adds	r7, #48	@ 0x30
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	e000ed04 	.word	0xe000ed04

0800e408 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e414:	2300      	movs	r3, #0
 800e416:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e41c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10d      	bne.n	800e442 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d14d      	bne.n	800e4ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	4618      	mov	r0, r3
 800e434:	f001 f816 	bl	800f464 <xTaskPriorityDisinherit>
 800e438:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	609a      	str	r2, [r3, #8]
 800e440:	e043      	b.n	800e4ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d119      	bne.n	800e47c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6858      	ldr	r0, [r3, #4]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e450:	461a      	mov	r2, r3
 800e452:	68b9      	ldr	r1, [r7, #8]
 800e454:	f003 ff15 	bl	8012282 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e460:	441a      	add	r2, r3
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	685a      	ldr	r2, [r3, #4]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d32b      	bcc.n	800e4ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	605a      	str	r2, [r3, #4]
 800e47a:	e026      	b.n	800e4ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	68d8      	ldr	r0, [r3, #12]
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e484:	461a      	mov	r2, r3
 800e486:	68b9      	ldr	r1, [r7, #8]
 800e488:	f003 fefb 	bl	8012282 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	68da      	ldr	r2, [r3, #12]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e494:	425b      	negs	r3, r3
 800e496:	441a      	add	r2, r3
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	68da      	ldr	r2, [r3, #12]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d207      	bcs.n	800e4b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	689a      	ldr	r2, [r3, #8]
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4b0:	425b      	negs	r3, r3
 800e4b2:	441a      	add	r2, r3
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b02      	cmp	r3, #2
 800e4bc:	d105      	bne.n	800e4ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d002      	beq.n	800e4ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	1c5a      	adds	r2, r3, #1
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e4d2:	697b      	ldr	r3, [r7, #20]
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3718      	adds	r7, #24
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d018      	beq.n	800e520 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68da      	ldr	r2, [r3, #12]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4f6:	441a      	add	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68da      	ldr	r2, [r3, #12]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	429a      	cmp	r2, r3
 800e506:	d303      	bcc.n	800e510 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	68d9      	ldr	r1, [r3, #12]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e518:	461a      	mov	r2, r3
 800e51a:	6838      	ldr	r0, [r7, #0]
 800e51c:	f003 feb1 	bl	8012282 <memcpy>
	}
}
 800e520:	bf00      	nop
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e530:	f001 fcea 	bl	800ff08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e53a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e53c:	e011      	b.n	800e562 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e542:	2b00      	cmp	r3, #0
 800e544:	d012      	beq.n	800e56c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	3324      	adds	r3, #36	@ 0x24
 800e54a:	4618      	mov	r0, r3
 800e54c:	f000 fda6 	bl	800f09c <xTaskRemoveFromEventList>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e556:	f000 fe7f 	bl	800f258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e55a:	7bfb      	ldrb	r3, [r7, #15]
 800e55c:	3b01      	subs	r3, #1
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e566:	2b00      	cmp	r3, #0
 800e568:	dce9      	bgt.n	800e53e <prvUnlockQueue+0x16>
 800e56a:	e000      	b.n	800e56e <prvUnlockQueue+0x46>
					break;
 800e56c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	22ff      	movs	r2, #255	@ 0xff
 800e572:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e576:	f001 fcf9 	bl	800ff6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e57a:	f001 fcc5 	bl	800ff08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e584:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e586:	e011      	b.n	800e5ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	691b      	ldr	r3, [r3, #16]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d012      	beq.n	800e5b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	3310      	adds	r3, #16
 800e594:	4618      	mov	r0, r3
 800e596:	f000 fd81 	bl	800f09c <xTaskRemoveFromEventList>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d001      	beq.n	800e5a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e5a0:	f000 fe5a 	bl	800f258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e5a4:	7bbb      	ldrb	r3, [r7, #14]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e5ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	dce9      	bgt.n	800e588 <prvUnlockQueue+0x60>
 800e5b4:	e000      	b.n	800e5b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e5b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	22ff      	movs	r2, #255	@ 0xff
 800e5bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e5c0:	f001 fcd4 	bl	800ff6c <vPortExitCritical>
}
 800e5c4:	bf00      	nop
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e5d4:	f001 fc98 	bl	800ff08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d102      	bne.n	800e5e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	60fb      	str	r3, [r7, #12]
 800e5e4:	e001      	b.n	800e5ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e5ea:	f001 fcbf 	bl	800ff6c <vPortExitCritical>

	return xReturn;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3710      	adds	r7, #16
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd80      	pop	{r7, pc}

0800e5f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e600:	f001 fc82 	bl	800ff08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d102      	bne.n	800e616 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e610:	2301      	movs	r3, #1
 800e612:	60fb      	str	r3, [r7, #12]
 800e614:	e001      	b.n	800e61a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e616:	2300      	movs	r3, #0
 800e618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e61a:	f001 fca7 	bl	800ff6c <vPortExitCritical>

	return xReturn;
 800e61e:	68fb      	ldr	r3, [r7, #12]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3710      	adds	r7, #16
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e632:	2300      	movs	r3, #0
 800e634:	60fb      	str	r3, [r7, #12]
 800e636:	e014      	b.n	800e662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e638:	4a0f      	ldr	r2, [pc, #60]	@ (800e678 <vQueueAddToRegistry+0x50>)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10b      	bne.n	800e65c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e644:	490c      	ldr	r1, [pc, #48]	@ (800e678 <vQueueAddToRegistry+0x50>)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	683a      	ldr	r2, [r7, #0]
 800e64a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e64e:	4a0a      	ldr	r2, [pc, #40]	@ (800e678 <vQueueAddToRegistry+0x50>)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	4413      	add	r3, r2
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e65a:	e006      	b.n	800e66a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	3301      	adds	r3, #1
 800e660:	60fb      	str	r3, [r7, #12]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2b07      	cmp	r3, #7
 800e666:	d9e7      	bls.n	800e638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e668:	bf00      	nop
 800e66a:	bf00      	nop
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	24001e38 	.word	0x24001e38

0800e67c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b086      	sub	sp, #24
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e68c:	f001 fc3c 	bl	800ff08 <vPortEnterCritical>
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e696:	b25b      	sxtb	r3, r3
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69c:	d103      	bne.n	800e6a6 <vQueueWaitForMessageRestricted+0x2a>
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6ac:	b25b      	sxtb	r3, r3
 800e6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6b2:	d103      	bne.n	800e6bc <vQueueWaitForMessageRestricted+0x40>
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e6bc:	f001 fc56 	bl	800ff6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	3324      	adds	r3, #36	@ 0x24
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	68b9      	ldr	r1, [r7, #8]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f000 fcb7 	bl	800f044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e6d6:	6978      	ldr	r0, [r7, #20]
 800e6d8:	f7ff ff26 	bl	800e528 <prvUnlockQueue>
	}
 800e6dc:	bf00      	nop
 800e6de:	3718      	adds	r7, #24
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b08e      	sub	sp, #56	@ 0x38
 800e6e8:	af04      	add	r7, sp, #16
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
 800e6f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10b      	bne.n	800e710 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	623b      	str	r3, [r7, #32]
}
 800e70a:	bf00      	nop
 800e70c:	bf00      	nop
 800e70e:	e7fd      	b.n	800e70c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e712:	2b00      	cmp	r3, #0
 800e714:	d10b      	bne.n	800e72e <xTaskCreateStatic+0x4a>
	__asm volatile
 800e716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71a:	f383 8811 	msr	BASEPRI, r3
 800e71e:	f3bf 8f6f 	isb	sy
 800e722:	f3bf 8f4f 	dsb	sy
 800e726:	61fb      	str	r3, [r7, #28]
}
 800e728:	bf00      	nop
 800e72a:	bf00      	nop
 800e72c:	e7fd      	b.n	800e72a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e72e:	23a8      	movs	r3, #168	@ 0xa8
 800e730:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	2ba8      	cmp	r3, #168	@ 0xa8
 800e736:	d00b      	beq.n	800e750 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e73c:	f383 8811 	msr	BASEPRI, r3
 800e740:	f3bf 8f6f 	isb	sy
 800e744:	f3bf 8f4f 	dsb	sy
 800e748:	61bb      	str	r3, [r7, #24]
}
 800e74a:	bf00      	nop
 800e74c:	bf00      	nop
 800e74e:	e7fd      	b.n	800e74c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e750:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e754:	2b00      	cmp	r3, #0
 800e756:	d01e      	beq.n	800e796 <xTaskCreateStatic+0xb2>
 800e758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d01b      	beq.n	800e796 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e760:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e764:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e766:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76a:	2202      	movs	r2, #2
 800e76c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e770:	2300      	movs	r3, #0
 800e772:	9303      	str	r3, [sp, #12]
 800e774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e776:	9302      	str	r3, [sp, #8]
 800e778:	f107 0314 	add.w	r3, r7, #20
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	68b9      	ldr	r1, [r7, #8]
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f000 f851 	bl	800e830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e78e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e790:	f000 f8f6 	bl	800e980 <prvAddNewTaskToReadyList>
 800e794:	e001      	b.n	800e79a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e796:	2300      	movs	r3, #0
 800e798:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e79a:	697b      	ldr	r3, [r7, #20]
	}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3728      	adds	r7, #40	@ 0x28
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08c      	sub	sp, #48	@ 0x30
 800e7a8:	af04      	add	r7, sp, #16
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	603b      	str	r3, [r7, #0]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e7b4:	88fb      	ldrh	r3, [r7, #6]
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f001 fcc7 	bl	801014c <pvPortMalloc>
 800e7be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00e      	beq.n	800e7e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e7c6:	20a8      	movs	r0, #168	@ 0xa8
 800e7c8:	f001 fcc0 	bl	801014c <pvPortMalloc>
 800e7cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d003      	beq.n	800e7dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7da:	e005      	b.n	800e7e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e7dc:	6978      	ldr	r0, [r7, #20]
 800e7de:	f001 fd83 	bl	80102e8 <vPortFree>
 800e7e2:	e001      	b.n	800e7e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d017      	beq.n	800e81e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e7f6:	88fa      	ldrh	r2, [r7, #6]
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	9303      	str	r3, [sp, #12]
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	9302      	str	r3, [sp, #8]
 800e800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e802:	9301      	str	r3, [sp, #4]
 800e804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e806:	9300      	str	r3, [sp, #0]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	68b9      	ldr	r1, [r7, #8]
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f000 f80f 	bl	800e830 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e812:	69f8      	ldr	r0, [r7, #28]
 800e814:	f000 f8b4 	bl	800e980 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e818:	2301      	movs	r3, #1
 800e81a:	61bb      	str	r3, [r7, #24]
 800e81c:	e002      	b.n	800e824 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e81e:	f04f 33ff 	mov.w	r3, #4294967295
 800e822:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e824:	69bb      	ldr	r3, [r7, #24]
	}
 800e826:	4618      	mov	r0, r3
 800e828:	3720      	adds	r7, #32
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
	...

0800e830 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b088      	sub	sp, #32
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	607a      	str	r2, [r7, #4]
 800e83c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e840:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	461a      	mov	r2, r3
 800e848:	21a5      	movs	r1, #165	@ 0xa5
 800e84a:	f003 fbdc 	bl	8012006 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e852:	6879      	ldr	r1, [r7, #4]
 800e854:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e858:	440b      	add	r3, r1
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	4413      	add	r3, r2
 800e85e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	f023 0307 	bic.w	r3, r3, #7
 800e866:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	f003 0307 	and.w	r3, r3, #7
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00b      	beq.n	800e88a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e876:	f383 8811 	msr	BASEPRI, r3
 800e87a:	f3bf 8f6f 	isb	sy
 800e87e:	f3bf 8f4f 	dsb	sy
 800e882:	617b      	str	r3, [r7, #20]
}
 800e884:	bf00      	nop
 800e886:	bf00      	nop
 800e888:	e7fd      	b.n	800e886 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d01f      	beq.n	800e8d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e890:	2300      	movs	r3, #0
 800e892:	61fb      	str	r3, [r7, #28]
 800e894:	e012      	b.n	800e8bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	4413      	add	r3, r2
 800e89c:	7819      	ldrb	r1, [r3, #0]
 800e89e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	3334      	adds	r3, #52	@ 0x34
 800e8a6:	460a      	mov	r2, r1
 800e8a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d006      	beq.n	800e8c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	61fb      	str	r3, [r7, #28]
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	2b0f      	cmp	r3, #15
 800e8c0:	d9e9      	bls.n	800e896 <prvInitialiseNewTask+0x66>
 800e8c2:	e000      	b.n	800e8c6 <prvInitialiseNewTask+0x96>
			{
				break;
 800e8c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e8ce:	e003      	b.n	800e8d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8da:	2b37      	cmp	r3, #55	@ 0x37
 800e8dc:	d901      	bls.n	800e8e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e8de:	2337      	movs	r3, #55	@ 0x37
 800e8e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7ff f929 	bl	800db50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e900:	3318      	adds	r3, #24
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff f924 	bl	800db50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e90c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e90e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e910:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e916:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e91c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e920:	2200      	movs	r2, #0
 800e922:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e930:	3354      	adds	r3, #84	@ 0x54
 800e932:	224c      	movs	r2, #76	@ 0x4c
 800e934:	2100      	movs	r1, #0
 800e936:	4618      	mov	r0, r3
 800e938:	f003 fb65 	bl	8012006 <memset>
 800e93c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e93e:	4a0d      	ldr	r2, [pc, #52]	@ (800e974 <prvInitialiseNewTask+0x144>)
 800e940:	659a      	str	r2, [r3, #88]	@ 0x58
 800e942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e944:	4a0c      	ldr	r2, [pc, #48]	@ (800e978 <prvInitialiseNewTask+0x148>)
 800e946:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e94a:	4a0c      	ldr	r2, [pc, #48]	@ (800e97c <prvInitialiseNewTask+0x14c>)
 800e94c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	68f9      	ldr	r1, [r7, #12]
 800e952:	69b8      	ldr	r0, [r7, #24]
 800e954:	f001 f9a4 	bl	800fca0 <pxPortInitialiseStack>
 800e958:	4602      	mov	r2, r0
 800e95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e95c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e960:	2b00      	cmp	r3, #0
 800e962:	d002      	beq.n	800e96a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e96a:	bf00      	nop
 800e96c:	3720      	adds	r7, #32
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	240060cc 	.word	0x240060cc
 800e978:	24006134 	.word	0x24006134
 800e97c:	2400619c 	.word	0x2400619c

0800e980 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e988:	f001 fabe 	bl	800ff08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e98c:	4b2d      	ldr	r3, [pc, #180]	@ (800ea44 <prvAddNewTaskToReadyList+0xc4>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	3301      	adds	r3, #1
 800e992:	4a2c      	ldr	r2, [pc, #176]	@ (800ea44 <prvAddNewTaskToReadyList+0xc4>)
 800e994:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e996:	4b2c      	ldr	r3, [pc, #176]	@ (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d109      	bne.n	800e9b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e99e:	4a2a      	ldr	r2, [pc, #168]	@ (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e9a4:	4b27      	ldr	r3, [pc, #156]	@ (800ea44 <prvAddNewTaskToReadyList+0xc4>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d110      	bne.n	800e9ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e9ac:	f000 fc78 	bl	800f2a0 <prvInitialiseTaskLists>
 800e9b0:	e00d      	b.n	800e9ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e9b2:	4b26      	ldr	r3, [pc, #152]	@ (800ea4c <prvAddNewTaskToReadyList+0xcc>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d109      	bne.n	800e9ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e9ba:	4b23      	ldr	r3, [pc, #140]	@ (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d802      	bhi.n	800e9ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e9c8:	4a1f      	ldr	r2, [pc, #124]	@ (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e9ce:	4b20      	ldr	r3, [pc, #128]	@ (800ea50 <prvAddNewTaskToReadyList+0xd0>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	4a1e      	ldr	r2, [pc, #120]	@ (800ea50 <prvAddNewTaskToReadyList+0xd0>)
 800e9d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e9d8:	4b1d      	ldr	r3, [pc, #116]	@ (800ea50 <prvAddNewTaskToReadyList+0xd0>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9e4:	4b1b      	ldr	r3, [pc, #108]	@ (800ea54 <prvAddNewTaskToReadyList+0xd4>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d903      	bls.n	800e9f4 <prvAddNewTaskToReadyList+0x74>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9f0:	4a18      	ldr	r2, [pc, #96]	@ (800ea54 <prvAddNewTaskToReadyList+0xd4>)
 800e9f2:	6013      	str	r3, [r2, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	4a15      	ldr	r2, [pc, #84]	@ (800ea58 <prvAddNewTaskToReadyList+0xd8>)
 800ea02:	441a      	add	r2, r3
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4610      	mov	r0, r2
 800ea0c:	f7ff f8ad 	bl	800db6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ea10:	f001 faac 	bl	800ff6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ea14:	4b0d      	ldr	r3, [pc, #52]	@ (800ea4c <prvAddNewTaskToReadyList+0xcc>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00e      	beq.n	800ea3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea48 <prvAddNewTaskToReadyList+0xc8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d207      	bcs.n	800ea3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ea2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea5c <prvAddNewTaskToReadyList+0xdc>)
 800ea2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea3a:	bf00      	nop
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	2400234c 	.word	0x2400234c
 800ea48:	24001e78 	.word	0x24001e78
 800ea4c:	24002358 	.word	0x24002358
 800ea50:	24002368 	.word	0x24002368
 800ea54:	24002354 	.word	0x24002354
 800ea58:	24001e7c 	.word	0x24001e7c
 800ea5c:	e000ed04 	.word	0xe000ed04

0800ea60 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b08a      	sub	sp, #40	@ 0x28
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10b      	bne.n	800ea8c <vTaskDelayUntil+0x2c>
	__asm volatile
 800ea74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	617b      	str	r3, [r7, #20]
}
 800ea86:	bf00      	nop
 800ea88:	bf00      	nop
 800ea8a:	e7fd      	b.n	800ea88 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d10b      	bne.n	800eaaa <vTaskDelayUntil+0x4a>
	__asm volatile
 800ea92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea96:	f383 8811 	msr	BASEPRI, r3
 800ea9a:	f3bf 8f6f 	isb	sy
 800ea9e:	f3bf 8f4f 	dsb	sy
 800eaa2:	613b      	str	r3, [r7, #16]
}
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop
 800eaa8:	e7fd      	b.n	800eaa6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800eaaa:	4b2a      	ldr	r3, [pc, #168]	@ (800eb54 <vTaskDelayUntil+0xf4>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00b      	beq.n	800eaca <vTaskDelayUntil+0x6a>
	__asm volatile
 800eab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab6:	f383 8811 	msr	BASEPRI, r3
 800eaba:	f3bf 8f6f 	isb	sy
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	60fb      	str	r3, [r7, #12]
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop
 800eac8:	e7fd      	b.n	800eac6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800eaca:	f000 f8b9 	bl	800ec40 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800eace:	4b22      	ldr	r3, [pc, #136]	@ (800eb58 <vTaskDelayUntil+0xf8>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	683a      	ldr	r2, [r7, #0]
 800eada:	4413      	add	r3, r2
 800eadc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	6a3a      	ldr	r2, [r7, #32]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d20b      	bcs.n	800eb00 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d211      	bcs.n	800eb16 <vTaskDelayUntil+0xb6>
 800eaf2:	69fa      	ldr	r2, [r7, #28]
 800eaf4:	6a3b      	ldr	r3, [r7, #32]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d90d      	bls.n	800eb16 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800eafa:	2301      	movs	r3, #1
 800eafc:	627b      	str	r3, [r7, #36]	@ 0x24
 800eafe:	e00a      	b.n	800eb16 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	69fa      	ldr	r2, [r7, #28]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d303      	bcc.n	800eb12 <vTaskDelayUntil+0xb2>
 800eb0a:	69fa      	ldr	r2, [r7, #28]
 800eb0c:	6a3b      	ldr	r3, [r7, #32]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d901      	bls.n	800eb16 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800eb12:	2301      	movs	r3, #1
 800eb14:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	69fa      	ldr	r2, [r7, #28]
 800eb1a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d006      	beq.n	800eb30 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800eb22:	69fa      	ldr	r2, [r7, #28]
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	2100      	movs	r1, #0
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f000 fd0a 	bl	800f544 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800eb30:	f000 f894 	bl	800ec5c <xTaskResumeAll>
 800eb34:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d107      	bne.n	800eb4c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800eb3c:	4b07      	ldr	r3, [pc, #28]	@ (800eb5c <vTaskDelayUntil+0xfc>)
 800eb3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb42:	601a      	str	r2, [r3, #0]
 800eb44:	f3bf 8f4f 	dsb	sy
 800eb48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb4c:	bf00      	nop
 800eb4e:	3728      	adds	r7, #40	@ 0x28
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}
 800eb54:	24002374 	.word	0x24002374
 800eb58:	24002350 	.word	0x24002350
 800eb5c:	e000ed04 	.word	0xe000ed04

0800eb60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b08a      	sub	sp, #40	@ 0x28
 800eb64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb66:	2300      	movs	r3, #0
 800eb68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eb6e:	463a      	mov	r2, r7
 800eb70:	1d39      	adds	r1, r7, #4
 800eb72:	f107 0308 	add.w	r3, r7, #8
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fe ff96 	bl	800daa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eb7c:	6839      	ldr	r1, [r7, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	68ba      	ldr	r2, [r7, #8]
 800eb82:	9202      	str	r2, [sp, #8]
 800eb84:	9301      	str	r3, [sp, #4]
 800eb86:	2300      	movs	r3, #0
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	460a      	mov	r2, r1
 800eb8e:	4924      	ldr	r1, [pc, #144]	@ (800ec20 <vTaskStartScheduler+0xc0>)
 800eb90:	4824      	ldr	r0, [pc, #144]	@ (800ec24 <vTaskStartScheduler+0xc4>)
 800eb92:	f7ff fda7 	bl	800e6e4 <xTaskCreateStatic>
 800eb96:	4603      	mov	r3, r0
 800eb98:	4a23      	ldr	r2, [pc, #140]	@ (800ec28 <vTaskStartScheduler+0xc8>)
 800eb9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800eb9c:	4b22      	ldr	r3, [pc, #136]	@ (800ec28 <vTaskStartScheduler+0xc8>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d002      	beq.n	800ebaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800eba4:	2301      	movs	r3, #1
 800eba6:	617b      	str	r3, [r7, #20]
 800eba8:	e001      	b.n	800ebae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d102      	bne.n	800ebba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebb4:	f000 fd1a 	bl	800f5ec <xTimerCreateTimerTask>
 800ebb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d11b      	bne.n	800ebf8 <vTaskStartScheduler+0x98>
	__asm volatile
 800ebc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	613b      	str	r3, [r7, #16]
}
 800ebd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ebd4:	4b15      	ldr	r3, [pc, #84]	@ (800ec2c <vTaskStartScheduler+0xcc>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	3354      	adds	r3, #84	@ 0x54
 800ebda:	4a15      	ldr	r2, [pc, #84]	@ (800ec30 <vTaskStartScheduler+0xd0>)
 800ebdc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ebde:	4b15      	ldr	r3, [pc, #84]	@ (800ec34 <vTaskStartScheduler+0xd4>)
 800ebe0:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ebe6:	4b14      	ldr	r3, [pc, #80]	@ (800ec38 <vTaskStartScheduler+0xd8>)
 800ebe8:	2201      	movs	r2, #1
 800ebea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ebec:	4b13      	ldr	r3, [pc, #76]	@ (800ec3c <vTaskStartScheduler+0xdc>)
 800ebee:	2200      	movs	r2, #0
 800ebf0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ebf2:	f001 f8e5 	bl	800fdc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ebf6:	e00f      	b.n	800ec18 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfe:	d10b      	bne.n	800ec18 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ec00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	60fb      	str	r3, [r7, #12]
}
 800ec12:	bf00      	nop
 800ec14:	bf00      	nop
 800ec16:	e7fd      	b.n	800ec14 <vTaskStartScheduler+0xb4>
}
 800ec18:	bf00      	nop
 800ec1a:	3718      	adds	r7, #24
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	08014e58 	.word	0x08014e58
 800ec24:	0800f271 	.word	0x0800f271
 800ec28:	24002370 	.word	0x24002370
 800ec2c:	24001e78 	.word	0x24001e78
 800ec30:	240001f8 	.word	0x240001f8
 800ec34:	2400236c 	.word	0x2400236c
 800ec38:	24002358 	.word	0x24002358
 800ec3c:	24002350 	.word	0x24002350

0800ec40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec40:	b480      	push	{r7}
 800ec42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ec44:	4b04      	ldr	r3, [pc, #16]	@ (800ec58 <vTaskSuspendAll+0x18>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	4a03      	ldr	r2, [pc, #12]	@ (800ec58 <vTaskSuspendAll+0x18>)
 800ec4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ec4e:	bf00      	nop
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr
 800ec58:	24002374 	.word	0x24002374

0800ec5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec62:	2300      	movs	r3, #0
 800ec64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec66:	2300      	movs	r3, #0
 800ec68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec6a:	4b42      	ldr	r3, [pc, #264]	@ (800ed74 <xTaskResumeAll+0x118>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10b      	bne.n	800ec8a <xTaskResumeAll+0x2e>
	__asm volatile
 800ec72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec76:	f383 8811 	msr	BASEPRI, r3
 800ec7a:	f3bf 8f6f 	isb	sy
 800ec7e:	f3bf 8f4f 	dsb	sy
 800ec82:	603b      	str	r3, [r7, #0]
}
 800ec84:	bf00      	nop
 800ec86:	bf00      	nop
 800ec88:	e7fd      	b.n	800ec86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ec8a:	f001 f93d 	bl	800ff08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ec8e:	4b39      	ldr	r3, [pc, #228]	@ (800ed74 <xTaskResumeAll+0x118>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	4a37      	ldr	r2, [pc, #220]	@ (800ed74 <xTaskResumeAll+0x118>)
 800ec96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec98:	4b36      	ldr	r3, [pc, #216]	@ (800ed74 <xTaskResumeAll+0x118>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d162      	bne.n	800ed66 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eca0:	4b35      	ldr	r3, [pc, #212]	@ (800ed78 <xTaskResumeAll+0x11c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d05e      	beq.n	800ed66 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eca8:	e02f      	b.n	800ed0a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecaa:	4b34      	ldr	r3, [pc, #208]	@ (800ed7c <xTaskResumeAll+0x120>)
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	3318      	adds	r3, #24
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fe ffb4 	bl	800dc24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fe ffaf 	bl	800dc24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecca:	4b2d      	ldr	r3, [pc, #180]	@ (800ed80 <xTaskResumeAll+0x124>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d903      	bls.n	800ecda <xTaskResumeAll+0x7e>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecd6:	4a2a      	ldr	r2, [pc, #168]	@ (800ed80 <xTaskResumeAll+0x124>)
 800ecd8:	6013      	str	r3, [r2, #0]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecde:	4613      	mov	r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	4413      	add	r3, r2
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	4a27      	ldr	r2, [pc, #156]	@ (800ed84 <xTaskResumeAll+0x128>)
 800ece8:	441a      	add	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	3304      	adds	r3, #4
 800ecee:	4619      	mov	r1, r3
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	f7fe ff3a 	bl	800db6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecfa:	4b23      	ldr	r3, [pc, #140]	@ (800ed88 <xTaskResumeAll+0x12c>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d302      	bcc.n	800ed0a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ed04:	4b21      	ldr	r3, [pc, #132]	@ (800ed8c <xTaskResumeAll+0x130>)
 800ed06:	2201      	movs	r2, #1
 800ed08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed0a:	4b1c      	ldr	r3, [pc, #112]	@ (800ed7c <xTaskResumeAll+0x120>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1cb      	bne.n	800ecaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed18:	f000 fb66 	bl	800f3e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ed90 <xTaskResumeAll+0x134>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d010      	beq.n	800ed4a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed28:	f000 f846 	bl	800edb8 <xTaskIncrementTick>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d002      	beq.n	800ed38 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ed32:	4b16      	ldr	r3, [pc, #88]	@ (800ed8c <xTaskResumeAll+0x130>)
 800ed34:	2201      	movs	r2, #1
 800ed36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d1f1      	bne.n	800ed28 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ed44:	4b12      	ldr	r3, [pc, #72]	@ (800ed90 <xTaskResumeAll+0x134>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed4a:	4b10      	ldr	r3, [pc, #64]	@ (800ed8c <xTaskResumeAll+0x130>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d009      	beq.n	800ed66 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed52:	2301      	movs	r3, #1
 800ed54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed56:	4b0f      	ldr	r3, [pc, #60]	@ (800ed94 <xTaskResumeAll+0x138>)
 800ed58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed5c:	601a      	str	r2, [r3, #0]
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed66:	f001 f901 	bl	800ff6c <vPortExitCritical>

	return xAlreadyYielded;
 800ed6a:	68bb      	ldr	r3, [r7, #8]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	24002374 	.word	0x24002374
 800ed78:	2400234c 	.word	0x2400234c
 800ed7c:	2400230c 	.word	0x2400230c
 800ed80:	24002354 	.word	0x24002354
 800ed84:	24001e7c 	.word	0x24001e7c
 800ed88:	24001e78 	.word	0x24001e78
 800ed8c:	24002360 	.word	0x24002360
 800ed90:	2400235c 	.word	0x2400235c
 800ed94:	e000ed04 	.word	0xe000ed04

0800ed98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ed9e:	4b05      	ldr	r3, [pc, #20]	@ (800edb4 <xTaskGetTickCount+0x1c>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800eda4:	687b      	ldr	r3, [r7, #4]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	370c      	adds	r7, #12
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	24002350 	.word	0x24002350

0800edb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edbe:	2300      	movs	r3, #0
 800edc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edc2:	4b4f      	ldr	r3, [pc, #316]	@ (800ef00 <xTaskIncrementTick+0x148>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f040 8090 	bne.w	800eeec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800edcc:	4b4d      	ldr	r3, [pc, #308]	@ (800ef04 <xTaskIncrementTick+0x14c>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3301      	adds	r3, #1
 800edd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800edd4:	4a4b      	ldr	r2, [pc, #300]	@ (800ef04 <xTaskIncrementTick+0x14c>)
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d121      	bne.n	800ee24 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ede0:	4b49      	ldr	r3, [pc, #292]	@ (800ef08 <xTaskIncrementTick+0x150>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00b      	beq.n	800ee02 <xTaskIncrementTick+0x4a>
	__asm volatile
 800edea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edee:	f383 8811 	msr	BASEPRI, r3
 800edf2:	f3bf 8f6f 	isb	sy
 800edf6:	f3bf 8f4f 	dsb	sy
 800edfa:	603b      	str	r3, [r7, #0]
}
 800edfc:	bf00      	nop
 800edfe:	bf00      	nop
 800ee00:	e7fd      	b.n	800edfe <xTaskIncrementTick+0x46>
 800ee02:	4b41      	ldr	r3, [pc, #260]	@ (800ef08 <xTaskIncrementTick+0x150>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	60fb      	str	r3, [r7, #12]
 800ee08:	4b40      	ldr	r3, [pc, #256]	@ (800ef0c <xTaskIncrementTick+0x154>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a3e      	ldr	r2, [pc, #248]	@ (800ef08 <xTaskIncrementTick+0x150>)
 800ee0e:	6013      	str	r3, [r2, #0]
 800ee10:	4a3e      	ldr	r2, [pc, #248]	@ (800ef0c <xTaskIncrementTick+0x154>)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	4b3e      	ldr	r3, [pc, #248]	@ (800ef10 <xTaskIncrementTick+0x158>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	4a3c      	ldr	r2, [pc, #240]	@ (800ef10 <xTaskIncrementTick+0x158>)
 800ee1e:	6013      	str	r3, [r2, #0]
 800ee20:	f000 fae2 	bl	800f3e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee24:	4b3b      	ldr	r3, [pc, #236]	@ (800ef14 <xTaskIncrementTick+0x15c>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d349      	bcc.n	800eec2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee2e:	4b36      	ldr	r3, [pc, #216]	@ (800ef08 <xTaskIncrementTick+0x150>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d104      	bne.n	800ee42 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee38:	4b36      	ldr	r3, [pc, #216]	@ (800ef14 <xTaskIncrementTick+0x15c>)
 800ee3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee3e:	601a      	str	r2, [r3, #0]
					break;
 800ee40:	e03f      	b.n	800eec2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee42:	4b31      	ldr	r3, [pc, #196]	@ (800ef08 <xTaskIncrementTick+0x150>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d203      	bcs.n	800ee62 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee5a:	4a2e      	ldr	r2, [pc, #184]	@ (800ef14 <xTaskIncrementTick+0x15c>)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee60:	e02f      	b.n	800eec2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	3304      	adds	r3, #4
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7fe fedc 	bl	800dc24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d004      	beq.n	800ee7e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	3318      	adds	r3, #24
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fe fed3 	bl	800dc24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee82:	4b25      	ldr	r3, [pc, #148]	@ (800ef18 <xTaskIncrementTick+0x160>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d903      	bls.n	800ee92 <xTaskIncrementTick+0xda>
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee8e:	4a22      	ldr	r2, [pc, #136]	@ (800ef18 <xTaskIncrementTick+0x160>)
 800ee90:	6013      	str	r3, [r2, #0]
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee96:	4613      	mov	r3, r2
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4413      	add	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4a1f      	ldr	r2, [pc, #124]	@ (800ef1c <xTaskIncrementTick+0x164>)
 800eea0:	441a      	add	r2, r3
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	3304      	adds	r3, #4
 800eea6:	4619      	mov	r1, r3
 800eea8:	4610      	mov	r0, r2
 800eeaa:	f7fe fe5e 	bl	800db6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeb2:	4b1b      	ldr	r3, [pc, #108]	@ (800ef20 <xTaskIncrementTick+0x168>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d3b8      	bcc.n	800ee2e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800eebc:	2301      	movs	r3, #1
 800eebe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eec0:	e7b5      	b.n	800ee2e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eec2:	4b17      	ldr	r3, [pc, #92]	@ (800ef20 <xTaskIncrementTick+0x168>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eec8:	4914      	ldr	r1, [pc, #80]	@ (800ef1c <xTaskIncrementTick+0x164>)
 800eeca:	4613      	mov	r3, r2
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	4413      	add	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	440b      	add	r3, r1
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d901      	bls.n	800eede <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800eeda:	2301      	movs	r3, #1
 800eedc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eede:	4b11      	ldr	r3, [pc, #68]	@ (800ef24 <xTaskIncrementTick+0x16c>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d007      	beq.n	800eef6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800eee6:	2301      	movs	r3, #1
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	e004      	b.n	800eef6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eeec:	4b0e      	ldr	r3, [pc, #56]	@ (800ef28 <xTaskIncrementTick+0x170>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	3301      	adds	r3, #1
 800eef2:	4a0d      	ldr	r2, [pc, #52]	@ (800ef28 <xTaskIncrementTick+0x170>)
 800eef4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eef6:	697b      	ldr	r3, [r7, #20]
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3718      	adds	r7, #24
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}
 800ef00:	24002374 	.word	0x24002374
 800ef04:	24002350 	.word	0x24002350
 800ef08:	24002304 	.word	0x24002304
 800ef0c:	24002308 	.word	0x24002308
 800ef10:	24002364 	.word	0x24002364
 800ef14:	2400236c 	.word	0x2400236c
 800ef18:	24002354 	.word	0x24002354
 800ef1c:	24001e7c 	.word	0x24001e7c
 800ef20:	24001e78 	.word	0x24001e78
 800ef24:	24002360 	.word	0x24002360
 800ef28:	2400235c 	.word	0x2400235c

0800ef2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef32:	4b2b      	ldr	r3, [pc, #172]	@ (800efe0 <vTaskSwitchContext+0xb4>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d003      	beq.n	800ef42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef3a:	4b2a      	ldr	r3, [pc, #168]	@ (800efe4 <vTaskSwitchContext+0xb8>)
 800ef3c:	2201      	movs	r2, #1
 800ef3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef40:	e047      	b.n	800efd2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ef42:	4b28      	ldr	r3, [pc, #160]	@ (800efe4 <vTaskSwitchContext+0xb8>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef48:	4b27      	ldr	r3, [pc, #156]	@ (800efe8 <vTaskSwitchContext+0xbc>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	60fb      	str	r3, [r7, #12]
 800ef4e:	e011      	b.n	800ef74 <vTaskSwitchContext+0x48>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d10b      	bne.n	800ef6e <vTaskSwitchContext+0x42>
	__asm volatile
 800ef56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	607b      	str	r3, [r7, #4]
}
 800ef68:	bf00      	nop
 800ef6a:	bf00      	nop
 800ef6c:	e7fd      	b.n	800ef6a <vTaskSwitchContext+0x3e>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	3b01      	subs	r3, #1
 800ef72:	60fb      	str	r3, [r7, #12]
 800ef74:	491d      	ldr	r1, [pc, #116]	@ (800efec <vTaskSwitchContext+0xc0>)
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	440b      	add	r3, r1
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d0e3      	beq.n	800ef50 <vTaskSwitchContext+0x24>
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	4413      	add	r3, r2
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	4a16      	ldr	r2, [pc, #88]	@ (800efec <vTaskSwitchContext+0xc0>)
 800ef94:	4413      	add	r3, r2
 800ef96:	60bb      	str	r3, [r7, #8]
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	685a      	ldr	r2, [r3, #4]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	605a      	str	r2, [r3, #4]
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	685a      	ldr	r2, [r3, #4]
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	3308      	adds	r3, #8
 800efaa:	429a      	cmp	r2, r3
 800efac:	d104      	bne.n	800efb8 <vTaskSwitchContext+0x8c>
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	685a      	ldr	r2, [r3, #4]
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	605a      	str	r2, [r3, #4]
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	4a0c      	ldr	r2, [pc, #48]	@ (800eff0 <vTaskSwitchContext+0xc4>)
 800efc0:	6013      	str	r3, [r2, #0]
 800efc2:	4a09      	ldr	r2, [pc, #36]	@ (800efe8 <vTaskSwitchContext+0xbc>)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800efc8:	4b09      	ldr	r3, [pc, #36]	@ (800eff0 <vTaskSwitchContext+0xc4>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	3354      	adds	r3, #84	@ 0x54
 800efce:	4a09      	ldr	r2, [pc, #36]	@ (800eff4 <vTaskSwitchContext+0xc8>)
 800efd0:	6013      	str	r3, [r2, #0]
}
 800efd2:	bf00      	nop
 800efd4:	3714      	adds	r7, #20
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	24002374 	.word	0x24002374
 800efe4:	24002360 	.word	0x24002360
 800efe8:	24002354 	.word	0x24002354
 800efec:	24001e7c 	.word	0x24001e7c
 800eff0:	24001e78 	.word	0x24001e78
 800eff4:	240001f8 	.word	0x240001f8

0800eff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10b      	bne.n	800f020 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f00c:	f383 8811 	msr	BASEPRI, r3
 800f010:	f3bf 8f6f 	isb	sy
 800f014:	f3bf 8f4f 	dsb	sy
 800f018:	60fb      	str	r3, [r7, #12]
}
 800f01a:	bf00      	nop
 800f01c:	bf00      	nop
 800f01e:	e7fd      	b.n	800f01c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f020:	4b07      	ldr	r3, [pc, #28]	@ (800f040 <vTaskPlaceOnEventList+0x48>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	3318      	adds	r3, #24
 800f026:	4619      	mov	r1, r3
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7fe fdc2 	bl	800dbb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f02e:	2101      	movs	r1, #1
 800f030:	6838      	ldr	r0, [r7, #0]
 800f032:	f000 fa87 	bl	800f544 <prvAddCurrentTaskToDelayedList>
}
 800f036:	bf00      	nop
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	24001e78 	.word	0x24001e78

0800f044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d10b      	bne.n	800f06e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05a:	f383 8811 	msr	BASEPRI, r3
 800f05e:	f3bf 8f6f 	isb	sy
 800f062:	f3bf 8f4f 	dsb	sy
 800f066:	617b      	str	r3, [r7, #20]
}
 800f068:	bf00      	nop
 800f06a:	bf00      	nop
 800f06c:	e7fd      	b.n	800f06a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f06e:	4b0a      	ldr	r3, [pc, #40]	@ (800f098 <vTaskPlaceOnEventListRestricted+0x54>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	3318      	adds	r3, #24
 800f074:	4619      	mov	r1, r3
 800f076:	68f8      	ldr	r0, [r7, #12]
 800f078:	f7fe fd77 	bl	800db6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d002      	beq.n	800f088 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f082:	f04f 33ff 	mov.w	r3, #4294967295
 800f086:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f088:	6879      	ldr	r1, [r7, #4]
 800f08a:	68b8      	ldr	r0, [r7, #8]
 800f08c:	f000 fa5a 	bl	800f544 <prvAddCurrentTaskToDelayedList>
	}
 800f090:	bf00      	nop
 800f092:	3718      	adds	r7, #24
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	24001e78 	.word	0x24001e78

0800f09c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10b      	bne.n	800f0ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b6:	f383 8811 	msr	BASEPRI, r3
 800f0ba:	f3bf 8f6f 	isb	sy
 800f0be:	f3bf 8f4f 	dsb	sy
 800f0c2:	60fb      	str	r3, [r7, #12]
}
 800f0c4:	bf00      	nop
 800f0c6:	bf00      	nop
 800f0c8:	e7fd      	b.n	800f0c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	3318      	adds	r3, #24
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fe fda8 	bl	800dc24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800f14c <xTaskRemoveFromEventList+0xb0>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d11d      	bne.n	800f118 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	3304      	adds	r3, #4
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fe fd9f 	bl	800dc24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0ea:	4b19      	ldr	r3, [pc, #100]	@ (800f150 <xTaskRemoveFromEventList+0xb4>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d903      	bls.n	800f0fa <xTaskRemoveFromEventList+0x5e>
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0f6:	4a16      	ldr	r2, [pc, #88]	@ (800f150 <xTaskRemoveFromEventList+0xb4>)
 800f0f8:	6013      	str	r3, [r2, #0]
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0fe:	4613      	mov	r3, r2
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	4413      	add	r3, r2
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	4a13      	ldr	r2, [pc, #76]	@ (800f154 <xTaskRemoveFromEventList+0xb8>)
 800f108:	441a      	add	r2, r3
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	3304      	adds	r3, #4
 800f10e:	4619      	mov	r1, r3
 800f110:	4610      	mov	r0, r2
 800f112:	f7fe fd2a 	bl	800db6a <vListInsertEnd>
 800f116:	e005      	b.n	800f124 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	3318      	adds	r3, #24
 800f11c:	4619      	mov	r1, r3
 800f11e:	480e      	ldr	r0, [pc, #56]	@ (800f158 <xTaskRemoveFromEventList+0xbc>)
 800f120:	f7fe fd23 	bl	800db6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f128:	4b0c      	ldr	r3, [pc, #48]	@ (800f15c <xTaskRemoveFromEventList+0xc0>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f12e:	429a      	cmp	r2, r3
 800f130:	d905      	bls.n	800f13e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f132:	2301      	movs	r3, #1
 800f134:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f136:	4b0a      	ldr	r3, [pc, #40]	@ (800f160 <xTaskRemoveFromEventList+0xc4>)
 800f138:	2201      	movs	r2, #1
 800f13a:	601a      	str	r2, [r3, #0]
 800f13c:	e001      	b.n	800f142 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f13e:	2300      	movs	r3, #0
 800f140:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f142:	697b      	ldr	r3, [r7, #20]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3718      	adds	r7, #24
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	24002374 	.word	0x24002374
 800f150:	24002354 	.word	0x24002354
 800f154:	24001e7c 	.word	0x24001e7c
 800f158:	2400230c 	.word	0x2400230c
 800f15c:	24001e78 	.word	0x24001e78
 800f160:	24002360 	.word	0x24002360

0800f164 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f16c:	4b06      	ldr	r3, [pc, #24]	@ (800f188 <vTaskInternalSetTimeOutState+0x24>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f174:	4b05      	ldr	r3, [pc, #20]	@ (800f18c <vTaskInternalSetTimeOutState+0x28>)
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	605a      	str	r2, [r3, #4]
}
 800f17c:	bf00      	nop
 800f17e:	370c      	adds	r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	24002364 	.word	0x24002364
 800f18c:	24002350 	.word	0x24002350

0800f190 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d10b      	bne.n	800f1b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a4:	f383 8811 	msr	BASEPRI, r3
 800f1a8:	f3bf 8f6f 	isb	sy
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	613b      	str	r3, [r7, #16]
}
 800f1b2:	bf00      	nop
 800f1b4:	bf00      	nop
 800f1b6:	e7fd      	b.n	800f1b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10b      	bne.n	800f1d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	60fb      	str	r3, [r7, #12]
}
 800f1d0:	bf00      	nop
 800f1d2:	bf00      	nop
 800f1d4:	e7fd      	b.n	800f1d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f1d6:	f000 fe97 	bl	800ff08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f1da:	4b1d      	ldr	r3, [pc, #116]	@ (800f250 <xTaskCheckForTimeOut+0xc0>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f2:	d102      	bne.n	800f1fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	61fb      	str	r3, [r7, #28]
 800f1f8:	e023      	b.n	800f242 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	4b15      	ldr	r3, [pc, #84]	@ (800f254 <xTaskCheckForTimeOut+0xc4>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	429a      	cmp	r2, r3
 800f204:	d007      	beq.n	800f216 <xTaskCheckForTimeOut+0x86>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	69ba      	ldr	r2, [r7, #24]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d302      	bcc.n	800f216 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f210:	2301      	movs	r3, #1
 800f212:	61fb      	str	r3, [r7, #28]
 800f214:	e015      	b.n	800f242 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	697a      	ldr	r2, [r7, #20]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d20b      	bcs.n	800f238 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	1ad2      	subs	r2, r2, r3
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f7ff ff99 	bl	800f164 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f232:	2300      	movs	r3, #0
 800f234:	61fb      	str	r3, [r7, #28]
 800f236:	e004      	b.n	800f242 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	2200      	movs	r2, #0
 800f23c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f23e:	2301      	movs	r3, #1
 800f240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f242:	f000 fe93 	bl	800ff6c <vPortExitCritical>

	return xReturn;
 800f246:	69fb      	ldr	r3, [r7, #28]
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3720      	adds	r7, #32
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	24002350 	.word	0x24002350
 800f254:	24002364 	.word	0x24002364

0800f258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f258:	b480      	push	{r7}
 800f25a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f25c:	4b03      	ldr	r3, [pc, #12]	@ (800f26c <vTaskMissedYield+0x14>)
 800f25e:	2201      	movs	r2, #1
 800f260:	601a      	str	r2, [r3, #0]
}
 800f262:	bf00      	nop
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	24002360 	.word	0x24002360

0800f270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f278:	f000 f852 	bl	800f320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f27c:	4b06      	ldr	r3, [pc, #24]	@ (800f298 <prvIdleTask+0x28>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b01      	cmp	r3, #1
 800f282:	d9f9      	bls.n	800f278 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f284:	4b05      	ldr	r3, [pc, #20]	@ (800f29c <prvIdleTask+0x2c>)
 800f286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f28a:	601a      	str	r2, [r3, #0]
 800f28c:	f3bf 8f4f 	dsb	sy
 800f290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f294:	e7f0      	b.n	800f278 <prvIdleTask+0x8>
 800f296:	bf00      	nop
 800f298:	24001e7c 	.word	0x24001e7c
 800f29c:	e000ed04 	.word	0xe000ed04

0800f2a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	607b      	str	r3, [r7, #4]
 800f2aa:	e00c      	b.n	800f2c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	4413      	add	r3, r2
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	4a12      	ldr	r2, [pc, #72]	@ (800f300 <prvInitialiseTaskLists+0x60>)
 800f2b8:	4413      	add	r3, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fe fc28 	bl	800db10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	607b      	str	r3, [r7, #4]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b37      	cmp	r3, #55	@ 0x37
 800f2ca:	d9ef      	bls.n	800f2ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f2cc:	480d      	ldr	r0, [pc, #52]	@ (800f304 <prvInitialiseTaskLists+0x64>)
 800f2ce:	f7fe fc1f 	bl	800db10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2d2:	480d      	ldr	r0, [pc, #52]	@ (800f308 <prvInitialiseTaskLists+0x68>)
 800f2d4:	f7fe fc1c 	bl	800db10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2d8:	480c      	ldr	r0, [pc, #48]	@ (800f30c <prvInitialiseTaskLists+0x6c>)
 800f2da:	f7fe fc19 	bl	800db10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f2de:	480c      	ldr	r0, [pc, #48]	@ (800f310 <prvInitialiseTaskLists+0x70>)
 800f2e0:	f7fe fc16 	bl	800db10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f2e4:	480b      	ldr	r0, [pc, #44]	@ (800f314 <prvInitialiseTaskLists+0x74>)
 800f2e6:	f7fe fc13 	bl	800db10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f2ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f318 <prvInitialiseTaskLists+0x78>)
 800f2ec:	4a05      	ldr	r2, [pc, #20]	@ (800f304 <prvInitialiseTaskLists+0x64>)
 800f2ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f2f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f31c <prvInitialiseTaskLists+0x7c>)
 800f2f2:	4a05      	ldr	r2, [pc, #20]	@ (800f308 <prvInitialiseTaskLists+0x68>)
 800f2f4:	601a      	str	r2, [r3, #0]
}
 800f2f6:	bf00      	nop
 800f2f8:	3708      	adds	r7, #8
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	bd80      	pop	{r7, pc}
 800f2fe:	bf00      	nop
 800f300:	24001e7c 	.word	0x24001e7c
 800f304:	240022dc 	.word	0x240022dc
 800f308:	240022f0 	.word	0x240022f0
 800f30c:	2400230c 	.word	0x2400230c
 800f310:	24002320 	.word	0x24002320
 800f314:	24002338 	.word	0x24002338
 800f318:	24002304 	.word	0x24002304
 800f31c:	24002308 	.word	0x24002308

0800f320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f326:	e019      	b.n	800f35c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f328:	f000 fdee 	bl	800ff08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f32c:	4b10      	ldr	r3, [pc, #64]	@ (800f370 <prvCheckTasksWaitingTermination+0x50>)
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	3304      	adds	r3, #4
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fe fc73 	bl	800dc24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f33e:	4b0d      	ldr	r3, [pc, #52]	@ (800f374 <prvCheckTasksWaitingTermination+0x54>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	3b01      	subs	r3, #1
 800f344:	4a0b      	ldr	r2, [pc, #44]	@ (800f374 <prvCheckTasksWaitingTermination+0x54>)
 800f346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f348:	4b0b      	ldr	r3, [pc, #44]	@ (800f378 <prvCheckTasksWaitingTermination+0x58>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	3b01      	subs	r3, #1
 800f34e:	4a0a      	ldr	r2, [pc, #40]	@ (800f378 <prvCheckTasksWaitingTermination+0x58>)
 800f350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f352:	f000 fe0b 	bl	800ff6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f810 	bl	800f37c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f35c:	4b06      	ldr	r3, [pc, #24]	@ (800f378 <prvCheckTasksWaitingTermination+0x58>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d1e1      	bne.n	800f328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f364:	bf00      	nop
 800f366:	bf00      	nop
 800f368:	3708      	adds	r7, #8
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	24002320 	.word	0x24002320
 800f374:	2400234c 	.word	0x2400234c
 800f378:	24002334 	.word	0x24002334

0800f37c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	3354      	adds	r3, #84	@ 0x54
 800f388:	4618      	mov	r0, r3
 800f38a:	f002 feb9 	bl	8012100 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f394:	2b00      	cmp	r3, #0
 800f396:	d108      	bne.n	800f3aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f39c:	4618      	mov	r0, r3
 800f39e:	f000 ffa3 	bl	80102e8 <vPortFree>
				vPortFree( pxTCB );
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 ffa0 	bl	80102e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f3a8:	e019      	b.n	800f3de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d103      	bne.n	800f3bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 ff97 	bl	80102e8 <vPortFree>
	}
 800f3ba:	e010      	b.n	800f3de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	d00b      	beq.n	800f3de <prvDeleteTCB+0x62>
	__asm volatile
 800f3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3ca:	f383 8811 	msr	BASEPRI, r3
 800f3ce:	f3bf 8f6f 	isb	sy
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	60fb      	str	r3, [r7, #12]
}
 800f3d8:	bf00      	nop
 800f3da:	bf00      	nop
 800f3dc:	e7fd      	b.n	800f3da <prvDeleteTCB+0x5e>
	}
 800f3de:	bf00      	nop
 800f3e0:	3710      	adds	r7, #16
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
	...

0800f3e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f420 <prvResetNextTaskUnblockTime+0x38>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d104      	bne.n	800f402 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f3f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f424 <prvResetNextTaskUnblockTime+0x3c>)
 800f3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f3fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f400:	e008      	b.n	800f414 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f402:	4b07      	ldr	r3, [pc, #28]	@ (800f420 <prvResetNextTaskUnblockTime+0x38>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	4a04      	ldr	r2, [pc, #16]	@ (800f424 <prvResetNextTaskUnblockTime+0x3c>)
 800f412:	6013      	str	r3, [r2, #0]
}
 800f414:	bf00      	nop
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	24002304 	.word	0x24002304
 800f424:	2400236c 	.word	0x2400236c

0800f428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f42e:	4b0b      	ldr	r3, [pc, #44]	@ (800f45c <xTaskGetSchedulerState+0x34>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d102      	bne.n	800f43c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f436:	2301      	movs	r3, #1
 800f438:	607b      	str	r3, [r7, #4]
 800f43a:	e008      	b.n	800f44e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f43c:	4b08      	ldr	r3, [pc, #32]	@ (800f460 <xTaskGetSchedulerState+0x38>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d102      	bne.n	800f44a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f444:	2302      	movs	r3, #2
 800f446:	607b      	str	r3, [r7, #4]
 800f448:	e001      	b.n	800f44e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f44a:	2300      	movs	r3, #0
 800f44c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f44e:	687b      	ldr	r3, [r7, #4]
	}
 800f450:	4618      	mov	r0, r3
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr
 800f45c:	24002358 	.word	0x24002358
 800f460:	24002374 	.word	0x24002374

0800f464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f464:	b580      	push	{r7, lr}
 800f466:	b086      	sub	sp, #24
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f470:	2300      	movs	r3, #0
 800f472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d058      	beq.n	800f52c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f47a:	4b2f      	ldr	r3, [pc, #188]	@ (800f538 <xTaskPriorityDisinherit+0xd4>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	693a      	ldr	r2, [r7, #16]
 800f480:	429a      	cmp	r2, r3
 800f482:	d00b      	beq.n	800f49c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f488:	f383 8811 	msr	BASEPRI, r3
 800f48c:	f3bf 8f6f 	isb	sy
 800f490:	f3bf 8f4f 	dsb	sy
 800f494:	60fb      	str	r3, [r7, #12]
}
 800f496:	bf00      	nop
 800f498:	bf00      	nop
 800f49a:	e7fd      	b.n	800f498 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d10b      	bne.n	800f4bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a8:	f383 8811 	msr	BASEPRI, r3
 800f4ac:	f3bf 8f6f 	isb	sy
 800f4b0:	f3bf 8f4f 	dsb	sy
 800f4b4:	60bb      	str	r3, [r7, #8]
}
 800f4b6:	bf00      	nop
 800f4b8:	bf00      	nop
 800f4ba:	e7fd      	b.n	800f4b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4c0:	1e5a      	subs	r2, r3, #1
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d02c      	beq.n	800f52c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d128      	bne.n	800f52c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	3304      	adds	r3, #4
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fe fba0 	bl	800dc24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4fc:	4b0f      	ldr	r3, [pc, #60]	@ (800f53c <xTaskPriorityDisinherit+0xd8>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	429a      	cmp	r2, r3
 800f502:	d903      	bls.n	800f50c <xTaskPriorityDisinherit+0xa8>
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f508:	4a0c      	ldr	r2, [pc, #48]	@ (800f53c <xTaskPriorityDisinherit+0xd8>)
 800f50a:	6013      	str	r3, [r2, #0]
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f510:	4613      	mov	r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	4413      	add	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4a09      	ldr	r2, [pc, #36]	@ (800f540 <xTaskPriorityDisinherit+0xdc>)
 800f51a:	441a      	add	r2, r3
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	3304      	adds	r3, #4
 800f520:	4619      	mov	r1, r3
 800f522:	4610      	mov	r0, r2
 800f524:	f7fe fb21 	bl	800db6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f528:	2301      	movs	r3, #1
 800f52a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f52c:	697b      	ldr	r3, [r7, #20]
	}
 800f52e:	4618      	mov	r0, r3
 800f530:	3718      	adds	r7, #24
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	24001e78 	.word	0x24001e78
 800f53c:	24002354 	.word	0x24002354
 800f540:	24001e7c 	.word	0x24001e7c

0800f544 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f54e:	4b21      	ldr	r3, [pc, #132]	@ (800f5d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f554:	4b20      	ldr	r3, [pc, #128]	@ (800f5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	3304      	adds	r3, #4
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fe fb62 	bl	800dc24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f566:	d10a      	bne.n	800f57e <prvAddCurrentTaskToDelayedList+0x3a>
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d007      	beq.n	800f57e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f56e:	4b1a      	ldr	r3, [pc, #104]	@ (800f5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	3304      	adds	r3, #4
 800f574:	4619      	mov	r1, r3
 800f576:	4819      	ldr	r0, [pc, #100]	@ (800f5dc <prvAddCurrentTaskToDelayedList+0x98>)
 800f578:	f7fe faf7 	bl	800db6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f57c:	e026      	b.n	800f5cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4413      	add	r3, r2
 800f584:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f586:	4b14      	ldr	r3, [pc, #80]	@ (800f5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f58e:	68ba      	ldr	r2, [r7, #8]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	429a      	cmp	r2, r3
 800f594:	d209      	bcs.n	800f5aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f596:	4b12      	ldr	r3, [pc, #72]	@ (800f5e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	4b0f      	ldr	r3, [pc, #60]	@ (800f5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3304      	adds	r3, #4
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	4610      	mov	r0, r2
 800f5a4:	f7fe fb05 	bl	800dbb2 <vListInsert>
}
 800f5a8:	e010      	b.n	800f5cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f5e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800f5d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	3304      	adds	r3, #4
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	4610      	mov	r0, r2
 800f5b8:	f7fe fafb 	bl	800dbb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f5e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	68ba      	ldr	r2, [r7, #8]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d202      	bcs.n	800f5cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f5c6:	4a08      	ldr	r2, [pc, #32]	@ (800f5e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	6013      	str	r3, [r2, #0]
}
 800f5cc:	bf00      	nop
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	24002350 	.word	0x24002350
 800f5d8:	24001e78 	.word	0x24001e78
 800f5dc:	24002338 	.word	0x24002338
 800f5e0:	24002308 	.word	0x24002308
 800f5e4:	24002304 	.word	0x24002304
 800f5e8:	2400236c 	.word	0x2400236c

0800f5ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b08a      	sub	sp, #40	@ 0x28
 800f5f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f5f6:	f000 fb13 	bl	800fc20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f5fa:	4b1d      	ldr	r3, [pc, #116]	@ (800f670 <xTimerCreateTimerTask+0x84>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d021      	beq.n	800f646 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f602:	2300      	movs	r3, #0
 800f604:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f606:	2300      	movs	r3, #0
 800f608:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f60a:	1d3a      	adds	r2, r7, #4
 800f60c:	f107 0108 	add.w	r1, r7, #8
 800f610:	f107 030c 	add.w	r3, r7, #12
 800f614:	4618      	mov	r0, r3
 800f616:	f7fe fa61 	bl	800dadc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f61a:	6879      	ldr	r1, [r7, #4]
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	68fa      	ldr	r2, [r7, #12]
 800f620:	9202      	str	r2, [sp, #8]
 800f622:	9301      	str	r3, [sp, #4]
 800f624:	2302      	movs	r3, #2
 800f626:	9300      	str	r3, [sp, #0]
 800f628:	2300      	movs	r3, #0
 800f62a:	460a      	mov	r2, r1
 800f62c:	4911      	ldr	r1, [pc, #68]	@ (800f674 <xTimerCreateTimerTask+0x88>)
 800f62e:	4812      	ldr	r0, [pc, #72]	@ (800f678 <xTimerCreateTimerTask+0x8c>)
 800f630:	f7ff f858 	bl	800e6e4 <xTaskCreateStatic>
 800f634:	4603      	mov	r3, r0
 800f636:	4a11      	ldr	r2, [pc, #68]	@ (800f67c <xTimerCreateTimerTask+0x90>)
 800f638:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f63a:	4b10      	ldr	r3, [pc, #64]	@ (800f67c <xTimerCreateTimerTask+0x90>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d001      	beq.n	800f646 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f642:	2301      	movs	r3, #1
 800f644:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10b      	bne.n	800f664 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	613b      	str	r3, [r7, #16]
}
 800f65e:	bf00      	nop
 800f660:	bf00      	nop
 800f662:	e7fd      	b.n	800f660 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f664:	697b      	ldr	r3, [r7, #20]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	240023a8 	.word	0x240023a8
 800f674:	08014e60 	.word	0x08014e60
 800f678:	0800f7b9 	.word	0x0800f7b9
 800f67c:	240023ac 	.word	0x240023ac

0800f680 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b08a      	sub	sp, #40	@ 0x28
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
 800f68c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f68e:	2300      	movs	r3, #0
 800f690:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d10b      	bne.n	800f6b0 <xTimerGenericCommand+0x30>
	__asm volatile
 800f698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f69c:	f383 8811 	msr	BASEPRI, r3
 800f6a0:	f3bf 8f6f 	isb	sy
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	623b      	str	r3, [r7, #32]
}
 800f6aa:	bf00      	nop
 800f6ac:	bf00      	nop
 800f6ae:	e7fd      	b.n	800f6ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f6b0:	4b19      	ldr	r3, [pc, #100]	@ (800f718 <xTimerGenericCommand+0x98>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d02a      	beq.n	800f70e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	2b05      	cmp	r3, #5
 800f6c8:	dc18      	bgt.n	800f6fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6ca:	f7ff fead 	bl	800f428 <xTaskGetSchedulerState>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b02      	cmp	r3, #2
 800f6d2:	d109      	bne.n	800f6e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6d4:	4b10      	ldr	r3, [pc, #64]	@ (800f718 <xTimerGenericCommand+0x98>)
 800f6d6:	6818      	ldr	r0, [r3, #0]
 800f6d8:	f107 0110 	add.w	r1, r7, #16
 800f6dc:	2300      	movs	r3, #0
 800f6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6e0:	f7fe fc10 	bl	800df04 <xQueueGenericSend>
 800f6e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f6e6:	e012      	b.n	800f70e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6e8:	4b0b      	ldr	r3, [pc, #44]	@ (800f718 <xTimerGenericCommand+0x98>)
 800f6ea:	6818      	ldr	r0, [r3, #0]
 800f6ec:	f107 0110 	add.w	r1, r7, #16
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	f7fe fc06 	bl	800df04 <xQueueGenericSend>
 800f6f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f6fa:	e008      	b.n	800f70e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6fc:	4b06      	ldr	r3, [pc, #24]	@ (800f718 <xTimerGenericCommand+0x98>)
 800f6fe:	6818      	ldr	r0, [r3, #0]
 800f700:	f107 0110 	add.w	r1, r7, #16
 800f704:	2300      	movs	r3, #0
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	f7fe fcfe 	bl	800e108 <xQueueGenericSendFromISR>
 800f70c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f710:	4618      	mov	r0, r3
 800f712:	3728      	adds	r7, #40	@ 0x28
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	240023a8 	.word	0x240023a8

0800f71c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b088      	sub	sp, #32
 800f720:	af02      	add	r7, sp, #8
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f726:	4b23      	ldr	r3, [pc, #140]	@ (800f7b4 <prvProcessExpiredTimer+0x98>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	3304      	adds	r3, #4
 800f734:	4618      	mov	r0, r3
 800f736:	f7fe fa75 	bl	800dc24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f740:	f003 0304 	and.w	r3, r3, #4
 800f744:	2b00      	cmp	r3, #0
 800f746:	d023      	beq.n	800f790 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	699a      	ldr	r2, [r3, #24]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	18d1      	adds	r1, r2, r3
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	683a      	ldr	r2, [r7, #0]
 800f754:	6978      	ldr	r0, [r7, #20]
 800f756:	f000 f8d5 	bl	800f904 <prvInsertTimerInActiveList>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d020      	beq.n	800f7a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f760:	2300      	movs	r3, #0
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	2300      	movs	r3, #0
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	2100      	movs	r1, #0
 800f76a:	6978      	ldr	r0, [r7, #20]
 800f76c:	f7ff ff88 	bl	800f680 <xTimerGenericCommand>
 800f770:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d114      	bne.n	800f7a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f77c:	f383 8811 	msr	BASEPRI, r3
 800f780:	f3bf 8f6f 	isb	sy
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	60fb      	str	r3, [r7, #12]
}
 800f78a:	bf00      	nop
 800f78c:	bf00      	nop
 800f78e:	e7fd      	b.n	800f78c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f796:	f023 0301 	bic.w	r3, r3, #1
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	6a1b      	ldr	r3, [r3, #32]
 800f7a6:	6978      	ldr	r0, [r7, #20]
 800f7a8:	4798      	blx	r3
}
 800f7aa:	bf00      	nop
 800f7ac:	3718      	adds	r7, #24
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	240023a0 	.word	0x240023a0

0800f7b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7c0:	f107 0308 	add.w	r3, r7, #8
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f000 f859 	bl	800f87c <prvGetNextExpireTime>
 800f7ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f000 f805 	bl	800f7e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7d6:	f000 f8d7 	bl	800f988 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7da:	bf00      	nop
 800f7dc:	e7f0      	b.n	800f7c0 <prvTimerTask+0x8>
	...

0800f7e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7ea:	f7ff fa29 	bl	800ec40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7ee:	f107 0308 	add.w	r3, r7, #8
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f000 f866 	bl	800f8c4 <prvSampleTimeNow>
 800f7f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d130      	bne.n	800f862 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d10a      	bne.n	800f81c <prvProcessTimerOrBlockTask+0x3c>
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d806      	bhi.n	800f81c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f80e:	f7ff fa25 	bl	800ec5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f812:	68f9      	ldr	r1, [r7, #12]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f7ff ff81 	bl	800f71c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f81a:	e024      	b.n	800f866 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d008      	beq.n	800f834 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f822:	4b13      	ldr	r3, [pc, #76]	@ (800f870 <prvProcessTimerOrBlockTask+0x90>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <prvProcessTimerOrBlockTask+0x50>
 800f82c:	2301      	movs	r3, #1
 800f82e:	e000      	b.n	800f832 <prvProcessTimerOrBlockTask+0x52>
 800f830:	2300      	movs	r3, #0
 800f832:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f834:	4b0f      	ldr	r3, [pc, #60]	@ (800f874 <prvProcessTimerOrBlockTask+0x94>)
 800f836:	6818      	ldr	r0, [r3, #0]
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	683a      	ldr	r2, [r7, #0]
 800f840:	4619      	mov	r1, r3
 800f842:	f7fe ff1b 	bl	800e67c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f846:	f7ff fa09 	bl	800ec5c <xTaskResumeAll>
 800f84a:	4603      	mov	r3, r0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d10a      	bne.n	800f866 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f850:	4b09      	ldr	r3, [pc, #36]	@ (800f878 <prvProcessTimerOrBlockTask+0x98>)
 800f852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	f3bf 8f4f 	dsb	sy
 800f85c:	f3bf 8f6f 	isb	sy
}
 800f860:	e001      	b.n	800f866 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f862:	f7ff f9fb 	bl	800ec5c <xTaskResumeAll>
}
 800f866:	bf00      	nop
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	240023a4 	.word	0x240023a4
 800f874:	240023a8 	.word	0x240023a8
 800f878:	e000ed04 	.word	0xe000ed04

0800f87c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f884:	4b0e      	ldr	r3, [pc, #56]	@ (800f8c0 <prvGetNextExpireTime+0x44>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d101      	bne.n	800f892 <prvGetNextExpireTime+0x16>
 800f88e:	2201      	movs	r2, #1
 800f890:	e000      	b.n	800f894 <prvGetNextExpireTime+0x18>
 800f892:	2200      	movs	r2, #0
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d105      	bne.n	800f8ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8a0:	4b07      	ldr	r3, [pc, #28]	@ (800f8c0 <prvGetNextExpireTime+0x44>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	60fb      	str	r3, [r7, #12]
 800f8aa:	e001      	b.n	800f8b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3714      	adds	r7, #20
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	240023a0 	.word	0x240023a0

0800f8c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f8cc:	f7ff fa64 	bl	800ed98 <xTaskGetTickCount>
 800f8d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f900 <prvSampleTimeNow+0x3c>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d205      	bcs.n	800f8e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8dc:	f000 f93a 	bl	800fb54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2201      	movs	r2, #1
 800f8e4:	601a      	str	r2, [r3, #0]
 800f8e6:	e002      	b.n	800f8ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f8ee:	4a04      	ldr	r2, [pc, #16]	@ (800f900 <prvSampleTimeNow+0x3c>)
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3710      	adds	r7, #16
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	240023b0 	.word	0x240023b0

0800f904 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b086      	sub	sp, #24
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
 800f910:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f912:	2300      	movs	r3, #0
 800f914:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	429a      	cmp	r2, r3
 800f928:	d812      	bhi.n	800f950 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	1ad2      	subs	r2, r2, r3
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	699b      	ldr	r3, [r3, #24]
 800f934:	429a      	cmp	r2, r3
 800f936:	d302      	bcc.n	800f93e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f938:	2301      	movs	r3, #1
 800f93a:	617b      	str	r3, [r7, #20]
 800f93c:	e01b      	b.n	800f976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f93e:	4b10      	ldr	r3, [pc, #64]	@ (800f980 <prvInsertTimerInActiveList+0x7c>)
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	3304      	adds	r3, #4
 800f946:	4619      	mov	r1, r3
 800f948:	4610      	mov	r0, r2
 800f94a:	f7fe f932 	bl	800dbb2 <vListInsert>
 800f94e:	e012      	b.n	800f976 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	429a      	cmp	r2, r3
 800f956:	d206      	bcs.n	800f966 <prvInsertTimerInActiveList+0x62>
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d302      	bcc.n	800f966 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f960:	2301      	movs	r3, #1
 800f962:	617b      	str	r3, [r7, #20]
 800f964:	e007      	b.n	800f976 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f966:	4b07      	ldr	r3, [pc, #28]	@ (800f984 <prvInsertTimerInActiveList+0x80>)
 800f968:	681a      	ldr	r2, [r3, #0]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	3304      	adds	r3, #4
 800f96e:	4619      	mov	r1, r3
 800f970:	4610      	mov	r0, r2
 800f972:	f7fe f91e 	bl	800dbb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f976:	697b      	ldr	r3, [r7, #20]
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	240023a4 	.word	0x240023a4
 800f984:	240023a0 	.word	0x240023a0

0800f988 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b08e      	sub	sp, #56	@ 0x38
 800f98c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f98e:	e0ce      	b.n	800fb2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	da19      	bge.n	800f9ca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f996:	1d3b      	adds	r3, r7, #4
 800f998:	3304      	adds	r3, #4
 800f99a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d10b      	bne.n	800f9ba <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9a6:	f383 8811 	msr	BASEPRI, r3
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	61fb      	str	r3, [r7, #28]
}
 800f9b4:	bf00      	nop
 800f9b6:	bf00      	nop
 800f9b8:	e7fd      	b.n	800f9b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9c0:	6850      	ldr	r0, [r2, #4]
 800f9c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9c4:	6892      	ldr	r2, [r2, #8]
 800f9c6:	4611      	mov	r1, r2
 800f9c8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f2c0 80ae 	blt.w	800fb2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d004      	beq.n	800f9e8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9e0:	3304      	adds	r3, #4
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fe f91e 	bl	800dc24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9e8:	463b      	mov	r3, r7
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7ff ff6a 	bl	800f8c4 <prvSampleTimeNow>
 800f9f0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b09      	cmp	r3, #9
 800f9f6:	f200 8097 	bhi.w	800fb28 <prvProcessReceivedCommands+0x1a0>
 800f9fa:	a201      	add	r2, pc, #4	@ (adr r2, 800fa00 <prvProcessReceivedCommands+0x78>)
 800f9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa00:	0800fa29 	.word	0x0800fa29
 800fa04:	0800fa29 	.word	0x0800fa29
 800fa08:	0800fa29 	.word	0x0800fa29
 800fa0c:	0800fa9f 	.word	0x0800fa9f
 800fa10:	0800fab3 	.word	0x0800fab3
 800fa14:	0800faff 	.word	0x0800faff
 800fa18:	0800fa29 	.word	0x0800fa29
 800fa1c:	0800fa29 	.word	0x0800fa29
 800fa20:	0800fa9f 	.word	0x0800fa9f
 800fa24:	0800fab3 	.word	0x0800fab3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa2e:	f043 0301 	orr.w	r3, r3, #1
 800fa32:	b2da      	uxtb	r2, r3
 800fa34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa3a:	68ba      	ldr	r2, [r7, #8]
 800fa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa3e:	699b      	ldr	r3, [r3, #24]
 800fa40:	18d1      	adds	r1, r2, r3
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa48:	f7ff ff5c 	bl	800f904 <prvInsertTimerInActiveList>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d06c      	beq.n	800fb2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa54:	6a1b      	ldr	r3, [r3, #32]
 800fa56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa60:	f003 0304 	and.w	r3, r3, #4
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d061      	beq.n	800fb2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa68:	68ba      	ldr	r2, [r7, #8]
 800fa6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa6c:	699b      	ldr	r3, [r3, #24]
 800fa6e:	441a      	add	r2, r3
 800fa70:	2300      	movs	r3, #0
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	2300      	movs	r3, #0
 800fa76:	2100      	movs	r1, #0
 800fa78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa7a:	f7ff fe01 	bl	800f680 <xTimerGenericCommand>
 800fa7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa80:	6a3b      	ldr	r3, [r7, #32]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d152      	bne.n	800fb2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa8a:	f383 8811 	msr	BASEPRI, r3
 800fa8e:	f3bf 8f6f 	isb	sy
 800fa92:	f3bf 8f4f 	dsb	sy
 800fa96:	61bb      	str	r3, [r7, #24]
}
 800fa98:	bf00      	nop
 800fa9a:	bf00      	nop
 800fa9c:	e7fd      	b.n	800fa9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800faa4:	f023 0301 	bic.w	r3, r3, #1
 800faa8:	b2da      	uxtb	r2, r3
 800faaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fab0:	e03d      	b.n	800fb2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fab8:	f043 0301 	orr.w	r3, r3, #1
 800fabc:	b2da      	uxtb	r2, r3
 800fabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800faca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800facc:	699b      	ldr	r3, [r3, #24]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10b      	bne.n	800faea <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	617b      	str	r3, [r7, #20]
}
 800fae4:	bf00      	nop
 800fae6:	bf00      	nop
 800fae8:	e7fd      	b.n	800fae6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800faea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faec:	699a      	ldr	r2, [r3, #24]
 800faee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf0:	18d1      	adds	r1, r2, r3
 800faf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800faf8:	f7ff ff04 	bl	800f904 <prvInsertTimerInActiveList>
					break;
 800fafc:	e017      	b.n	800fb2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb04:	f003 0302 	and.w	r3, r3, #2
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d103      	bne.n	800fb14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fb0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb0e:	f000 fbeb 	bl	80102e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fb12:	e00c      	b.n	800fb2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb1a:	f023 0301 	bic.w	r3, r3, #1
 800fb1e:	b2da      	uxtb	r2, r3
 800fb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fb26:	e002      	b.n	800fb2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fb28:	bf00      	nop
 800fb2a:	e000      	b.n	800fb2e <prvProcessReceivedCommands+0x1a6>
					break;
 800fb2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb2e:	4b08      	ldr	r3, [pc, #32]	@ (800fb50 <prvProcessReceivedCommands+0x1c8>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	1d39      	adds	r1, r7, #4
 800fb34:	2200      	movs	r2, #0
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7fe fb84 	bl	800e244 <xQueueReceive>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	f47f af26 	bne.w	800f990 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fb44:	bf00      	nop
 800fb46:	bf00      	nop
 800fb48:	3730      	adds	r7, #48	@ 0x30
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	240023a8 	.word	0x240023a8

0800fb54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b088      	sub	sp, #32
 800fb58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb5a:	e049      	b.n	800fbf0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb5c:	4b2e      	ldr	r3, [pc, #184]	@ (800fc18 <prvSwitchTimerLists+0xc4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	68db      	ldr	r3, [r3, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb66:	4b2c      	ldr	r3, [pc, #176]	@ (800fc18 <prvSwitchTimerLists+0xc4>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68db      	ldr	r3, [r3, #12]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	3304      	adds	r3, #4
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7fe f855 	bl	800dc24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	6a1b      	ldr	r3, [r3, #32]
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb88:	f003 0304 	and.w	r3, r3, #4
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d02f      	beq.n	800fbf0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	693a      	ldr	r2, [r7, #16]
 800fb96:	4413      	add	r3, r2
 800fb98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d90e      	bls.n	800fbc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	68ba      	ldr	r2, [r7, #8]
 800fba6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	68fa      	ldr	r2, [r7, #12]
 800fbac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fbae:	4b1a      	ldr	r3, [pc, #104]	@ (800fc18 <prvSwitchTimerLists+0xc4>)
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	4610      	mov	r0, r2
 800fbba:	f7fd fffa 	bl	800dbb2 <vListInsert>
 800fbbe:	e017      	b.n	800fbf0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	9300      	str	r3, [sp, #0]
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	693a      	ldr	r2, [r7, #16]
 800fbc8:	2100      	movs	r1, #0
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f7ff fd58 	bl	800f680 <xTimerGenericCommand>
 800fbd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d10b      	bne.n	800fbf0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbdc:	f383 8811 	msr	BASEPRI, r3
 800fbe0:	f3bf 8f6f 	isb	sy
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	603b      	str	r3, [r7, #0]
}
 800fbea:	bf00      	nop
 800fbec:	bf00      	nop
 800fbee:	e7fd      	b.n	800fbec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbf0:	4b09      	ldr	r3, [pc, #36]	@ (800fc18 <prvSwitchTimerLists+0xc4>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d1b0      	bne.n	800fb5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fbfa:	4b07      	ldr	r3, [pc, #28]	@ (800fc18 <prvSwitchTimerLists+0xc4>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fc00:	4b06      	ldr	r3, [pc, #24]	@ (800fc1c <prvSwitchTimerLists+0xc8>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a04      	ldr	r2, [pc, #16]	@ (800fc18 <prvSwitchTimerLists+0xc4>)
 800fc06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fc08:	4a04      	ldr	r2, [pc, #16]	@ (800fc1c <prvSwitchTimerLists+0xc8>)
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	6013      	str	r3, [r2, #0]
}
 800fc0e:	bf00      	nop
 800fc10:	3718      	adds	r7, #24
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	240023a0 	.word	0x240023a0
 800fc1c:	240023a4 	.word	0x240023a4

0800fc20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fc26:	f000 f96f 	bl	800ff08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fc2a:	4b15      	ldr	r3, [pc, #84]	@ (800fc80 <prvCheckForValidListAndQueue+0x60>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d120      	bne.n	800fc74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fc32:	4814      	ldr	r0, [pc, #80]	@ (800fc84 <prvCheckForValidListAndQueue+0x64>)
 800fc34:	f7fd ff6c 	bl	800db10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc38:	4813      	ldr	r0, [pc, #76]	@ (800fc88 <prvCheckForValidListAndQueue+0x68>)
 800fc3a:	f7fd ff69 	bl	800db10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc3e:	4b13      	ldr	r3, [pc, #76]	@ (800fc8c <prvCheckForValidListAndQueue+0x6c>)
 800fc40:	4a10      	ldr	r2, [pc, #64]	@ (800fc84 <prvCheckForValidListAndQueue+0x64>)
 800fc42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc44:	4b12      	ldr	r3, [pc, #72]	@ (800fc90 <prvCheckForValidListAndQueue+0x70>)
 800fc46:	4a10      	ldr	r2, [pc, #64]	@ (800fc88 <prvCheckForValidListAndQueue+0x68>)
 800fc48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	4b11      	ldr	r3, [pc, #68]	@ (800fc94 <prvCheckForValidListAndQueue+0x74>)
 800fc50:	4a11      	ldr	r2, [pc, #68]	@ (800fc98 <prvCheckForValidListAndQueue+0x78>)
 800fc52:	2110      	movs	r1, #16
 800fc54:	200a      	movs	r0, #10
 800fc56:	f7fe f879 	bl	800dd4c <xQueueGenericCreateStatic>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	4a08      	ldr	r2, [pc, #32]	@ (800fc80 <prvCheckForValidListAndQueue+0x60>)
 800fc5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc60:	4b07      	ldr	r3, [pc, #28]	@ (800fc80 <prvCheckForValidListAndQueue+0x60>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d005      	beq.n	800fc74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc68:	4b05      	ldr	r3, [pc, #20]	@ (800fc80 <prvCheckForValidListAndQueue+0x60>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	490b      	ldr	r1, [pc, #44]	@ (800fc9c <prvCheckForValidListAndQueue+0x7c>)
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fe fcda 	bl	800e628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc74:	f000 f97a 	bl	800ff6c <vPortExitCritical>
}
 800fc78:	bf00      	nop
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
 800fc7e:	bf00      	nop
 800fc80:	240023a8 	.word	0x240023a8
 800fc84:	24002378 	.word	0x24002378
 800fc88:	2400238c 	.word	0x2400238c
 800fc8c:	240023a0 	.word	0x240023a0
 800fc90:	240023a4 	.word	0x240023a4
 800fc94:	24002454 	.word	0x24002454
 800fc98:	240023b4 	.word	0x240023b4
 800fc9c:	08014e68 	.word	0x08014e68

0800fca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	3b04      	subs	r3, #4
 800fcb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fcb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	3b04      	subs	r3, #4
 800fcbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	f023 0201 	bic.w	r2, r3, #1
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3b04      	subs	r3, #4
 800fcce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fcd0:	4a0c      	ldr	r2, [pc, #48]	@ (800fd04 <pxPortInitialiseStack+0x64>)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	3b14      	subs	r3, #20
 800fcda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3b04      	subs	r3, #4
 800fce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f06f 0202 	mvn.w	r2, #2
 800fcee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3b20      	subs	r3, #32
 800fcf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3714      	adds	r7, #20
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr
 800fd04:	0800fd09 	.word	0x0800fd09

0800fd08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b085      	sub	sp, #20
 800fd0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fd12:	4b13      	ldr	r3, [pc, #76]	@ (800fd60 <prvTaskExitError+0x58>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd1a:	d00b      	beq.n	800fd34 <prvTaskExitError+0x2c>
	__asm volatile
 800fd1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd20:	f383 8811 	msr	BASEPRI, r3
 800fd24:	f3bf 8f6f 	isb	sy
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	60fb      	str	r3, [r7, #12]
}
 800fd2e:	bf00      	nop
 800fd30:	bf00      	nop
 800fd32:	e7fd      	b.n	800fd30 <prvTaskExitError+0x28>
	__asm volatile
 800fd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd38:	f383 8811 	msr	BASEPRI, r3
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	f3bf 8f4f 	dsb	sy
 800fd44:	60bb      	str	r3, [r7, #8]
}
 800fd46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd48:	bf00      	nop
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d0fc      	beq.n	800fd4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd50:	bf00      	nop
 800fd52:	bf00      	nop
 800fd54:	3714      	adds	r7, #20
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	2400007c 	.word	0x2400007c
	...

0800fd70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd70:	4b07      	ldr	r3, [pc, #28]	@ (800fd90 <pxCurrentTCBConst2>)
 800fd72:	6819      	ldr	r1, [r3, #0]
 800fd74:	6808      	ldr	r0, [r1, #0]
 800fd76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7a:	f380 8809 	msr	PSP, r0
 800fd7e:	f3bf 8f6f 	isb	sy
 800fd82:	f04f 0000 	mov.w	r0, #0
 800fd86:	f380 8811 	msr	BASEPRI, r0
 800fd8a:	4770      	bx	lr
 800fd8c:	f3af 8000 	nop.w

0800fd90 <pxCurrentTCBConst2>:
 800fd90:	24001e78 	.word	0x24001e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop

0800fd98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd98:	4808      	ldr	r0, [pc, #32]	@ (800fdbc <prvPortStartFirstTask+0x24>)
 800fd9a:	6800      	ldr	r0, [r0, #0]
 800fd9c:	6800      	ldr	r0, [r0, #0]
 800fd9e:	f380 8808 	msr	MSP, r0
 800fda2:	f04f 0000 	mov.w	r0, #0
 800fda6:	f380 8814 	msr	CONTROL, r0
 800fdaa:	b662      	cpsie	i
 800fdac:	b661      	cpsie	f
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	f3bf 8f6f 	isb	sy
 800fdb6:	df00      	svc	0
 800fdb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fdba:	bf00      	nop
 800fdbc:	e000ed08 	.word	0xe000ed08

0800fdc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b086      	sub	sp, #24
 800fdc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fdc6:	4b47      	ldr	r3, [pc, #284]	@ (800fee4 <xPortStartScheduler+0x124>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a47      	ldr	r2, [pc, #284]	@ (800fee8 <xPortStartScheduler+0x128>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d10b      	bne.n	800fde8 <xPortStartScheduler+0x28>
	__asm volatile
 800fdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd4:	f383 8811 	msr	BASEPRI, r3
 800fdd8:	f3bf 8f6f 	isb	sy
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	60fb      	str	r3, [r7, #12]
}
 800fde2:	bf00      	nop
 800fde4:	bf00      	nop
 800fde6:	e7fd      	b.n	800fde4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fde8:	4b3e      	ldr	r3, [pc, #248]	@ (800fee4 <xPortStartScheduler+0x124>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	4a3f      	ldr	r2, [pc, #252]	@ (800feec <xPortStartScheduler+0x12c>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d10b      	bne.n	800fe0a <xPortStartScheduler+0x4a>
	__asm volatile
 800fdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdf6:	f383 8811 	msr	BASEPRI, r3
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	613b      	str	r3, [r7, #16]
}
 800fe04:	bf00      	nop
 800fe06:	bf00      	nop
 800fe08:	e7fd      	b.n	800fe06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fe0a:	4b39      	ldr	r3, [pc, #228]	@ (800fef0 <xPortStartScheduler+0x130>)
 800fe0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	22ff      	movs	r2, #255	@ 0xff
 800fe1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe24:	78fb      	ldrb	r3, [r7, #3]
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	4b31      	ldr	r3, [pc, #196]	@ (800fef4 <xPortStartScheduler+0x134>)
 800fe30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe32:	4b31      	ldr	r3, [pc, #196]	@ (800fef8 <xPortStartScheduler+0x138>)
 800fe34:	2207      	movs	r2, #7
 800fe36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe38:	e009      	b.n	800fe4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fe3a:	4b2f      	ldr	r3, [pc, #188]	@ (800fef8 <xPortStartScheduler+0x138>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	3b01      	subs	r3, #1
 800fe40:	4a2d      	ldr	r2, [pc, #180]	@ (800fef8 <xPortStartScheduler+0x138>)
 800fe42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe44:	78fb      	ldrb	r3, [r7, #3]
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	005b      	lsls	r3, r3, #1
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe4e:	78fb      	ldrb	r3, [r7, #3]
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe56:	2b80      	cmp	r3, #128	@ 0x80
 800fe58:	d0ef      	beq.n	800fe3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe5a:	4b27      	ldr	r3, [pc, #156]	@ (800fef8 <xPortStartScheduler+0x138>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f1c3 0307 	rsb	r3, r3, #7
 800fe62:	2b04      	cmp	r3, #4
 800fe64:	d00b      	beq.n	800fe7e <xPortStartScheduler+0xbe>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe6a:	f383 8811 	msr	BASEPRI, r3
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	60bb      	str	r3, [r7, #8]
}
 800fe78:	bf00      	nop
 800fe7a:	bf00      	nop
 800fe7c:	e7fd      	b.n	800fe7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe7e:	4b1e      	ldr	r3, [pc, #120]	@ (800fef8 <xPortStartScheduler+0x138>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	021b      	lsls	r3, r3, #8
 800fe84:	4a1c      	ldr	r2, [pc, #112]	@ (800fef8 <xPortStartScheduler+0x138>)
 800fe86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe88:	4b1b      	ldr	r3, [pc, #108]	@ (800fef8 <xPortStartScheduler+0x138>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fe90:	4a19      	ldr	r2, [pc, #100]	@ (800fef8 <xPortStartScheduler+0x138>)
 800fe92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe9c:	4b17      	ldr	r3, [pc, #92]	@ (800fefc <xPortStartScheduler+0x13c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a16      	ldr	r2, [pc, #88]	@ (800fefc <xPortStartScheduler+0x13c>)
 800fea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fea8:	4b14      	ldr	r3, [pc, #80]	@ (800fefc <xPortStartScheduler+0x13c>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a13      	ldr	r2, [pc, #76]	@ (800fefc <xPortStartScheduler+0x13c>)
 800feae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800feb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800feb4:	f000 f8da 	bl	801006c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800feb8:	4b11      	ldr	r3, [pc, #68]	@ (800ff00 <xPortStartScheduler+0x140>)
 800feba:	2200      	movs	r2, #0
 800febc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800febe:	f000 f8f9 	bl	80100b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fec2:	4b10      	ldr	r3, [pc, #64]	@ (800ff04 <xPortStartScheduler+0x144>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4a0f      	ldr	r2, [pc, #60]	@ (800ff04 <xPortStartScheduler+0x144>)
 800fec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fece:	f7ff ff63 	bl	800fd98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fed2:	f7ff f82b 	bl	800ef2c <vTaskSwitchContext>
	prvTaskExitError();
 800fed6:	f7ff ff17 	bl	800fd08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3718      	adds	r7, #24
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	e000ed00 	.word	0xe000ed00
 800fee8:	410fc271 	.word	0x410fc271
 800feec:	410fc270 	.word	0x410fc270
 800fef0:	e000e400 	.word	0xe000e400
 800fef4:	240024a4 	.word	0x240024a4
 800fef8:	240024a8 	.word	0x240024a8
 800fefc:	e000ed20 	.word	0xe000ed20
 800ff00:	2400007c 	.word	0x2400007c
 800ff04:	e000ef34 	.word	0xe000ef34

0800ff08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	607b      	str	r3, [r7, #4]
}
 800ff20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ff22:	4b10      	ldr	r3, [pc, #64]	@ (800ff64 <vPortEnterCritical+0x5c>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	3301      	adds	r3, #1
 800ff28:	4a0e      	ldr	r2, [pc, #56]	@ (800ff64 <vPortEnterCritical+0x5c>)
 800ff2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ff64 <vPortEnterCritical+0x5c>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	2b01      	cmp	r3, #1
 800ff32:	d110      	bne.n	800ff56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff34:	4b0c      	ldr	r3, [pc, #48]	@ (800ff68 <vPortEnterCritical+0x60>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00b      	beq.n	800ff56 <vPortEnterCritical+0x4e>
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	603b      	str	r3, [r7, #0]
}
 800ff50:	bf00      	nop
 800ff52:	bf00      	nop
 800ff54:	e7fd      	b.n	800ff52 <vPortEnterCritical+0x4a>
	}
}
 800ff56:	bf00      	nop
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop
 800ff64:	2400007c 	.word	0x2400007c
 800ff68:	e000ed04 	.word	0xe000ed04

0800ff6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff72:	4b12      	ldr	r3, [pc, #72]	@ (800ffbc <vPortExitCritical+0x50>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d10b      	bne.n	800ff92 <vPortExitCritical+0x26>
	__asm volatile
 800ff7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff7e:	f383 8811 	msr	BASEPRI, r3
 800ff82:	f3bf 8f6f 	isb	sy
 800ff86:	f3bf 8f4f 	dsb	sy
 800ff8a:	607b      	str	r3, [r7, #4]
}
 800ff8c:	bf00      	nop
 800ff8e:	bf00      	nop
 800ff90:	e7fd      	b.n	800ff8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff92:	4b0a      	ldr	r3, [pc, #40]	@ (800ffbc <vPortExitCritical+0x50>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3b01      	subs	r3, #1
 800ff98:	4a08      	ldr	r2, [pc, #32]	@ (800ffbc <vPortExitCritical+0x50>)
 800ff9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff9c:	4b07      	ldr	r3, [pc, #28]	@ (800ffbc <vPortExitCritical+0x50>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d105      	bne.n	800ffb0 <vPortExitCritical+0x44>
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	f383 8811 	msr	BASEPRI, r3
}
 800ffae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ffb0:	bf00      	nop
 800ffb2:	370c      	adds	r7, #12
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr
 800ffbc:	2400007c 	.word	0x2400007c

0800ffc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffc0:	f3ef 8009 	mrs	r0, PSP
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	4b15      	ldr	r3, [pc, #84]	@ (8010020 <pxCurrentTCBConst>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	f01e 0f10 	tst.w	lr, #16
 800ffd0:	bf08      	it	eq
 800ffd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffda:	6010      	str	r0, [r2, #0]
 800ffdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ffe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ffe4:	f380 8811 	msr	BASEPRI, r0
 800ffe8:	f3bf 8f4f 	dsb	sy
 800ffec:	f3bf 8f6f 	isb	sy
 800fff0:	f7fe ff9c 	bl	800ef2c <vTaskSwitchContext>
 800fff4:	f04f 0000 	mov.w	r0, #0
 800fff8:	f380 8811 	msr	BASEPRI, r0
 800fffc:	bc09      	pop	{r0, r3}
 800fffe:	6819      	ldr	r1, [r3, #0]
 8010000:	6808      	ldr	r0, [r1, #0]
 8010002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010006:	f01e 0f10 	tst.w	lr, #16
 801000a:	bf08      	it	eq
 801000c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010010:	f380 8809 	msr	PSP, r0
 8010014:	f3bf 8f6f 	isb	sy
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	f3af 8000 	nop.w

08010020 <pxCurrentTCBConst>:
 8010020:	24001e78 	.word	0x24001e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010024:	bf00      	nop
 8010026:	bf00      	nop

08010028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
	__asm volatile
 801002e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010032:	f383 8811 	msr	BASEPRI, r3
 8010036:	f3bf 8f6f 	isb	sy
 801003a:	f3bf 8f4f 	dsb	sy
 801003e:	607b      	str	r3, [r7, #4]
}
 8010040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010042:	f7fe feb9 	bl	800edb8 <xTaskIncrementTick>
 8010046:	4603      	mov	r3, r0
 8010048:	2b00      	cmp	r3, #0
 801004a:	d003      	beq.n	8010054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801004c:	4b06      	ldr	r3, [pc, #24]	@ (8010068 <xPortSysTickHandler+0x40>)
 801004e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010052:	601a      	str	r2, [r3, #0]
 8010054:	2300      	movs	r3, #0
 8010056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	f383 8811 	msr	BASEPRI, r3
}
 801005e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010060:	bf00      	nop
 8010062:	3708      	adds	r7, #8
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	e000ed04 	.word	0xe000ed04

0801006c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801006c:	b480      	push	{r7}
 801006e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010070:	4b0b      	ldr	r3, [pc, #44]	@ (80100a0 <vPortSetupTimerInterrupt+0x34>)
 8010072:	2200      	movs	r2, #0
 8010074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010076:	4b0b      	ldr	r3, [pc, #44]	@ (80100a4 <vPortSetupTimerInterrupt+0x38>)
 8010078:	2200      	movs	r2, #0
 801007a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801007c:	4b0a      	ldr	r3, [pc, #40]	@ (80100a8 <vPortSetupTimerInterrupt+0x3c>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4a0a      	ldr	r2, [pc, #40]	@ (80100ac <vPortSetupTimerInterrupt+0x40>)
 8010082:	fba2 2303 	umull	r2, r3, r2, r3
 8010086:	095b      	lsrs	r3, r3, #5
 8010088:	4a09      	ldr	r2, [pc, #36]	@ (80100b0 <vPortSetupTimerInterrupt+0x44>)
 801008a:	3b01      	subs	r3, #1
 801008c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801008e:	4b04      	ldr	r3, [pc, #16]	@ (80100a0 <vPortSetupTimerInterrupt+0x34>)
 8010090:	2207      	movs	r2, #7
 8010092:	601a      	str	r2, [r3, #0]
}
 8010094:	bf00      	nop
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	e000e010 	.word	0xe000e010
 80100a4:	e000e018 	.word	0xe000e018
 80100a8:	24000054 	.word	0x24000054
 80100ac:	10624dd3 	.word	0x10624dd3
 80100b0:	e000e014 	.word	0xe000e014

080100b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80100b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80100c4 <vPortEnableVFP+0x10>
 80100b8:	6801      	ldr	r1, [r0, #0]
 80100ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80100be:	6001      	str	r1, [r0, #0]
 80100c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80100c2:	bf00      	nop
 80100c4:	e000ed88 	.word	0xe000ed88

080100c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100ce:	f3ef 8305 	mrs	r3, IPSR
 80100d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2b0f      	cmp	r3, #15
 80100d8:	d915      	bls.n	8010106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100da:	4a18      	ldr	r2, [pc, #96]	@ (801013c <vPortValidateInterruptPriority+0x74>)
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	4413      	add	r3, r2
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100e4:	4b16      	ldr	r3, [pc, #88]	@ (8010140 <vPortValidateInterruptPriority+0x78>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	7afa      	ldrb	r2, [r7, #11]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d20b      	bcs.n	8010106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80100ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	607b      	str	r3, [r7, #4]
}
 8010100:	bf00      	nop
 8010102:	bf00      	nop
 8010104:	e7fd      	b.n	8010102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010106:	4b0f      	ldr	r3, [pc, #60]	@ (8010144 <vPortValidateInterruptPriority+0x7c>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801010e:	4b0e      	ldr	r3, [pc, #56]	@ (8010148 <vPortValidateInterruptPriority+0x80>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	429a      	cmp	r2, r3
 8010114:	d90b      	bls.n	801012e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801011a:	f383 8811 	msr	BASEPRI, r3
 801011e:	f3bf 8f6f 	isb	sy
 8010122:	f3bf 8f4f 	dsb	sy
 8010126:	603b      	str	r3, [r7, #0]
}
 8010128:	bf00      	nop
 801012a:	bf00      	nop
 801012c:	e7fd      	b.n	801012a <vPortValidateInterruptPriority+0x62>
	}
 801012e:	bf00      	nop
 8010130:	3714      	adds	r7, #20
 8010132:	46bd      	mov	sp, r7
 8010134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	e000e3f0 	.word	0xe000e3f0
 8010140:	240024a4 	.word	0x240024a4
 8010144:	e000ed0c 	.word	0xe000ed0c
 8010148:	240024a8 	.word	0x240024a8

0801014c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b08a      	sub	sp, #40	@ 0x28
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010154:	2300      	movs	r3, #0
 8010156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010158:	f7fe fd72 	bl	800ec40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801015c:	4b5c      	ldr	r3, [pc, #368]	@ (80102d0 <pvPortMalloc+0x184>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d101      	bne.n	8010168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010164:	f000 f924 	bl	80103b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010168:	4b5a      	ldr	r3, [pc, #360]	@ (80102d4 <pvPortMalloc+0x188>)
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	4013      	ands	r3, r2
 8010170:	2b00      	cmp	r3, #0
 8010172:	f040 8095 	bne.w	80102a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d01e      	beq.n	80101ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801017c:	2208      	movs	r2, #8
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4413      	add	r3, r2
 8010182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f003 0307 	and.w	r3, r3, #7
 801018a:	2b00      	cmp	r3, #0
 801018c:	d015      	beq.n	80101ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	f023 0307 	bic.w	r3, r3, #7
 8010194:	3308      	adds	r3, #8
 8010196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f003 0307 	and.w	r3, r3, #7
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00b      	beq.n	80101ba <pvPortMalloc+0x6e>
	__asm volatile
 80101a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	617b      	str	r3, [r7, #20]
}
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop
 80101b8:	e7fd      	b.n	80101b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d06f      	beq.n	80102a0 <pvPortMalloc+0x154>
 80101c0:	4b45      	ldr	r3, [pc, #276]	@ (80102d8 <pvPortMalloc+0x18c>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d86a      	bhi.n	80102a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80101ca:	4b44      	ldr	r3, [pc, #272]	@ (80102dc <pvPortMalloc+0x190>)
 80101cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80101ce:	4b43      	ldr	r3, [pc, #268]	@ (80102dc <pvPortMalloc+0x190>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101d4:	e004      	b.n	80101e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80101d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80101da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d903      	bls.n	80101f2 <pvPortMalloc+0xa6>
 80101ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1f1      	bne.n	80101d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80101f2:	4b37      	ldr	r3, [pc, #220]	@ (80102d0 <pvPortMalloc+0x184>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d051      	beq.n	80102a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80101fc:	6a3b      	ldr	r3, [r7, #32]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2208      	movs	r2, #8
 8010202:	4413      	add	r3, r2
 8010204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	6a3b      	ldr	r3, [r7, #32]
 801020c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801020e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010210:	685a      	ldr	r2, [r3, #4]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	1ad2      	subs	r2, r2, r3
 8010216:	2308      	movs	r3, #8
 8010218:	005b      	lsls	r3, r3, #1
 801021a:	429a      	cmp	r2, r3
 801021c:	d920      	bls.n	8010260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801021e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	4413      	add	r3, r2
 8010224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	f003 0307 	and.w	r3, r3, #7
 801022c:	2b00      	cmp	r3, #0
 801022e:	d00b      	beq.n	8010248 <pvPortMalloc+0xfc>
	__asm volatile
 8010230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010234:	f383 8811 	msr	BASEPRI, r3
 8010238:	f3bf 8f6f 	isb	sy
 801023c:	f3bf 8f4f 	dsb	sy
 8010240:	613b      	str	r3, [r7, #16]
}
 8010242:	bf00      	nop
 8010244:	bf00      	nop
 8010246:	e7fd      	b.n	8010244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801024a:	685a      	ldr	r2, [r3, #4]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	1ad2      	subs	r2, r2, r3
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801025a:	69b8      	ldr	r0, [r7, #24]
 801025c:	f000 f90a 	bl	8010474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010260:	4b1d      	ldr	r3, [pc, #116]	@ (80102d8 <pvPortMalloc+0x18c>)
 8010262:	681a      	ldr	r2, [r3, #0]
 8010264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	1ad3      	subs	r3, r2, r3
 801026a:	4a1b      	ldr	r2, [pc, #108]	@ (80102d8 <pvPortMalloc+0x18c>)
 801026c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801026e:	4b1a      	ldr	r3, [pc, #104]	@ (80102d8 <pvPortMalloc+0x18c>)
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	4b1b      	ldr	r3, [pc, #108]	@ (80102e0 <pvPortMalloc+0x194>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	429a      	cmp	r2, r3
 8010278:	d203      	bcs.n	8010282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801027a:	4b17      	ldr	r3, [pc, #92]	@ (80102d8 <pvPortMalloc+0x18c>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	4a18      	ldr	r2, [pc, #96]	@ (80102e0 <pvPortMalloc+0x194>)
 8010280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010284:	685a      	ldr	r2, [r3, #4]
 8010286:	4b13      	ldr	r3, [pc, #76]	@ (80102d4 <pvPortMalloc+0x188>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	431a      	orrs	r2, r3
 801028c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010292:	2200      	movs	r2, #0
 8010294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010296:	4b13      	ldr	r3, [pc, #76]	@ (80102e4 <pvPortMalloc+0x198>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	3301      	adds	r3, #1
 801029c:	4a11      	ldr	r2, [pc, #68]	@ (80102e4 <pvPortMalloc+0x198>)
 801029e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80102a0:	f7fe fcdc 	bl	800ec5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	f003 0307 	and.w	r3, r3, #7
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00b      	beq.n	80102c6 <pvPortMalloc+0x17a>
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	60fb      	str	r3, [r7, #12]
}
 80102c0:	bf00      	nop
 80102c2:	bf00      	nop
 80102c4:	e7fd      	b.n	80102c2 <pvPortMalloc+0x176>
	return pvReturn;
 80102c6:	69fb      	ldr	r3, [r7, #28]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3728      	adds	r7, #40	@ 0x28
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	240060b4 	.word	0x240060b4
 80102d4:	240060c8 	.word	0x240060c8
 80102d8:	240060b8 	.word	0x240060b8
 80102dc:	240060ac 	.word	0x240060ac
 80102e0:	240060bc 	.word	0x240060bc
 80102e4:	240060c0 	.word	0x240060c0

080102e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b086      	sub	sp, #24
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d04f      	beq.n	801039a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80102fa:	2308      	movs	r3, #8
 80102fc:	425b      	negs	r3, r3
 80102fe:	697a      	ldr	r2, [r7, #20]
 8010300:	4413      	add	r3, r2
 8010302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	685a      	ldr	r2, [r3, #4]
 801030c:	4b25      	ldr	r3, [pc, #148]	@ (80103a4 <vPortFree+0xbc>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4013      	ands	r3, r2
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10b      	bne.n	801032e <vPortFree+0x46>
	__asm volatile
 8010316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801031a:	f383 8811 	msr	BASEPRI, r3
 801031e:	f3bf 8f6f 	isb	sy
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	60fb      	str	r3, [r7, #12]
}
 8010328:	bf00      	nop
 801032a:	bf00      	nop
 801032c:	e7fd      	b.n	801032a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801032e:	693b      	ldr	r3, [r7, #16]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00b      	beq.n	801034e <vPortFree+0x66>
	__asm volatile
 8010336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801033a:	f383 8811 	msr	BASEPRI, r3
 801033e:	f3bf 8f6f 	isb	sy
 8010342:	f3bf 8f4f 	dsb	sy
 8010346:	60bb      	str	r3, [r7, #8]
}
 8010348:	bf00      	nop
 801034a:	bf00      	nop
 801034c:	e7fd      	b.n	801034a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	685a      	ldr	r2, [r3, #4]
 8010352:	4b14      	ldr	r3, [pc, #80]	@ (80103a4 <vPortFree+0xbc>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4013      	ands	r3, r2
 8010358:	2b00      	cmp	r3, #0
 801035a:	d01e      	beq.n	801039a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d11a      	bne.n	801039a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	685a      	ldr	r2, [r3, #4]
 8010368:	4b0e      	ldr	r3, [pc, #56]	@ (80103a4 <vPortFree+0xbc>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	43db      	mvns	r3, r3
 801036e:	401a      	ands	r2, r3
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010374:	f7fe fc64 	bl	800ec40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	685a      	ldr	r2, [r3, #4]
 801037c:	4b0a      	ldr	r3, [pc, #40]	@ (80103a8 <vPortFree+0xc0>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4413      	add	r3, r2
 8010382:	4a09      	ldr	r2, [pc, #36]	@ (80103a8 <vPortFree+0xc0>)
 8010384:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010386:	6938      	ldr	r0, [r7, #16]
 8010388:	f000 f874 	bl	8010474 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801038c:	4b07      	ldr	r3, [pc, #28]	@ (80103ac <vPortFree+0xc4>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	3301      	adds	r3, #1
 8010392:	4a06      	ldr	r2, [pc, #24]	@ (80103ac <vPortFree+0xc4>)
 8010394:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010396:	f7fe fc61 	bl	800ec5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801039a:	bf00      	nop
 801039c:	3718      	adds	r7, #24
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	240060c8 	.word	0x240060c8
 80103a8:	240060b8 	.word	0x240060b8
 80103ac:	240060c4 	.word	0x240060c4

080103b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80103b0:	b480      	push	{r7}
 80103b2:	b085      	sub	sp, #20
 80103b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80103b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80103ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80103bc:	4b27      	ldr	r3, [pc, #156]	@ (801045c <prvHeapInit+0xac>)
 80103be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f003 0307 	and.w	r3, r3, #7
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00c      	beq.n	80103e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	3307      	adds	r3, #7
 80103ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f023 0307 	bic.w	r3, r3, #7
 80103d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80103d8:	68ba      	ldr	r2, [r7, #8]
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	4a1f      	ldr	r2, [pc, #124]	@ (801045c <prvHeapInit+0xac>)
 80103e0:	4413      	add	r3, r2
 80103e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103e8:	4a1d      	ldr	r2, [pc, #116]	@ (8010460 <prvHeapInit+0xb0>)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80103ee:	4b1c      	ldr	r3, [pc, #112]	@ (8010460 <prvHeapInit+0xb0>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	68ba      	ldr	r2, [r7, #8]
 80103f8:	4413      	add	r3, r2
 80103fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80103fc:	2208      	movs	r2, #8
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	1a9b      	subs	r3, r3, r2
 8010402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f023 0307 	bic.w	r3, r3, #7
 801040a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	4a15      	ldr	r2, [pc, #84]	@ (8010464 <prvHeapInit+0xb4>)
 8010410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010412:	4b14      	ldr	r3, [pc, #80]	@ (8010464 <prvHeapInit+0xb4>)
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2200      	movs	r2, #0
 8010418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801041a:	4b12      	ldr	r3, [pc, #72]	@ (8010464 <prvHeapInit+0xb4>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	2200      	movs	r2, #0
 8010420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	1ad2      	subs	r2, r2, r3
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010430:	4b0c      	ldr	r3, [pc, #48]	@ (8010464 <prvHeapInit+0xb4>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	4a0a      	ldr	r2, [pc, #40]	@ (8010468 <prvHeapInit+0xb8>)
 801043e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	4a09      	ldr	r2, [pc, #36]	@ (801046c <prvHeapInit+0xbc>)
 8010446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010448:	4b09      	ldr	r3, [pc, #36]	@ (8010470 <prvHeapInit+0xc0>)
 801044a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801044e:	601a      	str	r2, [r3, #0]
}
 8010450:	bf00      	nop
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr
 801045c:	240024ac 	.word	0x240024ac
 8010460:	240060ac 	.word	0x240060ac
 8010464:	240060b4 	.word	0x240060b4
 8010468:	240060bc 	.word	0x240060bc
 801046c:	240060b8 	.word	0x240060b8
 8010470:	240060c8 	.word	0x240060c8

08010474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801047c:	4b28      	ldr	r3, [pc, #160]	@ (8010520 <prvInsertBlockIntoFreeList+0xac>)
 801047e:	60fb      	str	r3, [r7, #12]
 8010480:	e002      	b.n	8010488 <prvInsertBlockIntoFreeList+0x14>
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	60fb      	str	r3, [r7, #12]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	429a      	cmp	r2, r3
 8010490:	d8f7      	bhi.n	8010482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	4413      	add	r3, r2
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d108      	bne.n	80104b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	685a      	ldr	r2, [r3, #4]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	441a      	add	r2, r3
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	68ba      	ldr	r2, [r7, #8]
 80104c0:	441a      	add	r2, r3
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d118      	bne.n	80104fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681a      	ldr	r2, [r3, #0]
 80104ce:	4b15      	ldr	r3, [pc, #84]	@ (8010524 <prvInsertBlockIntoFreeList+0xb0>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d00d      	beq.n	80104f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	685a      	ldr	r2, [r3, #4]
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	685b      	ldr	r3, [r3, #4]
 80104e0:	441a      	add	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	601a      	str	r2, [r3, #0]
 80104f0:	e008      	b.n	8010504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80104f2:	4b0c      	ldr	r3, [pc, #48]	@ (8010524 <prvInsertBlockIntoFreeList+0xb0>)
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	e003      	b.n	8010504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010504:	68fa      	ldr	r2, [r7, #12]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	429a      	cmp	r2, r3
 801050a:	d002      	beq.n	8010512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010512:	bf00      	nop
 8010514:	3714      	adds	r7, #20
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr
 801051e:	bf00      	nop
 8010520:	240060ac 	.word	0x240060ac
 8010524:	240060b4 	.word	0x240060b4

08010528 <arm_mat_trans_f32>:
 8010528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801052c:	8802      	ldrh	r2, [r0, #0]
 801052e:	b085      	sub	sp, #20
 8010530:	884b      	ldrh	r3, [r1, #2]
 8010532:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010536:	4293      	cmp	r3, r2
 8010538:	8844      	ldrh	r4, [r0, #2]
 801053a:	6848      	ldr	r0, [r1, #4]
 801053c:	d14e      	bne.n	80105dc <arm_mat_trans_f32+0xb4>
 801053e:	f8b1 8000 	ldrh.w	r8, [r1]
 8010542:	45a0      	cmp	r8, r4
 8010544:	d14a      	bne.n	80105dc <arm_mat_trans_f32+0xb4>
 8010546:	ea4f 0998 	mov.w	r9, r8, lsr #2
 801054a:	f008 0803 	and.w	r8, r8, #3
 801054e:	009c      	lsls	r4, r3, #2
 8010550:	4684      	mov	ip, r0
 8010552:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8010556:	fb09 f204 	mul.w	r2, r9, r4
 801055a:	011d      	lsls	r5, r3, #4
 801055c:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 8010560:	eb00 0a04 	add.w	sl, r0, r4
 8010564:	0092      	lsls	r2, r2, #2
 8010566:	9103      	str	r1, [sp, #12]
 8010568:	00db      	lsls	r3, r3, #3
 801056a:	9202      	str	r2, [sp, #8]
 801056c:	9301      	str	r3, [sp, #4]
 801056e:	4663      	mov	r3, ip
 8010570:	f1b9 0f00 	cmp.w	r9, #0
 8010574:	d01d      	beq.n	80105b2 <arm_mat_trans_f32+0x8a>
 8010576:	9901      	ldr	r1, [sp, #4]
 8010578:	f10e 0210 	add.w	r2, lr, #16
 801057c:	4648      	mov	r0, r9
 801057e:	4461      	add	r1, ip
 8010580:	ed52 7a04 	vldr	s15, [r2, #-16]
 8010584:	191f      	adds	r7, r3, r4
 8010586:	190e      	adds	r6, r1, r4
 8010588:	3801      	subs	r0, #1
 801058a:	edc3 7a00 	vstr	s15, [r3]
 801058e:	f102 0210 	add.w	r2, r2, #16
 8010592:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 8010596:	442b      	add	r3, r5
 8010598:	edc7 7a00 	vstr	s15, [r7]
 801059c:	f852 7c18 	ldr.w	r7, [r2, #-24]
 80105a0:	600f      	str	r7, [r1, #0]
 80105a2:	4429      	add	r1, r5
 80105a4:	f852 7c14 	ldr.w	r7, [r2, #-20]
 80105a8:	6037      	str	r7, [r6, #0]
 80105aa:	d1e9      	bne.n	8010580 <arm_mat_trans_f32+0x58>
 80105ac:	9b02      	ldr	r3, [sp, #8]
 80105ae:	44de      	add	lr, fp
 80105b0:	4463      	add	r3, ip
 80105b2:	f1b8 0f00 	cmp.w	r8, #0
 80105b6:	d009      	beq.n	80105cc <arm_mat_trans_f32+0xa4>
 80105b8:	4642      	mov	r2, r8
 80105ba:	4671      	mov	r1, lr
 80105bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80105c0:	3a01      	subs	r2, #1
 80105c2:	6018      	str	r0, [r3, #0]
 80105c4:	4423      	add	r3, r4
 80105c6:	d1f9      	bne.n	80105bc <arm_mat_trans_f32+0x94>
 80105c8:	9b03      	ldr	r3, [sp, #12]
 80105ca:	449e      	add	lr, r3
 80105cc:	f10c 0c04 	add.w	ip, ip, #4
 80105d0:	45d4      	cmp	ip, sl
 80105d2:	d1cc      	bne.n	801056e <arm_mat_trans_f32+0x46>
 80105d4:	2000      	movs	r0, #0
 80105d6:	b005      	add	sp, #20
 80105d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105dc:	f06f 0002 	mvn.w	r0, #2
 80105e0:	e7f9      	b.n	80105d6 <arm_mat_trans_f32+0xae>
 80105e2:	bf00      	nop

080105e4 <arm_mat_mult_f32>:
 80105e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e8:	8845      	ldrh	r5, [r0, #2]
 80105ea:	b08b      	sub	sp, #44	@ 0x2c
 80105ec:	880b      	ldrh	r3, [r1, #0]
 80105ee:	8806      	ldrh	r6, [r0, #0]
 80105f0:	42ab      	cmp	r3, r5
 80105f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80105f4:	6847      	ldr	r7, [r0, #4]
 80105f6:	9604      	str	r6, [sp, #16]
 80105f8:	6848      	ldr	r0, [r1, #4]
 80105fa:	6854      	ldr	r4, [r2, #4]
 80105fc:	8849      	ldrh	r1, [r1, #2]
 80105fe:	f040 808d 	bne.w	801071c <arm_mat_mult_f32+0x138>
 8010602:	8815      	ldrh	r5, [r2, #0]
 8010604:	42b5      	cmp	r5, r6
 8010606:	f040 8089 	bne.w	801071c <arm_mat_mult_f32+0x138>
 801060a:	8852      	ldrh	r2, [r2, #2]
 801060c:	428a      	cmp	r2, r1
 801060e:	f040 8085 	bne.w	801071c <arm_mat_mult_f32+0x138>
 8010612:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8010616:	1d01      	adds	r1, r0, #4
 8010618:	0116      	lsls	r6, r2, #4
 801061a:	f003 0903 	and.w	r9, r3, #3
 801061e:	9108      	str	r1, [sp, #32]
 8010620:	0095      	lsls	r5, r2, #2
 8010622:	fb06 f108 	mul.w	r1, r6, r8
 8010626:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	f107 0b10 	add.w	fp, r7, #16
 8010630:	9103      	str	r1, [sp, #12]
 8010632:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8010636:	00d2      	lsls	r2, r2, #3
 8010638:	eb04 0a05 	add.w	sl, r4, r5
 801063c:	9101      	str	r1, [sp, #4]
 801063e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8010642:	9202      	str	r2, [sp, #8]
 8010644:	9107      	str	r1, [sp, #28]
 8010646:	9306      	str	r3, [sp, #24]
 8010648:	f1ab 0310 	sub.w	r3, fp, #16
 801064c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8010650:	9305      	str	r3, [sp, #20]
 8010652:	9b07      	ldr	r3, [sp, #28]
 8010654:	eb03 0c0a 	add.w	ip, r3, sl
 8010658:	f1b8 0f00 	cmp.w	r8, #0
 801065c:	d056      	beq.n	801070c <arm_mat_mult_f32+0x128>
 801065e:	9b02      	ldr	r3, [sp, #8]
 8010660:	4644      	mov	r4, r8
 8010662:	4602      	mov	r2, r0
 8010664:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8010728 <arm_mat_mult_f32+0x144>
 8010668:	18c1      	adds	r1, r0, r3
 801066a:	465b      	mov	r3, fp
 801066c:	edd2 6a00 	vldr	s13, [r2]
 8010670:	1957      	adds	r7, r2, r5
 8010672:	ed13 7a04 	vldr	s14, [r3, #-16]
 8010676:	3c01      	subs	r4, #1
 8010678:	ed53 5a03 	vldr	s11, [r3, #-12]
 801067c:	4432      	add	r2, r6
 801067e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010682:	ed97 6a00 	vldr	s12, [r7]
 8010686:	ed53 6a02 	vldr	s13, [r3, #-8]
 801068a:	eb01 0705 	add.w	r7, r1, r5
 801068e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010692:	ed91 5a00 	vldr	s10, [r1]
 8010696:	ee77 7a27 	vadd.f32	s15, s14, s15
 801069a:	edd7 5a00 	vldr	s11, [r7]
 801069e:	ee26 7a85 	vmul.f32	s14, s13, s10
 80106a2:	ed53 6a01 	vldr	s13, [r3, #-4]
 80106a6:	4431      	add	r1, r6
 80106a8:	f103 0310 	add.w	r3, r3, #16
 80106ac:	ee76 7a27 	vadd.f32	s15, s12, s15
 80106b0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80106b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80106bc:	d1d6      	bne.n	801066c <arm_mat_mult_f32+0x88>
 80106be:	9b03      	ldr	r3, [sp, #12]
 80106c0:	9a01      	ldr	r2, [sp, #4]
 80106c2:	4418      	add	r0, r3
 80106c4:	f1b9 0f00 	cmp.w	r9, #0
 80106c8:	d00b      	beq.n	80106e2 <arm_mat_mult_f32+0xfe>
 80106ca:	464b      	mov	r3, r9
 80106cc:	edd0 6a00 	vldr	s13, [r0]
 80106d0:	3b01      	subs	r3, #1
 80106d2:	ecb2 7a01 	vldmia	r2!, {s14}
 80106d6:	4428      	add	r0, r5
 80106d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80106dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106e0:	d1f4      	bne.n	80106cc <arm_mat_mult_f32+0xe8>
 80106e2:	ecec 7a01 	vstmia	ip!, {s15}
 80106e6:	45d4      	cmp	ip, sl
 80106e8:	4670      	mov	r0, lr
 80106ea:	f10e 0e04 	add.w	lr, lr, #4
 80106ee:	d1b3      	bne.n	8010658 <arm_mat_mult_f32+0x74>
 80106f0:	9a01      	ldr	r2, [sp, #4]
 80106f2:	44aa      	add	sl, r5
 80106f4:	9b06      	ldr	r3, [sp, #24]
 80106f6:	4611      	mov	r1, r2
 80106f8:	449b      	add	fp, r3
 80106fa:	4419      	add	r1, r3
 80106fc:	9b04      	ldr	r3, [sp, #16]
 80106fe:	3b01      	subs	r3, #1
 8010700:	9101      	str	r1, [sp, #4]
 8010702:	9304      	str	r3, [sp, #16]
 8010704:	d006      	beq.n	8010714 <arm_mat_mult_f32+0x130>
 8010706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010708:	6858      	ldr	r0, [r3, #4]
 801070a:	e79d      	b.n	8010648 <arm_mat_mult_f32+0x64>
 801070c:	9a05      	ldr	r2, [sp, #20]
 801070e:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8010728 <arm_mat_mult_f32+0x144>
 8010712:	e7d7      	b.n	80106c4 <arm_mat_mult_f32+0xe0>
 8010714:	4618      	mov	r0, r3
 8010716:	b00b      	add	sp, #44	@ 0x2c
 8010718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071c:	f06f 0002 	mvn.w	r0, #2
 8010720:	b00b      	add	sp, #44	@ 0x2c
 8010722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010726:	bf00      	nop
 8010728:	00000000 	.word	0x00000000

0801072c <arm_mat_inverse_f32>:
 801072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010730:	8843      	ldrh	r3, [r0, #2]
 8010732:	b087      	sub	sp, #28
 8010734:	8804      	ldrh	r4, [r0, #0]
 8010736:	684d      	ldr	r5, [r1, #4]
 8010738:	429c      	cmp	r4, r3
 801073a:	9301      	str	r3, [sp, #4]
 801073c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010740:	9503      	str	r5, [sp, #12]
 8010742:	f040 80e2 	bne.w	801090a <arm_mat_inverse_f32+0x1de>
 8010746:	880b      	ldrh	r3, [r1, #0]
 8010748:	884a      	ldrh	r2, [r1, #2]
 801074a:	429a      	cmp	r2, r3
 801074c:	f040 80dd 	bne.w	801090a <arm_mat_inverse_f32+0x1de>
 8010750:	429c      	cmp	r4, r3
 8010752:	f040 80da 	bne.w	801090a <arm_mat_inverse_f32+0x1de>
 8010756:	9005      	str	r0, [sp, #20]
 8010758:	b1fc      	cbz	r4, 801079a <arm_mat_inverse_f32+0x6e>
 801075a:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 801075e:	1e66      	subs	r6, r4, #1
 8010760:	f845 bb04 	str.w	fp, [r5], #4
 8010764:	d019      	beq.n	801079a <arm_mat_inverse_f32+0x6e>
 8010766:	2701      	movs	r7, #1
 8010768:	00b2      	lsls	r2, r6, #2
 801076a:	4628      	mov	r0, r5
 801076c:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8010770:	2100      	movs	r1, #0
 8010772:	eb05 0a02 	add.w	sl, r5, r2
 8010776:	f001 fc46 	bl	8012006 <memset>
 801077a:	4642      	mov	r2, r8
 801077c:	2100      	movs	r1, #0
 801077e:	eb0a 0508 	add.w	r5, sl, r8
 8010782:	4650      	mov	r0, sl
 8010784:	2f00      	cmp	r7, #0
 8010786:	f000 80c5 	beq.w	8010914 <arm_mat_inverse_f32+0x1e8>
 801078a:	f001 fc3c 	bl	8012006 <memset>
 801078e:	3e01      	subs	r6, #1
 8010790:	f107 0701 	add.w	r7, r7, #1
 8010794:	f845 bb04 	str.w	fp, [r5], #4
 8010798:	d1e6      	bne.n	8010768 <arm_mat_inverse_f32+0x3c>
 801079a:	9b01      	ldr	r3, [sp, #4]
 801079c:	2b00      	cmp	r3, #0
 801079e:	f000 80af 	beq.w	8010900 <arm_mat_inverse_f32+0x1d4>
 80107a2:	009d      	lsls	r5, r3, #2
 80107a4:	46cc      	mov	ip, r9
 80107a6:	469e      	mov	lr, r3
 80107a8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80107ac:	eb0c 0305 	add.w	r3, ip, r5
 80107b0:	462f      	mov	r7, r5
 80107b2:	2600      	movs	r6, #0
 80107b4:	9302      	str	r3, [sp, #8]
 80107b6:	1d2b      	adds	r3, r5, #4
 80107b8:	9304      	str	r3, [sp, #16]
 80107ba:	9b02      	ldr	r3, [sp, #8]
 80107bc:	42b4      	cmp	r4, r6
 80107be:	eddc 6a00 	vldr	s13, [ip]
 80107c2:	eba3 0b07 	sub.w	fp, r3, r7
 80107c6:	f000 809b 	beq.w	8010900 <arm_mat_inverse_f32+0x1d4>
 80107ca:	4632      	mov	r2, r6
 80107cc:	4663      	mov	r3, ip
 80107ce:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010924 <arm_mat_inverse_f32+0x1f8>
 80107d2:	e009      	b.n	80107e8 <arm_mat_inverse_f32+0xbc>
 80107d4:	eef4 7a47 	vcmp.f32	s15, s14
 80107d8:	3201      	adds	r2, #1
 80107da:	442b      	add	r3, r5
 80107dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107e0:	fe37 7a87 	vselgt.f32	s14, s15, s14
 80107e4:	42a2      	cmp	r2, r4
 80107e6:	d012      	beq.n	801080e <arm_mat_inverse_f32+0xe2>
 80107e8:	edd3 7a00 	vldr	s15, [r3]
 80107ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80107f0:	eeb1 6a67 	vneg.f32	s12, s15
 80107f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f8:	dcec      	bgt.n	80107d4 <arm_mat_inverse_f32+0xa8>
 80107fa:	eeb4 6a47 	vcmp.f32	s12, s14
 80107fe:	3201      	adds	r2, #1
 8010800:	442b      	add	r3, r5
 8010802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010806:	fe36 7a07 	vselgt.f32	s14, s12, s14
 801080a:	42a2      	cmp	r2, r4
 801080c:	d1ec      	bne.n	80107e8 <arm_mat_inverse_f32+0xbc>
 801080e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010816:	d073      	beq.n	8010900 <arm_mat_inverse_f32+0x1d4>
 8010818:	eef5 6a40 	vcmp.f32	s13, #0.0
 801081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010820:	d06e      	beq.n	8010900 <arm_mat_inverse_f32+0x1d4>
 8010822:	4672      	mov	r2, lr
 8010824:	4663      	mov	r3, ip
 8010826:	ed93 7a00 	vldr	s14, [r3]
 801082a:	3a01      	subs	r2, #1
 801082c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010830:	ece3 7a01 	vstmia	r3!, {s15}
 8010834:	d1f7      	bne.n	8010826 <arm_mat_inverse_f32+0xfa>
 8010836:	9901      	ldr	r1, [sp, #4]
 8010838:	464b      	mov	r3, r9
 801083a:	ed93 7a00 	vldr	s14, [r3]
 801083e:	3901      	subs	r1, #1
 8010840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010844:	ece3 7a01 	vstmia	r3!, {s15}
 8010848:	d1f7      	bne.n	801083a <arm_mat_inverse_f32+0x10e>
 801084a:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801084e:	9803      	ldr	r0, [sp, #12]
 8010850:	42b1      	cmp	r1, r6
 8010852:	d038      	beq.n	80108c6 <arm_mat_inverse_f32+0x19a>
 8010854:	eddb 6a00 	vldr	s13, [fp]
 8010858:	465a      	mov	r2, fp
 801085a:	4673      	mov	r3, lr
 801085c:	46e2      	mov	sl, ip
 801085e:	ecba 7a01 	vldmia	sl!, {s14}
 8010862:	3b01      	subs	r3, #1
 8010864:	edd2 7a00 	vldr	s15, [r2]
 8010868:	ee26 7a87 	vmul.f32	s14, s13, s14
 801086c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010870:	ece2 7a01 	vstmia	r2!, {s15}
 8010874:	d1f3      	bne.n	801085e <arm_mat_inverse_f32+0x132>
 8010876:	44bb      	add	fp, r7
 8010878:	4602      	mov	r2, r0
 801087a:	9b01      	ldr	r3, [sp, #4]
 801087c:	46ca      	mov	sl, r9
 801087e:	ecba 7a01 	vldmia	sl!, {s14}
 8010882:	3b01      	subs	r3, #1
 8010884:	edd2 7a00 	vldr	s15, [r2]
 8010888:	ee26 7a87 	vmul.f32	s14, s13, s14
 801088c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010890:	ece2 7a01 	vstmia	r2!, {s15}
 8010894:	d1f3      	bne.n	801087e <arm_mat_inverse_f32+0x152>
 8010896:	4428      	add	r0, r5
 8010898:	3101      	adds	r1, #1
 801089a:	44c3      	add	fp, r8
 801089c:	428c      	cmp	r4, r1
 801089e:	d1d7      	bne.n	8010850 <arm_mat_inverse_f32+0x124>
 80108a0:	9b04      	ldr	r3, [sp, #16]
 80108a2:	f1be 0e01 	subs.w	lr, lr, #1
 80108a6:	f106 0601 	add.w	r6, r6, #1
 80108aa:	f1a7 0704 	sub.w	r7, r7, #4
 80108ae:	449c      	add	ip, r3
 80108b0:	44a9      	add	r9, r5
 80108b2:	d182      	bne.n	80107ba <arm_mat_inverse_f32+0x8e>
 80108b4:	eef5 6a40 	vcmp.f32	s13, #0.0
 80108b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108bc:	d006      	beq.n	80108cc <arm_mat_inverse_f32+0x1a0>
 80108be:	2000      	movs	r0, #0
 80108c0:	b007      	add	sp, #28
 80108c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c6:	44bb      	add	fp, r7
 80108c8:	4428      	add	r0, r5
 80108ca:	e7e5      	b.n	8010898 <arm_mat_inverse_f32+0x16c>
 80108cc:	9b05      	ldr	r3, [sp, #20]
 80108ce:	9a01      	ldr	r2, [sp, #4]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	fb02 f204 	mul.w	r2, r2, r4
 80108d6:	edd3 7a00 	vldr	s15, [r3]
 80108da:	4614      	mov	r4, r2
 80108dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80108e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108e4:	d1eb      	bne.n	80108be <arm_mat_inverse_f32+0x192>
 80108e6:	3304      	adds	r3, #4
 80108e8:	e006      	b.n	80108f8 <arm_mat_inverse_f32+0x1cc>
 80108ea:	ecf3 7a01 	vldmia	r3!, {s15}
 80108ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80108f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108f6:	d1e2      	bne.n	80108be <arm_mat_inverse_f32+0x192>
 80108f8:	f10e 0e01 	add.w	lr, lr, #1
 80108fc:	4574      	cmp	r4, lr
 80108fe:	d1f4      	bne.n	80108ea <arm_mat_inverse_f32+0x1be>
 8010900:	f06f 0004 	mvn.w	r0, #4
 8010904:	b007      	add	sp, #28
 8010906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801090a:	f06f 0002 	mvn.w	r0, #2
 801090e:	b007      	add	sp, #28
 8010910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010914:	4655      	mov	r5, sl
 8010916:	3e01      	subs	r6, #1
 8010918:	f845 bb04 	str.w	fp, [r5], #4
 801091c:	f47f af23 	bne.w	8010766 <arm_mat_inverse_f32+0x3a>
 8010920:	e73b      	b.n	801079a <arm_mat_inverse_f32+0x6e>
 8010922:	bf00      	nop
 8010924:	00000000 	.word	0x00000000

08010928 <arm_mat_init_f32>:
 8010928:	8001      	strh	r1, [r0, #0]
 801092a:	8042      	strh	r2, [r0, #2]
 801092c:	6043      	str	r3, [r0, #4]
 801092e:	4770      	bx	lr

08010930 <sulp>:
 8010930:	b570      	push	{r4, r5, r6, lr}
 8010932:	4604      	mov	r4, r0
 8010934:	460d      	mov	r5, r1
 8010936:	4616      	mov	r6, r2
 8010938:	ec45 4b10 	vmov	d0, r4, r5
 801093c:	f003 fa5e 	bl	8013dfc <__ulp>
 8010940:	b17e      	cbz	r6, 8010962 <sulp+0x32>
 8010942:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010946:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801094a:	2b00      	cmp	r3, #0
 801094c:	dd09      	ble.n	8010962 <sulp+0x32>
 801094e:	051b      	lsls	r3, r3, #20
 8010950:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8010954:	2000      	movs	r0, #0
 8010956:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 801095a:	ec41 0b17 	vmov	d7, r0, r1
 801095e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010962:	bd70      	pop	{r4, r5, r6, pc}
 8010964:	0000      	movs	r0, r0
	...

08010968 <_strtod_l>:
 8010968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096c:	ed2d 8b0a 	vpush	{d8-d12}
 8010970:	b097      	sub	sp, #92	@ 0x5c
 8010972:	4688      	mov	r8, r1
 8010974:	920e      	str	r2, [sp, #56]	@ 0x38
 8010976:	2200      	movs	r2, #0
 8010978:	9212      	str	r2, [sp, #72]	@ 0x48
 801097a:	9005      	str	r0, [sp, #20]
 801097c:	f04f 0a00 	mov.w	sl, #0
 8010980:	f04f 0b00 	mov.w	fp, #0
 8010984:	460a      	mov	r2, r1
 8010986:	9211      	str	r2, [sp, #68]	@ 0x44
 8010988:	7811      	ldrb	r1, [r2, #0]
 801098a:	292b      	cmp	r1, #43	@ 0x2b
 801098c:	d04c      	beq.n	8010a28 <_strtod_l+0xc0>
 801098e:	d839      	bhi.n	8010a04 <_strtod_l+0x9c>
 8010990:	290d      	cmp	r1, #13
 8010992:	d833      	bhi.n	80109fc <_strtod_l+0x94>
 8010994:	2908      	cmp	r1, #8
 8010996:	d833      	bhi.n	8010a00 <_strtod_l+0x98>
 8010998:	2900      	cmp	r1, #0
 801099a:	d03c      	beq.n	8010a16 <_strtod_l+0xae>
 801099c:	2200      	movs	r2, #0
 801099e:	9208      	str	r2, [sp, #32]
 80109a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80109a2:	782a      	ldrb	r2, [r5, #0]
 80109a4:	2a30      	cmp	r2, #48	@ 0x30
 80109a6:	f040 80b7 	bne.w	8010b18 <_strtod_l+0x1b0>
 80109aa:	786a      	ldrb	r2, [r5, #1]
 80109ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80109b0:	2a58      	cmp	r2, #88	@ 0x58
 80109b2:	d170      	bne.n	8010a96 <_strtod_l+0x12e>
 80109b4:	9302      	str	r3, [sp, #8]
 80109b6:	9b08      	ldr	r3, [sp, #32]
 80109b8:	9301      	str	r3, [sp, #4]
 80109ba:	ab12      	add	r3, sp, #72	@ 0x48
 80109bc:	9300      	str	r3, [sp, #0]
 80109be:	4a90      	ldr	r2, [pc, #576]	@ (8010c00 <_strtod_l+0x298>)
 80109c0:	9805      	ldr	r0, [sp, #20]
 80109c2:	ab13      	add	r3, sp, #76	@ 0x4c
 80109c4:	a911      	add	r1, sp, #68	@ 0x44
 80109c6:	f002 fb13 	bl	8012ff0 <__gethex>
 80109ca:	f010 060f 	ands.w	r6, r0, #15
 80109ce:	4604      	mov	r4, r0
 80109d0:	d005      	beq.n	80109de <_strtod_l+0x76>
 80109d2:	2e06      	cmp	r6, #6
 80109d4:	d12a      	bne.n	8010a2c <_strtod_l+0xc4>
 80109d6:	3501      	adds	r5, #1
 80109d8:	2300      	movs	r3, #0
 80109da:	9511      	str	r5, [sp, #68]	@ 0x44
 80109dc:	9308      	str	r3, [sp, #32]
 80109de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	f040 8537 	bne.w	8011454 <_strtod_l+0xaec>
 80109e6:	9b08      	ldr	r3, [sp, #32]
 80109e8:	ec4b ab10 	vmov	d0, sl, fp
 80109ec:	b1cb      	cbz	r3, 8010a22 <_strtod_l+0xba>
 80109ee:	eeb1 0b40 	vneg.f64	d0, d0
 80109f2:	b017      	add	sp, #92	@ 0x5c
 80109f4:	ecbd 8b0a 	vpop	{d8-d12}
 80109f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fc:	2920      	cmp	r1, #32
 80109fe:	d1cd      	bne.n	801099c <_strtod_l+0x34>
 8010a00:	3201      	adds	r2, #1
 8010a02:	e7c0      	b.n	8010986 <_strtod_l+0x1e>
 8010a04:	292d      	cmp	r1, #45	@ 0x2d
 8010a06:	d1c9      	bne.n	801099c <_strtod_l+0x34>
 8010a08:	2101      	movs	r1, #1
 8010a0a:	9108      	str	r1, [sp, #32]
 8010a0c:	1c51      	adds	r1, r2, #1
 8010a0e:	9111      	str	r1, [sp, #68]	@ 0x44
 8010a10:	7852      	ldrb	r2, [r2, #1]
 8010a12:	2a00      	cmp	r2, #0
 8010a14:	d1c4      	bne.n	80109a0 <_strtod_l+0x38>
 8010a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a18:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f040 8517 	bne.w	8011450 <_strtod_l+0xae8>
 8010a22:	ec4b ab10 	vmov	d0, sl, fp
 8010a26:	e7e4      	b.n	80109f2 <_strtod_l+0x8a>
 8010a28:	2100      	movs	r1, #0
 8010a2a:	e7ee      	b.n	8010a0a <_strtod_l+0xa2>
 8010a2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010a2e:	b13a      	cbz	r2, 8010a40 <_strtod_l+0xd8>
 8010a30:	2135      	movs	r1, #53	@ 0x35
 8010a32:	a814      	add	r0, sp, #80	@ 0x50
 8010a34:	f003 fad9 	bl	8013fea <__copybits>
 8010a38:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010a3a:	9805      	ldr	r0, [sp, #20]
 8010a3c:	f002 feb2 	bl	80137a4 <_Bfree>
 8010a40:	1e73      	subs	r3, r6, #1
 8010a42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010a44:	2b04      	cmp	r3, #4
 8010a46:	d806      	bhi.n	8010a56 <_strtod_l+0xee>
 8010a48:	e8df f003 	tbb	[pc, r3]
 8010a4c:	201d0314 	.word	0x201d0314
 8010a50:	14          	.byte	0x14
 8010a51:	00          	.byte	0x00
 8010a52:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8010a56:	05e3      	lsls	r3, r4, #23
 8010a58:	bf48      	it	mi
 8010a5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010a5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010a62:	0d1b      	lsrs	r3, r3, #20
 8010a64:	051b      	lsls	r3, r3, #20
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1b9      	bne.n	80109de <_strtod_l+0x76>
 8010a6a:	f001 fbdd 	bl	8012228 <__errno>
 8010a6e:	2322      	movs	r3, #34	@ 0x22
 8010a70:	6003      	str	r3, [r0, #0]
 8010a72:	e7b4      	b.n	80109de <_strtod_l+0x76>
 8010a74:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8010a78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010a7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010a80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010a84:	e7e7      	b.n	8010a56 <_strtod_l+0xee>
 8010a86:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010c08 <_strtod_l+0x2a0>
 8010a8a:	e7e4      	b.n	8010a56 <_strtod_l+0xee>
 8010a8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010a90:	f04f 3aff 	mov.w	sl, #4294967295
 8010a94:	e7df      	b.n	8010a56 <_strtod_l+0xee>
 8010a96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010a98:	1c5a      	adds	r2, r3, #1
 8010a9a:	9211      	str	r2, [sp, #68]	@ 0x44
 8010a9c:	785b      	ldrb	r3, [r3, #1]
 8010a9e:	2b30      	cmp	r3, #48	@ 0x30
 8010aa0:	d0f9      	beq.n	8010a96 <_strtod_l+0x12e>
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d09b      	beq.n	80109de <_strtod_l+0x76>
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	9307      	str	r3, [sp, #28]
 8010aaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010aac:	930a      	str	r3, [sp, #40]	@ 0x28
 8010aae:	2300      	movs	r3, #0
 8010ab0:	9306      	str	r3, [sp, #24]
 8010ab2:	4699      	mov	r9, r3
 8010ab4:	461d      	mov	r5, r3
 8010ab6:	220a      	movs	r2, #10
 8010ab8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8010aba:	7804      	ldrb	r4, [r0, #0]
 8010abc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8010ac0:	b2d9      	uxtb	r1, r3
 8010ac2:	2909      	cmp	r1, #9
 8010ac4:	d92a      	bls.n	8010b1c <_strtod_l+0x1b4>
 8010ac6:	494f      	ldr	r1, [pc, #316]	@ (8010c04 <_strtod_l+0x29c>)
 8010ac8:	2201      	movs	r2, #1
 8010aca:	f001 fab1 	bl	8012030 <strncmp>
 8010ace:	b398      	cbz	r0, 8010b38 <_strtod_l+0x1d0>
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	4622      	mov	r2, r4
 8010ad4:	462b      	mov	r3, r5
 8010ad6:	4607      	mov	r7, r0
 8010ad8:	4601      	mov	r1, r0
 8010ada:	2a65      	cmp	r2, #101	@ 0x65
 8010adc:	d001      	beq.n	8010ae2 <_strtod_l+0x17a>
 8010ade:	2a45      	cmp	r2, #69	@ 0x45
 8010ae0:	d118      	bne.n	8010b14 <_strtod_l+0x1ac>
 8010ae2:	b91b      	cbnz	r3, 8010aec <_strtod_l+0x184>
 8010ae4:	9b07      	ldr	r3, [sp, #28]
 8010ae6:	4303      	orrs	r3, r0
 8010ae8:	d095      	beq.n	8010a16 <_strtod_l+0xae>
 8010aea:	2300      	movs	r3, #0
 8010aec:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8010af0:	f108 0201 	add.w	r2, r8, #1
 8010af4:	9211      	str	r2, [sp, #68]	@ 0x44
 8010af6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010afa:	2a2b      	cmp	r2, #43	@ 0x2b
 8010afc:	d074      	beq.n	8010be8 <_strtod_l+0x280>
 8010afe:	2a2d      	cmp	r2, #45	@ 0x2d
 8010b00:	d07a      	beq.n	8010bf8 <_strtod_l+0x290>
 8010b02:	f04f 0e00 	mov.w	lr, #0
 8010b06:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8010b0a:	2c09      	cmp	r4, #9
 8010b0c:	f240 8082 	bls.w	8010c14 <_strtod_l+0x2ac>
 8010b10:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8010b14:	2400      	movs	r4, #0
 8010b16:	e09d      	b.n	8010c54 <_strtod_l+0x2ec>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	e7c5      	b.n	8010aa8 <_strtod_l+0x140>
 8010b1c:	2d08      	cmp	r5, #8
 8010b1e:	bfc8      	it	gt
 8010b20:	9906      	ldrgt	r1, [sp, #24]
 8010b22:	f100 0001 	add.w	r0, r0, #1
 8010b26:	bfca      	itet	gt
 8010b28:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010b2c:	fb02 3909 	mlale	r9, r2, r9, r3
 8010b30:	9306      	strgt	r3, [sp, #24]
 8010b32:	3501      	adds	r5, #1
 8010b34:	9011      	str	r0, [sp, #68]	@ 0x44
 8010b36:	e7bf      	b.n	8010ab8 <_strtod_l+0x150>
 8010b38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010b3a:	1c5a      	adds	r2, r3, #1
 8010b3c:	9211      	str	r2, [sp, #68]	@ 0x44
 8010b3e:	785a      	ldrb	r2, [r3, #1]
 8010b40:	b3bd      	cbz	r5, 8010bb2 <_strtod_l+0x24a>
 8010b42:	4607      	mov	r7, r0
 8010b44:	462b      	mov	r3, r5
 8010b46:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010b4a:	2909      	cmp	r1, #9
 8010b4c:	d912      	bls.n	8010b74 <_strtod_l+0x20c>
 8010b4e:	2101      	movs	r1, #1
 8010b50:	e7c3      	b.n	8010ada <_strtod_l+0x172>
 8010b52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	9211      	str	r2, [sp, #68]	@ 0x44
 8010b58:	785a      	ldrb	r2, [r3, #1]
 8010b5a:	3001      	adds	r0, #1
 8010b5c:	2a30      	cmp	r2, #48	@ 0x30
 8010b5e:	d0f8      	beq.n	8010b52 <_strtod_l+0x1ea>
 8010b60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010b64:	2b08      	cmp	r3, #8
 8010b66:	f200 847a 	bhi.w	801145e <_strtod_l+0xaf6>
 8010b6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010b6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b6e:	4607      	mov	r7, r0
 8010b70:	2000      	movs	r0, #0
 8010b72:	4603      	mov	r3, r0
 8010b74:	3a30      	subs	r2, #48	@ 0x30
 8010b76:	f100 0101 	add.w	r1, r0, #1
 8010b7a:	d014      	beq.n	8010ba6 <_strtod_l+0x23e>
 8010b7c:	440f      	add	r7, r1
 8010b7e:	469c      	mov	ip, r3
 8010b80:	f04f 0e0a 	mov.w	lr, #10
 8010b84:	f10c 0401 	add.w	r4, ip, #1
 8010b88:	1ae6      	subs	r6, r4, r3
 8010b8a:	42b1      	cmp	r1, r6
 8010b8c:	dc13      	bgt.n	8010bb6 <_strtod_l+0x24e>
 8010b8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010b92:	1819      	adds	r1, r3, r0
 8010b94:	2908      	cmp	r1, #8
 8010b96:	f103 0301 	add.w	r3, r3, #1
 8010b9a:	4403      	add	r3, r0
 8010b9c:	dc19      	bgt.n	8010bd2 <_strtod_l+0x26a>
 8010b9e:	210a      	movs	r1, #10
 8010ba0:	fb01 2909 	mla	r9, r1, r9, r2
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010ba8:	1c50      	adds	r0, r2, #1
 8010baa:	9011      	str	r0, [sp, #68]	@ 0x44
 8010bac:	7852      	ldrb	r2, [r2, #1]
 8010bae:	4608      	mov	r0, r1
 8010bb0:	e7c9      	b.n	8010b46 <_strtod_l+0x1de>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	e7d2      	b.n	8010b5c <_strtod_l+0x1f4>
 8010bb6:	f1bc 0f08 	cmp.w	ip, #8
 8010bba:	dc03      	bgt.n	8010bc4 <_strtod_l+0x25c>
 8010bbc:	fb0e f909 	mul.w	r9, lr, r9
 8010bc0:	46a4      	mov	ip, r4
 8010bc2:	e7df      	b.n	8010b84 <_strtod_l+0x21c>
 8010bc4:	2c10      	cmp	r4, #16
 8010bc6:	bfde      	ittt	le
 8010bc8:	9e06      	ldrle	r6, [sp, #24]
 8010bca:	fb0e f606 	mulle.w	r6, lr, r6
 8010bce:	9606      	strle	r6, [sp, #24]
 8010bd0:	e7f6      	b.n	8010bc0 <_strtod_l+0x258>
 8010bd2:	290f      	cmp	r1, #15
 8010bd4:	bfdf      	itttt	le
 8010bd6:	9806      	ldrle	r0, [sp, #24]
 8010bd8:	210a      	movle	r1, #10
 8010bda:	fb01 2200 	mlale	r2, r1, r0, r2
 8010bde:	9206      	strle	r2, [sp, #24]
 8010be0:	e7e0      	b.n	8010ba4 <_strtod_l+0x23c>
 8010be2:	2700      	movs	r7, #0
 8010be4:	2101      	movs	r1, #1
 8010be6:	e77d      	b.n	8010ae4 <_strtod_l+0x17c>
 8010be8:	f04f 0e00 	mov.w	lr, #0
 8010bec:	f108 0202 	add.w	r2, r8, #2
 8010bf0:	9211      	str	r2, [sp, #68]	@ 0x44
 8010bf2:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010bf6:	e786      	b.n	8010b06 <_strtod_l+0x19e>
 8010bf8:	f04f 0e01 	mov.w	lr, #1
 8010bfc:	e7f6      	b.n	8010bec <_strtod_l+0x284>
 8010bfe:	bf00      	nop
 8010c00:	080150f4 	.word	0x080150f4
 8010c04:	08014f0c 	.word	0x08014f0c
 8010c08:	7ff00000 	.word	0x7ff00000
 8010c0c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010c0e:	1c54      	adds	r4, r2, #1
 8010c10:	9411      	str	r4, [sp, #68]	@ 0x44
 8010c12:	7852      	ldrb	r2, [r2, #1]
 8010c14:	2a30      	cmp	r2, #48	@ 0x30
 8010c16:	d0f9      	beq.n	8010c0c <_strtod_l+0x2a4>
 8010c18:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8010c1c:	2c08      	cmp	r4, #8
 8010c1e:	f63f af79 	bhi.w	8010b14 <_strtod_l+0x1ac>
 8010c22:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8010c26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c2a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010c2c:	1c54      	adds	r4, r2, #1
 8010c2e:	9411      	str	r4, [sp, #68]	@ 0x44
 8010c30:	7852      	ldrb	r2, [r2, #1]
 8010c32:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 8010c36:	2e09      	cmp	r6, #9
 8010c38:	d937      	bls.n	8010caa <_strtod_l+0x342>
 8010c3a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010c3c:	1ba4      	subs	r4, r4, r6
 8010c3e:	2c08      	cmp	r4, #8
 8010c40:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8010c44:	dc02      	bgt.n	8010c4c <_strtod_l+0x2e4>
 8010c46:	4564      	cmp	r4, ip
 8010c48:	bfa8      	it	ge
 8010c4a:	4664      	movge	r4, ip
 8010c4c:	f1be 0f00 	cmp.w	lr, #0
 8010c50:	d000      	beq.n	8010c54 <_strtod_l+0x2ec>
 8010c52:	4264      	negs	r4, r4
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d14d      	bne.n	8010cf4 <_strtod_l+0x38c>
 8010c58:	9b07      	ldr	r3, [sp, #28]
 8010c5a:	4318      	orrs	r0, r3
 8010c5c:	f47f aebf 	bne.w	80109de <_strtod_l+0x76>
 8010c60:	2900      	cmp	r1, #0
 8010c62:	f47f aed8 	bne.w	8010a16 <_strtod_l+0xae>
 8010c66:	2a69      	cmp	r2, #105	@ 0x69
 8010c68:	d027      	beq.n	8010cba <_strtod_l+0x352>
 8010c6a:	dc24      	bgt.n	8010cb6 <_strtod_l+0x34e>
 8010c6c:	2a49      	cmp	r2, #73	@ 0x49
 8010c6e:	d024      	beq.n	8010cba <_strtod_l+0x352>
 8010c70:	2a4e      	cmp	r2, #78	@ 0x4e
 8010c72:	f47f aed0 	bne.w	8010a16 <_strtod_l+0xae>
 8010c76:	4997      	ldr	r1, [pc, #604]	@ (8010ed4 <_strtod_l+0x56c>)
 8010c78:	a811      	add	r0, sp, #68	@ 0x44
 8010c7a:	f002 fbdb 	bl	8013434 <__match>
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	f43f aec9 	beq.w	8010a16 <_strtod_l+0xae>
 8010c84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	2b28      	cmp	r3, #40	@ 0x28
 8010c8a:	d12d      	bne.n	8010ce8 <_strtod_l+0x380>
 8010c8c:	4992      	ldr	r1, [pc, #584]	@ (8010ed8 <_strtod_l+0x570>)
 8010c8e:	aa14      	add	r2, sp, #80	@ 0x50
 8010c90:	a811      	add	r0, sp, #68	@ 0x44
 8010c92:	f002 fbe3 	bl	801345c <__hexnan>
 8010c96:	2805      	cmp	r0, #5
 8010c98:	d126      	bne.n	8010ce8 <_strtod_l+0x380>
 8010c9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010c9c:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8010ca0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010ca4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010ca8:	e699      	b.n	80109de <_strtod_l+0x76>
 8010caa:	240a      	movs	r4, #10
 8010cac:	fb04 2c0c 	mla	ip, r4, ip, r2
 8010cb0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8010cb4:	e7b9      	b.n	8010c2a <_strtod_l+0x2c2>
 8010cb6:	2a6e      	cmp	r2, #110	@ 0x6e
 8010cb8:	e7db      	b.n	8010c72 <_strtod_l+0x30a>
 8010cba:	4988      	ldr	r1, [pc, #544]	@ (8010edc <_strtod_l+0x574>)
 8010cbc:	a811      	add	r0, sp, #68	@ 0x44
 8010cbe:	f002 fbb9 	bl	8013434 <__match>
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	f43f aea7 	beq.w	8010a16 <_strtod_l+0xae>
 8010cc8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010cca:	4985      	ldr	r1, [pc, #532]	@ (8010ee0 <_strtod_l+0x578>)
 8010ccc:	3b01      	subs	r3, #1
 8010cce:	a811      	add	r0, sp, #68	@ 0x44
 8010cd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8010cd2:	f002 fbaf 	bl	8013434 <__match>
 8010cd6:	b910      	cbnz	r0, 8010cde <_strtod_l+0x376>
 8010cd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010cda:	3301      	adds	r3, #1
 8010cdc:	9311      	str	r3, [sp, #68]	@ 0x44
 8010cde:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8010ef4 <_strtod_l+0x58c>
 8010ce2:	f04f 0a00 	mov.w	sl, #0
 8010ce6:	e67a      	b.n	80109de <_strtod_l+0x76>
 8010ce8:	487e      	ldr	r0, [pc, #504]	@ (8010ee4 <_strtod_l+0x57c>)
 8010cea:	f001 fad9 	bl	80122a0 <nan>
 8010cee:	ec5b ab10 	vmov	sl, fp, d0
 8010cf2:	e674      	b.n	80109de <_strtod_l+0x76>
 8010cf4:	ee07 9a90 	vmov	s15, r9
 8010cf8:	1be2      	subs	r2, r4, r7
 8010cfa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010cfe:	2d00      	cmp	r5, #0
 8010d00:	bf08      	it	eq
 8010d02:	461d      	moveq	r5, r3
 8010d04:	2b10      	cmp	r3, #16
 8010d06:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d08:	461a      	mov	r2, r3
 8010d0a:	bfa8      	it	ge
 8010d0c:	2210      	movge	r2, #16
 8010d0e:	2b09      	cmp	r3, #9
 8010d10:	ec5b ab17 	vmov	sl, fp, d7
 8010d14:	dc15      	bgt.n	8010d42 <_strtod_l+0x3da>
 8010d16:	1be1      	subs	r1, r4, r7
 8010d18:	2900      	cmp	r1, #0
 8010d1a:	f43f ae60 	beq.w	80109de <_strtod_l+0x76>
 8010d1e:	eba4 0107 	sub.w	r1, r4, r7
 8010d22:	dd72      	ble.n	8010e0a <_strtod_l+0x4a2>
 8010d24:	2916      	cmp	r1, #22
 8010d26:	dc59      	bgt.n	8010ddc <_strtod_l+0x474>
 8010d28:	4b6f      	ldr	r3, [pc, #444]	@ (8010ee8 <_strtod_l+0x580>)
 8010d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d30:	ed93 7b00 	vldr	d7, [r3]
 8010d34:	ec4b ab16 	vmov	d6, sl, fp
 8010d38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d3c:	ec5b ab17 	vmov	sl, fp, d7
 8010d40:	e64d      	b.n	80109de <_strtod_l+0x76>
 8010d42:	4969      	ldr	r1, [pc, #420]	@ (8010ee8 <_strtod_l+0x580>)
 8010d44:	eddd 6a06 	vldr	s13, [sp, #24]
 8010d48:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010d4c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8010d50:	2b0f      	cmp	r3, #15
 8010d52:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8010d56:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010d5a:	ec5b ab16 	vmov	sl, fp, d6
 8010d5e:	ddda      	ble.n	8010d16 <_strtod_l+0x3ae>
 8010d60:	1a9a      	subs	r2, r3, r2
 8010d62:	1be1      	subs	r1, r4, r7
 8010d64:	440a      	add	r2, r1
 8010d66:	2a00      	cmp	r2, #0
 8010d68:	f340 8094 	ble.w	8010e94 <_strtod_l+0x52c>
 8010d6c:	f012 000f 	ands.w	r0, r2, #15
 8010d70:	d00a      	beq.n	8010d88 <_strtod_l+0x420>
 8010d72:	495d      	ldr	r1, [pc, #372]	@ (8010ee8 <_strtod_l+0x580>)
 8010d74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010d78:	ed91 7b00 	vldr	d7, [r1]
 8010d7c:	ec4b ab16 	vmov	d6, sl, fp
 8010d80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d84:	ec5b ab17 	vmov	sl, fp, d7
 8010d88:	f032 020f 	bics.w	r2, r2, #15
 8010d8c:	d073      	beq.n	8010e76 <_strtod_l+0x50e>
 8010d8e:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8010d92:	dd47      	ble.n	8010e24 <_strtod_l+0x4bc>
 8010d94:	2400      	movs	r4, #0
 8010d96:	4625      	mov	r5, r4
 8010d98:	9407      	str	r4, [sp, #28]
 8010d9a:	4626      	mov	r6, r4
 8010d9c:	9a05      	ldr	r2, [sp, #20]
 8010d9e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8010ef4 <_strtod_l+0x58c>
 8010da2:	2322      	movs	r3, #34	@ 0x22
 8010da4:	6013      	str	r3, [r2, #0]
 8010da6:	f04f 0a00 	mov.w	sl, #0
 8010daa:	9b07      	ldr	r3, [sp, #28]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	f43f ae16 	beq.w	80109de <_strtod_l+0x76>
 8010db2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8010db4:	9805      	ldr	r0, [sp, #20]
 8010db6:	f002 fcf5 	bl	80137a4 <_Bfree>
 8010dba:	9805      	ldr	r0, [sp, #20]
 8010dbc:	4631      	mov	r1, r6
 8010dbe:	f002 fcf1 	bl	80137a4 <_Bfree>
 8010dc2:	9805      	ldr	r0, [sp, #20]
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	f002 fced 	bl	80137a4 <_Bfree>
 8010dca:	9907      	ldr	r1, [sp, #28]
 8010dcc:	9805      	ldr	r0, [sp, #20]
 8010dce:	f002 fce9 	bl	80137a4 <_Bfree>
 8010dd2:	9805      	ldr	r0, [sp, #20]
 8010dd4:	4621      	mov	r1, r4
 8010dd6:	f002 fce5 	bl	80137a4 <_Bfree>
 8010dda:	e600      	b.n	80109de <_strtod_l+0x76>
 8010ddc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8010de0:	1be0      	subs	r0, r4, r7
 8010de2:	4281      	cmp	r1, r0
 8010de4:	dbbc      	blt.n	8010d60 <_strtod_l+0x3f8>
 8010de6:	4a40      	ldr	r2, [pc, #256]	@ (8010ee8 <_strtod_l+0x580>)
 8010de8:	f1c3 030f 	rsb	r3, r3, #15
 8010dec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8010df0:	ed91 7b00 	vldr	d7, [r1]
 8010df4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010df6:	ec4b ab16 	vmov	d6, sl, fp
 8010dfa:	1acb      	subs	r3, r1, r3
 8010dfc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e04:	ed92 6b00 	vldr	d6, [r2]
 8010e08:	e796      	b.n	8010d38 <_strtod_l+0x3d0>
 8010e0a:	3116      	adds	r1, #22
 8010e0c:	dba8      	blt.n	8010d60 <_strtod_l+0x3f8>
 8010e0e:	4b36      	ldr	r3, [pc, #216]	@ (8010ee8 <_strtod_l+0x580>)
 8010e10:	1b3c      	subs	r4, r7, r4
 8010e12:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010e16:	ed94 7b00 	vldr	d7, [r4]
 8010e1a:	ec4b ab16 	vmov	d6, sl, fp
 8010e1e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010e22:	e78b      	b.n	8010d3c <_strtod_l+0x3d4>
 8010e24:	2000      	movs	r0, #0
 8010e26:	ec4b ab17 	vmov	d7, sl, fp
 8010e2a:	4e30      	ldr	r6, [pc, #192]	@ (8010eec <_strtod_l+0x584>)
 8010e2c:	1112      	asrs	r2, r2, #4
 8010e2e:	4601      	mov	r1, r0
 8010e30:	2a01      	cmp	r2, #1
 8010e32:	dc23      	bgt.n	8010e7c <_strtod_l+0x514>
 8010e34:	b108      	cbz	r0, 8010e3a <_strtod_l+0x4d2>
 8010e36:	ec5b ab17 	vmov	sl, fp, d7
 8010e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8010eec <_strtod_l+0x584>)
 8010e3c:	482c      	ldr	r0, [pc, #176]	@ (8010ef0 <_strtod_l+0x588>)
 8010e3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010e42:	ed92 7b00 	vldr	d7, [r2]
 8010e46:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010e4a:	ec4b ab16 	vmov	d6, sl, fp
 8010e4e:	4a29      	ldr	r2, [pc, #164]	@ (8010ef4 <_strtod_l+0x58c>)
 8010e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e54:	ee17 1a90 	vmov	r1, s15
 8010e58:	400a      	ands	r2, r1
 8010e5a:	4282      	cmp	r2, r0
 8010e5c:	ec5b ab17 	vmov	sl, fp, d7
 8010e60:	d898      	bhi.n	8010d94 <_strtod_l+0x42c>
 8010e62:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8010e66:	4282      	cmp	r2, r0
 8010e68:	bf86      	itte	hi
 8010e6a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8010ef8 <_strtod_l+0x590>
 8010e6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010e72:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8010e76:	2200      	movs	r2, #0
 8010e78:	9206      	str	r2, [sp, #24]
 8010e7a:	e076      	b.n	8010f6a <_strtod_l+0x602>
 8010e7c:	f012 0f01 	tst.w	r2, #1
 8010e80:	d004      	beq.n	8010e8c <_strtod_l+0x524>
 8010e82:	ed96 6b00 	vldr	d6, [r6]
 8010e86:	2001      	movs	r0, #1
 8010e88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e8c:	3101      	adds	r1, #1
 8010e8e:	1052      	asrs	r2, r2, #1
 8010e90:	3608      	adds	r6, #8
 8010e92:	e7cd      	b.n	8010e30 <_strtod_l+0x4c8>
 8010e94:	d0ef      	beq.n	8010e76 <_strtod_l+0x50e>
 8010e96:	4252      	negs	r2, r2
 8010e98:	f012 000f 	ands.w	r0, r2, #15
 8010e9c:	d00a      	beq.n	8010eb4 <_strtod_l+0x54c>
 8010e9e:	4912      	ldr	r1, [pc, #72]	@ (8010ee8 <_strtod_l+0x580>)
 8010ea0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010ea4:	ed91 7b00 	vldr	d7, [r1]
 8010ea8:	ec4b ab16 	vmov	d6, sl, fp
 8010eac:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010eb0:	ec5b ab17 	vmov	sl, fp, d7
 8010eb4:	1112      	asrs	r2, r2, #4
 8010eb6:	d0de      	beq.n	8010e76 <_strtod_l+0x50e>
 8010eb8:	2a1f      	cmp	r2, #31
 8010eba:	dd1f      	ble.n	8010efc <_strtod_l+0x594>
 8010ebc:	2400      	movs	r4, #0
 8010ebe:	4625      	mov	r5, r4
 8010ec0:	9407      	str	r4, [sp, #28]
 8010ec2:	4626      	mov	r6, r4
 8010ec4:	9a05      	ldr	r2, [sp, #20]
 8010ec6:	2322      	movs	r3, #34	@ 0x22
 8010ec8:	f04f 0a00 	mov.w	sl, #0
 8010ecc:	f04f 0b00 	mov.w	fp, #0
 8010ed0:	6013      	str	r3, [r2, #0]
 8010ed2:	e76a      	b.n	8010daa <_strtod_l+0x442>
 8010ed4:	08014f1b 	.word	0x08014f1b
 8010ed8:	080150e0 	.word	0x080150e0
 8010edc:	08014f13 	.word	0x08014f13
 8010ee0:	08014f4d 	.word	0x08014f4d
 8010ee4:	080150dc 	.word	0x080150dc
 8010ee8:	08015168 	.word	0x08015168
 8010eec:	08015140 	.word	0x08015140
 8010ef0:	7ca00000 	.word	0x7ca00000
 8010ef4:	7ff00000 	.word	0x7ff00000
 8010ef8:	7fefffff 	.word	0x7fefffff
 8010efc:	f012 0110 	ands.w	r1, r2, #16
 8010f00:	bf18      	it	ne
 8010f02:	216a      	movne	r1, #106	@ 0x6a
 8010f04:	9106      	str	r1, [sp, #24]
 8010f06:	ec4b ab17 	vmov	d7, sl, fp
 8010f0a:	49af      	ldr	r1, [pc, #700]	@ (80111c8 <_strtod_l+0x860>)
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	07d6      	lsls	r6, r2, #31
 8010f10:	d504      	bpl.n	8010f1c <_strtod_l+0x5b4>
 8010f12:	ed91 6b00 	vldr	d6, [r1]
 8010f16:	2001      	movs	r0, #1
 8010f18:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010f1c:	1052      	asrs	r2, r2, #1
 8010f1e:	f101 0108 	add.w	r1, r1, #8
 8010f22:	d1f4      	bne.n	8010f0e <_strtod_l+0x5a6>
 8010f24:	b108      	cbz	r0, 8010f2a <_strtod_l+0x5c2>
 8010f26:	ec5b ab17 	vmov	sl, fp, d7
 8010f2a:	9a06      	ldr	r2, [sp, #24]
 8010f2c:	b1b2      	cbz	r2, 8010f5c <_strtod_l+0x5f4>
 8010f2e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8010f32:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8010f36:	2a00      	cmp	r2, #0
 8010f38:	4658      	mov	r0, fp
 8010f3a:	dd0f      	ble.n	8010f5c <_strtod_l+0x5f4>
 8010f3c:	2a1f      	cmp	r2, #31
 8010f3e:	dd55      	ble.n	8010fec <_strtod_l+0x684>
 8010f40:	2a34      	cmp	r2, #52	@ 0x34
 8010f42:	bfde      	ittt	le
 8010f44:	f04f 32ff 	movle.w	r2, #4294967295
 8010f48:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8010f4c:	408a      	lslle	r2, r1
 8010f4e:	f04f 0a00 	mov.w	sl, #0
 8010f52:	bfcc      	ite	gt
 8010f54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010f58:	ea02 0b00 	andle.w	fp, r2, r0
 8010f5c:	ec4b ab17 	vmov	d7, sl, fp
 8010f60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f68:	d0a8      	beq.n	8010ebc <_strtod_l+0x554>
 8010f6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f6c:	9805      	ldr	r0, [sp, #20]
 8010f6e:	f8cd 9000 	str.w	r9, [sp]
 8010f72:	462a      	mov	r2, r5
 8010f74:	f002 fc7e 	bl	8013874 <__s2b>
 8010f78:	9007      	str	r0, [sp, #28]
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	f43f af0a 	beq.w	8010d94 <_strtod_l+0x42c>
 8010f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f82:	1b3f      	subs	r7, r7, r4
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	bfb4      	ite	lt
 8010f88:	463b      	movlt	r3, r7
 8010f8a:	2300      	movge	r3, #0
 8010f8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f90:	ed9f bb89 	vldr	d11, [pc, #548]	@ 80111b8 <_strtod_l+0x850>
 8010f94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010f98:	2400      	movs	r4, #0
 8010f9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8010f9c:	4625      	mov	r5, r4
 8010f9e:	9b07      	ldr	r3, [sp, #28]
 8010fa0:	9805      	ldr	r0, [sp, #20]
 8010fa2:	6859      	ldr	r1, [r3, #4]
 8010fa4:	f002 fbbe 	bl	8013724 <_Balloc>
 8010fa8:	4606      	mov	r6, r0
 8010faa:	2800      	cmp	r0, #0
 8010fac:	f43f aef6 	beq.w	8010d9c <_strtod_l+0x434>
 8010fb0:	9b07      	ldr	r3, [sp, #28]
 8010fb2:	691a      	ldr	r2, [r3, #16]
 8010fb4:	ec4b ab19 	vmov	d9, sl, fp
 8010fb8:	3202      	adds	r2, #2
 8010fba:	f103 010c 	add.w	r1, r3, #12
 8010fbe:	0092      	lsls	r2, r2, #2
 8010fc0:	300c      	adds	r0, #12
 8010fc2:	f001 f95e 	bl	8012282 <memcpy>
 8010fc6:	eeb0 0b49 	vmov.f64	d0, d9
 8010fca:	9805      	ldr	r0, [sp, #20]
 8010fcc:	aa14      	add	r2, sp, #80	@ 0x50
 8010fce:	a913      	add	r1, sp, #76	@ 0x4c
 8010fd0:	f002 ff84 	bl	8013edc <__d2b>
 8010fd4:	9012      	str	r0, [sp, #72]	@ 0x48
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	f43f aee0 	beq.w	8010d9c <_strtod_l+0x434>
 8010fdc:	9805      	ldr	r0, [sp, #20]
 8010fde:	2101      	movs	r1, #1
 8010fe0:	f002 fcde 	bl	80139a0 <__i2b>
 8010fe4:	4605      	mov	r5, r0
 8010fe6:	b940      	cbnz	r0, 8010ffa <_strtod_l+0x692>
 8010fe8:	2500      	movs	r5, #0
 8010fea:	e6d7      	b.n	8010d9c <_strtod_l+0x434>
 8010fec:	f04f 31ff 	mov.w	r1, #4294967295
 8010ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8010ff4:	ea02 0a0a 	and.w	sl, r2, sl
 8010ff8:	e7b0      	b.n	8010f5c <_strtod_l+0x5f4>
 8010ffa:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8010ffc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010ffe:	2f00      	cmp	r7, #0
 8011000:	bfab      	itete	ge
 8011002:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8011004:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8011006:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 801100a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 801100e:	bfac      	ite	ge
 8011010:	eb07 0903 	addge.w	r9, r7, r3
 8011014:	eba3 0807 	sublt.w	r8, r3, r7
 8011018:	9b06      	ldr	r3, [sp, #24]
 801101a:	1aff      	subs	r7, r7, r3
 801101c:	4417      	add	r7, r2
 801101e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8011022:	4a6a      	ldr	r2, [pc, #424]	@ (80111cc <_strtod_l+0x864>)
 8011024:	3f01      	subs	r7, #1
 8011026:	4297      	cmp	r7, r2
 8011028:	da51      	bge.n	80110ce <_strtod_l+0x766>
 801102a:	1bd1      	subs	r1, r2, r7
 801102c:	291f      	cmp	r1, #31
 801102e:	eba3 0301 	sub.w	r3, r3, r1
 8011032:	f04f 0201 	mov.w	r2, #1
 8011036:	dc3e      	bgt.n	80110b6 <_strtod_l+0x74e>
 8011038:	408a      	lsls	r2, r1
 801103a:	920c      	str	r2, [sp, #48]	@ 0x30
 801103c:	2200      	movs	r2, #0
 801103e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011040:	eb09 0703 	add.w	r7, r9, r3
 8011044:	4498      	add	r8, r3
 8011046:	9b06      	ldr	r3, [sp, #24]
 8011048:	45b9      	cmp	r9, r7
 801104a:	4498      	add	r8, r3
 801104c:	464b      	mov	r3, r9
 801104e:	bfa8      	it	ge
 8011050:	463b      	movge	r3, r7
 8011052:	4543      	cmp	r3, r8
 8011054:	bfa8      	it	ge
 8011056:	4643      	movge	r3, r8
 8011058:	2b00      	cmp	r3, #0
 801105a:	bfc2      	ittt	gt
 801105c:	1aff      	subgt	r7, r7, r3
 801105e:	eba8 0803 	subgt.w	r8, r8, r3
 8011062:	eba9 0903 	subgt.w	r9, r9, r3
 8011066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011068:	2b00      	cmp	r3, #0
 801106a:	dd16      	ble.n	801109a <_strtod_l+0x732>
 801106c:	4629      	mov	r1, r5
 801106e:	9805      	ldr	r0, [sp, #20]
 8011070:	461a      	mov	r2, r3
 8011072:	f002 fd4d 	bl	8013b10 <__pow5mult>
 8011076:	4605      	mov	r5, r0
 8011078:	2800      	cmp	r0, #0
 801107a:	d0b5      	beq.n	8010fe8 <_strtod_l+0x680>
 801107c:	4601      	mov	r1, r0
 801107e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011080:	9805      	ldr	r0, [sp, #20]
 8011082:	f002 fca3 	bl	80139cc <__multiply>
 8011086:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011088:	2800      	cmp	r0, #0
 801108a:	f43f ae87 	beq.w	8010d9c <_strtod_l+0x434>
 801108e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011090:	9805      	ldr	r0, [sp, #20]
 8011092:	f002 fb87 	bl	80137a4 <_Bfree>
 8011096:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011098:	9312      	str	r3, [sp, #72]	@ 0x48
 801109a:	2f00      	cmp	r7, #0
 801109c:	dc1b      	bgt.n	80110d6 <_strtod_l+0x76e>
 801109e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	dd21      	ble.n	80110e8 <_strtod_l+0x780>
 80110a4:	4631      	mov	r1, r6
 80110a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80110a8:	9805      	ldr	r0, [sp, #20]
 80110aa:	f002 fd31 	bl	8013b10 <__pow5mult>
 80110ae:	4606      	mov	r6, r0
 80110b0:	b9d0      	cbnz	r0, 80110e8 <_strtod_l+0x780>
 80110b2:	2600      	movs	r6, #0
 80110b4:	e672      	b.n	8010d9c <_strtod_l+0x434>
 80110b6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80110ba:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80110be:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80110c2:	37e2      	adds	r7, #226	@ 0xe2
 80110c4:	fa02 f107 	lsl.w	r1, r2, r7
 80110c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80110ca:	920c      	str	r2, [sp, #48]	@ 0x30
 80110cc:	e7b8      	b.n	8011040 <_strtod_l+0x6d8>
 80110ce:	2200      	movs	r2, #0
 80110d0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80110d2:	2201      	movs	r2, #1
 80110d4:	e7f9      	b.n	80110ca <_strtod_l+0x762>
 80110d6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80110d8:	9805      	ldr	r0, [sp, #20]
 80110da:	463a      	mov	r2, r7
 80110dc:	f002 fd72 	bl	8013bc4 <__lshift>
 80110e0:	9012      	str	r0, [sp, #72]	@ 0x48
 80110e2:	2800      	cmp	r0, #0
 80110e4:	d1db      	bne.n	801109e <_strtod_l+0x736>
 80110e6:	e659      	b.n	8010d9c <_strtod_l+0x434>
 80110e8:	f1b8 0f00 	cmp.w	r8, #0
 80110ec:	dd07      	ble.n	80110fe <_strtod_l+0x796>
 80110ee:	4631      	mov	r1, r6
 80110f0:	9805      	ldr	r0, [sp, #20]
 80110f2:	4642      	mov	r2, r8
 80110f4:	f002 fd66 	bl	8013bc4 <__lshift>
 80110f8:	4606      	mov	r6, r0
 80110fa:	2800      	cmp	r0, #0
 80110fc:	d0d9      	beq.n	80110b2 <_strtod_l+0x74a>
 80110fe:	f1b9 0f00 	cmp.w	r9, #0
 8011102:	dd08      	ble.n	8011116 <_strtod_l+0x7ae>
 8011104:	4629      	mov	r1, r5
 8011106:	9805      	ldr	r0, [sp, #20]
 8011108:	464a      	mov	r2, r9
 801110a:	f002 fd5b 	bl	8013bc4 <__lshift>
 801110e:	4605      	mov	r5, r0
 8011110:	2800      	cmp	r0, #0
 8011112:	f43f ae43 	beq.w	8010d9c <_strtod_l+0x434>
 8011116:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011118:	9805      	ldr	r0, [sp, #20]
 801111a:	4632      	mov	r2, r6
 801111c:	f002 fdda 	bl	8013cd4 <__mdiff>
 8011120:	4604      	mov	r4, r0
 8011122:	2800      	cmp	r0, #0
 8011124:	f43f ae3a 	beq.w	8010d9c <_strtod_l+0x434>
 8011128:	2300      	movs	r3, #0
 801112a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801112e:	60c3      	str	r3, [r0, #12]
 8011130:	4629      	mov	r1, r5
 8011132:	f002 fdb3 	bl	8013c9c <__mcmp>
 8011136:	2800      	cmp	r0, #0
 8011138:	da4c      	bge.n	80111d4 <_strtod_l+0x86c>
 801113a:	ea58 080a 	orrs.w	r8, r8, sl
 801113e:	d172      	bne.n	8011226 <_strtod_l+0x8be>
 8011140:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011144:	2b00      	cmp	r3, #0
 8011146:	d16e      	bne.n	8011226 <_strtod_l+0x8be>
 8011148:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801114c:	0d1b      	lsrs	r3, r3, #20
 801114e:	051b      	lsls	r3, r3, #20
 8011150:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011154:	d967      	bls.n	8011226 <_strtod_l+0x8be>
 8011156:	6963      	ldr	r3, [r4, #20]
 8011158:	b913      	cbnz	r3, 8011160 <_strtod_l+0x7f8>
 801115a:	6923      	ldr	r3, [r4, #16]
 801115c:	2b01      	cmp	r3, #1
 801115e:	dd62      	ble.n	8011226 <_strtod_l+0x8be>
 8011160:	4621      	mov	r1, r4
 8011162:	2201      	movs	r2, #1
 8011164:	9805      	ldr	r0, [sp, #20]
 8011166:	f002 fd2d 	bl	8013bc4 <__lshift>
 801116a:	4629      	mov	r1, r5
 801116c:	4604      	mov	r4, r0
 801116e:	f002 fd95 	bl	8013c9c <__mcmp>
 8011172:	2800      	cmp	r0, #0
 8011174:	dd57      	ble.n	8011226 <_strtod_l+0x8be>
 8011176:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801117a:	9a06      	ldr	r2, [sp, #24]
 801117c:	0d1b      	lsrs	r3, r3, #20
 801117e:	051b      	lsls	r3, r3, #20
 8011180:	2a00      	cmp	r2, #0
 8011182:	d06e      	beq.n	8011262 <_strtod_l+0x8fa>
 8011184:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011188:	d86b      	bhi.n	8011262 <_strtod_l+0x8fa>
 801118a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801118e:	f67f ae99 	bls.w	8010ec4 <_strtod_l+0x55c>
 8011192:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80111c0 <_strtod_l+0x858>
 8011196:	ec4b ab16 	vmov	d6, sl, fp
 801119a:	4b0d      	ldr	r3, [pc, #52]	@ (80111d0 <_strtod_l+0x868>)
 801119c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80111a0:	ee17 2a90 	vmov	r2, s15
 80111a4:	4013      	ands	r3, r2
 80111a6:	ec5b ab17 	vmov	sl, fp, d7
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f47f ae01 	bne.w	8010db2 <_strtod_l+0x44a>
 80111b0:	9a05      	ldr	r2, [sp, #20]
 80111b2:	2322      	movs	r3, #34	@ 0x22
 80111b4:	6013      	str	r3, [r2, #0]
 80111b6:	e5fc      	b.n	8010db2 <_strtod_l+0x44a>
 80111b8:	ffc00000 	.word	0xffc00000
 80111bc:	41dfffff 	.word	0x41dfffff
 80111c0:	00000000 	.word	0x00000000
 80111c4:	39500000 	.word	0x39500000
 80111c8:	08015108 	.word	0x08015108
 80111cc:	fffffc02 	.word	0xfffffc02
 80111d0:	7ff00000 	.word	0x7ff00000
 80111d4:	46d9      	mov	r9, fp
 80111d6:	d15d      	bne.n	8011294 <_strtod_l+0x92c>
 80111d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111dc:	f1b8 0f00 	cmp.w	r8, #0
 80111e0:	d02a      	beq.n	8011238 <_strtod_l+0x8d0>
 80111e2:	4aa9      	ldr	r2, [pc, #676]	@ (8011488 <_strtod_l+0xb20>)
 80111e4:	4293      	cmp	r3, r2
 80111e6:	d12a      	bne.n	801123e <_strtod_l+0x8d6>
 80111e8:	9b06      	ldr	r3, [sp, #24]
 80111ea:	4652      	mov	r2, sl
 80111ec:	b1fb      	cbz	r3, 801122e <_strtod_l+0x8c6>
 80111ee:	4ba7      	ldr	r3, [pc, #668]	@ (801148c <_strtod_l+0xb24>)
 80111f0:	ea0b 0303 	and.w	r3, fp, r3
 80111f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80111f8:	f04f 31ff 	mov.w	r1, #4294967295
 80111fc:	d81a      	bhi.n	8011234 <_strtod_l+0x8cc>
 80111fe:	0d1b      	lsrs	r3, r3, #20
 8011200:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011204:	fa01 f303 	lsl.w	r3, r1, r3
 8011208:	429a      	cmp	r2, r3
 801120a:	d118      	bne.n	801123e <_strtod_l+0x8d6>
 801120c:	4ba0      	ldr	r3, [pc, #640]	@ (8011490 <_strtod_l+0xb28>)
 801120e:	4599      	cmp	r9, r3
 8011210:	d102      	bne.n	8011218 <_strtod_l+0x8b0>
 8011212:	3201      	adds	r2, #1
 8011214:	f43f adc2 	beq.w	8010d9c <_strtod_l+0x434>
 8011218:	4b9c      	ldr	r3, [pc, #624]	@ (801148c <_strtod_l+0xb24>)
 801121a:	ea09 0303 	and.w	r3, r9, r3
 801121e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8011222:	f04f 0a00 	mov.w	sl, #0
 8011226:	9b06      	ldr	r3, [sp, #24]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d1b2      	bne.n	8011192 <_strtod_l+0x82a>
 801122c:	e5c1      	b.n	8010db2 <_strtod_l+0x44a>
 801122e:	f04f 33ff 	mov.w	r3, #4294967295
 8011232:	e7e9      	b.n	8011208 <_strtod_l+0x8a0>
 8011234:	460b      	mov	r3, r1
 8011236:	e7e7      	b.n	8011208 <_strtod_l+0x8a0>
 8011238:	ea53 030a 	orrs.w	r3, r3, sl
 801123c:	d09b      	beq.n	8011176 <_strtod_l+0x80e>
 801123e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011240:	b1c3      	cbz	r3, 8011274 <_strtod_l+0x90c>
 8011242:	ea13 0f09 	tst.w	r3, r9
 8011246:	d0ee      	beq.n	8011226 <_strtod_l+0x8be>
 8011248:	9a06      	ldr	r2, [sp, #24]
 801124a:	4650      	mov	r0, sl
 801124c:	4659      	mov	r1, fp
 801124e:	f1b8 0f00 	cmp.w	r8, #0
 8011252:	d013      	beq.n	801127c <_strtod_l+0x914>
 8011254:	f7ff fb6c 	bl	8010930 <sulp>
 8011258:	ee39 7b00 	vadd.f64	d7, d9, d0
 801125c:	ec5b ab17 	vmov	sl, fp, d7
 8011260:	e7e1      	b.n	8011226 <_strtod_l+0x8be>
 8011262:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011266:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801126a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801126e:	f04f 3aff 	mov.w	sl, #4294967295
 8011272:	e7d8      	b.n	8011226 <_strtod_l+0x8be>
 8011274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011276:	ea13 0f0a 	tst.w	r3, sl
 801127a:	e7e4      	b.n	8011246 <_strtod_l+0x8de>
 801127c:	f7ff fb58 	bl	8010930 <sulp>
 8011280:	ee39 0b40 	vsub.f64	d0, d9, d0
 8011284:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128c:	ec5b ab10 	vmov	sl, fp, d0
 8011290:	d1c9      	bne.n	8011226 <_strtod_l+0x8be>
 8011292:	e617      	b.n	8010ec4 <_strtod_l+0x55c>
 8011294:	4629      	mov	r1, r5
 8011296:	4620      	mov	r0, r4
 8011298:	f002 fe78 	bl	8013f8c <__ratio>
 801129c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80112a0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80112a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a8:	d85d      	bhi.n	8011366 <_strtod_l+0x9fe>
 80112aa:	f1b8 0f00 	cmp.w	r8, #0
 80112ae:	d164      	bne.n	801137a <_strtod_l+0xa12>
 80112b0:	f1ba 0f00 	cmp.w	sl, #0
 80112b4:	d14b      	bne.n	801134e <_strtod_l+0x9e6>
 80112b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80112ba:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d160      	bne.n	8011384 <_strtod_l+0xa1c>
 80112c2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80112c6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80112ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ce:	d401      	bmi.n	80112d4 <_strtod_l+0x96c>
 80112d0:	ee20 8b08 	vmul.f64	d8, d0, d8
 80112d4:	eeb1 ab48 	vneg.f64	d10, d8
 80112d8:	486c      	ldr	r0, [pc, #432]	@ (801148c <_strtod_l+0xb24>)
 80112da:	496e      	ldr	r1, [pc, #440]	@ (8011494 <_strtod_l+0xb2c>)
 80112dc:	ea09 0700 	and.w	r7, r9, r0
 80112e0:	428f      	cmp	r7, r1
 80112e2:	ec53 2b1a 	vmov	r2, r3, d10
 80112e6:	d17d      	bne.n	80113e4 <_strtod_l+0xa7c>
 80112e8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 80112ec:	ec4b ab1c 	vmov	d12, sl, fp
 80112f0:	eeb0 0b4c 	vmov.f64	d0, d12
 80112f4:	f002 fd82 	bl	8013dfc <__ulp>
 80112f8:	4864      	ldr	r0, [pc, #400]	@ (801148c <_strtod_l+0xb24>)
 80112fa:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80112fe:	ee1c 3a90 	vmov	r3, s25
 8011302:	4a65      	ldr	r2, [pc, #404]	@ (8011498 <_strtod_l+0xb30>)
 8011304:	ea03 0100 	and.w	r1, r3, r0
 8011308:	4291      	cmp	r1, r2
 801130a:	ec5b ab1c 	vmov	sl, fp, d12
 801130e:	d93c      	bls.n	801138a <_strtod_l+0xa22>
 8011310:	ee19 2a90 	vmov	r2, s19
 8011314:	4b5e      	ldr	r3, [pc, #376]	@ (8011490 <_strtod_l+0xb28>)
 8011316:	429a      	cmp	r2, r3
 8011318:	d104      	bne.n	8011324 <_strtod_l+0x9bc>
 801131a:	ee19 3a10 	vmov	r3, s18
 801131e:	3301      	adds	r3, #1
 8011320:	f43f ad3c 	beq.w	8010d9c <_strtod_l+0x434>
 8011324:	f8df b168 	ldr.w	fp, [pc, #360]	@ 8011490 <_strtod_l+0xb28>
 8011328:	f04f 3aff 	mov.w	sl, #4294967295
 801132c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801132e:	9805      	ldr	r0, [sp, #20]
 8011330:	f002 fa38 	bl	80137a4 <_Bfree>
 8011334:	9805      	ldr	r0, [sp, #20]
 8011336:	4631      	mov	r1, r6
 8011338:	f002 fa34 	bl	80137a4 <_Bfree>
 801133c:	9805      	ldr	r0, [sp, #20]
 801133e:	4629      	mov	r1, r5
 8011340:	f002 fa30 	bl	80137a4 <_Bfree>
 8011344:	9805      	ldr	r0, [sp, #20]
 8011346:	4621      	mov	r1, r4
 8011348:	f002 fa2c 	bl	80137a4 <_Bfree>
 801134c:	e627      	b.n	8010f9e <_strtod_l+0x636>
 801134e:	f1ba 0f01 	cmp.w	sl, #1
 8011352:	d103      	bne.n	801135c <_strtod_l+0x9f4>
 8011354:	f1bb 0f00 	cmp.w	fp, #0
 8011358:	f43f adb4 	beq.w	8010ec4 <_strtod_l+0x55c>
 801135c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8011360:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8011364:	e7b8      	b.n	80112d8 <_strtod_l+0x970>
 8011366:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 801136a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801136e:	f1b8 0f00 	cmp.w	r8, #0
 8011372:	d0af      	beq.n	80112d4 <_strtod_l+0x96c>
 8011374:	eeb0 ab48 	vmov.f64	d10, d8
 8011378:	e7ae      	b.n	80112d8 <_strtod_l+0x970>
 801137a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 801137e:	eeb0 8b4a 	vmov.f64	d8, d10
 8011382:	e7a9      	b.n	80112d8 <_strtod_l+0x970>
 8011384:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8011388:	e7a6      	b.n	80112d8 <_strtod_l+0x970>
 801138a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801138e:	9b06      	ldr	r3, [sp, #24]
 8011390:	46d9      	mov	r9, fp
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1ca      	bne.n	801132c <_strtod_l+0x9c4>
 8011396:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801139a:	0d1b      	lsrs	r3, r3, #20
 801139c:	051b      	lsls	r3, r3, #20
 801139e:	429f      	cmp	r7, r3
 80113a0:	d1c4      	bne.n	801132c <_strtod_l+0x9c4>
 80113a2:	ec51 0b18 	vmov	r0, r1, d8
 80113a6:	f7ef fad5 	bl	8000954 <__aeabi_d2lz>
 80113aa:	f7ef f97f 	bl	80006ac <__aeabi_l2d>
 80113ae:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80113b2:	ec41 0b17 	vmov	d7, r0, r1
 80113b6:	ea49 090a 	orr.w	r9, r9, sl
 80113ba:	ea59 0908 	orrs.w	r9, r9, r8
 80113be:	ee38 8b47 	vsub.f64	d8, d8, d7
 80113c2:	d03c      	beq.n	801143e <_strtod_l+0xad6>
 80113c4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8011470 <_strtod_l+0xb08>
 80113c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80113cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d0:	f53f acef 	bmi.w	8010db2 <_strtod_l+0x44a>
 80113d4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8011478 <_strtod_l+0xb10>
 80113d8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80113dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e0:	dda4      	ble.n	801132c <_strtod_l+0x9c4>
 80113e2:	e4e6      	b.n	8010db2 <_strtod_l+0x44a>
 80113e4:	9906      	ldr	r1, [sp, #24]
 80113e6:	b1e1      	cbz	r1, 8011422 <_strtod_l+0xaba>
 80113e8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 80113ec:	d819      	bhi.n	8011422 <_strtod_l+0xaba>
 80113ee:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	d811      	bhi.n	801141c <_strtod_l+0xab4>
 80113f8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80113fc:	ee18 3a10 	vmov	r3, s16
 8011400:	2b01      	cmp	r3, #1
 8011402:	bf38      	it	cc
 8011404:	2301      	movcc	r3, #1
 8011406:	ee08 3a10 	vmov	s16, r3
 801140a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801140e:	f1b8 0f00 	cmp.w	r8, #0
 8011412:	d111      	bne.n	8011438 <_strtod_l+0xad0>
 8011414:	eeb1 7b48 	vneg.f64	d7, d8
 8011418:	ec53 2b17 	vmov	r2, r3, d7
 801141c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8011420:	1bcb      	subs	r3, r1, r7
 8011422:	eeb0 0b49 	vmov.f64	d0, d9
 8011426:	ec43 2b1a 	vmov	d10, r2, r3
 801142a:	f002 fce7 	bl	8013dfc <__ulp>
 801142e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8011432:	ec5b ab19 	vmov	sl, fp, d9
 8011436:	e7aa      	b.n	801138e <_strtod_l+0xa26>
 8011438:	eeb0 7b48 	vmov.f64	d7, d8
 801143c:	e7ec      	b.n	8011418 <_strtod_l+0xab0>
 801143e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8011480 <_strtod_l+0xb18>
 8011442:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801144a:	f57f af6f 	bpl.w	801132c <_strtod_l+0x9c4>
 801144e:	e4b0      	b.n	8010db2 <_strtod_l+0x44a>
 8011450:	2300      	movs	r3, #0
 8011452:	9308      	str	r3, [sp, #32]
 8011454:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011456:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011458:	6013      	str	r3, [r2, #0]
 801145a:	f7ff bac4 	b.w	80109e6 <_strtod_l+0x7e>
 801145e:	2a65      	cmp	r2, #101	@ 0x65
 8011460:	f43f abbf 	beq.w	8010be2 <_strtod_l+0x27a>
 8011464:	2a45      	cmp	r2, #69	@ 0x45
 8011466:	f43f abbc 	beq.w	8010be2 <_strtod_l+0x27a>
 801146a:	2101      	movs	r1, #1
 801146c:	f7ff bbf4 	b.w	8010c58 <_strtod_l+0x2f0>
 8011470:	94a03595 	.word	0x94a03595
 8011474:	3fdfffff 	.word	0x3fdfffff
 8011478:	35afe535 	.word	0x35afe535
 801147c:	3fe00000 	.word	0x3fe00000
 8011480:	94a03595 	.word	0x94a03595
 8011484:	3fcfffff 	.word	0x3fcfffff
 8011488:	000fffff 	.word	0x000fffff
 801148c:	7ff00000 	.word	0x7ff00000
 8011490:	7fefffff 	.word	0x7fefffff
 8011494:	7fe00000 	.word	0x7fe00000
 8011498:	7c9fffff 	.word	0x7c9fffff
 801149c:	00000000 	.word	0x00000000

080114a0 <strtof>:
 80114a0:	b510      	push	{r4, lr}
 80114a2:	4c21      	ldr	r4, [pc, #132]	@ (8011528 <strtof+0x88>)
 80114a4:	4b21      	ldr	r3, [pc, #132]	@ (801152c <strtof+0x8c>)
 80114a6:	460a      	mov	r2, r1
 80114a8:	4601      	mov	r1, r0
 80114aa:	6820      	ldr	r0, [r4, #0]
 80114ac:	f7ff fa5c 	bl	8010968 <_strtod_l>
 80114b0:	eeb4 0b40 	vcmp.f64	d0, d0
 80114b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b8:	eeb0 7b40 	vmov.f64	d7, d0
 80114bc:	d70d      	bvc.n	80114da <strtof+0x3a>
 80114be:	ee17 3a90 	vmov	r3, s15
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	481a      	ldr	r0, [pc, #104]	@ (8011530 <strtof+0x90>)
 80114c6:	da04      	bge.n	80114d2 <strtof+0x32>
 80114c8:	f000 fef2 	bl	80122b0 <nanf>
 80114cc:	eeb1 0a40 	vneg.f32	s0, s0
 80114d0:	bd10      	pop	{r4, pc}
 80114d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114d6:	f000 beeb 	b.w	80122b0 <nanf>
 80114da:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80114de:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8011534 <strtof+0x94>
 80114e2:	eeb0 6ac0 	vabs.f32	s12, s0
 80114e6:	eeb4 6a66 	vcmp.f32	s12, s13
 80114ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ee:	dd08      	ble.n	8011502 <strtof+0x62>
 80114f0:	eeb0 6bc7 	vabs.f64	d6, d7
 80114f4:	ed9f 5b0a 	vldr	d5, [pc, #40]	@ 8011520 <strtof+0x80>
 80114f8:	eeb4 6b45 	vcmp.f64	d6, d5
 80114fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011500:	dd0a      	ble.n	8011518 <strtof+0x78>
 8011502:	ee10 3a10 	vmov	r3, s0
 8011506:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801150a:	d1e1      	bne.n	80114d0 <strtof+0x30>
 801150c:	ee17 2a90 	vmov	r2, s15
 8011510:	4b09      	ldr	r3, [pc, #36]	@ (8011538 <strtof+0x98>)
 8011512:	4013      	ands	r3, r2
 8011514:	2b00      	cmp	r3, #0
 8011516:	d0db      	beq.n	80114d0 <strtof+0x30>
 8011518:	6823      	ldr	r3, [r4, #0]
 801151a:	2222      	movs	r2, #34	@ 0x22
 801151c:	601a      	str	r2, [r3, #0]
 801151e:	e7d7      	b.n	80114d0 <strtof+0x30>
 8011520:	ffffffff 	.word	0xffffffff
 8011524:	7fefffff 	.word	0x7fefffff
 8011528:	240001f8 	.word	0x240001f8
 801152c:	2400008c 	.word	0x2400008c
 8011530:	080150dc 	.word	0x080150dc
 8011534:	7f7fffff 	.word	0x7f7fffff
 8011538:	7ff00000 	.word	0x7ff00000

0801153c <__cvt>:
 801153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801153e:	ed2d 8b02 	vpush	{d8}
 8011542:	eeb0 8b40 	vmov.f64	d8, d0
 8011546:	b085      	sub	sp, #20
 8011548:	4617      	mov	r7, r2
 801154a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801154c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801154e:	ee18 2a90 	vmov	r2, s17
 8011552:	f025 0520 	bic.w	r5, r5, #32
 8011556:	2a00      	cmp	r2, #0
 8011558:	bfb6      	itet	lt
 801155a:	222d      	movlt	r2, #45	@ 0x2d
 801155c:	2200      	movge	r2, #0
 801155e:	eeb1 8b40 	vneglt.f64	d8, d0
 8011562:	2d46      	cmp	r5, #70	@ 0x46
 8011564:	460c      	mov	r4, r1
 8011566:	701a      	strb	r2, [r3, #0]
 8011568:	d004      	beq.n	8011574 <__cvt+0x38>
 801156a:	2d45      	cmp	r5, #69	@ 0x45
 801156c:	d100      	bne.n	8011570 <__cvt+0x34>
 801156e:	3401      	adds	r4, #1
 8011570:	2102      	movs	r1, #2
 8011572:	e000      	b.n	8011576 <__cvt+0x3a>
 8011574:	2103      	movs	r1, #3
 8011576:	ab03      	add	r3, sp, #12
 8011578:	9301      	str	r3, [sp, #4]
 801157a:	ab02      	add	r3, sp, #8
 801157c:	9300      	str	r3, [sp, #0]
 801157e:	4622      	mov	r2, r4
 8011580:	4633      	mov	r3, r6
 8011582:	eeb0 0b48 	vmov.f64	d0, d8
 8011586:	f000 ff23 	bl	80123d0 <_dtoa_r>
 801158a:	2d47      	cmp	r5, #71	@ 0x47
 801158c:	d114      	bne.n	80115b8 <__cvt+0x7c>
 801158e:	07fb      	lsls	r3, r7, #31
 8011590:	d50a      	bpl.n	80115a8 <__cvt+0x6c>
 8011592:	1902      	adds	r2, r0, r4
 8011594:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801159c:	bf08      	it	eq
 801159e:	9203      	streq	r2, [sp, #12]
 80115a0:	2130      	movs	r1, #48	@ 0x30
 80115a2:	9b03      	ldr	r3, [sp, #12]
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d319      	bcc.n	80115dc <__cvt+0xa0>
 80115a8:	9b03      	ldr	r3, [sp, #12]
 80115aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80115ac:	1a1b      	subs	r3, r3, r0
 80115ae:	6013      	str	r3, [r2, #0]
 80115b0:	b005      	add	sp, #20
 80115b2:	ecbd 8b02 	vpop	{d8}
 80115b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115b8:	2d46      	cmp	r5, #70	@ 0x46
 80115ba:	eb00 0204 	add.w	r2, r0, r4
 80115be:	d1e9      	bne.n	8011594 <__cvt+0x58>
 80115c0:	7803      	ldrb	r3, [r0, #0]
 80115c2:	2b30      	cmp	r3, #48	@ 0x30
 80115c4:	d107      	bne.n	80115d6 <__cvt+0x9a>
 80115c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80115ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ce:	bf1c      	itt	ne
 80115d0:	f1c4 0401 	rsbne	r4, r4, #1
 80115d4:	6034      	strne	r4, [r6, #0]
 80115d6:	6833      	ldr	r3, [r6, #0]
 80115d8:	441a      	add	r2, r3
 80115da:	e7db      	b.n	8011594 <__cvt+0x58>
 80115dc:	1c5c      	adds	r4, r3, #1
 80115de:	9403      	str	r4, [sp, #12]
 80115e0:	7019      	strb	r1, [r3, #0]
 80115e2:	e7de      	b.n	80115a2 <__cvt+0x66>

080115e4 <__exponent>:
 80115e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115e6:	2900      	cmp	r1, #0
 80115e8:	bfba      	itte	lt
 80115ea:	4249      	neglt	r1, r1
 80115ec:	232d      	movlt	r3, #45	@ 0x2d
 80115ee:	232b      	movge	r3, #43	@ 0x2b
 80115f0:	2909      	cmp	r1, #9
 80115f2:	7002      	strb	r2, [r0, #0]
 80115f4:	7043      	strb	r3, [r0, #1]
 80115f6:	dd29      	ble.n	801164c <__exponent+0x68>
 80115f8:	f10d 0307 	add.w	r3, sp, #7
 80115fc:	461d      	mov	r5, r3
 80115fe:	270a      	movs	r7, #10
 8011600:	461a      	mov	r2, r3
 8011602:	fbb1 f6f7 	udiv	r6, r1, r7
 8011606:	fb07 1416 	mls	r4, r7, r6, r1
 801160a:	3430      	adds	r4, #48	@ 0x30
 801160c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011610:	460c      	mov	r4, r1
 8011612:	2c63      	cmp	r4, #99	@ 0x63
 8011614:	f103 33ff 	add.w	r3, r3, #4294967295
 8011618:	4631      	mov	r1, r6
 801161a:	dcf1      	bgt.n	8011600 <__exponent+0x1c>
 801161c:	3130      	adds	r1, #48	@ 0x30
 801161e:	1e94      	subs	r4, r2, #2
 8011620:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011624:	1c41      	adds	r1, r0, #1
 8011626:	4623      	mov	r3, r4
 8011628:	42ab      	cmp	r3, r5
 801162a:	d30a      	bcc.n	8011642 <__exponent+0x5e>
 801162c:	f10d 0309 	add.w	r3, sp, #9
 8011630:	1a9b      	subs	r3, r3, r2
 8011632:	42ac      	cmp	r4, r5
 8011634:	bf88      	it	hi
 8011636:	2300      	movhi	r3, #0
 8011638:	3302      	adds	r3, #2
 801163a:	4403      	add	r3, r0
 801163c:	1a18      	subs	r0, r3, r0
 801163e:	b003      	add	sp, #12
 8011640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011642:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011646:	f801 6f01 	strb.w	r6, [r1, #1]!
 801164a:	e7ed      	b.n	8011628 <__exponent+0x44>
 801164c:	2330      	movs	r3, #48	@ 0x30
 801164e:	3130      	adds	r1, #48	@ 0x30
 8011650:	7083      	strb	r3, [r0, #2]
 8011652:	70c1      	strb	r1, [r0, #3]
 8011654:	1d03      	adds	r3, r0, #4
 8011656:	e7f1      	b.n	801163c <__exponent+0x58>

08011658 <_printf_float>:
 8011658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165c:	b08d      	sub	sp, #52	@ 0x34
 801165e:	460c      	mov	r4, r1
 8011660:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011664:	4616      	mov	r6, r2
 8011666:	461f      	mov	r7, r3
 8011668:	4605      	mov	r5, r0
 801166a:	f000 fd35 	bl	80120d8 <_localeconv_r>
 801166e:	f8d0 b000 	ldr.w	fp, [r0]
 8011672:	4658      	mov	r0, fp
 8011674:	f7ee fe84 	bl	8000380 <strlen>
 8011678:	2300      	movs	r3, #0
 801167a:	930a      	str	r3, [sp, #40]	@ 0x28
 801167c:	f8d8 3000 	ldr.w	r3, [r8]
 8011680:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011684:	6822      	ldr	r2, [r4, #0]
 8011686:	9005      	str	r0, [sp, #20]
 8011688:	3307      	adds	r3, #7
 801168a:	f023 0307 	bic.w	r3, r3, #7
 801168e:	f103 0108 	add.w	r1, r3, #8
 8011692:	f8c8 1000 	str.w	r1, [r8]
 8011696:	ed93 0b00 	vldr	d0, [r3]
 801169a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80118f8 <_printf_float+0x2a0>
 801169e:	eeb0 7bc0 	vabs.f64	d7, d0
 80116a2:	eeb4 7b46 	vcmp.f64	d7, d6
 80116a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116aa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80116ae:	dd24      	ble.n	80116fa <_printf_float+0xa2>
 80116b0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80116b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b8:	d502      	bpl.n	80116c0 <_printf_float+0x68>
 80116ba:	232d      	movs	r3, #45	@ 0x2d
 80116bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116c0:	498f      	ldr	r1, [pc, #572]	@ (8011900 <_printf_float+0x2a8>)
 80116c2:	4b90      	ldr	r3, [pc, #576]	@ (8011904 <_printf_float+0x2ac>)
 80116c4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80116c8:	bf8c      	ite	hi
 80116ca:	4688      	movhi	r8, r1
 80116cc:	4698      	movls	r8, r3
 80116ce:	f022 0204 	bic.w	r2, r2, #4
 80116d2:	2303      	movs	r3, #3
 80116d4:	6123      	str	r3, [r4, #16]
 80116d6:	6022      	str	r2, [r4, #0]
 80116d8:	f04f 0a00 	mov.w	sl, #0
 80116dc:	9700      	str	r7, [sp, #0]
 80116de:	4633      	mov	r3, r6
 80116e0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80116e2:	4621      	mov	r1, r4
 80116e4:	4628      	mov	r0, r5
 80116e6:	f000 f9d1 	bl	8011a8c <_printf_common>
 80116ea:	3001      	adds	r0, #1
 80116ec:	f040 8089 	bne.w	8011802 <_printf_float+0x1aa>
 80116f0:	f04f 30ff 	mov.w	r0, #4294967295
 80116f4:	b00d      	add	sp, #52	@ 0x34
 80116f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116fa:	eeb4 0b40 	vcmp.f64	d0, d0
 80116fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011702:	d709      	bvc.n	8011718 <_printf_float+0xc0>
 8011704:	ee10 3a90 	vmov	r3, s1
 8011708:	2b00      	cmp	r3, #0
 801170a:	bfbc      	itt	lt
 801170c:	232d      	movlt	r3, #45	@ 0x2d
 801170e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011712:	497d      	ldr	r1, [pc, #500]	@ (8011908 <_printf_float+0x2b0>)
 8011714:	4b7d      	ldr	r3, [pc, #500]	@ (801190c <_printf_float+0x2b4>)
 8011716:	e7d5      	b.n	80116c4 <_printf_float+0x6c>
 8011718:	6863      	ldr	r3, [r4, #4]
 801171a:	1c59      	adds	r1, r3, #1
 801171c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011720:	d139      	bne.n	8011796 <_printf_float+0x13e>
 8011722:	2306      	movs	r3, #6
 8011724:	6063      	str	r3, [r4, #4]
 8011726:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801172a:	2300      	movs	r3, #0
 801172c:	6022      	str	r2, [r4, #0]
 801172e:	9303      	str	r3, [sp, #12]
 8011730:	ab0a      	add	r3, sp, #40	@ 0x28
 8011732:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011736:	ab09      	add	r3, sp, #36	@ 0x24
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	6861      	ldr	r1, [r4, #4]
 801173c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011740:	4628      	mov	r0, r5
 8011742:	f7ff fefb 	bl	801153c <__cvt>
 8011746:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801174a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801174c:	4680      	mov	r8, r0
 801174e:	d129      	bne.n	80117a4 <_printf_float+0x14c>
 8011750:	1cc8      	adds	r0, r1, #3
 8011752:	db02      	blt.n	801175a <_printf_float+0x102>
 8011754:	6863      	ldr	r3, [r4, #4]
 8011756:	4299      	cmp	r1, r3
 8011758:	dd41      	ble.n	80117de <_printf_float+0x186>
 801175a:	f1a9 0902 	sub.w	r9, r9, #2
 801175e:	fa5f f989 	uxtb.w	r9, r9
 8011762:	3901      	subs	r1, #1
 8011764:	464a      	mov	r2, r9
 8011766:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801176a:	9109      	str	r1, [sp, #36]	@ 0x24
 801176c:	f7ff ff3a 	bl	80115e4 <__exponent>
 8011770:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011772:	1813      	adds	r3, r2, r0
 8011774:	2a01      	cmp	r2, #1
 8011776:	4682      	mov	sl, r0
 8011778:	6123      	str	r3, [r4, #16]
 801177a:	dc02      	bgt.n	8011782 <_printf_float+0x12a>
 801177c:	6822      	ldr	r2, [r4, #0]
 801177e:	07d2      	lsls	r2, r2, #31
 8011780:	d501      	bpl.n	8011786 <_printf_float+0x12e>
 8011782:	3301      	adds	r3, #1
 8011784:	6123      	str	r3, [r4, #16]
 8011786:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801178a:	2b00      	cmp	r3, #0
 801178c:	d0a6      	beq.n	80116dc <_printf_float+0x84>
 801178e:	232d      	movs	r3, #45	@ 0x2d
 8011790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011794:	e7a2      	b.n	80116dc <_printf_float+0x84>
 8011796:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801179a:	d1c4      	bne.n	8011726 <_printf_float+0xce>
 801179c:	2b00      	cmp	r3, #0
 801179e:	d1c2      	bne.n	8011726 <_printf_float+0xce>
 80117a0:	2301      	movs	r3, #1
 80117a2:	e7bf      	b.n	8011724 <_printf_float+0xcc>
 80117a4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80117a8:	d9db      	bls.n	8011762 <_printf_float+0x10a>
 80117aa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80117ae:	d118      	bne.n	80117e2 <_printf_float+0x18a>
 80117b0:	2900      	cmp	r1, #0
 80117b2:	6863      	ldr	r3, [r4, #4]
 80117b4:	dd0b      	ble.n	80117ce <_printf_float+0x176>
 80117b6:	6121      	str	r1, [r4, #16]
 80117b8:	b913      	cbnz	r3, 80117c0 <_printf_float+0x168>
 80117ba:	6822      	ldr	r2, [r4, #0]
 80117bc:	07d0      	lsls	r0, r2, #31
 80117be:	d502      	bpl.n	80117c6 <_printf_float+0x16e>
 80117c0:	3301      	adds	r3, #1
 80117c2:	440b      	add	r3, r1
 80117c4:	6123      	str	r3, [r4, #16]
 80117c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80117c8:	f04f 0a00 	mov.w	sl, #0
 80117cc:	e7db      	b.n	8011786 <_printf_float+0x12e>
 80117ce:	b913      	cbnz	r3, 80117d6 <_printf_float+0x17e>
 80117d0:	6822      	ldr	r2, [r4, #0]
 80117d2:	07d2      	lsls	r2, r2, #31
 80117d4:	d501      	bpl.n	80117da <_printf_float+0x182>
 80117d6:	3302      	adds	r3, #2
 80117d8:	e7f4      	b.n	80117c4 <_printf_float+0x16c>
 80117da:	2301      	movs	r3, #1
 80117dc:	e7f2      	b.n	80117c4 <_printf_float+0x16c>
 80117de:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80117e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117e4:	4299      	cmp	r1, r3
 80117e6:	db05      	blt.n	80117f4 <_printf_float+0x19c>
 80117e8:	6823      	ldr	r3, [r4, #0]
 80117ea:	6121      	str	r1, [r4, #16]
 80117ec:	07d8      	lsls	r0, r3, #31
 80117ee:	d5ea      	bpl.n	80117c6 <_printf_float+0x16e>
 80117f0:	1c4b      	adds	r3, r1, #1
 80117f2:	e7e7      	b.n	80117c4 <_printf_float+0x16c>
 80117f4:	2900      	cmp	r1, #0
 80117f6:	bfd4      	ite	le
 80117f8:	f1c1 0202 	rsble	r2, r1, #2
 80117fc:	2201      	movgt	r2, #1
 80117fe:	4413      	add	r3, r2
 8011800:	e7e0      	b.n	80117c4 <_printf_float+0x16c>
 8011802:	6823      	ldr	r3, [r4, #0]
 8011804:	055a      	lsls	r2, r3, #21
 8011806:	d407      	bmi.n	8011818 <_printf_float+0x1c0>
 8011808:	6923      	ldr	r3, [r4, #16]
 801180a:	4642      	mov	r2, r8
 801180c:	4631      	mov	r1, r6
 801180e:	4628      	mov	r0, r5
 8011810:	47b8      	blx	r7
 8011812:	3001      	adds	r0, #1
 8011814:	d12a      	bne.n	801186c <_printf_float+0x214>
 8011816:	e76b      	b.n	80116f0 <_printf_float+0x98>
 8011818:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801181c:	f240 80e0 	bls.w	80119e0 <_printf_float+0x388>
 8011820:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011824:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182c:	d133      	bne.n	8011896 <_printf_float+0x23e>
 801182e:	4a38      	ldr	r2, [pc, #224]	@ (8011910 <_printf_float+0x2b8>)
 8011830:	2301      	movs	r3, #1
 8011832:	4631      	mov	r1, r6
 8011834:	4628      	mov	r0, r5
 8011836:	47b8      	blx	r7
 8011838:	3001      	adds	r0, #1
 801183a:	f43f af59 	beq.w	80116f0 <_printf_float+0x98>
 801183e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011842:	4543      	cmp	r3, r8
 8011844:	db02      	blt.n	801184c <_printf_float+0x1f4>
 8011846:	6823      	ldr	r3, [r4, #0]
 8011848:	07d8      	lsls	r0, r3, #31
 801184a:	d50f      	bpl.n	801186c <_printf_float+0x214>
 801184c:	9b05      	ldr	r3, [sp, #20]
 801184e:	465a      	mov	r2, fp
 8011850:	4631      	mov	r1, r6
 8011852:	4628      	mov	r0, r5
 8011854:	47b8      	blx	r7
 8011856:	3001      	adds	r0, #1
 8011858:	f43f af4a 	beq.w	80116f0 <_printf_float+0x98>
 801185c:	f04f 0900 	mov.w	r9, #0
 8011860:	f108 38ff 	add.w	r8, r8, #4294967295
 8011864:	f104 0a1a 	add.w	sl, r4, #26
 8011868:	45c8      	cmp	r8, r9
 801186a:	dc09      	bgt.n	8011880 <_printf_float+0x228>
 801186c:	6823      	ldr	r3, [r4, #0]
 801186e:	079b      	lsls	r3, r3, #30
 8011870:	f100 8107 	bmi.w	8011a82 <_printf_float+0x42a>
 8011874:	68e0      	ldr	r0, [r4, #12]
 8011876:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011878:	4298      	cmp	r0, r3
 801187a:	bfb8      	it	lt
 801187c:	4618      	movlt	r0, r3
 801187e:	e739      	b.n	80116f4 <_printf_float+0x9c>
 8011880:	2301      	movs	r3, #1
 8011882:	4652      	mov	r2, sl
 8011884:	4631      	mov	r1, r6
 8011886:	4628      	mov	r0, r5
 8011888:	47b8      	blx	r7
 801188a:	3001      	adds	r0, #1
 801188c:	f43f af30 	beq.w	80116f0 <_printf_float+0x98>
 8011890:	f109 0901 	add.w	r9, r9, #1
 8011894:	e7e8      	b.n	8011868 <_printf_float+0x210>
 8011896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011898:	2b00      	cmp	r3, #0
 801189a:	dc3b      	bgt.n	8011914 <_printf_float+0x2bc>
 801189c:	4a1c      	ldr	r2, [pc, #112]	@ (8011910 <_printf_float+0x2b8>)
 801189e:	2301      	movs	r3, #1
 80118a0:	4631      	mov	r1, r6
 80118a2:	4628      	mov	r0, r5
 80118a4:	47b8      	blx	r7
 80118a6:	3001      	adds	r0, #1
 80118a8:	f43f af22 	beq.w	80116f0 <_printf_float+0x98>
 80118ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80118b0:	ea59 0303 	orrs.w	r3, r9, r3
 80118b4:	d102      	bne.n	80118bc <_printf_float+0x264>
 80118b6:	6823      	ldr	r3, [r4, #0]
 80118b8:	07d9      	lsls	r1, r3, #31
 80118ba:	d5d7      	bpl.n	801186c <_printf_float+0x214>
 80118bc:	9b05      	ldr	r3, [sp, #20]
 80118be:	465a      	mov	r2, fp
 80118c0:	4631      	mov	r1, r6
 80118c2:	4628      	mov	r0, r5
 80118c4:	47b8      	blx	r7
 80118c6:	3001      	adds	r0, #1
 80118c8:	f43f af12 	beq.w	80116f0 <_printf_float+0x98>
 80118cc:	f04f 0a00 	mov.w	sl, #0
 80118d0:	f104 0b1a 	add.w	fp, r4, #26
 80118d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118d6:	425b      	negs	r3, r3
 80118d8:	4553      	cmp	r3, sl
 80118da:	dc01      	bgt.n	80118e0 <_printf_float+0x288>
 80118dc:	464b      	mov	r3, r9
 80118de:	e794      	b.n	801180a <_printf_float+0x1b2>
 80118e0:	2301      	movs	r3, #1
 80118e2:	465a      	mov	r2, fp
 80118e4:	4631      	mov	r1, r6
 80118e6:	4628      	mov	r0, r5
 80118e8:	47b8      	blx	r7
 80118ea:	3001      	adds	r0, #1
 80118ec:	f43f af00 	beq.w	80116f0 <_printf_float+0x98>
 80118f0:	f10a 0a01 	add.w	sl, sl, #1
 80118f4:	e7ee      	b.n	80118d4 <_printf_float+0x27c>
 80118f6:	bf00      	nop
 80118f8:	ffffffff 	.word	0xffffffff
 80118fc:	7fefffff 	.word	0x7fefffff
 8011900:	08014f12 	.word	0x08014f12
 8011904:	08014f0e 	.word	0x08014f0e
 8011908:	08014f1a 	.word	0x08014f1a
 801190c:	08014f16 	.word	0x08014f16
 8011910:	08014f1e 	.word	0x08014f1e
 8011914:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011916:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801191a:	4553      	cmp	r3, sl
 801191c:	bfa8      	it	ge
 801191e:	4653      	movge	r3, sl
 8011920:	2b00      	cmp	r3, #0
 8011922:	4699      	mov	r9, r3
 8011924:	dc37      	bgt.n	8011996 <_printf_float+0x33e>
 8011926:	2300      	movs	r3, #0
 8011928:	9307      	str	r3, [sp, #28]
 801192a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801192e:	f104 021a 	add.w	r2, r4, #26
 8011932:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011934:	9907      	ldr	r1, [sp, #28]
 8011936:	9306      	str	r3, [sp, #24]
 8011938:	eba3 0309 	sub.w	r3, r3, r9
 801193c:	428b      	cmp	r3, r1
 801193e:	dc31      	bgt.n	80119a4 <_printf_float+0x34c>
 8011940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011942:	459a      	cmp	sl, r3
 8011944:	dc3b      	bgt.n	80119be <_printf_float+0x366>
 8011946:	6823      	ldr	r3, [r4, #0]
 8011948:	07da      	lsls	r2, r3, #31
 801194a:	d438      	bmi.n	80119be <_printf_float+0x366>
 801194c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801194e:	ebaa 0903 	sub.w	r9, sl, r3
 8011952:	9b06      	ldr	r3, [sp, #24]
 8011954:	ebaa 0303 	sub.w	r3, sl, r3
 8011958:	4599      	cmp	r9, r3
 801195a:	bfa8      	it	ge
 801195c:	4699      	movge	r9, r3
 801195e:	f1b9 0f00 	cmp.w	r9, #0
 8011962:	dc34      	bgt.n	80119ce <_printf_float+0x376>
 8011964:	f04f 0800 	mov.w	r8, #0
 8011968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801196c:	f104 0b1a 	add.w	fp, r4, #26
 8011970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011972:	ebaa 0303 	sub.w	r3, sl, r3
 8011976:	eba3 0309 	sub.w	r3, r3, r9
 801197a:	4543      	cmp	r3, r8
 801197c:	f77f af76 	ble.w	801186c <_printf_float+0x214>
 8011980:	2301      	movs	r3, #1
 8011982:	465a      	mov	r2, fp
 8011984:	4631      	mov	r1, r6
 8011986:	4628      	mov	r0, r5
 8011988:	47b8      	blx	r7
 801198a:	3001      	adds	r0, #1
 801198c:	f43f aeb0 	beq.w	80116f0 <_printf_float+0x98>
 8011990:	f108 0801 	add.w	r8, r8, #1
 8011994:	e7ec      	b.n	8011970 <_printf_float+0x318>
 8011996:	4642      	mov	r2, r8
 8011998:	4631      	mov	r1, r6
 801199a:	4628      	mov	r0, r5
 801199c:	47b8      	blx	r7
 801199e:	3001      	adds	r0, #1
 80119a0:	d1c1      	bne.n	8011926 <_printf_float+0x2ce>
 80119a2:	e6a5      	b.n	80116f0 <_printf_float+0x98>
 80119a4:	2301      	movs	r3, #1
 80119a6:	4631      	mov	r1, r6
 80119a8:	4628      	mov	r0, r5
 80119aa:	9206      	str	r2, [sp, #24]
 80119ac:	47b8      	blx	r7
 80119ae:	3001      	adds	r0, #1
 80119b0:	f43f ae9e 	beq.w	80116f0 <_printf_float+0x98>
 80119b4:	9b07      	ldr	r3, [sp, #28]
 80119b6:	9a06      	ldr	r2, [sp, #24]
 80119b8:	3301      	adds	r3, #1
 80119ba:	9307      	str	r3, [sp, #28]
 80119bc:	e7b9      	b.n	8011932 <_printf_float+0x2da>
 80119be:	9b05      	ldr	r3, [sp, #20]
 80119c0:	465a      	mov	r2, fp
 80119c2:	4631      	mov	r1, r6
 80119c4:	4628      	mov	r0, r5
 80119c6:	47b8      	blx	r7
 80119c8:	3001      	adds	r0, #1
 80119ca:	d1bf      	bne.n	801194c <_printf_float+0x2f4>
 80119cc:	e690      	b.n	80116f0 <_printf_float+0x98>
 80119ce:	9a06      	ldr	r2, [sp, #24]
 80119d0:	464b      	mov	r3, r9
 80119d2:	4442      	add	r2, r8
 80119d4:	4631      	mov	r1, r6
 80119d6:	4628      	mov	r0, r5
 80119d8:	47b8      	blx	r7
 80119da:	3001      	adds	r0, #1
 80119dc:	d1c2      	bne.n	8011964 <_printf_float+0x30c>
 80119de:	e687      	b.n	80116f0 <_printf_float+0x98>
 80119e0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80119e4:	f1b9 0f01 	cmp.w	r9, #1
 80119e8:	dc01      	bgt.n	80119ee <_printf_float+0x396>
 80119ea:	07db      	lsls	r3, r3, #31
 80119ec:	d536      	bpl.n	8011a5c <_printf_float+0x404>
 80119ee:	2301      	movs	r3, #1
 80119f0:	4642      	mov	r2, r8
 80119f2:	4631      	mov	r1, r6
 80119f4:	4628      	mov	r0, r5
 80119f6:	47b8      	blx	r7
 80119f8:	3001      	adds	r0, #1
 80119fa:	f43f ae79 	beq.w	80116f0 <_printf_float+0x98>
 80119fe:	9b05      	ldr	r3, [sp, #20]
 8011a00:	465a      	mov	r2, fp
 8011a02:	4631      	mov	r1, r6
 8011a04:	4628      	mov	r0, r5
 8011a06:	47b8      	blx	r7
 8011a08:	3001      	adds	r0, #1
 8011a0a:	f43f ae71 	beq.w	80116f0 <_printf_float+0x98>
 8011a0e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011a12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a1a:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a1e:	d018      	beq.n	8011a52 <_printf_float+0x3fa>
 8011a20:	464b      	mov	r3, r9
 8011a22:	f108 0201 	add.w	r2, r8, #1
 8011a26:	4631      	mov	r1, r6
 8011a28:	4628      	mov	r0, r5
 8011a2a:	47b8      	blx	r7
 8011a2c:	3001      	adds	r0, #1
 8011a2e:	d10c      	bne.n	8011a4a <_printf_float+0x3f2>
 8011a30:	e65e      	b.n	80116f0 <_printf_float+0x98>
 8011a32:	2301      	movs	r3, #1
 8011a34:	465a      	mov	r2, fp
 8011a36:	4631      	mov	r1, r6
 8011a38:	4628      	mov	r0, r5
 8011a3a:	47b8      	blx	r7
 8011a3c:	3001      	adds	r0, #1
 8011a3e:	f43f ae57 	beq.w	80116f0 <_printf_float+0x98>
 8011a42:	f108 0801 	add.w	r8, r8, #1
 8011a46:	45c8      	cmp	r8, r9
 8011a48:	dbf3      	blt.n	8011a32 <_printf_float+0x3da>
 8011a4a:	4653      	mov	r3, sl
 8011a4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011a50:	e6dc      	b.n	801180c <_printf_float+0x1b4>
 8011a52:	f04f 0800 	mov.w	r8, #0
 8011a56:	f104 0b1a 	add.w	fp, r4, #26
 8011a5a:	e7f4      	b.n	8011a46 <_printf_float+0x3ee>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	4642      	mov	r2, r8
 8011a60:	e7e1      	b.n	8011a26 <_printf_float+0x3ce>
 8011a62:	2301      	movs	r3, #1
 8011a64:	464a      	mov	r2, r9
 8011a66:	4631      	mov	r1, r6
 8011a68:	4628      	mov	r0, r5
 8011a6a:	47b8      	blx	r7
 8011a6c:	3001      	adds	r0, #1
 8011a6e:	f43f ae3f 	beq.w	80116f0 <_printf_float+0x98>
 8011a72:	f108 0801 	add.w	r8, r8, #1
 8011a76:	68e3      	ldr	r3, [r4, #12]
 8011a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011a7a:	1a5b      	subs	r3, r3, r1
 8011a7c:	4543      	cmp	r3, r8
 8011a7e:	dcf0      	bgt.n	8011a62 <_printf_float+0x40a>
 8011a80:	e6f8      	b.n	8011874 <_printf_float+0x21c>
 8011a82:	f04f 0800 	mov.w	r8, #0
 8011a86:	f104 0919 	add.w	r9, r4, #25
 8011a8a:	e7f4      	b.n	8011a76 <_printf_float+0x41e>

08011a8c <_printf_common>:
 8011a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a90:	4616      	mov	r6, r2
 8011a92:	4698      	mov	r8, r3
 8011a94:	688a      	ldr	r2, [r1, #8]
 8011a96:	690b      	ldr	r3, [r1, #16]
 8011a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	bfb8      	it	lt
 8011aa0:	4613      	movlt	r3, r2
 8011aa2:	6033      	str	r3, [r6, #0]
 8011aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011aa8:	4607      	mov	r7, r0
 8011aaa:	460c      	mov	r4, r1
 8011aac:	b10a      	cbz	r2, 8011ab2 <_printf_common+0x26>
 8011aae:	3301      	adds	r3, #1
 8011ab0:	6033      	str	r3, [r6, #0]
 8011ab2:	6823      	ldr	r3, [r4, #0]
 8011ab4:	0699      	lsls	r1, r3, #26
 8011ab6:	bf42      	ittt	mi
 8011ab8:	6833      	ldrmi	r3, [r6, #0]
 8011aba:	3302      	addmi	r3, #2
 8011abc:	6033      	strmi	r3, [r6, #0]
 8011abe:	6825      	ldr	r5, [r4, #0]
 8011ac0:	f015 0506 	ands.w	r5, r5, #6
 8011ac4:	d106      	bne.n	8011ad4 <_printf_common+0x48>
 8011ac6:	f104 0a19 	add.w	sl, r4, #25
 8011aca:	68e3      	ldr	r3, [r4, #12]
 8011acc:	6832      	ldr	r2, [r6, #0]
 8011ace:	1a9b      	subs	r3, r3, r2
 8011ad0:	42ab      	cmp	r3, r5
 8011ad2:	dc26      	bgt.n	8011b22 <_printf_common+0x96>
 8011ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011ad8:	6822      	ldr	r2, [r4, #0]
 8011ada:	3b00      	subs	r3, #0
 8011adc:	bf18      	it	ne
 8011ade:	2301      	movne	r3, #1
 8011ae0:	0692      	lsls	r2, r2, #26
 8011ae2:	d42b      	bmi.n	8011b3c <_printf_common+0xb0>
 8011ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011ae8:	4641      	mov	r1, r8
 8011aea:	4638      	mov	r0, r7
 8011aec:	47c8      	blx	r9
 8011aee:	3001      	adds	r0, #1
 8011af0:	d01e      	beq.n	8011b30 <_printf_common+0xa4>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	6922      	ldr	r2, [r4, #16]
 8011af6:	f003 0306 	and.w	r3, r3, #6
 8011afa:	2b04      	cmp	r3, #4
 8011afc:	bf02      	ittt	eq
 8011afe:	68e5      	ldreq	r5, [r4, #12]
 8011b00:	6833      	ldreq	r3, [r6, #0]
 8011b02:	1aed      	subeq	r5, r5, r3
 8011b04:	68a3      	ldr	r3, [r4, #8]
 8011b06:	bf0c      	ite	eq
 8011b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b0c:	2500      	movne	r5, #0
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	bfc4      	itt	gt
 8011b12:	1a9b      	subgt	r3, r3, r2
 8011b14:	18ed      	addgt	r5, r5, r3
 8011b16:	2600      	movs	r6, #0
 8011b18:	341a      	adds	r4, #26
 8011b1a:	42b5      	cmp	r5, r6
 8011b1c:	d11a      	bne.n	8011b54 <_printf_common+0xc8>
 8011b1e:	2000      	movs	r0, #0
 8011b20:	e008      	b.n	8011b34 <_printf_common+0xa8>
 8011b22:	2301      	movs	r3, #1
 8011b24:	4652      	mov	r2, sl
 8011b26:	4641      	mov	r1, r8
 8011b28:	4638      	mov	r0, r7
 8011b2a:	47c8      	blx	r9
 8011b2c:	3001      	adds	r0, #1
 8011b2e:	d103      	bne.n	8011b38 <_printf_common+0xac>
 8011b30:	f04f 30ff 	mov.w	r0, #4294967295
 8011b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b38:	3501      	adds	r5, #1
 8011b3a:	e7c6      	b.n	8011aca <_printf_common+0x3e>
 8011b3c:	18e1      	adds	r1, r4, r3
 8011b3e:	1c5a      	adds	r2, r3, #1
 8011b40:	2030      	movs	r0, #48	@ 0x30
 8011b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011b46:	4422      	add	r2, r4
 8011b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011b50:	3302      	adds	r3, #2
 8011b52:	e7c7      	b.n	8011ae4 <_printf_common+0x58>
 8011b54:	2301      	movs	r3, #1
 8011b56:	4622      	mov	r2, r4
 8011b58:	4641      	mov	r1, r8
 8011b5a:	4638      	mov	r0, r7
 8011b5c:	47c8      	blx	r9
 8011b5e:	3001      	adds	r0, #1
 8011b60:	d0e6      	beq.n	8011b30 <_printf_common+0xa4>
 8011b62:	3601      	adds	r6, #1
 8011b64:	e7d9      	b.n	8011b1a <_printf_common+0x8e>
	...

08011b68 <_printf_i>:
 8011b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b6c:	7e0f      	ldrb	r7, [r1, #24]
 8011b6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011b70:	2f78      	cmp	r7, #120	@ 0x78
 8011b72:	4691      	mov	r9, r2
 8011b74:	4680      	mov	r8, r0
 8011b76:	460c      	mov	r4, r1
 8011b78:	469a      	mov	sl, r3
 8011b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011b7e:	d807      	bhi.n	8011b90 <_printf_i+0x28>
 8011b80:	2f62      	cmp	r7, #98	@ 0x62
 8011b82:	d80a      	bhi.n	8011b9a <_printf_i+0x32>
 8011b84:	2f00      	cmp	r7, #0
 8011b86:	f000 80d1 	beq.w	8011d2c <_printf_i+0x1c4>
 8011b8a:	2f58      	cmp	r7, #88	@ 0x58
 8011b8c:	f000 80b8 	beq.w	8011d00 <_printf_i+0x198>
 8011b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011b98:	e03a      	b.n	8011c10 <_printf_i+0xa8>
 8011b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011b9e:	2b15      	cmp	r3, #21
 8011ba0:	d8f6      	bhi.n	8011b90 <_printf_i+0x28>
 8011ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8011ba8 <_printf_i+0x40>)
 8011ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ba8:	08011c01 	.word	0x08011c01
 8011bac:	08011c15 	.word	0x08011c15
 8011bb0:	08011b91 	.word	0x08011b91
 8011bb4:	08011b91 	.word	0x08011b91
 8011bb8:	08011b91 	.word	0x08011b91
 8011bbc:	08011b91 	.word	0x08011b91
 8011bc0:	08011c15 	.word	0x08011c15
 8011bc4:	08011b91 	.word	0x08011b91
 8011bc8:	08011b91 	.word	0x08011b91
 8011bcc:	08011b91 	.word	0x08011b91
 8011bd0:	08011b91 	.word	0x08011b91
 8011bd4:	08011d13 	.word	0x08011d13
 8011bd8:	08011c3f 	.word	0x08011c3f
 8011bdc:	08011ccd 	.word	0x08011ccd
 8011be0:	08011b91 	.word	0x08011b91
 8011be4:	08011b91 	.word	0x08011b91
 8011be8:	08011d35 	.word	0x08011d35
 8011bec:	08011b91 	.word	0x08011b91
 8011bf0:	08011c3f 	.word	0x08011c3f
 8011bf4:	08011b91 	.word	0x08011b91
 8011bf8:	08011b91 	.word	0x08011b91
 8011bfc:	08011cd5 	.word	0x08011cd5
 8011c00:	6833      	ldr	r3, [r6, #0]
 8011c02:	1d1a      	adds	r2, r3, #4
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	6032      	str	r2, [r6, #0]
 8011c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011c10:	2301      	movs	r3, #1
 8011c12:	e09c      	b.n	8011d4e <_printf_i+0x1e6>
 8011c14:	6833      	ldr	r3, [r6, #0]
 8011c16:	6820      	ldr	r0, [r4, #0]
 8011c18:	1d19      	adds	r1, r3, #4
 8011c1a:	6031      	str	r1, [r6, #0]
 8011c1c:	0606      	lsls	r6, r0, #24
 8011c1e:	d501      	bpl.n	8011c24 <_printf_i+0xbc>
 8011c20:	681d      	ldr	r5, [r3, #0]
 8011c22:	e003      	b.n	8011c2c <_printf_i+0xc4>
 8011c24:	0645      	lsls	r5, r0, #25
 8011c26:	d5fb      	bpl.n	8011c20 <_printf_i+0xb8>
 8011c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011c2c:	2d00      	cmp	r5, #0
 8011c2e:	da03      	bge.n	8011c38 <_printf_i+0xd0>
 8011c30:	232d      	movs	r3, #45	@ 0x2d
 8011c32:	426d      	negs	r5, r5
 8011c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c38:	4858      	ldr	r0, [pc, #352]	@ (8011d9c <_printf_i+0x234>)
 8011c3a:	230a      	movs	r3, #10
 8011c3c:	e011      	b.n	8011c62 <_printf_i+0xfa>
 8011c3e:	6821      	ldr	r1, [r4, #0]
 8011c40:	6833      	ldr	r3, [r6, #0]
 8011c42:	0608      	lsls	r0, r1, #24
 8011c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8011c48:	d402      	bmi.n	8011c50 <_printf_i+0xe8>
 8011c4a:	0649      	lsls	r1, r1, #25
 8011c4c:	bf48      	it	mi
 8011c4e:	b2ad      	uxthmi	r5, r5
 8011c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8011c52:	4852      	ldr	r0, [pc, #328]	@ (8011d9c <_printf_i+0x234>)
 8011c54:	6033      	str	r3, [r6, #0]
 8011c56:	bf14      	ite	ne
 8011c58:	230a      	movne	r3, #10
 8011c5a:	2308      	moveq	r3, #8
 8011c5c:	2100      	movs	r1, #0
 8011c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011c62:	6866      	ldr	r6, [r4, #4]
 8011c64:	60a6      	str	r6, [r4, #8]
 8011c66:	2e00      	cmp	r6, #0
 8011c68:	db05      	blt.n	8011c76 <_printf_i+0x10e>
 8011c6a:	6821      	ldr	r1, [r4, #0]
 8011c6c:	432e      	orrs	r6, r5
 8011c6e:	f021 0104 	bic.w	r1, r1, #4
 8011c72:	6021      	str	r1, [r4, #0]
 8011c74:	d04b      	beq.n	8011d0e <_printf_i+0x1a6>
 8011c76:	4616      	mov	r6, r2
 8011c78:	fbb5 f1f3 	udiv	r1, r5, r3
 8011c7c:	fb03 5711 	mls	r7, r3, r1, r5
 8011c80:	5dc7      	ldrb	r7, [r0, r7]
 8011c82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011c86:	462f      	mov	r7, r5
 8011c88:	42bb      	cmp	r3, r7
 8011c8a:	460d      	mov	r5, r1
 8011c8c:	d9f4      	bls.n	8011c78 <_printf_i+0x110>
 8011c8e:	2b08      	cmp	r3, #8
 8011c90:	d10b      	bne.n	8011caa <_printf_i+0x142>
 8011c92:	6823      	ldr	r3, [r4, #0]
 8011c94:	07df      	lsls	r7, r3, #31
 8011c96:	d508      	bpl.n	8011caa <_printf_i+0x142>
 8011c98:	6923      	ldr	r3, [r4, #16]
 8011c9a:	6861      	ldr	r1, [r4, #4]
 8011c9c:	4299      	cmp	r1, r3
 8011c9e:	bfde      	ittt	le
 8011ca0:	2330      	movle	r3, #48	@ 0x30
 8011ca2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011ca6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011caa:	1b92      	subs	r2, r2, r6
 8011cac:	6122      	str	r2, [r4, #16]
 8011cae:	f8cd a000 	str.w	sl, [sp]
 8011cb2:	464b      	mov	r3, r9
 8011cb4:	aa03      	add	r2, sp, #12
 8011cb6:	4621      	mov	r1, r4
 8011cb8:	4640      	mov	r0, r8
 8011cba:	f7ff fee7 	bl	8011a8c <_printf_common>
 8011cbe:	3001      	adds	r0, #1
 8011cc0:	d14a      	bne.n	8011d58 <_printf_i+0x1f0>
 8011cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011cc6:	b004      	add	sp, #16
 8011cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	f043 0320 	orr.w	r3, r3, #32
 8011cd2:	6023      	str	r3, [r4, #0]
 8011cd4:	4832      	ldr	r0, [pc, #200]	@ (8011da0 <_printf_i+0x238>)
 8011cd6:	2778      	movs	r7, #120	@ 0x78
 8011cd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	6831      	ldr	r1, [r6, #0]
 8011ce0:	061f      	lsls	r7, r3, #24
 8011ce2:	f851 5b04 	ldr.w	r5, [r1], #4
 8011ce6:	d402      	bmi.n	8011cee <_printf_i+0x186>
 8011ce8:	065f      	lsls	r7, r3, #25
 8011cea:	bf48      	it	mi
 8011cec:	b2ad      	uxthmi	r5, r5
 8011cee:	6031      	str	r1, [r6, #0]
 8011cf0:	07d9      	lsls	r1, r3, #31
 8011cf2:	bf44      	itt	mi
 8011cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8011cf8:	6023      	strmi	r3, [r4, #0]
 8011cfa:	b11d      	cbz	r5, 8011d04 <_printf_i+0x19c>
 8011cfc:	2310      	movs	r3, #16
 8011cfe:	e7ad      	b.n	8011c5c <_printf_i+0xf4>
 8011d00:	4826      	ldr	r0, [pc, #152]	@ (8011d9c <_printf_i+0x234>)
 8011d02:	e7e9      	b.n	8011cd8 <_printf_i+0x170>
 8011d04:	6823      	ldr	r3, [r4, #0]
 8011d06:	f023 0320 	bic.w	r3, r3, #32
 8011d0a:	6023      	str	r3, [r4, #0]
 8011d0c:	e7f6      	b.n	8011cfc <_printf_i+0x194>
 8011d0e:	4616      	mov	r6, r2
 8011d10:	e7bd      	b.n	8011c8e <_printf_i+0x126>
 8011d12:	6833      	ldr	r3, [r6, #0]
 8011d14:	6825      	ldr	r5, [r4, #0]
 8011d16:	6961      	ldr	r1, [r4, #20]
 8011d18:	1d18      	adds	r0, r3, #4
 8011d1a:	6030      	str	r0, [r6, #0]
 8011d1c:	062e      	lsls	r6, r5, #24
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	d501      	bpl.n	8011d26 <_printf_i+0x1be>
 8011d22:	6019      	str	r1, [r3, #0]
 8011d24:	e002      	b.n	8011d2c <_printf_i+0x1c4>
 8011d26:	0668      	lsls	r0, r5, #25
 8011d28:	d5fb      	bpl.n	8011d22 <_printf_i+0x1ba>
 8011d2a:	8019      	strh	r1, [r3, #0]
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	6123      	str	r3, [r4, #16]
 8011d30:	4616      	mov	r6, r2
 8011d32:	e7bc      	b.n	8011cae <_printf_i+0x146>
 8011d34:	6833      	ldr	r3, [r6, #0]
 8011d36:	1d1a      	adds	r2, r3, #4
 8011d38:	6032      	str	r2, [r6, #0]
 8011d3a:	681e      	ldr	r6, [r3, #0]
 8011d3c:	6862      	ldr	r2, [r4, #4]
 8011d3e:	2100      	movs	r1, #0
 8011d40:	4630      	mov	r0, r6
 8011d42:	f7ee facd 	bl	80002e0 <memchr>
 8011d46:	b108      	cbz	r0, 8011d4c <_printf_i+0x1e4>
 8011d48:	1b80      	subs	r0, r0, r6
 8011d4a:	6060      	str	r0, [r4, #4]
 8011d4c:	6863      	ldr	r3, [r4, #4]
 8011d4e:	6123      	str	r3, [r4, #16]
 8011d50:	2300      	movs	r3, #0
 8011d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d56:	e7aa      	b.n	8011cae <_printf_i+0x146>
 8011d58:	6923      	ldr	r3, [r4, #16]
 8011d5a:	4632      	mov	r2, r6
 8011d5c:	4649      	mov	r1, r9
 8011d5e:	4640      	mov	r0, r8
 8011d60:	47d0      	blx	sl
 8011d62:	3001      	adds	r0, #1
 8011d64:	d0ad      	beq.n	8011cc2 <_printf_i+0x15a>
 8011d66:	6823      	ldr	r3, [r4, #0]
 8011d68:	079b      	lsls	r3, r3, #30
 8011d6a:	d413      	bmi.n	8011d94 <_printf_i+0x22c>
 8011d6c:	68e0      	ldr	r0, [r4, #12]
 8011d6e:	9b03      	ldr	r3, [sp, #12]
 8011d70:	4298      	cmp	r0, r3
 8011d72:	bfb8      	it	lt
 8011d74:	4618      	movlt	r0, r3
 8011d76:	e7a6      	b.n	8011cc6 <_printf_i+0x15e>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	4632      	mov	r2, r6
 8011d7c:	4649      	mov	r1, r9
 8011d7e:	4640      	mov	r0, r8
 8011d80:	47d0      	blx	sl
 8011d82:	3001      	adds	r0, #1
 8011d84:	d09d      	beq.n	8011cc2 <_printf_i+0x15a>
 8011d86:	3501      	adds	r5, #1
 8011d88:	68e3      	ldr	r3, [r4, #12]
 8011d8a:	9903      	ldr	r1, [sp, #12]
 8011d8c:	1a5b      	subs	r3, r3, r1
 8011d8e:	42ab      	cmp	r3, r5
 8011d90:	dcf2      	bgt.n	8011d78 <_printf_i+0x210>
 8011d92:	e7eb      	b.n	8011d6c <_printf_i+0x204>
 8011d94:	2500      	movs	r5, #0
 8011d96:	f104 0619 	add.w	r6, r4, #25
 8011d9a:	e7f5      	b.n	8011d88 <_printf_i+0x220>
 8011d9c:	08014f20 	.word	0x08014f20
 8011da0:	08014f31 	.word	0x08014f31

08011da4 <std>:
 8011da4:	2300      	movs	r3, #0
 8011da6:	b510      	push	{r4, lr}
 8011da8:	4604      	mov	r4, r0
 8011daa:	e9c0 3300 	strd	r3, r3, [r0]
 8011dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011db2:	6083      	str	r3, [r0, #8]
 8011db4:	8181      	strh	r1, [r0, #12]
 8011db6:	6643      	str	r3, [r0, #100]	@ 0x64
 8011db8:	81c2      	strh	r2, [r0, #14]
 8011dba:	6183      	str	r3, [r0, #24]
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	2208      	movs	r2, #8
 8011dc0:	305c      	adds	r0, #92	@ 0x5c
 8011dc2:	f000 f920 	bl	8012006 <memset>
 8011dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8011dfc <std+0x58>)
 8011dc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011dca:	4b0d      	ldr	r3, [pc, #52]	@ (8011e00 <std+0x5c>)
 8011dcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011dce:	4b0d      	ldr	r3, [pc, #52]	@ (8011e04 <std+0x60>)
 8011dd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8011e08 <std+0x64>)
 8011dd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8011e0c <std+0x68>)
 8011dd8:	6224      	str	r4, [r4, #32]
 8011dda:	429c      	cmp	r4, r3
 8011ddc:	d006      	beq.n	8011dec <std+0x48>
 8011dde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011de2:	4294      	cmp	r4, r2
 8011de4:	d002      	beq.n	8011dec <std+0x48>
 8011de6:	33d0      	adds	r3, #208	@ 0xd0
 8011de8:	429c      	cmp	r4, r3
 8011dea:	d105      	bne.n	8011df8 <std+0x54>
 8011dec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011df4:	f000 ba42 	b.w	801227c <__retarget_lock_init_recursive>
 8011df8:	bd10      	pop	{r4, pc}
 8011dfa:	bf00      	nop
 8011dfc:	08011f4d 	.word	0x08011f4d
 8011e00:	08011f6f 	.word	0x08011f6f
 8011e04:	08011fa7 	.word	0x08011fa7
 8011e08:	08011fcb 	.word	0x08011fcb
 8011e0c:	240060cc 	.word	0x240060cc

08011e10 <stdio_exit_handler>:
 8011e10:	4a02      	ldr	r2, [pc, #8]	@ (8011e1c <stdio_exit_handler+0xc>)
 8011e12:	4903      	ldr	r1, [pc, #12]	@ (8011e20 <stdio_exit_handler+0x10>)
 8011e14:	4803      	ldr	r0, [pc, #12]	@ (8011e24 <stdio_exit_handler+0x14>)
 8011e16:	f000 b869 	b.w	8011eec <_fwalk_sglue>
 8011e1a:	bf00      	nop
 8011e1c:	24000080 	.word	0x24000080
 8011e20:	08014419 	.word	0x08014419
 8011e24:	240001fc 	.word	0x240001fc

08011e28 <cleanup_stdio>:
 8011e28:	6841      	ldr	r1, [r0, #4]
 8011e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8011e5c <cleanup_stdio+0x34>)
 8011e2c:	4299      	cmp	r1, r3
 8011e2e:	b510      	push	{r4, lr}
 8011e30:	4604      	mov	r4, r0
 8011e32:	d001      	beq.n	8011e38 <cleanup_stdio+0x10>
 8011e34:	f002 faf0 	bl	8014418 <_fflush_r>
 8011e38:	68a1      	ldr	r1, [r4, #8]
 8011e3a:	4b09      	ldr	r3, [pc, #36]	@ (8011e60 <cleanup_stdio+0x38>)
 8011e3c:	4299      	cmp	r1, r3
 8011e3e:	d002      	beq.n	8011e46 <cleanup_stdio+0x1e>
 8011e40:	4620      	mov	r0, r4
 8011e42:	f002 fae9 	bl	8014418 <_fflush_r>
 8011e46:	68e1      	ldr	r1, [r4, #12]
 8011e48:	4b06      	ldr	r3, [pc, #24]	@ (8011e64 <cleanup_stdio+0x3c>)
 8011e4a:	4299      	cmp	r1, r3
 8011e4c:	d004      	beq.n	8011e58 <cleanup_stdio+0x30>
 8011e4e:	4620      	mov	r0, r4
 8011e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e54:	f002 bae0 	b.w	8014418 <_fflush_r>
 8011e58:	bd10      	pop	{r4, pc}
 8011e5a:	bf00      	nop
 8011e5c:	240060cc 	.word	0x240060cc
 8011e60:	24006134 	.word	0x24006134
 8011e64:	2400619c 	.word	0x2400619c

08011e68 <global_stdio_init.part.0>:
 8011e68:	b510      	push	{r4, lr}
 8011e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8011e98 <global_stdio_init.part.0+0x30>)
 8011e6c:	4c0b      	ldr	r4, [pc, #44]	@ (8011e9c <global_stdio_init.part.0+0x34>)
 8011e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8011ea0 <global_stdio_init.part.0+0x38>)
 8011e70:	601a      	str	r2, [r3, #0]
 8011e72:	4620      	mov	r0, r4
 8011e74:	2200      	movs	r2, #0
 8011e76:	2104      	movs	r1, #4
 8011e78:	f7ff ff94 	bl	8011da4 <std>
 8011e7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011e80:	2201      	movs	r2, #1
 8011e82:	2109      	movs	r1, #9
 8011e84:	f7ff ff8e 	bl	8011da4 <std>
 8011e88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011e8c:	2202      	movs	r2, #2
 8011e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e92:	2112      	movs	r1, #18
 8011e94:	f7ff bf86 	b.w	8011da4 <std>
 8011e98:	24006204 	.word	0x24006204
 8011e9c:	240060cc 	.word	0x240060cc
 8011ea0:	08011e11 	.word	0x08011e11

08011ea4 <__sfp_lock_acquire>:
 8011ea4:	4801      	ldr	r0, [pc, #4]	@ (8011eac <__sfp_lock_acquire+0x8>)
 8011ea6:	f000 b9ea 	b.w	801227e <__retarget_lock_acquire_recursive>
 8011eaa:	bf00      	nop
 8011eac:	2400620d 	.word	0x2400620d

08011eb0 <__sfp_lock_release>:
 8011eb0:	4801      	ldr	r0, [pc, #4]	@ (8011eb8 <__sfp_lock_release+0x8>)
 8011eb2:	f000 b9e5 	b.w	8012280 <__retarget_lock_release_recursive>
 8011eb6:	bf00      	nop
 8011eb8:	2400620d 	.word	0x2400620d

08011ebc <__sinit>:
 8011ebc:	b510      	push	{r4, lr}
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	f7ff fff0 	bl	8011ea4 <__sfp_lock_acquire>
 8011ec4:	6a23      	ldr	r3, [r4, #32]
 8011ec6:	b11b      	cbz	r3, 8011ed0 <__sinit+0x14>
 8011ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ecc:	f7ff bff0 	b.w	8011eb0 <__sfp_lock_release>
 8011ed0:	4b04      	ldr	r3, [pc, #16]	@ (8011ee4 <__sinit+0x28>)
 8011ed2:	6223      	str	r3, [r4, #32]
 8011ed4:	4b04      	ldr	r3, [pc, #16]	@ (8011ee8 <__sinit+0x2c>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d1f5      	bne.n	8011ec8 <__sinit+0xc>
 8011edc:	f7ff ffc4 	bl	8011e68 <global_stdio_init.part.0>
 8011ee0:	e7f2      	b.n	8011ec8 <__sinit+0xc>
 8011ee2:	bf00      	nop
 8011ee4:	08011e29 	.word	0x08011e29
 8011ee8:	24006204 	.word	0x24006204

08011eec <_fwalk_sglue>:
 8011eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ef0:	4607      	mov	r7, r0
 8011ef2:	4688      	mov	r8, r1
 8011ef4:	4614      	mov	r4, r2
 8011ef6:	2600      	movs	r6, #0
 8011ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011efc:	f1b9 0901 	subs.w	r9, r9, #1
 8011f00:	d505      	bpl.n	8011f0e <_fwalk_sglue+0x22>
 8011f02:	6824      	ldr	r4, [r4, #0]
 8011f04:	2c00      	cmp	r4, #0
 8011f06:	d1f7      	bne.n	8011ef8 <_fwalk_sglue+0xc>
 8011f08:	4630      	mov	r0, r6
 8011f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f0e:	89ab      	ldrh	r3, [r5, #12]
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d907      	bls.n	8011f24 <_fwalk_sglue+0x38>
 8011f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f18:	3301      	adds	r3, #1
 8011f1a:	d003      	beq.n	8011f24 <_fwalk_sglue+0x38>
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	4638      	mov	r0, r7
 8011f20:	47c0      	blx	r8
 8011f22:	4306      	orrs	r6, r0
 8011f24:	3568      	adds	r5, #104	@ 0x68
 8011f26:	e7e9      	b.n	8011efc <_fwalk_sglue+0x10>

08011f28 <iprintf>:
 8011f28:	b40f      	push	{r0, r1, r2, r3}
 8011f2a:	b507      	push	{r0, r1, r2, lr}
 8011f2c:	4906      	ldr	r1, [pc, #24]	@ (8011f48 <iprintf+0x20>)
 8011f2e:	ab04      	add	r3, sp, #16
 8011f30:	6808      	ldr	r0, [r1, #0]
 8011f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f36:	6881      	ldr	r1, [r0, #8]
 8011f38:	9301      	str	r3, [sp, #4]
 8011f3a:	f002 f8d1 	bl	80140e0 <_vfiprintf_r>
 8011f3e:	b003      	add	sp, #12
 8011f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f44:	b004      	add	sp, #16
 8011f46:	4770      	bx	lr
 8011f48:	240001f8 	.word	0x240001f8

08011f4c <__sread>:
 8011f4c:	b510      	push	{r4, lr}
 8011f4e:	460c      	mov	r4, r1
 8011f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f54:	f000 f944 	bl	80121e0 <_read_r>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	bfab      	itete	ge
 8011f5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f60:	181b      	addge	r3, r3, r0
 8011f62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011f66:	bfac      	ite	ge
 8011f68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011f6a:	81a3      	strhlt	r3, [r4, #12]
 8011f6c:	bd10      	pop	{r4, pc}

08011f6e <__swrite>:
 8011f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f72:	461f      	mov	r7, r3
 8011f74:	898b      	ldrh	r3, [r1, #12]
 8011f76:	05db      	lsls	r3, r3, #23
 8011f78:	4605      	mov	r5, r0
 8011f7a:	460c      	mov	r4, r1
 8011f7c:	4616      	mov	r6, r2
 8011f7e:	d505      	bpl.n	8011f8c <__swrite+0x1e>
 8011f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f84:	2302      	movs	r3, #2
 8011f86:	2200      	movs	r2, #0
 8011f88:	f000 f918 	bl	80121bc <_lseek_r>
 8011f8c:	89a3      	ldrh	r3, [r4, #12]
 8011f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011f96:	81a3      	strh	r3, [r4, #12]
 8011f98:	4632      	mov	r2, r6
 8011f9a:	463b      	mov	r3, r7
 8011f9c:	4628      	mov	r0, r5
 8011f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fa2:	f000 b92f 	b.w	8012204 <_write_r>

08011fa6 <__sseek>:
 8011fa6:	b510      	push	{r4, lr}
 8011fa8:	460c      	mov	r4, r1
 8011faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fae:	f000 f905 	bl	80121bc <_lseek_r>
 8011fb2:	1c43      	adds	r3, r0, #1
 8011fb4:	89a3      	ldrh	r3, [r4, #12]
 8011fb6:	bf15      	itete	ne
 8011fb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011fba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011fbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011fc2:	81a3      	strheq	r3, [r4, #12]
 8011fc4:	bf18      	it	ne
 8011fc6:	81a3      	strhne	r3, [r4, #12]
 8011fc8:	bd10      	pop	{r4, pc}

08011fca <__sclose>:
 8011fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fce:	f000 b887 	b.w	80120e0 <_close_r>

08011fd2 <memmove>:
 8011fd2:	4288      	cmp	r0, r1
 8011fd4:	b510      	push	{r4, lr}
 8011fd6:	eb01 0402 	add.w	r4, r1, r2
 8011fda:	d902      	bls.n	8011fe2 <memmove+0x10>
 8011fdc:	4284      	cmp	r4, r0
 8011fde:	4623      	mov	r3, r4
 8011fe0:	d807      	bhi.n	8011ff2 <memmove+0x20>
 8011fe2:	1e43      	subs	r3, r0, #1
 8011fe4:	42a1      	cmp	r1, r4
 8011fe6:	d008      	beq.n	8011ffa <memmove+0x28>
 8011fe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ff0:	e7f8      	b.n	8011fe4 <memmove+0x12>
 8011ff2:	4402      	add	r2, r0
 8011ff4:	4601      	mov	r1, r0
 8011ff6:	428a      	cmp	r2, r1
 8011ff8:	d100      	bne.n	8011ffc <memmove+0x2a>
 8011ffa:	bd10      	pop	{r4, pc}
 8011ffc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012000:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012004:	e7f7      	b.n	8011ff6 <memmove+0x24>

08012006 <memset>:
 8012006:	4402      	add	r2, r0
 8012008:	4603      	mov	r3, r0
 801200a:	4293      	cmp	r3, r2
 801200c:	d100      	bne.n	8012010 <memset+0xa>
 801200e:	4770      	bx	lr
 8012010:	f803 1b01 	strb.w	r1, [r3], #1
 8012014:	e7f9      	b.n	801200a <memset+0x4>

08012016 <strchr>:
 8012016:	b2c9      	uxtb	r1, r1
 8012018:	4603      	mov	r3, r0
 801201a:	4618      	mov	r0, r3
 801201c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012020:	b112      	cbz	r2, 8012028 <strchr+0x12>
 8012022:	428a      	cmp	r2, r1
 8012024:	d1f9      	bne.n	801201a <strchr+0x4>
 8012026:	4770      	bx	lr
 8012028:	2900      	cmp	r1, #0
 801202a:	bf18      	it	ne
 801202c:	2000      	movne	r0, #0
 801202e:	4770      	bx	lr

08012030 <strncmp>:
 8012030:	b510      	push	{r4, lr}
 8012032:	b16a      	cbz	r2, 8012050 <strncmp+0x20>
 8012034:	3901      	subs	r1, #1
 8012036:	1884      	adds	r4, r0, r2
 8012038:	f810 2b01 	ldrb.w	r2, [r0], #1
 801203c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012040:	429a      	cmp	r2, r3
 8012042:	d103      	bne.n	801204c <strncmp+0x1c>
 8012044:	42a0      	cmp	r0, r4
 8012046:	d001      	beq.n	801204c <strncmp+0x1c>
 8012048:	2a00      	cmp	r2, #0
 801204a:	d1f5      	bne.n	8012038 <strncmp+0x8>
 801204c:	1ad0      	subs	r0, r2, r3
 801204e:	bd10      	pop	{r4, pc}
 8012050:	4610      	mov	r0, r2
 8012052:	e7fc      	b.n	801204e <strncmp+0x1e>

08012054 <strrchr>:
 8012054:	b538      	push	{r3, r4, r5, lr}
 8012056:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 801205a:	4603      	mov	r3, r0
 801205c:	d10e      	bne.n	801207c <strrchr+0x28>
 801205e:	4621      	mov	r1, r4
 8012060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012064:	f7ff bfd7 	b.w	8012016 <strchr>
 8012068:	1c43      	adds	r3, r0, #1
 801206a:	4605      	mov	r5, r0
 801206c:	4621      	mov	r1, r4
 801206e:	4618      	mov	r0, r3
 8012070:	f7ff ffd1 	bl	8012016 <strchr>
 8012074:	2800      	cmp	r0, #0
 8012076:	d1f7      	bne.n	8012068 <strrchr+0x14>
 8012078:	4628      	mov	r0, r5
 801207a:	bd38      	pop	{r3, r4, r5, pc}
 801207c:	2500      	movs	r5, #0
 801207e:	e7f5      	b.n	801206c <strrchr+0x18>

08012080 <__strtok_r>:
 8012080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012082:	4604      	mov	r4, r0
 8012084:	b908      	cbnz	r0, 801208a <__strtok_r+0xa>
 8012086:	6814      	ldr	r4, [r2, #0]
 8012088:	b144      	cbz	r4, 801209c <__strtok_r+0x1c>
 801208a:	4620      	mov	r0, r4
 801208c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012090:	460f      	mov	r7, r1
 8012092:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012096:	b91e      	cbnz	r6, 80120a0 <__strtok_r+0x20>
 8012098:	b965      	cbnz	r5, 80120b4 <__strtok_r+0x34>
 801209a:	6015      	str	r5, [r2, #0]
 801209c:	2000      	movs	r0, #0
 801209e:	e005      	b.n	80120ac <__strtok_r+0x2c>
 80120a0:	42b5      	cmp	r5, r6
 80120a2:	d1f6      	bne.n	8012092 <__strtok_r+0x12>
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1f0      	bne.n	801208a <__strtok_r+0xa>
 80120a8:	6014      	str	r4, [r2, #0]
 80120aa:	7003      	strb	r3, [r0, #0]
 80120ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120ae:	461c      	mov	r4, r3
 80120b0:	e00c      	b.n	80120cc <__strtok_r+0x4c>
 80120b2:	b91d      	cbnz	r5, 80120bc <__strtok_r+0x3c>
 80120b4:	4627      	mov	r7, r4
 80120b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80120ba:	460e      	mov	r6, r1
 80120bc:	f816 5b01 	ldrb.w	r5, [r6], #1
 80120c0:	42ab      	cmp	r3, r5
 80120c2:	d1f6      	bne.n	80120b2 <__strtok_r+0x32>
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d0f2      	beq.n	80120ae <__strtok_r+0x2e>
 80120c8:	2300      	movs	r3, #0
 80120ca:	703b      	strb	r3, [r7, #0]
 80120cc:	6014      	str	r4, [r2, #0]
 80120ce:	e7ed      	b.n	80120ac <__strtok_r+0x2c>

080120d0 <strtok_r>:
 80120d0:	2301      	movs	r3, #1
 80120d2:	f7ff bfd5 	b.w	8012080 <__strtok_r>
	...

080120d8 <_localeconv_r>:
 80120d8:	4800      	ldr	r0, [pc, #0]	@ (80120dc <_localeconv_r+0x4>)
 80120da:	4770      	bx	lr
 80120dc:	2400017c 	.word	0x2400017c

080120e0 <_close_r>:
 80120e0:	b538      	push	{r3, r4, r5, lr}
 80120e2:	4d06      	ldr	r5, [pc, #24]	@ (80120fc <_close_r+0x1c>)
 80120e4:	2300      	movs	r3, #0
 80120e6:	4604      	mov	r4, r0
 80120e8:	4608      	mov	r0, r1
 80120ea:	602b      	str	r3, [r5, #0]
 80120ec:	f7f3 f8d2 	bl	8005294 <_close>
 80120f0:	1c43      	adds	r3, r0, #1
 80120f2:	d102      	bne.n	80120fa <_close_r+0x1a>
 80120f4:	682b      	ldr	r3, [r5, #0]
 80120f6:	b103      	cbz	r3, 80120fa <_close_r+0x1a>
 80120f8:	6023      	str	r3, [r4, #0]
 80120fa:	bd38      	pop	{r3, r4, r5, pc}
 80120fc:	24006208 	.word	0x24006208

08012100 <_reclaim_reent>:
 8012100:	4b2d      	ldr	r3, [pc, #180]	@ (80121b8 <_reclaim_reent+0xb8>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	4283      	cmp	r3, r0
 8012106:	b570      	push	{r4, r5, r6, lr}
 8012108:	4604      	mov	r4, r0
 801210a:	d053      	beq.n	80121b4 <_reclaim_reent+0xb4>
 801210c:	69c3      	ldr	r3, [r0, #28]
 801210e:	b31b      	cbz	r3, 8012158 <_reclaim_reent+0x58>
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	b163      	cbz	r3, 801212e <_reclaim_reent+0x2e>
 8012114:	2500      	movs	r5, #0
 8012116:	69e3      	ldr	r3, [r4, #28]
 8012118:	68db      	ldr	r3, [r3, #12]
 801211a:	5959      	ldr	r1, [r3, r5]
 801211c:	b9b1      	cbnz	r1, 801214c <_reclaim_reent+0x4c>
 801211e:	3504      	adds	r5, #4
 8012120:	2d80      	cmp	r5, #128	@ 0x80
 8012122:	d1f8      	bne.n	8012116 <_reclaim_reent+0x16>
 8012124:	69e3      	ldr	r3, [r4, #28]
 8012126:	4620      	mov	r0, r4
 8012128:	68d9      	ldr	r1, [r3, #12]
 801212a:	f000 feaf 	bl	8012e8c <_free_r>
 801212e:	69e3      	ldr	r3, [r4, #28]
 8012130:	6819      	ldr	r1, [r3, #0]
 8012132:	b111      	cbz	r1, 801213a <_reclaim_reent+0x3a>
 8012134:	4620      	mov	r0, r4
 8012136:	f000 fea9 	bl	8012e8c <_free_r>
 801213a:	69e3      	ldr	r3, [r4, #28]
 801213c:	689d      	ldr	r5, [r3, #8]
 801213e:	b15d      	cbz	r5, 8012158 <_reclaim_reent+0x58>
 8012140:	4629      	mov	r1, r5
 8012142:	4620      	mov	r0, r4
 8012144:	682d      	ldr	r5, [r5, #0]
 8012146:	f000 fea1 	bl	8012e8c <_free_r>
 801214a:	e7f8      	b.n	801213e <_reclaim_reent+0x3e>
 801214c:	680e      	ldr	r6, [r1, #0]
 801214e:	4620      	mov	r0, r4
 8012150:	f000 fe9c 	bl	8012e8c <_free_r>
 8012154:	4631      	mov	r1, r6
 8012156:	e7e1      	b.n	801211c <_reclaim_reent+0x1c>
 8012158:	6961      	ldr	r1, [r4, #20]
 801215a:	b111      	cbz	r1, 8012162 <_reclaim_reent+0x62>
 801215c:	4620      	mov	r0, r4
 801215e:	f000 fe95 	bl	8012e8c <_free_r>
 8012162:	69e1      	ldr	r1, [r4, #28]
 8012164:	b111      	cbz	r1, 801216c <_reclaim_reent+0x6c>
 8012166:	4620      	mov	r0, r4
 8012168:	f000 fe90 	bl	8012e8c <_free_r>
 801216c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801216e:	b111      	cbz	r1, 8012176 <_reclaim_reent+0x76>
 8012170:	4620      	mov	r0, r4
 8012172:	f000 fe8b 	bl	8012e8c <_free_r>
 8012176:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012178:	b111      	cbz	r1, 8012180 <_reclaim_reent+0x80>
 801217a:	4620      	mov	r0, r4
 801217c:	f000 fe86 	bl	8012e8c <_free_r>
 8012180:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012182:	b111      	cbz	r1, 801218a <_reclaim_reent+0x8a>
 8012184:	4620      	mov	r0, r4
 8012186:	f000 fe81 	bl	8012e8c <_free_r>
 801218a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801218c:	b111      	cbz	r1, 8012194 <_reclaim_reent+0x94>
 801218e:	4620      	mov	r0, r4
 8012190:	f000 fe7c 	bl	8012e8c <_free_r>
 8012194:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012196:	b111      	cbz	r1, 801219e <_reclaim_reent+0x9e>
 8012198:	4620      	mov	r0, r4
 801219a:	f000 fe77 	bl	8012e8c <_free_r>
 801219e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80121a0:	b111      	cbz	r1, 80121a8 <_reclaim_reent+0xa8>
 80121a2:	4620      	mov	r0, r4
 80121a4:	f000 fe72 	bl	8012e8c <_free_r>
 80121a8:	6a23      	ldr	r3, [r4, #32]
 80121aa:	b11b      	cbz	r3, 80121b4 <_reclaim_reent+0xb4>
 80121ac:	4620      	mov	r0, r4
 80121ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121b2:	4718      	bx	r3
 80121b4:	bd70      	pop	{r4, r5, r6, pc}
 80121b6:	bf00      	nop
 80121b8:	240001f8 	.word	0x240001f8

080121bc <_lseek_r>:
 80121bc:	b538      	push	{r3, r4, r5, lr}
 80121be:	4d07      	ldr	r5, [pc, #28]	@ (80121dc <_lseek_r+0x20>)
 80121c0:	4604      	mov	r4, r0
 80121c2:	4608      	mov	r0, r1
 80121c4:	4611      	mov	r1, r2
 80121c6:	2200      	movs	r2, #0
 80121c8:	602a      	str	r2, [r5, #0]
 80121ca:	461a      	mov	r2, r3
 80121cc:	f7f3 f889 	bl	80052e2 <_lseek>
 80121d0:	1c43      	adds	r3, r0, #1
 80121d2:	d102      	bne.n	80121da <_lseek_r+0x1e>
 80121d4:	682b      	ldr	r3, [r5, #0]
 80121d6:	b103      	cbz	r3, 80121da <_lseek_r+0x1e>
 80121d8:	6023      	str	r3, [r4, #0]
 80121da:	bd38      	pop	{r3, r4, r5, pc}
 80121dc:	24006208 	.word	0x24006208

080121e0 <_read_r>:
 80121e0:	b538      	push	{r3, r4, r5, lr}
 80121e2:	4d07      	ldr	r5, [pc, #28]	@ (8012200 <_read_r+0x20>)
 80121e4:	4604      	mov	r4, r0
 80121e6:	4608      	mov	r0, r1
 80121e8:	4611      	mov	r1, r2
 80121ea:	2200      	movs	r2, #0
 80121ec:	602a      	str	r2, [r5, #0]
 80121ee:	461a      	mov	r2, r3
 80121f0:	f7f3 f833 	bl	800525a <_read>
 80121f4:	1c43      	adds	r3, r0, #1
 80121f6:	d102      	bne.n	80121fe <_read_r+0x1e>
 80121f8:	682b      	ldr	r3, [r5, #0]
 80121fa:	b103      	cbz	r3, 80121fe <_read_r+0x1e>
 80121fc:	6023      	str	r3, [r4, #0]
 80121fe:	bd38      	pop	{r3, r4, r5, pc}
 8012200:	24006208 	.word	0x24006208

08012204 <_write_r>:
 8012204:	b538      	push	{r3, r4, r5, lr}
 8012206:	4d07      	ldr	r5, [pc, #28]	@ (8012224 <_write_r+0x20>)
 8012208:	4604      	mov	r4, r0
 801220a:	4608      	mov	r0, r1
 801220c:	4611      	mov	r1, r2
 801220e:	2200      	movs	r2, #0
 8012210:	602a      	str	r2, [r5, #0]
 8012212:	461a      	mov	r2, r3
 8012214:	f7ee fd56 	bl	8000cc4 <_write>
 8012218:	1c43      	adds	r3, r0, #1
 801221a:	d102      	bne.n	8012222 <_write_r+0x1e>
 801221c:	682b      	ldr	r3, [r5, #0]
 801221e:	b103      	cbz	r3, 8012222 <_write_r+0x1e>
 8012220:	6023      	str	r3, [r4, #0]
 8012222:	bd38      	pop	{r3, r4, r5, pc}
 8012224:	24006208 	.word	0x24006208

08012228 <__errno>:
 8012228:	4b01      	ldr	r3, [pc, #4]	@ (8012230 <__errno+0x8>)
 801222a:	6818      	ldr	r0, [r3, #0]
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	240001f8 	.word	0x240001f8

08012234 <__libc_init_array>:
 8012234:	b570      	push	{r4, r5, r6, lr}
 8012236:	4d0d      	ldr	r5, [pc, #52]	@ (801226c <__libc_init_array+0x38>)
 8012238:	4c0d      	ldr	r4, [pc, #52]	@ (8012270 <__libc_init_array+0x3c>)
 801223a:	1b64      	subs	r4, r4, r5
 801223c:	10a4      	asrs	r4, r4, #2
 801223e:	2600      	movs	r6, #0
 8012240:	42a6      	cmp	r6, r4
 8012242:	d109      	bne.n	8012258 <__libc_init_array+0x24>
 8012244:	4d0b      	ldr	r5, [pc, #44]	@ (8012274 <__libc_init_array+0x40>)
 8012246:	4c0c      	ldr	r4, [pc, #48]	@ (8012278 <__libc_init_array+0x44>)
 8012248:	f002 fd0c 	bl	8014c64 <_init>
 801224c:	1b64      	subs	r4, r4, r5
 801224e:	10a4      	asrs	r4, r4, #2
 8012250:	2600      	movs	r6, #0
 8012252:	42a6      	cmp	r6, r4
 8012254:	d105      	bne.n	8012262 <__libc_init_array+0x2e>
 8012256:	bd70      	pop	{r4, r5, r6, pc}
 8012258:	f855 3b04 	ldr.w	r3, [r5], #4
 801225c:	4798      	blx	r3
 801225e:	3601      	adds	r6, #1
 8012260:	e7ee      	b.n	8012240 <__libc_init_array+0xc>
 8012262:	f855 3b04 	ldr.w	r3, [r5], #4
 8012266:	4798      	blx	r3
 8012268:	3601      	adds	r6, #1
 801226a:	e7f2      	b.n	8012252 <__libc_init_array+0x1e>
 801226c:	08015480 	.word	0x08015480
 8012270:	08015480 	.word	0x08015480
 8012274:	08015480 	.word	0x08015480
 8012278:	08015484 	.word	0x08015484

0801227c <__retarget_lock_init_recursive>:
 801227c:	4770      	bx	lr

0801227e <__retarget_lock_acquire_recursive>:
 801227e:	4770      	bx	lr

08012280 <__retarget_lock_release_recursive>:
 8012280:	4770      	bx	lr

08012282 <memcpy>:
 8012282:	440a      	add	r2, r1
 8012284:	4291      	cmp	r1, r2
 8012286:	f100 33ff 	add.w	r3, r0, #4294967295
 801228a:	d100      	bne.n	801228e <memcpy+0xc>
 801228c:	4770      	bx	lr
 801228e:	b510      	push	{r4, lr}
 8012290:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012294:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012298:	4291      	cmp	r1, r2
 801229a:	d1f9      	bne.n	8012290 <memcpy+0xe>
 801229c:	bd10      	pop	{r4, pc}
	...

080122a0 <nan>:
 80122a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80122a8 <nan+0x8>
 80122a4:	4770      	bx	lr
 80122a6:	bf00      	nop
 80122a8:	00000000 	.word	0x00000000
 80122ac:	7ff80000 	.word	0x7ff80000

080122b0 <nanf>:
 80122b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80122b8 <nanf+0x8>
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
 80122b8:	7fc00000 	.word	0x7fc00000

080122bc <quorem>:
 80122bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122c0:	6903      	ldr	r3, [r0, #16]
 80122c2:	690c      	ldr	r4, [r1, #16]
 80122c4:	42a3      	cmp	r3, r4
 80122c6:	4607      	mov	r7, r0
 80122c8:	db7e      	blt.n	80123c8 <quorem+0x10c>
 80122ca:	3c01      	subs	r4, #1
 80122cc:	f101 0814 	add.w	r8, r1, #20
 80122d0:	00a3      	lsls	r3, r4, #2
 80122d2:	f100 0514 	add.w	r5, r0, #20
 80122d6:	9300      	str	r3, [sp, #0]
 80122d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80122dc:	9301      	str	r3, [sp, #4]
 80122de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80122e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80122e6:	3301      	adds	r3, #1
 80122e8:	429a      	cmp	r2, r3
 80122ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80122ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80122f2:	d32e      	bcc.n	8012352 <quorem+0x96>
 80122f4:	f04f 0a00 	mov.w	sl, #0
 80122f8:	46c4      	mov	ip, r8
 80122fa:	46ae      	mov	lr, r5
 80122fc:	46d3      	mov	fp, sl
 80122fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012302:	b298      	uxth	r0, r3
 8012304:	fb06 a000 	mla	r0, r6, r0, sl
 8012308:	0c02      	lsrs	r2, r0, #16
 801230a:	0c1b      	lsrs	r3, r3, #16
 801230c:	fb06 2303 	mla	r3, r6, r3, r2
 8012310:	f8de 2000 	ldr.w	r2, [lr]
 8012314:	b280      	uxth	r0, r0
 8012316:	b292      	uxth	r2, r2
 8012318:	1a12      	subs	r2, r2, r0
 801231a:	445a      	add	r2, fp
 801231c:	f8de 0000 	ldr.w	r0, [lr]
 8012320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012324:	b29b      	uxth	r3, r3
 8012326:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801232a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801232e:	b292      	uxth	r2, r2
 8012330:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012334:	45e1      	cmp	r9, ip
 8012336:	f84e 2b04 	str.w	r2, [lr], #4
 801233a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801233e:	d2de      	bcs.n	80122fe <quorem+0x42>
 8012340:	9b00      	ldr	r3, [sp, #0]
 8012342:	58eb      	ldr	r3, [r5, r3]
 8012344:	b92b      	cbnz	r3, 8012352 <quorem+0x96>
 8012346:	9b01      	ldr	r3, [sp, #4]
 8012348:	3b04      	subs	r3, #4
 801234a:	429d      	cmp	r5, r3
 801234c:	461a      	mov	r2, r3
 801234e:	d32f      	bcc.n	80123b0 <quorem+0xf4>
 8012350:	613c      	str	r4, [r7, #16]
 8012352:	4638      	mov	r0, r7
 8012354:	f001 fca2 	bl	8013c9c <__mcmp>
 8012358:	2800      	cmp	r0, #0
 801235a:	db25      	blt.n	80123a8 <quorem+0xec>
 801235c:	4629      	mov	r1, r5
 801235e:	2000      	movs	r0, #0
 8012360:	f858 2b04 	ldr.w	r2, [r8], #4
 8012364:	f8d1 c000 	ldr.w	ip, [r1]
 8012368:	fa1f fe82 	uxth.w	lr, r2
 801236c:	fa1f f38c 	uxth.w	r3, ip
 8012370:	eba3 030e 	sub.w	r3, r3, lr
 8012374:	4403      	add	r3, r0
 8012376:	0c12      	lsrs	r2, r2, #16
 8012378:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801237c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012380:	b29b      	uxth	r3, r3
 8012382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012386:	45c1      	cmp	r9, r8
 8012388:	f841 3b04 	str.w	r3, [r1], #4
 801238c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012390:	d2e6      	bcs.n	8012360 <quorem+0xa4>
 8012392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801239a:	b922      	cbnz	r2, 80123a6 <quorem+0xea>
 801239c:	3b04      	subs	r3, #4
 801239e:	429d      	cmp	r5, r3
 80123a0:	461a      	mov	r2, r3
 80123a2:	d30b      	bcc.n	80123bc <quorem+0x100>
 80123a4:	613c      	str	r4, [r7, #16]
 80123a6:	3601      	adds	r6, #1
 80123a8:	4630      	mov	r0, r6
 80123aa:	b003      	add	sp, #12
 80123ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b0:	6812      	ldr	r2, [r2, #0]
 80123b2:	3b04      	subs	r3, #4
 80123b4:	2a00      	cmp	r2, #0
 80123b6:	d1cb      	bne.n	8012350 <quorem+0x94>
 80123b8:	3c01      	subs	r4, #1
 80123ba:	e7c6      	b.n	801234a <quorem+0x8e>
 80123bc:	6812      	ldr	r2, [r2, #0]
 80123be:	3b04      	subs	r3, #4
 80123c0:	2a00      	cmp	r2, #0
 80123c2:	d1ef      	bne.n	80123a4 <quorem+0xe8>
 80123c4:	3c01      	subs	r4, #1
 80123c6:	e7ea      	b.n	801239e <quorem+0xe2>
 80123c8:	2000      	movs	r0, #0
 80123ca:	e7ee      	b.n	80123aa <quorem+0xee>
 80123cc:	0000      	movs	r0, r0
	...

080123d0 <_dtoa_r>:
 80123d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d4:	ed2d 8b02 	vpush	{d8}
 80123d8:	69c7      	ldr	r7, [r0, #28]
 80123da:	b091      	sub	sp, #68	@ 0x44
 80123dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80123e0:	ec55 4b10 	vmov	r4, r5, d0
 80123e4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80123e6:	9107      	str	r1, [sp, #28]
 80123e8:	4681      	mov	r9, r0
 80123ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80123ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80123ee:	b97f      	cbnz	r7, 8012410 <_dtoa_r+0x40>
 80123f0:	2010      	movs	r0, #16
 80123f2:	f001 f8cf 	bl	8013594 <malloc>
 80123f6:	4602      	mov	r2, r0
 80123f8:	f8c9 001c 	str.w	r0, [r9, #28]
 80123fc:	b920      	cbnz	r0, 8012408 <_dtoa_r+0x38>
 80123fe:	4ba0      	ldr	r3, [pc, #640]	@ (8012680 <_dtoa_r+0x2b0>)
 8012400:	21ef      	movs	r1, #239	@ 0xef
 8012402:	48a0      	ldr	r0, [pc, #640]	@ (8012684 <_dtoa_r+0x2b4>)
 8012404:	f002 f8d4 	bl	80145b0 <__assert_func>
 8012408:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801240c:	6007      	str	r7, [r0, #0]
 801240e:	60c7      	str	r7, [r0, #12]
 8012410:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012414:	6819      	ldr	r1, [r3, #0]
 8012416:	b159      	cbz	r1, 8012430 <_dtoa_r+0x60>
 8012418:	685a      	ldr	r2, [r3, #4]
 801241a:	604a      	str	r2, [r1, #4]
 801241c:	2301      	movs	r3, #1
 801241e:	4093      	lsls	r3, r2
 8012420:	608b      	str	r3, [r1, #8]
 8012422:	4648      	mov	r0, r9
 8012424:	f001 f9be 	bl	80137a4 <_Bfree>
 8012428:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801242c:	2200      	movs	r2, #0
 801242e:	601a      	str	r2, [r3, #0]
 8012430:	1e2b      	subs	r3, r5, #0
 8012432:	bfbb      	ittet	lt
 8012434:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012438:	9303      	strlt	r3, [sp, #12]
 801243a:	2300      	movge	r3, #0
 801243c:	2201      	movlt	r2, #1
 801243e:	bfac      	ite	ge
 8012440:	6033      	strge	r3, [r6, #0]
 8012442:	6032      	strlt	r2, [r6, #0]
 8012444:	4b90      	ldr	r3, [pc, #576]	@ (8012688 <_dtoa_r+0x2b8>)
 8012446:	9e03      	ldr	r6, [sp, #12]
 8012448:	43b3      	bics	r3, r6
 801244a:	d110      	bne.n	801246e <_dtoa_r+0x9e>
 801244c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801244e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012452:	6013      	str	r3, [r2, #0]
 8012454:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012458:	4323      	orrs	r3, r4
 801245a:	f000 84e6 	beq.w	8012e2a <_dtoa_r+0xa5a>
 801245e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012460:	4f8a      	ldr	r7, [pc, #552]	@ (801268c <_dtoa_r+0x2bc>)
 8012462:	2b00      	cmp	r3, #0
 8012464:	f000 84e8 	beq.w	8012e38 <_dtoa_r+0xa68>
 8012468:	1cfb      	adds	r3, r7, #3
 801246a:	f000 bce3 	b.w	8012e34 <_dtoa_r+0xa64>
 801246e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012472:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247a:	d10a      	bne.n	8012492 <_dtoa_r+0xc2>
 801247c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801247e:	2301      	movs	r3, #1
 8012480:	6013      	str	r3, [r2, #0]
 8012482:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012484:	b113      	cbz	r3, 801248c <_dtoa_r+0xbc>
 8012486:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012488:	4b81      	ldr	r3, [pc, #516]	@ (8012690 <_dtoa_r+0x2c0>)
 801248a:	6013      	str	r3, [r2, #0]
 801248c:	4f81      	ldr	r7, [pc, #516]	@ (8012694 <_dtoa_r+0x2c4>)
 801248e:	f000 bcd3 	b.w	8012e38 <_dtoa_r+0xa68>
 8012492:	aa0e      	add	r2, sp, #56	@ 0x38
 8012494:	a90f      	add	r1, sp, #60	@ 0x3c
 8012496:	4648      	mov	r0, r9
 8012498:	eeb0 0b48 	vmov.f64	d0, d8
 801249c:	f001 fd1e 	bl	8013edc <__d2b>
 80124a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80124a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80124a6:	9001      	str	r0, [sp, #4]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d045      	beq.n	8012538 <_dtoa_r+0x168>
 80124ac:	eeb0 7b48 	vmov.f64	d7, d8
 80124b0:	ee18 1a90 	vmov	r1, s17
 80124b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80124b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80124bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80124c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80124c4:	2500      	movs	r5, #0
 80124c6:	ee07 1a90 	vmov	s15, r1
 80124ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80124ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012668 <_dtoa_r+0x298>
 80124d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80124d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012670 <_dtoa_r+0x2a0>
 80124da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80124de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012678 <_dtoa_r+0x2a8>
 80124e2:	ee07 3a90 	vmov	s15, r3
 80124e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80124ea:	eeb0 7b46 	vmov.f64	d7, d6
 80124ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 80124f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80124f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80124fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fe:	ee16 8a90 	vmov	r8, s13
 8012502:	d508      	bpl.n	8012516 <_dtoa_r+0x146>
 8012504:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012508:	eeb4 6b47 	vcmp.f64	d6, d7
 801250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012510:	bf18      	it	ne
 8012512:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012516:	f1b8 0f16 	cmp.w	r8, #22
 801251a:	d82b      	bhi.n	8012574 <_dtoa_r+0x1a4>
 801251c:	495e      	ldr	r1, [pc, #376]	@ (8012698 <_dtoa_r+0x2c8>)
 801251e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012522:	ed91 7b00 	vldr	d7, [r1]
 8012526:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252e:	d501      	bpl.n	8012534 <_dtoa_r+0x164>
 8012530:	f108 38ff 	add.w	r8, r8, #4294967295
 8012534:	2100      	movs	r1, #0
 8012536:	e01e      	b.n	8012576 <_dtoa_r+0x1a6>
 8012538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801253a:	4413      	add	r3, r2
 801253c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012540:	2920      	cmp	r1, #32
 8012542:	bfc1      	itttt	gt
 8012544:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012548:	408e      	lslgt	r6, r1
 801254a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801254e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012552:	bfd6      	itet	le
 8012554:	f1c1 0120 	rsble	r1, r1, #32
 8012558:	4331      	orrgt	r1, r6
 801255a:	fa04 f101 	lslle.w	r1, r4, r1
 801255e:	ee07 1a90 	vmov	s15, r1
 8012562:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012566:	3b01      	subs	r3, #1
 8012568:	ee17 1a90 	vmov	r1, s15
 801256c:	2501      	movs	r5, #1
 801256e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012572:	e7a8      	b.n	80124c6 <_dtoa_r+0xf6>
 8012574:	2101      	movs	r1, #1
 8012576:	1ad2      	subs	r2, r2, r3
 8012578:	1e53      	subs	r3, r2, #1
 801257a:	9306      	str	r3, [sp, #24]
 801257c:	bf45      	ittet	mi
 801257e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012582:	9304      	strmi	r3, [sp, #16]
 8012584:	2300      	movpl	r3, #0
 8012586:	2300      	movmi	r3, #0
 8012588:	bf4c      	ite	mi
 801258a:	9306      	strmi	r3, [sp, #24]
 801258c:	9304      	strpl	r3, [sp, #16]
 801258e:	f1b8 0f00 	cmp.w	r8, #0
 8012592:	910c      	str	r1, [sp, #48]	@ 0x30
 8012594:	db18      	blt.n	80125c8 <_dtoa_r+0x1f8>
 8012596:	9b06      	ldr	r3, [sp, #24]
 8012598:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801259c:	4443      	add	r3, r8
 801259e:	9306      	str	r3, [sp, #24]
 80125a0:	2300      	movs	r3, #0
 80125a2:	9a07      	ldr	r2, [sp, #28]
 80125a4:	2a09      	cmp	r2, #9
 80125a6:	d845      	bhi.n	8012634 <_dtoa_r+0x264>
 80125a8:	2a05      	cmp	r2, #5
 80125aa:	bfc4      	itt	gt
 80125ac:	3a04      	subgt	r2, #4
 80125ae:	9207      	strgt	r2, [sp, #28]
 80125b0:	9a07      	ldr	r2, [sp, #28]
 80125b2:	f1a2 0202 	sub.w	r2, r2, #2
 80125b6:	bfcc      	ite	gt
 80125b8:	2400      	movgt	r4, #0
 80125ba:	2401      	movle	r4, #1
 80125bc:	2a03      	cmp	r2, #3
 80125be:	d844      	bhi.n	801264a <_dtoa_r+0x27a>
 80125c0:	e8df f002 	tbb	[pc, r2]
 80125c4:	0b173634 	.word	0x0b173634
 80125c8:	9b04      	ldr	r3, [sp, #16]
 80125ca:	2200      	movs	r2, #0
 80125cc:	eba3 0308 	sub.w	r3, r3, r8
 80125d0:	9304      	str	r3, [sp, #16]
 80125d2:	920a      	str	r2, [sp, #40]	@ 0x28
 80125d4:	f1c8 0300 	rsb	r3, r8, #0
 80125d8:	e7e3      	b.n	80125a2 <_dtoa_r+0x1d2>
 80125da:	2201      	movs	r2, #1
 80125dc:	9208      	str	r2, [sp, #32]
 80125de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80125e0:	eb08 0b02 	add.w	fp, r8, r2
 80125e4:	f10b 0a01 	add.w	sl, fp, #1
 80125e8:	4652      	mov	r2, sl
 80125ea:	2a01      	cmp	r2, #1
 80125ec:	bfb8      	it	lt
 80125ee:	2201      	movlt	r2, #1
 80125f0:	e006      	b.n	8012600 <_dtoa_r+0x230>
 80125f2:	2201      	movs	r2, #1
 80125f4:	9208      	str	r2, [sp, #32]
 80125f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80125f8:	2a00      	cmp	r2, #0
 80125fa:	dd29      	ble.n	8012650 <_dtoa_r+0x280>
 80125fc:	4693      	mov	fp, r2
 80125fe:	4692      	mov	sl, r2
 8012600:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012604:	2100      	movs	r1, #0
 8012606:	2004      	movs	r0, #4
 8012608:	f100 0614 	add.w	r6, r0, #20
 801260c:	4296      	cmp	r6, r2
 801260e:	d926      	bls.n	801265e <_dtoa_r+0x28e>
 8012610:	6079      	str	r1, [r7, #4]
 8012612:	4648      	mov	r0, r9
 8012614:	9305      	str	r3, [sp, #20]
 8012616:	f001 f885 	bl	8013724 <_Balloc>
 801261a:	9b05      	ldr	r3, [sp, #20]
 801261c:	4607      	mov	r7, r0
 801261e:	2800      	cmp	r0, #0
 8012620:	d13e      	bne.n	80126a0 <_dtoa_r+0x2d0>
 8012622:	4b1e      	ldr	r3, [pc, #120]	@ (801269c <_dtoa_r+0x2cc>)
 8012624:	4602      	mov	r2, r0
 8012626:	f240 11af 	movw	r1, #431	@ 0x1af
 801262a:	e6ea      	b.n	8012402 <_dtoa_r+0x32>
 801262c:	2200      	movs	r2, #0
 801262e:	e7e1      	b.n	80125f4 <_dtoa_r+0x224>
 8012630:	2200      	movs	r2, #0
 8012632:	e7d3      	b.n	80125dc <_dtoa_r+0x20c>
 8012634:	2401      	movs	r4, #1
 8012636:	2200      	movs	r2, #0
 8012638:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801263c:	f04f 3bff 	mov.w	fp, #4294967295
 8012640:	2100      	movs	r1, #0
 8012642:	46da      	mov	sl, fp
 8012644:	2212      	movs	r2, #18
 8012646:	9109      	str	r1, [sp, #36]	@ 0x24
 8012648:	e7da      	b.n	8012600 <_dtoa_r+0x230>
 801264a:	2201      	movs	r2, #1
 801264c:	9208      	str	r2, [sp, #32]
 801264e:	e7f5      	b.n	801263c <_dtoa_r+0x26c>
 8012650:	f04f 0b01 	mov.w	fp, #1
 8012654:	46da      	mov	sl, fp
 8012656:	465a      	mov	r2, fp
 8012658:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801265c:	e7d0      	b.n	8012600 <_dtoa_r+0x230>
 801265e:	3101      	adds	r1, #1
 8012660:	0040      	lsls	r0, r0, #1
 8012662:	e7d1      	b.n	8012608 <_dtoa_r+0x238>
 8012664:	f3af 8000 	nop.w
 8012668:	636f4361 	.word	0x636f4361
 801266c:	3fd287a7 	.word	0x3fd287a7
 8012670:	8b60c8b3 	.word	0x8b60c8b3
 8012674:	3fc68a28 	.word	0x3fc68a28
 8012678:	509f79fb 	.word	0x509f79fb
 801267c:	3fd34413 	.word	0x3fd34413
 8012680:	08014f57 	.word	0x08014f57
 8012684:	08014f6e 	.word	0x08014f6e
 8012688:	7ff00000 	.word	0x7ff00000
 801268c:	08014f53 	.word	0x08014f53
 8012690:	08014f1f 	.word	0x08014f1f
 8012694:	08014f1e 	.word	0x08014f1e
 8012698:	08015168 	.word	0x08015168
 801269c:	08014fc6 	.word	0x08014fc6
 80126a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80126a4:	f1ba 0f0e 	cmp.w	sl, #14
 80126a8:	6010      	str	r0, [r2, #0]
 80126aa:	d86e      	bhi.n	801278a <_dtoa_r+0x3ba>
 80126ac:	2c00      	cmp	r4, #0
 80126ae:	d06c      	beq.n	801278a <_dtoa_r+0x3ba>
 80126b0:	f1b8 0f00 	cmp.w	r8, #0
 80126b4:	f340 80b4 	ble.w	8012820 <_dtoa_r+0x450>
 80126b8:	4ac8      	ldr	r2, [pc, #800]	@ (80129dc <_dtoa_r+0x60c>)
 80126ba:	f008 010f 	and.w	r1, r8, #15
 80126be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80126c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80126c6:	ed92 7b00 	vldr	d7, [r2]
 80126ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 80126ce:	f000 809b 	beq.w	8012808 <_dtoa_r+0x438>
 80126d2:	4ac3      	ldr	r2, [pc, #780]	@ (80129e0 <_dtoa_r+0x610>)
 80126d4:	ed92 6b08 	vldr	d6, [r2, #32]
 80126d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80126dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80126e0:	f001 010f 	and.w	r1, r1, #15
 80126e4:	2203      	movs	r2, #3
 80126e6:	48be      	ldr	r0, [pc, #760]	@ (80129e0 <_dtoa_r+0x610>)
 80126e8:	2900      	cmp	r1, #0
 80126ea:	f040 808f 	bne.w	801280c <_dtoa_r+0x43c>
 80126ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 80126f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80126f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80126fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80126fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012700:	2900      	cmp	r1, #0
 8012702:	f000 80b3 	beq.w	801286c <_dtoa_r+0x49c>
 8012706:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801270a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012712:	f140 80ab 	bpl.w	801286c <_dtoa_r+0x49c>
 8012716:	f1ba 0f00 	cmp.w	sl, #0
 801271a:	f000 80a7 	beq.w	801286c <_dtoa_r+0x49c>
 801271e:	f1bb 0f00 	cmp.w	fp, #0
 8012722:	dd30      	ble.n	8012786 <_dtoa_r+0x3b6>
 8012724:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012728:	ee27 7b06 	vmul.f64	d7, d7, d6
 801272c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012730:	f108 31ff 	add.w	r1, r8, #4294967295
 8012734:	9105      	str	r1, [sp, #20]
 8012736:	3201      	adds	r2, #1
 8012738:	465c      	mov	r4, fp
 801273a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801273e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012742:	ee07 2a90 	vmov	s15, r2
 8012746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801274a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801274e:	ee15 2a90 	vmov	r2, s11
 8012752:	ec51 0b15 	vmov	r0, r1, d5
 8012756:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801275a:	2c00      	cmp	r4, #0
 801275c:	f040 808a 	bne.w	8012874 <_dtoa_r+0x4a4>
 8012760:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012764:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012768:	ec41 0b17 	vmov	d7, r0, r1
 801276c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012774:	f300 826a 	bgt.w	8012c4c <_dtoa_r+0x87c>
 8012778:	eeb1 7b47 	vneg.f64	d7, d7
 801277c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012784:	d423      	bmi.n	80127ce <_dtoa_r+0x3fe>
 8012786:	ed8d 8b02 	vstr	d8, [sp, #8]
 801278a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801278c:	2a00      	cmp	r2, #0
 801278e:	f2c0 8129 	blt.w	80129e4 <_dtoa_r+0x614>
 8012792:	f1b8 0f0e 	cmp.w	r8, #14
 8012796:	f300 8125 	bgt.w	80129e4 <_dtoa_r+0x614>
 801279a:	4b90      	ldr	r3, [pc, #576]	@ (80129dc <_dtoa_r+0x60c>)
 801279c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80127a0:	ed93 6b00 	vldr	d6, [r3]
 80127a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	f280 80c8 	bge.w	801293c <_dtoa_r+0x56c>
 80127ac:	f1ba 0f00 	cmp.w	sl, #0
 80127b0:	f300 80c4 	bgt.w	801293c <_dtoa_r+0x56c>
 80127b4:	d10b      	bne.n	80127ce <_dtoa_r+0x3fe>
 80127b6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80127ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80127be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80127c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ca:	f2c0 823c 	blt.w	8012c46 <_dtoa_r+0x876>
 80127ce:	2400      	movs	r4, #0
 80127d0:	4625      	mov	r5, r4
 80127d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127d4:	43db      	mvns	r3, r3
 80127d6:	9305      	str	r3, [sp, #20]
 80127d8:	463e      	mov	r6, r7
 80127da:	f04f 0800 	mov.w	r8, #0
 80127de:	4621      	mov	r1, r4
 80127e0:	4648      	mov	r0, r9
 80127e2:	f000 ffdf 	bl	80137a4 <_Bfree>
 80127e6:	2d00      	cmp	r5, #0
 80127e8:	f000 80a2 	beq.w	8012930 <_dtoa_r+0x560>
 80127ec:	f1b8 0f00 	cmp.w	r8, #0
 80127f0:	d005      	beq.n	80127fe <_dtoa_r+0x42e>
 80127f2:	45a8      	cmp	r8, r5
 80127f4:	d003      	beq.n	80127fe <_dtoa_r+0x42e>
 80127f6:	4641      	mov	r1, r8
 80127f8:	4648      	mov	r0, r9
 80127fa:	f000 ffd3 	bl	80137a4 <_Bfree>
 80127fe:	4629      	mov	r1, r5
 8012800:	4648      	mov	r0, r9
 8012802:	f000 ffcf 	bl	80137a4 <_Bfree>
 8012806:	e093      	b.n	8012930 <_dtoa_r+0x560>
 8012808:	2202      	movs	r2, #2
 801280a:	e76c      	b.n	80126e6 <_dtoa_r+0x316>
 801280c:	07cc      	lsls	r4, r1, #31
 801280e:	d504      	bpl.n	801281a <_dtoa_r+0x44a>
 8012810:	ed90 6b00 	vldr	d6, [r0]
 8012814:	3201      	adds	r2, #1
 8012816:	ee27 7b06 	vmul.f64	d7, d7, d6
 801281a:	1049      	asrs	r1, r1, #1
 801281c:	3008      	adds	r0, #8
 801281e:	e763      	b.n	80126e8 <_dtoa_r+0x318>
 8012820:	d022      	beq.n	8012868 <_dtoa_r+0x498>
 8012822:	f1c8 0100 	rsb	r1, r8, #0
 8012826:	4a6d      	ldr	r2, [pc, #436]	@ (80129dc <_dtoa_r+0x60c>)
 8012828:	f001 000f 	and.w	r0, r1, #15
 801282c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012830:	ed92 7b00 	vldr	d7, [r2]
 8012834:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012838:	ed8d 7b02 	vstr	d7, [sp, #8]
 801283c:	4868      	ldr	r0, [pc, #416]	@ (80129e0 <_dtoa_r+0x610>)
 801283e:	1109      	asrs	r1, r1, #4
 8012840:	2400      	movs	r4, #0
 8012842:	2202      	movs	r2, #2
 8012844:	b929      	cbnz	r1, 8012852 <_dtoa_r+0x482>
 8012846:	2c00      	cmp	r4, #0
 8012848:	f43f af57 	beq.w	80126fa <_dtoa_r+0x32a>
 801284c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012850:	e753      	b.n	80126fa <_dtoa_r+0x32a>
 8012852:	07ce      	lsls	r6, r1, #31
 8012854:	d505      	bpl.n	8012862 <_dtoa_r+0x492>
 8012856:	ed90 6b00 	vldr	d6, [r0]
 801285a:	3201      	adds	r2, #1
 801285c:	2401      	movs	r4, #1
 801285e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012862:	1049      	asrs	r1, r1, #1
 8012864:	3008      	adds	r0, #8
 8012866:	e7ed      	b.n	8012844 <_dtoa_r+0x474>
 8012868:	2202      	movs	r2, #2
 801286a:	e746      	b.n	80126fa <_dtoa_r+0x32a>
 801286c:	f8cd 8014 	str.w	r8, [sp, #20]
 8012870:	4654      	mov	r4, sl
 8012872:	e762      	b.n	801273a <_dtoa_r+0x36a>
 8012874:	4a59      	ldr	r2, [pc, #356]	@ (80129dc <_dtoa_r+0x60c>)
 8012876:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801287a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801287e:	9a08      	ldr	r2, [sp, #32]
 8012880:	ec41 0b17 	vmov	d7, r0, r1
 8012884:	443c      	add	r4, r7
 8012886:	b34a      	cbz	r2, 80128dc <_dtoa_r+0x50c>
 8012888:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801288c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012890:	463e      	mov	r6, r7
 8012892:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012896:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801289a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801289e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80128a2:	ee14 2a90 	vmov	r2, s9
 80128a6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80128aa:	3230      	adds	r2, #48	@ 0x30
 80128ac:	ee36 6b45 	vsub.f64	d6, d6, d5
 80128b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b8:	f806 2b01 	strb.w	r2, [r6], #1
 80128bc:	d438      	bmi.n	8012930 <_dtoa_r+0x560>
 80128be:	ee32 5b46 	vsub.f64	d5, d2, d6
 80128c2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80128c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ca:	d46e      	bmi.n	80129aa <_dtoa_r+0x5da>
 80128cc:	42a6      	cmp	r6, r4
 80128ce:	f43f af5a 	beq.w	8012786 <_dtoa_r+0x3b6>
 80128d2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80128d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80128da:	e7e0      	b.n	801289e <_dtoa_r+0x4ce>
 80128dc:	4621      	mov	r1, r4
 80128de:	463e      	mov	r6, r7
 80128e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80128e4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80128e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80128ec:	ee14 2a90 	vmov	r2, s9
 80128f0:	3230      	adds	r2, #48	@ 0x30
 80128f2:	f806 2b01 	strb.w	r2, [r6], #1
 80128f6:	42a6      	cmp	r6, r4
 80128f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80128fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012900:	d119      	bne.n	8012936 <_dtoa_r+0x566>
 8012902:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012906:	ee37 4b05 	vadd.f64	d4, d7, d5
 801290a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801290e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012912:	dc4a      	bgt.n	80129aa <_dtoa_r+0x5da>
 8012914:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012918:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012920:	f57f af31 	bpl.w	8012786 <_dtoa_r+0x3b6>
 8012924:	460e      	mov	r6, r1
 8012926:	3901      	subs	r1, #1
 8012928:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801292c:	2b30      	cmp	r3, #48	@ 0x30
 801292e:	d0f9      	beq.n	8012924 <_dtoa_r+0x554>
 8012930:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012934:	e027      	b.n	8012986 <_dtoa_r+0x5b6>
 8012936:	ee26 6b03 	vmul.f64	d6, d6, d3
 801293a:	e7d5      	b.n	80128e8 <_dtoa_r+0x518>
 801293c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012940:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012944:	463e      	mov	r6, r7
 8012946:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801294a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801294e:	ee15 3a10 	vmov	r3, s10
 8012952:	3330      	adds	r3, #48	@ 0x30
 8012954:	f806 3b01 	strb.w	r3, [r6], #1
 8012958:	1bf3      	subs	r3, r6, r7
 801295a:	459a      	cmp	sl, r3
 801295c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012960:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012964:	d132      	bne.n	80129cc <_dtoa_r+0x5fc>
 8012966:	ee37 7b07 	vadd.f64	d7, d7, d7
 801296a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801296e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012972:	dc18      	bgt.n	80129a6 <_dtoa_r+0x5d6>
 8012974:	eeb4 7b46 	vcmp.f64	d7, d6
 8012978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297c:	d103      	bne.n	8012986 <_dtoa_r+0x5b6>
 801297e:	ee15 3a10 	vmov	r3, s10
 8012982:	07db      	lsls	r3, r3, #31
 8012984:	d40f      	bmi.n	80129a6 <_dtoa_r+0x5d6>
 8012986:	9901      	ldr	r1, [sp, #4]
 8012988:	4648      	mov	r0, r9
 801298a:	f000 ff0b 	bl	80137a4 <_Bfree>
 801298e:	2300      	movs	r3, #0
 8012990:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012992:	7033      	strb	r3, [r6, #0]
 8012994:	f108 0301 	add.w	r3, r8, #1
 8012998:	6013      	str	r3, [r2, #0]
 801299a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801299c:	2b00      	cmp	r3, #0
 801299e:	f000 824b 	beq.w	8012e38 <_dtoa_r+0xa68>
 80129a2:	601e      	str	r6, [r3, #0]
 80129a4:	e248      	b.n	8012e38 <_dtoa_r+0xa68>
 80129a6:	f8cd 8014 	str.w	r8, [sp, #20]
 80129aa:	4633      	mov	r3, r6
 80129ac:	461e      	mov	r6, r3
 80129ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80129b2:	2a39      	cmp	r2, #57	@ 0x39
 80129b4:	d106      	bne.n	80129c4 <_dtoa_r+0x5f4>
 80129b6:	429f      	cmp	r7, r3
 80129b8:	d1f8      	bne.n	80129ac <_dtoa_r+0x5dc>
 80129ba:	9a05      	ldr	r2, [sp, #20]
 80129bc:	3201      	adds	r2, #1
 80129be:	9205      	str	r2, [sp, #20]
 80129c0:	2230      	movs	r2, #48	@ 0x30
 80129c2:	703a      	strb	r2, [r7, #0]
 80129c4:	781a      	ldrb	r2, [r3, #0]
 80129c6:	3201      	adds	r2, #1
 80129c8:	701a      	strb	r2, [r3, #0]
 80129ca:	e7b1      	b.n	8012930 <_dtoa_r+0x560>
 80129cc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80129d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80129d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d8:	d1b5      	bne.n	8012946 <_dtoa_r+0x576>
 80129da:	e7d4      	b.n	8012986 <_dtoa_r+0x5b6>
 80129dc:	08015168 	.word	0x08015168
 80129e0:	08015140 	.word	0x08015140
 80129e4:	9908      	ldr	r1, [sp, #32]
 80129e6:	2900      	cmp	r1, #0
 80129e8:	f000 80e9 	beq.w	8012bbe <_dtoa_r+0x7ee>
 80129ec:	9907      	ldr	r1, [sp, #28]
 80129ee:	2901      	cmp	r1, #1
 80129f0:	f300 80cb 	bgt.w	8012b8a <_dtoa_r+0x7ba>
 80129f4:	2d00      	cmp	r5, #0
 80129f6:	f000 80c4 	beq.w	8012b82 <_dtoa_r+0x7b2>
 80129fa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80129fe:	9e04      	ldr	r6, [sp, #16]
 8012a00:	461c      	mov	r4, r3
 8012a02:	9305      	str	r3, [sp, #20]
 8012a04:	9b04      	ldr	r3, [sp, #16]
 8012a06:	4413      	add	r3, r2
 8012a08:	9304      	str	r3, [sp, #16]
 8012a0a:	9b06      	ldr	r3, [sp, #24]
 8012a0c:	2101      	movs	r1, #1
 8012a0e:	4413      	add	r3, r2
 8012a10:	4648      	mov	r0, r9
 8012a12:	9306      	str	r3, [sp, #24]
 8012a14:	f000 ffc4 	bl	80139a0 <__i2b>
 8012a18:	9b05      	ldr	r3, [sp, #20]
 8012a1a:	4605      	mov	r5, r0
 8012a1c:	b166      	cbz	r6, 8012a38 <_dtoa_r+0x668>
 8012a1e:	9a06      	ldr	r2, [sp, #24]
 8012a20:	2a00      	cmp	r2, #0
 8012a22:	dd09      	ble.n	8012a38 <_dtoa_r+0x668>
 8012a24:	42b2      	cmp	r2, r6
 8012a26:	9904      	ldr	r1, [sp, #16]
 8012a28:	bfa8      	it	ge
 8012a2a:	4632      	movge	r2, r6
 8012a2c:	1a89      	subs	r1, r1, r2
 8012a2e:	9104      	str	r1, [sp, #16]
 8012a30:	9906      	ldr	r1, [sp, #24]
 8012a32:	1ab6      	subs	r6, r6, r2
 8012a34:	1a8a      	subs	r2, r1, r2
 8012a36:	9206      	str	r2, [sp, #24]
 8012a38:	b30b      	cbz	r3, 8012a7e <_dtoa_r+0x6ae>
 8012a3a:	9a08      	ldr	r2, [sp, #32]
 8012a3c:	2a00      	cmp	r2, #0
 8012a3e:	f000 80c5 	beq.w	8012bcc <_dtoa_r+0x7fc>
 8012a42:	2c00      	cmp	r4, #0
 8012a44:	f000 80bf 	beq.w	8012bc6 <_dtoa_r+0x7f6>
 8012a48:	4629      	mov	r1, r5
 8012a4a:	4622      	mov	r2, r4
 8012a4c:	4648      	mov	r0, r9
 8012a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a50:	f001 f85e 	bl	8013b10 <__pow5mult>
 8012a54:	9a01      	ldr	r2, [sp, #4]
 8012a56:	4601      	mov	r1, r0
 8012a58:	4605      	mov	r5, r0
 8012a5a:	4648      	mov	r0, r9
 8012a5c:	f000 ffb6 	bl	80139cc <__multiply>
 8012a60:	9901      	ldr	r1, [sp, #4]
 8012a62:	9005      	str	r0, [sp, #20]
 8012a64:	4648      	mov	r0, r9
 8012a66:	f000 fe9d 	bl	80137a4 <_Bfree>
 8012a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a6c:	1b1b      	subs	r3, r3, r4
 8012a6e:	f000 80b0 	beq.w	8012bd2 <_dtoa_r+0x802>
 8012a72:	9905      	ldr	r1, [sp, #20]
 8012a74:	461a      	mov	r2, r3
 8012a76:	4648      	mov	r0, r9
 8012a78:	f001 f84a 	bl	8013b10 <__pow5mult>
 8012a7c:	9001      	str	r0, [sp, #4]
 8012a7e:	2101      	movs	r1, #1
 8012a80:	4648      	mov	r0, r9
 8012a82:	f000 ff8d 	bl	80139a0 <__i2b>
 8012a86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a88:	4604      	mov	r4, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f000 81da 	beq.w	8012e44 <_dtoa_r+0xa74>
 8012a90:	461a      	mov	r2, r3
 8012a92:	4601      	mov	r1, r0
 8012a94:	4648      	mov	r0, r9
 8012a96:	f001 f83b 	bl	8013b10 <__pow5mult>
 8012a9a:	9b07      	ldr	r3, [sp, #28]
 8012a9c:	2b01      	cmp	r3, #1
 8012a9e:	4604      	mov	r4, r0
 8012aa0:	f300 80a0 	bgt.w	8012be4 <_dtoa_r+0x814>
 8012aa4:	9b02      	ldr	r3, [sp, #8]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	f040 8096 	bne.w	8012bd8 <_dtoa_r+0x808>
 8012aac:	9b03      	ldr	r3, [sp, #12]
 8012aae:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012ab2:	2a00      	cmp	r2, #0
 8012ab4:	f040 8092 	bne.w	8012bdc <_dtoa_r+0x80c>
 8012ab8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012abc:	0d12      	lsrs	r2, r2, #20
 8012abe:	0512      	lsls	r2, r2, #20
 8012ac0:	2a00      	cmp	r2, #0
 8012ac2:	f000 808d 	beq.w	8012be0 <_dtoa_r+0x810>
 8012ac6:	9b04      	ldr	r3, [sp, #16]
 8012ac8:	3301      	adds	r3, #1
 8012aca:	9304      	str	r3, [sp, #16]
 8012acc:	9b06      	ldr	r3, [sp, #24]
 8012ace:	3301      	adds	r3, #1
 8012ad0:	9306      	str	r3, [sp, #24]
 8012ad2:	2301      	movs	r3, #1
 8012ad4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 81b9 	beq.w	8012e50 <_dtoa_r+0xa80>
 8012ade:	6922      	ldr	r2, [r4, #16]
 8012ae0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012ae4:	6910      	ldr	r0, [r2, #16]
 8012ae6:	f000 ff0f 	bl	8013908 <__hi0bits>
 8012aea:	f1c0 0020 	rsb	r0, r0, #32
 8012aee:	9b06      	ldr	r3, [sp, #24]
 8012af0:	4418      	add	r0, r3
 8012af2:	f010 001f 	ands.w	r0, r0, #31
 8012af6:	f000 8081 	beq.w	8012bfc <_dtoa_r+0x82c>
 8012afa:	f1c0 0220 	rsb	r2, r0, #32
 8012afe:	2a04      	cmp	r2, #4
 8012b00:	dd73      	ble.n	8012bea <_dtoa_r+0x81a>
 8012b02:	9b04      	ldr	r3, [sp, #16]
 8012b04:	f1c0 001c 	rsb	r0, r0, #28
 8012b08:	4403      	add	r3, r0
 8012b0a:	9304      	str	r3, [sp, #16]
 8012b0c:	9b06      	ldr	r3, [sp, #24]
 8012b0e:	4406      	add	r6, r0
 8012b10:	4403      	add	r3, r0
 8012b12:	9306      	str	r3, [sp, #24]
 8012b14:	9b04      	ldr	r3, [sp, #16]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	dd05      	ble.n	8012b26 <_dtoa_r+0x756>
 8012b1a:	9901      	ldr	r1, [sp, #4]
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	4648      	mov	r0, r9
 8012b20:	f001 f850 	bl	8013bc4 <__lshift>
 8012b24:	9001      	str	r0, [sp, #4]
 8012b26:	9b06      	ldr	r3, [sp, #24]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	dd05      	ble.n	8012b38 <_dtoa_r+0x768>
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	461a      	mov	r2, r3
 8012b30:	4648      	mov	r0, r9
 8012b32:	f001 f847 	bl	8013bc4 <__lshift>
 8012b36:	4604      	mov	r4, r0
 8012b38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d060      	beq.n	8012c00 <_dtoa_r+0x830>
 8012b3e:	9801      	ldr	r0, [sp, #4]
 8012b40:	4621      	mov	r1, r4
 8012b42:	f001 f8ab 	bl	8013c9c <__mcmp>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	da5a      	bge.n	8012c00 <_dtoa_r+0x830>
 8012b4a:	f108 33ff 	add.w	r3, r8, #4294967295
 8012b4e:	9305      	str	r3, [sp, #20]
 8012b50:	9901      	ldr	r1, [sp, #4]
 8012b52:	2300      	movs	r3, #0
 8012b54:	220a      	movs	r2, #10
 8012b56:	4648      	mov	r0, r9
 8012b58:	f000 fe46 	bl	80137e8 <__multadd>
 8012b5c:	9b08      	ldr	r3, [sp, #32]
 8012b5e:	9001      	str	r0, [sp, #4]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	f000 8177 	beq.w	8012e54 <_dtoa_r+0xa84>
 8012b66:	4629      	mov	r1, r5
 8012b68:	2300      	movs	r3, #0
 8012b6a:	220a      	movs	r2, #10
 8012b6c:	4648      	mov	r0, r9
 8012b6e:	f000 fe3b 	bl	80137e8 <__multadd>
 8012b72:	f1bb 0f00 	cmp.w	fp, #0
 8012b76:	4605      	mov	r5, r0
 8012b78:	dc6e      	bgt.n	8012c58 <_dtoa_r+0x888>
 8012b7a:	9b07      	ldr	r3, [sp, #28]
 8012b7c:	2b02      	cmp	r3, #2
 8012b7e:	dc48      	bgt.n	8012c12 <_dtoa_r+0x842>
 8012b80:	e06a      	b.n	8012c58 <_dtoa_r+0x888>
 8012b82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012b88:	e739      	b.n	80129fe <_dtoa_r+0x62e>
 8012b8a:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012b8e:	42a3      	cmp	r3, r4
 8012b90:	db07      	blt.n	8012ba2 <_dtoa_r+0x7d2>
 8012b92:	f1ba 0f00 	cmp.w	sl, #0
 8012b96:	eba3 0404 	sub.w	r4, r3, r4
 8012b9a:	db0b      	blt.n	8012bb4 <_dtoa_r+0x7e4>
 8012b9c:	9e04      	ldr	r6, [sp, #16]
 8012b9e:	4652      	mov	r2, sl
 8012ba0:	e72f      	b.n	8012a02 <_dtoa_r+0x632>
 8012ba2:	1ae2      	subs	r2, r4, r3
 8012ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ba6:	9e04      	ldr	r6, [sp, #16]
 8012ba8:	4413      	add	r3, r2
 8012baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bac:	4652      	mov	r2, sl
 8012bae:	4623      	mov	r3, r4
 8012bb0:	2400      	movs	r4, #0
 8012bb2:	e726      	b.n	8012a02 <_dtoa_r+0x632>
 8012bb4:	9a04      	ldr	r2, [sp, #16]
 8012bb6:	eba2 060a 	sub.w	r6, r2, sl
 8012bba:	2200      	movs	r2, #0
 8012bbc:	e721      	b.n	8012a02 <_dtoa_r+0x632>
 8012bbe:	9e04      	ldr	r6, [sp, #16]
 8012bc0:	9d08      	ldr	r5, [sp, #32]
 8012bc2:	461c      	mov	r4, r3
 8012bc4:	e72a      	b.n	8012a1c <_dtoa_r+0x64c>
 8012bc6:	9a01      	ldr	r2, [sp, #4]
 8012bc8:	9205      	str	r2, [sp, #20]
 8012bca:	e752      	b.n	8012a72 <_dtoa_r+0x6a2>
 8012bcc:	9901      	ldr	r1, [sp, #4]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	e751      	b.n	8012a76 <_dtoa_r+0x6a6>
 8012bd2:	9b05      	ldr	r3, [sp, #20]
 8012bd4:	9301      	str	r3, [sp, #4]
 8012bd6:	e752      	b.n	8012a7e <_dtoa_r+0x6ae>
 8012bd8:	2300      	movs	r3, #0
 8012bda:	e77b      	b.n	8012ad4 <_dtoa_r+0x704>
 8012bdc:	9b02      	ldr	r3, [sp, #8]
 8012bde:	e779      	b.n	8012ad4 <_dtoa_r+0x704>
 8012be0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012be2:	e778      	b.n	8012ad6 <_dtoa_r+0x706>
 8012be4:	2300      	movs	r3, #0
 8012be6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012be8:	e779      	b.n	8012ade <_dtoa_r+0x70e>
 8012bea:	d093      	beq.n	8012b14 <_dtoa_r+0x744>
 8012bec:	9b04      	ldr	r3, [sp, #16]
 8012bee:	321c      	adds	r2, #28
 8012bf0:	4413      	add	r3, r2
 8012bf2:	9304      	str	r3, [sp, #16]
 8012bf4:	9b06      	ldr	r3, [sp, #24]
 8012bf6:	4416      	add	r6, r2
 8012bf8:	4413      	add	r3, r2
 8012bfa:	e78a      	b.n	8012b12 <_dtoa_r+0x742>
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	e7f5      	b.n	8012bec <_dtoa_r+0x81c>
 8012c00:	f1ba 0f00 	cmp.w	sl, #0
 8012c04:	f8cd 8014 	str.w	r8, [sp, #20]
 8012c08:	46d3      	mov	fp, sl
 8012c0a:	dc21      	bgt.n	8012c50 <_dtoa_r+0x880>
 8012c0c:	9b07      	ldr	r3, [sp, #28]
 8012c0e:	2b02      	cmp	r3, #2
 8012c10:	dd1e      	ble.n	8012c50 <_dtoa_r+0x880>
 8012c12:	f1bb 0f00 	cmp.w	fp, #0
 8012c16:	f47f addc 	bne.w	80127d2 <_dtoa_r+0x402>
 8012c1a:	4621      	mov	r1, r4
 8012c1c:	465b      	mov	r3, fp
 8012c1e:	2205      	movs	r2, #5
 8012c20:	4648      	mov	r0, r9
 8012c22:	f000 fde1 	bl	80137e8 <__multadd>
 8012c26:	4601      	mov	r1, r0
 8012c28:	4604      	mov	r4, r0
 8012c2a:	9801      	ldr	r0, [sp, #4]
 8012c2c:	f001 f836 	bl	8013c9c <__mcmp>
 8012c30:	2800      	cmp	r0, #0
 8012c32:	f77f adce 	ble.w	80127d2 <_dtoa_r+0x402>
 8012c36:	463e      	mov	r6, r7
 8012c38:	2331      	movs	r3, #49	@ 0x31
 8012c3a:	f806 3b01 	strb.w	r3, [r6], #1
 8012c3e:	9b05      	ldr	r3, [sp, #20]
 8012c40:	3301      	adds	r3, #1
 8012c42:	9305      	str	r3, [sp, #20]
 8012c44:	e5c9      	b.n	80127da <_dtoa_r+0x40a>
 8012c46:	f8cd 8014 	str.w	r8, [sp, #20]
 8012c4a:	4654      	mov	r4, sl
 8012c4c:	4625      	mov	r5, r4
 8012c4e:	e7f2      	b.n	8012c36 <_dtoa_r+0x866>
 8012c50:	9b08      	ldr	r3, [sp, #32]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f000 8102 	beq.w	8012e5c <_dtoa_r+0xa8c>
 8012c58:	2e00      	cmp	r6, #0
 8012c5a:	dd05      	ble.n	8012c68 <_dtoa_r+0x898>
 8012c5c:	4629      	mov	r1, r5
 8012c5e:	4632      	mov	r2, r6
 8012c60:	4648      	mov	r0, r9
 8012c62:	f000 ffaf 	bl	8013bc4 <__lshift>
 8012c66:	4605      	mov	r5, r0
 8012c68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d058      	beq.n	8012d20 <_dtoa_r+0x950>
 8012c6e:	6869      	ldr	r1, [r5, #4]
 8012c70:	4648      	mov	r0, r9
 8012c72:	f000 fd57 	bl	8013724 <_Balloc>
 8012c76:	4606      	mov	r6, r0
 8012c78:	b928      	cbnz	r0, 8012c86 <_dtoa_r+0x8b6>
 8012c7a:	4b82      	ldr	r3, [pc, #520]	@ (8012e84 <_dtoa_r+0xab4>)
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012c82:	f7ff bbbe 	b.w	8012402 <_dtoa_r+0x32>
 8012c86:	692a      	ldr	r2, [r5, #16]
 8012c88:	3202      	adds	r2, #2
 8012c8a:	0092      	lsls	r2, r2, #2
 8012c8c:	f105 010c 	add.w	r1, r5, #12
 8012c90:	300c      	adds	r0, #12
 8012c92:	f7ff faf6 	bl	8012282 <memcpy>
 8012c96:	2201      	movs	r2, #1
 8012c98:	4631      	mov	r1, r6
 8012c9a:	4648      	mov	r0, r9
 8012c9c:	f000 ff92 	bl	8013bc4 <__lshift>
 8012ca0:	1c7b      	adds	r3, r7, #1
 8012ca2:	9304      	str	r3, [sp, #16]
 8012ca4:	eb07 030b 	add.w	r3, r7, fp
 8012ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012caa:	9b02      	ldr	r3, [sp, #8]
 8012cac:	f003 0301 	and.w	r3, r3, #1
 8012cb0:	46a8      	mov	r8, r5
 8012cb2:	9308      	str	r3, [sp, #32]
 8012cb4:	4605      	mov	r5, r0
 8012cb6:	9b04      	ldr	r3, [sp, #16]
 8012cb8:	9801      	ldr	r0, [sp, #4]
 8012cba:	4621      	mov	r1, r4
 8012cbc:	f103 3bff 	add.w	fp, r3, #4294967295
 8012cc0:	f7ff fafc 	bl	80122bc <quorem>
 8012cc4:	4641      	mov	r1, r8
 8012cc6:	9002      	str	r0, [sp, #8]
 8012cc8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012ccc:	9801      	ldr	r0, [sp, #4]
 8012cce:	f000 ffe5 	bl	8013c9c <__mcmp>
 8012cd2:	462a      	mov	r2, r5
 8012cd4:	9006      	str	r0, [sp, #24]
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	4648      	mov	r0, r9
 8012cda:	f000 fffb 	bl	8013cd4 <__mdiff>
 8012cde:	68c2      	ldr	r2, [r0, #12]
 8012ce0:	4606      	mov	r6, r0
 8012ce2:	b9fa      	cbnz	r2, 8012d24 <_dtoa_r+0x954>
 8012ce4:	4601      	mov	r1, r0
 8012ce6:	9801      	ldr	r0, [sp, #4]
 8012ce8:	f000 ffd8 	bl	8013c9c <__mcmp>
 8012cec:	4602      	mov	r2, r0
 8012cee:	4631      	mov	r1, r6
 8012cf0:	4648      	mov	r0, r9
 8012cf2:	920a      	str	r2, [sp, #40]	@ 0x28
 8012cf4:	f000 fd56 	bl	80137a4 <_Bfree>
 8012cf8:	9b07      	ldr	r3, [sp, #28]
 8012cfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012cfc:	9e04      	ldr	r6, [sp, #16]
 8012cfe:	ea42 0103 	orr.w	r1, r2, r3
 8012d02:	9b08      	ldr	r3, [sp, #32]
 8012d04:	4319      	orrs	r1, r3
 8012d06:	d10f      	bne.n	8012d28 <_dtoa_r+0x958>
 8012d08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012d0c:	d028      	beq.n	8012d60 <_dtoa_r+0x990>
 8012d0e:	9b06      	ldr	r3, [sp, #24]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	dd02      	ble.n	8012d1a <_dtoa_r+0x94a>
 8012d14:	9b02      	ldr	r3, [sp, #8]
 8012d16:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012d1a:	f88b a000 	strb.w	sl, [fp]
 8012d1e:	e55e      	b.n	80127de <_dtoa_r+0x40e>
 8012d20:	4628      	mov	r0, r5
 8012d22:	e7bd      	b.n	8012ca0 <_dtoa_r+0x8d0>
 8012d24:	2201      	movs	r2, #1
 8012d26:	e7e2      	b.n	8012cee <_dtoa_r+0x91e>
 8012d28:	9b06      	ldr	r3, [sp, #24]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	db04      	blt.n	8012d38 <_dtoa_r+0x968>
 8012d2e:	9907      	ldr	r1, [sp, #28]
 8012d30:	430b      	orrs	r3, r1
 8012d32:	9908      	ldr	r1, [sp, #32]
 8012d34:	430b      	orrs	r3, r1
 8012d36:	d120      	bne.n	8012d7a <_dtoa_r+0x9aa>
 8012d38:	2a00      	cmp	r2, #0
 8012d3a:	ddee      	ble.n	8012d1a <_dtoa_r+0x94a>
 8012d3c:	9901      	ldr	r1, [sp, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	4648      	mov	r0, r9
 8012d42:	f000 ff3f 	bl	8013bc4 <__lshift>
 8012d46:	4621      	mov	r1, r4
 8012d48:	9001      	str	r0, [sp, #4]
 8012d4a:	f000 ffa7 	bl	8013c9c <__mcmp>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	dc03      	bgt.n	8012d5a <_dtoa_r+0x98a>
 8012d52:	d1e2      	bne.n	8012d1a <_dtoa_r+0x94a>
 8012d54:	f01a 0f01 	tst.w	sl, #1
 8012d58:	d0df      	beq.n	8012d1a <_dtoa_r+0x94a>
 8012d5a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012d5e:	d1d9      	bne.n	8012d14 <_dtoa_r+0x944>
 8012d60:	2339      	movs	r3, #57	@ 0x39
 8012d62:	f88b 3000 	strb.w	r3, [fp]
 8012d66:	4633      	mov	r3, r6
 8012d68:	461e      	mov	r6, r3
 8012d6a:	3b01      	subs	r3, #1
 8012d6c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012d70:	2a39      	cmp	r2, #57	@ 0x39
 8012d72:	d052      	beq.n	8012e1a <_dtoa_r+0xa4a>
 8012d74:	3201      	adds	r2, #1
 8012d76:	701a      	strb	r2, [r3, #0]
 8012d78:	e531      	b.n	80127de <_dtoa_r+0x40e>
 8012d7a:	2a00      	cmp	r2, #0
 8012d7c:	dd07      	ble.n	8012d8e <_dtoa_r+0x9be>
 8012d7e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012d82:	d0ed      	beq.n	8012d60 <_dtoa_r+0x990>
 8012d84:	f10a 0301 	add.w	r3, sl, #1
 8012d88:	f88b 3000 	strb.w	r3, [fp]
 8012d8c:	e527      	b.n	80127de <_dtoa_r+0x40e>
 8012d8e:	9b04      	ldr	r3, [sp, #16]
 8012d90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d92:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012d96:	4293      	cmp	r3, r2
 8012d98:	d029      	beq.n	8012dee <_dtoa_r+0xa1e>
 8012d9a:	9901      	ldr	r1, [sp, #4]
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	220a      	movs	r2, #10
 8012da0:	4648      	mov	r0, r9
 8012da2:	f000 fd21 	bl	80137e8 <__multadd>
 8012da6:	45a8      	cmp	r8, r5
 8012da8:	9001      	str	r0, [sp, #4]
 8012daa:	f04f 0300 	mov.w	r3, #0
 8012dae:	f04f 020a 	mov.w	r2, #10
 8012db2:	4641      	mov	r1, r8
 8012db4:	4648      	mov	r0, r9
 8012db6:	d107      	bne.n	8012dc8 <_dtoa_r+0x9f8>
 8012db8:	f000 fd16 	bl	80137e8 <__multadd>
 8012dbc:	4680      	mov	r8, r0
 8012dbe:	4605      	mov	r5, r0
 8012dc0:	9b04      	ldr	r3, [sp, #16]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	9304      	str	r3, [sp, #16]
 8012dc6:	e776      	b.n	8012cb6 <_dtoa_r+0x8e6>
 8012dc8:	f000 fd0e 	bl	80137e8 <__multadd>
 8012dcc:	4629      	mov	r1, r5
 8012dce:	4680      	mov	r8, r0
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	220a      	movs	r2, #10
 8012dd4:	4648      	mov	r0, r9
 8012dd6:	f000 fd07 	bl	80137e8 <__multadd>
 8012dda:	4605      	mov	r5, r0
 8012ddc:	e7f0      	b.n	8012dc0 <_dtoa_r+0x9f0>
 8012dde:	f1bb 0f00 	cmp.w	fp, #0
 8012de2:	bfcc      	ite	gt
 8012de4:	465e      	movgt	r6, fp
 8012de6:	2601      	movle	r6, #1
 8012de8:	443e      	add	r6, r7
 8012dea:	f04f 0800 	mov.w	r8, #0
 8012dee:	9901      	ldr	r1, [sp, #4]
 8012df0:	2201      	movs	r2, #1
 8012df2:	4648      	mov	r0, r9
 8012df4:	f000 fee6 	bl	8013bc4 <__lshift>
 8012df8:	4621      	mov	r1, r4
 8012dfa:	9001      	str	r0, [sp, #4]
 8012dfc:	f000 ff4e 	bl	8013c9c <__mcmp>
 8012e00:	2800      	cmp	r0, #0
 8012e02:	dcb0      	bgt.n	8012d66 <_dtoa_r+0x996>
 8012e04:	d102      	bne.n	8012e0c <_dtoa_r+0xa3c>
 8012e06:	f01a 0f01 	tst.w	sl, #1
 8012e0a:	d1ac      	bne.n	8012d66 <_dtoa_r+0x996>
 8012e0c:	4633      	mov	r3, r6
 8012e0e:	461e      	mov	r6, r3
 8012e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012e14:	2a30      	cmp	r2, #48	@ 0x30
 8012e16:	d0fa      	beq.n	8012e0e <_dtoa_r+0xa3e>
 8012e18:	e4e1      	b.n	80127de <_dtoa_r+0x40e>
 8012e1a:	429f      	cmp	r7, r3
 8012e1c:	d1a4      	bne.n	8012d68 <_dtoa_r+0x998>
 8012e1e:	9b05      	ldr	r3, [sp, #20]
 8012e20:	3301      	adds	r3, #1
 8012e22:	9305      	str	r3, [sp, #20]
 8012e24:	2331      	movs	r3, #49	@ 0x31
 8012e26:	703b      	strb	r3, [r7, #0]
 8012e28:	e4d9      	b.n	80127de <_dtoa_r+0x40e>
 8012e2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012e2c:	4f16      	ldr	r7, [pc, #88]	@ (8012e88 <_dtoa_r+0xab8>)
 8012e2e:	b11b      	cbz	r3, 8012e38 <_dtoa_r+0xa68>
 8012e30:	f107 0308 	add.w	r3, r7, #8
 8012e34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012e36:	6013      	str	r3, [r2, #0]
 8012e38:	4638      	mov	r0, r7
 8012e3a:	b011      	add	sp, #68	@ 0x44
 8012e3c:	ecbd 8b02 	vpop	{d8}
 8012e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e44:	9b07      	ldr	r3, [sp, #28]
 8012e46:	2b01      	cmp	r3, #1
 8012e48:	f77f ae2c 	ble.w	8012aa4 <_dtoa_r+0x6d4>
 8012e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e50:	2001      	movs	r0, #1
 8012e52:	e64c      	b.n	8012aee <_dtoa_r+0x71e>
 8012e54:	f1bb 0f00 	cmp.w	fp, #0
 8012e58:	f77f aed8 	ble.w	8012c0c <_dtoa_r+0x83c>
 8012e5c:	463e      	mov	r6, r7
 8012e5e:	9801      	ldr	r0, [sp, #4]
 8012e60:	4621      	mov	r1, r4
 8012e62:	f7ff fa2b 	bl	80122bc <quorem>
 8012e66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012e6a:	f806 ab01 	strb.w	sl, [r6], #1
 8012e6e:	1bf2      	subs	r2, r6, r7
 8012e70:	4593      	cmp	fp, r2
 8012e72:	ddb4      	ble.n	8012dde <_dtoa_r+0xa0e>
 8012e74:	9901      	ldr	r1, [sp, #4]
 8012e76:	2300      	movs	r3, #0
 8012e78:	220a      	movs	r2, #10
 8012e7a:	4648      	mov	r0, r9
 8012e7c:	f000 fcb4 	bl	80137e8 <__multadd>
 8012e80:	9001      	str	r0, [sp, #4]
 8012e82:	e7ec      	b.n	8012e5e <_dtoa_r+0xa8e>
 8012e84:	08014fc6 	.word	0x08014fc6
 8012e88:	08014f4a 	.word	0x08014f4a

08012e8c <_free_r>:
 8012e8c:	b538      	push	{r3, r4, r5, lr}
 8012e8e:	4605      	mov	r5, r0
 8012e90:	2900      	cmp	r1, #0
 8012e92:	d041      	beq.n	8012f18 <_free_r+0x8c>
 8012e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e98:	1f0c      	subs	r4, r1, #4
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	bfb8      	it	lt
 8012e9e:	18e4      	addlt	r4, r4, r3
 8012ea0:	f000 fc34 	bl	801370c <__malloc_lock>
 8012ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8012f1c <_free_r+0x90>)
 8012ea6:	6813      	ldr	r3, [r2, #0]
 8012ea8:	b933      	cbnz	r3, 8012eb8 <_free_r+0x2c>
 8012eaa:	6063      	str	r3, [r4, #4]
 8012eac:	6014      	str	r4, [r2, #0]
 8012eae:	4628      	mov	r0, r5
 8012eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eb4:	f000 bc30 	b.w	8013718 <__malloc_unlock>
 8012eb8:	42a3      	cmp	r3, r4
 8012eba:	d908      	bls.n	8012ece <_free_r+0x42>
 8012ebc:	6820      	ldr	r0, [r4, #0]
 8012ebe:	1821      	adds	r1, r4, r0
 8012ec0:	428b      	cmp	r3, r1
 8012ec2:	bf01      	itttt	eq
 8012ec4:	6819      	ldreq	r1, [r3, #0]
 8012ec6:	685b      	ldreq	r3, [r3, #4]
 8012ec8:	1809      	addeq	r1, r1, r0
 8012eca:	6021      	streq	r1, [r4, #0]
 8012ecc:	e7ed      	b.n	8012eaa <_free_r+0x1e>
 8012ece:	461a      	mov	r2, r3
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	b10b      	cbz	r3, 8012ed8 <_free_r+0x4c>
 8012ed4:	42a3      	cmp	r3, r4
 8012ed6:	d9fa      	bls.n	8012ece <_free_r+0x42>
 8012ed8:	6811      	ldr	r1, [r2, #0]
 8012eda:	1850      	adds	r0, r2, r1
 8012edc:	42a0      	cmp	r0, r4
 8012ede:	d10b      	bne.n	8012ef8 <_free_r+0x6c>
 8012ee0:	6820      	ldr	r0, [r4, #0]
 8012ee2:	4401      	add	r1, r0
 8012ee4:	1850      	adds	r0, r2, r1
 8012ee6:	4283      	cmp	r3, r0
 8012ee8:	6011      	str	r1, [r2, #0]
 8012eea:	d1e0      	bne.n	8012eae <_free_r+0x22>
 8012eec:	6818      	ldr	r0, [r3, #0]
 8012eee:	685b      	ldr	r3, [r3, #4]
 8012ef0:	6053      	str	r3, [r2, #4]
 8012ef2:	4408      	add	r0, r1
 8012ef4:	6010      	str	r0, [r2, #0]
 8012ef6:	e7da      	b.n	8012eae <_free_r+0x22>
 8012ef8:	d902      	bls.n	8012f00 <_free_r+0x74>
 8012efa:	230c      	movs	r3, #12
 8012efc:	602b      	str	r3, [r5, #0]
 8012efe:	e7d6      	b.n	8012eae <_free_r+0x22>
 8012f00:	6820      	ldr	r0, [r4, #0]
 8012f02:	1821      	adds	r1, r4, r0
 8012f04:	428b      	cmp	r3, r1
 8012f06:	bf04      	itt	eq
 8012f08:	6819      	ldreq	r1, [r3, #0]
 8012f0a:	685b      	ldreq	r3, [r3, #4]
 8012f0c:	6063      	str	r3, [r4, #4]
 8012f0e:	bf04      	itt	eq
 8012f10:	1809      	addeq	r1, r1, r0
 8012f12:	6021      	streq	r1, [r4, #0]
 8012f14:	6054      	str	r4, [r2, #4]
 8012f16:	e7ca      	b.n	8012eae <_free_r+0x22>
 8012f18:	bd38      	pop	{r3, r4, r5, pc}
 8012f1a:	bf00      	nop
 8012f1c:	24006214 	.word	0x24006214

08012f20 <rshift>:
 8012f20:	6903      	ldr	r3, [r0, #16]
 8012f22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012f26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012f2e:	f100 0414 	add.w	r4, r0, #20
 8012f32:	dd45      	ble.n	8012fc0 <rshift+0xa0>
 8012f34:	f011 011f 	ands.w	r1, r1, #31
 8012f38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012f3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012f40:	d10c      	bne.n	8012f5c <rshift+0x3c>
 8012f42:	f100 0710 	add.w	r7, r0, #16
 8012f46:	4629      	mov	r1, r5
 8012f48:	42b1      	cmp	r1, r6
 8012f4a:	d334      	bcc.n	8012fb6 <rshift+0x96>
 8012f4c:	1a9b      	subs	r3, r3, r2
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	1eea      	subs	r2, r5, #3
 8012f52:	4296      	cmp	r6, r2
 8012f54:	bf38      	it	cc
 8012f56:	2300      	movcc	r3, #0
 8012f58:	4423      	add	r3, r4
 8012f5a:	e015      	b.n	8012f88 <rshift+0x68>
 8012f5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012f60:	f1c1 0820 	rsb	r8, r1, #32
 8012f64:	40cf      	lsrs	r7, r1
 8012f66:	f105 0e04 	add.w	lr, r5, #4
 8012f6a:	46a1      	mov	r9, r4
 8012f6c:	4576      	cmp	r6, lr
 8012f6e:	46f4      	mov	ip, lr
 8012f70:	d815      	bhi.n	8012f9e <rshift+0x7e>
 8012f72:	1a9a      	subs	r2, r3, r2
 8012f74:	0092      	lsls	r2, r2, #2
 8012f76:	3a04      	subs	r2, #4
 8012f78:	3501      	adds	r5, #1
 8012f7a:	42ae      	cmp	r6, r5
 8012f7c:	bf38      	it	cc
 8012f7e:	2200      	movcc	r2, #0
 8012f80:	18a3      	adds	r3, r4, r2
 8012f82:	50a7      	str	r7, [r4, r2]
 8012f84:	b107      	cbz	r7, 8012f88 <rshift+0x68>
 8012f86:	3304      	adds	r3, #4
 8012f88:	1b1a      	subs	r2, r3, r4
 8012f8a:	42a3      	cmp	r3, r4
 8012f8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012f90:	bf08      	it	eq
 8012f92:	2300      	moveq	r3, #0
 8012f94:	6102      	str	r2, [r0, #16]
 8012f96:	bf08      	it	eq
 8012f98:	6143      	streq	r3, [r0, #20]
 8012f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f9e:	f8dc c000 	ldr.w	ip, [ip]
 8012fa2:	fa0c fc08 	lsl.w	ip, ip, r8
 8012fa6:	ea4c 0707 	orr.w	r7, ip, r7
 8012faa:	f849 7b04 	str.w	r7, [r9], #4
 8012fae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012fb2:	40cf      	lsrs	r7, r1
 8012fb4:	e7da      	b.n	8012f6c <rshift+0x4c>
 8012fb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8012fba:	f847 cf04 	str.w	ip, [r7, #4]!
 8012fbe:	e7c3      	b.n	8012f48 <rshift+0x28>
 8012fc0:	4623      	mov	r3, r4
 8012fc2:	e7e1      	b.n	8012f88 <rshift+0x68>

08012fc4 <__hexdig_fun>:
 8012fc4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012fc8:	2b09      	cmp	r3, #9
 8012fca:	d802      	bhi.n	8012fd2 <__hexdig_fun+0xe>
 8012fcc:	3820      	subs	r0, #32
 8012fce:	b2c0      	uxtb	r0, r0
 8012fd0:	4770      	bx	lr
 8012fd2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012fd6:	2b05      	cmp	r3, #5
 8012fd8:	d801      	bhi.n	8012fde <__hexdig_fun+0x1a>
 8012fda:	3847      	subs	r0, #71	@ 0x47
 8012fdc:	e7f7      	b.n	8012fce <__hexdig_fun+0xa>
 8012fde:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012fe2:	2b05      	cmp	r3, #5
 8012fe4:	d801      	bhi.n	8012fea <__hexdig_fun+0x26>
 8012fe6:	3827      	subs	r0, #39	@ 0x27
 8012fe8:	e7f1      	b.n	8012fce <__hexdig_fun+0xa>
 8012fea:	2000      	movs	r0, #0
 8012fec:	4770      	bx	lr
	...

08012ff0 <__gethex>:
 8012ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ff4:	b085      	sub	sp, #20
 8012ff6:	468a      	mov	sl, r1
 8012ff8:	9302      	str	r3, [sp, #8]
 8012ffa:	680b      	ldr	r3, [r1, #0]
 8012ffc:	9001      	str	r0, [sp, #4]
 8012ffe:	4690      	mov	r8, r2
 8013000:	1c9c      	adds	r4, r3, #2
 8013002:	46a1      	mov	r9, r4
 8013004:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013008:	2830      	cmp	r0, #48	@ 0x30
 801300a:	d0fa      	beq.n	8013002 <__gethex+0x12>
 801300c:	eba9 0303 	sub.w	r3, r9, r3
 8013010:	f1a3 0b02 	sub.w	fp, r3, #2
 8013014:	f7ff ffd6 	bl	8012fc4 <__hexdig_fun>
 8013018:	4605      	mov	r5, r0
 801301a:	2800      	cmp	r0, #0
 801301c:	d168      	bne.n	80130f0 <__gethex+0x100>
 801301e:	49a0      	ldr	r1, [pc, #640]	@ (80132a0 <__gethex+0x2b0>)
 8013020:	2201      	movs	r2, #1
 8013022:	4648      	mov	r0, r9
 8013024:	f7ff f804 	bl	8012030 <strncmp>
 8013028:	4607      	mov	r7, r0
 801302a:	2800      	cmp	r0, #0
 801302c:	d167      	bne.n	80130fe <__gethex+0x10e>
 801302e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013032:	4626      	mov	r6, r4
 8013034:	f7ff ffc6 	bl	8012fc4 <__hexdig_fun>
 8013038:	2800      	cmp	r0, #0
 801303a:	d062      	beq.n	8013102 <__gethex+0x112>
 801303c:	4623      	mov	r3, r4
 801303e:	7818      	ldrb	r0, [r3, #0]
 8013040:	2830      	cmp	r0, #48	@ 0x30
 8013042:	4699      	mov	r9, r3
 8013044:	f103 0301 	add.w	r3, r3, #1
 8013048:	d0f9      	beq.n	801303e <__gethex+0x4e>
 801304a:	f7ff ffbb 	bl	8012fc4 <__hexdig_fun>
 801304e:	fab0 f580 	clz	r5, r0
 8013052:	096d      	lsrs	r5, r5, #5
 8013054:	f04f 0b01 	mov.w	fp, #1
 8013058:	464a      	mov	r2, r9
 801305a:	4616      	mov	r6, r2
 801305c:	3201      	adds	r2, #1
 801305e:	7830      	ldrb	r0, [r6, #0]
 8013060:	f7ff ffb0 	bl	8012fc4 <__hexdig_fun>
 8013064:	2800      	cmp	r0, #0
 8013066:	d1f8      	bne.n	801305a <__gethex+0x6a>
 8013068:	498d      	ldr	r1, [pc, #564]	@ (80132a0 <__gethex+0x2b0>)
 801306a:	2201      	movs	r2, #1
 801306c:	4630      	mov	r0, r6
 801306e:	f7fe ffdf 	bl	8012030 <strncmp>
 8013072:	2800      	cmp	r0, #0
 8013074:	d13f      	bne.n	80130f6 <__gethex+0x106>
 8013076:	b944      	cbnz	r4, 801308a <__gethex+0x9a>
 8013078:	1c74      	adds	r4, r6, #1
 801307a:	4622      	mov	r2, r4
 801307c:	4616      	mov	r6, r2
 801307e:	3201      	adds	r2, #1
 8013080:	7830      	ldrb	r0, [r6, #0]
 8013082:	f7ff ff9f 	bl	8012fc4 <__hexdig_fun>
 8013086:	2800      	cmp	r0, #0
 8013088:	d1f8      	bne.n	801307c <__gethex+0x8c>
 801308a:	1ba4      	subs	r4, r4, r6
 801308c:	00a7      	lsls	r7, r4, #2
 801308e:	7833      	ldrb	r3, [r6, #0]
 8013090:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8013094:	2b50      	cmp	r3, #80	@ 0x50
 8013096:	d13e      	bne.n	8013116 <__gethex+0x126>
 8013098:	7873      	ldrb	r3, [r6, #1]
 801309a:	2b2b      	cmp	r3, #43	@ 0x2b
 801309c:	d033      	beq.n	8013106 <__gethex+0x116>
 801309e:	2b2d      	cmp	r3, #45	@ 0x2d
 80130a0:	d034      	beq.n	801310c <__gethex+0x11c>
 80130a2:	1c71      	adds	r1, r6, #1
 80130a4:	2400      	movs	r4, #0
 80130a6:	7808      	ldrb	r0, [r1, #0]
 80130a8:	f7ff ff8c 	bl	8012fc4 <__hexdig_fun>
 80130ac:	1e43      	subs	r3, r0, #1
 80130ae:	b2db      	uxtb	r3, r3
 80130b0:	2b18      	cmp	r3, #24
 80130b2:	d830      	bhi.n	8013116 <__gethex+0x126>
 80130b4:	f1a0 0210 	sub.w	r2, r0, #16
 80130b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80130bc:	f7ff ff82 	bl	8012fc4 <__hexdig_fun>
 80130c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80130c4:	fa5f fc8c 	uxtb.w	ip, ip
 80130c8:	f1bc 0f18 	cmp.w	ip, #24
 80130cc:	f04f 030a 	mov.w	r3, #10
 80130d0:	d91e      	bls.n	8013110 <__gethex+0x120>
 80130d2:	b104      	cbz	r4, 80130d6 <__gethex+0xe6>
 80130d4:	4252      	negs	r2, r2
 80130d6:	4417      	add	r7, r2
 80130d8:	f8ca 1000 	str.w	r1, [sl]
 80130dc:	b1ed      	cbz	r5, 801311a <__gethex+0x12a>
 80130de:	f1bb 0f00 	cmp.w	fp, #0
 80130e2:	bf0c      	ite	eq
 80130e4:	2506      	moveq	r5, #6
 80130e6:	2500      	movne	r5, #0
 80130e8:	4628      	mov	r0, r5
 80130ea:	b005      	add	sp, #20
 80130ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f0:	2500      	movs	r5, #0
 80130f2:	462c      	mov	r4, r5
 80130f4:	e7b0      	b.n	8013058 <__gethex+0x68>
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	d1c7      	bne.n	801308a <__gethex+0x9a>
 80130fa:	4627      	mov	r7, r4
 80130fc:	e7c7      	b.n	801308e <__gethex+0x9e>
 80130fe:	464e      	mov	r6, r9
 8013100:	462f      	mov	r7, r5
 8013102:	2501      	movs	r5, #1
 8013104:	e7c3      	b.n	801308e <__gethex+0x9e>
 8013106:	2400      	movs	r4, #0
 8013108:	1cb1      	adds	r1, r6, #2
 801310a:	e7cc      	b.n	80130a6 <__gethex+0xb6>
 801310c:	2401      	movs	r4, #1
 801310e:	e7fb      	b.n	8013108 <__gethex+0x118>
 8013110:	fb03 0002 	mla	r0, r3, r2, r0
 8013114:	e7ce      	b.n	80130b4 <__gethex+0xc4>
 8013116:	4631      	mov	r1, r6
 8013118:	e7de      	b.n	80130d8 <__gethex+0xe8>
 801311a:	eba6 0309 	sub.w	r3, r6, r9
 801311e:	3b01      	subs	r3, #1
 8013120:	4629      	mov	r1, r5
 8013122:	2b07      	cmp	r3, #7
 8013124:	dc0a      	bgt.n	801313c <__gethex+0x14c>
 8013126:	9801      	ldr	r0, [sp, #4]
 8013128:	f000 fafc 	bl	8013724 <_Balloc>
 801312c:	4604      	mov	r4, r0
 801312e:	b940      	cbnz	r0, 8013142 <__gethex+0x152>
 8013130:	4b5c      	ldr	r3, [pc, #368]	@ (80132a4 <__gethex+0x2b4>)
 8013132:	4602      	mov	r2, r0
 8013134:	21e4      	movs	r1, #228	@ 0xe4
 8013136:	485c      	ldr	r0, [pc, #368]	@ (80132a8 <__gethex+0x2b8>)
 8013138:	f001 fa3a 	bl	80145b0 <__assert_func>
 801313c:	3101      	adds	r1, #1
 801313e:	105b      	asrs	r3, r3, #1
 8013140:	e7ef      	b.n	8013122 <__gethex+0x132>
 8013142:	f100 0a14 	add.w	sl, r0, #20
 8013146:	2300      	movs	r3, #0
 8013148:	4655      	mov	r5, sl
 801314a:	469b      	mov	fp, r3
 801314c:	45b1      	cmp	r9, r6
 801314e:	d337      	bcc.n	80131c0 <__gethex+0x1d0>
 8013150:	f845 bb04 	str.w	fp, [r5], #4
 8013154:	eba5 050a 	sub.w	r5, r5, sl
 8013158:	10ad      	asrs	r5, r5, #2
 801315a:	6125      	str	r5, [r4, #16]
 801315c:	4658      	mov	r0, fp
 801315e:	f000 fbd3 	bl	8013908 <__hi0bits>
 8013162:	016d      	lsls	r5, r5, #5
 8013164:	f8d8 6000 	ldr.w	r6, [r8]
 8013168:	1a2d      	subs	r5, r5, r0
 801316a:	42b5      	cmp	r5, r6
 801316c:	dd54      	ble.n	8013218 <__gethex+0x228>
 801316e:	1bad      	subs	r5, r5, r6
 8013170:	4629      	mov	r1, r5
 8013172:	4620      	mov	r0, r4
 8013174:	f000 ff5c 	bl	8014030 <__any_on>
 8013178:	4681      	mov	r9, r0
 801317a:	b178      	cbz	r0, 801319c <__gethex+0x1ac>
 801317c:	1e6b      	subs	r3, r5, #1
 801317e:	1159      	asrs	r1, r3, #5
 8013180:	f003 021f 	and.w	r2, r3, #31
 8013184:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013188:	f04f 0901 	mov.w	r9, #1
 801318c:	fa09 f202 	lsl.w	r2, r9, r2
 8013190:	420a      	tst	r2, r1
 8013192:	d003      	beq.n	801319c <__gethex+0x1ac>
 8013194:	454b      	cmp	r3, r9
 8013196:	dc36      	bgt.n	8013206 <__gethex+0x216>
 8013198:	f04f 0902 	mov.w	r9, #2
 801319c:	4629      	mov	r1, r5
 801319e:	4620      	mov	r0, r4
 80131a0:	f7ff febe 	bl	8012f20 <rshift>
 80131a4:	442f      	add	r7, r5
 80131a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131aa:	42bb      	cmp	r3, r7
 80131ac:	da42      	bge.n	8013234 <__gethex+0x244>
 80131ae:	9801      	ldr	r0, [sp, #4]
 80131b0:	4621      	mov	r1, r4
 80131b2:	f000 faf7 	bl	80137a4 <_Bfree>
 80131b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80131b8:	2300      	movs	r3, #0
 80131ba:	6013      	str	r3, [r2, #0]
 80131bc:	25a3      	movs	r5, #163	@ 0xa3
 80131be:	e793      	b.n	80130e8 <__gethex+0xf8>
 80131c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80131c4:	2a2e      	cmp	r2, #46	@ 0x2e
 80131c6:	d012      	beq.n	80131ee <__gethex+0x1fe>
 80131c8:	2b20      	cmp	r3, #32
 80131ca:	d104      	bne.n	80131d6 <__gethex+0x1e6>
 80131cc:	f845 bb04 	str.w	fp, [r5], #4
 80131d0:	f04f 0b00 	mov.w	fp, #0
 80131d4:	465b      	mov	r3, fp
 80131d6:	7830      	ldrb	r0, [r6, #0]
 80131d8:	9303      	str	r3, [sp, #12]
 80131da:	f7ff fef3 	bl	8012fc4 <__hexdig_fun>
 80131de:	9b03      	ldr	r3, [sp, #12]
 80131e0:	f000 000f 	and.w	r0, r0, #15
 80131e4:	4098      	lsls	r0, r3
 80131e6:	ea4b 0b00 	orr.w	fp, fp, r0
 80131ea:	3304      	adds	r3, #4
 80131ec:	e7ae      	b.n	801314c <__gethex+0x15c>
 80131ee:	45b1      	cmp	r9, r6
 80131f0:	d8ea      	bhi.n	80131c8 <__gethex+0x1d8>
 80131f2:	492b      	ldr	r1, [pc, #172]	@ (80132a0 <__gethex+0x2b0>)
 80131f4:	9303      	str	r3, [sp, #12]
 80131f6:	2201      	movs	r2, #1
 80131f8:	4630      	mov	r0, r6
 80131fa:	f7fe ff19 	bl	8012030 <strncmp>
 80131fe:	9b03      	ldr	r3, [sp, #12]
 8013200:	2800      	cmp	r0, #0
 8013202:	d1e1      	bne.n	80131c8 <__gethex+0x1d8>
 8013204:	e7a2      	b.n	801314c <__gethex+0x15c>
 8013206:	1ea9      	subs	r1, r5, #2
 8013208:	4620      	mov	r0, r4
 801320a:	f000 ff11 	bl	8014030 <__any_on>
 801320e:	2800      	cmp	r0, #0
 8013210:	d0c2      	beq.n	8013198 <__gethex+0x1a8>
 8013212:	f04f 0903 	mov.w	r9, #3
 8013216:	e7c1      	b.n	801319c <__gethex+0x1ac>
 8013218:	da09      	bge.n	801322e <__gethex+0x23e>
 801321a:	1b75      	subs	r5, r6, r5
 801321c:	4621      	mov	r1, r4
 801321e:	9801      	ldr	r0, [sp, #4]
 8013220:	462a      	mov	r2, r5
 8013222:	f000 fccf 	bl	8013bc4 <__lshift>
 8013226:	1b7f      	subs	r7, r7, r5
 8013228:	4604      	mov	r4, r0
 801322a:	f100 0a14 	add.w	sl, r0, #20
 801322e:	f04f 0900 	mov.w	r9, #0
 8013232:	e7b8      	b.n	80131a6 <__gethex+0x1b6>
 8013234:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013238:	42bd      	cmp	r5, r7
 801323a:	dd6f      	ble.n	801331c <__gethex+0x32c>
 801323c:	1bed      	subs	r5, r5, r7
 801323e:	42ae      	cmp	r6, r5
 8013240:	dc34      	bgt.n	80132ac <__gethex+0x2bc>
 8013242:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013246:	2b02      	cmp	r3, #2
 8013248:	d022      	beq.n	8013290 <__gethex+0x2a0>
 801324a:	2b03      	cmp	r3, #3
 801324c:	d024      	beq.n	8013298 <__gethex+0x2a8>
 801324e:	2b01      	cmp	r3, #1
 8013250:	d115      	bne.n	801327e <__gethex+0x28e>
 8013252:	42ae      	cmp	r6, r5
 8013254:	d113      	bne.n	801327e <__gethex+0x28e>
 8013256:	2e01      	cmp	r6, #1
 8013258:	d10b      	bne.n	8013272 <__gethex+0x282>
 801325a:	9a02      	ldr	r2, [sp, #8]
 801325c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013260:	6013      	str	r3, [r2, #0]
 8013262:	2301      	movs	r3, #1
 8013264:	6123      	str	r3, [r4, #16]
 8013266:	f8ca 3000 	str.w	r3, [sl]
 801326a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801326c:	2562      	movs	r5, #98	@ 0x62
 801326e:	601c      	str	r4, [r3, #0]
 8013270:	e73a      	b.n	80130e8 <__gethex+0xf8>
 8013272:	1e71      	subs	r1, r6, #1
 8013274:	4620      	mov	r0, r4
 8013276:	f000 fedb 	bl	8014030 <__any_on>
 801327a:	2800      	cmp	r0, #0
 801327c:	d1ed      	bne.n	801325a <__gethex+0x26a>
 801327e:	9801      	ldr	r0, [sp, #4]
 8013280:	4621      	mov	r1, r4
 8013282:	f000 fa8f 	bl	80137a4 <_Bfree>
 8013286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013288:	2300      	movs	r3, #0
 801328a:	6013      	str	r3, [r2, #0]
 801328c:	2550      	movs	r5, #80	@ 0x50
 801328e:	e72b      	b.n	80130e8 <__gethex+0xf8>
 8013290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013292:	2b00      	cmp	r3, #0
 8013294:	d1f3      	bne.n	801327e <__gethex+0x28e>
 8013296:	e7e0      	b.n	801325a <__gethex+0x26a>
 8013298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801329a:	2b00      	cmp	r3, #0
 801329c:	d1dd      	bne.n	801325a <__gethex+0x26a>
 801329e:	e7ee      	b.n	801327e <__gethex+0x28e>
 80132a0:	08014f0c 	.word	0x08014f0c
 80132a4:	08014fc6 	.word	0x08014fc6
 80132a8:	08014fd7 	.word	0x08014fd7
 80132ac:	1e6f      	subs	r7, r5, #1
 80132ae:	f1b9 0f00 	cmp.w	r9, #0
 80132b2:	d130      	bne.n	8013316 <__gethex+0x326>
 80132b4:	b127      	cbz	r7, 80132c0 <__gethex+0x2d0>
 80132b6:	4639      	mov	r1, r7
 80132b8:	4620      	mov	r0, r4
 80132ba:	f000 feb9 	bl	8014030 <__any_on>
 80132be:	4681      	mov	r9, r0
 80132c0:	117a      	asrs	r2, r7, #5
 80132c2:	2301      	movs	r3, #1
 80132c4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80132c8:	f007 071f 	and.w	r7, r7, #31
 80132cc:	40bb      	lsls	r3, r7
 80132ce:	4213      	tst	r3, r2
 80132d0:	4629      	mov	r1, r5
 80132d2:	4620      	mov	r0, r4
 80132d4:	bf18      	it	ne
 80132d6:	f049 0902 	orrne.w	r9, r9, #2
 80132da:	f7ff fe21 	bl	8012f20 <rshift>
 80132de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80132e2:	1b76      	subs	r6, r6, r5
 80132e4:	2502      	movs	r5, #2
 80132e6:	f1b9 0f00 	cmp.w	r9, #0
 80132ea:	d047      	beq.n	801337c <__gethex+0x38c>
 80132ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132f0:	2b02      	cmp	r3, #2
 80132f2:	d015      	beq.n	8013320 <__gethex+0x330>
 80132f4:	2b03      	cmp	r3, #3
 80132f6:	d017      	beq.n	8013328 <__gethex+0x338>
 80132f8:	2b01      	cmp	r3, #1
 80132fa:	d109      	bne.n	8013310 <__gethex+0x320>
 80132fc:	f019 0f02 	tst.w	r9, #2
 8013300:	d006      	beq.n	8013310 <__gethex+0x320>
 8013302:	f8da 3000 	ldr.w	r3, [sl]
 8013306:	ea49 0903 	orr.w	r9, r9, r3
 801330a:	f019 0f01 	tst.w	r9, #1
 801330e:	d10e      	bne.n	801332e <__gethex+0x33e>
 8013310:	f045 0510 	orr.w	r5, r5, #16
 8013314:	e032      	b.n	801337c <__gethex+0x38c>
 8013316:	f04f 0901 	mov.w	r9, #1
 801331a:	e7d1      	b.n	80132c0 <__gethex+0x2d0>
 801331c:	2501      	movs	r5, #1
 801331e:	e7e2      	b.n	80132e6 <__gethex+0x2f6>
 8013320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013322:	f1c3 0301 	rsb	r3, r3, #1
 8013326:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013328:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801332a:	2b00      	cmp	r3, #0
 801332c:	d0f0      	beq.n	8013310 <__gethex+0x320>
 801332e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013332:	f104 0314 	add.w	r3, r4, #20
 8013336:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801333a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801333e:	f04f 0c00 	mov.w	ip, #0
 8013342:	4618      	mov	r0, r3
 8013344:	f853 2b04 	ldr.w	r2, [r3], #4
 8013348:	f1b2 3fff 	cmp.w	r2, #4294967295
 801334c:	d01b      	beq.n	8013386 <__gethex+0x396>
 801334e:	3201      	adds	r2, #1
 8013350:	6002      	str	r2, [r0, #0]
 8013352:	2d02      	cmp	r5, #2
 8013354:	f104 0314 	add.w	r3, r4, #20
 8013358:	d13c      	bne.n	80133d4 <__gethex+0x3e4>
 801335a:	f8d8 2000 	ldr.w	r2, [r8]
 801335e:	3a01      	subs	r2, #1
 8013360:	42b2      	cmp	r2, r6
 8013362:	d109      	bne.n	8013378 <__gethex+0x388>
 8013364:	1171      	asrs	r1, r6, #5
 8013366:	2201      	movs	r2, #1
 8013368:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801336c:	f006 061f 	and.w	r6, r6, #31
 8013370:	fa02 f606 	lsl.w	r6, r2, r6
 8013374:	421e      	tst	r6, r3
 8013376:	d13a      	bne.n	80133ee <__gethex+0x3fe>
 8013378:	f045 0520 	orr.w	r5, r5, #32
 801337c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801337e:	601c      	str	r4, [r3, #0]
 8013380:	9b02      	ldr	r3, [sp, #8]
 8013382:	601f      	str	r7, [r3, #0]
 8013384:	e6b0      	b.n	80130e8 <__gethex+0xf8>
 8013386:	4299      	cmp	r1, r3
 8013388:	f843 cc04 	str.w	ip, [r3, #-4]
 801338c:	d8d9      	bhi.n	8013342 <__gethex+0x352>
 801338e:	68a3      	ldr	r3, [r4, #8]
 8013390:	459b      	cmp	fp, r3
 8013392:	db17      	blt.n	80133c4 <__gethex+0x3d4>
 8013394:	6861      	ldr	r1, [r4, #4]
 8013396:	9801      	ldr	r0, [sp, #4]
 8013398:	3101      	adds	r1, #1
 801339a:	f000 f9c3 	bl	8013724 <_Balloc>
 801339e:	4681      	mov	r9, r0
 80133a0:	b918      	cbnz	r0, 80133aa <__gethex+0x3ba>
 80133a2:	4b1a      	ldr	r3, [pc, #104]	@ (801340c <__gethex+0x41c>)
 80133a4:	4602      	mov	r2, r0
 80133a6:	2184      	movs	r1, #132	@ 0x84
 80133a8:	e6c5      	b.n	8013136 <__gethex+0x146>
 80133aa:	6922      	ldr	r2, [r4, #16]
 80133ac:	3202      	adds	r2, #2
 80133ae:	f104 010c 	add.w	r1, r4, #12
 80133b2:	0092      	lsls	r2, r2, #2
 80133b4:	300c      	adds	r0, #12
 80133b6:	f7fe ff64 	bl	8012282 <memcpy>
 80133ba:	4621      	mov	r1, r4
 80133bc:	9801      	ldr	r0, [sp, #4]
 80133be:	f000 f9f1 	bl	80137a4 <_Bfree>
 80133c2:	464c      	mov	r4, r9
 80133c4:	6923      	ldr	r3, [r4, #16]
 80133c6:	1c5a      	adds	r2, r3, #1
 80133c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80133cc:	6122      	str	r2, [r4, #16]
 80133ce:	2201      	movs	r2, #1
 80133d0:	615a      	str	r2, [r3, #20]
 80133d2:	e7be      	b.n	8013352 <__gethex+0x362>
 80133d4:	6922      	ldr	r2, [r4, #16]
 80133d6:	455a      	cmp	r2, fp
 80133d8:	dd0b      	ble.n	80133f2 <__gethex+0x402>
 80133da:	2101      	movs	r1, #1
 80133dc:	4620      	mov	r0, r4
 80133de:	f7ff fd9f 	bl	8012f20 <rshift>
 80133e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80133e6:	3701      	adds	r7, #1
 80133e8:	42bb      	cmp	r3, r7
 80133ea:	f6ff aee0 	blt.w	80131ae <__gethex+0x1be>
 80133ee:	2501      	movs	r5, #1
 80133f0:	e7c2      	b.n	8013378 <__gethex+0x388>
 80133f2:	f016 061f 	ands.w	r6, r6, #31
 80133f6:	d0fa      	beq.n	80133ee <__gethex+0x3fe>
 80133f8:	4453      	add	r3, sl
 80133fa:	f1c6 0620 	rsb	r6, r6, #32
 80133fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8013402:	f000 fa81 	bl	8013908 <__hi0bits>
 8013406:	42b0      	cmp	r0, r6
 8013408:	dbe7      	blt.n	80133da <__gethex+0x3ea>
 801340a:	e7f0      	b.n	80133ee <__gethex+0x3fe>
 801340c:	08014fc6 	.word	0x08014fc6

08013410 <L_shift>:
 8013410:	f1c2 0208 	rsb	r2, r2, #8
 8013414:	0092      	lsls	r2, r2, #2
 8013416:	b570      	push	{r4, r5, r6, lr}
 8013418:	f1c2 0620 	rsb	r6, r2, #32
 801341c:	6843      	ldr	r3, [r0, #4]
 801341e:	6804      	ldr	r4, [r0, #0]
 8013420:	fa03 f506 	lsl.w	r5, r3, r6
 8013424:	432c      	orrs	r4, r5
 8013426:	40d3      	lsrs	r3, r2
 8013428:	6004      	str	r4, [r0, #0]
 801342a:	f840 3f04 	str.w	r3, [r0, #4]!
 801342e:	4288      	cmp	r0, r1
 8013430:	d3f4      	bcc.n	801341c <L_shift+0xc>
 8013432:	bd70      	pop	{r4, r5, r6, pc}

08013434 <__match>:
 8013434:	b530      	push	{r4, r5, lr}
 8013436:	6803      	ldr	r3, [r0, #0]
 8013438:	3301      	adds	r3, #1
 801343a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801343e:	b914      	cbnz	r4, 8013446 <__match+0x12>
 8013440:	6003      	str	r3, [r0, #0]
 8013442:	2001      	movs	r0, #1
 8013444:	bd30      	pop	{r4, r5, pc}
 8013446:	f813 2b01 	ldrb.w	r2, [r3], #1
 801344a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801344e:	2d19      	cmp	r5, #25
 8013450:	bf98      	it	ls
 8013452:	3220      	addls	r2, #32
 8013454:	42a2      	cmp	r2, r4
 8013456:	d0f0      	beq.n	801343a <__match+0x6>
 8013458:	2000      	movs	r0, #0
 801345a:	e7f3      	b.n	8013444 <__match+0x10>

0801345c <__hexnan>:
 801345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013460:	680b      	ldr	r3, [r1, #0]
 8013462:	6801      	ldr	r1, [r0, #0]
 8013464:	115e      	asrs	r6, r3, #5
 8013466:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801346a:	f013 031f 	ands.w	r3, r3, #31
 801346e:	b087      	sub	sp, #28
 8013470:	bf18      	it	ne
 8013472:	3604      	addne	r6, #4
 8013474:	2500      	movs	r5, #0
 8013476:	1f37      	subs	r7, r6, #4
 8013478:	4682      	mov	sl, r0
 801347a:	4690      	mov	r8, r2
 801347c:	9301      	str	r3, [sp, #4]
 801347e:	f846 5c04 	str.w	r5, [r6, #-4]
 8013482:	46b9      	mov	r9, r7
 8013484:	463c      	mov	r4, r7
 8013486:	9502      	str	r5, [sp, #8]
 8013488:	46ab      	mov	fp, r5
 801348a:	784a      	ldrb	r2, [r1, #1]
 801348c:	1c4b      	adds	r3, r1, #1
 801348e:	9303      	str	r3, [sp, #12]
 8013490:	b342      	cbz	r2, 80134e4 <__hexnan+0x88>
 8013492:	4610      	mov	r0, r2
 8013494:	9105      	str	r1, [sp, #20]
 8013496:	9204      	str	r2, [sp, #16]
 8013498:	f7ff fd94 	bl	8012fc4 <__hexdig_fun>
 801349c:	2800      	cmp	r0, #0
 801349e:	d151      	bne.n	8013544 <__hexnan+0xe8>
 80134a0:	9a04      	ldr	r2, [sp, #16]
 80134a2:	9905      	ldr	r1, [sp, #20]
 80134a4:	2a20      	cmp	r2, #32
 80134a6:	d818      	bhi.n	80134da <__hexnan+0x7e>
 80134a8:	9b02      	ldr	r3, [sp, #8]
 80134aa:	459b      	cmp	fp, r3
 80134ac:	dd13      	ble.n	80134d6 <__hexnan+0x7a>
 80134ae:	454c      	cmp	r4, r9
 80134b0:	d206      	bcs.n	80134c0 <__hexnan+0x64>
 80134b2:	2d07      	cmp	r5, #7
 80134b4:	dc04      	bgt.n	80134c0 <__hexnan+0x64>
 80134b6:	462a      	mov	r2, r5
 80134b8:	4649      	mov	r1, r9
 80134ba:	4620      	mov	r0, r4
 80134bc:	f7ff ffa8 	bl	8013410 <L_shift>
 80134c0:	4544      	cmp	r4, r8
 80134c2:	d952      	bls.n	801356a <__hexnan+0x10e>
 80134c4:	2300      	movs	r3, #0
 80134c6:	f1a4 0904 	sub.w	r9, r4, #4
 80134ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80134ce:	f8cd b008 	str.w	fp, [sp, #8]
 80134d2:	464c      	mov	r4, r9
 80134d4:	461d      	mov	r5, r3
 80134d6:	9903      	ldr	r1, [sp, #12]
 80134d8:	e7d7      	b.n	801348a <__hexnan+0x2e>
 80134da:	2a29      	cmp	r2, #41	@ 0x29
 80134dc:	d157      	bne.n	801358e <__hexnan+0x132>
 80134de:	3102      	adds	r1, #2
 80134e0:	f8ca 1000 	str.w	r1, [sl]
 80134e4:	f1bb 0f00 	cmp.w	fp, #0
 80134e8:	d051      	beq.n	801358e <__hexnan+0x132>
 80134ea:	454c      	cmp	r4, r9
 80134ec:	d206      	bcs.n	80134fc <__hexnan+0xa0>
 80134ee:	2d07      	cmp	r5, #7
 80134f0:	dc04      	bgt.n	80134fc <__hexnan+0xa0>
 80134f2:	462a      	mov	r2, r5
 80134f4:	4649      	mov	r1, r9
 80134f6:	4620      	mov	r0, r4
 80134f8:	f7ff ff8a 	bl	8013410 <L_shift>
 80134fc:	4544      	cmp	r4, r8
 80134fe:	d936      	bls.n	801356e <__hexnan+0x112>
 8013500:	f1a8 0204 	sub.w	r2, r8, #4
 8013504:	4623      	mov	r3, r4
 8013506:	f853 1b04 	ldr.w	r1, [r3], #4
 801350a:	f842 1f04 	str.w	r1, [r2, #4]!
 801350e:	429f      	cmp	r7, r3
 8013510:	d2f9      	bcs.n	8013506 <__hexnan+0xaa>
 8013512:	1b3b      	subs	r3, r7, r4
 8013514:	f023 0303 	bic.w	r3, r3, #3
 8013518:	3304      	adds	r3, #4
 801351a:	3401      	adds	r4, #1
 801351c:	3e03      	subs	r6, #3
 801351e:	42b4      	cmp	r4, r6
 8013520:	bf88      	it	hi
 8013522:	2304      	movhi	r3, #4
 8013524:	4443      	add	r3, r8
 8013526:	2200      	movs	r2, #0
 8013528:	f843 2b04 	str.w	r2, [r3], #4
 801352c:	429f      	cmp	r7, r3
 801352e:	d2fb      	bcs.n	8013528 <__hexnan+0xcc>
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	b91b      	cbnz	r3, 801353c <__hexnan+0xe0>
 8013534:	4547      	cmp	r7, r8
 8013536:	d128      	bne.n	801358a <__hexnan+0x12e>
 8013538:	2301      	movs	r3, #1
 801353a:	603b      	str	r3, [r7, #0]
 801353c:	2005      	movs	r0, #5
 801353e:	b007      	add	sp, #28
 8013540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013544:	3501      	adds	r5, #1
 8013546:	2d08      	cmp	r5, #8
 8013548:	f10b 0b01 	add.w	fp, fp, #1
 801354c:	dd06      	ble.n	801355c <__hexnan+0x100>
 801354e:	4544      	cmp	r4, r8
 8013550:	d9c1      	bls.n	80134d6 <__hexnan+0x7a>
 8013552:	2300      	movs	r3, #0
 8013554:	f844 3c04 	str.w	r3, [r4, #-4]
 8013558:	2501      	movs	r5, #1
 801355a:	3c04      	subs	r4, #4
 801355c:	6822      	ldr	r2, [r4, #0]
 801355e:	f000 000f 	and.w	r0, r0, #15
 8013562:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013566:	6020      	str	r0, [r4, #0]
 8013568:	e7b5      	b.n	80134d6 <__hexnan+0x7a>
 801356a:	2508      	movs	r5, #8
 801356c:	e7b3      	b.n	80134d6 <__hexnan+0x7a>
 801356e:	9b01      	ldr	r3, [sp, #4]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d0dd      	beq.n	8013530 <__hexnan+0xd4>
 8013574:	f1c3 0320 	rsb	r3, r3, #32
 8013578:	f04f 32ff 	mov.w	r2, #4294967295
 801357c:	40da      	lsrs	r2, r3
 801357e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013582:	4013      	ands	r3, r2
 8013584:	f846 3c04 	str.w	r3, [r6, #-4]
 8013588:	e7d2      	b.n	8013530 <__hexnan+0xd4>
 801358a:	3f04      	subs	r7, #4
 801358c:	e7d0      	b.n	8013530 <__hexnan+0xd4>
 801358e:	2004      	movs	r0, #4
 8013590:	e7d5      	b.n	801353e <__hexnan+0xe2>
	...

08013594 <malloc>:
 8013594:	4b02      	ldr	r3, [pc, #8]	@ (80135a0 <malloc+0xc>)
 8013596:	4601      	mov	r1, r0
 8013598:	6818      	ldr	r0, [r3, #0]
 801359a:	f000 b825 	b.w	80135e8 <_malloc_r>
 801359e:	bf00      	nop
 80135a0:	240001f8 	.word	0x240001f8

080135a4 <sbrk_aligned>:
 80135a4:	b570      	push	{r4, r5, r6, lr}
 80135a6:	4e0f      	ldr	r6, [pc, #60]	@ (80135e4 <sbrk_aligned+0x40>)
 80135a8:	460c      	mov	r4, r1
 80135aa:	6831      	ldr	r1, [r6, #0]
 80135ac:	4605      	mov	r5, r0
 80135ae:	b911      	cbnz	r1, 80135b6 <sbrk_aligned+0x12>
 80135b0:	f000 ffee 	bl	8014590 <_sbrk_r>
 80135b4:	6030      	str	r0, [r6, #0]
 80135b6:	4621      	mov	r1, r4
 80135b8:	4628      	mov	r0, r5
 80135ba:	f000 ffe9 	bl	8014590 <_sbrk_r>
 80135be:	1c43      	adds	r3, r0, #1
 80135c0:	d103      	bne.n	80135ca <sbrk_aligned+0x26>
 80135c2:	f04f 34ff 	mov.w	r4, #4294967295
 80135c6:	4620      	mov	r0, r4
 80135c8:	bd70      	pop	{r4, r5, r6, pc}
 80135ca:	1cc4      	adds	r4, r0, #3
 80135cc:	f024 0403 	bic.w	r4, r4, #3
 80135d0:	42a0      	cmp	r0, r4
 80135d2:	d0f8      	beq.n	80135c6 <sbrk_aligned+0x22>
 80135d4:	1a21      	subs	r1, r4, r0
 80135d6:	4628      	mov	r0, r5
 80135d8:	f000 ffda 	bl	8014590 <_sbrk_r>
 80135dc:	3001      	adds	r0, #1
 80135de:	d1f2      	bne.n	80135c6 <sbrk_aligned+0x22>
 80135e0:	e7ef      	b.n	80135c2 <sbrk_aligned+0x1e>
 80135e2:	bf00      	nop
 80135e4:	24006210 	.word	0x24006210

080135e8 <_malloc_r>:
 80135e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135ec:	1ccd      	adds	r5, r1, #3
 80135ee:	f025 0503 	bic.w	r5, r5, #3
 80135f2:	3508      	adds	r5, #8
 80135f4:	2d0c      	cmp	r5, #12
 80135f6:	bf38      	it	cc
 80135f8:	250c      	movcc	r5, #12
 80135fa:	2d00      	cmp	r5, #0
 80135fc:	4606      	mov	r6, r0
 80135fe:	db01      	blt.n	8013604 <_malloc_r+0x1c>
 8013600:	42a9      	cmp	r1, r5
 8013602:	d904      	bls.n	801360e <_malloc_r+0x26>
 8013604:	230c      	movs	r3, #12
 8013606:	6033      	str	r3, [r6, #0]
 8013608:	2000      	movs	r0, #0
 801360a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801360e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80136e4 <_malloc_r+0xfc>
 8013612:	f000 f87b 	bl	801370c <__malloc_lock>
 8013616:	f8d8 3000 	ldr.w	r3, [r8]
 801361a:	461c      	mov	r4, r3
 801361c:	bb44      	cbnz	r4, 8013670 <_malloc_r+0x88>
 801361e:	4629      	mov	r1, r5
 8013620:	4630      	mov	r0, r6
 8013622:	f7ff ffbf 	bl	80135a4 <sbrk_aligned>
 8013626:	1c43      	adds	r3, r0, #1
 8013628:	4604      	mov	r4, r0
 801362a:	d158      	bne.n	80136de <_malloc_r+0xf6>
 801362c:	f8d8 4000 	ldr.w	r4, [r8]
 8013630:	4627      	mov	r7, r4
 8013632:	2f00      	cmp	r7, #0
 8013634:	d143      	bne.n	80136be <_malloc_r+0xd6>
 8013636:	2c00      	cmp	r4, #0
 8013638:	d04b      	beq.n	80136d2 <_malloc_r+0xea>
 801363a:	6823      	ldr	r3, [r4, #0]
 801363c:	4639      	mov	r1, r7
 801363e:	4630      	mov	r0, r6
 8013640:	eb04 0903 	add.w	r9, r4, r3
 8013644:	f000 ffa4 	bl	8014590 <_sbrk_r>
 8013648:	4581      	cmp	r9, r0
 801364a:	d142      	bne.n	80136d2 <_malloc_r+0xea>
 801364c:	6821      	ldr	r1, [r4, #0]
 801364e:	1a6d      	subs	r5, r5, r1
 8013650:	4629      	mov	r1, r5
 8013652:	4630      	mov	r0, r6
 8013654:	f7ff ffa6 	bl	80135a4 <sbrk_aligned>
 8013658:	3001      	adds	r0, #1
 801365a:	d03a      	beq.n	80136d2 <_malloc_r+0xea>
 801365c:	6823      	ldr	r3, [r4, #0]
 801365e:	442b      	add	r3, r5
 8013660:	6023      	str	r3, [r4, #0]
 8013662:	f8d8 3000 	ldr.w	r3, [r8]
 8013666:	685a      	ldr	r2, [r3, #4]
 8013668:	bb62      	cbnz	r2, 80136c4 <_malloc_r+0xdc>
 801366a:	f8c8 7000 	str.w	r7, [r8]
 801366e:	e00f      	b.n	8013690 <_malloc_r+0xa8>
 8013670:	6822      	ldr	r2, [r4, #0]
 8013672:	1b52      	subs	r2, r2, r5
 8013674:	d420      	bmi.n	80136b8 <_malloc_r+0xd0>
 8013676:	2a0b      	cmp	r2, #11
 8013678:	d917      	bls.n	80136aa <_malloc_r+0xc2>
 801367a:	1961      	adds	r1, r4, r5
 801367c:	42a3      	cmp	r3, r4
 801367e:	6025      	str	r5, [r4, #0]
 8013680:	bf18      	it	ne
 8013682:	6059      	strne	r1, [r3, #4]
 8013684:	6863      	ldr	r3, [r4, #4]
 8013686:	bf08      	it	eq
 8013688:	f8c8 1000 	streq.w	r1, [r8]
 801368c:	5162      	str	r2, [r4, r5]
 801368e:	604b      	str	r3, [r1, #4]
 8013690:	4630      	mov	r0, r6
 8013692:	f000 f841 	bl	8013718 <__malloc_unlock>
 8013696:	f104 000b 	add.w	r0, r4, #11
 801369a:	1d23      	adds	r3, r4, #4
 801369c:	f020 0007 	bic.w	r0, r0, #7
 80136a0:	1ac2      	subs	r2, r0, r3
 80136a2:	bf1c      	itt	ne
 80136a4:	1a1b      	subne	r3, r3, r0
 80136a6:	50a3      	strne	r3, [r4, r2]
 80136a8:	e7af      	b.n	801360a <_malloc_r+0x22>
 80136aa:	6862      	ldr	r2, [r4, #4]
 80136ac:	42a3      	cmp	r3, r4
 80136ae:	bf0c      	ite	eq
 80136b0:	f8c8 2000 	streq.w	r2, [r8]
 80136b4:	605a      	strne	r2, [r3, #4]
 80136b6:	e7eb      	b.n	8013690 <_malloc_r+0xa8>
 80136b8:	4623      	mov	r3, r4
 80136ba:	6864      	ldr	r4, [r4, #4]
 80136bc:	e7ae      	b.n	801361c <_malloc_r+0x34>
 80136be:	463c      	mov	r4, r7
 80136c0:	687f      	ldr	r7, [r7, #4]
 80136c2:	e7b6      	b.n	8013632 <_malloc_r+0x4a>
 80136c4:	461a      	mov	r2, r3
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	42a3      	cmp	r3, r4
 80136ca:	d1fb      	bne.n	80136c4 <_malloc_r+0xdc>
 80136cc:	2300      	movs	r3, #0
 80136ce:	6053      	str	r3, [r2, #4]
 80136d0:	e7de      	b.n	8013690 <_malloc_r+0xa8>
 80136d2:	230c      	movs	r3, #12
 80136d4:	6033      	str	r3, [r6, #0]
 80136d6:	4630      	mov	r0, r6
 80136d8:	f000 f81e 	bl	8013718 <__malloc_unlock>
 80136dc:	e794      	b.n	8013608 <_malloc_r+0x20>
 80136de:	6005      	str	r5, [r0, #0]
 80136e0:	e7d6      	b.n	8013690 <_malloc_r+0xa8>
 80136e2:	bf00      	nop
 80136e4:	24006214 	.word	0x24006214

080136e8 <__ascii_mbtowc>:
 80136e8:	b082      	sub	sp, #8
 80136ea:	b901      	cbnz	r1, 80136ee <__ascii_mbtowc+0x6>
 80136ec:	a901      	add	r1, sp, #4
 80136ee:	b142      	cbz	r2, 8013702 <__ascii_mbtowc+0x1a>
 80136f0:	b14b      	cbz	r3, 8013706 <__ascii_mbtowc+0x1e>
 80136f2:	7813      	ldrb	r3, [r2, #0]
 80136f4:	600b      	str	r3, [r1, #0]
 80136f6:	7812      	ldrb	r2, [r2, #0]
 80136f8:	1e10      	subs	r0, r2, #0
 80136fa:	bf18      	it	ne
 80136fc:	2001      	movne	r0, #1
 80136fe:	b002      	add	sp, #8
 8013700:	4770      	bx	lr
 8013702:	4610      	mov	r0, r2
 8013704:	e7fb      	b.n	80136fe <__ascii_mbtowc+0x16>
 8013706:	f06f 0001 	mvn.w	r0, #1
 801370a:	e7f8      	b.n	80136fe <__ascii_mbtowc+0x16>

0801370c <__malloc_lock>:
 801370c:	4801      	ldr	r0, [pc, #4]	@ (8013714 <__malloc_lock+0x8>)
 801370e:	f7fe bdb6 	b.w	801227e <__retarget_lock_acquire_recursive>
 8013712:	bf00      	nop
 8013714:	2400620c 	.word	0x2400620c

08013718 <__malloc_unlock>:
 8013718:	4801      	ldr	r0, [pc, #4]	@ (8013720 <__malloc_unlock+0x8>)
 801371a:	f7fe bdb1 	b.w	8012280 <__retarget_lock_release_recursive>
 801371e:	bf00      	nop
 8013720:	2400620c 	.word	0x2400620c

08013724 <_Balloc>:
 8013724:	b570      	push	{r4, r5, r6, lr}
 8013726:	69c6      	ldr	r6, [r0, #28]
 8013728:	4604      	mov	r4, r0
 801372a:	460d      	mov	r5, r1
 801372c:	b976      	cbnz	r6, 801374c <_Balloc+0x28>
 801372e:	2010      	movs	r0, #16
 8013730:	f7ff ff30 	bl	8013594 <malloc>
 8013734:	4602      	mov	r2, r0
 8013736:	61e0      	str	r0, [r4, #28]
 8013738:	b920      	cbnz	r0, 8013744 <_Balloc+0x20>
 801373a:	4b18      	ldr	r3, [pc, #96]	@ (801379c <_Balloc+0x78>)
 801373c:	4818      	ldr	r0, [pc, #96]	@ (80137a0 <_Balloc+0x7c>)
 801373e:	216b      	movs	r1, #107	@ 0x6b
 8013740:	f000 ff36 	bl	80145b0 <__assert_func>
 8013744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013748:	6006      	str	r6, [r0, #0]
 801374a:	60c6      	str	r6, [r0, #12]
 801374c:	69e6      	ldr	r6, [r4, #28]
 801374e:	68f3      	ldr	r3, [r6, #12]
 8013750:	b183      	cbz	r3, 8013774 <_Balloc+0x50>
 8013752:	69e3      	ldr	r3, [r4, #28]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801375a:	b9b8      	cbnz	r0, 801378c <_Balloc+0x68>
 801375c:	2101      	movs	r1, #1
 801375e:	fa01 f605 	lsl.w	r6, r1, r5
 8013762:	1d72      	adds	r2, r6, #5
 8013764:	0092      	lsls	r2, r2, #2
 8013766:	4620      	mov	r0, r4
 8013768:	f000 ff40 	bl	80145ec <_calloc_r>
 801376c:	b160      	cbz	r0, 8013788 <_Balloc+0x64>
 801376e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013772:	e00e      	b.n	8013792 <_Balloc+0x6e>
 8013774:	2221      	movs	r2, #33	@ 0x21
 8013776:	2104      	movs	r1, #4
 8013778:	4620      	mov	r0, r4
 801377a:	f000 ff37 	bl	80145ec <_calloc_r>
 801377e:	69e3      	ldr	r3, [r4, #28]
 8013780:	60f0      	str	r0, [r6, #12]
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d1e4      	bne.n	8013752 <_Balloc+0x2e>
 8013788:	2000      	movs	r0, #0
 801378a:	bd70      	pop	{r4, r5, r6, pc}
 801378c:	6802      	ldr	r2, [r0, #0]
 801378e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013792:	2300      	movs	r3, #0
 8013794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013798:	e7f7      	b.n	801378a <_Balloc+0x66>
 801379a:	bf00      	nop
 801379c:	08014f57 	.word	0x08014f57
 80137a0:	08015037 	.word	0x08015037

080137a4 <_Bfree>:
 80137a4:	b570      	push	{r4, r5, r6, lr}
 80137a6:	69c6      	ldr	r6, [r0, #28]
 80137a8:	4605      	mov	r5, r0
 80137aa:	460c      	mov	r4, r1
 80137ac:	b976      	cbnz	r6, 80137cc <_Bfree+0x28>
 80137ae:	2010      	movs	r0, #16
 80137b0:	f7ff fef0 	bl	8013594 <malloc>
 80137b4:	4602      	mov	r2, r0
 80137b6:	61e8      	str	r0, [r5, #28]
 80137b8:	b920      	cbnz	r0, 80137c4 <_Bfree+0x20>
 80137ba:	4b09      	ldr	r3, [pc, #36]	@ (80137e0 <_Bfree+0x3c>)
 80137bc:	4809      	ldr	r0, [pc, #36]	@ (80137e4 <_Bfree+0x40>)
 80137be:	218f      	movs	r1, #143	@ 0x8f
 80137c0:	f000 fef6 	bl	80145b0 <__assert_func>
 80137c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137c8:	6006      	str	r6, [r0, #0]
 80137ca:	60c6      	str	r6, [r0, #12]
 80137cc:	b13c      	cbz	r4, 80137de <_Bfree+0x3a>
 80137ce:	69eb      	ldr	r3, [r5, #28]
 80137d0:	6862      	ldr	r2, [r4, #4]
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80137d8:	6021      	str	r1, [r4, #0]
 80137da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80137de:	bd70      	pop	{r4, r5, r6, pc}
 80137e0:	08014f57 	.word	0x08014f57
 80137e4:	08015037 	.word	0x08015037

080137e8 <__multadd>:
 80137e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ec:	690d      	ldr	r5, [r1, #16]
 80137ee:	4607      	mov	r7, r0
 80137f0:	460c      	mov	r4, r1
 80137f2:	461e      	mov	r6, r3
 80137f4:	f101 0c14 	add.w	ip, r1, #20
 80137f8:	2000      	movs	r0, #0
 80137fa:	f8dc 3000 	ldr.w	r3, [ip]
 80137fe:	b299      	uxth	r1, r3
 8013800:	fb02 6101 	mla	r1, r2, r1, r6
 8013804:	0c1e      	lsrs	r6, r3, #16
 8013806:	0c0b      	lsrs	r3, r1, #16
 8013808:	fb02 3306 	mla	r3, r2, r6, r3
 801380c:	b289      	uxth	r1, r1
 801380e:	3001      	adds	r0, #1
 8013810:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013814:	4285      	cmp	r5, r0
 8013816:	f84c 1b04 	str.w	r1, [ip], #4
 801381a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801381e:	dcec      	bgt.n	80137fa <__multadd+0x12>
 8013820:	b30e      	cbz	r6, 8013866 <__multadd+0x7e>
 8013822:	68a3      	ldr	r3, [r4, #8]
 8013824:	42ab      	cmp	r3, r5
 8013826:	dc19      	bgt.n	801385c <__multadd+0x74>
 8013828:	6861      	ldr	r1, [r4, #4]
 801382a:	4638      	mov	r0, r7
 801382c:	3101      	adds	r1, #1
 801382e:	f7ff ff79 	bl	8013724 <_Balloc>
 8013832:	4680      	mov	r8, r0
 8013834:	b928      	cbnz	r0, 8013842 <__multadd+0x5a>
 8013836:	4602      	mov	r2, r0
 8013838:	4b0c      	ldr	r3, [pc, #48]	@ (801386c <__multadd+0x84>)
 801383a:	480d      	ldr	r0, [pc, #52]	@ (8013870 <__multadd+0x88>)
 801383c:	21ba      	movs	r1, #186	@ 0xba
 801383e:	f000 feb7 	bl	80145b0 <__assert_func>
 8013842:	6922      	ldr	r2, [r4, #16]
 8013844:	3202      	adds	r2, #2
 8013846:	f104 010c 	add.w	r1, r4, #12
 801384a:	0092      	lsls	r2, r2, #2
 801384c:	300c      	adds	r0, #12
 801384e:	f7fe fd18 	bl	8012282 <memcpy>
 8013852:	4621      	mov	r1, r4
 8013854:	4638      	mov	r0, r7
 8013856:	f7ff ffa5 	bl	80137a4 <_Bfree>
 801385a:	4644      	mov	r4, r8
 801385c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013860:	3501      	adds	r5, #1
 8013862:	615e      	str	r6, [r3, #20]
 8013864:	6125      	str	r5, [r4, #16]
 8013866:	4620      	mov	r0, r4
 8013868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801386c:	08014fc6 	.word	0x08014fc6
 8013870:	08015037 	.word	0x08015037

08013874 <__s2b>:
 8013874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013878:	460c      	mov	r4, r1
 801387a:	4615      	mov	r5, r2
 801387c:	461f      	mov	r7, r3
 801387e:	2209      	movs	r2, #9
 8013880:	3308      	adds	r3, #8
 8013882:	4606      	mov	r6, r0
 8013884:	fb93 f3f2 	sdiv	r3, r3, r2
 8013888:	2100      	movs	r1, #0
 801388a:	2201      	movs	r2, #1
 801388c:	429a      	cmp	r2, r3
 801388e:	db09      	blt.n	80138a4 <__s2b+0x30>
 8013890:	4630      	mov	r0, r6
 8013892:	f7ff ff47 	bl	8013724 <_Balloc>
 8013896:	b940      	cbnz	r0, 80138aa <__s2b+0x36>
 8013898:	4602      	mov	r2, r0
 801389a:	4b19      	ldr	r3, [pc, #100]	@ (8013900 <__s2b+0x8c>)
 801389c:	4819      	ldr	r0, [pc, #100]	@ (8013904 <__s2b+0x90>)
 801389e:	21d3      	movs	r1, #211	@ 0xd3
 80138a0:	f000 fe86 	bl	80145b0 <__assert_func>
 80138a4:	0052      	lsls	r2, r2, #1
 80138a6:	3101      	adds	r1, #1
 80138a8:	e7f0      	b.n	801388c <__s2b+0x18>
 80138aa:	9b08      	ldr	r3, [sp, #32]
 80138ac:	6143      	str	r3, [r0, #20]
 80138ae:	2d09      	cmp	r5, #9
 80138b0:	f04f 0301 	mov.w	r3, #1
 80138b4:	6103      	str	r3, [r0, #16]
 80138b6:	dd16      	ble.n	80138e6 <__s2b+0x72>
 80138b8:	f104 0909 	add.w	r9, r4, #9
 80138bc:	46c8      	mov	r8, r9
 80138be:	442c      	add	r4, r5
 80138c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80138c4:	4601      	mov	r1, r0
 80138c6:	3b30      	subs	r3, #48	@ 0x30
 80138c8:	220a      	movs	r2, #10
 80138ca:	4630      	mov	r0, r6
 80138cc:	f7ff ff8c 	bl	80137e8 <__multadd>
 80138d0:	45a0      	cmp	r8, r4
 80138d2:	d1f5      	bne.n	80138c0 <__s2b+0x4c>
 80138d4:	f1a5 0408 	sub.w	r4, r5, #8
 80138d8:	444c      	add	r4, r9
 80138da:	1b2d      	subs	r5, r5, r4
 80138dc:	1963      	adds	r3, r4, r5
 80138de:	42bb      	cmp	r3, r7
 80138e0:	db04      	blt.n	80138ec <__s2b+0x78>
 80138e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138e6:	340a      	adds	r4, #10
 80138e8:	2509      	movs	r5, #9
 80138ea:	e7f6      	b.n	80138da <__s2b+0x66>
 80138ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80138f0:	4601      	mov	r1, r0
 80138f2:	3b30      	subs	r3, #48	@ 0x30
 80138f4:	220a      	movs	r2, #10
 80138f6:	4630      	mov	r0, r6
 80138f8:	f7ff ff76 	bl	80137e8 <__multadd>
 80138fc:	e7ee      	b.n	80138dc <__s2b+0x68>
 80138fe:	bf00      	nop
 8013900:	08014fc6 	.word	0x08014fc6
 8013904:	08015037 	.word	0x08015037

08013908 <__hi0bits>:
 8013908:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801390c:	4603      	mov	r3, r0
 801390e:	bf36      	itet	cc
 8013910:	0403      	lslcc	r3, r0, #16
 8013912:	2000      	movcs	r0, #0
 8013914:	2010      	movcc	r0, #16
 8013916:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801391a:	bf3c      	itt	cc
 801391c:	021b      	lslcc	r3, r3, #8
 801391e:	3008      	addcc	r0, #8
 8013920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013924:	bf3c      	itt	cc
 8013926:	011b      	lslcc	r3, r3, #4
 8013928:	3004      	addcc	r0, #4
 801392a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801392e:	bf3c      	itt	cc
 8013930:	009b      	lslcc	r3, r3, #2
 8013932:	3002      	addcc	r0, #2
 8013934:	2b00      	cmp	r3, #0
 8013936:	db05      	blt.n	8013944 <__hi0bits+0x3c>
 8013938:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801393c:	f100 0001 	add.w	r0, r0, #1
 8013940:	bf08      	it	eq
 8013942:	2020      	moveq	r0, #32
 8013944:	4770      	bx	lr

08013946 <__lo0bits>:
 8013946:	6803      	ldr	r3, [r0, #0]
 8013948:	4602      	mov	r2, r0
 801394a:	f013 0007 	ands.w	r0, r3, #7
 801394e:	d00b      	beq.n	8013968 <__lo0bits+0x22>
 8013950:	07d9      	lsls	r1, r3, #31
 8013952:	d421      	bmi.n	8013998 <__lo0bits+0x52>
 8013954:	0798      	lsls	r0, r3, #30
 8013956:	bf49      	itett	mi
 8013958:	085b      	lsrmi	r3, r3, #1
 801395a:	089b      	lsrpl	r3, r3, #2
 801395c:	2001      	movmi	r0, #1
 801395e:	6013      	strmi	r3, [r2, #0]
 8013960:	bf5c      	itt	pl
 8013962:	6013      	strpl	r3, [r2, #0]
 8013964:	2002      	movpl	r0, #2
 8013966:	4770      	bx	lr
 8013968:	b299      	uxth	r1, r3
 801396a:	b909      	cbnz	r1, 8013970 <__lo0bits+0x2a>
 801396c:	0c1b      	lsrs	r3, r3, #16
 801396e:	2010      	movs	r0, #16
 8013970:	b2d9      	uxtb	r1, r3
 8013972:	b909      	cbnz	r1, 8013978 <__lo0bits+0x32>
 8013974:	3008      	adds	r0, #8
 8013976:	0a1b      	lsrs	r3, r3, #8
 8013978:	0719      	lsls	r1, r3, #28
 801397a:	bf04      	itt	eq
 801397c:	091b      	lsreq	r3, r3, #4
 801397e:	3004      	addeq	r0, #4
 8013980:	0799      	lsls	r1, r3, #30
 8013982:	bf04      	itt	eq
 8013984:	089b      	lsreq	r3, r3, #2
 8013986:	3002      	addeq	r0, #2
 8013988:	07d9      	lsls	r1, r3, #31
 801398a:	d403      	bmi.n	8013994 <__lo0bits+0x4e>
 801398c:	085b      	lsrs	r3, r3, #1
 801398e:	f100 0001 	add.w	r0, r0, #1
 8013992:	d003      	beq.n	801399c <__lo0bits+0x56>
 8013994:	6013      	str	r3, [r2, #0]
 8013996:	4770      	bx	lr
 8013998:	2000      	movs	r0, #0
 801399a:	4770      	bx	lr
 801399c:	2020      	movs	r0, #32
 801399e:	4770      	bx	lr

080139a0 <__i2b>:
 80139a0:	b510      	push	{r4, lr}
 80139a2:	460c      	mov	r4, r1
 80139a4:	2101      	movs	r1, #1
 80139a6:	f7ff febd 	bl	8013724 <_Balloc>
 80139aa:	4602      	mov	r2, r0
 80139ac:	b928      	cbnz	r0, 80139ba <__i2b+0x1a>
 80139ae:	4b05      	ldr	r3, [pc, #20]	@ (80139c4 <__i2b+0x24>)
 80139b0:	4805      	ldr	r0, [pc, #20]	@ (80139c8 <__i2b+0x28>)
 80139b2:	f240 1145 	movw	r1, #325	@ 0x145
 80139b6:	f000 fdfb 	bl	80145b0 <__assert_func>
 80139ba:	2301      	movs	r3, #1
 80139bc:	6144      	str	r4, [r0, #20]
 80139be:	6103      	str	r3, [r0, #16]
 80139c0:	bd10      	pop	{r4, pc}
 80139c2:	bf00      	nop
 80139c4:	08014fc6 	.word	0x08014fc6
 80139c8:	08015037 	.word	0x08015037

080139cc <__multiply>:
 80139cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139d0:	4617      	mov	r7, r2
 80139d2:	690a      	ldr	r2, [r1, #16]
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	bfa8      	it	ge
 80139da:	463b      	movge	r3, r7
 80139dc:	4689      	mov	r9, r1
 80139de:	bfa4      	itt	ge
 80139e0:	460f      	movge	r7, r1
 80139e2:	4699      	movge	r9, r3
 80139e4:	693d      	ldr	r5, [r7, #16]
 80139e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	6879      	ldr	r1, [r7, #4]
 80139ee:	eb05 060a 	add.w	r6, r5, sl
 80139f2:	42b3      	cmp	r3, r6
 80139f4:	b085      	sub	sp, #20
 80139f6:	bfb8      	it	lt
 80139f8:	3101      	addlt	r1, #1
 80139fa:	f7ff fe93 	bl	8013724 <_Balloc>
 80139fe:	b930      	cbnz	r0, 8013a0e <__multiply+0x42>
 8013a00:	4602      	mov	r2, r0
 8013a02:	4b41      	ldr	r3, [pc, #260]	@ (8013b08 <__multiply+0x13c>)
 8013a04:	4841      	ldr	r0, [pc, #260]	@ (8013b0c <__multiply+0x140>)
 8013a06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013a0a:	f000 fdd1 	bl	80145b0 <__assert_func>
 8013a0e:	f100 0414 	add.w	r4, r0, #20
 8013a12:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8013a16:	4623      	mov	r3, r4
 8013a18:	2200      	movs	r2, #0
 8013a1a:	4573      	cmp	r3, lr
 8013a1c:	d320      	bcc.n	8013a60 <__multiply+0x94>
 8013a1e:	f107 0814 	add.w	r8, r7, #20
 8013a22:	f109 0114 	add.w	r1, r9, #20
 8013a26:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8013a2a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8013a2e:	9302      	str	r3, [sp, #8]
 8013a30:	1beb      	subs	r3, r5, r7
 8013a32:	3b15      	subs	r3, #21
 8013a34:	f023 0303 	bic.w	r3, r3, #3
 8013a38:	3304      	adds	r3, #4
 8013a3a:	3715      	adds	r7, #21
 8013a3c:	42bd      	cmp	r5, r7
 8013a3e:	bf38      	it	cc
 8013a40:	2304      	movcc	r3, #4
 8013a42:	9301      	str	r3, [sp, #4]
 8013a44:	9b02      	ldr	r3, [sp, #8]
 8013a46:	9103      	str	r1, [sp, #12]
 8013a48:	428b      	cmp	r3, r1
 8013a4a:	d80c      	bhi.n	8013a66 <__multiply+0x9a>
 8013a4c:	2e00      	cmp	r6, #0
 8013a4e:	dd03      	ble.n	8013a58 <__multiply+0x8c>
 8013a50:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d055      	beq.n	8013b04 <__multiply+0x138>
 8013a58:	6106      	str	r6, [r0, #16]
 8013a5a:	b005      	add	sp, #20
 8013a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a60:	f843 2b04 	str.w	r2, [r3], #4
 8013a64:	e7d9      	b.n	8013a1a <__multiply+0x4e>
 8013a66:	f8b1 a000 	ldrh.w	sl, [r1]
 8013a6a:	f1ba 0f00 	cmp.w	sl, #0
 8013a6e:	d01f      	beq.n	8013ab0 <__multiply+0xe4>
 8013a70:	46c4      	mov	ip, r8
 8013a72:	46a1      	mov	r9, r4
 8013a74:	2700      	movs	r7, #0
 8013a76:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013a7a:	f8d9 3000 	ldr.w	r3, [r9]
 8013a7e:	fa1f fb82 	uxth.w	fp, r2
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	fb0a 330b 	mla	r3, sl, fp, r3
 8013a88:	443b      	add	r3, r7
 8013a8a:	f8d9 7000 	ldr.w	r7, [r9]
 8013a8e:	0c12      	lsrs	r2, r2, #16
 8013a90:	0c3f      	lsrs	r7, r7, #16
 8013a92:	fb0a 7202 	mla	r2, sl, r2, r7
 8013a96:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013aa0:	4565      	cmp	r5, ip
 8013aa2:	f849 3b04 	str.w	r3, [r9], #4
 8013aa6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8013aaa:	d8e4      	bhi.n	8013a76 <__multiply+0xaa>
 8013aac:	9b01      	ldr	r3, [sp, #4]
 8013aae:	50e7      	str	r7, [r4, r3]
 8013ab0:	9b03      	ldr	r3, [sp, #12]
 8013ab2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013ab6:	3104      	adds	r1, #4
 8013ab8:	f1b9 0f00 	cmp.w	r9, #0
 8013abc:	d020      	beq.n	8013b00 <__multiply+0x134>
 8013abe:	6823      	ldr	r3, [r4, #0]
 8013ac0:	4647      	mov	r7, r8
 8013ac2:	46a4      	mov	ip, r4
 8013ac4:	f04f 0a00 	mov.w	sl, #0
 8013ac8:	f8b7 b000 	ldrh.w	fp, [r7]
 8013acc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013ad0:	fb09 220b 	mla	r2, r9, fp, r2
 8013ad4:	4452      	add	r2, sl
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013adc:	f84c 3b04 	str.w	r3, [ip], #4
 8013ae0:	f857 3b04 	ldr.w	r3, [r7], #4
 8013ae4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ae8:	f8bc 3000 	ldrh.w	r3, [ip]
 8013aec:	fb09 330a 	mla	r3, r9, sl, r3
 8013af0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8013af4:	42bd      	cmp	r5, r7
 8013af6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013afa:	d8e5      	bhi.n	8013ac8 <__multiply+0xfc>
 8013afc:	9a01      	ldr	r2, [sp, #4]
 8013afe:	50a3      	str	r3, [r4, r2]
 8013b00:	3404      	adds	r4, #4
 8013b02:	e79f      	b.n	8013a44 <__multiply+0x78>
 8013b04:	3e01      	subs	r6, #1
 8013b06:	e7a1      	b.n	8013a4c <__multiply+0x80>
 8013b08:	08014fc6 	.word	0x08014fc6
 8013b0c:	08015037 	.word	0x08015037

08013b10 <__pow5mult>:
 8013b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b14:	4615      	mov	r5, r2
 8013b16:	f012 0203 	ands.w	r2, r2, #3
 8013b1a:	4607      	mov	r7, r0
 8013b1c:	460e      	mov	r6, r1
 8013b1e:	d007      	beq.n	8013b30 <__pow5mult+0x20>
 8013b20:	4c25      	ldr	r4, [pc, #148]	@ (8013bb8 <__pow5mult+0xa8>)
 8013b22:	3a01      	subs	r2, #1
 8013b24:	2300      	movs	r3, #0
 8013b26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b2a:	f7ff fe5d 	bl	80137e8 <__multadd>
 8013b2e:	4606      	mov	r6, r0
 8013b30:	10ad      	asrs	r5, r5, #2
 8013b32:	d03d      	beq.n	8013bb0 <__pow5mult+0xa0>
 8013b34:	69fc      	ldr	r4, [r7, #28]
 8013b36:	b97c      	cbnz	r4, 8013b58 <__pow5mult+0x48>
 8013b38:	2010      	movs	r0, #16
 8013b3a:	f7ff fd2b 	bl	8013594 <malloc>
 8013b3e:	4602      	mov	r2, r0
 8013b40:	61f8      	str	r0, [r7, #28]
 8013b42:	b928      	cbnz	r0, 8013b50 <__pow5mult+0x40>
 8013b44:	4b1d      	ldr	r3, [pc, #116]	@ (8013bbc <__pow5mult+0xac>)
 8013b46:	481e      	ldr	r0, [pc, #120]	@ (8013bc0 <__pow5mult+0xb0>)
 8013b48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013b4c:	f000 fd30 	bl	80145b0 <__assert_func>
 8013b50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b54:	6004      	str	r4, [r0, #0]
 8013b56:	60c4      	str	r4, [r0, #12]
 8013b58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013b5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b60:	b94c      	cbnz	r4, 8013b76 <__pow5mult+0x66>
 8013b62:	f240 2171 	movw	r1, #625	@ 0x271
 8013b66:	4638      	mov	r0, r7
 8013b68:	f7ff ff1a 	bl	80139a0 <__i2b>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b72:	4604      	mov	r4, r0
 8013b74:	6003      	str	r3, [r0, #0]
 8013b76:	f04f 0900 	mov.w	r9, #0
 8013b7a:	07eb      	lsls	r3, r5, #31
 8013b7c:	d50a      	bpl.n	8013b94 <__pow5mult+0x84>
 8013b7e:	4631      	mov	r1, r6
 8013b80:	4622      	mov	r2, r4
 8013b82:	4638      	mov	r0, r7
 8013b84:	f7ff ff22 	bl	80139cc <__multiply>
 8013b88:	4631      	mov	r1, r6
 8013b8a:	4680      	mov	r8, r0
 8013b8c:	4638      	mov	r0, r7
 8013b8e:	f7ff fe09 	bl	80137a4 <_Bfree>
 8013b92:	4646      	mov	r6, r8
 8013b94:	106d      	asrs	r5, r5, #1
 8013b96:	d00b      	beq.n	8013bb0 <__pow5mult+0xa0>
 8013b98:	6820      	ldr	r0, [r4, #0]
 8013b9a:	b938      	cbnz	r0, 8013bac <__pow5mult+0x9c>
 8013b9c:	4622      	mov	r2, r4
 8013b9e:	4621      	mov	r1, r4
 8013ba0:	4638      	mov	r0, r7
 8013ba2:	f7ff ff13 	bl	80139cc <__multiply>
 8013ba6:	6020      	str	r0, [r4, #0]
 8013ba8:	f8c0 9000 	str.w	r9, [r0]
 8013bac:	4604      	mov	r4, r0
 8013bae:	e7e4      	b.n	8013b7a <__pow5mult+0x6a>
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bb6:	bf00      	nop
 8013bb8:	08015130 	.word	0x08015130
 8013bbc:	08014f57 	.word	0x08014f57
 8013bc0:	08015037 	.word	0x08015037

08013bc4 <__lshift>:
 8013bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bc8:	460c      	mov	r4, r1
 8013bca:	6849      	ldr	r1, [r1, #4]
 8013bcc:	6923      	ldr	r3, [r4, #16]
 8013bce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013bd2:	68a3      	ldr	r3, [r4, #8]
 8013bd4:	4607      	mov	r7, r0
 8013bd6:	4691      	mov	r9, r2
 8013bd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013bdc:	f108 0601 	add.w	r6, r8, #1
 8013be0:	42b3      	cmp	r3, r6
 8013be2:	db0b      	blt.n	8013bfc <__lshift+0x38>
 8013be4:	4638      	mov	r0, r7
 8013be6:	f7ff fd9d 	bl	8013724 <_Balloc>
 8013bea:	4605      	mov	r5, r0
 8013bec:	b948      	cbnz	r0, 8013c02 <__lshift+0x3e>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	4b28      	ldr	r3, [pc, #160]	@ (8013c94 <__lshift+0xd0>)
 8013bf2:	4829      	ldr	r0, [pc, #164]	@ (8013c98 <__lshift+0xd4>)
 8013bf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013bf8:	f000 fcda 	bl	80145b0 <__assert_func>
 8013bfc:	3101      	adds	r1, #1
 8013bfe:	005b      	lsls	r3, r3, #1
 8013c00:	e7ee      	b.n	8013be0 <__lshift+0x1c>
 8013c02:	2300      	movs	r3, #0
 8013c04:	f100 0114 	add.w	r1, r0, #20
 8013c08:	f100 0210 	add.w	r2, r0, #16
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	4553      	cmp	r3, sl
 8013c10:	db33      	blt.n	8013c7a <__lshift+0xb6>
 8013c12:	6920      	ldr	r0, [r4, #16]
 8013c14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c18:	f104 0314 	add.w	r3, r4, #20
 8013c1c:	f019 091f 	ands.w	r9, r9, #31
 8013c20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013c28:	d02b      	beq.n	8013c82 <__lshift+0xbe>
 8013c2a:	f1c9 0e20 	rsb	lr, r9, #32
 8013c2e:	468a      	mov	sl, r1
 8013c30:	2200      	movs	r2, #0
 8013c32:	6818      	ldr	r0, [r3, #0]
 8013c34:	fa00 f009 	lsl.w	r0, r0, r9
 8013c38:	4310      	orrs	r0, r2
 8013c3a:	f84a 0b04 	str.w	r0, [sl], #4
 8013c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c42:	459c      	cmp	ip, r3
 8013c44:	fa22 f20e 	lsr.w	r2, r2, lr
 8013c48:	d8f3      	bhi.n	8013c32 <__lshift+0x6e>
 8013c4a:	ebac 0304 	sub.w	r3, ip, r4
 8013c4e:	3b15      	subs	r3, #21
 8013c50:	f023 0303 	bic.w	r3, r3, #3
 8013c54:	3304      	adds	r3, #4
 8013c56:	f104 0015 	add.w	r0, r4, #21
 8013c5a:	4560      	cmp	r0, ip
 8013c5c:	bf88      	it	hi
 8013c5e:	2304      	movhi	r3, #4
 8013c60:	50ca      	str	r2, [r1, r3]
 8013c62:	b10a      	cbz	r2, 8013c68 <__lshift+0xa4>
 8013c64:	f108 0602 	add.w	r6, r8, #2
 8013c68:	3e01      	subs	r6, #1
 8013c6a:	4638      	mov	r0, r7
 8013c6c:	612e      	str	r6, [r5, #16]
 8013c6e:	4621      	mov	r1, r4
 8013c70:	f7ff fd98 	bl	80137a4 <_Bfree>
 8013c74:	4628      	mov	r0, r5
 8013c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c7e:	3301      	adds	r3, #1
 8013c80:	e7c5      	b.n	8013c0e <__lshift+0x4a>
 8013c82:	3904      	subs	r1, #4
 8013c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c88:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c8c:	459c      	cmp	ip, r3
 8013c8e:	d8f9      	bhi.n	8013c84 <__lshift+0xc0>
 8013c90:	e7ea      	b.n	8013c68 <__lshift+0xa4>
 8013c92:	bf00      	nop
 8013c94:	08014fc6 	.word	0x08014fc6
 8013c98:	08015037 	.word	0x08015037

08013c9c <__mcmp>:
 8013c9c:	690a      	ldr	r2, [r1, #16]
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	6900      	ldr	r0, [r0, #16]
 8013ca2:	1a80      	subs	r0, r0, r2
 8013ca4:	b530      	push	{r4, r5, lr}
 8013ca6:	d10e      	bne.n	8013cc6 <__mcmp+0x2a>
 8013ca8:	3314      	adds	r3, #20
 8013caa:	3114      	adds	r1, #20
 8013cac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013cb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013cb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013cb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013cbc:	4295      	cmp	r5, r2
 8013cbe:	d003      	beq.n	8013cc8 <__mcmp+0x2c>
 8013cc0:	d205      	bcs.n	8013cce <__mcmp+0x32>
 8013cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc6:	bd30      	pop	{r4, r5, pc}
 8013cc8:	42a3      	cmp	r3, r4
 8013cca:	d3f3      	bcc.n	8013cb4 <__mcmp+0x18>
 8013ccc:	e7fb      	b.n	8013cc6 <__mcmp+0x2a>
 8013cce:	2001      	movs	r0, #1
 8013cd0:	e7f9      	b.n	8013cc6 <__mcmp+0x2a>
	...

08013cd4 <__mdiff>:
 8013cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd8:	4689      	mov	r9, r1
 8013cda:	4606      	mov	r6, r0
 8013cdc:	4611      	mov	r1, r2
 8013cde:	4648      	mov	r0, r9
 8013ce0:	4614      	mov	r4, r2
 8013ce2:	f7ff ffdb 	bl	8013c9c <__mcmp>
 8013ce6:	1e05      	subs	r5, r0, #0
 8013ce8:	d112      	bne.n	8013d10 <__mdiff+0x3c>
 8013cea:	4629      	mov	r1, r5
 8013cec:	4630      	mov	r0, r6
 8013cee:	f7ff fd19 	bl	8013724 <_Balloc>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	b928      	cbnz	r0, 8013d02 <__mdiff+0x2e>
 8013cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8013df4 <__mdiff+0x120>)
 8013cf8:	f240 2137 	movw	r1, #567	@ 0x237
 8013cfc:	483e      	ldr	r0, [pc, #248]	@ (8013df8 <__mdiff+0x124>)
 8013cfe:	f000 fc57 	bl	80145b0 <__assert_func>
 8013d02:	2301      	movs	r3, #1
 8013d04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013d08:	4610      	mov	r0, r2
 8013d0a:	b003      	add	sp, #12
 8013d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d10:	bfbc      	itt	lt
 8013d12:	464b      	movlt	r3, r9
 8013d14:	46a1      	movlt	r9, r4
 8013d16:	4630      	mov	r0, r6
 8013d18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013d1c:	bfba      	itte	lt
 8013d1e:	461c      	movlt	r4, r3
 8013d20:	2501      	movlt	r5, #1
 8013d22:	2500      	movge	r5, #0
 8013d24:	f7ff fcfe 	bl	8013724 <_Balloc>
 8013d28:	4602      	mov	r2, r0
 8013d2a:	b918      	cbnz	r0, 8013d34 <__mdiff+0x60>
 8013d2c:	4b31      	ldr	r3, [pc, #196]	@ (8013df4 <__mdiff+0x120>)
 8013d2e:	f240 2145 	movw	r1, #581	@ 0x245
 8013d32:	e7e3      	b.n	8013cfc <__mdiff+0x28>
 8013d34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013d38:	6926      	ldr	r6, [r4, #16]
 8013d3a:	60c5      	str	r5, [r0, #12]
 8013d3c:	f109 0310 	add.w	r3, r9, #16
 8013d40:	f109 0514 	add.w	r5, r9, #20
 8013d44:	f104 0e14 	add.w	lr, r4, #20
 8013d48:	f100 0b14 	add.w	fp, r0, #20
 8013d4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013d50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013d54:	9301      	str	r3, [sp, #4]
 8013d56:	46d9      	mov	r9, fp
 8013d58:	f04f 0c00 	mov.w	ip, #0
 8013d5c:	9b01      	ldr	r3, [sp, #4]
 8013d5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013d62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013d66:	9301      	str	r3, [sp, #4]
 8013d68:	fa1f f38a 	uxth.w	r3, sl
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	b283      	uxth	r3, r0
 8013d70:	1acb      	subs	r3, r1, r3
 8013d72:	0c00      	lsrs	r0, r0, #16
 8013d74:	4463      	add	r3, ip
 8013d76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013d7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013d7e:	b29b      	uxth	r3, r3
 8013d80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013d84:	4576      	cmp	r6, lr
 8013d86:	f849 3b04 	str.w	r3, [r9], #4
 8013d8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013d8e:	d8e5      	bhi.n	8013d5c <__mdiff+0x88>
 8013d90:	1b33      	subs	r3, r6, r4
 8013d92:	3b15      	subs	r3, #21
 8013d94:	f023 0303 	bic.w	r3, r3, #3
 8013d98:	3415      	adds	r4, #21
 8013d9a:	3304      	adds	r3, #4
 8013d9c:	42a6      	cmp	r6, r4
 8013d9e:	bf38      	it	cc
 8013da0:	2304      	movcc	r3, #4
 8013da2:	441d      	add	r5, r3
 8013da4:	445b      	add	r3, fp
 8013da6:	461e      	mov	r6, r3
 8013da8:	462c      	mov	r4, r5
 8013daa:	4544      	cmp	r4, r8
 8013dac:	d30e      	bcc.n	8013dcc <__mdiff+0xf8>
 8013dae:	f108 0103 	add.w	r1, r8, #3
 8013db2:	1b49      	subs	r1, r1, r5
 8013db4:	f021 0103 	bic.w	r1, r1, #3
 8013db8:	3d03      	subs	r5, #3
 8013dba:	45a8      	cmp	r8, r5
 8013dbc:	bf38      	it	cc
 8013dbe:	2100      	movcc	r1, #0
 8013dc0:	440b      	add	r3, r1
 8013dc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013dc6:	b191      	cbz	r1, 8013dee <__mdiff+0x11a>
 8013dc8:	6117      	str	r7, [r2, #16]
 8013dca:	e79d      	b.n	8013d08 <__mdiff+0x34>
 8013dcc:	f854 1b04 	ldr.w	r1, [r4], #4
 8013dd0:	46e6      	mov	lr, ip
 8013dd2:	0c08      	lsrs	r0, r1, #16
 8013dd4:	fa1c fc81 	uxtah	ip, ip, r1
 8013dd8:	4471      	add	r1, lr
 8013dda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013dde:	b289      	uxth	r1, r1
 8013de0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013de4:	f846 1b04 	str.w	r1, [r6], #4
 8013de8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013dec:	e7dd      	b.n	8013daa <__mdiff+0xd6>
 8013dee:	3f01      	subs	r7, #1
 8013df0:	e7e7      	b.n	8013dc2 <__mdiff+0xee>
 8013df2:	bf00      	nop
 8013df4:	08014fc6 	.word	0x08014fc6
 8013df8:	08015037 	.word	0x08015037

08013dfc <__ulp>:
 8013dfc:	b082      	sub	sp, #8
 8013dfe:	ed8d 0b00 	vstr	d0, [sp]
 8013e02:	9a01      	ldr	r2, [sp, #4]
 8013e04:	4b0f      	ldr	r3, [pc, #60]	@ (8013e44 <__ulp+0x48>)
 8013e06:	4013      	ands	r3, r2
 8013e08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	dc08      	bgt.n	8013e22 <__ulp+0x26>
 8013e10:	425b      	negs	r3, r3
 8013e12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013e16:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013e1a:	da04      	bge.n	8013e26 <__ulp+0x2a>
 8013e1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013e20:	4113      	asrs	r3, r2
 8013e22:	2200      	movs	r2, #0
 8013e24:	e008      	b.n	8013e38 <__ulp+0x3c>
 8013e26:	f1a2 0314 	sub.w	r3, r2, #20
 8013e2a:	2b1e      	cmp	r3, #30
 8013e2c:	bfda      	itte	le
 8013e2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013e32:	40da      	lsrle	r2, r3
 8013e34:	2201      	movgt	r2, #1
 8013e36:	2300      	movs	r3, #0
 8013e38:	4619      	mov	r1, r3
 8013e3a:	4610      	mov	r0, r2
 8013e3c:	ec41 0b10 	vmov	d0, r0, r1
 8013e40:	b002      	add	sp, #8
 8013e42:	4770      	bx	lr
 8013e44:	7ff00000 	.word	0x7ff00000

08013e48 <__b2d>:
 8013e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e4c:	6906      	ldr	r6, [r0, #16]
 8013e4e:	f100 0814 	add.w	r8, r0, #20
 8013e52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013e56:	1f37      	subs	r7, r6, #4
 8013e58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013e5c:	4610      	mov	r0, r2
 8013e5e:	f7ff fd53 	bl	8013908 <__hi0bits>
 8013e62:	f1c0 0320 	rsb	r3, r0, #32
 8013e66:	280a      	cmp	r0, #10
 8013e68:	600b      	str	r3, [r1, #0]
 8013e6a:	491b      	ldr	r1, [pc, #108]	@ (8013ed8 <__b2d+0x90>)
 8013e6c:	dc15      	bgt.n	8013e9a <__b2d+0x52>
 8013e6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8013e72:	fa22 f30c 	lsr.w	r3, r2, ip
 8013e76:	45b8      	cmp	r8, r7
 8013e78:	ea43 0501 	orr.w	r5, r3, r1
 8013e7c:	bf34      	ite	cc
 8013e7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013e82:	2300      	movcs	r3, #0
 8013e84:	3015      	adds	r0, #21
 8013e86:	fa02 f000 	lsl.w	r0, r2, r0
 8013e8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8013e8e:	4303      	orrs	r3, r0
 8013e90:	461c      	mov	r4, r3
 8013e92:	ec45 4b10 	vmov	d0, r4, r5
 8013e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e9a:	45b8      	cmp	r8, r7
 8013e9c:	bf3a      	itte	cc
 8013e9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013ea2:	f1a6 0708 	subcc.w	r7, r6, #8
 8013ea6:	2300      	movcs	r3, #0
 8013ea8:	380b      	subs	r0, #11
 8013eaa:	d012      	beq.n	8013ed2 <__b2d+0x8a>
 8013eac:	f1c0 0120 	rsb	r1, r0, #32
 8013eb0:	fa23 f401 	lsr.w	r4, r3, r1
 8013eb4:	4082      	lsls	r2, r0
 8013eb6:	4322      	orrs	r2, r4
 8013eb8:	4547      	cmp	r7, r8
 8013eba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013ebe:	bf8c      	ite	hi
 8013ec0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013ec4:	2200      	movls	r2, #0
 8013ec6:	4083      	lsls	r3, r0
 8013ec8:	40ca      	lsrs	r2, r1
 8013eca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013ece:	4313      	orrs	r3, r2
 8013ed0:	e7de      	b.n	8013e90 <__b2d+0x48>
 8013ed2:	ea42 0501 	orr.w	r5, r2, r1
 8013ed6:	e7db      	b.n	8013e90 <__b2d+0x48>
 8013ed8:	3ff00000 	.word	0x3ff00000

08013edc <__d2b>:
 8013edc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ee0:	460f      	mov	r7, r1
 8013ee2:	2101      	movs	r1, #1
 8013ee4:	ec59 8b10 	vmov	r8, r9, d0
 8013ee8:	4616      	mov	r6, r2
 8013eea:	f7ff fc1b 	bl	8013724 <_Balloc>
 8013eee:	4604      	mov	r4, r0
 8013ef0:	b930      	cbnz	r0, 8013f00 <__d2b+0x24>
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	4b23      	ldr	r3, [pc, #140]	@ (8013f84 <__d2b+0xa8>)
 8013ef6:	4824      	ldr	r0, [pc, #144]	@ (8013f88 <__d2b+0xac>)
 8013ef8:	f240 310f 	movw	r1, #783	@ 0x30f
 8013efc:	f000 fb58 	bl	80145b0 <__assert_func>
 8013f00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013f04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f08:	b10d      	cbz	r5, 8013f0e <__d2b+0x32>
 8013f0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013f0e:	9301      	str	r3, [sp, #4]
 8013f10:	f1b8 0300 	subs.w	r3, r8, #0
 8013f14:	d023      	beq.n	8013f5e <__d2b+0x82>
 8013f16:	4668      	mov	r0, sp
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	f7ff fd14 	bl	8013946 <__lo0bits>
 8013f1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013f22:	b1d0      	cbz	r0, 8013f5a <__d2b+0x7e>
 8013f24:	f1c0 0320 	rsb	r3, r0, #32
 8013f28:	fa02 f303 	lsl.w	r3, r2, r3
 8013f2c:	430b      	orrs	r3, r1
 8013f2e:	40c2      	lsrs	r2, r0
 8013f30:	6163      	str	r3, [r4, #20]
 8013f32:	9201      	str	r2, [sp, #4]
 8013f34:	9b01      	ldr	r3, [sp, #4]
 8013f36:	61a3      	str	r3, [r4, #24]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	bf0c      	ite	eq
 8013f3c:	2201      	moveq	r2, #1
 8013f3e:	2202      	movne	r2, #2
 8013f40:	6122      	str	r2, [r4, #16]
 8013f42:	b1a5      	cbz	r5, 8013f6e <__d2b+0x92>
 8013f44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013f48:	4405      	add	r5, r0
 8013f4a:	603d      	str	r5, [r7, #0]
 8013f4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013f50:	6030      	str	r0, [r6, #0]
 8013f52:	4620      	mov	r0, r4
 8013f54:	b003      	add	sp, #12
 8013f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f5a:	6161      	str	r1, [r4, #20]
 8013f5c:	e7ea      	b.n	8013f34 <__d2b+0x58>
 8013f5e:	a801      	add	r0, sp, #4
 8013f60:	f7ff fcf1 	bl	8013946 <__lo0bits>
 8013f64:	9b01      	ldr	r3, [sp, #4]
 8013f66:	6163      	str	r3, [r4, #20]
 8013f68:	3020      	adds	r0, #32
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	e7e8      	b.n	8013f40 <__d2b+0x64>
 8013f6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013f72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013f76:	6038      	str	r0, [r7, #0]
 8013f78:	6918      	ldr	r0, [r3, #16]
 8013f7a:	f7ff fcc5 	bl	8013908 <__hi0bits>
 8013f7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013f82:	e7e5      	b.n	8013f50 <__d2b+0x74>
 8013f84:	08014fc6 	.word	0x08014fc6
 8013f88:	08015037 	.word	0x08015037

08013f8c <__ratio>:
 8013f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f90:	4688      	mov	r8, r1
 8013f92:	4669      	mov	r1, sp
 8013f94:	4681      	mov	r9, r0
 8013f96:	f7ff ff57 	bl	8013e48 <__b2d>
 8013f9a:	a901      	add	r1, sp, #4
 8013f9c:	4640      	mov	r0, r8
 8013f9e:	ec55 4b10 	vmov	r4, r5, d0
 8013fa2:	f7ff ff51 	bl	8013e48 <__b2d>
 8013fa6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013faa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013fae:	1ad2      	subs	r2, r2, r3
 8013fb0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8013fb4:	1a5b      	subs	r3, r3, r1
 8013fb6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8013fba:	ec57 6b10 	vmov	r6, r7, d0
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	bfd6      	itet	le
 8013fc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013fc6:	462a      	movgt	r2, r5
 8013fc8:	463a      	movle	r2, r7
 8013fca:	46ab      	mov	fp, r5
 8013fcc:	46a2      	mov	sl, r4
 8013fce:	bfce      	itee	gt
 8013fd0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8013fd4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8013fd8:	ee00 3a90 	vmovle	s1, r3
 8013fdc:	ec4b ab17 	vmov	d7, sl, fp
 8013fe0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8013fe4:	b003      	add	sp, #12
 8013fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013fea <__copybits>:
 8013fea:	3901      	subs	r1, #1
 8013fec:	b570      	push	{r4, r5, r6, lr}
 8013fee:	1149      	asrs	r1, r1, #5
 8013ff0:	6914      	ldr	r4, [r2, #16]
 8013ff2:	3101      	adds	r1, #1
 8013ff4:	f102 0314 	add.w	r3, r2, #20
 8013ff8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013ffc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014000:	1f05      	subs	r5, r0, #4
 8014002:	42a3      	cmp	r3, r4
 8014004:	d30c      	bcc.n	8014020 <__copybits+0x36>
 8014006:	1aa3      	subs	r3, r4, r2
 8014008:	3b11      	subs	r3, #17
 801400a:	f023 0303 	bic.w	r3, r3, #3
 801400e:	3211      	adds	r2, #17
 8014010:	42a2      	cmp	r2, r4
 8014012:	bf88      	it	hi
 8014014:	2300      	movhi	r3, #0
 8014016:	4418      	add	r0, r3
 8014018:	2300      	movs	r3, #0
 801401a:	4288      	cmp	r0, r1
 801401c:	d305      	bcc.n	801402a <__copybits+0x40>
 801401e:	bd70      	pop	{r4, r5, r6, pc}
 8014020:	f853 6b04 	ldr.w	r6, [r3], #4
 8014024:	f845 6f04 	str.w	r6, [r5, #4]!
 8014028:	e7eb      	b.n	8014002 <__copybits+0x18>
 801402a:	f840 3b04 	str.w	r3, [r0], #4
 801402e:	e7f4      	b.n	801401a <__copybits+0x30>

08014030 <__any_on>:
 8014030:	f100 0214 	add.w	r2, r0, #20
 8014034:	6900      	ldr	r0, [r0, #16]
 8014036:	114b      	asrs	r3, r1, #5
 8014038:	4298      	cmp	r0, r3
 801403a:	b510      	push	{r4, lr}
 801403c:	db11      	blt.n	8014062 <__any_on+0x32>
 801403e:	dd0a      	ble.n	8014056 <__any_on+0x26>
 8014040:	f011 011f 	ands.w	r1, r1, #31
 8014044:	d007      	beq.n	8014056 <__any_on+0x26>
 8014046:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801404a:	fa24 f001 	lsr.w	r0, r4, r1
 801404e:	fa00 f101 	lsl.w	r1, r0, r1
 8014052:	428c      	cmp	r4, r1
 8014054:	d10b      	bne.n	801406e <__any_on+0x3e>
 8014056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801405a:	4293      	cmp	r3, r2
 801405c:	d803      	bhi.n	8014066 <__any_on+0x36>
 801405e:	2000      	movs	r0, #0
 8014060:	bd10      	pop	{r4, pc}
 8014062:	4603      	mov	r3, r0
 8014064:	e7f7      	b.n	8014056 <__any_on+0x26>
 8014066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801406a:	2900      	cmp	r1, #0
 801406c:	d0f5      	beq.n	801405a <__any_on+0x2a>
 801406e:	2001      	movs	r0, #1
 8014070:	e7f6      	b.n	8014060 <__any_on+0x30>

08014072 <__ascii_wctomb>:
 8014072:	4603      	mov	r3, r0
 8014074:	4608      	mov	r0, r1
 8014076:	b141      	cbz	r1, 801408a <__ascii_wctomb+0x18>
 8014078:	2aff      	cmp	r2, #255	@ 0xff
 801407a:	d904      	bls.n	8014086 <__ascii_wctomb+0x14>
 801407c:	228a      	movs	r2, #138	@ 0x8a
 801407e:	601a      	str	r2, [r3, #0]
 8014080:	f04f 30ff 	mov.w	r0, #4294967295
 8014084:	4770      	bx	lr
 8014086:	700a      	strb	r2, [r1, #0]
 8014088:	2001      	movs	r0, #1
 801408a:	4770      	bx	lr

0801408c <__sfputc_r>:
 801408c:	6893      	ldr	r3, [r2, #8]
 801408e:	3b01      	subs	r3, #1
 8014090:	2b00      	cmp	r3, #0
 8014092:	b410      	push	{r4}
 8014094:	6093      	str	r3, [r2, #8]
 8014096:	da08      	bge.n	80140aa <__sfputc_r+0x1e>
 8014098:	6994      	ldr	r4, [r2, #24]
 801409a:	42a3      	cmp	r3, r4
 801409c:	db01      	blt.n	80140a2 <__sfputc_r+0x16>
 801409e:	290a      	cmp	r1, #10
 80140a0:	d103      	bne.n	80140aa <__sfputc_r+0x1e>
 80140a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140a6:	f000 b9df 	b.w	8014468 <__swbuf_r>
 80140aa:	6813      	ldr	r3, [r2, #0]
 80140ac:	1c58      	adds	r0, r3, #1
 80140ae:	6010      	str	r0, [r2, #0]
 80140b0:	7019      	strb	r1, [r3, #0]
 80140b2:	4608      	mov	r0, r1
 80140b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140b8:	4770      	bx	lr

080140ba <__sfputs_r>:
 80140ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140bc:	4606      	mov	r6, r0
 80140be:	460f      	mov	r7, r1
 80140c0:	4614      	mov	r4, r2
 80140c2:	18d5      	adds	r5, r2, r3
 80140c4:	42ac      	cmp	r4, r5
 80140c6:	d101      	bne.n	80140cc <__sfputs_r+0x12>
 80140c8:	2000      	movs	r0, #0
 80140ca:	e007      	b.n	80140dc <__sfputs_r+0x22>
 80140cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140d0:	463a      	mov	r2, r7
 80140d2:	4630      	mov	r0, r6
 80140d4:	f7ff ffda 	bl	801408c <__sfputc_r>
 80140d8:	1c43      	adds	r3, r0, #1
 80140da:	d1f3      	bne.n	80140c4 <__sfputs_r+0xa>
 80140dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080140e0 <_vfiprintf_r>:
 80140e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140e4:	460d      	mov	r5, r1
 80140e6:	b09d      	sub	sp, #116	@ 0x74
 80140e8:	4614      	mov	r4, r2
 80140ea:	4698      	mov	r8, r3
 80140ec:	4606      	mov	r6, r0
 80140ee:	b118      	cbz	r0, 80140f8 <_vfiprintf_r+0x18>
 80140f0:	6a03      	ldr	r3, [r0, #32]
 80140f2:	b90b      	cbnz	r3, 80140f8 <_vfiprintf_r+0x18>
 80140f4:	f7fd fee2 	bl	8011ebc <__sinit>
 80140f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80140fa:	07d9      	lsls	r1, r3, #31
 80140fc:	d405      	bmi.n	801410a <_vfiprintf_r+0x2a>
 80140fe:	89ab      	ldrh	r3, [r5, #12]
 8014100:	059a      	lsls	r2, r3, #22
 8014102:	d402      	bmi.n	801410a <_vfiprintf_r+0x2a>
 8014104:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014106:	f7fe f8ba 	bl	801227e <__retarget_lock_acquire_recursive>
 801410a:	89ab      	ldrh	r3, [r5, #12]
 801410c:	071b      	lsls	r3, r3, #28
 801410e:	d501      	bpl.n	8014114 <_vfiprintf_r+0x34>
 8014110:	692b      	ldr	r3, [r5, #16]
 8014112:	b99b      	cbnz	r3, 801413c <_vfiprintf_r+0x5c>
 8014114:	4629      	mov	r1, r5
 8014116:	4630      	mov	r0, r6
 8014118:	f000 f9e4 	bl	80144e4 <__swsetup_r>
 801411c:	b170      	cbz	r0, 801413c <_vfiprintf_r+0x5c>
 801411e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014120:	07dc      	lsls	r4, r3, #31
 8014122:	d504      	bpl.n	801412e <_vfiprintf_r+0x4e>
 8014124:	f04f 30ff 	mov.w	r0, #4294967295
 8014128:	b01d      	add	sp, #116	@ 0x74
 801412a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801412e:	89ab      	ldrh	r3, [r5, #12]
 8014130:	0598      	lsls	r0, r3, #22
 8014132:	d4f7      	bmi.n	8014124 <_vfiprintf_r+0x44>
 8014134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014136:	f7fe f8a3 	bl	8012280 <__retarget_lock_release_recursive>
 801413a:	e7f3      	b.n	8014124 <_vfiprintf_r+0x44>
 801413c:	2300      	movs	r3, #0
 801413e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014140:	2320      	movs	r3, #32
 8014142:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014146:	f8cd 800c 	str.w	r8, [sp, #12]
 801414a:	2330      	movs	r3, #48	@ 0x30
 801414c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80142fc <_vfiprintf_r+0x21c>
 8014150:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014154:	f04f 0901 	mov.w	r9, #1
 8014158:	4623      	mov	r3, r4
 801415a:	469a      	mov	sl, r3
 801415c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014160:	b10a      	cbz	r2, 8014166 <_vfiprintf_r+0x86>
 8014162:	2a25      	cmp	r2, #37	@ 0x25
 8014164:	d1f9      	bne.n	801415a <_vfiprintf_r+0x7a>
 8014166:	ebba 0b04 	subs.w	fp, sl, r4
 801416a:	d00b      	beq.n	8014184 <_vfiprintf_r+0xa4>
 801416c:	465b      	mov	r3, fp
 801416e:	4622      	mov	r2, r4
 8014170:	4629      	mov	r1, r5
 8014172:	4630      	mov	r0, r6
 8014174:	f7ff ffa1 	bl	80140ba <__sfputs_r>
 8014178:	3001      	adds	r0, #1
 801417a:	f000 80a7 	beq.w	80142cc <_vfiprintf_r+0x1ec>
 801417e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014180:	445a      	add	r2, fp
 8014182:	9209      	str	r2, [sp, #36]	@ 0x24
 8014184:	f89a 3000 	ldrb.w	r3, [sl]
 8014188:	2b00      	cmp	r3, #0
 801418a:	f000 809f 	beq.w	80142cc <_vfiprintf_r+0x1ec>
 801418e:	2300      	movs	r3, #0
 8014190:	f04f 32ff 	mov.w	r2, #4294967295
 8014194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014198:	f10a 0a01 	add.w	sl, sl, #1
 801419c:	9304      	str	r3, [sp, #16]
 801419e:	9307      	str	r3, [sp, #28]
 80141a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80141a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80141a6:	4654      	mov	r4, sl
 80141a8:	2205      	movs	r2, #5
 80141aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141ae:	4853      	ldr	r0, [pc, #332]	@ (80142fc <_vfiprintf_r+0x21c>)
 80141b0:	f7ec f896 	bl	80002e0 <memchr>
 80141b4:	9a04      	ldr	r2, [sp, #16]
 80141b6:	b9d8      	cbnz	r0, 80141f0 <_vfiprintf_r+0x110>
 80141b8:	06d1      	lsls	r1, r2, #27
 80141ba:	bf44      	itt	mi
 80141bc:	2320      	movmi	r3, #32
 80141be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141c2:	0713      	lsls	r3, r2, #28
 80141c4:	bf44      	itt	mi
 80141c6:	232b      	movmi	r3, #43	@ 0x2b
 80141c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141cc:	f89a 3000 	ldrb.w	r3, [sl]
 80141d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80141d2:	d015      	beq.n	8014200 <_vfiprintf_r+0x120>
 80141d4:	9a07      	ldr	r2, [sp, #28]
 80141d6:	4654      	mov	r4, sl
 80141d8:	2000      	movs	r0, #0
 80141da:	f04f 0c0a 	mov.w	ip, #10
 80141de:	4621      	mov	r1, r4
 80141e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141e4:	3b30      	subs	r3, #48	@ 0x30
 80141e6:	2b09      	cmp	r3, #9
 80141e8:	d94b      	bls.n	8014282 <_vfiprintf_r+0x1a2>
 80141ea:	b1b0      	cbz	r0, 801421a <_vfiprintf_r+0x13a>
 80141ec:	9207      	str	r2, [sp, #28]
 80141ee:	e014      	b.n	801421a <_vfiprintf_r+0x13a>
 80141f0:	eba0 0308 	sub.w	r3, r0, r8
 80141f4:	fa09 f303 	lsl.w	r3, r9, r3
 80141f8:	4313      	orrs	r3, r2
 80141fa:	9304      	str	r3, [sp, #16]
 80141fc:	46a2      	mov	sl, r4
 80141fe:	e7d2      	b.n	80141a6 <_vfiprintf_r+0xc6>
 8014200:	9b03      	ldr	r3, [sp, #12]
 8014202:	1d19      	adds	r1, r3, #4
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	9103      	str	r1, [sp, #12]
 8014208:	2b00      	cmp	r3, #0
 801420a:	bfbb      	ittet	lt
 801420c:	425b      	neglt	r3, r3
 801420e:	f042 0202 	orrlt.w	r2, r2, #2
 8014212:	9307      	strge	r3, [sp, #28]
 8014214:	9307      	strlt	r3, [sp, #28]
 8014216:	bfb8      	it	lt
 8014218:	9204      	strlt	r2, [sp, #16]
 801421a:	7823      	ldrb	r3, [r4, #0]
 801421c:	2b2e      	cmp	r3, #46	@ 0x2e
 801421e:	d10a      	bne.n	8014236 <_vfiprintf_r+0x156>
 8014220:	7863      	ldrb	r3, [r4, #1]
 8014222:	2b2a      	cmp	r3, #42	@ 0x2a
 8014224:	d132      	bne.n	801428c <_vfiprintf_r+0x1ac>
 8014226:	9b03      	ldr	r3, [sp, #12]
 8014228:	1d1a      	adds	r2, r3, #4
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	9203      	str	r2, [sp, #12]
 801422e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014232:	3402      	adds	r4, #2
 8014234:	9305      	str	r3, [sp, #20]
 8014236:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801430c <_vfiprintf_r+0x22c>
 801423a:	7821      	ldrb	r1, [r4, #0]
 801423c:	2203      	movs	r2, #3
 801423e:	4650      	mov	r0, sl
 8014240:	f7ec f84e 	bl	80002e0 <memchr>
 8014244:	b138      	cbz	r0, 8014256 <_vfiprintf_r+0x176>
 8014246:	9b04      	ldr	r3, [sp, #16]
 8014248:	eba0 000a 	sub.w	r0, r0, sl
 801424c:	2240      	movs	r2, #64	@ 0x40
 801424e:	4082      	lsls	r2, r0
 8014250:	4313      	orrs	r3, r2
 8014252:	3401      	adds	r4, #1
 8014254:	9304      	str	r3, [sp, #16]
 8014256:	f814 1b01 	ldrb.w	r1, [r4], #1
 801425a:	4829      	ldr	r0, [pc, #164]	@ (8014300 <_vfiprintf_r+0x220>)
 801425c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014260:	2206      	movs	r2, #6
 8014262:	f7ec f83d 	bl	80002e0 <memchr>
 8014266:	2800      	cmp	r0, #0
 8014268:	d03f      	beq.n	80142ea <_vfiprintf_r+0x20a>
 801426a:	4b26      	ldr	r3, [pc, #152]	@ (8014304 <_vfiprintf_r+0x224>)
 801426c:	bb1b      	cbnz	r3, 80142b6 <_vfiprintf_r+0x1d6>
 801426e:	9b03      	ldr	r3, [sp, #12]
 8014270:	3307      	adds	r3, #7
 8014272:	f023 0307 	bic.w	r3, r3, #7
 8014276:	3308      	adds	r3, #8
 8014278:	9303      	str	r3, [sp, #12]
 801427a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801427c:	443b      	add	r3, r7
 801427e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014280:	e76a      	b.n	8014158 <_vfiprintf_r+0x78>
 8014282:	fb0c 3202 	mla	r2, ip, r2, r3
 8014286:	460c      	mov	r4, r1
 8014288:	2001      	movs	r0, #1
 801428a:	e7a8      	b.n	80141de <_vfiprintf_r+0xfe>
 801428c:	2300      	movs	r3, #0
 801428e:	3401      	adds	r4, #1
 8014290:	9305      	str	r3, [sp, #20]
 8014292:	4619      	mov	r1, r3
 8014294:	f04f 0c0a 	mov.w	ip, #10
 8014298:	4620      	mov	r0, r4
 801429a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801429e:	3a30      	subs	r2, #48	@ 0x30
 80142a0:	2a09      	cmp	r2, #9
 80142a2:	d903      	bls.n	80142ac <_vfiprintf_r+0x1cc>
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d0c6      	beq.n	8014236 <_vfiprintf_r+0x156>
 80142a8:	9105      	str	r1, [sp, #20]
 80142aa:	e7c4      	b.n	8014236 <_vfiprintf_r+0x156>
 80142ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80142b0:	4604      	mov	r4, r0
 80142b2:	2301      	movs	r3, #1
 80142b4:	e7f0      	b.n	8014298 <_vfiprintf_r+0x1b8>
 80142b6:	ab03      	add	r3, sp, #12
 80142b8:	9300      	str	r3, [sp, #0]
 80142ba:	462a      	mov	r2, r5
 80142bc:	4b12      	ldr	r3, [pc, #72]	@ (8014308 <_vfiprintf_r+0x228>)
 80142be:	a904      	add	r1, sp, #16
 80142c0:	4630      	mov	r0, r6
 80142c2:	f7fd f9c9 	bl	8011658 <_printf_float>
 80142c6:	4607      	mov	r7, r0
 80142c8:	1c78      	adds	r0, r7, #1
 80142ca:	d1d6      	bne.n	801427a <_vfiprintf_r+0x19a>
 80142cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80142ce:	07d9      	lsls	r1, r3, #31
 80142d0:	d405      	bmi.n	80142de <_vfiprintf_r+0x1fe>
 80142d2:	89ab      	ldrh	r3, [r5, #12]
 80142d4:	059a      	lsls	r2, r3, #22
 80142d6:	d402      	bmi.n	80142de <_vfiprintf_r+0x1fe>
 80142d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80142da:	f7fd ffd1 	bl	8012280 <__retarget_lock_release_recursive>
 80142de:	89ab      	ldrh	r3, [r5, #12]
 80142e0:	065b      	lsls	r3, r3, #25
 80142e2:	f53f af1f 	bmi.w	8014124 <_vfiprintf_r+0x44>
 80142e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80142e8:	e71e      	b.n	8014128 <_vfiprintf_r+0x48>
 80142ea:	ab03      	add	r3, sp, #12
 80142ec:	9300      	str	r3, [sp, #0]
 80142ee:	462a      	mov	r2, r5
 80142f0:	4b05      	ldr	r3, [pc, #20]	@ (8014308 <_vfiprintf_r+0x228>)
 80142f2:	a904      	add	r1, sp, #16
 80142f4:	4630      	mov	r0, r6
 80142f6:	f7fd fc37 	bl	8011b68 <_printf_i>
 80142fa:	e7e4      	b.n	80142c6 <_vfiprintf_r+0x1e6>
 80142fc:	08015090 	.word	0x08015090
 8014300:	0801509a 	.word	0x0801509a
 8014304:	08011659 	.word	0x08011659
 8014308:	080140bb 	.word	0x080140bb
 801430c:	08015096 	.word	0x08015096

08014310 <__sflush_r>:
 8014310:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014318:	0716      	lsls	r6, r2, #28
 801431a:	4605      	mov	r5, r0
 801431c:	460c      	mov	r4, r1
 801431e:	d454      	bmi.n	80143ca <__sflush_r+0xba>
 8014320:	684b      	ldr	r3, [r1, #4]
 8014322:	2b00      	cmp	r3, #0
 8014324:	dc02      	bgt.n	801432c <__sflush_r+0x1c>
 8014326:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014328:	2b00      	cmp	r3, #0
 801432a:	dd48      	ble.n	80143be <__sflush_r+0xae>
 801432c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801432e:	2e00      	cmp	r6, #0
 8014330:	d045      	beq.n	80143be <__sflush_r+0xae>
 8014332:	2300      	movs	r3, #0
 8014334:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014338:	682f      	ldr	r7, [r5, #0]
 801433a:	6a21      	ldr	r1, [r4, #32]
 801433c:	602b      	str	r3, [r5, #0]
 801433e:	d030      	beq.n	80143a2 <__sflush_r+0x92>
 8014340:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014342:	89a3      	ldrh	r3, [r4, #12]
 8014344:	0759      	lsls	r1, r3, #29
 8014346:	d505      	bpl.n	8014354 <__sflush_r+0x44>
 8014348:	6863      	ldr	r3, [r4, #4]
 801434a:	1ad2      	subs	r2, r2, r3
 801434c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801434e:	b10b      	cbz	r3, 8014354 <__sflush_r+0x44>
 8014350:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014352:	1ad2      	subs	r2, r2, r3
 8014354:	2300      	movs	r3, #0
 8014356:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014358:	6a21      	ldr	r1, [r4, #32]
 801435a:	4628      	mov	r0, r5
 801435c:	47b0      	blx	r6
 801435e:	1c43      	adds	r3, r0, #1
 8014360:	89a3      	ldrh	r3, [r4, #12]
 8014362:	d106      	bne.n	8014372 <__sflush_r+0x62>
 8014364:	6829      	ldr	r1, [r5, #0]
 8014366:	291d      	cmp	r1, #29
 8014368:	d82b      	bhi.n	80143c2 <__sflush_r+0xb2>
 801436a:	4a2a      	ldr	r2, [pc, #168]	@ (8014414 <__sflush_r+0x104>)
 801436c:	40ca      	lsrs	r2, r1
 801436e:	07d6      	lsls	r6, r2, #31
 8014370:	d527      	bpl.n	80143c2 <__sflush_r+0xb2>
 8014372:	2200      	movs	r2, #0
 8014374:	6062      	str	r2, [r4, #4]
 8014376:	04d9      	lsls	r1, r3, #19
 8014378:	6922      	ldr	r2, [r4, #16]
 801437a:	6022      	str	r2, [r4, #0]
 801437c:	d504      	bpl.n	8014388 <__sflush_r+0x78>
 801437e:	1c42      	adds	r2, r0, #1
 8014380:	d101      	bne.n	8014386 <__sflush_r+0x76>
 8014382:	682b      	ldr	r3, [r5, #0]
 8014384:	b903      	cbnz	r3, 8014388 <__sflush_r+0x78>
 8014386:	6560      	str	r0, [r4, #84]	@ 0x54
 8014388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801438a:	602f      	str	r7, [r5, #0]
 801438c:	b1b9      	cbz	r1, 80143be <__sflush_r+0xae>
 801438e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014392:	4299      	cmp	r1, r3
 8014394:	d002      	beq.n	801439c <__sflush_r+0x8c>
 8014396:	4628      	mov	r0, r5
 8014398:	f7fe fd78 	bl	8012e8c <_free_r>
 801439c:	2300      	movs	r3, #0
 801439e:	6363      	str	r3, [r4, #52]	@ 0x34
 80143a0:	e00d      	b.n	80143be <__sflush_r+0xae>
 80143a2:	2301      	movs	r3, #1
 80143a4:	4628      	mov	r0, r5
 80143a6:	47b0      	blx	r6
 80143a8:	4602      	mov	r2, r0
 80143aa:	1c50      	adds	r0, r2, #1
 80143ac:	d1c9      	bne.n	8014342 <__sflush_r+0x32>
 80143ae:	682b      	ldr	r3, [r5, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d0c6      	beq.n	8014342 <__sflush_r+0x32>
 80143b4:	2b1d      	cmp	r3, #29
 80143b6:	d001      	beq.n	80143bc <__sflush_r+0xac>
 80143b8:	2b16      	cmp	r3, #22
 80143ba:	d11e      	bne.n	80143fa <__sflush_r+0xea>
 80143bc:	602f      	str	r7, [r5, #0]
 80143be:	2000      	movs	r0, #0
 80143c0:	e022      	b.n	8014408 <__sflush_r+0xf8>
 80143c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143c6:	b21b      	sxth	r3, r3
 80143c8:	e01b      	b.n	8014402 <__sflush_r+0xf2>
 80143ca:	690f      	ldr	r7, [r1, #16]
 80143cc:	2f00      	cmp	r7, #0
 80143ce:	d0f6      	beq.n	80143be <__sflush_r+0xae>
 80143d0:	0793      	lsls	r3, r2, #30
 80143d2:	680e      	ldr	r6, [r1, #0]
 80143d4:	bf08      	it	eq
 80143d6:	694b      	ldreq	r3, [r1, #20]
 80143d8:	600f      	str	r7, [r1, #0]
 80143da:	bf18      	it	ne
 80143dc:	2300      	movne	r3, #0
 80143de:	eba6 0807 	sub.w	r8, r6, r7
 80143e2:	608b      	str	r3, [r1, #8]
 80143e4:	f1b8 0f00 	cmp.w	r8, #0
 80143e8:	dde9      	ble.n	80143be <__sflush_r+0xae>
 80143ea:	6a21      	ldr	r1, [r4, #32]
 80143ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80143ee:	4643      	mov	r3, r8
 80143f0:	463a      	mov	r2, r7
 80143f2:	4628      	mov	r0, r5
 80143f4:	47b0      	blx	r6
 80143f6:	2800      	cmp	r0, #0
 80143f8:	dc08      	bgt.n	801440c <__sflush_r+0xfc>
 80143fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014402:	81a3      	strh	r3, [r4, #12]
 8014404:	f04f 30ff 	mov.w	r0, #4294967295
 8014408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801440c:	4407      	add	r7, r0
 801440e:	eba8 0800 	sub.w	r8, r8, r0
 8014412:	e7e7      	b.n	80143e4 <__sflush_r+0xd4>
 8014414:	20400001 	.word	0x20400001

08014418 <_fflush_r>:
 8014418:	b538      	push	{r3, r4, r5, lr}
 801441a:	690b      	ldr	r3, [r1, #16]
 801441c:	4605      	mov	r5, r0
 801441e:	460c      	mov	r4, r1
 8014420:	b913      	cbnz	r3, 8014428 <_fflush_r+0x10>
 8014422:	2500      	movs	r5, #0
 8014424:	4628      	mov	r0, r5
 8014426:	bd38      	pop	{r3, r4, r5, pc}
 8014428:	b118      	cbz	r0, 8014432 <_fflush_r+0x1a>
 801442a:	6a03      	ldr	r3, [r0, #32]
 801442c:	b90b      	cbnz	r3, 8014432 <_fflush_r+0x1a>
 801442e:	f7fd fd45 	bl	8011ebc <__sinit>
 8014432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d0f3      	beq.n	8014422 <_fflush_r+0xa>
 801443a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801443c:	07d0      	lsls	r0, r2, #31
 801443e:	d404      	bmi.n	801444a <_fflush_r+0x32>
 8014440:	0599      	lsls	r1, r3, #22
 8014442:	d402      	bmi.n	801444a <_fflush_r+0x32>
 8014444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014446:	f7fd ff1a 	bl	801227e <__retarget_lock_acquire_recursive>
 801444a:	4628      	mov	r0, r5
 801444c:	4621      	mov	r1, r4
 801444e:	f7ff ff5f 	bl	8014310 <__sflush_r>
 8014452:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014454:	07da      	lsls	r2, r3, #31
 8014456:	4605      	mov	r5, r0
 8014458:	d4e4      	bmi.n	8014424 <_fflush_r+0xc>
 801445a:	89a3      	ldrh	r3, [r4, #12]
 801445c:	059b      	lsls	r3, r3, #22
 801445e:	d4e1      	bmi.n	8014424 <_fflush_r+0xc>
 8014460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014462:	f7fd ff0d 	bl	8012280 <__retarget_lock_release_recursive>
 8014466:	e7dd      	b.n	8014424 <_fflush_r+0xc>

08014468 <__swbuf_r>:
 8014468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801446a:	460e      	mov	r6, r1
 801446c:	4614      	mov	r4, r2
 801446e:	4605      	mov	r5, r0
 8014470:	b118      	cbz	r0, 801447a <__swbuf_r+0x12>
 8014472:	6a03      	ldr	r3, [r0, #32]
 8014474:	b90b      	cbnz	r3, 801447a <__swbuf_r+0x12>
 8014476:	f7fd fd21 	bl	8011ebc <__sinit>
 801447a:	69a3      	ldr	r3, [r4, #24]
 801447c:	60a3      	str	r3, [r4, #8]
 801447e:	89a3      	ldrh	r3, [r4, #12]
 8014480:	071a      	lsls	r2, r3, #28
 8014482:	d501      	bpl.n	8014488 <__swbuf_r+0x20>
 8014484:	6923      	ldr	r3, [r4, #16]
 8014486:	b943      	cbnz	r3, 801449a <__swbuf_r+0x32>
 8014488:	4621      	mov	r1, r4
 801448a:	4628      	mov	r0, r5
 801448c:	f000 f82a 	bl	80144e4 <__swsetup_r>
 8014490:	b118      	cbz	r0, 801449a <__swbuf_r+0x32>
 8014492:	f04f 37ff 	mov.w	r7, #4294967295
 8014496:	4638      	mov	r0, r7
 8014498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801449a:	6823      	ldr	r3, [r4, #0]
 801449c:	6922      	ldr	r2, [r4, #16]
 801449e:	1a98      	subs	r0, r3, r2
 80144a0:	6963      	ldr	r3, [r4, #20]
 80144a2:	b2f6      	uxtb	r6, r6
 80144a4:	4283      	cmp	r3, r0
 80144a6:	4637      	mov	r7, r6
 80144a8:	dc05      	bgt.n	80144b6 <__swbuf_r+0x4e>
 80144aa:	4621      	mov	r1, r4
 80144ac:	4628      	mov	r0, r5
 80144ae:	f7ff ffb3 	bl	8014418 <_fflush_r>
 80144b2:	2800      	cmp	r0, #0
 80144b4:	d1ed      	bne.n	8014492 <__swbuf_r+0x2a>
 80144b6:	68a3      	ldr	r3, [r4, #8]
 80144b8:	3b01      	subs	r3, #1
 80144ba:	60a3      	str	r3, [r4, #8]
 80144bc:	6823      	ldr	r3, [r4, #0]
 80144be:	1c5a      	adds	r2, r3, #1
 80144c0:	6022      	str	r2, [r4, #0]
 80144c2:	701e      	strb	r6, [r3, #0]
 80144c4:	6962      	ldr	r2, [r4, #20]
 80144c6:	1c43      	adds	r3, r0, #1
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d004      	beq.n	80144d6 <__swbuf_r+0x6e>
 80144cc:	89a3      	ldrh	r3, [r4, #12]
 80144ce:	07db      	lsls	r3, r3, #31
 80144d0:	d5e1      	bpl.n	8014496 <__swbuf_r+0x2e>
 80144d2:	2e0a      	cmp	r6, #10
 80144d4:	d1df      	bne.n	8014496 <__swbuf_r+0x2e>
 80144d6:	4621      	mov	r1, r4
 80144d8:	4628      	mov	r0, r5
 80144da:	f7ff ff9d 	bl	8014418 <_fflush_r>
 80144de:	2800      	cmp	r0, #0
 80144e0:	d0d9      	beq.n	8014496 <__swbuf_r+0x2e>
 80144e2:	e7d6      	b.n	8014492 <__swbuf_r+0x2a>

080144e4 <__swsetup_r>:
 80144e4:	b538      	push	{r3, r4, r5, lr}
 80144e6:	4b29      	ldr	r3, [pc, #164]	@ (801458c <__swsetup_r+0xa8>)
 80144e8:	4605      	mov	r5, r0
 80144ea:	6818      	ldr	r0, [r3, #0]
 80144ec:	460c      	mov	r4, r1
 80144ee:	b118      	cbz	r0, 80144f8 <__swsetup_r+0x14>
 80144f0:	6a03      	ldr	r3, [r0, #32]
 80144f2:	b90b      	cbnz	r3, 80144f8 <__swsetup_r+0x14>
 80144f4:	f7fd fce2 	bl	8011ebc <__sinit>
 80144f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144fc:	0719      	lsls	r1, r3, #28
 80144fe:	d422      	bmi.n	8014546 <__swsetup_r+0x62>
 8014500:	06da      	lsls	r2, r3, #27
 8014502:	d407      	bmi.n	8014514 <__swsetup_r+0x30>
 8014504:	2209      	movs	r2, #9
 8014506:	602a      	str	r2, [r5, #0]
 8014508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801450c:	81a3      	strh	r3, [r4, #12]
 801450e:	f04f 30ff 	mov.w	r0, #4294967295
 8014512:	e033      	b.n	801457c <__swsetup_r+0x98>
 8014514:	0758      	lsls	r0, r3, #29
 8014516:	d512      	bpl.n	801453e <__swsetup_r+0x5a>
 8014518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801451a:	b141      	cbz	r1, 801452e <__swsetup_r+0x4a>
 801451c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014520:	4299      	cmp	r1, r3
 8014522:	d002      	beq.n	801452a <__swsetup_r+0x46>
 8014524:	4628      	mov	r0, r5
 8014526:	f7fe fcb1 	bl	8012e8c <_free_r>
 801452a:	2300      	movs	r3, #0
 801452c:	6363      	str	r3, [r4, #52]	@ 0x34
 801452e:	89a3      	ldrh	r3, [r4, #12]
 8014530:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014534:	81a3      	strh	r3, [r4, #12]
 8014536:	2300      	movs	r3, #0
 8014538:	6063      	str	r3, [r4, #4]
 801453a:	6923      	ldr	r3, [r4, #16]
 801453c:	6023      	str	r3, [r4, #0]
 801453e:	89a3      	ldrh	r3, [r4, #12]
 8014540:	f043 0308 	orr.w	r3, r3, #8
 8014544:	81a3      	strh	r3, [r4, #12]
 8014546:	6923      	ldr	r3, [r4, #16]
 8014548:	b94b      	cbnz	r3, 801455e <__swsetup_r+0x7a>
 801454a:	89a3      	ldrh	r3, [r4, #12]
 801454c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014554:	d003      	beq.n	801455e <__swsetup_r+0x7a>
 8014556:	4621      	mov	r1, r4
 8014558:	4628      	mov	r0, r5
 801455a:	f000 f893 	bl	8014684 <__smakebuf_r>
 801455e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014562:	f013 0201 	ands.w	r2, r3, #1
 8014566:	d00a      	beq.n	801457e <__swsetup_r+0x9a>
 8014568:	2200      	movs	r2, #0
 801456a:	60a2      	str	r2, [r4, #8]
 801456c:	6962      	ldr	r2, [r4, #20]
 801456e:	4252      	negs	r2, r2
 8014570:	61a2      	str	r2, [r4, #24]
 8014572:	6922      	ldr	r2, [r4, #16]
 8014574:	b942      	cbnz	r2, 8014588 <__swsetup_r+0xa4>
 8014576:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801457a:	d1c5      	bne.n	8014508 <__swsetup_r+0x24>
 801457c:	bd38      	pop	{r3, r4, r5, pc}
 801457e:	0799      	lsls	r1, r3, #30
 8014580:	bf58      	it	pl
 8014582:	6962      	ldrpl	r2, [r4, #20]
 8014584:	60a2      	str	r2, [r4, #8]
 8014586:	e7f4      	b.n	8014572 <__swsetup_r+0x8e>
 8014588:	2000      	movs	r0, #0
 801458a:	e7f7      	b.n	801457c <__swsetup_r+0x98>
 801458c:	240001f8 	.word	0x240001f8

08014590 <_sbrk_r>:
 8014590:	b538      	push	{r3, r4, r5, lr}
 8014592:	4d06      	ldr	r5, [pc, #24]	@ (80145ac <_sbrk_r+0x1c>)
 8014594:	2300      	movs	r3, #0
 8014596:	4604      	mov	r4, r0
 8014598:	4608      	mov	r0, r1
 801459a:	602b      	str	r3, [r5, #0]
 801459c:	f7f0 feae 	bl	80052fc <_sbrk>
 80145a0:	1c43      	adds	r3, r0, #1
 80145a2:	d102      	bne.n	80145aa <_sbrk_r+0x1a>
 80145a4:	682b      	ldr	r3, [r5, #0]
 80145a6:	b103      	cbz	r3, 80145aa <_sbrk_r+0x1a>
 80145a8:	6023      	str	r3, [r4, #0]
 80145aa:	bd38      	pop	{r3, r4, r5, pc}
 80145ac:	24006208 	.word	0x24006208

080145b0 <__assert_func>:
 80145b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80145b2:	4614      	mov	r4, r2
 80145b4:	461a      	mov	r2, r3
 80145b6:	4b09      	ldr	r3, [pc, #36]	@ (80145dc <__assert_func+0x2c>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4605      	mov	r5, r0
 80145bc:	68d8      	ldr	r0, [r3, #12]
 80145be:	b14c      	cbz	r4, 80145d4 <__assert_func+0x24>
 80145c0:	4b07      	ldr	r3, [pc, #28]	@ (80145e0 <__assert_func+0x30>)
 80145c2:	9100      	str	r1, [sp, #0]
 80145c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80145c8:	4906      	ldr	r1, [pc, #24]	@ (80145e4 <__assert_func+0x34>)
 80145ca:	462b      	mov	r3, r5
 80145cc:	f000 f822 	bl	8014614 <fiprintf>
 80145d0:	f000 f8b6 	bl	8014740 <abort>
 80145d4:	4b04      	ldr	r3, [pc, #16]	@ (80145e8 <__assert_func+0x38>)
 80145d6:	461c      	mov	r4, r3
 80145d8:	e7f3      	b.n	80145c2 <__assert_func+0x12>
 80145da:	bf00      	nop
 80145dc:	240001f8 	.word	0x240001f8
 80145e0:	080150a1 	.word	0x080150a1
 80145e4:	080150ae 	.word	0x080150ae
 80145e8:	080150dc 	.word	0x080150dc

080145ec <_calloc_r>:
 80145ec:	b570      	push	{r4, r5, r6, lr}
 80145ee:	fba1 5402 	umull	r5, r4, r1, r2
 80145f2:	b934      	cbnz	r4, 8014602 <_calloc_r+0x16>
 80145f4:	4629      	mov	r1, r5
 80145f6:	f7fe fff7 	bl	80135e8 <_malloc_r>
 80145fa:	4606      	mov	r6, r0
 80145fc:	b928      	cbnz	r0, 801460a <_calloc_r+0x1e>
 80145fe:	4630      	mov	r0, r6
 8014600:	bd70      	pop	{r4, r5, r6, pc}
 8014602:	220c      	movs	r2, #12
 8014604:	6002      	str	r2, [r0, #0]
 8014606:	2600      	movs	r6, #0
 8014608:	e7f9      	b.n	80145fe <_calloc_r+0x12>
 801460a:	462a      	mov	r2, r5
 801460c:	4621      	mov	r1, r4
 801460e:	f7fd fcfa 	bl	8012006 <memset>
 8014612:	e7f4      	b.n	80145fe <_calloc_r+0x12>

08014614 <fiprintf>:
 8014614:	b40e      	push	{r1, r2, r3}
 8014616:	b503      	push	{r0, r1, lr}
 8014618:	4601      	mov	r1, r0
 801461a:	ab03      	add	r3, sp, #12
 801461c:	4805      	ldr	r0, [pc, #20]	@ (8014634 <fiprintf+0x20>)
 801461e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014622:	6800      	ldr	r0, [r0, #0]
 8014624:	9301      	str	r3, [sp, #4]
 8014626:	f7ff fd5b 	bl	80140e0 <_vfiprintf_r>
 801462a:	b002      	add	sp, #8
 801462c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014630:	b003      	add	sp, #12
 8014632:	4770      	bx	lr
 8014634:	240001f8 	.word	0x240001f8

08014638 <__swhatbuf_r>:
 8014638:	b570      	push	{r4, r5, r6, lr}
 801463a:	460c      	mov	r4, r1
 801463c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014640:	2900      	cmp	r1, #0
 8014642:	b096      	sub	sp, #88	@ 0x58
 8014644:	4615      	mov	r5, r2
 8014646:	461e      	mov	r6, r3
 8014648:	da0d      	bge.n	8014666 <__swhatbuf_r+0x2e>
 801464a:	89a3      	ldrh	r3, [r4, #12]
 801464c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014650:	f04f 0100 	mov.w	r1, #0
 8014654:	bf14      	ite	ne
 8014656:	2340      	movne	r3, #64	@ 0x40
 8014658:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801465c:	2000      	movs	r0, #0
 801465e:	6031      	str	r1, [r6, #0]
 8014660:	602b      	str	r3, [r5, #0]
 8014662:	b016      	add	sp, #88	@ 0x58
 8014664:	bd70      	pop	{r4, r5, r6, pc}
 8014666:	466a      	mov	r2, sp
 8014668:	f000 f848 	bl	80146fc <_fstat_r>
 801466c:	2800      	cmp	r0, #0
 801466e:	dbec      	blt.n	801464a <__swhatbuf_r+0x12>
 8014670:	9901      	ldr	r1, [sp, #4]
 8014672:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014676:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801467a:	4259      	negs	r1, r3
 801467c:	4159      	adcs	r1, r3
 801467e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014682:	e7eb      	b.n	801465c <__swhatbuf_r+0x24>

08014684 <__smakebuf_r>:
 8014684:	898b      	ldrh	r3, [r1, #12]
 8014686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014688:	079d      	lsls	r5, r3, #30
 801468a:	4606      	mov	r6, r0
 801468c:	460c      	mov	r4, r1
 801468e:	d507      	bpl.n	80146a0 <__smakebuf_r+0x1c>
 8014690:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014694:	6023      	str	r3, [r4, #0]
 8014696:	6123      	str	r3, [r4, #16]
 8014698:	2301      	movs	r3, #1
 801469a:	6163      	str	r3, [r4, #20]
 801469c:	b003      	add	sp, #12
 801469e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146a0:	ab01      	add	r3, sp, #4
 80146a2:	466a      	mov	r2, sp
 80146a4:	f7ff ffc8 	bl	8014638 <__swhatbuf_r>
 80146a8:	9f00      	ldr	r7, [sp, #0]
 80146aa:	4605      	mov	r5, r0
 80146ac:	4639      	mov	r1, r7
 80146ae:	4630      	mov	r0, r6
 80146b0:	f7fe ff9a 	bl	80135e8 <_malloc_r>
 80146b4:	b948      	cbnz	r0, 80146ca <__smakebuf_r+0x46>
 80146b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146ba:	059a      	lsls	r2, r3, #22
 80146bc:	d4ee      	bmi.n	801469c <__smakebuf_r+0x18>
 80146be:	f023 0303 	bic.w	r3, r3, #3
 80146c2:	f043 0302 	orr.w	r3, r3, #2
 80146c6:	81a3      	strh	r3, [r4, #12]
 80146c8:	e7e2      	b.n	8014690 <__smakebuf_r+0xc>
 80146ca:	89a3      	ldrh	r3, [r4, #12]
 80146cc:	6020      	str	r0, [r4, #0]
 80146ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80146d2:	81a3      	strh	r3, [r4, #12]
 80146d4:	9b01      	ldr	r3, [sp, #4]
 80146d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80146da:	b15b      	cbz	r3, 80146f4 <__smakebuf_r+0x70>
 80146dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146e0:	4630      	mov	r0, r6
 80146e2:	f000 f81d 	bl	8014720 <_isatty_r>
 80146e6:	b128      	cbz	r0, 80146f4 <__smakebuf_r+0x70>
 80146e8:	89a3      	ldrh	r3, [r4, #12]
 80146ea:	f023 0303 	bic.w	r3, r3, #3
 80146ee:	f043 0301 	orr.w	r3, r3, #1
 80146f2:	81a3      	strh	r3, [r4, #12]
 80146f4:	89a3      	ldrh	r3, [r4, #12]
 80146f6:	431d      	orrs	r5, r3
 80146f8:	81a5      	strh	r5, [r4, #12]
 80146fa:	e7cf      	b.n	801469c <__smakebuf_r+0x18>

080146fc <_fstat_r>:
 80146fc:	b538      	push	{r3, r4, r5, lr}
 80146fe:	4d07      	ldr	r5, [pc, #28]	@ (801471c <_fstat_r+0x20>)
 8014700:	2300      	movs	r3, #0
 8014702:	4604      	mov	r4, r0
 8014704:	4608      	mov	r0, r1
 8014706:	4611      	mov	r1, r2
 8014708:	602b      	str	r3, [r5, #0]
 801470a:	f7f0 fdcf 	bl	80052ac <_fstat>
 801470e:	1c43      	adds	r3, r0, #1
 8014710:	d102      	bne.n	8014718 <_fstat_r+0x1c>
 8014712:	682b      	ldr	r3, [r5, #0]
 8014714:	b103      	cbz	r3, 8014718 <_fstat_r+0x1c>
 8014716:	6023      	str	r3, [r4, #0]
 8014718:	bd38      	pop	{r3, r4, r5, pc}
 801471a:	bf00      	nop
 801471c:	24006208 	.word	0x24006208

08014720 <_isatty_r>:
 8014720:	b538      	push	{r3, r4, r5, lr}
 8014722:	4d06      	ldr	r5, [pc, #24]	@ (801473c <_isatty_r+0x1c>)
 8014724:	2300      	movs	r3, #0
 8014726:	4604      	mov	r4, r0
 8014728:	4608      	mov	r0, r1
 801472a:	602b      	str	r3, [r5, #0]
 801472c:	f7f0 fdce 	bl	80052cc <_isatty>
 8014730:	1c43      	adds	r3, r0, #1
 8014732:	d102      	bne.n	801473a <_isatty_r+0x1a>
 8014734:	682b      	ldr	r3, [r5, #0]
 8014736:	b103      	cbz	r3, 801473a <_isatty_r+0x1a>
 8014738:	6023      	str	r3, [r4, #0]
 801473a:	bd38      	pop	{r3, r4, r5, pc}
 801473c:	24006208 	.word	0x24006208

08014740 <abort>:
 8014740:	b508      	push	{r3, lr}
 8014742:	2006      	movs	r0, #6
 8014744:	f000 f82c 	bl	80147a0 <raise>
 8014748:	2001      	movs	r0, #1
 801474a:	f7f0 fd7b 	bl	8005244 <_exit>

0801474e <_raise_r>:
 801474e:	291f      	cmp	r1, #31
 8014750:	b538      	push	{r3, r4, r5, lr}
 8014752:	4605      	mov	r5, r0
 8014754:	460c      	mov	r4, r1
 8014756:	d904      	bls.n	8014762 <_raise_r+0x14>
 8014758:	2316      	movs	r3, #22
 801475a:	6003      	str	r3, [r0, #0]
 801475c:	f04f 30ff 	mov.w	r0, #4294967295
 8014760:	bd38      	pop	{r3, r4, r5, pc}
 8014762:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014764:	b112      	cbz	r2, 801476c <_raise_r+0x1e>
 8014766:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801476a:	b94b      	cbnz	r3, 8014780 <_raise_r+0x32>
 801476c:	4628      	mov	r0, r5
 801476e:	f000 f831 	bl	80147d4 <_getpid_r>
 8014772:	4622      	mov	r2, r4
 8014774:	4601      	mov	r1, r0
 8014776:	4628      	mov	r0, r5
 8014778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801477c:	f000 b818 	b.w	80147b0 <_kill_r>
 8014780:	2b01      	cmp	r3, #1
 8014782:	d00a      	beq.n	801479a <_raise_r+0x4c>
 8014784:	1c59      	adds	r1, r3, #1
 8014786:	d103      	bne.n	8014790 <_raise_r+0x42>
 8014788:	2316      	movs	r3, #22
 801478a:	6003      	str	r3, [r0, #0]
 801478c:	2001      	movs	r0, #1
 801478e:	e7e7      	b.n	8014760 <_raise_r+0x12>
 8014790:	2100      	movs	r1, #0
 8014792:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014796:	4620      	mov	r0, r4
 8014798:	4798      	blx	r3
 801479a:	2000      	movs	r0, #0
 801479c:	e7e0      	b.n	8014760 <_raise_r+0x12>
	...

080147a0 <raise>:
 80147a0:	4b02      	ldr	r3, [pc, #8]	@ (80147ac <raise+0xc>)
 80147a2:	4601      	mov	r1, r0
 80147a4:	6818      	ldr	r0, [r3, #0]
 80147a6:	f7ff bfd2 	b.w	801474e <_raise_r>
 80147aa:	bf00      	nop
 80147ac:	240001f8 	.word	0x240001f8

080147b0 <_kill_r>:
 80147b0:	b538      	push	{r3, r4, r5, lr}
 80147b2:	4d07      	ldr	r5, [pc, #28]	@ (80147d0 <_kill_r+0x20>)
 80147b4:	2300      	movs	r3, #0
 80147b6:	4604      	mov	r4, r0
 80147b8:	4608      	mov	r0, r1
 80147ba:	4611      	mov	r1, r2
 80147bc:	602b      	str	r3, [r5, #0]
 80147be:	f7f0 fd31 	bl	8005224 <_kill>
 80147c2:	1c43      	adds	r3, r0, #1
 80147c4:	d102      	bne.n	80147cc <_kill_r+0x1c>
 80147c6:	682b      	ldr	r3, [r5, #0]
 80147c8:	b103      	cbz	r3, 80147cc <_kill_r+0x1c>
 80147ca:	6023      	str	r3, [r4, #0]
 80147cc:	bd38      	pop	{r3, r4, r5, pc}
 80147ce:	bf00      	nop
 80147d0:	24006208 	.word	0x24006208

080147d4 <_getpid_r>:
 80147d4:	f7f0 bd1e 	b.w	8005214 <_getpid>

080147d8 <fmax>:
 80147d8:	b508      	push	{r3, lr}
 80147da:	ed2d 8b04 	vpush	{d8-d9}
 80147de:	eeb0 8b40 	vmov.f64	d8, d0
 80147e2:	eeb0 9b41 	vmov.f64	d9, d1
 80147e6:	f000 f831 	bl	801484c <__fpclassifyd>
 80147ea:	b930      	cbnz	r0, 80147fa <fmax+0x22>
 80147ec:	eeb0 8b49 	vmov.f64	d8, d9
 80147f0:	eeb0 0b48 	vmov.f64	d0, d8
 80147f4:	ecbd 8b04 	vpop	{d8-d9}
 80147f8:	bd08      	pop	{r3, pc}
 80147fa:	eeb0 0b49 	vmov.f64	d0, d9
 80147fe:	f000 f825 	bl	801484c <__fpclassifyd>
 8014802:	2800      	cmp	r0, #0
 8014804:	d0f4      	beq.n	80147f0 <fmax+0x18>
 8014806:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801480e:	dded      	ble.n	80147ec <fmax+0x14>
 8014810:	e7ee      	b.n	80147f0 <fmax+0x18>

08014812 <fmin>:
 8014812:	b508      	push	{r3, lr}
 8014814:	ed2d 8b04 	vpush	{d8-d9}
 8014818:	eeb0 8b40 	vmov.f64	d8, d0
 801481c:	eeb0 9b41 	vmov.f64	d9, d1
 8014820:	f000 f814 	bl	801484c <__fpclassifyd>
 8014824:	b930      	cbnz	r0, 8014834 <fmin+0x22>
 8014826:	eeb0 8b49 	vmov.f64	d8, d9
 801482a:	eeb0 0b48 	vmov.f64	d0, d8
 801482e:	ecbd 8b04 	vpop	{d8-d9}
 8014832:	bd08      	pop	{r3, pc}
 8014834:	eeb0 0b49 	vmov.f64	d0, d9
 8014838:	f000 f808 	bl	801484c <__fpclassifyd>
 801483c:	2800      	cmp	r0, #0
 801483e:	d0f4      	beq.n	801482a <fmin+0x18>
 8014840:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8014844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014848:	d5ed      	bpl.n	8014826 <fmin+0x14>
 801484a:	e7ee      	b.n	801482a <fmin+0x18>

0801484c <__fpclassifyd>:
 801484c:	ec51 0b10 	vmov	r0, r1, d0
 8014850:	460b      	mov	r3, r1
 8014852:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8014856:	b510      	push	{r4, lr}
 8014858:	d104      	bne.n	8014864 <__fpclassifyd+0x18>
 801485a:	2800      	cmp	r0, #0
 801485c:	bf0c      	ite	eq
 801485e:	2002      	moveq	r0, #2
 8014860:	2003      	movne	r0, #3
 8014862:	bd10      	pop	{r4, pc}
 8014864:	4a09      	ldr	r2, [pc, #36]	@ (801488c <__fpclassifyd+0x40>)
 8014866:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 801486a:	4294      	cmp	r4, r2
 801486c:	d908      	bls.n	8014880 <__fpclassifyd+0x34>
 801486e:	4a08      	ldr	r2, [pc, #32]	@ (8014890 <__fpclassifyd+0x44>)
 8014870:	4213      	tst	r3, r2
 8014872:	d007      	beq.n	8014884 <__fpclassifyd+0x38>
 8014874:	4291      	cmp	r1, r2
 8014876:	d107      	bne.n	8014888 <__fpclassifyd+0x3c>
 8014878:	fab0 f080 	clz	r0, r0
 801487c:	0940      	lsrs	r0, r0, #5
 801487e:	e7f0      	b.n	8014862 <__fpclassifyd+0x16>
 8014880:	2004      	movs	r0, #4
 8014882:	e7ee      	b.n	8014862 <__fpclassifyd+0x16>
 8014884:	2003      	movs	r0, #3
 8014886:	e7ec      	b.n	8014862 <__fpclassifyd+0x16>
 8014888:	2000      	movs	r0, #0
 801488a:	e7ea      	b.n	8014862 <__fpclassifyd+0x16>
 801488c:	7fdfffff 	.word	0x7fdfffff
 8014890:	7ff00000 	.word	0x7ff00000

08014894 <fmaxf>:
 8014894:	b508      	push	{r3, lr}
 8014896:	ed2d 8b02 	vpush	{d8}
 801489a:	eeb0 8a40 	vmov.f32	s16, s0
 801489e:	eef0 8a60 	vmov.f32	s17, s1
 80148a2:	f000 f815 	bl	80148d0 <__fpclassifyf>
 80148a6:	b930      	cbnz	r0, 80148b6 <fmaxf+0x22>
 80148a8:	eeb0 8a68 	vmov.f32	s16, s17
 80148ac:	eeb0 0a48 	vmov.f32	s0, s16
 80148b0:	ecbd 8b02 	vpop	{d8}
 80148b4:	bd08      	pop	{r3, pc}
 80148b6:	eeb0 0a68 	vmov.f32	s0, s17
 80148ba:	f000 f809 	bl	80148d0 <__fpclassifyf>
 80148be:	2800      	cmp	r0, #0
 80148c0:	d0f4      	beq.n	80148ac <fmaxf+0x18>
 80148c2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80148c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ca:	dded      	ble.n	80148a8 <fmaxf+0x14>
 80148cc:	e7ee      	b.n	80148ac <fmaxf+0x18>
	...

080148d0 <__fpclassifyf>:
 80148d0:	ee10 3a10 	vmov	r3, s0
 80148d4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80148d8:	d00d      	beq.n	80148f6 <__fpclassifyf+0x26>
 80148da:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80148de:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80148e2:	d30a      	bcc.n	80148fa <__fpclassifyf+0x2a>
 80148e4:	4b07      	ldr	r3, [pc, #28]	@ (8014904 <__fpclassifyf+0x34>)
 80148e6:	1e42      	subs	r2, r0, #1
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d908      	bls.n	80148fe <__fpclassifyf+0x2e>
 80148ec:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80148f0:	4258      	negs	r0, r3
 80148f2:	4158      	adcs	r0, r3
 80148f4:	4770      	bx	lr
 80148f6:	2002      	movs	r0, #2
 80148f8:	4770      	bx	lr
 80148fa:	2004      	movs	r0, #4
 80148fc:	4770      	bx	lr
 80148fe:	2003      	movs	r0, #3
 8014900:	4770      	bx	lr
 8014902:	bf00      	nop
 8014904:	007ffffe 	.word	0x007ffffe

08014908 <sinf_poly>:
 8014908:	07cb      	lsls	r3, r1, #31
 801490a:	d412      	bmi.n	8014932 <sinf_poly+0x2a>
 801490c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8014910:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8014914:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8014918:	eea6 7b01 	vfma.f64	d7, d6, d1
 801491c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8014920:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014924:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014928:	eea7 0b01 	vfma.f64	d0, d7, d1
 801492c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014930:	4770      	bx	lr
 8014932:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8014936:	ee21 5b01 	vmul.f64	d5, d1, d1
 801493a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801493e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8014942:	eea1 7b06 	vfma.f64	d7, d1, d6
 8014946:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801494a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801494e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8014952:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014956:	eea5 0b06 	vfma.f64	d0, d5, d6
 801495a:	e7e5      	b.n	8014928 <sinf_poly+0x20>
 801495c:	0000      	movs	r0, r0
	...

08014960 <sinf>:
 8014960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014962:	ee10 4a10 	vmov	r4, s0
 8014966:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801496a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801496e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8014972:	eef0 7a40 	vmov.f32	s15, s0
 8014976:	d218      	bcs.n	80149aa <sinf+0x4a>
 8014978:	ee26 1b06 	vmul.f64	d1, d6, d6
 801497c:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8014980:	d20a      	bcs.n	8014998 <sinf+0x38>
 8014982:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8014986:	d103      	bne.n	8014990 <sinf+0x30>
 8014988:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801498c:	ed8d 1a01 	vstr	s2, [sp, #4]
 8014990:	eeb0 0a67 	vmov.f32	s0, s15
 8014994:	b003      	add	sp, #12
 8014996:	bd30      	pop	{r4, r5, pc}
 8014998:	483b      	ldr	r0, [pc, #236]	@ (8014a88 <sinf+0x128>)
 801499a:	eeb0 0b46 	vmov.f64	d0, d6
 801499e:	2100      	movs	r1, #0
 80149a0:	b003      	add	sp, #12
 80149a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149a6:	f7ff bfaf 	b.w	8014908 <sinf_poly>
 80149aa:	f240 422e 	movw	r2, #1070	@ 0x42e
 80149ae:	4293      	cmp	r3, r2
 80149b0:	d824      	bhi.n	80149fc <sinf+0x9c>
 80149b2:	4b35      	ldr	r3, [pc, #212]	@ (8014a88 <sinf+0x128>)
 80149b4:	ed93 7b08 	vldr	d7, [r3, #32]
 80149b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80149bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80149c0:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80149c4:	ee17 1a90 	vmov	r1, s15
 80149c8:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80149cc:	1609      	asrs	r1, r1, #24
 80149ce:	ee07 1a90 	vmov	s15, r1
 80149d2:	f001 0203 	and.w	r2, r1, #3
 80149d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80149da:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80149de:	ed92 0b00 	vldr	d0, [r2]
 80149e2:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80149e6:	f011 0f02 	tst.w	r1, #2
 80149ea:	eea5 6b47 	vfms.f64	d6, d5, d7
 80149ee:	bf08      	it	eq
 80149f0:	4618      	moveq	r0, r3
 80149f2:	ee26 1b06 	vmul.f64	d1, d6, d6
 80149f6:	ee20 0b06 	vmul.f64	d0, d0, d6
 80149fa:	e7d1      	b.n	80149a0 <sinf+0x40>
 80149fc:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8014a00:	d237      	bcs.n	8014a72 <sinf+0x112>
 8014a02:	4922      	ldr	r1, [pc, #136]	@ (8014a8c <sinf+0x12c>)
 8014a04:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8014a08:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8014a0c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8014a10:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014a14:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014a18:	6a10      	ldr	r0, [r2, #32]
 8014a1a:	6912      	ldr	r2, [r2, #16]
 8014a1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014a20:	40ab      	lsls	r3, r5
 8014a22:	fba0 5003 	umull	r5, r0, r0, r3
 8014a26:	4359      	muls	r1, r3
 8014a28:	fbe3 0102 	umlal	r0, r1, r3, r2
 8014a2c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8014a30:	0f9d      	lsrs	r5, r3, #30
 8014a32:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8014a36:	1ac9      	subs	r1, r1, r3
 8014a38:	f7eb fe38 	bl	80006ac <__aeabi_l2d>
 8014a3c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014a40:	4b11      	ldr	r3, [pc, #68]	@ (8014a88 <sinf+0x128>)
 8014a42:	f004 0203 	and.w	r2, r4, #3
 8014a46:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014a4a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8014a80 <sinf+0x120>
 8014a4e:	ed92 0b00 	vldr	d0, [r2]
 8014a52:	ec41 0b17 	vmov	d7, r0, r1
 8014a56:	f014 0f02 	tst.w	r4, #2
 8014a5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014a5e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014a62:	4629      	mov	r1, r5
 8014a64:	bf08      	it	eq
 8014a66:	4618      	moveq	r0, r3
 8014a68:	ee27 1b07 	vmul.f64	d1, d7, d7
 8014a6c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014a70:	e796      	b.n	80149a0 <sinf+0x40>
 8014a72:	b003      	add	sp, #12
 8014a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a78:	f000 b8e4 	b.w	8014c44 <__math_invalidf>
 8014a7c:	f3af 8000 	nop.w
 8014a80:	54442d18 	.word	0x54442d18
 8014a84:	3c1921fb 	.word	0x3c1921fb
 8014a88:	08015398 	.word	0x08015398
 8014a8c:	08015334 	.word	0x08015334

08014a90 <sinf_poly>:
 8014a90:	07cb      	lsls	r3, r1, #31
 8014a92:	d412      	bmi.n	8014aba <sinf_poly+0x2a>
 8014a94:	ee21 5b00 	vmul.f64	d5, d1, d0
 8014a98:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8014a9c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8014aa0:	eea6 7b01 	vfma.f64	d7, d6, d1
 8014aa4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8014aa8:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014aac:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014ab0:	eea7 0b01 	vfma.f64	d0, d7, d1
 8014ab4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014ab8:	4770      	bx	lr
 8014aba:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8014abe:	ee21 5b01 	vmul.f64	d5, d1, d1
 8014ac2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8014ac6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8014aca:	eea1 7b06 	vfma.f64	d7, d1, d6
 8014ace:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8014ad2:	eea1 0b06 	vfma.f64	d0, d1, d6
 8014ad6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8014ada:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014ade:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014ae2:	e7e5      	b.n	8014ab0 <sinf_poly+0x20>
 8014ae4:	0000      	movs	r0, r0
	...

08014ae8 <cosf>:
 8014ae8:	b538      	push	{r3, r4, r5, lr}
 8014aea:	ee10 4a10 	vmov	r4, s0
 8014aee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014af2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8014af6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8014afa:	d21f      	bcs.n	8014b3c <cosf+0x54>
 8014afc:	ee27 7b07 	vmul.f64	d7, d7, d7
 8014b00:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8014b04:	f0c0 8082 	bcc.w	8014c0c <cosf+0x124>
 8014b08:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014b0c:	4b44      	ldr	r3, [pc, #272]	@ (8014c20 <cosf+0x138>)
 8014b0e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8014b12:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8014b16:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8014b1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014b1e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014b22:	eea7 0b05 	vfma.f64	d0, d7, d5
 8014b26:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8014b2a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014b2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8014b32:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014b36:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014b3a:	bd38      	pop	{r3, r4, r5, pc}
 8014b3c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8014b40:	4293      	cmp	r3, r2
 8014b42:	d829      	bhi.n	8014b98 <cosf+0xb0>
 8014b44:	4b36      	ldr	r3, [pc, #216]	@ (8014c20 <cosf+0x138>)
 8014b46:	ed93 6b08 	vldr	d6, [r3, #32]
 8014b4a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014b4e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8014b52:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014b56:	ee16 1a90 	vmov	r1, s13
 8014b5a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8014b5e:	1609      	asrs	r1, r1, #24
 8014b60:	ee06 1a90 	vmov	s13, r1
 8014b64:	f001 0203 	and.w	r2, r1, #3
 8014b68:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014b6c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8014b70:	ed92 0b00 	vldr	d0, [r2]
 8014b74:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8014b78:	f011 0f02 	tst.w	r1, #2
 8014b7c:	f081 0101 	eor.w	r1, r1, #1
 8014b80:	eea5 7b46 	vfms.f64	d7, d5, d6
 8014b84:	bf08      	it	eq
 8014b86:	4618      	moveq	r0, r3
 8014b88:	ee27 1b07 	vmul.f64	d1, d7, d7
 8014b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b90:	ee20 0b07 	vmul.f64	d0, d0, d7
 8014b94:	f7ff bf7c 	b.w	8014a90 <sinf_poly>
 8014b98:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8014b9c:	d232      	bcs.n	8014c04 <cosf+0x11c>
 8014b9e:	4921      	ldr	r1, [pc, #132]	@ (8014c24 <cosf+0x13c>)
 8014ba0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8014ba4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8014ba8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8014bac:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014bb0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014bb4:	6a10      	ldr	r0, [r2, #32]
 8014bb6:	6912      	ldr	r2, [r2, #16]
 8014bb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014bbc:	40ab      	lsls	r3, r5
 8014bbe:	fba0 5003 	umull	r5, r0, r0, r3
 8014bc2:	4359      	muls	r1, r3
 8014bc4:	fbe3 0102 	umlal	r0, r1, r3, r2
 8014bc8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8014bcc:	0f9d      	lsrs	r5, r3, #30
 8014bce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8014bd2:	1ac9      	subs	r1, r1, r3
 8014bd4:	f7eb fd6a 	bl	80006ac <__aeabi_l2d>
 8014bd8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014bdc:	4b10      	ldr	r3, [pc, #64]	@ (8014c20 <cosf+0x138>)
 8014bde:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8014c18 <cosf+0x130>
 8014be2:	ec41 0b17 	vmov	d7, r0, r1
 8014be6:	f004 0203 	and.w	r2, r4, #3
 8014bea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8014bee:	ed92 0b00 	vldr	d0, [r2]
 8014bf2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014bf6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014bfa:	f014 0f02 	tst.w	r4, #2
 8014bfe:	f085 0101 	eor.w	r1, r5, #1
 8014c02:	e7bf      	b.n	8014b84 <cosf+0x9c>
 8014c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c08:	f000 b81c 	b.w	8014c44 <__math_invalidf>
 8014c0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014c10:	e793      	b.n	8014b3a <cosf+0x52>
 8014c12:	bf00      	nop
 8014c14:	f3af 8000 	nop.w
 8014c18:	54442d18 	.word	0x54442d18
 8014c1c:	3c1921fb 	.word	0x3c1921fb
 8014c20:	08015398 	.word	0x08015398
 8014c24:	08015334 	.word	0x08015334

08014c28 <with_errnof>:
 8014c28:	b510      	push	{r4, lr}
 8014c2a:	ed2d 8b02 	vpush	{d8}
 8014c2e:	eeb0 8a40 	vmov.f32	s16, s0
 8014c32:	4604      	mov	r4, r0
 8014c34:	f7fd faf8 	bl	8012228 <__errno>
 8014c38:	eeb0 0a48 	vmov.f32	s0, s16
 8014c3c:	ecbd 8b02 	vpop	{d8}
 8014c40:	6004      	str	r4, [r0, #0]
 8014c42:	bd10      	pop	{r4, pc}

08014c44 <__math_invalidf>:
 8014c44:	eef0 7a40 	vmov.f32	s15, s0
 8014c48:	ee30 7a40 	vsub.f32	s14, s0, s0
 8014c4c:	eef4 7a67 	vcmp.f32	s15, s15
 8014c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c54:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014c58:	d602      	bvs.n	8014c60 <__math_invalidf+0x1c>
 8014c5a:	2021      	movs	r0, #33	@ 0x21
 8014c5c:	f7ff bfe4 	b.w	8014c28 <with_errnof>
 8014c60:	4770      	bx	lr
	...

08014c64 <_init>:
 8014c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c66:	bf00      	nop
 8014c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c6a:	bc08      	pop	{r3}
 8014c6c:	469e      	mov	lr, r3
 8014c6e:	4770      	bx	lr

08014c70 <_fini>:
 8014c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c72:	bf00      	nop
 8014c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c76:	bc08      	pop	{r3}
 8014c78:	469e      	mov	lr, r3
 8014c7a:	4770      	bx	lr
