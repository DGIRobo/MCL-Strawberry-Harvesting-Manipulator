
MCU_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08011348  08011348  00012348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011a70  08011a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011a78  08011a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011a7c  08011a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  08011a80  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000053c4  24000248  08011cc8  00013248  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400560c  08011cc8  0001360c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b928  00000000  00000000  00013276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dc2  00000000  00000000  0003eb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e28  00000000  00000000  00043960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  00045788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000060b6  00000000  00000000  00046eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024430  00000000  00000000  0004cf65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017e859  00000000  00000000  00071395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001efbee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000092f8  00000000  00000000  001efca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  001f8fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000010a2  00000000  00000000  001f901d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000040  00000000  00000000  001fa0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801132c 	.word	0x0801132c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	0801132c 	.word	0x0801132c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_uldivmod>:
 8000924:	b953      	cbnz	r3, 800093c <__aeabi_uldivmod+0x18>
 8000926:	b94a      	cbnz	r2, 800093c <__aeabi_uldivmod+0x18>
 8000928:	2900      	cmp	r1, #0
 800092a:	bf08      	it	eq
 800092c:	2800      	cmpeq	r0, #0
 800092e:	bf1c      	itt	ne
 8000930:	f04f 31ff 	movne.w	r1, #4294967295
 8000934:	f04f 30ff 	movne.w	r0, #4294967295
 8000938:	f000 b988 	b.w	8000c4c <__aeabi_idiv0>
 800093c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000940:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000944:	f000 f806 	bl	8000954 <__udivmoddi4>
 8000948:	f8dd e004 	ldr.w	lr, [sp, #4]
 800094c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr

08000954 <__udivmoddi4>:
 8000954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000958:	9d08      	ldr	r5, [sp, #32]
 800095a:	468e      	mov	lr, r1
 800095c:	4604      	mov	r4, r0
 800095e:	4688      	mov	r8, r1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d14a      	bne.n	80009fa <__udivmoddi4+0xa6>
 8000964:	428a      	cmp	r2, r1
 8000966:	4617      	mov	r7, r2
 8000968:	d962      	bls.n	8000a30 <__udivmoddi4+0xdc>
 800096a:	fab2 f682 	clz	r6, r2
 800096e:	b14e      	cbz	r6, 8000984 <__udivmoddi4+0x30>
 8000970:	f1c6 0320 	rsb	r3, r6, #32
 8000974:	fa01 f806 	lsl.w	r8, r1, r6
 8000978:	fa20 f303 	lsr.w	r3, r0, r3
 800097c:	40b7      	lsls	r7, r6
 800097e:	ea43 0808 	orr.w	r8, r3, r8
 8000982:	40b4      	lsls	r4, r6
 8000984:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000988:	fa1f fc87 	uxth.w	ip, r7
 800098c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000990:	0c23      	lsrs	r3, r4, #16
 8000992:	fb0e 8811 	mls	r8, lr, r1, r8
 8000996:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800099a:	fb01 f20c 	mul.w	r2, r1, ip
 800099e:	429a      	cmp	r2, r3
 80009a0:	d909      	bls.n	80009b6 <__udivmoddi4+0x62>
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80009a8:	f080 80ea 	bcs.w	8000b80 <__udivmoddi4+0x22c>
 80009ac:	429a      	cmp	r2, r3
 80009ae:	f240 80e7 	bls.w	8000b80 <__udivmoddi4+0x22c>
 80009b2:	3902      	subs	r1, #2
 80009b4:	443b      	add	r3, r7
 80009b6:	1a9a      	subs	r2, r3, r2
 80009b8:	b2a3      	uxth	r3, r4
 80009ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80009be:	fb0e 2210 	mls	r2, lr, r0, r2
 80009c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c6:	fb00 fc0c 	mul.w	ip, r0, ip
 80009ca:	459c      	cmp	ip, r3
 80009cc:	d909      	bls.n	80009e2 <__udivmoddi4+0x8e>
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80009d4:	f080 80d6 	bcs.w	8000b84 <__udivmoddi4+0x230>
 80009d8:	459c      	cmp	ip, r3
 80009da:	f240 80d3 	bls.w	8000b84 <__udivmoddi4+0x230>
 80009de:	443b      	add	r3, r7
 80009e0:	3802      	subs	r0, #2
 80009e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e6:	eba3 030c 	sub.w	r3, r3, ip
 80009ea:	2100      	movs	r1, #0
 80009ec:	b11d      	cbz	r5, 80009f6 <__udivmoddi4+0xa2>
 80009ee:	40f3      	lsrs	r3, r6
 80009f0:	2200      	movs	r2, #0
 80009f2:	e9c5 3200 	strd	r3, r2, [r5]
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	428b      	cmp	r3, r1
 80009fc:	d905      	bls.n	8000a0a <__udivmoddi4+0xb6>
 80009fe:	b10d      	cbz	r5, 8000a04 <__udivmoddi4+0xb0>
 8000a00:	e9c5 0100 	strd	r0, r1, [r5]
 8000a04:	2100      	movs	r1, #0
 8000a06:	4608      	mov	r0, r1
 8000a08:	e7f5      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000a0a:	fab3 f183 	clz	r1, r3
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d146      	bne.n	8000aa0 <__udivmoddi4+0x14c>
 8000a12:	4573      	cmp	r3, lr
 8000a14:	d302      	bcc.n	8000a1c <__udivmoddi4+0xc8>
 8000a16:	4282      	cmp	r2, r0
 8000a18:	f200 8105 	bhi.w	8000c26 <__udivmoddi4+0x2d2>
 8000a1c:	1a84      	subs	r4, r0, r2
 8000a1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a22:	2001      	movs	r0, #1
 8000a24:	4690      	mov	r8, r2
 8000a26:	2d00      	cmp	r5, #0
 8000a28:	d0e5      	beq.n	80009f6 <__udivmoddi4+0xa2>
 8000a2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000a2e:	e7e2      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	f000 8090 	beq.w	8000b56 <__udivmoddi4+0x202>
 8000a36:	fab2 f682 	clz	r6, r2
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	f040 80a4 	bne.w	8000b88 <__udivmoddi4+0x234>
 8000a40:	1a8a      	subs	r2, r1, r2
 8000a42:	0c03      	lsrs	r3, r0, #16
 8000a44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a48:	b280      	uxth	r0, r0
 8000a4a:	b2bc      	uxth	r4, r7
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d907      	bls.n	8000a72 <__udivmoddi4+0x11e>
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a68:	d202      	bcs.n	8000a70 <__udivmoddi4+0x11c>
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	f200 80e0 	bhi.w	8000c30 <__udivmoddi4+0x2dc>
 8000a70:	46c4      	mov	ip, r8
 8000a72:	1a9b      	subs	r3, r3, r2
 8000a74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a80:	fb02 f404 	mul.w	r4, r2, r4
 8000a84:	429c      	cmp	r4, r3
 8000a86:	d907      	bls.n	8000a98 <__udivmoddi4+0x144>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a8e:	d202      	bcs.n	8000a96 <__udivmoddi4+0x142>
 8000a90:	429c      	cmp	r4, r3
 8000a92:	f200 80ca 	bhi.w	8000c2a <__udivmoddi4+0x2d6>
 8000a96:	4602      	mov	r2, r0
 8000a98:	1b1b      	subs	r3, r3, r4
 8000a9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a9e:	e7a5      	b.n	80009ec <__udivmoddi4+0x98>
 8000aa0:	f1c1 0620 	rsb	r6, r1, #32
 8000aa4:	408b      	lsls	r3, r1
 8000aa6:	fa22 f706 	lsr.w	r7, r2, r6
 8000aaa:	431f      	orrs	r7, r3
 8000aac:	fa0e f401 	lsl.w	r4, lr, r1
 8000ab0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ab4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ab8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000abc:	4323      	orrs	r3, r4
 8000abe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ac2:	fa1f fc87 	uxth.w	ip, r7
 8000ac6:	fbbe f0f9 	udiv	r0, lr, r9
 8000aca:	0c1c      	lsrs	r4, r3, #16
 8000acc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ad0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ad4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ad8:	45a6      	cmp	lr, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x1a0>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ae6:	f080 809c 	bcs.w	8000c22 <__udivmoddi4+0x2ce>
 8000aea:	45a6      	cmp	lr, r4
 8000aec:	f240 8099 	bls.w	8000c22 <__udivmoddi4+0x2ce>
 8000af0:	3802      	subs	r0, #2
 8000af2:	443c      	add	r4, r7
 8000af4:	eba4 040e 	sub.w	r4, r4, lr
 8000af8:	fa1f fe83 	uxth.w	lr, r3
 8000afc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b00:	fb09 4413 	mls	r4, r9, r3, r4
 8000b04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b0c:	45a4      	cmp	ip, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x1ce>
 8000b10:	193c      	adds	r4, r7, r4
 8000b12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b16:	f080 8082 	bcs.w	8000c1e <__udivmoddi4+0x2ca>
 8000b1a:	45a4      	cmp	ip, r4
 8000b1c:	d97f      	bls.n	8000c1e <__udivmoddi4+0x2ca>
 8000b1e:	3b02      	subs	r3, #2
 8000b20:	443c      	add	r4, r7
 8000b22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b26:	eba4 040c 	sub.w	r4, r4, ip
 8000b2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b2e:	4564      	cmp	r4, ip
 8000b30:	4673      	mov	r3, lr
 8000b32:	46e1      	mov	r9, ip
 8000b34:	d362      	bcc.n	8000bfc <__udivmoddi4+0x2a8>
 8000b36:	d05f      	beq.n	8000bf8 <__udivmoddi4+0x2a4>
 8000b38:	b15d      	cbz	r5, 8000b52 <__udivmoddi4+0x1fe>
 8000b3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000b3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000b42:	fa04 f606 	lsl.w	r6, r4, r6
 8000b46:	fa22 f301 	lsr.w	r3, r2, r1
 8000b4a:	431e      	orrs	r6, r3
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000b52:	2100      	movs	r1, #0
 8000b54:	e74f      	b.n	80009f6 <__udivmoddi4+0xa2>
 8000b56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b5a:	0c01      	lsrs	r1, r0, #16
 8000b5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b60:	b280      	uxth	r0, r0
 8000b62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b66:	463b      	mov	r3, r7
 8000b68:	4638      	mov	r0, r7
 8000b6a:	463c      	mov	r4, r7
 8000b6c:	46b8      	mov	r8, r7
 8000b6e:	46be      	mov	lr, r7
 8000b70:	2620      	movs	r6, #32
 8000b72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b76:	eba2 0208 	sub.w	r2, r2, r8
 8000b7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b7e:	e766      	b.n	8000a4e <__udivmoddi4+0xfa>
 8000b80:	4601      	mov	r1, r0
 8000b82:	e718      	b.n	80009b6 <__udivmoddi4+0x62>
 8000b84:	4610      	mov	r0, r2
 8000b86:	e72c      	b.n	80009e2 <__udivmoddi4+0x8e>
 8000b88:	f1c6 0220 	rsb	r2, r6, #32
 8000b8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000b90:	40b7      	lsls	r7, r6
 8000b92:	40b1      	lsls	r1, r6
 8000b94:	fa20 f202 	lsr.w	r2, r0, r2
 8000b98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ba2:	b2bc      	uxth	r4, r7
 8000ba4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ba8:	0c11      	lsrs	r1, r2, #16
 8000baa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bae:	fb08 f904 	mul.w	r9, r8, r4
 8000bb2:	40b0      	lsls	r0, r6
 8000bb4:	4589      	cmp	r9, r1
 8000bb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000bba:	b280      	uxth	r0, r0
 8000bbc:	d93e      	bls.n	8000c3c <__udivmoddi4+0x2e8>
 8000bbe:	1879      	adds	r1, r7, r1
 8000bc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000bc4:	d201      	bcs.n	8000bca <__udivmoddi4+0x276>
 8000bc6:	4589      	cmp	r9, r1
 8000bc8:	d81f      	bhi.n	8000c0a <__udivmoddi4+0x2b6>
 8000bca:	eba1 0109 	sub.w	r1, r1, r9
 8000bce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd2:	fb09 f804 	mul.w	r8, r9, r4
 8000bd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bda:	b292      	uxth	r2, r2
 8000bdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000be0:	4542      	cmp	r2, r8
 8000be2:	d229      	bcs.n	8000c38 <__udivmoddi4+0x2e4>
 8000be4:	18ba      	adds	r2, r7, r2
 8000be6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bea:	d2c4      	bcs.n	8000b76 <__udivmoddi4+0x222>
 8000bec:	4542      	cmp	r2, r8
 8000bee:	d2c2      	bcs.n	8000b76 <__udivmoddi4+0x222>
 8000bf0:	f1a9 0102 	sub.w	r1, r9, #2
 8000bf4:	443a      	add	r2, r7
 8000bf6:	e7be      	b.n	8000b76 <__udivmoddi4+0x222>
 8000bf8:	45f0      	cmp	r8, lr
 8000bfa:	d29d      	bcs.n	8000b38 <__udivmoddi4+0x1e4>
 8000bfc:	ebbe 0302 	subs.w	r3, lr, r2
 8000c00:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c04:	3801      	subs	r0, #1
 8000c06:	46e1      	mov	r9, ip
 8000c08:	e796      	b.n	8000b38 <__udivmoddi4+0x1e4>
 8000c0a:	eba7 0909 	sub.w	r9, r7, r9
 8000c0e:	4449      	add	r1, r9
 8000c10:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c14:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c18:	fb09 f804 	mul.w	r8, r9, r4
 8000c1c:	e7db      	b.n	8000bd6 <__udivmoddi4+0x282>
 8000c1e:	4673      	mov	r3, lr
 8000c20:	e77f      	b.n	8000b22 <__udivmoddi4+0x1ce>
 8000c22:	4650      	mov	r0, sl
 8000c24:	e766      	b.n	8000af4 <__udivmoddi4+0x1a0>
 8000c26:	4608      	mov	r0, r1
 8000c28:	e6fd      	b.n	8000a26 <__udivmoddi4+0xd2>
 8000c2a:	443b      	add	r3, r7
 8000c2c:	3a02      	subs	r2, #2
 8000c2e:	e733      	b.n	8000a98 <__udivmoddi4+0x144>
 8000c30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c34:	443b      	add	r3, r7
 8000c36:	e71c      	b.n	8000a72 <__udivmoddi4+0x11e>
 8000c38:	4649      	mov	r1, r9
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x222>
 8000c3c:	eba1 0109 	sub.w	r1, r1, r9
 8000c40:	46c4      	mov	ip, r8
 8000c42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c46:	fb09 f804 	mul.w	r8, r9, r4
 8000c4a:	e7c4      	b.n	8000bd6 <__udivmoddi4+0x282>

08000c4c <__aeabi_idiv0>:
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Console Display Functions ----------------------------------------------------
int _write(int file, char* p, int len){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	/*for(int i=0; i<len; i++){
		ITM_SendChar((*p++));
	}*/
	HAL_UART_Transmit(&huart3, (uint8_t*)p, len, HAL_MAX_DELAY);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <_write+0x28>)
 8000c68:	f009 faa6 	bl	800a1b8 <HAL_UART_Transmit>
	return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000328 	.word	0x24000328

08000c7c <HAL_GPIO_EXTI_Callback>:

// Safety Button Functions ----------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	80fb      	strh	r3, [r7, #6]
	if (strawberry_robot.current_robot_mode == 0)
 8000c86:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d103      	bne.n	8000c96 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		strawberry_robot.desired_robot_mode = 1;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
	}
	else
	{
		strawberry_robot.desired_robot_mode = 0;
	}
}
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_EXTI_Callback+0x20>
		strawberry_robot.desired_robot_mode = 0;
 8000c96:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	2400040c 	.word	0x2400040c

08000cac <BSP_PB_Callback>:

void BSP_PB_Callback(Button_TypeDef Button)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_USER)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d103      	bne.n	8000cc4 <BSP_PB_Callback+0x18>
    {
        HAL_GPIO_EXTI_Callback(GPIO_PIN_13);  // 내부 콜백 호출 강제 연결
 8000cbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cc0:	f7ff ffdc 	bl	8000c7c <HAL_GPIO_EXTI_Callback>
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <float32_t_to_uint>:

// CAN Communication Functions ----------------------------------------------------
int float32_t_to_uint(float32_t x, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cd0:	ed2d 8b02 	vpush	{d8}
 8000cd4:	b087      	sub	sp, #28
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	ed87 0a03 	vstr	s0, [r7, #12]
 8000cdc:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ce0:	ed87 1a01 	vstr	s2, [r7, #4]
 8000ce4:	6038      	str	r0, [r7, #0]
	// Converts a float to an unsigned int, given range and number of bits
    float32_t span = x_max - x_min;
 8000ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cf2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (x < x_min) x = x_min;
 8000cf6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d06:	d502      	bpl.n	8000d0e <float32_t_to_uint+0x42>
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	60f9      	str	r1, [r7, #12]
 8000d0c:	e00a      	b.n	8000d24 <float32_t_to_uint+0x58>
    else if (x > x_max) x = x_max;
 8000d0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1e:	dd01      	ble.n	8000d24 <float32_t_to_uint+0x58>
 8000d20:	6879      	ldr	r1, [r7, #4]
 8000d22:	60f9      	str	r1, [r7, #12]

    return (unsigned int)((x - x_min) * ((float32_t)((1ULL << bits) - 1) / span));
 8000d24:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d2c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8000d30:	f04f 0001 	mov.w	r0, #1
 8000d34:	f04f 0100 	mov.w	r1, #0
 8000d38:	683c      	ldr	r4, [r7, #0]
 8000d3a:	f1a4 0620 	sub.w	r6, r4, #32
 8000d3e:	f1c4 0520 	rsb	r5, r4, #32
 8000d42:	fa01 f304 	lsl.w	r3, r1, r4
 8000d46:	fa00 f606 	lsl.w	r6, r0, r6
 8000d4a:	4333      	orrs	r3, r6
 8000d4c:	fa20 f505 	lsr.w	r5, r0, r5
 8000d50:	432b      	orrs	r3, r5
 8000d52:	fa00 f204 	lsl.w	r2, r0, r4
 8000d56:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000d5a:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000d5e:	4640      	mov	r0, r8
 8000d60:	4649      	mov	r1, r9
 8000d62:	f7ff fd99 	bl	8000898 <__aeabi_ul2f>
 8000d66:	ee06 0a90 	vmov	s13, r0
 8000d6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d7a:	ee17 3a90 	vmov	r3, s15
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	ecbd 8b02 	vpop	{d8}
 8000d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d8c <uint_to_float32_t>:

float32_t uint_to_float32_t(unsigned int x_int, float32_t x_min, float32_t x_max, unsigned int bits)
{
 8000d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d90:	ed2d 8b02 	vpush	{d8}
 8000d94:	b087      	sub	sp, #28
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000d9e:	edc7 0a01 	vstr	s1, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
	// converts unsigned int to float, given range and number of bits
    float32_t span = x_max - x_min;
 8000da4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000da8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db0:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t offset = x_min;
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6139      	str	r1, [r7, #16]

    return ((float32_t)x_int) * span / ((float32_t)((1ULL << bits) - 1)) + offset;
 8000db8:	68f9      	ldr	r1, [r7, #12]
 8000dba:	ee07 1a90 	vmov	s15, r1
 8000dbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dc6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000dca:	f04f 0001 	mov.w	r0, #1
 8000dce:	f04f 0100 	mov.w	r1, #0
 8000dd2:	683c      	ldr	r4, [r7, #0]
 8000dd4:	f1a4 0620 	sub.w	r6, r4, #32
 8000dd8:	f1c4 0520 	rsb	r5, r4, #32
 8000ddc:	fa01 f304 	lsl.w	r3, r1, r4
 8000de0:	fa00 f606 	lsl.w	r6, r0, r6
 8000de4:	4333      	orrs	r3, r6
 8000de6:	fa20 f505 	lsr.w	r5, r0, r5
 8000dea:	432b      	orrs	r3, r5
 8000dec:	fa00 f204 	lsl.w	r2, r0, r4
 8000df0:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000df4:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000df8:	4640      	mov	r0, r8
 8000dfa:	4649      	mov	r1, r9
 8000dfc:	f7ff fd4c 	bl	8000898 <__aeabi_ul2f>
 8000e00:	ee07 0a90 	vmov	s15, r0
 8000e04:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8000e08:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e10:	eeb0 0a67 	vmov.f32	s0, s15
 8000e14:	371c      	adds	r7, #28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e20 <MIT_reset_origin>:

void MIT_reset_origin(const uint16_t motor_id){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];   // transmit buffer

	buffer[0]=0xff;
 8000e2a:	23ff      	movs	r3, #255	@ 0xff
 8000e2c:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000e2e:	23ff      	movs	r3, #255	@ 0xff
 8000e30:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000e32:	23ff      	movs	r3, #255	@ 0xff
 8000e34:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000e36:	23ff      	movs	r3, #255	@ 0xff
 8000e38:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000e3a:	23ff      	movs	r3, #255	@ 0xff
 8000e3c:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000e3e:	23ff      	movs	r3, #255	@ 0xff
 8000e40:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000e42:	23ff      	movs	r3, #255	@ 0xff
 8000e44:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfe;
 8000e46:	23fe      	movs	r3, #254	@ 0xfe
 8000e48:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e4e:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e5e:	2208      	movs	r2, #8
 8000e60:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	461a      	mov	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	@ (8000ea8 <MIT_reset_origin+0x88>)
 8000e88:	4808      	ldr	r0, [pc, #32]	@ (8000eac <MIT_reset_origin+0x8c>)
 8000e8a:	f004 feaa 	bl	8005be2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <MIT_reset_origin+0x7e>
		sta = 1;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <MIT_reset_origin+0x90>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000e9a:	f003 fd45 	bl	8004928 <Error_Handler>
	}
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	24000264 	.word	0x24000264
 8000eac:	24000288 	.word	0x24000288
 8000eb0:	24000a78 	.word	0x24000a78

08000eb4 <MIT_enter_control_mode>:

void MIT_enter_control_mode(const uint16_t motor_id){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000ebe:	23ff      	movs	r3, #255	@ 0xff
 8000ec0:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000ec2:	23ff      	movs	r3, #255	@ 0xff
 8000ec4:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000ec6:	23ff      	movs	r3, #255	@ 0xff
 8000ec8:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000eca:	23ff      	movs	r3, #255	@ 0xff
 8000ecc:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000ece:	23ff      	movs	r3, #255	@ 0xff
 8000ed0:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000ed2:	23ff      	movs	r3, #255	@ 0xff
 8000ed4:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000ed6:	23ff      	movs	r3, #255	@ 0xff
 8000ed8:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfc;
 8000eda:	23fc      	movs	r3, #252	@ 0xfc
 8000edc:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a16      	ldr	r2, [pc, #88]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ee2:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000eea:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	@ (8000f3c <MIT_enter_control_mode+0x88>)
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <MIT_enter_control_mode+0x8c>)
 8000f1e:	f004 fe60 	bl	8005be2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <MIT_enter_control_mode+0x7e>
		sta = 1;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MIT_enter_control_mode+0x90>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000f2e:	f003 fcfb 	bl	8004928 <Error_Handler>
	}
}
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	24000264 	.word	0x24000264
 8000f40:	24000288 	.word	0x24000288
 8000f44:	24000a78 	.word	0x24000a78

08000f48 <MIT_exit_control_mode>:

void MIT_exit_control_mode(const uint16_t motor_id){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8]; // motor control buffer

	buffer[0]=0xff;
 8000f52:	23ff      	movs	r3, #255	@ 0xff
 8000f54:	723b      	strb	r3, [r7, #8]
	buffer[1]=0xff;
 8000f56:	23ff      	movs	r3, #255	@ 0xff
 8000f58:	727b      	strb	r3, [r7, #9]
	buffer[2]=0xff;
 8000f5a:	23ff      	movs	r3, #255	@ 0xff
 8000f5c:	72bb      	strb	r3, [r7, #10]
	buffer[3]=0xff;
 8000f5e:	23ff      	movs	r3, #255	@ 0xff
 8000f60:	72fb      	strb	r3, [r7, #11]
	buffer[4]=0xff;
 8000f62:	23ff      	movs	r3, #255	@ 0xff
 8000f64:	733b      	strb	r3, [r7, #12]
	buffer[5]=0xff;
 8000f66:	23ff      	movs	r3, #255	@ 0xff
 8000f68:	737b      	strb	r3, [r7, #13]
	buffer[6]=0xff;
 8000f6a:	23ff      	movs	r3, #255	@ 0xff
 8000f6c:	73bb      	strb	r3, [r7, #14]
	buffer[7]=0xfd;
 8000f6e:	23fd      	movs	r3, #253	@ 0xfd
 8000f70:	73fb      	strb	r3, [r7, #15]

	TxHeader.Identifier = motor_id;
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f76:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f86:	2208      	movs	r2, #8
 8000f88:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	461a      	mov	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <MIT_exit_control_mode+0x88>)
 8000fb0:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <MIT_exit_control_mode+0x8c>)
 8000fb2:	f004 fe16 	bl	8005be2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <MIT_exit_control_mode+0x7e>
		sta = 1;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MIT_exit_control_mode+0x90>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
		Error_Handler();
 8000fc2:	f003 fcb1 	bl	8004928 <Error_Handler>
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	24000264 	.word	0x24000264
 8000fd4:	24000288 	.word	0x24000288
 8000fd8:	24000a78 	.word	0x24000a78

08000fdc <MIT_TxData>:

void MIT_TxData(uint8_t* buffer, int16_t number) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
	buffer[0] = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
	buffer[2] = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
	buffer[3] = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3303      	adds	r3, #3
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	buffer[4] = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	buffer[5] = 0;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3305      	adds	r3, #5
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]
	buffer[6] =(number&0x0f00) >> 8;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	121b      	asrs	r3, r3, #8
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3306      	adds	r3, #6
 8001020:	f002 020f 	and.w	r2, r2, #15
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
	buffer[7] = number&0x00ff;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3307      	adds	r3, #7
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <MIT_Mode>:

void MIT_Mode(const uint16_t motor_id, float current_ref){
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	ed87 0a00 	vstr	s0, [r7]
 800104c:	80fb      	strh	r3, [r7, #6]
	uint8_t buffer[8];
	const float32_t I_MIN = -25.0f;
 800104e:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <MIT_Mode+0xd8>)
 8001050:	61fb      	str	r3, [r7, #28]
	const float32_t I_MAX = 25.0f;
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MIT_Mode+0xdc>)
 8001054:	61bb      	str	r3, [r7, #24]
	current_ref = fmin(fmax(I_MIN, current_ref), I_MAX);
 8001056:	edd7 7a07 	vldr	s15, [r7, #28]
 800105a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800105e:	edd7 6a00 	vldr	s13, [r7]
 8001062:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001066:	eeb0 1b46 	vmov.f64	d1, d6
 800106a:	eeb0 0b47 	vmov.f64	d0, d7
 800106e:	f00f ff19 	bl	8010ea4 <fmax>
 8001072:	eeb0 6b40 	vmov.f64	d6, d0
 8001076:	edd7 7a06 	vldr	s15, [r7, #24]
 800107a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800107e:	eeb0 1b47 	vmov.f64	d1, d7
 8001082:	eeb0 0b46 	vmov.f64	d0, d6
 8001086:	f00f ff2a 	bl	8010ede <fmin>
 800108a:	eeb0 7b40 	vmov.f64	d7, d0
 800108e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001092:	edc7 7a00 	vstr	s15, [r7]
	int i_int = float32_t_to_uint(current_ref, I_MIN, I_MAX, 12);
 8001096:	200c      	movs	r0, #12
 8001098:	ed97 1a06 	vldr	s2, [r7, #24]
 800109c:	edd7 0a07 	vldr	s1, [r7, #28]
 80010a0:	ed97 0a00 	vldr	s0, [r7]
 80010a4:	f7ff fe12 	bl	8000ccc <float32_t_to_uint>
 80010a8:	6178      	str	r0, [r7, #20]

	MIT_TxData(buffer, (int16_t)(i_int));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff91 	bl	8000fdc <MIT_TxData>

	TxHeader.Identifier = motor_id;
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	4a18      	ldr	r2, [pc, #96]	@ (8001120 <MIT_Mode+0xe0>)
 80010be:	6013      	str	r3, [r2, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MIT_Mode+0xe0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80010c6:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <MIT_Mode+0xe0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MIT_Mode+0xe0>)
 80010ce:	2208      	movs	r2, #8
 80010d0:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <MIT_Mode+0xe0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80010d8:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MIT_Mode+0xe0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <MIT_Mode+0xe0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <MIT_Mode+0xe0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <MIT_Mode+0xe0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, buffer) != HAL_OK) {
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	461a      	mov	r2, r3
 80010f6:	490a      	ldr	r1, [pc, #40]	@ (8001120 <MIT_Mode+0xe0>)
 80010f8:	480a      	ldr	r0, [pc, #40]	@ (8001124 <MIT_Mode+0xe4>)
 80010fa:	f004 fd72 	bl	8005be2 <HAL_FDCAN_AddMessageToTxFifoQ>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <MIT_Mode+0xce>
		sta = 1;
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <MIT_Mode+0xe8>)
 8001106:	2201      	movs	r2, #1
 8001108:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800110a:	f003 fc0d 	bl	8004928 <Error_Handler>
	}
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	c1c80000 	.word	0xc1c80000
 800111c:	41c80000 	.word	0x41c80000
 8001120:	24000264 	.word	0x24000264
 8001124:	24000288 	.word	0x24000288
 8001128:	24000a78 	.word	0x24000a78

0800112c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b092      	sub	sp, #72	@ 0x48
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d04b      	beq.n	80011d8 <HAL_FDCAN_RxFifo0Callback+0xac>
    {
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001140:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	2140      	movs	r1, #64	@ 0x40
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f004 fda4 	bl	8005c98 <HAL_FDCAN_GetRxMessage>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <HAL_FDCAN_RxFifo0Callback+0x34>
        {
            sta = 2;
 8001156:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <HAL_FDCAN_RxFifo0Callback+0xb4>)
 8001158:	2202      	movs	r2, #2
 800115a:	601a      	str	r2, [r3, #0]
            Error_Handler();
 800115c:	f003 fbe4 	bl	8004928 <Error_Handler>
        }

        uint8_t id = RxData[0];  // RxData[0]에 모터 ID가 있음
 8001160:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001164:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

        // 해당 ID와 일치하는 motor 찾기
        for (int i = 0; i < NUM_MOTORS; ++i)
 8001168:	2300      	movs	r3, #0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
 800116c:	e02b      	b.n	80011c6 <HAL_FDCAN_RxFifo0Callback+0x9a>
        {
            if (strawberry_robot.motors[i].id == id)
 800116e:	4a1d      	ldr	r2, [pc, #116]	@ (80011e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 8001170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001172:	2198      	movs	r1, #152	@ 0x98
 8001174:	fb01 f303 	mul.w	r3, r1, r3
 8001178:	4413      	add	r3, r2
 800117a:	3308      	adds	r3, #8
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001182:	429a      	cmp	r2, r3
 8001184:	d11c      	bne.n	80011c0 <HAL_FDCAN_RxFifo0Callback+0x94>
            {
                // 해당 motor의 수신 큐에 RxData[8] 통째로 넣기
                BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
                xQueueSendFromISR(strawberry_robot.motors[i].canRxQueue, RxData, &xHigherPriorityTaskWoken);
 800118a:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <HAL_FDCAN_RxFifo0Callback+0xb8>)
 800118c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800118e:	2198      	movs	r1, #152	@ 0x98
 8001190:	fb01 f303 	mul.w	r3, r1, r3
 8001194:	4413      	add	r3, r2
 8001196:	3310      	adds	r3, #16
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800119e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80011a2:	2300      	movs	r3, #0
 80011a4:	f00a fd72 	bl	800bc8c <xQueueGenericSendFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00f      	beq.n	80011ce <HAL_FDCAN_RxFifo0Callback+0xa2>
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <HAL_FDCAN_RxFifo0Callback+0xbc>)
 80011b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f3bf 8f4f 	dsb	sy
 80011ba:	f3bf 8f6f 	isb	sy
                break;
 80011be:	e006      	b.n	80011ce <HAL_FDCAN_RxFifo0Callback+0xa2>
        for (int i = 0; i < NUM_MOTORS; ++i)
 80011c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c2:	3301      	adds	r3, #1
 80011c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80011c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	ddd0      	ble.n	800116e <HAL_FDCAN_RxFifo0Callback+0x42>
 80011cc:	e000      	b.n	80011d0 <HAL_FDCAN_RxFifo0Callback+0xa4>
                break;
 80011ce:	bf00      	nop
            }
        }

        HAL_GPIO_TogglePin(GPIOE, LED2_PIN);  // 수신 표시
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	4806      	ldr	r0, [pc, #24]	@ (80011ec <HAL_FDCAN_RxFifo0Callback+0xc0>)
 80011d4:	f005 fe2f 	bl	8006e36 <HAL_GPIO_TogglePin>
    }
}
 80011d8:	bf00      	nop
 80011da:	3748      	adds	r7, #72	@ 0x48
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	24000a78 	.word	0x24000a78
 80011e4:	2400040c 	.word	0x2400040c
 80011e8:	e000ed04 	.word	0xe000ed04
 80011ec:	58021000 	.word	0x58021000

080011f0 <tustin_derivative>:

// Filter Functions ----------------------------------------------------
float32_t tustin_derivative(float32_t input, float32_t input_old, float32_t output_old, float32_t cutoff_freq)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80011fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80011fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8001202:	edc7 1a00 	vstr	s3, [r7]
    float32_t time_const = 1 / (2 * pi * cutoff_freq);
 8001206:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8001280 <tustin_derivative+0x90>
 800120a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800120e:	edd7 7a00 	vldr	s15, [r7]
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800121a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121e:	edc7 7a05 	vstr	s15, [r7, #20]
    float32_t output = 0;
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	613b      	str	r3, [r7, #16]

    output = (2 * (input - input_old) - (Ts - 2 * time_const) * output_old) / (Ts + 2 * time_const);
 8001228:	ed97 7a03 	vldr	s14, [r7, #12]
 800122c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001234:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001238:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001284 <tustin_derivative+0x94>
 800123c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001244:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001248:	edd7 7a01 	vldr	s15, [r7, #4]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001254:	edd7 7a05 	vldr	s15, [r7, #20]
 8001258:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800125c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001284 <tustin_derivative+0x94>
 8001260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001268:	edc7 7a04 	vstr	s15, [r7, #16]

    return output;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	ee07 3a90 	vmov	s15, r3
}
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40490fd8 	.word	0x40490fd8
 8001284:	3b03126f 	.word	0x3b03126f

08001288 <motor_encoder_read>:
    return output;
}

// Single Motor Controller Functions ----------------------------------------------------
void motor_encoder_read(Motor *m, float32_t cutoff)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	ed87 0a00 	vstr	s0, [r7]
	// sensor cutoff resetting
	m->sensor_cutoff = cutoff;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	619a      	str	r2, [r3, #24]

	// state update
	m->pos_old = m->pos;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	629a      	str	r2, [r3, #40]	@ 0x28
	m->vel_old = m->vel;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	631a      	str	r2, [r3, #48]	@ 0x30
	m->acc_old = m->acc;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	639a      	str	r2, [r3, #56]	@ 0x38
	m->pos_error_old = m->pos_error;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	641a      	str	r2, [r3, #64]	@ 0x40
	m->pos_I_term_old = m->pos_I_term;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	64da      	str	r2, [r3, #76]	@ 0x4c
	m->pos_D_term_old = m->pos_D_term;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	@ 0x54
	m->vel_error_old = m->vel_error;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	65da      	str	r2, [r3, #92]	@ 0x5c
	m->vel_I_term_old = m->vel_I_term;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	669a      	str	r2, [r3, #104]	@ 0x68

	m->control_input_old = m->control_input;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	const float32_t P_MIN = -32768, P_MAX = 32768;
 80012e6:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	f04f 438e 	mov.w	r3, #1191182336	@ 0x47000000
 80012f0:	61bb      	str	r3, [r7, #24]
	uint8_t buf[8];
	if (xQueueReceive(m->canRxQueue, buf, pdMS_TO_TICKS(1)) == pdPASS)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f107 0108 	add.w	r1, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f00a fd63 	bl	800bdc8 <xQueueReceive>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d11f      	bne.n	8001348 <motor_encoder_read+0xc0>
	{
		// CAN 메시지가 이미 수신되었거나 1ms 이내 수신 성공 시
		unsigned int p_int = ((buf[1]<<8)|buf[2]);
 8001308:	7a7b      	ldrb	r3, [r7, #9]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	7aba      	ldrb	r2, [r7, #10]
 800130e:	4313      	orrs	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
		float32_t pulses = (float32_t) uint_to_float32_t(p_int, P_MIN, P_MAX, 16);
 8001312:	2110      	movs	r1, #16
 8001314:	edd7 0a06 	vldr	s1, [r7, #24]
 8001318:	ed97 0a07 	vldr	s0, [r7, #28]
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f7ff fd35 	bl	8000d8c <uint_to_float32_t>
 8001322:	ed87 0a04 	vstr	s0, [r7, #16]
		//printf("motor pulses: %f", pulses);
		m->pos = (pulses * (2 * pi /m->encoder_pulses)) ; // load단 position (rad) 값 피드백
 8001326:	eddf 7a28 	vldr	s15, [pc, #160]	@ 80013c8 <motor_encoder_read+0x140>
 800132a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	edd3 7a03 	vldr	s15, [r3, #12]
 8001334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001338:	edd7 7a04 	vldr	s15, [r7, #16]
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001346:	e004      	b.n	8001352 <motor_encoder_read+0xca>
	}
	else
	{
		sta = 2;
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <motor_encoder_read+0x144>)
 800134a:	2202      	movs	r2, #2
 800134c:	601a      	str	r2, [r3, #0]
		Error_Handler();
 800134e:	f003 faeb 	bl	8004928 <Error_Handler>
		// 수신 실패 시에도 이전 pos 값을 그대로 유지
		//m->pos = m->pos_old;
		//printf("Warning: can not read encoder position of ID %d", m->id);
	}
	// 어쨌든 vel, acc 업데이트는 수행
	m->vel = tustin_derivative(m->pos, m->pos_old, m->vel_old, m->sensor_cutoff); // rad/s 값 계산
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	ed93 6a06 	vldr	s12, [r3, #24]
 800136a:	eef0 1a46 	vmov.f32	s3, s12
 800136e:	eeb0 1a66 	vmov.f32	s2, s13
 8001372:	eef0 0a47 	vmov.f32	s1, s14
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	f7ff ff39 	bl	80011f0 <tustin_derivative>
 800137e:	eef0 7a40 	vmov.f32	s15, s0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	m->acc = tustin_derivative(m->vel, m->vel_old, m->acc_old, m->sensor_cutoff); // rad/s^2 값 계산
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	ed93 6a06 	vldr	s12, [r3, #24]
 80013a0:	eef0 1a46 	vmov.f32	s3, s12
 80013a4:	eeb0 1a66 	vmov.f32	s2, s13
 80013a8:	eef0 0a47 	vmov.f32	s1, s14
 80013ac:	eeb0 0a67 	vmov.f32	s0, s15
 80013b0:	f7ff ff1e 	bl	80011f0 <tustin_derivative>
 80013b4:	eef0 7a40 	vmov.f32	s15, s0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40490fd8 	.word	0x40490fd8
 80013cc:	24000a78 	.word	0x24000a78

080013d0 <motor_feedforward_torque>:
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}

void motor_feedforward_torque(Motor *m, float32_t tor_ref)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	ed87 0a00 	vstr	s0, [r7]
	m->control_input = tor_ref /m->gear_ratio /m->Kt; // motor torque -> load torque -> current converting
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 7a04 	vldr	s15, [r3, #16]
 80013e2:	ed97 7a00 	vldr	s14, [r7]
 80013e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	ed93 7a05 	vldr	s14, [r3, #20]
 80013f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

	// 매 주기 anti-windup term 리셋 (추후 saturation이 발생하게 되면 값이 덧씌워짐)
	m->control_input_excess = 0.0f;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	if (m->control_input > m->upper_CL) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd1a      	ble.n	8001450 <motor_feedforward_torque+0x80>
		m->control_input_excess = (m->control_input - m->upper_CL) * m->Kt * m->gear_ratio;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	edd3 7a23 	vldr	s15, [r3, #140]	@ 0x8c
 8001426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edd3 7a04 	vldr	s15, [r3, #16]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->upper_CL; // upper bound saturation (rated current limit)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	}
	if (m->control_input < m->lower_CL) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800145c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001464:	d400      	bmi.n	8001468 <motor_feedforward_torque+0x98>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
	}
}
 8001466:	e01a      	b.n	800149e <motor_feedforward_torque+0xce>
		m->control_input_excess = (m->control_input - m->lower_CL) * m->Kt * m->gear_ratio;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	edd3 7a05 	vldr	s15, [r3, #20]
 800147e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a04 	vldr	s15, [r3, #16]
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
		m->control_input = m->lower_CL; // lower bound saturation (rated current limit)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <robot_forward_kinematics_cal>:

// 3-DoF Manipulator Task Space Controller Functions ----------------------------------------------------
void robot_forward_kinematics_cal(Manipulator *r)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	f00f fdb1 	bl	8011028 <sinf>
 80014c6:	ed87 0a08 	vstr	s0, [r7, #32]
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f00f fe6a 	bl	80111b0 <cosf>
 80014dc:	ed87 0a07 	vstr	s0, [r7, #28]
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014e6:	3304      	adds	r3, #4
 80014e8:	edd3 7a00 	vldr	s15, [r3]
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	f00f fd9a 	bl	8011028 <sinf>
 80014f4:	ed87 0a06 	vstr	s0, [r7, #24]
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80014fe:	3304      	adds	r3, #4
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	f00f fe52 	bl	80111b0 <cosf>
 800150c:	ed87 0a05 	vstr	s0, [r7, #20]
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001516:	3308      	adds	r3, #8
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	f00f fd82 	bl	8011028 <sinf>
 8001524:	ed87 0a04 	vstr	s0, [r7, #16]
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800152e:	3308      	adds	r3, #8
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eeb0 0a67 	vmov.f32	s0, s15
 8001538:	f00f fe3a 	bl	80111b0 <cosf>
 800153c:	ed87 0a03 	vstr	s0, [r7, #12]
	// 2. task space state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
 8001544:	e02c      	b.n	80015a0 <robot_forward_kinematics_cal+0xf4>
		r->posXYZ_ref_old.pData[i] = r->posXYZ_ref.pData[i];
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	441a      	add	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8d3 1298 	ldr.w	r1, [r3, #664]	@ 0x298
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	601a      	str	r2, [r3, #0]
		r->posXYZ_old.pData[i] = r->posXYZ.pData[i];
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	441a      	add	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
 8001574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	601a      	str	r2, [r3, #0]
		r->velXYZ_old.pData[i] = r->velXYZ.pData[i];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	441a      	add	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8d3 12e8 	ldr.w	r1, [r3, #744]	@ 0x2e8
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	3301      	adds	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	ddcf      	ble.n	8001546 <robot_forward_kinematics_cal+0x9a>
	}
	r->posXYZ.pData[0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80015ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80015ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80015be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80015cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[1] = s_1 * (r->l2 * c_m + r->l3 * c_b);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80015de:	edd7 7a05 	vldr	s15, [r7, #20]
 80015e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80015ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80015fe:	3304      	adds	r3, #4
 8001600:	edd7 7a08 	vldr	s15, [r7, #32]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	edc3 7a00 	vstr	s15, [r3]
	r->posXYZ.pData[2] = r->l1 + r->l2 * s_m + r->l3 * s_b;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	ed93 7ac1 	vldr	s14, [r3, #772]	@ 0x304
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 8001618:	edd7 7a06 	vldr	s15, [r7, #24]
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 800162a:	edd7 7a04 	vldr	s15, [r7, #16]
 800162e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 8001638:	3308      	adds	r3, #8
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163e:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_mult_f32(&r->jacb_bi, &r->qdot_bi, &r->velXYZ) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f503 710c 	add.w	r1, r3, #560	@ 0x230
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 8001654:	461a      	mov	r2, r3
 8001656:	f00c fd85 	bl	800e164 <arm_mat_mult_f32>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <robot_forward_kinematics_cal+0x1be>
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <robot_forward_kinematics_cal+0x1c8>)
 8001662:	2204      	movs	r2, #4
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f003 f95f 	bl	8004928 <Error_Handler>
}
 800166a:	bf00      	nop
 800166c:	3728      	adds	r7, #40	@ 0x28
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	24000a78 	.word	0x24000a78

08001678 <robot_model_param_cal>:

void robot_model_param_cal(Manipulator *r)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0f0      	sub	sp, #448	@ 0x1c0
 800167c:	af00      	add	r7, sp, #0
 800167e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001682:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001686:	6018      	str	r0, [r3, #0]
	// 1. pre-term calculation
	const float32_t s_1 = sinf(r->q_bi.pData[0]);
 8001688:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800168c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	f00f fcc3 	bl	8011028 <sinf>
 80016a2:	ed87 0a6c 	vstr	s0, [r7, #432]	@ 0x1b0
	const float32_t c_1 = cosf(r->q_bi.pData[0]);
 80016a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	f00f fd78 	bl	80111b0 <cosf>
 80016c0:	ed87 0a6b 	vstr	s0, [r7, #428]	@ 0x1ac
	const float32_t s_m = sinf(r->q_bi.pData[1]);
 80016c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016d2:	3304      	adds	r3, #4
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f00f fca4 	bl	8011028 <sinf>
 80016e0:	ed87 0a6a 	vstr	s0, [r7, #424]	@ 0x1a8
	const float32_t c_m = cosf(r->q_bi.pData[1]);
 80016e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80016e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80016f2:	3304      	adds	r3, #4
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	f00f fd58 	bl	80111b0 <cosf>
 8001700:	ed87 0a69 	vstr	s0, [r7, #420]	@ 0x1a4
	const float32_t s_b = sinf(r->q_bi.pData[2]);
 8001704:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001708:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001712:	3308      	adds	r3, #8
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f00f fc84 	bl	8011028 <sinf>
 8001720:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
	const float32_t c_b = cosf(r->q_bi.pData[2]);
 8001724:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001728:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001732:	3308      	adds	r3, #8
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f00f fd38 	bl	80111b0 <cosf>
 8001740:	ed87 0a67 	vstr	s0, [r7, #412]	@ 0x19c
	const float32_t s_bm = sinf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 8001744:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001748:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001752:	3308      	adds	r3, #8
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800175c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8001766:	3304      	adds	r3, #4
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	eeb0 0a67 	vmov.f32	s0, s15
 8001774:	f00f fc58 	bl	8011028 <sinf>
 8001778:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
	const float32_t c_bm = cosf(r->q_bi.pData[2] - r->q_bi.pData[1]);
 800177c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001780:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800178a:	3308      	adds	r3, #8
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001794:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800179e:	3304      	adds	r3, #4
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	f00f fd00 	bl	80111b0 <cosf>
 80017b0:	ed87 0a65 	vstr	s0, [r7, #404]	@ 0x194

	// 2. model params update (Jacobian 채우기)
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 0] = -s_1 * (r->l2 * c_m + r->l3 * c_b);
 80017b4:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80017b8:	eeb1 7a67 	vneg.f32	s14, s15
 80017bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	edd3 6ac2 	vldr	s13, [r3, #776]	@ 0x308
 80017ca:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80017ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	ed93 6ac3 	vldr	s12, [r3, #780]	@ 0x30c
 80017e0:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80017e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017ec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80017f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 1] = -r->l2 * c_1 * s_m;
 8001802:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001806:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001810:	eeb1 7a67 	vneg.f32	s14, s15
 8001814:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 8001818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001820:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 800182a:	3304      	adds	r3, #4
 800182c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001834:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[0 * r->jacb_bi.numCols + 2] = -r->l3 * c_1 * s_b;
 8001838:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800183c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001846:	eeb1 7a67 	vneg.f32	s14, s15
 800184a:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800184e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001852:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001856:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 8001860:	3308      	adds	r3, #8
 8001862:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186a:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 0] = c_1 * (r->l2 * c_m + r->l3 * c_b);
 800186e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001872:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800187c:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001884:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001888:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 8001892:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800189e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018a2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80018ac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 1] = -r->l2 * s_1 * s_m;
 80018ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 80018d8:	eeb1 7a67 	vneg.f32	s14, s15
 80018dc:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80018e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80018f2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80018f6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001900:	3301      	adds	r3, #1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[1 * r->jacb_bi.numCols + 2] = -r->l3 * s_1 * s_b;
 8001912:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001916:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8001920:	eeb1 7a67 	vneg.f32	s14, s15
 8001924:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8001928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001930:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 800193a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800193e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001948:	3302      	adds	r3, #2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001956:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 0] = 0.0f;
 800195a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800195e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 8001968:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800196c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 1] = r->l2 * c_m;
 8001980:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001984:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800198e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001992:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 800199c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	3304      	adds	r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	edc3 7a00 	vstr	s15, [r3]
	r->jacb_bi.pData[2 * r->jacb_bi.numCols + 2] = r->l3 * c_b;
 80019bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80019ca:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019ce:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 2328 	ldr.w	r2, [r3, #808]	@ 0x328
 80019d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3326 	ldrh.w	r3, [r3, #806]	@ 0x326
 80019e6:	3301      	adds	r3, #1
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	edc3 7a00 	vstr	s15, [r3]
	if (arm_mat_trans_f32(&r->jacb_bi, &r->jacb_bi_trans) != ARM_MATH_SUCCESS)  { sta=4; Error_Handler(); }
 80019f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80019fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 7249 	add.w	r2, r3, #804	@ 0x324
 8001a06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f00c fb46 	bl	800e0a8 <arm_mat_trans_f32>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d008      	beq.n	8001a34 <robot_model_param_cal+0x3bc>
 8001a22:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <robot_model_param_cal+0x3b8>)
 8001a24:	2204      	movs	r2, #4
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f002 ff7e 	bl	8004928 <Error_Handler>
 8001a2c:	e002      	b.n	8001a34 <robot_model_param_cal+0x3bc>
 8001a2e:	bf00      	nop
 8001a30:	24000a78 	.word	0x24000a78

	// 3. model params update (Manipulator Dynamics model 채우기)
	float32_t l2_cm_d3_cb = r->l2 * c_m + r->d3 * c_b;
 8001a34:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8001a42:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	edd3 6ac8 	vldr	s13, [r3, #800]	@ 0x320
 8001a58:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	edc7 7a64 	vstr	s15, [r7, #400]	@ 0x190
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001a68:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	ed93 7ac4 	vldr	s14, [r3, #784]	@ 0x310
											+ r->m2 * (r->d2 * c_m) * (r->d2 * c_m)
 8001a76:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a7a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	edd3 6abf 	vldr	s13, [r3, #764]	@ 0x2fc
 8001a84:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001a88:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001a92:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001a96:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001aa2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	ed93 6ac7 	vldr	s12, [r3, #796]	@ 0x31c
 8001aac:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001ab0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001abc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ac0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001aca:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001ace:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ad2:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001ada:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ade:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
											+ r->m3 *  l2_cm_d3_cb * l2_cm_d3_cb;
 8001ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 0] = r->J1
 8001aec:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001af0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001af4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001afe:	eeb1 7a67 	vneg.f32	s14, s15
 8001b02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001b22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b26:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2e:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001b32:	ee27 7a27 	vmul.f32	s14, s14, s15
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001b36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b3a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001b44:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b4c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b50:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001b5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b5e:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001b66:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b6a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001b74:	3304      	adds	r3, #4
											- r->m3 * l2_cm_d3_cb * r->l2 * s_m;
 8001b76:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->M_bi.pData[0 * r->M_bi.numCols + 1] = - r->m2 * r->d2 * r->d2 * s_m * c_m
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[0 * r->M_bi.numCols + 2] = - r->m3 * l2_cm_d3_cb * r->d3 * s_b;
 8001b7e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b82:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001b8c:	eeb1 7a67 	vneg.f32	s14, s15
 8001b90:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8001b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b98:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001b9c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001baa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8001bb8:	3308      	adds	r3, #8
 8001bba:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 1];
 8001bc6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001bd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001be2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001be6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	6852      	ldr	r2, [r2, #4]
 8001bf6:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001bf8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001bfc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	ed93 7ac5 	vldr	s14, [r3, #788]	@ 0x314
											+ r->m3 * r->l2 * r->l2;
 8001c06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001c14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c26:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001c38:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001c46:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c4a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001c54:	3301      	adds	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
											+ r->m3 * r->l2 * r->l2;
 8001c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
	r->M_bi.pData[1 * r->M_bi.numCols + 1] = r->J2
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[1 * r->M_bi.numCols + 2] = r->m3 * r->l2 * r->d3 * c_bm;
 8001c62:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c66:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8001c70:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c74:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001c7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c82:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c86:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001c98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001ca2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ca6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	edd7 7a65 	vldr	s15, [r7, #404]	@ 0x194
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
	r->M_bi.pData[2 * r->M_bi.numCols + 0] = r->M_bi.pData[0 * r->M_bi.numCols + 2];
 8001cc2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cc6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001cd0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cd4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001cde:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ce2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	6892      	ldr	r2, [r2, #8]
 8001cf2:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 1] = r->M_bi.pData[1 * r->M_bi.numCols + 2];
 8001cf4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001cf8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d02:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d06:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d10:	3302      	adds	r3, #2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	441a      	add	r2, r3
 8001d16:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d1a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8001d24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	3304      	adds	r3, #4
 8001d36:	440b      	add	r3, r1
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	601a      	str	r2, [r3, #0]
	r->M_bi.pData[2 * r->M_bi.numCols + 2] = r->J3;
 8001d3c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d40:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 23d8 	ldr.w	r2, [r3, #984]	@ 0x3d8
 8001d4a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8b3 33d6 	ldrh.w	r3, [r3, #982]	@ 0x3d6
 8001d58:	3301      	adds	r3, #1
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f507 72e0 	add.w	r2, r7, #448	@ 0x1c0
 8001d62:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	f8d2 2318 	ldr.w	r2, [r2, #792]	@ 0x318
 8001d6c:	601a      	str	r2, [r3, #0]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001d6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	edd3 7abf 	vldr	s15, [r3, #764]	@ 0x2fc
 8001d7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001d80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d92:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001d96:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8001da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001da4:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dac:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001db8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
								- r->m3 * (r->l2 * c_m + r->d3 * c_b) * ((r->l2 * s_m + r->d3 * s_b) * r->qdot_bi.pData[1] + r->d3 * s_b * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]))
 8001dcc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dd0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8001dda:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001dde:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001de8:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8001dec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001df0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001df4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001dfe:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8001e02:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e06:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e0e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e12:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	ed93 6ac2 	vldr	s12, [r3, #776]	@ 0x308
 8001e1c:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8001e20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e24:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e28:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001e32:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001e36:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e3a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e3e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e42:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	edd3 5ac8 	vldr	s11, [r3, #800]	@ 0x320
 8001e64:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8001e68:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e6c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e70:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	ed93 5a00 	vldr	s10, [r3]
 8001e80:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001e84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001e8e:	3304      	adds	r3, #4
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001e98:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e9c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ea8:	ee37 7aa7 	vadd.f32	s14, s15, s15
							 ) * r->qdot_bi.pData[0];
 8001eac:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eb0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001eba:	edd3 7a00 	vldr	s15, [r3]
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ebe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ec2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
							 ) * r->qdot_bi.pData[0];
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
	r->C_bi.pData[0]= 2.0f * (- r->m2 * r->d2 * r->d2 * c_m * s_m * r->qdot_bi.pData[1]
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[1] = - r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[2] + r->qdot_bi.pData[1]) * (r->qdot_bi.pData[2] - r->qdot_bi.pData[1]);
 8001ed4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ed8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 8001ee2:	eeb1 7a67 	vneg.f32	s14, s15
 8001ee6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001eea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001ef4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001efc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f0a:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f12:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f20:	3308      	adds	r3, #8
 8001f22:	edd3 6a00 	vldr	s13, [r3]
 8001f26:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f34:	3304      	adds	r3, #4
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f42:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f50:	3308      	adds	r3, #8
 8001f52:	edd3 6a00 	vldr	s13, [r3]
 8001f56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001f64:	3304      	adds	r3, #4
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f6e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f72:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	edc3 7a00 	vstr	s15, [r3]
	r->C_bi.pData[2] = r->m3 * r->l2 * r->d3 * s_bm * (r->qdot_bi.pData[1] * r->qdot_bi.pData[1]);
 8001f86:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f8a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	ed93 7ac0 	vldr	s14, [r3, #768]	@ 0x300
 8001f94:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001f98:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8001fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001faa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 8001fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb8:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fc4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fce:	3304      	adds	r3, #4
 8001fd0:	edd3 6a00 	vldr	s13, [r3]
 8001fd4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001fd8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8001ff0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[0] = 0.0f;
 8002004:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002008:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
	r->G_bi.pData[1] = g * (r->m2 * r->d2 + r->m3 * r->l2) * c_m;
 8002018:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800201c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	ed93 7abf 	vldr	s14, [r3, #764]	@ 0x2fc
 8002026:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800202a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	edd3 7ac7 	vldr	s15, [r3, #796]	@ 0x31c
 8002034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002038:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800203c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	edd3 6ac0 	vldr	s13, [r3, #768]	@ 0x300
 8002046:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800204a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	edd3 7ac2 	vldr	s15, [r3, #776]	@ 0x308
 8002054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002278 <robot_model_param_cal+0xc00>
 8002060:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002064:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002068:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8002072:	3304      	adds	r3, #4
 8002074:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207c:	edc3 7a00 	vstr	s15, [r3]
	r->G_bi.pData[2] = g * r->m3 * r->d3 * c_b;
 8002080:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002084:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	edd3 7ac0 	vldr	s15, [r3, #768]	@ 0x300
 800208e:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002278 <robot_model_param_cal+0xc00>
 8002092:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002096:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800209a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	edd3 7ac8 	vldr	s15, [r3, #800]	@ 0x320
 80020a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 80020b6:	3308      	adds	r3, #8
 80020b8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80020bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c0:	edc3 7a00 	vstr	s15, [r3]

	// 5.Singular Point에 가까운지 여부에 따라 Jacobian Inverse와 Taskspace Mass Matrix 분리해서 계산
	// L = l2*cos(qm) + l3*cos(qb)
	float32_t L = r->l2 * c_m + r->l3 * c_b;
 80020c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80020d2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80020d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80020de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	edd3 6ac3 	vldr	s13, [r3, #780]	@ 0x30c
 80020e8:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80020ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f4:	edc7 7a63 	vstr	s15, [r7, #396]	@ 0x18c
	// Δ = cos(qb) * sin(qm) - cos(qm) * sin(qb) = sin(qm - qb)
	float32_t Delta = c_b * s_m - c_m * s_b;
 80020f8:	ed97 7a67 	vldr	s14, [r7, #412]	@ 0x19c
 80020fc:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8002100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002104:	edd7 6a69 	vldr	s13, [r7, #420]	@ 0x1a4
 8002108:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800210c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002114:	edc7 7a62 	vstr	s15, [r7, #392]	@ 0x188
	// L, Delta 계산 직후 크기가 너무 작지 않은지 확인 (Singular Point에 가까운지 확인)
	float32_t epsL = fmaxf(1e-6f*(r->l2 + r->l3), FLT_EPSILON*(r->l2 + r->l3));
 8002118:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800211c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002126:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800212a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 8002134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002138:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800227c <robot_model_param_cal+0xc04>
 800213c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002140:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002144:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800214e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002152:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	edd3 7ac3 	vldr	s15, [r3, #780]	@ 0x30c
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002280 <robot_model_param_cal+0xc08>
 8002164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002168:	eef0 0a67 	vmov.f32	s1, s15
 800216c:	eeb0 0a66 	vmov.f32	s0, s13
 8002170:	f00e fef6 	bl	8010f60 <fmaxf>
 8002174:	ed87 0a61 	vstr	s0, [r7, #388]	@ 0x184
	float32_t epsD = fmaxf(1e-6f,               FLT_EPSILON);
 8002178:	4b42      	ldr	r3, [pc, #264]	@ (8002284 <robot_model_param_cal+0xc0c>)
 800217a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	if (fabsf(L) < epsL || fabsf(Delta) < epsD) // Singular Point에 가까우면 0으로 나누게 되는 Fault 상황이 발생하기 때문에 해당 경우에는 DLS 사용
 800217e:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8002182:	eef0 7ae7 	vabs.f32	s15, s15
 8002186:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 800218a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002192:	dc0b      	bgt.n	80021ac <robot_model_param_cal+0xb34>
 8002194:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002198:	eef0 7ae7 	vabs.f32	s15, s15
 800219c:	ed97 7a60 	vldr	s14, [r7, #384]	@ 0x180
 80021a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	f340 82aa 	ble.w	8002700 <robot_model_param_cal+0x1088>
	{
	    // ----- DLS fallback: J^T (J J^T + λ^2 I)^{-1} -----
		// Jacobian의 Inverse 계산
	    float32_t JJt_buf[9], JJt_d_buf[9], invJJt_buf[9];
	    arm_matrix_instance_f32 JJt, JJt_d, invJJt;
	    arm_mat_init_f32(&JJt,   3,3, JJt_buf);
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 80021b4:	2203      	movs	r2, #3
 80021b6:	2103      	movs	r1, #3
 80021b8:	f00c f976 	bl	800e4a8 <arm_mat_init_f32>
	    arm_mat_init_f32(&JJt_d, 3,3, JJt_d_buf);
 80021bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021c0:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 80021c4:	2203      	movs	r2, #3
 80021c6:	2103      	movs	r1, #3
 80021c8:	f00c f96e 	bl	800e4a8 <arm_mat_init_f32>
	    arm_mat_init_f32(&invJJt,3,3, invJJt_buf);
 80021cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80021d0:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 80021d4:	2203      	movs	r2, #3
 80021d6:	2103      	movs	r1, #3
 80021d8:	f00c f966 	bl	800e4a8 <arm_mat_init_f32>
	    if (arm_mat_mult_f32(&r->jacb_bi, &r->jacb_bi_trans, &JJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80021dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80021ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80021ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 80021f8:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 80021fc:	4619      	mov	r1, r3
 80021fe:	f00b ffb1 	bl	800e164 <arm_mat_mult_f32>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <robot_model_param_cal+0xb9a>
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <robot_model_param_cal+0xc10>)
 800220a:	2204      	movs	r2, #4
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f002 fb8b 	bl	8004928 <Error_Handler>
	    float32_t tr = JJt_buf[0] + JJt_buf[4] + JJt_buf[8];
 8002212:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002216:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800221a:	ed93 7a00 	vldr	s14, [r3]
 800221e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002222:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002226:	edd3 7a04 	vldr	s15, [r3, #16]
 800222a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002232:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002236:	edd3 7a08 	vldr	s15, [r3, #32]
 800223a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223e:	edc7 7a5f 	vstr	s15, [r7, #380]	@ 0x17c
	    float32_t lambda = 0.05f * (tr/3.0f + 1e-6f);
 8002242:	ed97 7a5f 	vldr	s14, [r7, #380]	@ 0x17c
 8002246:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800224a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800224e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800227c <robot_model_param_cal+0xc04>
 8002252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002256:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800228c <robot_model_param_cal+0xc14>
 800225a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800225e:	edc7 7a5e 	vstr	s15, [r7, #376]	@ 0x178
	    float32_t lambda2 = lambda*lambda;
 8002262:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 8002266:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800226a:	edc7 7a5d 	vstr	s15, [r7, #372]	@ 0x174
	    for (int i=0;i<9;i++) JJt_d_buf[i] = JJt_buf[i];
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002274:	e023      	b.n	80022be <robot_model_param_cal+0xc46>
 8002276:	bf00      	nop
 8002278:	411ce80a 	.word	0x411ce80a
 800227c:	358637bd 	.word	0x358637bd
 8002280:	34000000 	.word	0x34000000
 8002284:	358637bd 	.word	0x358637bd
 8002288:	24000a78 	.word	0x24000a78
 800228c:	3d4ccccd 	.word	0x3d4ccccd
 8002290:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002294:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8002298:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022a6:	f5a3 71ca 	sub.w	r1, r3, #404	@ 0x194
 80022aa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022b8:	3301      	adds	r3, #1
 80022ba:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80022be:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	dde4      	ble.n	8002290 <robot_model_param_cal+0xc18>
	    JJt_d_buf[0]+=lambda2; JJt_d_buf[4]+=lambda2; JJt_d_buf[8]+=lambda2;
 80022c6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022ca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022de:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022e2:	edc3 7a00 	vstr	s15, [r3]
 80022e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022ea:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80022f2:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 80022f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80022fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002302:	edc3 7a04 	vstr	s15, [r3, #16]
 8002306:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800230a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800230e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002312:	edd7 7a5d 	vldr	s15, [r7, #372]	@ 0x174
 8002316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800231e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002322:	edc3 7a08 	vstr	s15, [r3, #32]
	    if (arm_mat_inverse_f32(&JJt_d, &invJJt) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002326:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 800232a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f00b ffbb 	bl	800e2ac <arm_mat_inverse_f32>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <robot_model_param_cal+0xcce>
 800233c:	4b82      	ldr	r3, [pc, #520]	@ (8002548 <robot_model_param_cal+0xed0>)
 800233e:	2204      	movs	r2, #4
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f002 faf1 	bl	8004928 <Error_Handler>
	    if (arm_mat_mult_f32(&r->jacb_bi_trans, &invJJt, &r->jacb_bi_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002346:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800234a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 8002354:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002358:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002362:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8002366:	4619      	mov	r1, r3
 8002368:	f00b fefc 	bl	800e164 <arm_mat_mult_f32>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <robot_model_param_cal+0xd04>
 8002372:	4b75      	ldr	r3, [pc, #468]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002374:	2204      	movs	r2, #4
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f002 fad6 	bl	8004928 <Error_Handler>
	    // Jacobian의 Inverse의 Transpose 계산
		if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800237c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002380:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 800238a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800238e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f00b fe84 	bl	800e0a8 <arm_mat_trans_f32>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d004      	beq.n	80023b0 <robot_model_param_cal+0xd38>
 80023a6:	4b68      	ldr	r3, [pc, #416]	@ (8002548 <robot_model_param_cal+0xed0>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	f002 fabc 	bl	8004928 <Error_Handler>
		// Taskspace Mass Matrix 계산
		float32_t Minv_buf[9], A_buf[9], Ad_buf[9], Lambda_buf[9], tmp_buf[9];
		arm_matrix_instance_f32 Minv, A, Ad, Lambda, tmp;
		arm_mat_init_f32(&Minv,  3,3, Minv_buf);
 80023b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80023b4:	f507 70a8 	add.w	r0, r7, #336	@ 0x150
 80023b8:	2203      	movs	r2, #3
 80023ba:	2103      	movs	r1, #3
 80023bc:	f00c f874 	bl	800e4a8 <arm_mat_init_f32>
		arm_mat_init_f32(&A,     3,3, A_buf);
 80023c0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80023c4:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 80023c8:	2203      	movs	r2, #3
 80023ca:	2103      	movs	r1, #3
 80023cc:	f00c f86c 	bl	800e4a8 <arm_mat_init_f32>
		arm_mat_init_f32(&Ad,    3,3, Ad_buf);
 80023d0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80023d4:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80023d8:	2203      	movs	r2, #3
 80023da:	2103      	movs	r1, #3
 80023dc:	f00c f864 	bl	800e4a8 <arm_mat_init_f32>
		arm_mat_init_f32(&Lambda,3,3, Lambda_buf);
 80023e0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80023e4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80023e8:	2203      	movs	r2, #3
 80023ea:	2103      	movs	r1, #3
 80023ec:	f00c f85c 	bl	800e4a8 <arm_mat_init_f32>
		arm_mat_init_f32(&tmp,   3,3, tmp_buf);
 80023f0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80023f4:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 80023f8:	2203      	movs	r2, #3
 80023fa:	2103      	movs	r1, #3
 80023fc:	f00c f854 	bl	800e4a8 <arm_mat_init_f32>
		if (arm_mat_inverse_f32(&r->M_bi, &Minv) == ARM_MATH_SUCCESS) { // M이 특이행렬이 아니면 계산하고, 특이행렬이면 안전하게 이전값 유지
 8002400:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002404:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 800240e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f00b ff49 	bl	800e2ac <arm_mat_inverse_f32>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	f040 80b2 	bne.w	8002586 <robot_model_param_cal+0xf0e>
		    // A = J * Minv * J^T
		    if (arm_mat_mult_f32(&r->jacb_bi, &Minv, &tmp) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002422:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002426:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002430:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8002434:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8002438:	4618      	mov	r0, r3
 800243a:	f00b fe93 	bl	800e164 <arm_mat_mult_f32>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <robot_model_param_cal+0xdd6>
 8002444:	4b40      	ldr	r3, [pc, #256]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002446:	2204      	movs	r2, #4
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	f002 fa6d 	bl	8004928 <Error_Handler>
		    if (arm_mat_mult_f32(&tmp, &r->jacb_bi_trans, &A) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800244e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002452:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f503 715f 	add.w	r1, r3, #892	@ 0x37c
 800245c:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002460:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002464:	4618      	mov	r0, r3
 8002466:	f00b fe7d 	bl	800e164 <arm_mat_mult_f32>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <robot_model_param_cal+0xe02>
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002472:	2204      	movs	r2, #4
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f002 fa57 	bl	8004928 <Error_Handler>
		    // 댐핑(선택): A_d = A + μ^2 I
		    for (int i=0;i<9;i++) Ad_buf[i] = A_buf[i];
 800247a:	2300      	movs	r3, #0
 800247c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8002480:	e016      	b.n	80024b0 <robot_model_param_cal+0xe38>
 8002482:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002486:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 800248a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002498:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 800249c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024aa:	3301      	adds	r3, #1
 80024ac:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80024b0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	dde4      	ble.n	8002482 <robot_model_param_cal+0xe0a>
		    float32_t mu2 = 0.0f; // 필요 시 1e-4 ~ 1e-2 범위
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
		    Ad_buf[0]+=mu2; Ad_buf[4]+=mu2; Ad_buf[8]+=mu2;
 80024c0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024c8:	ed93 7a00 	vldr	s14, [r3]
 80024cc:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024dc:	edc3 7a00 	vstr	s15, [r3]
 80024e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80024ec:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80024f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024fc:	edc3 7a04 	vstr	s15, [r3, #16]
 8002500:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002508:	ed93 7a08 	vldr	s14, [r3, #32]
 800250c:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 8002510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002514:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800251c:	edc3 7a08 	vstr	s15, [r3, #32]
		    if (arm_mat_inverse_f32(&Ad, &Lambda) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002520:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002524:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f00b febe 	bl	800e2ac <arm_mat_inverse_f32>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <robot_model_param_cal+0xec8>
 8002536:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <robot_model_param_cal+0xed0>)
 8002538:	2204      	movs	r2, #4
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f002 f9f4 	bl	8004928 <Error_Handler>
		    // 최종 작업공간 관성 M_bi_task = Lambda
		    for (int i=0;i<9;i++) r->M_bi_task.pData[i] = Lambda_buf[i];
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002546:	e01a      	b.n	800257e <robot_model_param_cal+0xf06>
 8002548:	24000a78 	.word	0x24000a78
 800254c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002550:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 800255a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 800256c:	443a      	add	r2, r7
 800256e:	3ae0      	subs	r2, #224	@ 0xe0
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002578:	3301      	adds	r3, #1
 800257a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800257e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002582:	2b08      	cmp	r3, #8
 8002584:	dde2      	ble.n	800254c <robot_model_param_cal+0xed4>
		}
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 8002586:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800258a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002594:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002598:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 80025a6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025b4:	3304      	adds	r3, #4
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 80025bc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025c0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80025ca:	3308      	adds	r3, #8
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 80025d2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025d6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80025e0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025e4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 80025f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80025fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002606:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800260a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002614:	3301      	adds	r3, #1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800261e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002628:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800262c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002636:	3301      	adds	r3, #1
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002640:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002644:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800264e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002652:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 800265c:	3302      	adds	r3, #2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002668:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800266c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002676:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800267a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 800268e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002692:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 800269c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3304      	adds	r3, #4
 80026ae:	4413      	add	r3, r2
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 80026b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80026c4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 80026d2:	3301      	adds	r3, #1
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	441a      	add	r2, r3
 80026d8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026dc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 80026e6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80026ea:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 80026f4:	3301      	adds	r3, #1
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	601a      	str	r2, [r3, #0]
	{
 80026fe:	e227      	b.n	8002b50 <robot_model_param_cal+0x14d8>
	}
	else // Singular Point에 가깝지 않으면 직접 Jacobian의 Inverse 계산
	{
		// Jacobian의 Inverse 계산
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 0] = -s_1 / L;
 8002700:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002704:	eef1 6a67 	vneg.f32	s13, s15
 8002708:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800270c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002716:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800271a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800271e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 1] =  c_1 / L;
 8002722:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002726:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002730:	3304      	adds	r3, #4
 8002732:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 8002736:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800273a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800273e:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[0*r->jacb_bi_inv.numCols + 2] =  0.0f;
 8002742:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002746:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
 8002750:	3308      	adds	r3, #8
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 0] = -c_1 * c_b / (r->l2 * Delta);
 8002758:	edd7 7a6b 	vldr	s15, [r7, #428]	@ 0x1ac
 800275c:	eeb1 7a67 	vneg.f32	s14, s15
 8002760:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8002764:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002768:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800276c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 8002776:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002782:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800278c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002790:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 1] = -c_b * s_1 / (r->l2 * Delta);
 80027a6:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 80027aa:	eeb1 7a67 	vneg.f32	s14, s15
 80027ae:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 80027b2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027b6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027ba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 80027c4:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80027da:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80027de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80027e8:	3301      	adds	r3, #1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f2:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[1*r->jacb_bi_inv.numCols + 2] = -s_b / (r->l2 * Delta);
 80027f6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80027fa:	eef1 6a67 	vneg.f32	s13, s15
 80027fe:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002802:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	ed93 7ac2 	vldr	s14, [r3, #776]	@ 0x308
 800280c:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8002810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002814:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002818:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 8002822:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002826:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002830:	3302      	adds	r3, #2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283a:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 0] =  c_1 * c_m / (r->l3 * Delta);
 800283e:	ed97 7a6b 	vldr	s14, [r7, #428]	@ 0x1ac
 8002842:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8002846:	ee67 6a27 	vmul.f32	s13, s14, s15
 800284a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800284e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 8002858:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800285c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002860:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002864:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 800286e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002872:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002884:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 1] =  c_m * s_1 / (r->l3 * Delta);
 8002888:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 800288c:	edd7 7a6c 	vldr	s15, [r7, #432]	@ 0x1b0
 8002890:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002894:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002898:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80028a2:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80028a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ae:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80028b8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028bc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	3304      	adds	r3, #4
 80028ca:	4413      	add	r3, r2
 80028cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d0:	edc3 7a00 	vstr	s15, [r3]
	    r->jacb_bi_inv.pData[2*r->jacb_bi_inv.numCols + 2] =  s_m / (r->l3 * Delta);
 80028d4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028d8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	ed93 7ac3 	vldr	s14, [r3, #780]	@ 0x30c
 80028e2:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80028e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ea:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028ee:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
 80028f8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80028fc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8b3 3352 	ldrh.w	r3, [r3, #850]	@ 0x352
 8002906:	3301      	adds	r3, #1
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 8002910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002914:	edc3 7a00 	vstr	s15, [r3]
	    // Jacobian의 Inverse의 Transpose 계산
	    if (arm_mat_trans_f32(&r->jacb_bi_inv, &r->jacb_bi_trans_inv) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002918:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800291c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f503 7254 	add.w	r2, r3, #848	@ 0x350
 8002926:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800292a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f00b fbb6 	bl	800e0a8 <arm_mat_trans_f32>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <robot_model_param_cal+0x12d4>
 8002942:	4b86      	ldr	r3, [pc, #536]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 8002944:	2204      	movs	r2, #4
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f001 ffee 	bl	8004928 <Error_Handler>
	    // Taskspace Mass Matrix 계산
		float32_t MJI_buf[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
 800294c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002950:	2224      	movs	r2, #36	@ 0x24
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f00c fbf3 	bl	800f140 <memset>
		arm_matrix_instance_f32 MJI;
		arm_mat_init_f32(&MJI,  3, 3, MJI_buf);
 800295a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800295e:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8002962:	2203      	movs	r2, #3
 8002964:	2103      	movs	r1, #3
 8002966:	f00b fd9f 	bl	800e4a8 <arm_mat_init_f32>
		if (arm_mat_mult_f32(&r->M_bi, &r->jacb_bi_inv, &MJI) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 800296a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800296e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f503 7075 	add.w	r0, r3, #980	@ 0x3d4
 8002978:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 800297c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002986:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800298a:	4619      	mov	r1, r3
 800298c:	f00b fbea 	bl	800e164 <arm_mat_mult_f32>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <robot_model_param_cal+0x1328>
 8002996:	4b71      	ldr	r3, [pc, #452]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 8002998:	2204      	movs	r2, #4
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f001 ffc4 	bl	8004928 <Error_Handler>
		if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &MJI, &r->M_bi_task) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80029a0:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 80029ae:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 80029bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80029c0:	4619      	mov	r1, r3
 80029c2:	f00b fbcf 	bl	800e164 <arm_mat_mult_f32>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <robot_model_param_cal+0x135e>
 80029cc:	4b63      	ldr	r3, [pc, #396]	@ (8002b5c <robot_model_param_cal+0x14e4>)
 80029ce:	2204      	movs	r2, #4
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f001 ffa9 	bl	8004928 <Error_Handler>
		// DOB를 위한 Nominal Taskspace Mass Matrix 계산
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 0] = r->M_bi_task.pData[0 * r->M_bi_task.numCols + 0];
 80029d6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029da:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80029e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029e8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 1] = 0;
 80029f6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 80029fa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a04:	3304      	adds	r3, #4
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[0 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002a0c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002a22:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a26:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002a30:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a34:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 1] = r->M_bi_task.pData[1 * r->M_bi_task.numCols + 1];
 8002a48:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a4c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002a56:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a5a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002a64:	3301      	adds	r3, #1
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	441a      	add	r2, r3
 8002a6a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002a78:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a7c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002a86:	3301      	adds	r3, #1
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	6812      	ldr	r2, [r2, #0]
 8002a8e:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[1 * r->M_bi_task_nominal.numCols + 2] = 0;
 8002a90:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002a94:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002a9e:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aa2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002aac:	3302      	adds	r3, #2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 0] = 0;
 8002ab8:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002abc:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002ac6:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002aca:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 1] = 0;
 8002ade:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002ae2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 8002aec:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002af0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	3304      	adds	r3, #4
 8002afe:	4413      	add	r3, r2
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
		r->M_bi_task_nominal.pData[2 * r->M_bi_task_nominal.numCols + 2] = r->M_bi_task.pData[2 * r->M_bi_task.numCols + 2];
 8002b06:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b0a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 8002b14:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b18:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 342a 	ldrh.w	r3, [r3, #1066]	@ 0x42a
 8002b22:	3301      	adds	r3, #1
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	441a      	add	r2, r3
 8002b28:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b2c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8d3 1458 	ldr.w	r1, [r3, #1112]	@ 0x458
 8002b36:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8002b3a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3456 	ldrh.w	r3, [r3, #1110]	@ 0x456
 8002b44:	3301      	adds	r3, #1
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	601a      	str	r2, [r3, #0]
	}
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	f507 77e0 	add.w	r7, r7, #448	@ 0x1c0
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	24000a78 	.word	0x24000a78

08002b60 <robot_state_update>:

void robot_state_update(Manipulator *r)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	// 1. joint state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	e0cb      	b.n	8002d06 <robot_state_update+0x1a6>
		r->q_bi.pData		 [i] = r->axis_configuration[i] * r->motors[i].pos + homing_q_bi.pData[i];
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	3374      	adds	r3, #116	@ 0x74
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	ed93 7a00 	vldr	s14, [r3]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2198      	movs	r1, #152	@ 0x98
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	332c      	adds	r3, #44	@ 0x2c
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b92:	4bae      	ldr	r3, [pc, #696]	@ (8002e4c <robot_state_update+0x2ec>)
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	edc3 7a00 	vstr	s15, [r3]
		r->q_bi_old.pData	 [i] = r->axis_configuration[i] * r->motors[i].pos_old + homing_q_bi.pData[i];
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3374      	adds	r3, #116	@ 0x74
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	ed93 7a00 	vldr	s14, [r3]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2198      	movs	r1, #152	@ 0x98
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3330      	adds	r3, #48	@ 0x30
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd8:	4b9c      	ldr	r3, [pc, #624]	@ (8002e4c <robot_state_update+0x2ec>)
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf6:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].vel;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	3374      	adds	r3, #116	@ 0x74
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	ed93 7a00 	vldr	s14, [r3]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	2198      	movs	r1, #152	@ 0x98
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	3334      	adds	r3, #52	@ 0x34
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2a:	edc3 7a00 	vstr	s15, [r3]
		r->qdot_bi_old.pData [i] = r->axis_configuration[i] * r->motors[i].vel_old;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3374      	adds	r3, #116	@ 0x74
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	2198      	movs	r1, #152	@ 0x98
 8002c42:	fb01 f303 	mul.w	r3, r1, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	3338      	adds	r3, #56	@ 0x38
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi.pData	 [i] = r->axis_configuration[i] * r->motors[i].acc;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	3374      	adds	r3, #116	@ 0x74
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	ed93 7a00 	vldr	s14, [r3]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2198      	movs	r1, #152	@ 0x98
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	333c      	adds	r3, #60	@ 0x3c
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	edc3 7a00 	vstr	s15, [r3]
		r->qddot_bi_old.pData[i] = r->axis_configuration[i] * r->motors[i].acc_old;
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	3374      	adds	r3, #116	@ 0x74
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	ed93 7a00 	vldr	s14, [r3]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2198      	movs	r1, #152	@ 0x98
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3340      	adds	r3, #64	@ 0x40
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	edc3 7a00 	vstr	s15, [r3]
		r->tau_bi_excess.pData[i] = r->axis_configuration[i] * r->motors[i].control_input_excess;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3374      	adds	r3, #116	@ 0x74
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	ed93 7a00 	vldr	s14, [r3]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	2198      	movs	r1, #152	@ 0x98
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	3301      	adds	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	f77f af30 	ble.w	8002b6e <robot_state_update+0xe>
	}

	// 2. Range of Motion Checking
	r->q.pData[0] = r->q_bi.pData[0];
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	601a      	str	r2, [r3, #0]
	r->q.pData[1] = r->q_bi.pData[1];
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	6852      	ldr	r2, [r2, #4]
 8002d2e:	601a      	str	r2, [r3, #0]
	r->q.pData[2] = r->q_bi.pData[2] - r->q_bi.pData[1];
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002d36:	3308      	adds	r3, #8
 8002d38:	ed93 7a00 	vldr	s14, [r3]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8002d42:	3304      	adds	r3, #4
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 8002d4e:	3308      	adds	r3, #8
 8002d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d54:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	e036      	b.n	8002dcc <robot_state_update+0x26c>
		if (r->q.pData[i] > r->q_upper_ROM[i]) { sta=5; Error_Handler(); }
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	ed93 7a00 	vldr	s14, [r3]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	337c      	adds	r3, #124	@ 0x7c
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d84:	dd05      	ble.n	8002d92 <robot_state_update+0x232>
 8002d86:	4b32      	ldr	r3, [pc, #200]	@ (8002e50 <robot_state_update+0x2f0>)
 8002d88:	2205      	movs	r2, #5
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f001 fdcc 	bl	8004928 <Error_Handler>
 8002d90:	e019      	b.n	8002dc6 <robot_state_update+0x266>
		else if (r->q.pData[i] < r->q_lower_ROM[i]) { sta=5; Error_Handler(); }
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 21e0 	ldr.w	r2, [r3, #480]	@ 0x1e0
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	ed93 7a00 	vldr	s14, [r3]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	337e      	adds	r3, #126	@ 0x7e
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dba:	d504      	bpl.n	8002dc6 <robot_state_update+0x266>
 8002dbc:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <robot_state_update+0x2f0>)
 8002dbe:	2205      	movs	r2, #5
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f001 fdb1 	bl	8004928 <Error_Handler>
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	ddc5      	ble.n	8002d5e <robot_state_update+0x1fe>
	}

	// 2. model params update
	robot_model_param_cal(r);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fc50 	bl	8001678 <robot_model_param_cal>

	// 3. task space state update
	robot_forward_kinematics_cal(r);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fe fb67 	bl	80014ac <robot_forward_kinematics_cal>

	// 4. manipulator task space pid control state update
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e02c      	b.n	8002e3e <robot_state_update+0x2de>
		r->pos_error_old.pData[i] = r->pos_error.pData[i];
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	441a      	add	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	@ 0x4d4
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	601a      	str	r2, [r3, #0]
		r->pos_I_term_old.pData[i] = r->pos_I_term.pData[i];
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	441a      	add	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	@ 0x510
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	601a      	str	r2, [r3, #0]
		r->pos_D_term_old.pData[i] = r->pos_D_term.pData[i];
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	441a      	add	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 1538 	ldr.w	r1, [r3, #1336]	@ 0x538
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	ddcf      	ble.n	8002de4 <robot_state_update+0x284>
	}

	// 5. manipulator task space DOB control state update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e03f      	b.n	8002eca <robot_state_update+0x36a>
 8002e4a:	bf00      	nop
 8002e4c:	240003e8 	.word	0x240003e8
 8002e50:	24000a78 	.word	0x24000a78
		r->DOB_lhs_old.pData[i] = r->DOB_lhs.pData[i];
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 1580 	ldr.w	r1, [r3, #1408]	@ 0x580
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_lhs_old.pData[i] = r->DOB_filtered_lhs.pData[i];
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 15a8 	ldr.w	r1, [r3, #1448]	@ 0x5a8
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	601a      	str	r2, [r3, #0]
		r->DOB_rhs_old.pData[i] = r->DOB_rhs.pData[i];
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441a      	add	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 15d0 	ldr.w	r1, [r3, #1488]	@ 0x5d0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	601a      	str	r2, [r3, #0]
		r->DOB_filtered_rhs_old.pData[i] = r->DOB_filtered_rhs.pData[i];
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 15f8 	ldr.w	r1, [r3, #1528]	@ 0x5f8
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	ddc1      	ble.n	8002e54 <robot_state_update+0x2f4>
	}

	// 6. manipulator control input update
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e01e      	b.n	8002f14 <robot_state_update+0x3b4>
		r->tau_bi_old.pData[i] = r->tau_bi.pData[i];
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 1620 	ldr.w	r1, [r3, #1568]	@ 0x620
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	601a      	str	r2, [r3, #0]
		r->pos_pid_output_excess_old.pData[i] = r->pos_pid_output_excess.pData[i];
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 165c 	ldr.w	r1, [r3, #1628]	@ 0x65c
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3301      	adds	r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	dddd      	ble.n	8002ed6 <robot_state_update+0x376>
	}

	// 7. anti-windup term update
	if (arm_mat_mult_f32(&r->jacb_bi_trans_inv, &r->tau_bi_excess, &r->pos_pid_output_excess) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 706a 	add.w	r0, r3, #936	@ 0x3a8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f503 61c6 	add.w	r1, r3, #1584	@ 0x630
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f203 6344 	addw	r3, r3, #1604	@ 0x644
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f00b f919 	bl	800e164 <arm_mat_mult_f32>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <robot_state_update+0x3e2>
 8002f38:	4b04      	ldr	r3, [pc, #16]	@ (8002f4c <robot_state_update+0x3ec>)
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f001 fcf3 	bl	8004928 <Error_Handler>
}
 8002f42:	bf00      	nop
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	24000a78 	.word	0x24000a78

08002f50 <robot_pos_pid_gain_setting>:

void robot_pos_pid_gain_setting(Manipulator *r, float32_t* kp, float32_t* kd, float32_t* ki, float32_t* k_windup, float32_t* cutoff)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	e040      	b.n	8002fe6 <robot_pos_pid_gain_setting+0x96>
		r->pos_kp[i] = kp[i];
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68f9      	ldr	r1, [r7, #12]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	601a      	str	r2, [r3, #0]
		r->pos_kd[i] = kd[i];
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	4413      	add	r3, r2
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	601a      	str	r2, [r3, #0]
		r->pos_ki[i] = ki[i];
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3304      	adds	r3, #4
 8002fac:	601a      	str	r2, [r3, #0]
		r->pos_k_windup[i] = k_windup[i];
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	601a      	str	r2, [r3, #0]
		r->cutoff_pos_pid[i] = cutoff[i];
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fce:	4413      	add	r3, r2
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68f9      	ldr	r1, [r7, #12]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	ddbb      	ble.n	8002f64 <robot_pos_pid_gain_setting+0x14>
	}
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <robot_pos_pid>:

void robot_pos_pid(Manipulator *r, arm_matrix_instance_f32 pos_ref)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	1d3b      	adds	r3, r7, #4
 8003006:	e883 0006 	stmia.w	r3, {r1, r2}
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	e145      	b.n	800329c <robot_pos_pid+0x2a0>
		float32_t tau = 1 / (2 * pi * r->cutoff_pos_pid[i]);
 8003010:	eddf 7ab0 	vldr	s15, [pc, #704]	@ 80032d4 <robot_pos_pid+0x2d8>
 8003014:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003034:	edc7 7a04 	vstr	s15, [r7, #16]

		r->posXYZ_ref.pData[i] = pos_ref.pData[i];
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	601a      	str	r2, [r3, #0]

		r->pos_error.pData[i] = r->posXYZ_ref.pData[i] - r->posXYZ.pData[i];
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8d3 2284 	ldr.w	r2, [r3, #644]	@ 0x284
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	ed93 7a00 	vldr	s14, [r3]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003080:	edc3 7a00 	vstr	s15, [r3]

		r->pos_P_term.pData[i] = r->pos_kp[i] * r->pos_error.pData[i];
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	ed93 7a00 	vldr	s14, [r3]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b4:	edc3 7a00 	vstr	s15, [r3]
		r->pos_I_term.pData[i] = r->pos_ki[i] * Ts / 2.0 * (r->pos_error.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess.pData[i] + r->pos_error_old.pData[i] - r->pos_k_windup[i] * r->pos_pid_output_excess_old.pData[i]) + r->pos_I_term_old.pData[i];
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f503 7391 	add.w	r3, r3, #290	@ 0x122
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80032d8 <robot_pos_pid+0x2dc>
 80030ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030d6:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80030da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	ed93 7a00 	vldr	s14, [r3]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	edd3 5a00 	vldr	s11, [r3]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003114:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	edd3 5a00 	vldr	s11, [r3]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800315a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f8d3 2510 	ldr.w	r2, [r3, #1296]	@ 0x510
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003172:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003186:	edc3 7a00 	vstr	s15, [r3]
		r->pos_D_term.pData[i] = 2.0 * r->pos_kd[i] / (2.0 * tau + Ts) * (r->pos_error.pData[i] - r->pos_error_old.pData[i]) - (Ts - 2.0 * tau) / (2.0 * tau + Ts) * r->pos_D_term_old.pData[i];
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f503 7393 	add.w	r3, r3, #294	@ 0x126
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800319e:	ee37 5b07 	vadd.f64	d5, d7, d7
 80031a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80031a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031aa:	ee37 6b07 	vadd.f64	d6, d7, d7
 80031ae:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80032d8 <robot_pos_pid+0x2dc>
 80031b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031ba:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	ed93 7a00 	vldr	s14, [r3]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8d3 24d4 	ldr.w	r2, [r3, #1236]	@ 0x4d4
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80031ea:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80032d8 <robot_pos_pid+0x2dc>
 80031ee:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80031f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80031fe:	ee35 4b47 	vsub.f64	d4, d5, d7
 8003202:	edd7 7a04 	vldr	s15, [r7, #16]
 8003206:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800320a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800320e:	eddf 7a32 	vldr	s15, [pc, #200]	@ 80032d8 <robot_pos_pid+0x2dc>
 8003212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003216:	ee35 7b07 	vadd.f64	d7, d5, d7
 800321a:	ee84 5b07 	vdiv.f64	d5, d4, d7
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8d3 2538 	ldr.w	r2, [r3, #1336]	@ 0x538
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003232:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003236:	ee36 7b47 	vsub.f64	d7, d6, d7
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800324a:	edc3 7a00 	vstr	s15, [r3]

		r->pos_pid_output.pData[i] = (r->pos_P_term.pData[i] + r->pos_I_term.pData[i] + r->pos_D_term.pData[i]);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	ed93 7a00 	vldr	s14, [r3]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003292:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < NUM_TASK_DEG; ++i) {
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	f77f aeb6 	ble.w	8003010 <robot_pos_pid+0x14>
	}

	if (arm_mat_mult_f32(&r->jacb_bi_trans, &r->pos_pid_output, &r->tau_bi) != ARM_MATH_SUCCESS) { sta=4; Error_Handler(); }
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f503 705f 	add.w	r0, r3, #892	@ 0x37c
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f503 61a9 	add.w	r1, r3, #1352	@ 0x548
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f503 63c1 	add.w	r3, r3, #1544	@ 0x608
 80032b6:	461a      	mov	r2, r3
 80032b8:	f00a ff54 	bl	800e164 <arm_mat_mult_f32>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <robot_pos_pid+0x2d0>
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <robot_pos_pid+0x2e0>)
 80032c4:	2204      	movs	r2, #4
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f001 fb2e 	bl	8004928 <Error_Handler>
}
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40490fd8 	.word	0x40490fd8
 80032d8:	3b03126f 	.word	0x3b03126f
 80032dc:	24000a78 	.word	0x24000a78

080032e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	// 모터 객체 불변 파라미터 초기화
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	e060      	b.n	80033ae <main+0xce>
		strawberry_robot.motors[i].id = i + 1;  // ID 1, 2, 3, ...
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	49bf      	ldr	r1, [pc, #764]	@ (80035f0 <main+0x310>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2098      	movs	r0, #152	@ 0x98
 80032f6:	fb00 f303 	mul.w	r3, r0, r3
 80032fa:	440b      	add	r3, r1
 80032fc:	3308      	adds	r3, #8
 80032fe:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].current_motor_mode = 0;
 8003300:	4abb      	ldr	r2, [pc, #748]	@ (80035f0 <main+0x310>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2198      	movs	r1, #152	@ 0x98
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	330c      	adds	r3, #12
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].encoder_pulses = 16384;
 8003312:	4ab7      	ldr	r2, [pc, #732]	@ (80035f0 <main+0x310>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2198      	movs	r1, #152	@ 0x98
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3314      	adds	r3, #20
 8003320:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003324:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].gear_ratio = 10;
 8003326:	4ab2      	ldr	r2, [pc, #712]	@ (80035f0 <main+0x310>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2198      	movs	r1, #152	@ 0x98
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3318      	adds	r3, #24
 8003334:	4aaf      	ldr	r2, [pc, #700]	@ (80035f4 <main+0x314>)
 8003336:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].Kt = 0.123;
 8003338:	4aad      	ldr	r2, [pc, #692]	@ (80035f0 <main+0x310>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2198      	movs	r1, #152	@ 0x98
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	331c      	adds	r3, #28
 8003346:	4aac      	ldr	r2, [pc, #688]	@ (80035f8 <main+0x318>)
 8003348:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].canRxQueue = xQueueCreate(8, sizeof(uint8_t[8]));  // 8바이트 버퍼
 800334a:	2200      	movs	r2, #0
 800334c:	2108      	movs	r1, #8
 800334e:	2008      	movs	r0, #8
 8003350:	f008 fb3b 	bl	800b9ca <xQueueGenericCreate>
 8003354:	4602      	mov	r2, r0
 8003356:	49a6      	ldr	r1, [pc, #664]	@ (80035f0 <main+0x310>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2098      	movs	r0, #152	@ 0x98
 800335c:	fb00 f303 	mul.w	r3, r0, r3
 8003360:	440b      	add	r3, r1
 8003362:	3310      	adds	r3, #16
 8003364:	601a      	str	r2, [r3, #0]
		if (strawberry_robot.motors[i].canRxQueue == NULL) {
 8003366:	4aa2      	ldr	r2, [pc, #648]	@ (80035f0 <main+0x310>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2198      	movs	r1, #152	@ 0x98
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3310      	adds	r3, #16
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <main+0xa4>
			sta = 3;
 800337a:	4ba0      	ldr	r3, [pc, #640]	@ (80035fc <main+0x31c>)
 800337c:	2203      	movs	r2, #3
 800337e:	601a      	str	r2, [r3, #0]
			Error_Handler();
 8003380:	f001 fad2 	bl	8004928 <Error_Handler>
		}
		strawberry_robot.motors[i].upper_CL = 7.2;
 8003384:	4a9a      	ldr	r2, [pc, #616]	@ (80035f0 <main+0x310>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2198      	movs	r1, #152	@ 0x98
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3394      	adds	r3, #148	@ 0x94
 8003392:	4a9b      	ldr	r2, [pc, #620]	@ (8003600 <main+0x320>)
 8003394:	601a      	str	r2, [r3, #0]
		strawberry_robot.motors[i].lower_CL = -7.2;
 8003396:	4a96      	ldr	r2, [pc, #600]	@ (80035f0 <main+0x310>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	2198      	movs	r1, #152	@ 0x98
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	4a97      	ldr	r2, [pc, #604]	@ (8003604 <main+0x324>)
 80033a6:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_MOTORS; ++i) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3301      	adds	r3, #1
 80033ac:	607b      	str	r3, [r7, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	dd9b      	ble.n	80032ec <main+0xc>
	}
	// 로봇 객체 불변 파라미터 초기화
	arm_mat_init_f32(&homing_q_bi, NUM_MOTORS, 1, homing_q_bi_buffer);
 80033b4:	4b94      	ldr	r3, [pc, #592]	@ (8003608 <main+0x328>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	2103      	movs	r1, #3
 80033ba:	4894      	ldr	r0, [pc, #592]	@ (800360c <main+0x32c>)
 80033bc:	f00b f874 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&homing_posXYZ, NUM_TASK_DEG, 1, homing_posXYZ_buffer);
 80033c0:	4b93      	ldr	r3, [pc, #588]	@ (8003610 <main+0x330>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	2103      	movs	r1, #3
 80033c6:	4893      	ldr	r0, [pc, #588]	@ (8003614 <main+0x334>)
 80033c8:	f00b f86e 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&target_posXYZ, NUM_TASK_DEG, 1, target_posXYZ_buffer);
 80033cc:	4b92      	ldr	r3, [pc, #584]	@ (8003618 <main+0x338>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	2103      	movs	r1, #3
 80033d2:	4892      	ldr	r0, [pc, #584]	@ (800361c <main+0x33c>)
 80033d4:	f00b f868 	bl	800e4a8 <arm_mat_init_f32>

	strawberry_robot.current_robot_mode = 0;
 80033d8:	4b85      	ldr	r3, [pc, #532]	@ (80035f0 <main+0x310>)
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
	strawberry_robot.desired_robot_mode = 0;
 80033de:	4b84      	ldr	r3, [pc, #528]	@ (80035f0 <main+0x310>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]

	strawberry_robot.axis_configuration[0] = -1;
 80033e4:	4b82      	ldr	r3, [pc, #520]	@ (80035f0 <main+0x310>)
 80033e6:	4a8e      	ldr	r2, [pc, #568]	@ (8003620 <main+0x340>)
 80033e8:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
	strawberry_robot.axis_configuration[1] = -1;
 80033ec:	4b80      	ldr	r3, [pc, #512]	@ (80035f0 <main+0x310>)
 80033ee:	4a8c      	ldr	r2, [pc, #560]	@ (8003620 <main+0x340>)
 80033f0:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
	strawberry_robot.axis_configuration[2] = 1;
 80033f4:	4b7e      	ldr	r3, [pc, #504]	@ (80035f0 <main+0x310>)
 80033f6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033fa:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8

	strawberry_robot.q_lower_ROM[0] = -pi;
 80033fe:	eddf 7a89 	vldr	s15, [pc, #548]	@ 8003624 <main+0x344>
 8003402:	eef1 7a67 	vneg.f32	s15, s15
 8003406:	4b7a      	ldr	r3, [pc, #488]	@ (80035f0 <main+0x310>)
 8003408:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc
	strawberry_robot.q_upper_ROM[0] = pi;
 800340c:	4a86      	ldr	r2, [pc, #536]	@ (8003628 <main+0x348>)
 800340e:	4b78      	ldr	r3, [pc, #480]	@ (80035f0 <main+0x310>)
 8003410:	f8c3 21f0 	str.w	r2, [r3, #496]	@ 0x1f0
	strawberry_robot.q_lower_ROM[1] = 0;
 8003414:	4b76      	ldr	r3, [pc, #472]	@ (80035f0 <main+0x310>)
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	strawberry_robot.q_upper_ROM[1] = 85 * (pi/180);
 800341e:	eddf 6a81 	vldr	s13, [pc, #516]	@ 8003624 <main+0x344>
 8003422:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800362c <main+0x34c>
 8003426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800342a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003630 <main+0x350>
 800342e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003432:	4b6f      	ldr	r3, [pc, #444]	@ (80035f0 <main+0x310>)
 8003434:	edc3 7a7d 	vstr	s15, [r3, #500]	@ 0x1f4
	strawberry_robot.q_lower_ROM[2] = -160 * (pi/180);
 8003438:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8003624 <main+0x344>
 800343c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800362c <main+0x34c>
 8003440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003444:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8003634 <main+0x354>
 8003448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800344c:	4b68      	ldr	r3, [pc, #416]	@ (80035f0 <main+0x310>)
 800344e:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204
	strawberry_robot.q_upper_ROM[2] = -40 * (pi/180);
 8003452:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8003624 <main+0x344>
 8003456:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800362c <main+0x34c>
 800345a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345e:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8003638 <main+0x358>
 8003462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003466:	4b62      	ldr	r3, [pc, #392]	@ (80035f0 <main+0x310>)
 8003468:	edc3 7a7e 	vstr	s15, [r3, #504]	@ 0x1f8

	// link length setting
	strawberry_robot.l1 = 0.176;
 800346c:	4b60      	ldr	r3, [pc, #384]	@ (80035f0 <main+0x310>)
 800346e:	4a73      	ldr	r2, [pc, #460]	@ (800363c <main+0x35c>)
 8003470:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
	strawberry_robot.l2 = 0.46;
 8003474:	4b5e      	ldr	r3, [pc, #376]	@ (80035f0 <main+0x310>)
 8003476:	4a72      	ldr	r2, [pc, #456]	@ (8003640 <main+0x360>)
 8003478:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
	strawberry_robot.l3 = 0.46;
 800347c:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <main+0x310>)
 800347e:	4a70      	ldr	r2, [pc, #448]	@ (8003640 <main+0x360>)
 8003480:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

	// link mass setting
	strawberry_robot.m1 = 3.93949;
 8003484:	4b5a      	ldr	r3, [pc, #360]	@ (80035f0 <main+0x310>)
 8003486:	4a6f      	ldr	r2, [pc, #444]	@ (8003644 <main+0x364>)
 8003488:	f8c3 22f8 	str.w	r2, [r3, #760]	@ 0x2f8
	strawberry_robot.m2 = 0;
 800348c:	4b58      	ldr	r3, [pc, #352]	@ (80035f0 <main+0x310>)
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f8c3 22fc 	str.w	r2, [r3, #764]	@ 0x2fc
	strawberry_robot.m3 = 0;
 8003496:	4b56      	ldr	r3, [pc, #344]	@ (80035f0 <main+0x310>)
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300

	// link CoM position setting
	strawberry_robot.d2 = 0;
 80034a0:	4b53      	ldr	r3, [pc, #332]	@ (80035f0 <main+0x310>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
	strawberry_robot.d3 = 0;
 80034aa:	4b51      	ldr	r3, [pc, #324]	@ (80035f0 <main+0x310>)
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

	// link inertia setting
	strawberry_robot.J1 = 0;
 80034b4:	4b4e      	ldr	r3, [pc, #312]	@ (80035f0 <main+0x310>)
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	strawberry_robot.J2 = 0;
 80034be:	4b4c      	ldr	r3, [pc, #304]	@ (80035f0 <main+0x310>)
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
	strawberry_robot.J3 = 0;
 80034c8:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <main+0x310>)
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

	// 로봇 joint state matrix 연결
	arm_mat_init_f32(&strawberry_robot.q, NUM_MOTORS, 1, strawberry_robot.q_buffer);
 80034d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003648 <main+0x368>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	2103      	movs	r1, #3
 80034d8:	485c      	ldr	r0, [pc, #368]	@ (800364c <main+0x36c>)
 80034da:	f00a ffe5 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi, NUM_MOTORS, 1, strawberry_robot.q_bi_buffer);
 80034de:	4b5c      	ldr	r3, [pc, #368]	@ (8003650 <main+0x370>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	2103      	movs	r1, #3
 80034e4:	485b      	ldr	r0, [pc, #364]	@ (8003654 <main+0x374>)
 80034e6:	f00a ffdf 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.q_bi_old, NUM_MOTORS, 1, strawberry_robot.q_bi_old_buffer);
 80034ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003658 <main+0x378>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	2103      	movs	r1, #3
 80034f0:	485a      	ldr	r0, [pc, #360]	@ (800365c <main+0x37c>)
 80034f2:	f00a ffd9 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi, NUM_MOTORS, 1, strawberry_robot.qdot_bi_buffer);
 80034f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003660 <main+0x380>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	2103      	movs	r1, #3
 80034fc:	4859      	ldr	r0, [pc, #356]	@ (8003664 <main+0x384>)
 80034fe:	f00a ffd3 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qdot_bi_old, NUM_MOTORS, 1, strawberry_robot.qdot_bi_old_buffer);
 8003502:	4b59      	ldr	r3, [pc, #356]	@ (8003668 <main+0x388>)
 8003504:	2201      	movs	r2, #1
 8003506:	2103      	movs	r1, #3
 8003508:	4858      	ldr	r0, [pc, #352]	@ (800366c <main+0x38c>)
 800350a:	f00a ffcd 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi, NUM_MOTORS, 1, strawberry_robot.qddot_bi_buffer);
 800350e:	4b58      	ldr	r3, [pc, #352]	@ (8003670 <main+0x390>)
 8003510:	2201      	movs	r2, #1
 8003512:	2103      	movs	r1, #3
 8003514:	4857      	ldr	r0, [pc, #348]	@ (8003674 <main+0x394>)
 8003516:	f00a ffc7 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.qddot_bi_old, NUM_MOTORS, 1, strawberry_robot.qddot_bi_old_buffer);
 800351a:	4b57      	ldr	r3, [pc, #348]	@ (8003678 <main+0x398>)
 800351c:	2201      	movs	r2, #1
 800351e:	2103      	movs	r1, #3
 8003520:	4856      	ldr	r0, [pc, #344]	@ (800367c <main+0x39c>)
 8003522:	f00a ffc1 	bl	800e4a8 <arm_mat_init_f32>
	// 로봇 task space state matrix 연결
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_buffer);
 8003526:	4b56      	ldr	r3, [pc, #344]	@ (8003680 <main+0x3a0>)
 8003528:	2201      	movs	r2, #1
 800352a:	2103      	movs	r1, #3
 800352c:	4855      	ldr	r0, [pc, #340]	@ (8003684 <main+0x3a4>)
 800352e:	f00a ffbb 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_ref_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_ref_old_buffer);
 8003532:	4b55      	ldr	r3, [pc, #340]	@ (8003688 <main+0x3a8>)
 8003534:	2201      	movs	r2, #1
 8003536:	2103      	movs	r1, #3
 8003538:	4854      	ldr	r0, [pc, #336]	@ (800368c <main+0x3ac>)
 800353a:	f00a ffb5 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_buffer);
 800353e:	4b54      	ldr	r3, [pc, #336]	@ (8003690 <main+0x3b0>)
 8003540:	2201      	movs	r2, #1
 8003542:	2103      	movs	r1, #3
 8003544:	4853      	ldr	r0, [pc, #332]	@ (8003694 <main+0x3b4>)
 8003546:	f00a ffaf 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.posXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.posXYZ_old_buffer);
 800354a:	4b53      	ldr	r3, [pc, #332]	@ (8003698 <main+0x3b8>)
 800354c:	2201      	movs	r2, #1
 800354e:	2103      	movs	r1, #3
 8003550:	4852      	ldr	r0, [pc, #328]	@ (800369c <main+0x3bc>)
 8003552:	f00a ffa9 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_buffer);
 8003556:	4b52      	ldr	r3, [pc, #328]	@ (80036a0 <main+0x3c0>)
 8003558:	2201      	movs	r2, #1
 800355a:	2103      	movs	r1, #3
 800355c:	4851      	ldr	r0, [pc, #324]	@ (80036a4 <main+0x3c4>)
 800355e:	f00a ffa3 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.velXYZ_old, NUM_TASK_DEG, 1, strawberry_robot.velXYZ_old_buffer);
 8003562:	4b51      	ldr	r3, [pc, #324]	@ (80036a8 <main+0x3c8>)
 8003564:	2201      	movs	r2, #1
 8003566:	2103      	movs	r1, #3
 8003568:	4850      	ldr	r0, [pc, #320]	@ (80036ac <main+0x3cc>)
 800356a:	f00a ff9d 	bl	800e4a8 <arm_mat_init_f32>
	// 로봇 model params matrix 연결
	arm_mat_init_f32(&strawberry_robot.jacb_bi, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_buffer);
 800356e:	4b50      	ldr	r3, [pc, #320]	@ (80036b0 <main+0x3d0>)
 8003570:	2203      	movs	r2, #3
 8003572:	2103      	movs	r1, #3
 8003574:	484f      	ldr	r0, [pc, #316]	@ (80036b4 <main+0x3d4>)
 8003576:	f00a ff97 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_inv_buffer);
 800357a:	4b4f      	ldr	r3, [pc, #316]	@ (80036b8 <main+0x3d8>)
 800357c:	2203      	movs	r2, #3
 800357e:	2103      	movs	r1, #3
 8003580:	484e      	ldr	r0, [pc, #312]	@ (80036bc <main+0x3dc>)
 8003582:	f00a ff91 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans, NUM_TASK_DEG, NUM_MOTORS, strawberry_robot.jacb_bi_trans_buffer);
 8003586:	4b4e      	ldr	r3, [pc, #312]	@ (80036c0 <main+0x3e0>)
 8003588:	2203      	movs	r2, #3
 800358a:	2103      	movs	r1, #3
 800358c:	484d      	ldr	r0, [pc, #308]	@ (80036c4 <main+0x3e4>)
 800358e:	f00a ff8b 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.jacb_bi_trans_inv, NUM_MOTORS, NUM_TASK_DEG, strawberry_robot.jacb_bi_trans_inv_buffer);
 8003592:	4b4d      	ldr	r3, [pc, #308]	@ (80036c8 <main+0x3e8>)
 8003594:	2203      	movs	r2, #3
 8003596:	2103      	movs	r1, #3
 8003598:	484c      	ldr	r0, [pc, #304]	@ (80036cc <main+0x3ec>)
 800359a:	f00a ff85 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi, NUM_MOTORS, NUM_MOTORS, strawberry_robot.M_bi_buffer);
 800359e:	4b4c      	ldr	r3, [pc, #304]	@ (80036d0 <main+0x3f0>)
 80035a0:	2203      	movs	r2, #3
 80035a2:	2103      	movs	r1, #3
 80035a4:	484b      	ldr	r0, [pc, #300]	@ (80036d4 <main+0x3f4>)
 80035a6:	f00a ff7f 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.C_bi, NUM_MOTORS, 1, strawberry_robot.C_bi_buffer);
 80035aa:	4b4b      	ldr	r3, [pc, #300]	@ (80036d8 <main+0x3f8>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	2103      	movs	r1, #3
 80035b0:	484a      	ldr	r0, [pc, #296]	@ (80036dc <main+0x3fc>)
 80035b2:	f00a ff79 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.G_bi, NUM_MOTORS, 1, strawberry_robot.G_bi_buffer);
 80035b6:	4b4a      	ldr	r3, [pc, #296]	@ (80036e0 <main+0x400>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	2103      	movs	r1, #3
 80035bc:	4849      	ldr	r0, [pc, #292]	@ (80036e4 <main+0x404>)
 80035be:	f00a ff73 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_buffer);
 80035c2:	4b49      	ldr	r3, [pc, #292]	@ (80036e8 <main+0x408>)
 80035c4:	2203      	movs	r2, #3
 80035c6:	2103      	movs	r1, #3
 80035c8:	4848      	ldr	r0, [pc, #288]	@ (80036ec <main+0x40c>)
 80035ca:	f00a ff6d 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.M_bi_task_nominal, NUM_TASK_DEG, NUM_TASK_DEG, strawberry_robot.M_bi_task_nominal_buffer);
 80035ce:	4b48      	ldr	r3, [pc, #288]	@ (80036f0 <main+0x410>)
 80035d0:	2203      	movs	r2, #3
 80035d2:	2103      	movs	r1, #3
 80035d4:	4847      	ldr	r0, [pc, #284]	@ (80036f4 <main+0x414>)
 80035d6:	f00a ff67 	bl	800e4a8 <arm_mat_init_f32>
	// 로봇 task space pid control state matrix 연결
	arm_mat_init_f32(&strawberry_robot.pos_error, NUM_TASK_DEG, 1, strawberry_robot.pos_error_buffer);
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <main+0x418>)
 80035dc:	2201      	movs	r2, #1
 80035de:	2103      	movs	r1, #3
 80035e0:	4846      	ldr	r0, [pc, #280]	@ (80036fc <main+0x41c>)
 80035e2:	f00a ff61 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_error_old, NUM_TASK_DEG, 1, strawberry_robot.pos_error_old_buffer);
 80035e6:	4b46      	ldr	r3, [pc, #280]	@ (8003700 <main+0x420>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	2103      	movs	r1, #3
 80035ec:	e08a      	b.n	8003704 <main+0x424>
 80035ee:	bf00      	nop
 80035f0:	2400040c 	.word	0x2400040c
 80035f4:	41200000 	.word	0x41200000
 80035f8:	3dfbe76d 	.word	0x3dfbe76d
 80035fc:	24000a78 	.word	0x24000a78
 8003600:	40e66666 	.word	0x40e66666
 8003604:	c0e66666 	.word	0xc0e66666
 8003608:	24000000 	.word	0x24000000
 800360c:	240003e8 	.word	0x240003e8
 8003610:	2400000c 	.word	0x2400000c
 8003614:	240003f0 	.word	0x240003f0
 8003618:	24000018 	.word	0x24000018
 800361c:	240003f8 	.word	0x240003f8
 8003620:	bf800000 	.word	0xbf800000
 8003624:	40490fd8 	.word	0x40490fd8
 8003628:	40490fd8 	.word	0x40490fd8
 800362c:	43340000 	.word	0x43340000
 8003630:	42aa0000 	.word	0x42aa0000
 8003634:	c3200000 	.word	0xc3200000
 8003638:	c2200000 	.word	0xc2200000
 800363c:	3e343958 	.word	0x3e343958
 8003640:	3eeb851f 	.word	0x3eeb851f
 8003644:	407c209b 	.word	0x407c209b
 8003648:	240005f0 	.word	0x240005f0
 800364c:	240005e8 	.word	0x240005e8
 8003650:	2400061c 	.word	0x2400061c
 8003654:	24000614 	.word	0x24000614
 8003658:	24000630 	.word	0x24000630
 800365c:	24000628 	.word	0x24000628
 8003660:	24000644 	.word	0x24000644
 8003664:	2400063c 	.word	0x2400063c
 8003668:	24000658 	.word	0x24000658
 800366c:	24000650 	.word	0x24000650
 8003670:	2400066c 	.word	0x2400066c
 8003674:	24000664 	.word	0x24000664
 8003678:	24000680 	.word	0x24000680
 800367c:	24000678 	.word	0x24000678
 8003680:	24000694 	.word	0x24000694
 8003684:	2400068c 	.word	0x2400068c
 8003688:	240006a8 	.word	0x240006a8
 800368c:	240006a0 	.word	0x240006a0
 8003690:	240006bc 	.word	0x240006bc
 8003694:	240006b4 	.word	0x240006b4
 8003698:	240006d0 	.word	0x240006d0
 800369c:	240006c8 	.word	0x240006c8
 80036a0:	240006e4 	.word	0x240006e4
 80036a4:	240006dc 	.word	0x240006dc
 80036a8:	240006f8 	.word	0x240006f8
 80036ac:	240006f0 	.word	0x240006f0
 80036b0:	24000738 	.word	0x24000738
 80036b4:	24000730 	.word	0x24000730
 80036b8:	24000764 	.word	0x24000764
 80036bc:	2400075c 	.word	0x2400075c
 80036c0:	24000790 	.word	0x24000790
 80036c4:	24000788 	.word	0x24000788
 80036c8:	240007bc 	.word	0x240007bc
 80036cc:	240007b4 	.word	0x240007b4
 80036d0:	240007e8 	.word	0x240007e8
 80036d4:	240007e0 	.word	0x240007e0
 80036d8:	24000814 	.word	0x24000814
 80036dc:	2400080c 	.word	0x2400080c
 80036e0:	24000828 	.word	0x24000828
 80036e4:	24000820 	.word	0x24000820
 80036e8:	2400083c 	.word	0x2400083c
 80036ec:	24000834 	.word	0x24000834
 80036f0:	24000868 	.word	0x24000868
 80036f4:	24000860 	.word	0x24000860
 80036f8:	240008d0 	.word	0x240008d0
 80036fc:	240008c8 	.word	0x240008c8
 8003700:	240008e4 	.word	0x240008e4
 8003704:	4851      	ldr	r0, [pc, #324]	@ (800384c <main+0x56c>)
 8003706:	f00a fecf 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_P_term, NUM_TASK_DEG, 1, strawberry_robot.pos_P_term_buffer);
 800370a:	4b51      	ldr	r3, [pc, #324]	@ (8003850 <main+0x570>)
 800370c:	2201      	movs	r2, #1
 800370e:	2103      	movs	r1, #3
 8003710:	4850      	ldr	r0, [pc, #320]	@ (8003854 <main+0x574>)
 8003712:	f00a fec9 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_buffer);
 8003716:	4b50      	ldr	r3, [pc, #320]	@ (8003858 <main+0x578>)
 8003718:	2201      	movs	r2, #1
 800371a:	2103      	movs	r1, #3
 800371c:	484f      	ldr	r0, [pc, #316]	@ (800385c <main+0x57c>)
 800371e:	f00a fec3 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_I_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_I_term_old_buffer);
 8003722:	4b4f      	ldr	r3, [pc, #316]	@ (8003860 <main+0x580>)
 8003724:	2201      	movs	r2, #1
 8003726:	2103      	movs	r1, #3
 8003728:	484e      	ldr	r0, [pc, #312]	@ (8003864 <main+0x584>)
 800372a:	f00a febd 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_buffer);
 800372e:	4b4e      	ldr	r3, [pc, #312]	@ (8003868 <main+0x588>)
 8003730:	2201      	movs	r2, #1
 8003732:	2103      	movs	r1, #3
 8003734:	484d      	ldr	r0, [pc, #308]	@ (800386c <main+0x58c>)
 8003736:	f00a feb7 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_D_term_old, NUM_TASK_DEG, 1, strawberry_robot.pos_D_term_old_buffer);
 800373a:	4b4d      	ldr	r3, [pc, #308]	@ (8003870 <main+0x590>)
 800373c:	2201      	movs	r2, #1
 800373e:	2103      	movs	r1, #3
 8003740:	484c      	ldr	r0, [pc, #304]	@ (8003874 <main+0x594>)
 8003742:	f00a feb1 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_buffer);
 8003746:	4b4c      	ldr	r3, [pc, #304]	@ (8003878 <main+0x598>)
 8003748:	2201      	movs	r2, #1
 800374a:	2103      	movs	r1, #3
 800374c:	484b      	ldr	r0, [pc, #300]	@ (800387c <main+0x59c>)
 800374e:	f00a feab 	bl	800e4a8 <arm_mat_init_f32>

	// manipulator task space DOB control state definition
	arm_mat_init_f32(&strawberry_robot.DOB_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_buffer);
 8003752:	4b4b      	ldr	r3, [pc, #300]	@ (8003880 <main+0x5a0>)
 8003754:	2201      	movs	r2, #1
 8003756:	2103      	movs	r1, #3
 8003758:	484a      	ldr	r0, [pc, #296]	@ (8003884 <main+0x5a4>)
 800375a:	f00a fea5 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_lhs_old_buffer);
 800375e:	4b4a      	ldr	r3, [pc, #296]	@ (8003888 <main+0x5a8>)
 8003760:	2201      	movs	r2, #1
 8003762:	2103      	movs	r1, #3
 8003764:	4849      	ldr	r0, [pc, #292]	@ (800388c <main+0x5ac>)
 8003766:	f00a fe9f 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_buffer);
 800376a:	4b49      	ldr	r3, [pc, #292]	@ (8003890 <main+0x5b0>)
 800376c:	2201      	movs	r2, #1
 800376e:	2103      	movs	r1, #3
 8003770:	4848      	ldr	r0, [pc, #288]	@ (8003894 <main+0x5b4>)
 8003772:	f00a fe99 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_lhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_lhs_old_buffer);
 8003776:	4b48      	ldr	r3, [pc, #288]	@ (8003898 <main+0x5b8>)
 8003778:	2201      	movs	r2, #1
 800377a:	2103      	movs	r1, #3
 800377c:	4847      	ldr	r0, [pc, #284]	@ (800389c <main+0x5bc>)
 800377e:	f00a fe93 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_buffer);
 8003782:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <main+0x5c0>)
 8003784:	2201      	movs	r2, #1
 8003786:	2103      	movs	r1, #3
 8003788:	4846      	ldr	r0, [pc, #280]	@ (80038a4 <main+0x5c4>)
 800378a:	f00a fe8d 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_rhs_old_buffer);
 800378e:	4b46      	ldr	r3, [pc, #280]	@ (80038a8 <main+0x5c8>)
 8003790:	2201      	movs	r2, #1
 8003792:	2103      	movs	r1, #3
 8003794:	4845      	ldr	r0, [pc, #276]	@ (80038ac <main+0x5cc>)
 8003796:	f00a fe87 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_buffer);
 800379a:	4b45      	ldr	r3, [pc, #276]	@ (80038b0 <main+0x5d0>)
 800379c:	2201      	movs	r2, #1
 800379e:	2103      	movs	r1, #3
 80037a0:	4844      	ldr	r0, [pc, #272]	@ (80038b4 <main+0x5d4>)
 80037a2:	f00a fe81 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.DOB_filtered_rhs_old, NUM_MOTORS, 1, strawberry_robot.DOB_filtered_rhs_old_buffer);
 80037a6:	4b44      	ldr	r3, [pc, #272]	@ (80038b8 <main+0x5d8>)
 80037a8:	2201      	movs	r2, #1
 80037aa:	2103      	movs	r1, #3
 80037ac:	4843      	ldr	r0, [pc, #268]	@ (80038bc <main+0x5dc>)
 80037ae:	f00a fe7b 	bl	800e4a8 <arm_mat_init_f32>

	// manipulator control input
	arm_mat_init_f32(&strawberry_robot.tau_bi, NUM_MOTORS, 1, strawberry_robot.tau_bi_buffer);
 80037b2:	4b43      	ldr	r3, [pc, #268]	@ (80038c0 <main+0x5e0>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	2103      	movs	r1, #3
 80037b8:	4842      	ldr	r0, [pc, #264]	@ (80038c4 <main+0x5e4>)
 80037ba:	f00a fe75 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_old, NUM_MOTORS, 1, strawberry_robot.tau_bi_old_buffer);
 80037be:	4b42      	ldr	r3, [pc, #264]	@ (80038c8 <main+0x5e8>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	2103      	movs	r1, #3
 80037c4:	4841      	ldr	r0, [pc, #260]	@ (80038cc <main+0x5ec>)
 80037c6:	f00a fe6f 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.tau_bi_excess, NUM_MOTORS, 1, strawberry_robot.tau_bi_excess_buffer);
 80037ca:	4b41      	ldr	r3, [pc, #260]	@ (80038d0 <main+0x5f0>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	2103      	movs	r1, #3
 80037d0:	4840      	ldr	r0, [pc, #256]	@ (80038d4 <main+0x5f4>)
 80037d2:	f00a fe69 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_buffer);
 80037d6:	4b40      	ldr	r3, [pc, #256]	@ (80038d8 <main+0x5f8>)
 80037d8:	2201      	movs	r2, #1
 80037da:	2103      	movs	r1, #3
 80037dc:	483f      	ldr	r0, [pc, #252]	@ (80038dc <main+0x5fc>)
 80037de:	f00a fe63 	bl	800e4a8 <arm_mat_init_f32>
	arm_mat_init_f32(&strawberry_robot.pos_pid_output_excess_old, NUM_TASK_DEG, 1, strawberry_robot.pos_pid_output_excess_old_buffer);
 80037e2:	4b3f      	ldr	r3, [pc, #252]	@ (80038e0 <main+0x600>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	2103      	movs	r1, #3
 80037e8:	483e      	ldr	r0, [pc, #248]	@ (80038e4 <main+0x604>)
 80037ea:	f00a fe5d 	bl	800e4a8 <arm_mat_init_f32>
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80037ee:	f001 f85d 	bl	80048ac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037f2:	f001 fda5 	bl	8005340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037f6:	f000 f883 	bl	8003900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037fa:	f000 f9ef 	bl	8003bdc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80037fe:	f000 f8f9 	bl	80039f4 <MX_FDCAN1_Init>
  MX_USART3_UART_Init();
 8003802:	f000 f99f 	bl	8003b44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003806:	f007 fe35 	bl	800b474 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 800380a:	4a37      	ldr	r2, [pc, #220]	@ (80038e8 <main+0x608>)
 800380c:	2100      	movs	r1, #0
 800380e:	4837      	ldr	r0, [pc, #220]	@ (80038ec <main+0x60c>)
 8003810:	f007 fe7a 	bl	800b508 <osThreadNew>
 8003814:	4603      	mov	r3, r0
 8003816:	4a36      	ldr	r2, [pc, #216]	@ (80038f0 <main+0x610>)
 8003818:	6013      	str	r3, [r2, #0]

  /* creation of DataLogging */
  DataLoggingHandle = osThreadNew(DataLoggingTask, NULL, &DataLogging_attributes);
 800381a:	4a36      	ldr	r2, [pc, #216]	@ (80038f4 <main+0x614>)
 800381c:	2100      	movs	r1, #0
 800381e:	4836      	ldr	r0, [pc, #216]	@ (80038f8 <main+0x618>)
 8003820:	f007 fe72 	bl	800b508 <osThreadNew>
 8003824:	4603      	mov	r3, r0
 8003826:	4a35      	ldr	r2, [pc, #212]	@ (80038fc <main+0x61c>)
 8003828:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800382a:	2000      	movs	r0, #0
 800382c:	f001 fc86 	bl	800513c <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003830:	2001      	movs	r0, #1
 8003832:	f001 fc83 	bl	800513c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003836:	2002      	movs	r0, #2
 8003838:	f001 fc80 	bl	800513c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800383c:	2101      	movs	r1, #1
 800383e:	2000      	movs	r0, #0
 8003840:	f001 fcf2 	bl	8005228 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 8003844:	f007 fe3a 	bl	800b4bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <main+0x568>
 800384c:	240008dc 	.word	0x240008dc
 8003850:	240008f8 	.word	0x240008f8
 8003854:	240008f0 	.word	0x240008f0
 8003858:	2400090c 	.word	0x2400090c
 800385c:	24000904 	.word	0x24000904
 8003860:	24000920 	.word	0x24000920
 8003864:	24000918 	.word	0x24000918
 8003868:	24000934 	.word	0x24000934
 800386c:	2400092c 	.word	0x2400092c
 8003870:	24000948 	.word	0x24000948
 8003874:	24000940 	.word	0x24000940
 8003878:	2400095c 	.word	0x2400095c
 800387c:	24000954 	.word	0x24000954
 8003880:	2400097c 	.word	0x2400097c
 8003884:	24000974 	.word	0x24000974
 8003888:	24000990 	.word	0x24000990
 800388c:	24000988 	.word	0x24000988
 8003890:	240009a4 	.word	0x240009a4
 8003894:	2400099c 	.word	0x2400099c
 8003898:	240009b8 	.word	0x240009b8
 800389c:	240009b0 	.word	0x240009b0
 80038a0:	240009cc 	.word	0x240009cc
 80038a4:	240009c4 	.word	0x240009c4
 80038a8:	240009e0 	.word	0x240009e0
 80038ac:	240009d8 	.word	0x240009d8
 80038b0:	240009f4 	.word	0x240009f4
 80038b4:	240009ec 	.word	0x240009ec
 80038b8:	24000a08 	.word	0x24000a08
 80038bc:	24000a00 	.word	0x24000a00
 80038c0:	24000a1c 	.word	0x24000a1c
 80038c4:	24000a14 	.word	0x24000a14
 80038c8:	24000a30 	.word	0x24000a30
 80038cc:	24000a28 	.word	0x24000a28
 80038d0:	24000a44 	.word	0x24000a44
 80038d4:	24000a3c 	.word	0x24000a3c
 80038d8:	24000a58 	.word	0x24000a58
 80038dc:	24000a50 	.word	0x24000a50
 80038e0:	24000a6c 	.word	0x24000a6c
 80038e4:	24000a64 	.word	0x24000a64
 80038e8:	08011518 	.word	0x08011518
 80038ec:	08003cc1 	.word	0x08003cc1
 80038f0:	240003bc 	.word	0x240003bc
 80038f4:	0801153c 	.word	0x0801153c
 80038f8:	08004455 	.word	0x08004455
 80038fc:	240003c0 	.word	0x240003c0

08003900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b09c      	sub	sp, #112	@ 0x70
 8003904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800390a:	224c      	movs	r2, #76	@ 0x4c
 800390c:	2100      	movs	r1, #0
 800390e:	4618      	mov	r0, r3
 8003910:	f00b fc16 	bl	800f140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	2220      	movs	r2, #32
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f00b fc10 	bl	800f140 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003920:	2002      	movs	r0, #2
 8003922:	f003 faa3 	bl	8006e6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003926:	2300      	movs	r3, #0
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4b30      	ldr	r3, [pc, #192]	@ (80039ec <SystemClock_Config+0xec>)
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	4a2f      	ldr	r2, [pc, #188]	@ (80039ec <SystemClock_Config+0xec>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003936:	4b2d      	ldr	r3, [pc, #180]	@ (80039ec <SystemClock_Config+0xec>)
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4b2b      	ldr	r3, [pc, #172]	@ (80039f0 <SystemClock_Config+0xf0>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	4a2a      	ldr	r2, [pc, #168]	@ (80039f0 <SystemClock_Config+0xf0>)
 8003946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800394a:	6193      	str	r3, [r2, #24]
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <SystemClock_Config+0xf0>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003958:	bf00      	nop
 800395a:	4b25      	ldr	r3, [pc, #148]	@ (80039f0 <SystemClock_Config+0xf0>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003966:	d1f8      	bne.n	800395a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003968:	2301      	movs	r3, #1
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800396c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003970:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003972:	2302      	movs	r3, #2
 8003974:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003976:	2302      	movs	r3, #2
 8003978:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 800397e:	2364      	movs	r3, #100	@ 0x64
 8003980:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003982:	2302      	movs	r3, #2
 8003984:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8003986:	2310      	movs	r3, #16
 8003988:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800398a:	2302      	movs	r3, #2
 800398c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800398e:	230c      	movs	r3, #12
 8003990:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003992:	2300      	movs	r3, #0
 8003994:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800399a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fa9e 	bl	8006ee0 <HAL_RCC_OscConfig>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80039aa:	f000 ffbd 	bl	8004928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039ae:	233f      	movs	r3, #63	@ 0x3f
 80039b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039b2:	2303      	movs	r3, #3
 80039b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80039ba:	2308      	movs	r3, #8
 80039bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80039be:	2340      	movs	r3, #64	@ 0x40
 80039c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80039c2:	2340      	movs	r3, #64	@ 0x40
 80039c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80039c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80039cc:	2340      	movs	r3, #64	@ 0x40
 80039ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	2102      	movs	r1, #2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fedd 	bl	8007794 <HAL_RCC_ClockConfig>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80039e0:	f000 ffa2 	bl	8004928 <Error_Handler>
  }
}
 80039e4:	bf00      	nop
 80039e6:	3770      	adds	r7, #112	@ 0x70
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	58000400 	.word	0x58000400
 80039f0:	58024800 	.word	0x58024800

080039f4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80039fa:	4b4e      	ldr	r3, [pc, #312]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 80039fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003b38 <MX_FDCAN1_Init+0x144>)
 80039fe:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003a00:	4b4c      	ldr	r3, [pc, #304]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003a06:	4b4b      	ldr	r3, [pc, #300]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8003a0c:	4b49      	ldr	r3, [pc, #292]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003a12:	4b48      	ldr	r3, [pc, #288]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003a18:	4b46      	ldr	r3, [pc, #280]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003a1e:	4b45      	ldr	r3, [pc, #276]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a20:	2201      	movs	r2, #1
 8003a22:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8003a24:	4b43      	ldr	r3, [pc, #268]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a26:	2208      	movs	r2, #8
 8003a28:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8003a2a:	4b42      	ldr	r3, [pc, #264]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a2c:	221f      	movs	r2, #31
 8003a2e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8003a30:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a32:	2208      	movs	r2, #8
 8003a34:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003a36:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8003a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a3e:	2204      	movs	r2, #4
 8003a40:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8003a42:	4b3c      	ldr	r3, [pc, #240]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a44:	2205      	movs	r2, #5
 8003a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8003a48:	4b3a      	ldr	r3, [pc, #232]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003a4e:	4b39      	ldr	r3, [pc, #228]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8003a54:	4b37      	ldr	r3, [pc, #220]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8003a5a:	4b36      	ldr	r3, [pc, #216]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003a60:	4b34      	ldr	r3, [pc, #208]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a62:	2240      	movs	r2, #64	@ 0x40
 8003a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003a66:	4b33      	ldr	r3, [pc, #204]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a68:	2204      	movs	r2, #4
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003a6c:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003a72:	4b30      	ldr	r3, [pc, #192]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a74:	2204      	movs	r2, #4
 8003a76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8003a78:	4b2e      	ldr	r3, [pc, #184]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a80:	2204      	movs	r2, #4
 8003a82:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 16;
 8003a84:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a86:	2210      	movs	r2, #16
 8003a88:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 16;
 8003a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8003a90:	4b28      	ldr	r3, [pc, #160]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a92:	2220      	movs	r2, #32
 8003a94:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003a96:	4b27      	ldr	r3, [pc, #156]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003a9c:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003aa2:	4824      	ldr	r0, [pc, #144]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003aa4:	f001 fe94 	bl	80057d0 <HAL_FDCAN_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003aae:	f000 ff3b 	bl	8004928 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  if(HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)!= HAL_OK)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	481f      	ldr	r0, [pc, #124]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003ab8:	f002 fa6c 	bl	8005f94 <HAL_FDCAN_ActivateNotification>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <MX_FDCAN1_Init+0xd8>
  	{
	    sta = 3;
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b3c <MX_FDCAN1_Init+0x148>)
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003ac8:	f000 ff2e 	bl	8004928 <Error_Handler>
  	}

  	if ( HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8003acc:	4819      	ldr	r0, [pc, #100]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003ace:	f002 f85d 	bl	8005b8c <HAL_FDCAN_Start>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <MX_FDCAN1_Init+0xee>
  	{
  		sta = 3;
 8003ad8:	4b18      	ldr	r3, [pc, #96]	@ (8003b3c <MX_FDCAN1_Init+0x148>)
 8003ada:	2203      	movs	r2, #3
 8003adc:	601a      	str	r2, [r3, #0]
  		Error_Handler();
 8003ade:	f000 ff23 	bl	8004928 <Error_Handler>
  	}
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	e01d      	b.n	8003b24 <MX_FDCAN1_Init+0x130>
	{
		// 모터를 Control Disable 모드로 전환
		if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003ae8:	4812      	ldr	r0, [pc, #72]	@ (8003b34 <MX_FDCAN1_Init+0x140>)
 8003aea:	f002 fa41 	bl	8005f70 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d014      	beq.n	8003b1e <MX_FDCAN1_Init+0x12a>
			MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8003af4:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <MX_FDCAN1_Init+0x14c>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2198      	movs	r1, #152	@ 0x98
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3308      	adds	r3, #8
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fa1e 	bl	8000f48 <MIT_exit_control_mode>
			strawberry_robot.motors[i].current_motor_mode = 0;
 8003b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b40 <MX_FDCAN1_Init+0x14c>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2198      	movs	r1, #152	@ 0x98
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	330c      	adds	r3, #12
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i < NUM_MOTORS; ++i)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3301      	adds	r3, #1
 8003b22:	607b      	str	r3, [r7, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	ddde      	ble.n	8003ae8 <MX_FDCAN1_Init+0xf4>
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
		}
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	24000288 	.word	0x24000288
 8003b38:	4000a000 	.word	0x4000a000
 8003b3c:	24000a78 	.word	0x24000a78
 8003b40:	2400040c 	.word	0x2400040c

08003b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b48:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b4a:	4a23      	ldr	r2, [pc, #140]	@ (8003bd8 <MX_USART3_UART_Init+0x94>)
 8003b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003b4e:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b68:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b6a:	220c      	movs	r2, #12
 8003b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b74:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b80:	4b14      	ldr	r3, [pc, #80]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b86:	4b13      	ldr	r3, [pc, #76]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b8c:	4811      	ldr	r0, [pc, #68]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003b8e:	f006 fac3 	bl	800a118 <HAL_UART_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003b98:	f000 fec6 	bl	8004928 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	480d      	ldr	r0, [pc, #52]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003ba0:	f007 fb59 	bl	800b256 <HAL_UARTEx_SetTxFifoThreshold>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003baa:	f000 febd 	bl	8004928 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4808      	ldr	r0, [pc, #32]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003bb2:	f007 fb8e 	bl	800b2d2 <HAL_UARTEx_SetRxFifoThreshold>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003bbc:	f000 feb4 	bl	8004928 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003bc0:	4804      	ldr	r0, [pc, #16]	@ (8003bd4 <MX_USART3_UART_Init+0x90>)
 8003bc2:	f007 fb0f 	bl	800b1e4 <HAL_UARTEx_DisableFifoMode>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003bcc:	f000 feac 	bl	8004928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	24000328 	.word	0x24000328
 8003bd8:	40004800 	.word	0x40004800

08003bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	@ 0x28
 8003be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be2:	f107 0314 	add.w	r3, r7, #20
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bf2:	4b31      	ldr	r3, [pc, #196]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bf8:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c02:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c10:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c16:	4a28      	ldr	r2, [pc, #160]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c20:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c2e:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c34:	4a20      	ldr	r2, [pc, #128]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c36:	f043 0308 	orr.w	r3, r3, #8
 8003c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c52:	4a19      	ldr	r2, [pc, #100]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c5c:	4b16      	ldr	r3, [pc, #88]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	607b      	str	r3, [r7, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c6a:	4b13      	ldr	r3, [pc, #76]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c70:	4a11      	ldr	r2, [pc, #68]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c72:	f043 0310 	orr.w	r3, r3, #16
 8003c76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <MX_GPIO_Init+0xdc>)
 8003c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	480b      	ldr	r0, [pc, #44]	@ (8003cbc <MX_GPIO_Init+0xe0>)
 8003c8e:	f003 f8b9 	bl	8006e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003c92:	2302      	movs	r3, #2
 8003c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4804      	ldr	r0, [pc, #16]	@ (8003cbc <MX_GPIO_Init+0xe0>)
 8003caa:	f002 fefb 	bl	8006aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003cae:	bf00      	nop
 8003cb0:	3728      	adds	r7, #40	@ 0x28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	58021000 	.word	0x58021000

08003cc0 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	ed2d 8b02 	vpush	{d8}
 8003cc6:	b090      	sub	sp, #64	@ 0x40
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t ctrl_tick_reference = xTaskGetTickCount();
 8003ccc:	f008 fe26 	bl	800c91c <xTaskGetTickCount>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	617b      	str	r3, [r7, #20]
	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t ctrl_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
	for (;;)
	{
		// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	69b9      	ldr	r1, [r7, #24]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f008 fc80 	bl	800c5e4 <vTaskDelayUntil>

		// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
		// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
		ctrl_time_ms_old = ctrl_time_ms;
 8003ce4:	4b83      	ldr	r3, [pc, #524]	@ (8003ef4 <ControlTask+0x234>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a83      	ldr	r2, [pc, #524]	@ (8003ef8 <ControlTask+0x238>)
 8003cea:	6013      	str	r3, [r2, #0]
		ctrl_time_ms += (ctrl_tick_period * portTICK_PERIOD_MS);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	005a      	lsls	r2, r3, #1
 8003cf0:	4b80      	ldr	r3, [pc, #512]	@ (8003ef4 <ControlTask+0x234>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	4a7f      	ldr	r2, [pc, #508]	@ (8003ef4 <ControlTask+0x234>)
 8003cf8:	6013      	str	r3, [r2, #0]

		// 5) LED1 토글: 주기가 잘 유지되는지 육안으로 확인
		HAL_GPIO_TogglePin(GPIOB, LED1_PIN);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	487f      	ldr	r0, [pc, #508]	@ (8003efc <ControlTask+0x23c>)
 8003cfe:	f003 f89a 	bl	8006e36 <HAL_GPIO_TogglePin>

		// 6) 현재 로봇이 Enable 상태인지, Disable 상태인지 판단
		if (strawberry_robot.current_robot_mode == 1) // Robot이 Enable 상태일 때
 8003d02:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <ControlTask+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f040 80eb 	bne.w	8003ee2 <ControlTask+0x222>
		{
			if (strawberry_robot.desired_robot_mode == 0) // Robot의 Disable 명령이 들어오면
 8003d0c:	4b7c      	ldr	r3, [pc, #496]	@ (8003f00 <ControlTask+0x240>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d152      	bne.n	8003dba <ControlTask+0xfa>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003d14:	2300      	movs	r3, #0
 8003d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d18:	e048      	b.n	8003dac <ControlTask+0xec>
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8003d1a:	2180      	movs	r1, #128	@ 0x80
 8003d1c:	4877      	ldr	r0, [pc, #476]	@ (8003efc <ControlTask+0x23c>)
 8003d1e:	f003 f88a 	bl	8006e36 <HAL_GPIO_TogglePin>
					// 1. 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8003d22:	4a77      	ldr	r2, [pc, #476]	@ (8003f00 <ControlTask+0x240>)
 8003d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d26:	2198      	movs	r1, #152	@ 0x98
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	338c      	adds	r3, #140	@ 0x8c
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003d36:	4873      	ldr	r0, [pc, #460]	@ (8003f04 <ControlTask+0x244>)
 8003d38:	f002 f91a 	bl	8005f70 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <ControlTask+0xb0>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8003d42:	4a6f      	ldr	r2, [pc, #444]	@ (8003f00 <ControlTask+0x240>)
 8003d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d46:	2198      	movs	r1, #152	@ 0x98
 8003d48:	fb01 f303 	mul.w	r3, r1, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3308      	adds	r3, #8
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	496a      	ldr	r1, [pc, #424]	@ (8003f00 <ControlTask+0x240>)
 8003d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d58:	2098      	movs	r0, #152	@ 0x98
 8003d5a:	fb00 f303 	mul.w	r3, r0, r3
 8003d5e:	440b      	add	r3, r1
 8003d60:	338c      	adds	r3, #140	@ 0x8c
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f7fd f968 	bl	8001040 <MIT_Mode>
					}
					// 2. 모터를 Control Disable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003d70:	4864      	ldr	r0, [pc, #400]	@ (8003f04 <ControlTask+0x244>)
 8003d72:	f002 f8fd 	bl	8005f70 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d014      	beq.n	8003da6 <ControlTask+0xe6>
						MIT_exit_control_mode(strawberry_robot.motors[i].id);
 8003d7c:	4a60      	ldr	r2, [pc, #384]	@ (8003f00 <ControlTask+0x240>)
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d80:	2198      	movs	r1, #152	@ 0x98
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	3308      	adds	r3, #8
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fd f8da 	bl	8000f48 <MIT_exit_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 0;
 8003d94:	4a5a      	ldr	r2, [pc, #360]	@ (8003f00 <ControlTask+0x240>)
 8003d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d98:	2198      	movs	r1, #152	@ 0x98
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	330c      	adds	r3, #12
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	3301      	adds	r3, #1
 8003daa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	ddb3      	ble.n	8003d1a <ControlTask+0x5a>
						//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
					}
				}
				// 3. 로봇의 상태를 Control Disable 상태로 초기화
				strawberry_robot.current_robot_mode = 0;
 8003db2:	4b53      	ldr	r3, [pc, #332]	@ (8003f00 <ControlTask+0x240>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e78e      	b.n	8003cd8 <ControlTask+0x18>
			}
			else // Robot의 Disable 명령이 들어오지 않으면
			{
				// 0. 각 모터의 엔코더 값 센싱 및 모터 상태 업데이트
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dbe:	e00e      	b.n	8003dde <ControlTask+0x11e>
				{
					motor_encoder_read(&strawberry_robot.motors[i], 70.0);
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	2298      	movs	r2, #152	@ 0x98
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	3308      	adds	r3, #8
 8003dca:	4a4d      	ldr	r2, [pc, #308]	@ (8003f00 <ControlTask+0x240>)
 8003dcc:	4413      	add	r3, r2
 8003dce:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8003f08 <ControlTask+0x248>
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd fa58 	bl	8001288 <motor_encoder_read>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	3301      	adds	r3, #1
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	dded      	ble.n	8003dc0 <ControlTask+0x100>
				}
				// 1. 로봇의 상태 업데이트
				robot_state_update(&strawberry_robot);
 8003de4:	4846      	ldr	r0, [pc, #280]	@ (8003f00 <ControlTask+0x240>)
 8003de6:	f7fe febb 	bl	8002b60 <robot_state_update>
				// 2. 로봇의 task space PID값 설정
				robot_pos_pid_gain_setting(&strawberry_robot, taskspace_p_gain, taskspace_d_gain, taskspace_i_gain, taskspace_windup_gain, taskspace_pid_cutoff);
 8003dea:	4b48      	ldr	r3, [pc, #288]	@ (8003f0c <ControlTask+0x24c>)
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	4b48      	ldr	r3, [pc, #288]	@ (8003f10 <ControlTask+0x250>)
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4b48      	ldr	r3, [pc, #288]	@ (8003f14 <ControlTask+0x254>)
 8003df4:	4a48      	ldr	r2, [pc, #288]	@ (8003f18 <ControlTask+0x258>)
 8003df6:	4949      	ldr	r1, [pc, #292]	@ (8003f1c <ControlTask+0x25c>)
 8003df8:	4841      	ldr	r0, [pc, #260]	@ (8003f00 <ControlTask+0x240>)
 8003dfa:	f7ff f8a9 	bl	8002f50 <robot_pos_pid_gain_setting>
				// 3. 로봇의 Control Input 계산
				target_posXYZ.pData[0] = homing_posXYZ.pData[0] + 0.2f * sinf(2.0f * pi * 5.0f * ((float32_t)ctrl_time_ms) / 1000.0f);
 8003dfe:	4b48      	ldr	r3, [pc, #288]	@ (8003f20 <ControlTask+0x260>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	ed93 8a00 	vldr	s16, [r3]
 8003e06:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8003f24 <ControlTask+0x264>
 8003e0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e0e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003e12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e16:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <ControlTask+0x234>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e26:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8003f28 <ControlTask+0x268>
 8003e2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e32:	f00d f8f9 	bl	8011028 <sinf>
 8003e36:	eef0 7a40 	vmov.f32	s15, s0
 8003e3a:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8003f2c <ControlTask+0x26c>
 8003e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e42:	4b3b      	ldr	r3, [pc, #236]	@ (8003f30 <ControlTask+0x270>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e4a:	edc3 7a00 	vstr	s15, [r3]
				robot_pos_pid(&strawberry_robot, target_posXYZ);
 8003e4e:	4b38      	ldr	r3, [pc, #224]	@ (8003f30 <ControlTask+0x270>)
 8003e50:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003e54:	482a      	ldr	r0, [pc, #168]	@ (8003f00 <ControlTask+0x240>)
 8003e56:	f7ff f8d1 	bl	8002ffc <robot_pos_pid>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e5e:	e03c      	b.n	8003eda <ControlTask+0x21a>
				{
					// 4. 로봇에서 계산한 Control Input을 모터 레벨로 내리기
					motor_feedforward_torque(&strawberry_robot.motors[i], strawberry_robot.tau_bi.pData[i] * strawberry_robot.axis_configuration[i]);
 8003e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e62:	2298      	movs	r2, #152	@ 0x98
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	3308      	adds	r3, #8
 8003e6a:	4a25      	ldr	r2, [pc, #148]	@ (8003f00 <ControlTask+0x240>)
 8003e6c:	1899      	adds	r1, r3, r2
 8003e6e:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <ControlTask+0x240>)
 8003e70:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 8003e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	ed93 7a00 	vldr	s14, [r3]
 8003e7e:	4a20      	ldr	r2, [pc, #128]	@ (8003f00 <ControlTask+0x240>)
 8003e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e82:	3374      	adds	r3, #116	@ 0x74
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e90:	eeb0 0a67 	vmov.f32	s0, s15
 8003e94:	4608      	mov	r0, r1
 8003e96:	f7fd fa9b 	bl	80013d0 <motor_feedforward_torque>
					// 5. CAN 통신 레지스터에 여유 슬롯이 있으면 현재 모터 제어값을 전송
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003e9a:	481a      	ldr	r0, [pc, #104]	@ (8003f04 <ControlTask+0x244>)
 8003e9c:	f002 f868 	bl	8005f70 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <ControlTask+0x214>
						MIT_Mode(strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8003ea6:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <ControlTask+0x240>)
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	2198      	movs	r1, #152	@ 0x98
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	4911      	ldr	r1, [pc, #68]	@ (8003f00 <ControlTask+0x240>)
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	2098      	movs	r0, #152	@ 0x98
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	440b      	add	r3, r1
 8003ec4:	338c      	adds	r3, #140	@ 0x8c
 8003ec6:	edd3 7a00 	vldr	s15, [r3]
 8003eca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f7fd f8b6 	bl	8001040 <MIT_Mode>
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	ddbf      	ble.n	8003e60 <ControlTask+0x1a0>
 8003ee0:	e6fa      	b.n	8003cd8 <ControlTask+0x18>
				}
			}
		}
		else // Robot이 Disable 상태일 때
		{
			if (strawberry_robot.desired_robot_mode == 1) // Robot의 Enable 명령이 들어오면
 8003ee2:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <ControlTask+0x240>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	f47f aef6 	bne.w	8003cd8 <ControlTask+0x18>
			{
				for (int i = 0; i < NUM_MOTORS; ++i)
 8003eec:	2300      	movs	r3, #0
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef0:	e1ed      	b.n	80042ce <ControlTask+0x60e>
 8003ef2:	bf00      	nop
 8003ef4:	240003c4 	.word	0x240003c4
 8003ef8:	240003c8 	.word	0x240003c8
 8003efc:	58020400 	.word	0x58020400
 8003f00:	2400040c 	.word	0x2400040c
 8003f04:	24000288 	.word	0x24000288
 8003f08:	428c0000 	.word	0x428c0000
 8003f0c:	24000048 	.word	0x24000048
 8003f10:	24000400 	.word	0x24000400
 8003f14:	24000030 	.word	0x24000030
 8003f18:	2400003c 	.word	0x2400003c
 8003f1c:	24000024 	.word	0x24000024
 8003f20:	240003f0 	.word	0x240003f0
 8003f24:	40490fd8 	.word	0x40490fd8
 8003f28:	447a0000 	.word	0x447a0000
 8003f2c:	3e4ccccd 	.word	0x3e4ccccd
 8003f30:	240003f8 	.word	0x240003f8
				{
					// 0. 로봇의 상태 전환 LED로 표시
					HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 8003f34:	2180      	movs	r1, #128	@ 0x80
 8003f36:	48bf      	ldr	r0, [pc, #764]	@ (8004234 <ControlTask+0x574>)
 8003f38:	f002 ff7d 	bl	8006e36 <HAL_GPIO_TogglePin>
					ctrl_time_ms = 0;
 8003f3c:	4bbe      	ldr	r3, [pc, #760]	@ (8004238 <ControlTask+0x578>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
					ctrl_time_ms_old = 0;
 8003f42:	4bbe      	ldr	r3, [pc, #760]	@ (800423c <ControlTask+0x57c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
					// 1. 현재 위치 원점으로 초기화
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003f48:	48bd      	ldr	r0, [pc, #756]	@ (8004240 <ControlTask+0x580>)
 8003f4a:	f002 f811 	bl	8005f70 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <ControlTask+0x2ac>
						MIT_reset_origin(strawberry_robot.motors[i].id);
 8003f54:	4abb      	ldr	r2, [pc, #748]	@ (8004244 <ControlTask+0x584>)
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	2198      	movs	r1, #152	@ 0x98
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3308      	adds	r3, #8
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc ff5a 	bl	8000e20 <MIT_reset_origin>
					}
					// 2. CAN Rx 버퍼가 남아 있으면 모두 버림
					uint8_t dump[8];
					while (xQueueReceive(strawberry_robot.motors[i].canRxQueue, dump, 0) == pdPASS) {
 8003f6c:	bf00      	nop
 8003f6e:	4ab5      	ldr	r2, [pc, #724]	@ (8004244 <ControlTask+0x584>)
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	2198      	movs	r1, #152	@ 0x98
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f107 010c 	add.w	r1, r7, #12
 8003f82:	2200      	movs	r2, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f007 ff1f 	bl	800bdc8 <xQueueReceive>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d0ee      	beq.n	8003f6e <ControlTask+0x2ae>
						/* drop */
					}
					// 3. 모터를 Control Enable 모드로 전환
					if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8003f90:	48ab      	ldr	r0, [pc, #684]	@ (8004240 <ControlTask+0x580>)
 8003f92:	f001 ffed 	bl	8005f70 <HAL_FDCAN_GetTxFifoFreeLevel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d014      	beq.n	8003fc6 <ControlTask+0x306>
						MIT_enter_control_mode(strawberry_robot.motors[i].id);
 8003f9c:	4aa9      	ldr	r2, [pc, #676]	@ (8004244 <ControlTask+0x584>)
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	2198      	movs	r1, #152	@ 0x98
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3308      	adds	r3, #8
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc ff80 	bl	8000eb4 <MIT_enter_control_mode>
						strawberry_robot.motors[i].current_motor_mode = 1;
 8003fb4:	4aa3      	ldr	r2, [pc, #652]	@ (8004244 <ControlTask+0x584>)
 8003fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb8:	2198      	movs	r1, #152	@ 0x98
 8003fba:	fb01 f303 	mul.w	r3, r1, r3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
						//printf("Motor %d: Initialized and started.\r\n", strawberry_robot.motors[i].id);
					}
					// 4. 모터 제어 입력 초기화
					strawberry_robot.motors[i].control_input = 0.0;
 8003fc6:	4a9f      	ldr	r2, [pc, #636]	@ (8004244 <ControlTask+0x584>)
 8003fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fca:	2198      	movs	r1, #152	@ 0x98
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	338c      	adds	r3, #140	@ 0x8c
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_old = 0.0;
 8003fda:	4a9a      	ldr	r2, [pc, #616]	@ (8004244 <ControlTask+0x584>)
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	2198      	movs	r1, #152	@ 0x98
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3390      	adds	r3, #144	@ 0x90
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].control_input_excess = 0.0;
 8003fee:	4a95      	ldr	r2, [pc, #596]	@ (8004244 <ControlTask+0x584>)
 8003ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	2198      	movs	r1, #152	@ 0x98
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
					// 5. 모터 엔코더 값 초기화
					strawberry_robot.motors[i].pos = 0.0;
 8004004:	4a8f      	ldr	r2, [pc, #572]	@ (8004244 <ControlTask+0x584>)
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	2198      	movs	r1, #152	@ 0x98
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	332c      	adds	r3, #44	@ 0x2c
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_old = strawberry_robot.motors[i].pos;
 8004018:	4a8a      	ldr	r2, [pc, #552]	@ (8004244 <ControlTask+0x584>)
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	2198      	movs	r1, #152	@ 0x98
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	332c      	adds	r3, #44	@ 0x2c
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4986      	ldr	r1, [pc, #536]	@ (8004244 <ControlTask+0x584>)
 800402a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402c:	2098      	movs	r0, #152	@ 0x98
 800402e:	fb00 f303 	mul.w	r3, r0, r3
 8004032:	440b      	add	r3, r1
 8004034:	3330      	adds	r3, #48	@ 0x30
 8004036:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel = 0.0;
 8004038:	4a82      	ldr	r2, [pc, #520]	@ (8004244 <ControlTask+0x584>)
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	2198      	movs	r1, #152	@ 0x98
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3334      	adds	r3, #52	@ 0x34
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_old = strawberry_robot.motors[i].vel;
 800404c:	4a7d      	ldr	r2, [pc, #500]	@ (8004244 <ControlTask+0x584>)
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	2198      	movs	r1, #152	@ 0x98
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	3334      	adds	r3, #52	@ 0x34
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4979      	ldr	r1, [pc, #484]	@ (8004244 <ControlTask+0x584>)
 800405e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004060:	2098      	movs	r0, #152	@ 0x98
 8004062:	fb00 f303 	mul.w	r3, r0, r3
 8004066:	440b      	add	r3, r1
 8004068:	3338      	adds	r3, #56	@ 0x38
 800406a:	601a      	str	r2, [r3, #0]
					// 6. 모터 Desired 값 초기 설정
					strawberry_robot.motors[i].pos_ref = target_pos[i];
 800406c:	4a76      	ldr	r2, [pc, #472]	@ (8004248 <ControlTask+0x588>)
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4973      	ldr	r1, [pc, #460]	@ (8004244 <ControlTask+0x584>)
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	2098      	movs	r0, #152	@ 0x98
 800407c:	fb00 f303 	mul.w	r3, r0, r3
 8004080:	440b      	add	r3, r1
 8004082:	3324      	adds	r3, #36	@ 0x24
 8004084:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_ref = target_vel[i];
 8004086:	4a71      	ldr	r2, [pc, #452]	@ (800424c <ControlTask+0x58c>)
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	496c      	ldr	r1, [pc, #432]	@ (8004244 <ControlTask+0x584>)
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	2098      	movs	r0, #152	@ 0x98
 8004096:	fb00 f303 	mul.w	r3, r0, r3
 800409a:	440b      	add	r3, r1
 800409c:	3328      	adds	r3, #40	@ 0x28
 800409e:	601a      	str	r2, [r3, #0]
					// 7. 모터 Position 제어 관련 오차 초기화
					strawberry_robot.motors[i].pos_error = strawberry_robot.motors[i].pos_ref - strawberry_robot.motors[i].pos;
 80040a0:	4a68      	ldr	r2, [pc, #416]	@ (8004244 <ControlTask+0x584>)
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	2198      	movs	r1, #152	@ 0x98
 80040a6:	fb01 f303 	mul.w	r3, r1, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	3324      	adds	r3, #36	@ 0x24
 80040ae:	ed93 7a00 	vldr	s14, [r3]
 80040b2:	4a64      	ldr	r2, [pc, #400]	@ (8004244 <ControlTask+0x584>)
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	2198      	movs	r1, #152	@ 0x98
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	332c      	adds	r3, #44	@ 0x2c
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c8:	4a5e      	ldr	r2, [pc, #376]	@ (8004244 <ControlTask+0x584>)
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	2198      	movs	r1, #152	@ 0x98
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	4413      	add	r3, r2
 80040d4:	3344      	adds	r3, #68	@ 0x44
 80040d6:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].pos_error_old = strawberry_robot.motors[i].pos_error;
 80040da:	4a5a      	ldr	r2, [pc, #360]	@ (8004244 <ControlTask+0x584>)
 80040dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040de:	2198      	movs	r1, #152	@ 0x98
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	3344      	adds	r3, #68	@ 0x44
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4956      	ldr	r1, [pc, #344]	@ (8004244 <ControlTask+0x584>)
 80040ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ee:	2098      	movs	r0, #152	@ 0x98
 80040f0:	fb00 f303 	mul.w	r3, r0, r3
 80040f4:	440b      	add	r3, r1
 80040f6:	3348      	adds	r3, #72	@ 0x48
 80040f8:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_P_term = 0.0;
 80040fa:	4a52      	ldr	r2, [pc, #328]	@ (8004244 <ControlTask+0x584>)
 80040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fe:	2198      	movs	r1, #152	@ 0x98
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	334c      	adds	r3, #76	@ 0x4c
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = 0.0;
 800410e:	4a4d      	ldr	r2, [pc, #308]	@ (8004244 <ControlTask+0x584>)
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	2198      	movs	r1, #152	@ 0x98
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3350      	adds	r3, #80	@ 0x50
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_I_term = strawberry_robot.motors[i].pos_I_term_old;
 8004122:	4a48      	ldr	r2, [pc, #288]	@ (8004244 <ControlTask+0x584>)
 8004124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004126:	2198      	movs	r1, #152	@ 0x98
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	3354      	adds	r3, #84	@ 0x54
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4944      	ldr	r1, [pc, #272]	@ (8004244 <ControlTask+0x584>)
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	2098      	movs	r0, #152	@ 0x98
 8004138:	fb00 f303 	mul.w	r3, r0, r3
 800413c:	440b      	add	r3, r1
 800413e:	3350      	adds	r3, #80	@ 0x50
 8004140:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = 0.0;
 8004142:	4a40      	ldr	r2, [pc, #256]	@ (8004244 <ControlTask+0x584>)
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	2198      	movs	r1, #152	@ 0x98
 8004148:	fb01 f303 	mul.w	r3, r1, r3
 800414c:	4413      	add	r3, r2
 800414e:	3358      	adds	r3, #88	@ 0x58
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].pos_D_term = strawberry_robot.motors[i].pos_D_term_old;
 8004156:	4a3b      	ldr	r2, [pc, #236]	@ (8004244 <ControlTask+0x584>)
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415a:	2198      	movs	r1, #152	@ 0x98
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	335c      	adds	r3, #92	@ 0x5c
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4937      	ldr	r1, [pc, #220]	@ (8004244 <ControlTask+0x584>)
 8004168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416a:	2098      	movs	r0, #152	@ 0x98
 800416c:	fb00 f303 	mul.w	r3, r0, r3
 8004170:	440b      	add	r3, r1
 8004172:	3358      	adds	r3, #88	@ 0x58
 8004174:	601a      	str	r2, [r3, #0]
					// 8. 모터 Velocity 제어 관련 오차 초기화
					strawberry_robot.motors[i].vel_error = strawberry_robot.motors[i].vel_ref - strawberry_robot.motors[i].vel;
 8004176:	4a33      	ldr	r2, [pc, #204]	@ (8004244 <ControlTask+0x584>)
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	2198      	movs	r1, #152	@ 0x98
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3328      	adds	r3, #40	@ 0x28
 8004184:	ed93 7a00 	vldr	s14, [r3]
 8004188:	4a2e      	ldr	r2, [pc, #184]	@ (8004244 <ControlTask+0x584>)
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	2198      	movs	r1, #152	@ 0x98
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	3334      	adds	r3, #52	@ 0x34
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419e:	4a29      	ldr	r2, [pc, #164]	@ (8004244 <ControlTask+0x584>)
 80041a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a2:	2198      	movs	r1, #152	@ 0x98
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3360      	adds	r3, #96	@ 0x60
 80041ac:	edc3 7a00 	vstr	s15, [r3]
					strawberry_robot.motors[i].vel_error_old = strawberry_robot.motors[i].vel_error;
 80041b0:	4a24      	ldr	r2, [pc, #144]	@ (8004244 <ControlTask+0x584>)
 80041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b4:	2198      	movs	r1, #152	@ 0x98
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	3360      	adds	r3, #96	@ 0x60
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4920      	ldr	r1, [pc, #128]	@ (8004244 <ControlTask+0x584>)
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	2098      	movs	r0, #152	@ 0x98
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	440b      	add	r3, r1
 80041cc:	3364      	adds	r3, #100	@ 0x64
 80041ce:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_P_term = 0.0;
 80041d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004244 <ControlTask+0x584>)
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	2198      	movs	r1, #152	@ 0x98
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	3368      	adds	r3, #104	@ 0x68
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term = 0.0;
 80041e4:	4a17      	ldr	r2, [pc, #92]	@ (8004244 <ControlTask+0x584>)
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	2198      	movs	r1, #152	@ 0x98
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	336c      	adds	r3, #108	@ 0x6c
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
					strawberry_robot.motors[i].vel_I_term_old = strawberry_robot.motors[i].vel_I_term;
 80041f8:	4a12      	ldr	r2, [pc, #72]	@ (8004244 <ControlTask+0x584>)
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	2198      	movs	r1, #152	@ 0x98
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	4413      	add	r3, r2
 8004204:	336c      	adds	r3, #108	@ 0x6c
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	490e      	ldr	r1, [pc, #56]	@ (8004244 <ControlTask+0x584>)
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	2098      	movs	r0, #152	@ 0x98
 800420e:	fb00 f303 	mul.w	r3, r0, r3
 8004212:	440b      	add	r3, r1
 8004214:	3370      	adds	r3, #112	@ 0x70
 8004216:	601a      	str	r2, [r3, #0]
					// 9. 로봇 상태 값 초기화
					strawberry_robot.qdot_bi.pData[i] = 0.0;
 8004218:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <ControlTask+0x584>)
 800421a:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
					strawberry_robot.qddot_bi.pData[i] = 0.0;
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <ControlTask+0x584>)
 800422c:	f8d3 225c 	ldr.w	r2, [r3, #604]	@ 0x25c
 8004230:	e00e      	b.n	8004250 <ControlTask+0x590>
 8004232:	bf00      	nop
 8004234:	58020400 	.word	0x58020400
 8004238:	240003c4 	.word	0x240003c4
 800423c:	240003c8 	.word	0x240003c8
 8004240:	24000288 	.word	0x24000288
 8004244:	2400040c 	.word	0x2400040c
 8004248:	240003d0 	.word	0x240003d0
 800424c:	240003dc 	.word	0x240003dc
 8004250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
					// 10. manipulator task space DOB control state 초기화
					strawberry_robot.DOB_lhs.pData[i] = 0.0;
 800425c:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <ControlTask+0x78c>)
 800425e:	f8d3 256c 	ldr.w	r2, [r3, #1388]	@ 0x56c
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_lhs.pData[i] = 0.0;
 800426e:	4b77      	ldr	r3, [pc, #476]	@ (800444c <ControlTask+0x78c>)
 8004270:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_rhs.pData[i] = 0.0;
 8004280:	4b72      	ldr	r3, [pc, #456]	@ (800444c <ControlTask+0x78c>)
 8004282:	f8d3 25bc 	ldr.w	r2, [r3, #1468]	@ 0x5bc
 8004286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
					strawberry_robot.DOB_filtered_rhs.pData[i] = 0.0;
 8004292:	4b6e      	ldr	r3, [pc, #440]	@ (800444c <ControlTask+0x78c>)
 8004294:	f8d3 25e4 	ldr.w	r2, [r3, #1508]	@ 0x5e4
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
					// 11. manipulator control input 초기화
					strawberry_robot.tau_bi.pData[i] = 0.0;
 80042a4:	4b69      	ldr	r3, [pc, #420]	@ (800444c <ControlTask+0x78c>)
 80042a6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	@ 0x60c
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
					strawberry_robot.tau_bi_excess.pData[i] = 0.0;
 80042b6:	4b65      	ldr	r3, [pc, #404]	@ (800444c <ControlTask+0x78c>)
 80042b8:	f8d3 2634 	ldr.w	r2, [r3, #1588]	@ 0x634
 80042bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_MOTORS; ++i)
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	3301      	adds	r3, #1
 80042cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	f77f ae2f 	ble.w	8003f34 <ControlTask+0x274>
				}
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042da:	e060      	b.n	800439e <ControlTask+0x6de>
				{
					// 12. manipulator taskspace state 초기화
					strawberry_robot.posXYZ_ref.pData[i] = target_posXYZ.pData[i];
 80042dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004450 <ControlTask+0x790>)
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	4b59      	ldr	r3, [pc, #356]	@ (800444c <ControlTask+0x78c>)
 80042e8:	f8d3 1284 	ldr.w	r1, [r3, #644]	@ 0x284
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	601a      	str	r2, [r3, #0]
					strawberry_robot.posXYZ.pData[i] = 0.0;
 80042f6:	4b55      	ldr	r3, [pc, #340]	@ (800444c <ControlTask+0x78c>)
 80042f8:	f8d3 22ac 	ldr.w	r2, [r3, #684]	@ 0x2ac
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
					strawberry_robot.velXYZ.pData[i] = 0.0;
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <ControlTask+0x78c>)
 800430a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

					// 13. manipulator task space pid control state 초기화
					strawberry_robot.pos_error.pData[i] = 0.0;
 800431a:	4b4c      	ldr	r3, [pc, #304]	@ (800444c <ControlTask+0x78c>)
 800431c:	f8d3 24c0 	ldr.w	r2, [r3, #1216]	@ 0x4c0
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_P_term.pData[i] = 0.0;
 800432c:	4b47      	ldr	r3, [pc, #284]	@ (800444c <ControlTask+0x78c>)
 800432e:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_I_term.pData[i] = 0.0;
 800433e:	4b43      	ldr	r3, [pc, #268]	@ (800444c <ControlTask+0x78c>)
 8004340:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	@ 0x4fc
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_D_term.pData[i] = 0.0;
 8004350:	4b3e      	ldr	r3, [pc, #248]	@ (800444c <ControlTask+0x78c>)
 8004352:	f8d3 2524 	ldr.w	r2, [r3, #1316]	@ 0x524
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output.pData[i] = 0.0;
 8004362:	4b3a      	ldr	r3, [pc, #232]	@ (800444c <ControlTask+0x78c>)
 8004364:	f8d3 254c 	ldr.w	r2, [r3, #1356]	@ 0x54c
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess.pData[i] = 0.0;
 8004374:	4b35      	ldr	r3, [pc, #212]	@ (800444c <ControlTask+0x78c>)
 8004376:	f8d3 2648 	ldr.w	r2, [r3, #1608]	@ 0x648
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
					strawberry_robot.pos_pid_output_excess_old.pData[i] = 0.0;
 8004386:	4b31      	ldr	r3, [pc, #196]	@ (800444c <ControlTask+0x78c>)
 8004388:	f8d3 265c 	ldr.w	r2, [r3, #1628]	@ 0x65c
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < NUM_TASK_DEG; ++i)
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	3301      	adds	r3, #1
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	dd9b      	ble.n	80042dc <ControlTask+0x61c>
				}
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task.pData[i] = 0.0f;
 80043a4:	2300      	movs	r3, #0
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	e00b      	b.n	80043c2 <ControlTask+0x702>
 80043aa:	4b28      	ldr	r3, [pc, #160]	@ (800444c <ControlTask+0x78c>)
 80043ac:	f8d3 242c 	ldr.w	r2, [r3, #1068]	@ 0x42c
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	3301      	adds	r3, #1
 80043c0:	623b      	str	r3, [r7, #32]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	ddf0      	ble.n	80043aa <ControlTask+0x6ea>
				strawberry_robot.M_bi_task.pData[0]=1.0f;
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <ControlTask+0x78c>)
 80043ca:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80043ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043d2:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[4]=1.0f;
 80043d4:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <ControlTask+0x78c>)
 80043d6:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80043da:	3310      	adds	r3, #16
 80043dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043e0:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task.pData[8]=1.0f;
 80043e2:	4b1a      	ldr	r3, [pc, #104]	@ (800444c <ControlTask+0x78c>)
 80043e4:	f8d3 342c 	ldr.w	r3, [r3, #1068]	@ 0x42c
 80043e8:	3320      	adds	r3, #32
 80043ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043ee:	601a      	str	r2, [r3, #0]
				for (int i=0;i<9;i++) strawberry_robot.M_bi_task_nominal.pData[i] = 0.0f;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e00b      	b.n	800440e <ControlTask+0x74e>
 80043f6:	4b15      	ldr	r3, [pc, #84]	@ (800444c <ControlTask+0x78c>)
 80043f8:	f8d3 2458 	ldr.w	r2, [r3, #1112]	@ 0x458
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	3301      	adds	r3, #1
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	2b08      	cmp	r3, #8
 8004412:	ddf0      	ble.n	80043f6 <ControlTask+0x736>
				strawberry_robot.M_bi_task_nominal.pData[0]=1.0f;
 8004414:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <ControlTask+0x78c>)
 8004416:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 800441a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800441e:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[4]=1.0f;
 8004420:	4b0a      	ldr	r3, [pc, #40]	@ (800444c <ControlTask+0x78c>)
 8004422:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004426:	3310      	adds	r3, #16
 8004428:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800442c:	601a      	str	r2, [r3, #0]
				strawberry_robot.M_bi_task_nominal.pData[8]=1.0f;
 800442e:	4b07      	ldr	r3, [pc, #28]	@ (800444c <ControlTask+0x78c>)
 8004430:	f8d3 3458 	ldr.w	r3, [r3, #1112]	@ 0x458
 8004434:	3320      	adds	r3, #32
 8004436:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800443a:	601a      	str	r2, [r3, #0]
				// 14. 로봇의 남은 과거 상태 파라미터 초기화
				robot_state_update(&strawberry_robot);
 800443c:	4803      	ldr	r0, [pc, #12]	@ (800444c <ControlTask+0x78c>)
 800443e:	f7fe fb8f 	bl	8002b60 <robot_state_update>
				// 15. 로봇의 상태를 Control Enable 상태로 초기화
				strawberry_robot.current_robot_mode = 1;
 8004442:	4b02      	ldr	r3, [pc, #8]	@ (800444c <ControlTask+0x78c>)
 8004444:	2201      	movs	r2, #1
 8004446:	601a      	str	r2, [r3, #0]
		vTaskDelayUntil(&ctrl_tick_reference, ctrl_tick_period);
 8004448:	e446      	b.n	8003cd8 <ControlTask+0x18>
 800444a:	bf00      	nop
 800444c:	2400040c 	.word	0x2400040c
 8004450:	240003f8 	.word	0x240003f8

08004454 <DataLoggingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DataLoggingTask */
void DataLoggingTask(void *argument)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af04      	add	r7, sp, #16
 800445a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DataLoggingTask */
	// 1) 현재 커널 틱 수를 읽어와 기준 시점으로 저장
	TickType_t logging_tick_reference = xTaskGetTickCount();
 800445c:	f008 fa5e 	bl	800c91c <xTaskGetTickCount>
 8004460:	4603      	mov	r3, r0
 8004462:	60bb      	str	r3, [r7, #8]

	// 2) 2 ms 를 틱 단위로 환산하여 주기 변수에 저장
	const TickType_t logging_tick_period = pdMS_TO_TICKS(2);  // 2 ms
 8004464:	2301      	movs	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
		for (;;)
		{
			// 3) 2 ms 주기로 블록 → 이 시점이 매 2 ms마다 실행됨
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8004468:	f107 0308 	add.w	r3, r7, #8
 800446c:	68f9      	ldr	r1, [r7, #12]
 800446e:	4618      	mov	r0, r3
 8004470:	f008 f8b8 	bl	800c5e4 <vTaskDelayUntil>

			// 4) 실제 경과 시간(틱)으로부터 ms 환산하여 누적
			// portTICK_PERIOD_MS 는 1 틱이 ms 단위로 몇 ms인지 정의 (보통 1)
			logging_time_ms += (logging_tick_period * portTICK_PERIOD_MS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	005a      	lsls	r2, r3, #1
 8004478:	4b93      	ldr	r3, [pc, #588]	@ (80046c8 <DataLoggingTask+0x274>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4413      	add	r3, r2
 800447e:	4a92      	ldr	r2, [pc, #584]	@ (80046c8 <DataLoggingTask+0x274>)
 8004480:	6013      	str	r3, [r2, #0]

			// 5) 현재 로봇의 상태를 Serial 통신을 통해 PC로 전송
			if (strawberry_robot.current_robot_mode == 1) // 로봇의 현재 상태가 Control Enable인 경우
 8004482:	4b92      	ldr	r3, [pc, #584]	@ (80046cc <DataLoggingTask+0x278>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b01      	cmp	r3, #1
 8004488:	f040 8132 	bne.w	80046f0 <DataLoggingTask+0x29c>
			{
				printf("[");
 800448c:	205b      	movs	r0, #91	@ 0x5b
 800448e:	f00a fd19 	bl	800eec4 <putchar>
				printf("%8.3f, %8.3f, %8d, ", (float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode);
 8004492:	4b8f      	ldr	r3, [pc, #572]	@ (80046d0 <DataLoggingTask+0x27c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800449e:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 80046d4 <DataLoggingTask+0x280>
 80044a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044a6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80044aa:	4b89      	ldr	r3, [pc, #548]	@ (80046d0 <DataLoggingTask+0x27c>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	4b8a      	ldr	r3, [pc, #552]	@ (80046d8 <DataLoggingTask+0x284>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	ee07 3a90 	vmov	s15, r3
 80044b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044bc:	eddf 6a85 	vldr	s13, [pc, #532]	@ 80046d4 <DataLoggingTask+0x280>
 80044c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044c8:	4b80      	ldr	r3, [pc, #512]	@ (80046cc <DataLoggingTask+0x278>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	9302      	str	r3, [sp, #8]
 80044ce:	ed8d 7b00 	vstr	d7, [sp]
 80044d2:	ec53 2b15 	vmov	r2, r3, d5
 80044d6:	4881      	ldr	r0, [pc, #516]	@ (80046dc <DataLoggingTask+0x288>)
 80044d8:	f00a fce2 	bl	800eea0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[0].id, strawberry_robot.motors[0].current_motor_mode, strawberry_robot.motors[0].control_input);
 80044dc:	4b7b      	ldr	r3, [pc, #492]	@ (80046cc <DataLoggingTask+0x278>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a7a      	ldr	r2, [pc, #488]	@ (80046cc <DataLoggingTask+0x278>)
 80044e2:	68d2      	ldr	r2, [r2, #12]
 80044e4:	4979      	ldr	r1, [pc, #484]	@ (80046cc <DataLoggingTask+0x278>)
 80044e6:	edd1 7a23 	vldr	s15, [r1, #140]	@ 0x8c
 80044ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044ee:	ed8d 7b00 	vstr	d7, [sp]
 80044f2:	4619      	mov	r1, r3
 80044f4:	487a      	ldr	r0, [pc, #488]	@ (80046e0 <DataLoggingTask+0x28c>)
 80044f6:	f00a fcd3 	bl	800eea0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[1].id, strawberry_robot.motors[1].current_motor_mode, strawberry_robot.motors[1].control_input);
 80044fa:	4b74      	ldr	r3, [pc, #464]	@ (80046cc <DataLoggingTask+0x278>)
 80044fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004500:	4a72      	ldr	r2, [pc, #456]	@ (80046cc <DataLoggingTask+0x278>)
 8004502:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8004506:	4971      	ldr	r1, [pc, #452]	@ (80046cc <DataLoggingTask+0x278>)
 8004508:	edd1 7a49 	vldr	s15, [r1, #292]	@ 0x124
 800450c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004510:	ed8d 7b00 	vstr	d7, [sp]
 8004514:	4619      	mov	r1, r3
 8004516:	4872      	ldr	r0, [pc, #456]	@ (80046e0 <DataLoggingTask+0x28c>)
 8004518:	f00a fcc2 	bl	800eea0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[2].id, strawberry_robot.motors[2].current_motor_mode, strawberry_robot.motors[2].control_input);
 800451c:	4b6b      	ldr	r3, [pc, #428]	@ (80046cc <DataLoggingTask+0x278>)
 800451e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8004522:	4a6a      	ldr	r2, [pc, #424]	@ (80046cc <DataLoggingTask+0x278>)
 8004524:	f8d2 213c 	ldr.w	r2, [r2, #316]	@ 0x13c
 8004528:	4968      	ldr	r1, [pc, #416]	@ (80046cc <DataLoggingTask+0x278>)
 800452a:	edd1 7a6f 	vldr	s15, [r1, #444]	@ 0x1bc
 800452e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004532:	ed8d 7b00 	vstr	d7, [sp]
 8004536:	4619      	mov	r1, r3
 8004538:	4869      	ldr	r0, [pc, #420]	@ (80046e0 <DataLoggingTask+0x28c>)
 800453a:	f00a fcb1 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.q_bi.pData[0], strawberry_robot.q_bi.pData[1], strawberry_robot.q_bi.pData[2]);
 800453e:	4b63      	ldr	r3, [pc, #396]	@ (80046cc <DataLoggingTask+0x278>)
 8004540:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004544:	edd3 7a00 	vldr	s15, [r3]
 8004548:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800454c:	4b5f      	ldr	r3, [pc, #380]	@ (80046cc <DataLoggingTask+0x278>)
 800454e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004552:	3304      	adds	r3, #4
 8004554:	edd3 7a00 	vldr	s15, [r3]
 8004558:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800455c:	4b5b      	ldr	r3, [pc, #364]	@ (80046cc <DataLoggingTask+0x278>)
 800455e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004562:	3308      	adds	r3, #8
 8004564:	edd3 6a00 	vldr	s13, [r3]
 8004568:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800456c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004570:	ed8d 7b00 	vstr	d7, [sp]
 8004574:	ec53 2b15 	vmov	r2, r3, d5
 8004578:	485a      	ldr	r0, [pc, #360]	@ (80046e4 <DataLoggingTask+0x290>)
 800457a:	f00a fc91 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.posXYZ_ref.pData[0], strawberry_robot.posXYZ_ref.pData[1], strawberry_robot.posXYZ_ref.pData[2]);
 800457e:	4b53      	ldr	r3, [pc, #332]	@ (80046cc <DataLoggingTask+0x278>)
 8004580:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004584:	edd3 7a00 	vldr	s15, [r3]
 8004588:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800458c:	4b4f      	ldr	r3, [pc, #316]	@ (80046cc <DataLoggingTask+0x278>)
 800458e:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 8004592:	3304      	adds	r3, #4
 8004594:	edd3 7a00 	vldr	s15, [r3]
 8004598:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800459c:	4b4b      	ldr	r3, [pc, #300]	@ (80046cc <DataLoggingTask+0x278>)
 800459e:	f8d3 3284 	ldr.w	r3, [r3, #644]	@ 0x284
 80045a2:	3308      	adds	r3, #8
 80045a4:	edd3 6a00 	vldr	s13, [r3]
 80045a8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80045ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80045b0:	ed8d 7b00 	vstr	d7, [sp]
 80045b4:	ec53 2b15 	vmov	r2, r3, d5
 80045b8:	484a      	ldr	r0, [pc, #296]	@ (80046e4 <DataLoggingTask+0x290>)
 80045ba:	f00a fc71 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.posXYZ.pData[0], strawberry_robot.posXYZ.pData[1], strawberry_robot.posXYZ.pData[2]);
 80045be:	4b43      	ldr	r3, [pc, #268]	@ (80046cc <DataLoggingTask+0x278>)
 80045c0:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80045c4:	edd3 7a00 	vldr	s15, [r3]
 80045c8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80045cc:	4b3f      	ldr	r3, [pc, #252]	@ (80046cc <DataLoggingTask+0x278>)
 80045ce:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80045d2:	3304      	adds	r3, #4
 80045d4:	edd3 7a00 	vldr	s15, [r3]
 80045d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045dc:	4b3b      	ldr	r3, [pc, #236]	@ (80046cc <DataLoggingTask+0x278>)
 80045de:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 80045e2:	3308      	adds	r3, #8
 80045e4:	edd3 6a00 	vldr	s13, [r3]
 80045e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80045ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80045f0:	ed8d 7b00 	vstr	d7, [sp]
 80045f4:	ec53 2b15 	vmov	r2, r3, d5
 80045f8:	483a      	ldr	r0, [pc, #232]	@ (80046e4 <DataLoggingTask+0x290>)
 80045fa:	f00a fc51 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.velXYZ.pData[0], strawberry_robot.velXYZ.pData[1], strawberry_robot.velXYZ.pData[2]);
 80045fe:	4b33      	ldr	r3, [pc, #204]	@ (80046cc <DataLoggingTask+0x278>)
 8004600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004604:	edd3 7a00 	vldr	s15, [r3]
 8004608:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800460c:	4b2f      	ldr	r3, [pc, #188]	@ (80046cc <DataLoggingTask+0x278>)
 800460e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004612:	3304      	adds	r3, #4
 8004614:	edd3 7a00 	vldr	s15, [r3]
 8004618:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800461c:	4b2b      	ldr	r3, [pc, #172]	@ (80046cc <DataLoggingTask+0x278>)
 800461e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004622:	3308      	adds	r3, #8
 8004624:	edd3 6a00 	vldr	s13, [r3]
 8004628:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800462c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004630:	ed8d 7b00 	vstr	d7, [sp]
 8004634:	ec53 2b15 	vmov	r2, r3, d5
 8004638:	482a      	ldr	r0, [pc, #168]	@ (80046e4 <DataLoggingTask+0x290>)
 800463a:	f00a fc31 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", strawberry_robot.pos_I_term.pData[0], strawberry_robot.pos_I_term.pData[1], strawberry_robot.pos_I_term.pData[2]);
 800463e:	4b23      	ldr	r3, [pc, #140]	@ (80046cc <DataLoggingTask+0x278>)
 8004640:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004644:	edd3 7a00 	vldr	s15, [r3]
 8004648:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800464c:	4b1f      	ldr	r3, [pc, #124]	@ (80046cc <DataLoggingTask+0x278>)
 800464e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004652:	3304      	adds	r3, #4
 8004654:	edd3 7a00 	vldr	s15, [r3]
 8004658:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800465c:	4b1b      	ldr	r3, [pc, #108]	@ (80046cc <DataLoggingTask+0x278>)
 800465e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004662:	3308      	adds	r3, #8
 8004664:	edd3 6a00 	vldr	s13, [r3]
 8004668:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800466c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004670:	ed8d 7b00 	vstr	d7, [sp]
 8004674:	ec53 2b15 	vmov	r2, r3, d5
 8004678:	481a      	ldr	r0, [pc, #104]	@ (80046e4 <DataLoggingTask+0x290>)
 800467a:	f00a fc11 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f", strawberry_robot.pos_pid_output.pData[0], strawberry_robot.pos_pid_output.pData[1], strawberry_robot.pos_pid_output.pData[2]);
 800467e:	4b13      	ldr	r3, [pc, #76]	@ (80046cc <DataLoggingTask+0x278>)
 8004680:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800468c:	4b0f      	ldr	r3, [pc, #60]	@ (80046cc <DataLoggingTask+0x278>)
 800468e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8004692:	3304      	adds	r3, #4
 8004694:	edd3 7a00 	vldr	s15, [r3]
 8004698:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800469c:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <DataLoggingTask+0x278>)
 800469e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80046a2:	3308      	adds	r3, #8
 80046a4:	edd3 6a00 	vldr	s13, [r3]
 80046a8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80046ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80046b0:	ed8d 7b00 	vstr	d7, [sp]
 80046b4:	ec53 2b15 	vmov	r2, r3, d5
 80046b8:	480b      	ldr	r0, [pc, #44]	@ (80046e8 <DataLoggingTask+0x294>)
 80046ba:	f00a fbf1 	bl	800eea0 <iprintf>
				printf("]\r\n");
 80046be:	480b      	ldr	r0, [pc, #44]	@ (80046ec <DataLoggingTask+0x298>)
 80046c0:	f00a fc5e 	bl	800ef80 <puts>
 80046c4:	e6d0      	b.n	8004468 <DataLoggingTask+0x14>
 80046c6:	bf00      	nop
 80046c8:	240003cc 	.word	0x240003cc
 80046cc:	2400040c 	.word	0x2400040c
 80046d0:	240003c4 	.word	0x240003c4
 80046d4:	447a0000 	.word	0x447a0000
 80046d8:	240003c8 	.word	0x240003c8
 80046dc:	0801135c 	.word	0x0801135c
 80046e0:	08011370 	.word	0x08011370
 80046e4:	08011384 	.word	0x08011384
 80046e8:	0801139c 	.word	0x0801139c
 80046ec:	080113b0 	.word	0x080113b0
			}
			else // 로봇의 현재 상태가 Control Disable인 경우
			{
				printf("[");
 80046f0:	205b      	movs	r0, #91	@ 0x5b
 80046f2:	f00a fbe7 	bl	800eec4 <putchar>
				printf("%8.3f, %8.3f, %8d, ", (float32_t) ctrl_time_ms/1000, (float32_t) (ctrl_time_ms - ctrl_time_ms_old)/1000, strawberry_robot.current_robot_mode);
 80046f6:	4b64      	ldr	r3, [pc, #400]	@ (8004888 <DataLoggingTask+0x434>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004702:	eddf 6a62 	vldr	s13, [pc, #392]	@ 800488c <DataLoggingTask+0x438>
 8004706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800470a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800470e:	4b5e      	ldr	r3, [pc, #376]	@ (8004888 <DataLoggingTask+0x434>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b5f      	ldr	r3, [pc, #380]	@ (8004890 <DataLoggingTask+0x43c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	ee07 3a90 	vmov	s15, r3
 800471c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004720:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 800488c <DataLoggingTask+0x438>
 8004724:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004728:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800472c:	4b59      	ldr	r3, [pc, #356]	@ (8004894 <DataLoggingTask+0x440>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	9302      	str	r3, [sp, #8]
 8004732:	ed8d 7b00 	vstr	d7, [sp]
 8004736:	ec53 2b15 	vmov	r2, r3, d5
 800473a:	4857      	ldr	r0, [pc, #348]	@ (8004898 <DataLoggingTask+0x444>)
 800473c:	f00a fbb0 	bl	800eea0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[0].id, strawberry_robot.motors[0].current_motor_mode, 0.0f);
 8004740:	4b54      	ldr	r3, [pc, #336]	@ (8004894 <DataLoggingTask+0x440>)
 8004742:	6899      	ldr	r1, [r3, #8]
 8004744:	4b53      	ldr	r3, [pc, #332]	@ (8004894 <DataLoggingTask+0x440>)
 8004746:	68d8      	ldr	r0, [r3, #12]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	e9cd 2300 	strd	r2, r3, [sp]
 8004754:	4602      	mov	r2, r0
 8004756:	4851      	ldr	r0, [pc, #324]	@ (800489c <DataLoggingTask+0x448>)
 8004758:	f00a fba2 	bl	800eea0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[1].id, strawberry_robot.motors[1].current_motor_mode, 0.0f);
 800475c:	4b4d      	ldr	r3, [pc, #308]	@ (8004894 <DataLoggingTask+0x440>)
 800475e:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8004762:	4b4c      	ldr	r3, [pc, #304]	@ (8004894 <DataLoggingTask+0x440>)
 8004764:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9cd 2300 	strd	r2, r3, [sp]
 8004774:	4602      	mov	r2, r0
 8004776:	4849      	ldr	r0, [pc, #292]	@ (800489c <DataLoggingTask+0x448>)
 8004778:	f00a fb92 	bl	800eea0 <iprintf>
				printf("%8d, %8d, %8.3f, ", strawberry_robot.motors[2].id, strawberry_robot.motors[2].current_motor_mode, 0.0f);
 800477c:	4b45      	ldr	r3, [pc, #276]	@ (8004894 <DataLoggingTask+0x440>)
 800477e:	f8d3 1138 	ldr.w	r1, [r3, #312]	@ 0x138
 8004782:	4b44      	ldr	r3, [pc, #272]	@ (8004894 <DataLoggingTask+0x440>)
 8004784:	f8d3 013c 	ldr.w	r0, [r3, #316]	@ 0x13c
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9cd 2300 	strd	r2, r3, [sp]
 8004794:	4602      	mov	r2, r0
 8004796:	4841      	ldr	r0, [pc, #260]	@ (800489c <DataLoggingTask+0x448>)
 8004798:	f00a fb82 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	e9cd 2300 	strd	r2, r3, [sp]
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	4838      	ldr	r0, [pc, #224]	@ (80048a0 <DataLoggingTask+0x44c>)
 80047be:	f00a fb6f 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9cd 2300 	strd	r2, r3, [sp]
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	482f      	ldr	r0, [pc, #188]	@ (80048a0 <DataLoggingTask+0x44c>)
 80047e4:	f00a fb5c 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	e9cd 2300 	strd	r2, r3, [sp]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	4825      	ldr	r0, [pc, #148]	@ (80048a0 <DataLoggingTask+0x44c>)
 800480a:	f00a fb49 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	e9cd 2300 	strd	r2, r3, [sp]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	481c      	ldr	r0, [pc, #112]	@ (80048a0 <DataLoggingTask+0x44c>)
 8004830:	f00a fb36 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f, ", 0.0f, 0.0f, 0.0f);
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9cd 2300 	strd	r2, r3, [sp]
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	4812      	ldr	r0, [pc, #72]	@ (80048a0 <DataLoggingTask+0x44c>)
 8004856:	f00a fb23 	bl	800eea0 <iprintf>
				printf("%8.3f, %8.3f, %8.3f", 0.0f, 0.0f, 0.0f);
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	e9cd 2300 	strd	r2, r3, [sp]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	480a      	ldr	r0, [pc, #40]	@ (80048a4 <DataLoggingTask+0x450>)
 800487c:	f00a fb10 	bl	800eea0 <iprintf>
				printf("]\r\n");
 8004880:	4809      	ldr	r0, [pc, #36]	@ (80048a8 <DataLoggingTask+0x454>)
 8004882:	f00a fb7d 	bl	800ef80 <puts>
			vTaskDelayUntil(&logging_tick_reference, logging_tick_period);
 8004886:	e5ef      	b.n	8004468 <DataLoggingTask+0x14>
 8004888:	240003c4 	.word	0x240003c4
 800488c:	447a0000 	.word	0x447a0000
 8004890:	240003c8 	.word	0x240003c8
 8004894:	2400040c 	.word	0x2400040c
 8004898:	0801135c 	.word	0x0801135c
 800489c:	08011370 	.word	0x08011370
 80048a0:	08011384 	.word	0x08011384
 80048a4:	0801139c 	.word	0x0801139c
 80048a8:	080113b0 	.word	0x080113b0

080048ac <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80048b2:	463b      	mov	r3, r7
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80048be:	f000 feab 	bl	8005618 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80048ce:	231f      	movs	r3, #31
 80048d0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80048d2:	2387      	movs	r3, #135	@ 0x87
 80048d4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80048da:	2300      	movs	r3, #0
 80048dc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80048de:	2301      	movs	r3, #1
 80048e0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80048e2:	2301      	movs	r3, #1
 80048e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80048ee:	463b      	mov	r3, r7
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fec9 	bl	8005688 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80048f6:	2004      	movs	r0, #4
 80048f8:	f000 fea6 	bl	8005648 <HAL_MPU_Enable>

}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a04      	ldr	r2, [pc, #16]	@ (8004924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8004916:	f000 fd4f 	bl	80053b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40001400 	.word	0x40001400

08004928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (strawberry_robot.current_robot_mode == 1)
 800492e:	4b52      	ldr	r3, [pc, #328]	@ (8004a78 <Error_Handler+0x150>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d148      	bne.n	80049c8 <Error_Handler+0xa0>
  	{
  		for (int i = 0; i < NUM_MOTORS; ++i)
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	e03f      	b.n	80049bc <Error_Handler+0x94>
  		{
  			HAL_GPIO_TogglePin(GPIOB, LED2_PIN);
 800493c:	2180      	movs	r1, #128	@ 0x80
 800493e:	484f      	ldr	r0, [pc, #316]	@ (8004a7c <Error_Handler+0x154>)
 8004940:	f002 fa79 	bl	8006e36 <HAL_GPIO_TogglePin>
  			// 제어 입력 초기화
  			strawberry_robot.motors[i].control_input = 0.0;
 8004944:	4a4c      	ldr	r2, [pc, #304]	@ (8004a78 <Error_Handler+0x150>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2198      	movs	r1, #152	@ 0x98
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	4413      	add	r3, r2
 8004950:	338c      	adds	r3, #140	@ 0x8c
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004958:	4849      	ldr	r0, [pc, #292]	@ (8004a80 <Error_Handler+0x158>)
 800495a:	f001 fb09 	bl	8005f70 <HAL_FDCAN_GetTxFifoFreeLevel>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d016      	beq.n	8004992 <Error_Handler+0x6a>
				MIT_Mode (strawberry_robot.motors[i].id, strawberry_robot.motors[i].control_input);
 8004964:	4a44      	ldr	r2, [pc, #272]	@ (8004a78 <Error_Handler+0x150>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2198      	movs	r1, #152	@ 0x98
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	3308      	adds	r3, #8
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	b29a      	uxth	r2, r3
 8004976:	4940      	ldr	r1, [pc, #256]	@ (8004a78 <Error_Handler+0x150>)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2098      	movs	r0, #152	@ 0x98
 800497c:	fb00 f303 	mul.w	r3, r0, r3
 8004980:	440b      	add	r3, r1
 8004982:	338c      	adds	r3, #140	@ 0x8c
 8004984:	edd3 7a00 	vldr	s15, [r3]
 8004988:	eeb0 0a67 	vmov.f32	s0, s15
 800498c:	4610      	mov	r0, r2
 800498e:	f7fc fb57 	bl	8001040 <MIT_Mode>
			}
			if (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) > 0) {
 8004992:	483b      	ldr	r0, [pc, #236]	@ (8004a80 <Error_Handler+0x158>)
 8004994:	f001 faec 	bl	8005f70 <HAL_FDCAN_GetTxFifoFreeLevel>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <Error_Handler+0x8e>
				MIT_exit_control_mode(strawberry_robot.motors[i].id);
 800499e:	4a36      	ldr	r2, [pc, #216]	@ (8004a78 <Error_Handler+0x150>)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2198      	movs	r1, #152	@ 0x98
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	3308      	adds	r3, #8
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fc fac9 	bl	8000f48 <MIT_exit_control_mode>
  		for (int i = 0; i < NUM_MOTORS; ++i)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3301      	adds	r3, #1
 80049ba:	607b      	str	r3, [r7, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	ddbc      	ble.n	800493c <Error_Handler+0x14>
			}
			//printf("Motor %d: Stopped and exited control mode.\r\n", strawberry_robot.motors[i].id);
  		}
		strawberry_robot.current_robot_mode = 0;
 80049c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a78 <Error_Handler+0x150>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
  	}
	switch(sta) {
 80049c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004a84 <Error_Handler+0x15c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d82f      	bhi.n	8004a32 <Error_Handler+0x10a>
 80049d2:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <Error_Handler+0xb0>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049ed 	.word	0x080049ed
 80049dc:	080049fb 	.word	0x080049fb
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a17 	.word	0x08004a17
 80049e8:	08004a25 	.word	0x08004a25
	  case 1: printf("Error Code: %d, This is CAN Tx Error.\r\n", sta); break;
 80049ec:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <Error_Handler+0x15c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	4825      	ldr	r0, [pc, #148]	@ (8004a88 <Error_Handler+0x160>)
 80049f4:	f00a fa54 	bl	800eea0 <iprintf>
 80049f8:	e01e      	b.n	8004a38 <Error_Handler+0x110>
	  case 2: printf("Error Code: %d, This is CAN Rx Error.\r\n", sta); break;
 80049fa:	4b22      	ldr	r3, [pc, #136]	@ (8004a84 <Error_Handler+0x15c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4619      	mov	r1, r3
 8004a00:	4822      	ldr	r0, [pc, #136]	@ (8004a8c <Error_Handler+0x164>)
 8004a02:	f00a fa4d 	bl	800eea0 <iprintf>
 8004a06:	e017      	b.n	8004a38 <Error_Handler+0x110>
	  case 3: printf("Error Code: %d, This is MCU Initialization Error.\r\n", sta); break;
 8004a08:	4b1e      	ldr	r3, [pc, #120]	@ (8004a84 <Error_Handler+0x15c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4820      	ldr	r0, [pc, #128]	@ (8004a90 <Error_Handler+0x168>)
 8004a10:	f00a fa46 	bl	800eea0 <iprintf>
 8004a14:	e010      	b.n	8004a38 <Error_Handler+0x110>
	  case 4: printf("Error Code: %d, This is Matrix Calculation Error.\r\n", sta); break;
 8004a16:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <Error_Handler+0x15c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	481d      	ldr	r0, [pc, #116]	@ (8004a94 <Error_Handler+0x16c>)
 8004a1e:	f00a fa3f 	bl	800eea0 <iprintf>
 8004a22:	e009      	b.n	8004a38 <Error_Handler+0x110>
	  case 5: printf("Error Code: %d, This is Range of Motion Error.\r\n", sta); break;
 8004a24:	4b17      	ldr	r3, [pc, #92]	@ (8004a84 <Error_Handler+0x15c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	481b      	ldr	r0, [pc, #108]	@ (8004a98 <Error_Handler+0x170>)
 8004a2c:	f00a fa38 	bl	800eea0 <iprintf>
 8004a30:	e002      	b.n	8004a38 <Error_Handler+0x110>
	  default: printf("Error Code: Unknown");
 8004a32:	481a      	ldr	r0, [pc, #104]	@ (8004a9c <Error_Handler+0x174>)
 8004a34:	f00a fa34 	bl	800eea0 <iprintf>
	}
  while (1)
  {
	  for (int i = 0; i < sta; i++) {
 8004a38:	2300      	movs	r3, #0
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	e012      	b.n	8004a64 <Error_Handler+0x13c>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 반전
 8004a3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a42:	480e      	ldr	r0, [pc, #56]	@ (8004a7c <Error_Handler+0x154>)
 8004a44:	f002 f9f7 	bl	8006e36 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);                       // 200ms 간격 (필요시 조절)
 8004a48:	20c8      	movs	r0, #200	@ 0xc8
 8004a4a:	f000 fcd5 	bl	80053f8 <HAL_Delay>
	      HAL_GPIO_TogglePin(GPIOB, LED3_PIN);  // LED 원래 상태 복귀
 8004a4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a52:	480a      	ldr	r0, [pc, #40]	@ (8004a7c <Error_Handler+0x154>)
 8004a54:	f002 f9ef 	bl	8006e36 <HAL_GPIO_TogglePin>
	      HAL_Delay(200);
 8004a58:	20c8      	movs	r0, #200	@ 0xc8
 8004a5a:	f000 fccd 	bl	80053f8 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4b07      	ldr	r3, [pc, #28]	@ (8004a84 <Error_Handler+0x15c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	dbe7      	blt.n	8004a3e <Error_Handler+0x116>
	  }
	  HAL_Delay(1000);
 8004a6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004a72:	f000 fcc1 	bl	80053f8 <HAL_Delay>
	  for (int i = 0; i < sta; i++) {
 8004a76:	e7df      	b.n	8004a38 <Error_Handler+0x110>
 8004a78:	2400040c 	.word	0x2400040c
 8004a7c:	58020400 	.word	0x58020400
 8004a80:	24000288 	.word	0x24000288
 8004a84:	24000a78 	.word	0x24000a78
 8004a88:	080113b4 	.word	0x080113b4
 8004a8c:	080113dc 	.word	0x080113dc
 8004a90:	08011404 	.word	0x08011404
 8004a94:	08011438 	.word	0x08011438
 8004a98:	0801146c 	.word	0x0801146c
 8004a9c:	080114a0 	.word	0x080114a0

08004aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad8 <HAL_MspInit+0x38>)
 8004aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004aac:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad8 <HAL_MspInit+0x38>)
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004ab6:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <HAL_MspInit+0x38>)
 8004ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	607b      	str	r3, [r7, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	210f      	movs	r1, #15
 8004ac8:	f06f 0001 	mvn.w	r0, #1
 8004acc:	f000 fd7c 	bl	80055c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	58024400 	.word	0x58024400

08004adc <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b0ba      	sub	sp, #232	@ 0xe8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	609a      	str	r2, [r3, #8]
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004af4:	f107 0310 	add.w	r3, r7, #16
 8004af8:	22c0      	movs	r2, #192	@ 0xc0
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f00a fb1f 	bl	800f140 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a37      	ldr	r2, [pc, #220]	@ (8004be4 <HAL_FDCAN_MspInit+0x108>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d166      	bne.n	8004bda <HAL_FDCAN_MspInit+0xfe>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004b0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 100;
 8004b1c:	2364      	movs	r3, #100	@ 0x64
 8004b1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8004b20:	2302      	movs	r3, #2
 8004b22:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 20;
 8004b24:	2314      	movs	r3, #20
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004b28:	2302      	movs	r3, #2
 8004b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004b2c:	23c0      	movs	r3, #192	@ 0xc0
 8004b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004b34:	2300      	movs	r3, #0
 8004b36:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8004b38:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b40:	f107 0310 	add.w	r3, r7, #16
 8004b44:	4618      	mov	r0, r3
 8004b46:	f003 f9f3 	bl	8007f30 <HAL_RCCEx_PeriphCLKConfig>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 8004b50:	f7ff feea 	bl	8004928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004b54:	4b24      	ldr	r3, [pc, #144]	@ (8004be8 <HAL_FDCAN_MspInit+0x10c>)
 8004b56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004b5a:	4a23      	ldr	r2, [pc, #140]	@ (8004be8 <HAL_FDCAN_MspInit+0x10c>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b60:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8004b64:	4b20      	ldr	r3, [pc, #128]	@ (8004be8 <HAL_FDCAN_MspInit+0x10c>)
 8004b66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b72:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <HAL_FDCAN_MspInit+0x10c>)
 8004b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b78:	4a1b      	ldr	r2, [pc, #108]	@ (8004be8 <HAL_FDCAN_MspInit+0x10c>)
 8004b7a:	f043 0308 	orr.w	r3, r3, #8
 8004b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b82:	4b19      	ldr	r3, [pc, #100]	@ (8004be8 <HAL_FDCAN_MspInit+0x10c>)
 8004b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b90:	2303      	movs	r3, #3
 8004b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b96:	2302      	movs	r3, #2
 8004b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004ba8:	2309      	movs	r3, #9
 8004baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	480d      	ldr	r0, [pc, #52]	@ (8004bec <HAL_FDCAN_MspInit+0x110>)
 8004bb6:	f001 ff75 	bl	8006aa4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2105      	movs	r1, #5
 8004bbe:	2013      	movs	r0, #19
 8004bc0:	f000 fd02 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004bc4:	2013      	movs	r0, #19
 8004bc6:	f000 fd19 	bl	80055fc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2105      	movs	r1, #5
 8004bce:	2015      	movs	r0, #21
 8004bd0:	f000 fcfa 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004bd4:	2015      	movs	r0, #21
 8004bd6:	f000 fd11 	bl	80055fc <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004bda:	bf00      	nop
 8004bdc:	37e8      	adds	r7, #232	@ 0xe8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	4000a000 	.word	0x4000a000
 8004be8:	58024400 	.word	0x58024400
 8004bec:	58020c00 	.word	0x58020c00

08004bf0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b0ba      	sub	sp, #232	@ 0xe8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c08:	f107 0310 	add.w	r3, r7, #16
 8004c0c:	22c0      	movs	r2, #192	@ 0xc0
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f00a fa95 	bl	800f140 <memset>
  if(huart->Instance==USART3)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a27      	ldr	r2, [pc, #156]	@ (8004cb8 <HAL_UART_MspInit+0xc8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d146      	bne.n	8004cae <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004c20:	f04f 0202 	mov.w	r2, #2
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c32:	f107 0310 	add.w	r3, r7, #16
 8004c36:	4618      	mov	r0, r3
 8004c38:	f003 f97a 	bl	8007f30 <HAL_RCCEx_PeriphCLKConfig>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004c42:	f7ff fe71 	bl	8004928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c46:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <HAL_UART_MspInit+0xcc>)
 8004c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <HAL_UART_MspInit+0xcc>)
 8004c4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004c56:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <HAL_UART_MspInit+0xcc>)
 8004c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c64:	4b15      	ldr	r3, [pc, #84]	@ (8004cbc <HAL_UART_MspInit+0xcc>)
 8004c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c6a:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <HAL_UART_MspInit+0xcc>)
 8004c6c:	f043 0308 	orr.w	r3, r3, #8
 8004c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c74:	4b11      	ldr	r3, [pc, #68]	@ (8004cbc <HAL_UART_MspInit+0xcc>)
 8004c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004c82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c9c:	2307      	movs	r3, #7
 8004c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ca2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4805      	ldr	r0, [pc, #20]	@ (8004cc0 <HAL_UART_MspInit+0xd0>)
 8004caa:	f001 fefb 	bl	8006aa4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8004cae:	bf00      	nop
 8004cb0:	37e8      	adds	r7, #232	@ 0xe8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40004800 	.word	0x40004800
 8004cbc:	58024400 	.word	0x58024400
 8004cc0:	58020c00 	.word	0x58020c00

08004cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b090      	sub	sp, #64	@ 0x40
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d827      	bhi.n	8004d22 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	2037      	movs	r0, #55	@ 0x37
 8004cd8:	f000 fc76 	bl	80055c8 <HAL_NVIC_SetPriority>

     /* Enable the TIM7 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004cdc:	2037      	movs	r0, #55	@ 0x37
 8004cde:	f000 fc8d 	bl	80055fc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8004ce2:	4a29      	ldr	r2, [pc, #164]	@ (8004d88 <HAL_InitTick+0xc4>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004ce8:	4b28      	ldr	r3, [pc, #160]	@ (8004d8c <HAL_InitTick+0xc8>)
 8004cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cee:	4a27      	ldr	r2, [pc, #156]	@ (8004d8c <HAL_InitTick+0xc8>)
 8004cf0:	f043 0320 	orr.w	r3, r3, #32
 8004cf4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004cf8:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <HAL_InitTick+0xc8>)
 8004cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d06:	f107 0210 	add.w	r2, r7, #16
 8004d0a:	f107 0314 	add.w	r3, r7, #20
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 f8cb 	bl	8007eac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <HAL_InitTick+0x6a>
 8004d20:	e001      	b.n	8004d26 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e02b      	b.n	8004d7e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004d26:	f003 f895 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8004d2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8004d2c:	e004      	b.n	8004d38 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004d2e:	f003 f891 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8004d32:	4603      	mov	r3, r0
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d3a:	4a15      	ldr	r2, [pc, #84]	@ (8004d90 <HAL_InitTick+0xcc>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	0c9b      	lsrs	r3, r3, #18
 8004d42:	3b01      	subs	r3, #1
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004d46:	4b13      	ldr	r3, [pc, #76]	@ (8004d94 <HAL_InitTick+0xd0>)
 8004d48:	4a13      	ldr	r2, [pc, #76]	@ (8004d98 <HAL_InitTick+0xd4>)
 8004d4a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004d4c:	4b11      	ldr	r3, [pc, #68]	@ (8004d94 <HAL_InitTick+0xd0>)
 8004d4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d52:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8004d54:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <HAL_InitTick+0xd0>)
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d58:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d94 <HAL_InitTick+0xd0>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d60:	4b0c      	ldr	r3, [pc, #48]	@ (8004d94 <HAL_InitTick+0xd0>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8004d66:	480b      	ldr	r0, [pc, #44]	@ (8004d94 <HAL_InitTick+0xd0>)
 8004d68:	f004 ff0e 	bl	8009b88 <HAL_TIM_Base_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d104      	bne.n	8004d7c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8004d72:	4808      	ldr	r0, [pc, #32]	@ (8004d94 <HAL_InitTick+0xd0>)
 8004d74:	f004 ff6a 	bl	8009c4c <HAL_TIM_Base_Start_IT>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	e000      	b.n	8004d7e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3740      	adds	r7, #64	@ 0x40
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	24000074 	.word	0x24000074
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	431bde83 	.word	0x431bde83
 8004d94:	24000a7c 	.word	0x24000a7c
 8004d98:	40001400 	.word	0x40001400

08004d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004da0:	bf00      	nop
 8004da2:	e7fd      	b.n	8004da0 <NMI_Handler+0x4>

08004da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <HardFault_Handler+0x4>

08004dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <MemManage_Handler+0x4>

08004db4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <BusFault_Handler+0x4>

08004dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <UsageFault_Handler+0x4>

08004dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004dd8:	4802      	ldr	r0, [pc, #8]	@ (8004de4 <FDCAN1_IT0_IRQHandler+0x10>)
 8004dda:	f001 f955 	bl	8006088 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	24000288 	.word	0x24000288

08004de8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004dec:	4802      	ldr	r0, [pc, #8]	@ (8004df8 <FDCAN1_IT1_IRQHandler+0x10>)
 8004dee:	f001 f94b 	bl	8006088 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	24000288 	.word	0x24000288

08004dfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8004e00:	2000      	movs	r0, #0
 8004e02:	f000 fa83 	bl	800530c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004e10:	4802      	ldr	r0, [pc, #8]	@ (8004e1c <TIM7_IRQHandler+0x10>)
 8004e12:	f004 ff93 	bl	8009d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	24000a7c 	.word	0x24000a7c

08004e20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return 1;
 8004e24:	2301      	movs	r3, #1
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <_kill>:

int _kill(int pid, int sig)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e3a:	f00a fa31 	bl	800f2a0 <__errno>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2216      	movs	r2, #22
 8004e42:	601a      	str	r2, [r3, #0]
  return -1;
 8004e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <_exit>:

void _exit (int status)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e58:	f04f 31ff 	mov.w	r1, #4294967295
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7ff ffe7 	bl	8004e30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e62:	bf00      	nop
 8004e64:	e7fd      	b.n	8004e62 <_exit+0x12>

08004e66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e00a      	b.n	8004e8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e78:	f3af 8000 	nop.w
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	60ba      	str	r2, [r7, #8]
 8004e84:	b2ca      	uxtb	r2, r1
 8004e86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	dbf0      	blt.n	8004e78 <_read+0x12>
  }

  return len;
 8004e96:	687b      	ldr	r3, [r7, #4]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3718      	adds	r7, #24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004ec8:	605a      	str	r2, [r3, #4]
  return 0;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <_isatty>:

int _isatty(int file)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004ee0:	2301      	movs	r3, #1
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f10:	4a14      	ldr	r2, [pc, #80]	@ (8004f64 <_sbrk+0x5c>)
 8004f12:	4b15      	ldr	r3, [pc, #84]	@ (8004f68 <_sbrk+0x60>)
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f1c:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <_sbrk+0x64>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f24:	4b11      	ldr	r3, [pc, #68]	@ (8004f6c <_sbrk+0x64>)
 8004f26:	4a12      	ldr	r2, [pc, #72]	@ (8004f70 <_sbrk+0x68>)
 8004f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f2a:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <_sbrk+0x64>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4413      	add	r3, r2
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d207      	bcs.n	8004f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f38:	f00a f9b2 	bl	800f2a0 <__errno>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	220c      	movs	r2, #12
 8004f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f42:	f04f 33ff 	mov.w	r3, #4294967295
 8004f46:	e009      	b.n	8004f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f48:	4b08      	ldr	r3, [pc, #32]	@ (8004f6c <_sbrk+0x64>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f4e:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <_sbrk+0x64>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	4a05      	ldr	r2, [pc, #20]	@ (8004f6c <_sbrk+0x64>)
 8004f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	24080000 	.word	0x24080000
 8004f68:	00000400 	.word	0x00000400
 8004f6c:	24000ac8 	.word	0x24000ac8
 8004f70:	24005610 	.word	0x24005610

08004f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f78:	4b43      	ldr	r3, [pc, #268]	@ (8005088 <SystemInit+0x114>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7e:	4a42      	ldr	r2, [pc, #264]	@ (8005088 <SystemInit+0x114>)
 8004f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004f88:	4b40      	ldr	r3, [pc, #256]	@ (800508c <SystemInit+0x118>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	2b06      	cmp	r3, #6
 8004f92:	d807      	bhi.n	8004fa4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004f94:	4b3d      	ldr	r3, [pc, #244]	@ (800508c <SystemInit+0x118>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f023 030f 	bic.w	r3, r3, #15
 8004f9c:	4a3b      	ldr	r2, [pc, #236]	@ (800508c <SystemInit+0x118>)
 8004f9e:	f043 0307 	orr.w	r3, r3, #7
 8004fa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8005090 <SystemInit+0x11c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a39      	ldr	r2, [pc, #228]	@ (8005090 <SystemInit+0x11c>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004fb0:	4b37      	ldr	r3, [pc, #220]	@ (8005090 <SystemInit+0x11c>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004fb6:	4b36      	ldr	r3, [pc, #216]	@ (8005090 <SystemInit+0x11c>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4935      	ldr	r1, [pc, #212]	@ (8005090 <SystemInit+0x11c>)
 8004fbc:	4b35      	ldr	r3, [pc, #212]	@ (8005094 <SystemInit+0x120>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004fc2:	4b32      	ldr	r3, [pc, #200]	@ (800508c <SystemInit+0x118>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004fce:	4b2f      	ldr	r3, [pc, #188]	@ (800508c <SystemInit+0x118>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 030f 	bic.w	r3, r3, #15
 8004fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800508c <SystemInit+0x118>)
 8004fd8:	f043 0307 	orr.w	r3, r3, #7
 8004fdc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004fde:	4b2c      	ldr	r3, [pc, #176]	@ (8005090 <SystemInit+0x11c>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8005090 <SystemInit+0x11c>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004fea:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <SystemInit+0x11c>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004ff0:	4b27      	ldr	r3, [pc, #156]	@ (8005090 <SystemInit+0x11c>)
 8004ff2:	4a29      	ldr	r2, [pc, #164]	@ (8005098 <SystemInit+0x124>)
 8004ff4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004ff6:	4b26      	ldr	r3, [pc, #152]	@ (8005090 <SystemInit+0x11c>)
 8004ff8:	4a28      	ldr	r2, [pc, #160]	@ (800509c <SystemInit+0x128>)
 8004ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004ffc:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <SystemInit+0x11c>)
 8004ffe:	4a28      	ldr	r2, [pc, #160]	@ (80050a0 <SystemInit+0x12c>)
 8005000:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005002:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <SystemInit+0x11c>)
 8005004:	2200      	movs	r2, #0
 8005006:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005008:	4b21      	ldr	r3, [pc, #132]	@ (8005090 <SystemInit+0x11c>)
 800500a:	4a25      	ldr	r2, [pc, #148]	@ (80050a0 <SystemInit+0x12c>)
 800500c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800500e:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <SystemInit+0x11c>)
 8005010:	2200      	movs	r2, #0
 8005012:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005014:	4b1e      	ldr	r3, [pc, #120]	@ (8005090 <SystemInit+0x11c>)
 8005016:	4a22      	ldr	r2, [pc, #136]	@ (80050a0 <SystemInit+0x12c>)
 8005018:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800501a:	4b1d      	ldr	r3, [pc, #116]	@ (8005090 <SystemInit+0x11c>)
 800501c:	2200      	movs	r2, #0
 800501e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005020:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <SystemInit+0x11c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1a      	ldr	r2, [pc, #104]	@ (8005090 <SystemInit+0x11c>)
 8005026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800502a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800502c:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <SystemInit+0x11c>)
 800502e:	2200      	movs	r2, #0
 8005030:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005032:	4b1c      	ldr	r3, [pc, #112]	@ (80050a4 <SystemInit+0x130>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4b1c      	ldr	r3, [pc, #112]	@ (80050a8 <SystemInit+0x134>)
 8005038:	4013      	ands	r3, r2
 800503a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800503e:	d202      	bcs.n	8005046 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005040:	4b1a      	ldr	r3, [pc, #104]	@ (80050ac <SystemInit+0x138>)
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <SystemInit+0x11c>)
 8005048:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800504c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d113      	bne.n	800507c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005054:	4b0e      	ldr	r3, [pc, #56]	@ (8005090 <SystemInit+0x11c>)
 8005056:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800505a:	4a0d      	ldr	r2, [pc, #52]	@ (8005090 <SystemInit+0x11c>)
 800505c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005060:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005064:	4b12      	ldr	r3, [pc, #72]	@ (80050b0 <SystemInit+0x13c>)
 8005066:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800506a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800506c:	4b08      	ldr	r3, [pc, #32]	@ (8005090 <SystemInit+0x11c>)
 800506e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005072:	4a07      	ldr	r2, [pc, #28]	@ (8005090 <SystemInit+0x11c>)
 8005074:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005078:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000ed00 	.word	0xe000ed00
 800508c:	52002000 	.word	0x52002000
 8005090:	58024400 	.word	0x58024400
 8005094:	eaf6ed7f 	.word	0xeaf6ed7f
 8005098:	02020200 	.word	0x02020200
 800509c:	01ff0000 	.word	0x01ff0000
 80050a0:	01010280 	.word	0x01010280
 80050a4:	5c001000 	.word	0x5c001000
 80050a8:	ffff0000 	.word	0xffff0000
 80050ac:	51008108 	.word	0x51008108
 80050b0:	52004000 	.word	0x52004000

080050b4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80050b8:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <ExitRun0Mode+0x2c>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a08      	ldr	r2, [pc, #32]	@ (80050e0 <ExitRun0Mode+0x2c>)
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80050c4:	bf00      	nop
 80050c6:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <ExitRun0Mode+0x2c>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f9      	beq.n	80050c6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	58024800 	.word	0x58024800

080050e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80050e4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005120 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80050e8:	f7ff ffe4 	bl	80050b4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80050ec:	f7ff ff42 	bl	8004f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050f0:	480c      	ldr	r0, [pc, #48]	@ (8005124 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050f2:	490d      	ldr	r1, [pc, #52]	@ (8005128 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050f4:	4a0d      	ldr	r2, [pc, #52]	@ (800512c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050f8:	e002      	b.n	8005100 <LoopCopyDataInit>

080050fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050fe:	3304      	adds	r3, #4

08005100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005104:	d3f9      	bcc.n	80050fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005108:	4c0a      	ldr	r4, [pc, #40]	@ (8005134 <LoopFillZerobss+0x22>)
  movs r3, #0
 800510a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800510c:	e001      	b.n	8005112 <LoopFillZerobss>

0800510e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800510e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005110:	3204      	adds	r2, #4

08005112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005114:	d3fb      	bcc.n	800510e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005116:	f00a f8c9 	bl	800f2ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800511a:	f7fe f8e1 	bl	80032e0 <main>
  bx  lr
 800511e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005120:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005124:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005128:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 800512c:	08011a80 	.word	0x08011a80
  ldr r2, =_sbss
 8005130:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8005134:	2400560c 	.word	0x2400560c

08005138 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005138:	e7fe      	b.n	8005138 <ADC3_IRQHandler>
	...

0800513c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08c      	sub	sp, #48	@ 0x30
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005146:	2300      	movs	r3, #0
 8005148:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <BSP_LED_Init+0x28>
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d006      	beq.n	8005164 <BSP_LED_Init+0x28>
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d003      	beq.n	8005164 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800515c:	f06f 0301 	mvn.w	r3, #1
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005162:	e055      	b.n	8005210 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10f      	bne.n	800518a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800516a:	4b2c      	ldr	r3, [pc, #176]	@ (800521c <BSP_LED_Init+0xe0>)
 800516c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005170:	4a2a      	ldr	r2, [pc, #168]	@ (800521c <BSP_LED_Init+0xe0>)
 8005172:	f043 0302 	orr.w	r3, r3, #2
 8005176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800517a:	4b28      	ldr	r3, [pc, #160]	@ (800521c <BSP_LED_Init+0xe0>)
 800517c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	e021      	b.n	80051ce <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10f      	bne.n	80051b0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8005190:	4b22      	ldr	r3, [pc, #136]	@ (800521c <BSP_LED_Init+0xe0>)
 8005192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005196:	4a21      	ldr	r2, [pc, #132]	@ (800521c <BSP_LED_Init+0xe0>)
 8005198:	f043 0302 	orr.w	r3, r3, #2
 800519c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051a0:	4b1e      	ldr	r3, [pc, #120]	@ (800521c <BSP_LED_Init+0xe0>)
 80051a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	e00e      	b.n	80051ce <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80051b0:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <BSP_LED_Init+0xe0>)
 80051b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051b6:	4a19      	ldr	r2, [pc, #100]	@ (800521c <BSP_LED_Init+0xe0>)
 80051b8:	f043 0302 	orr.w	r3, r3, #2
 80051bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051c0:	4b16      	ldr	r3, [pc, #88]	@ (800521c <BSP_LED_Init+0xe0>)
 80051c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <BSP_LED_Init+0xe4>)
 80051d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051d6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80051d8:	2301      	movs	r3, #1
 80051da:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e0:	2303      	movs	r3, #3
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005224 <BSP_LED_Init+0xe8>)
 80051e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ec:	f107 0218 	add.w	r2, r7, #24
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 fc56 	bl	8006aa4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005224 <BSP_LED_Init+0xe8>)
 80051fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	4a07      	ldr	r2, [pc, #28]	@ (8005220 <BSP_LED_Init+0xe4>)
 8005204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005208:	2200      	movs	r2, #0
 800520a:	4619      	mov	r1, r3
 800520c:	f001 fdfa 	bl	8006e04 <HAL_GPIO_WritePin>
  }

  return ret;
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005212:	4618      	mov	r0, r3
 8005214:	3730      	adds	r7, #48	@ 0x30
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	58024400 	.word	0x58024400
 8005220:	08011570 	.word	0x08011570
 8005224:	2400005c 	.word	0x2400005c

08005228 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	460a      	mov	r2, r1
 8005232:	71fb      	strb	r3, [r7, #7]
 8005234:	4613      	mov	r3, r2
 8005236:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8005238:	4b2e      	ldr	r3, [pc, #184]	@ (80052f4 <BSP_PB_Init+0xcc>)
 800523a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800523e:	4a2d      	ldr	r2, [pc, #180]	@ (80052f4 <BSP_PB_Init+0xcc>)
 8005240:	f043 0304 	orr.w	r3, r3, #4
 8005244:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005248:	4b2a      	ldr	r3, [pc, #168]	@ (80052f4 <BSP_PB_Init+0xcc>)
 800524a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8005256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800525a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800525c:	2302      	movs	r3, #2
 800525e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005260:	2302      	movs	r3, #2
 8005262:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005264:	79bb      	ldrb	r3, [r7, #6]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10c      	bne.n	8005284 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800526a:	2300      	movs	r3, #0
 800526c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	4a21      	ldr	r2, [pc, #132]	@ (80052f8 <BSP_PB_Init+0xd0>)
 8005272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005276:	f107 020c 	add.w	r2, r7, #12
 800527a:	4611      	mov	r1, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f001 fc11 	bl	8006aa4 <HAL_GPIO_Init>
 8005282:	e031      	b.n	80052e8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005284:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005288:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	4a1a      	ldr	r2, [pc, #104]	@ (80052f8 <BSP_PB_Init+0xd0>)
 800528e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005292:	f107 020c 	add.w	r2, r7, #12
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f001 fc03 	bl	8006aa4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	4a16      	ldr	r2, [pc, #88]	@ (80052fc <BSP_PB_Init+0xd4>)
 80052a4:	441a      	add	r2, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	4915      	ldr	r1, [pc, #84]	@ (8005300 <BSP_PB_Init+0xd8>)
 80052aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f000 fa48 	bl	8005746 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80052b6:	79fb      	ldrb	r3, [r7, #7]
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4a10      	ldr	r2, [pc, #64]	@ (80052fc <BSP_PB_Init+0xd4>)
 80052bc:	1898      	adds	r0, r3, r2
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	4a10      	ldr	r2, [pc, #64]	@ (8005304 <BSP_PB_Init+0xdc>)
 80052c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c6:	461a      	mov	r2, r3
 80052c8:	2100      	movs	r1, #0
 80052ca:	f000 fa1d 	bl	8005708 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80052ce:	2028      	movs	r0, #40	@ 0x28
 80052d0:	79fb      	ldrb	r3, [r7, #7]
 80052d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005308 <BSP_PB_Init+0xe0>)
 80052d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d8:	2200      	movs	r2, #0
 80052da:	4619      	mov	r1, r3
 80052dc:	f000 f974 	bl	80055c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80052e0:	2328      	movs	r3, #40	@ 0x28
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f98a 	bl	80055fc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3720      	adds	r7, #32
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	58024400 	.word	0x58024400
 80052f8:	24000068 	.word	0x24000068
 80052fc:	24000acc 	.word	0x24000acc
 8005300:	08011578 	.word	0x08011578
 8005304:	2400006c 	.word	0x2400006c
 8005308:	24000070 	.word	0x24000070

0800530c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4a04      	ldr	r2, [pc, #16]	@ (800532c <BSP_PB_IRQHandler+0x20>)
 800531c:	4413      	add	r3, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fa26 	bl	8005770 <HAL_EXTI_IRQHandler>
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	24000acc 	.word	0x24000acc

08005330 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005334:	2000      	movs	r0, #0
 8005336:	f7fb fcb9 	bl	8000cac <BSP_PB_Callback>
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005346:	2003      	movs	r0, #3
 8005348:	f000 f933 	bl	80055b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800534c:	f002 fbd8 	bl	8007b00 <HAL_RCC_GetSysClockFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b15      	ldr	r3, [pc, #84]	@ (80053a8 <HAL_Init+0x68>)
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	4913      	ldr	r1, [pc, #76]	@ (80053ac <HAL_Init+0x6c>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800536a:	4b0f      	ldr	r3, [pc, #60]	@ (80053a8 <HAL_Init+0x68>)
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	4a0e      	ldr	r2, [pc, #56]	@ (80053ac <HAL_Init+0x6c>)
 8005374:	5cd3      	ldrb	r3, [r2, r3]
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
 8005380:	4a0b      	ldr	r2, [pc, #44]	@ (80053b0 <HAL_Init+0x70>)
 8005382:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005384:	4a0b      	ldr	r2, [pc, #44]	@ (80053b4 <HAL_Init+0x74>)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800538a:	200f      	movs	r0, #15
 800538c:	f7ff fc9a 	bl	8004cc4 <HAL_InitTick>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e002      	b.n	80053a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800539a:	f7ff fb81 	bl	8004aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	58024400 	.word	0x58024400
 80053ac:	08011560 	.word	0x08011560
 80053b0:	24000058 	.word	0x24000058
 80053b4:	24000054 	.word	0x24000054

080053b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053bc:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_IncTick+0x20>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <HAL_IncTick+0x24>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4413      	add	r3, r2
 80053c8:	4a04      	ldr	r2, [pc, #16]	@ (80053dc <HAL_IncTick+0x24>)
 80053ca:	6013      	str	r3, [r2, #0]
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	24000078 	.word	0x24000078
 80053dc:	24000ad4 	.word	0x24000ad4

080053e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return uwTick;
 80053e4:	4b03      	ldr	r3, [pc, #12]	@ (80053f4 <HAL_GetTick+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	24000ad4 	.word	0x24000ad4

080053f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005400:	f7ff ffee 	bl	80053e0 <HAL_GetTick>
 8005404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d005      	beq.n	800541e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005412:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <HAL_Delay+0x44>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800541e:	bf00      	nop
 8005420:	f7ff ffde 	bl	80053e0 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	429a      	cmp	r2, r3
 800542e:	d8f7      	bhi.n	8005420 <HAL_Delay+0x28>
  {
  }
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	24000078 	.word	0x24000078

08005440 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005444:	4b03      	ldr	r3, [pc, #12]	@ (8005454 <HAL_GetREVID+0x14>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0c1b      	lsrs	r3, r3, #16
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	5c001000 	.word	0x5c001000

08005458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <__NVIC_SetPriorityGrouping+0x40>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005474:	4013      	ands	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005480:	4b06      	ldr	r3, [pc, #24]	@ (800549c <__NVIC_SetPriorityGrouping+0x44>)
 8005482:	4313      	orrs	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005486:	4a04      	ldr	r2, [pc, #16]	@ (8005498 <__NVIC_SetPriorityGrouping+0x40>)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	60d3      	str	r3, [r2, #12]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	e000ed00 	.word	0xe000ed00
 800549c:	05fa0000 	.word	0x05fa0000

080054a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054a4:	4b04      	ldr	r3, [pc, #16]	@ (80054b8 <__NVIC_GetPriorityGrouping+0x18>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	0a1b      	lsrs	r3, r3, #8
 80054aa:	f003 0307 	and.w	r3, r3, #7
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000ed00 	.word	0xe000ed00

080054bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	db0b      	blt.n	80054e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	f003 021f 	and.w	r2, r3, #31
 80054d4:	4907      	ldr	r1, [pc, #28]	@ (80054f4 <__NVIC_EnableIRQ+0x38>)
 80054d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2001      	movs	r0, #1
 80054de:	fa00 f202 	lsl.w	r2, r0, r2
 80054e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	e000e100 	.word	0xe000e100

080054f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	6039      	str	r1, [r7, #0]
 8005502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	db0a      	blt.n	8005522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	490c      	ldr	r1, [pc, #48]	@ (8005544 <__NVIC_SetPriority+0x4c>)
 8005512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005516:	0112      	lsls	r2, r2, #4
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	440b      	add	r3, r1
 800551c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005520:	e00a      	b.n	8005538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4908      	ldr	r1, [pc, #32]	@ (8005548 <__NVIC_SetPriority+0x50>)
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	3b04      	subs	r3, #4
 8005530:	0112      	lsls	r2, r2, #4
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	440b      	add	r3, r1
 8005536:	761a      	strb	r2, [r3, #24]
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	e000e100 	.word	0xe000e100
 8005548:	e000ed00 	.word	0xe000ed00

0800554c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800554c:	b480      	push	{r7}
 800554e:	b089      	sub	sp, #36	@ 0x24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f1c3 0307 	rsb	r3, r3, #7
 8005566:	2b04      	cmp	r3, #4
 8005568:	bf28      	it	cs
 800556a:	2304      	movcs	r3, #4
 800556c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3304      	adds	r3, #4
 8005572:	2b06      	cmp	r3, #6
 8005574:	d902      	bls.n	800557c <NVIC_EncodePriority+0x30>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	3b03      	subs	r3, #3
 800557a:	e000      	b.n	800557e <NVIC_EncodePriority+0x32>
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43da      	mvns	r2, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	401a      	ands	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005594:	f04f 31ff 	mov.w	r1, #4294967295
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	43d9      	mvns	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	4313      	orrs	r3, r2
         );
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3724      	adds	r7, #36	@ 0x24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b082      	sub	sp, #8
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff ff4c 	bl	8005458 <__NVIC_SetPriorityGrouping>
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055d6:	f7ff ff63 	bl	80054a0 <__NVIC_GetPriorityGrouping>
 80055da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	6978      	ldr	r0, [r7, #20]
 80055e2:	f7ff ffb3 	bl	800554c <NVIC_EncodePriority>
 80055e6:	4602      	mov	r2, r0
 80055e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7ff ff82 	bl	80054f8 <__NVIC_SetPriority>
}
 80055f4:	bf00      	nop
 80055f6:	3718      	adds	r7, #24
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ff56 	bl	80054bc <__NVIC_EnableIRQ>
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800561c:	f3bf 8f5f 	dmb	sy
}
 8005620:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005622:	4b07      	ldr	r3, [pc, #28]	@ (8005640 <HAL_MPU_Disable+0x28>)
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	4a06      	ldr	r2, [pc, #24]	@ (8005640 <HAL_MPU_Disable+0x28>)
 8005628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800562c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800562e:	4b05      	ldr	r3, [pc, #20]	@ (8005644 <HAL_MPU_Disable+0x2c>)
 8005630:	2200      	movs	r2, #0
 8005632:	605a      	str	r2, [r3, #4]
}
 8005634:	bf00      	nop
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	e000ed00 	.word	0xe000ed00
 8005644:	e000ed90 	.word	0xe000ed90

08005648 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005650:	4a0b      	ldr	r2, [pc, #44]	@ (8005680 <HAL_MPU_Enable+0x38>)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800565a:	4b0a      	ldr	r3, [pc, #40]	@ (8005684 <HAL_MPU_Enable+0x3c>)
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	4a09      	ldr	r2, [pc, #36]	@ (8005684 <HAL_MPU_Enable+0x3c>)
 8005660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005664:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005666:	f3bf 8f4f 	dsb	sy
}
 800566a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800566c:	f3bf 8f6f 	isb	sy
}
 8005670:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	e000ed90 	.word	0xe000ed90
 8005684:	e000ed00 	.word	0xe000ed00

08005688 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	785a      	ldrb	r2, [r3, #1]
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <HAL_MPU_ConfigRegion+0x7c>)
 8005696:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005698:	4b1a      	ldr	r3, [pc, #104]	@ (8005704 <HAL_MPU_ConfigRegion+0x7c>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	4a19      	ldr	r2, [pc, #100]	@ (8005704 <HAL_MPU_ConfigRegion+0x7c>)
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80056a4:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <HAL_MPU_ConfigRegion+0x7c>)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	7b1b      	ldrb	r3, [r3, #12]
 80056b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	7adb      	ldrb	r3, [r3, #11]
 80056b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	7a9b      	ldrb	r3, [r3, #10]
 80056be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80056c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	7b5b      	ldrb	r3, [r3, #13]
 80056c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80056c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	7b9b      	ldrb	r3, [r3, #14]
 80056ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80056d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	7bdb      	ldrb	r3, [r3, #15]
 80056d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80056d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7a5b      	ldrb	r3, [r3, #9]
 80056de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80056e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7a1b      	ldrb	r3, [r3, #8]
 80056e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80056e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	7812      	ldrb	r2, [r2, #0]
 80056ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056f0:	4a04      	ldr	r2, [pc, #16]	@ (8005704 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80056f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80056f4:	6113      	str	r3, [r2, #16]
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	e000ed90 	.word	0xe000ed90

08005708 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	460b      	mov	r3, r1
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e00a      	b.n	800573a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d103      	bne.n	8005732 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	605a      	str	r2, [r3, #4]
      break;
 8005730:	e002      	b.n	8005738 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
      break;
 8005736:	bf00      	nop
  }

  return status;
 8005738:	7dfb      	ldrb	r3, [r7, #23]
}
 800573a:	4618      	mov	r0, r3
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e003      	b.n	8005762 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005760:	2300      	movs	r3, #0
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
	...

08005770 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2201      	movs	r2, #1
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	011a      	lsls	r2, r3, #4
 8005798:	4b0c      	ldr	r3, [pc, #48]	@ (80057cc <HAL_EXTI_IRQHandler+0x5c>)
 800579a:	4413      	add	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4013      	ands	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4798      	blx	r3
    }
  }
}
 80057c2:	bf00      	nop
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	58000088 	.word	0x58000088

080057d0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b098      	sub	sp, #96	@ 0x60
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80057d8:	4a84      	ldr	r2, [pc, #528]	@ (80059ec <HAL_FDCAN_Init+0x21c>)
 80057da:	f107 030c 	add.w	r3, r7, #12
 80057de:	4611      	mov	r1, r2
 80057e0:	224c      	movs	r2, #76	@ 0x4c
 80057e2:	4618      	mov	r0, r3
 80057e4:	f009 fd89 	bl	800f2fa <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e1c6      	b.n	8005b80 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7e      	ldr	r2, [pc, #504]	@ (80059f0 <HAL_FDCAN_Init+0x220>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d106      	bne.n	800580a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005804:	461a      	mov	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff f95c 	bl	8004adc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0210 	bic.w	r2, r2, #16
 8005832:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005834:	f7ff fdd4 	bl	80053e0 <HAL_GetTick>
 8005838:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800583a:	e014      	b.n	8005866 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800583c:	f7ff fdd0 	bl	80053e0 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b0a      	cmp	r3, #10
 8005848:	d90d      	bls.n	8005866 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005850:	f043 0201 	orr.w	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2203      	movs	r2, #3
 800585e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e18c      	b.n	8005b80 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	2b08      	cmp	r3, #8
 8005872:	d0e3      	beq.n	800583c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 0201 	orr.w	r2, r2, #1
 8005882:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005884:	f7ff fdac 	bl	80053e0 <HAL_GetTick>
 8005888:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800588a:	e014      	b.n	80058b6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800588c:	f7ff fda8 	bl	80053e0 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b0a      	cmp	r3, #10
 8005898:	d90d      	bls.n	80058b6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058a0:	f043 0201 	orr.w	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2203      	movs	r2, #3
 80058ae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e164      	b.n	8005b80 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0e3      	beq.n	800588c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0202 	orr.w	r2, r2, #2
 80058d2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7c1b      	ldrb	r3, [r3, #16]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d108      	bne.n	80058ee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058ea:	619a      	str	r2, [r3, #24]
 80058ec:	e007      	b.n	80058fe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	699a      	ldr	r2, [r3, #24]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058fc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	7c5b      	ldrb	r3, [r3, #17]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d108      	bne.n	8005918 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005914:	619a      	str	r2, [r3, #24]
 8005916:	e007      	b.n	8005928 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005926:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	7c9b      	ldrb	r3, [r3, #18]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d108      	bne.n	8005942 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800593e:	619a      	str	r2, [r3, #24]
 8005940:	e007      	b.n	8005952 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005950:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005976:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0210 	bic.w	r2, r2, #16
 8005986:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d108      	bne.n	80059a2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0204 	orr.w	r2, r2, #4
 800599e:	619a      	str	r2, [r3, #24]
 80059a0:	e030      	b.n	8005a04 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d02c      	beq.n	8005a04 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d020      	beq.n	80059f4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80059c0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0210 	orr.w	r2, r2, #16
 80059d0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d114      	bne.n	8005a04 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699a      	ldr	r2, [r3, #24]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0220 	orr.w	r2, r2, #32
 80059e8:	619a      	str	r2, [r3, #24]
 80059ea:	e00b      	b.n	8005a04 <HAL_FDCAN_Init+0x234>
 80059ec:	080114b4 	.word	0x080114b4
 80059f0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0220 	orr.w	r2, r2, #32
 8005a02:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a14:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005a1c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005a2c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005a2e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a38:	d115      	bne.n	8005a66 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	3b01      	subs	r3, #1
 8005a46:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a48:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a52:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a62:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a64:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8c:	4413      	add	r3, r2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d011      	beq.n	8005ab6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005a9a:	f023 0107 	bic.w	r1, r3, #7
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	3360      	adds	r3, #96	@ 0x60
 8005aa6:	443b      	add	r3, r7
 8005aa8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d011      	beq.n	8005ae2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ac6:	f023 0107 	bic.w	r1, r3, #7
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	3360      	adds	r3, #96	@ 0x60
 8005ad2:	443b      	add	r3, r7
 8005ad4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d012      	beq.n	8005b10 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005af2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	3360      	adds	r3, #96	@ 0x60
 8005afe:	443b      	add	r3, r7
 8005b00:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b04:	011a      	lsls	r2, r3, #4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d012      	beq.n	8005b3e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b20:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	3360      	adds	r3, #96	@ 0x60
 8005b2c:	443b      	add	r3, r7
 8005b2e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005b32:	021a      	lsls	r2, r3, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a11      	ldr	r2, [pc, #68]	@ (8005b88 <HAL_FDCAN_Init+0x3b8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d107      	bne.n	8005b58 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f022 0203 	bic.w	r2, r2, #3
 8005b56:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fd93 	bl	800669c <FDCAN_CalcultateRamBlockAddresses>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005b7c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3760      	adds	r7, #96	@ 0x60
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	4000a000 	.word	0x4000a000

08005b8c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d111      	bne.n	8005bc4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	e008      	b.n	8005bd6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bca:	f043 0204 	orr.w	r2, r3, #4
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
  }
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b086      	sub	sp, #24
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d141      	bne.n	8005c7e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c02:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c10:	f043 0220 	orr.w	r2, r3, #32
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e038      	b.n	8005c90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d009      	beq.n	8005c42 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e026      	b.n	8005c90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fea5 	bl	80069a8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2101      	movs	r1, #1
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	fa01 f202 	lsl.w	r2, r1, r2
 8005c6a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005c6e:	2201      	movs	r2, #1
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	409a      	lsls	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e008      	b.n	8005c90 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c84:	f043 0208 	orr.w	r2, r3, #8
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
  }
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b08b      	sub	sp, #44	@ 0x2c
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005cb0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005cb2:	7efb      	ldrb	r3, [r7, #27]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	f040 8149 	bne.w	8005f4c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b40      	cmp	r3, #64	@ 0x40
 8005cbe:	d14c      	bne.n	8005d5a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005cc8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e13c      	b.n	8005f5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e12a      	b.n	8005f5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d18:	d10a      	bne.n	8005d30 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d2a:	d101      	bne.n	8005d30 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005d38:	0a1b      	lsrs	r3, r3, #8
 8005d3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4c:	69f9      	ldr	r1, [r7, #28]
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d58:	e068      	b.n	8005e2c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b41      	cmp	r3, #65	@ 0x41
 8005d5e:	d14c      	bne.n	8005dfa <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d109      	bne.n	8005d84 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d76:	f043 0220 	orr.w	r2, r3, #32
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0ec      	b.n	8005f5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d109      	bne.n	8005da8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e0da      	b.n	8005f5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005db8:	d10a      	bne.n	8005dd0 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005dc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dca:	d101      	bne.n	8005dd0 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dd8:	0a1b      	lsrs	r3, r3, #8
 8005dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df8:	e018      	b.n	8005e2c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d309      	bcc.n	8005e18 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0a2      	b.n	8005f5e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d107      	bne.n	8005e50 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	0c9b      	lsrs	r3, r3, #18
 8005e46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	e005      	b.n	8005e5c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	3304      	adds	r3, #4
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8005e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	f003 020f 	and.w	r2, r3, #15
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	0e1b      	lsrs	r3, r3, #24
 8005eb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	0fda      	lsrs	r2, r3, #31
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eca:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	623b      	str	r3, [r7, #32]
 8005ed0:	e00a      	b.n	8005ee8 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	441a      	add	r2, r3
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	440b      	add	r3, r1
 8005ede:	7812      	ldrb	r2, [r2, #0]
 8005ee0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	623b      	str	r3, [r7, #32]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	4a1f      	ldr	r2, [pc, #124]	@ (8005f6c <HAL_FDCAN_GetRxMessage+0x2d4>)
 8005eee:	5cd3      	ldrb	r3, [r2, r3]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d3ec      	bcc.n	8005ed2 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d105      	bne.n	8005f0a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8005f08:	e01e      	b.n	8005f48 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b41      	cmp	r3, #65	@ 0x41
 8005f0e:	d105      	bne.n	8005f1c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8005f1a:	e015      	b.n	8005f48 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2b1f      	cmp	r3, #31
 8005f20:	d808      	bhi.n	8005f34 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2101      	movs	r1, #1
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f2e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005f32:	e009      	b.n	8005f48 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f003 021f 	and.w	r2, r3, #31
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2101      	movs	r1, #1
 8005f40:	fa01 f202 	lsl.w	r2, r1, r2
 8005f44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e008      	b.n	8005f5e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f52:	f043 0208 	orr.w	r2, r3, #8
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
  }
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	372c      	adds	r7, #44	@ 0x2c
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	0801157c 	.word	0x0801157c

08005f70 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8005f86:	68fb      	ldr	r3, [r7, #12]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005fa6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d002      	beq.n	8005fb4 <HAL_FDCAN_ActivateNotification+0x20>
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d155      	bne.n	8006060 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d108      	bne.n	8005fd4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f042 0201 	orr.w	r2, r2, #1
 8005fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005fd2:	e014      	b.n	8005ffe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d108      	bne.n	8005ff6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0202 	orr.w	r2, r2, #2
 8005ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ff4:	e003      	b.n	8005ffe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006004:	2b00      	cmp	r3, #0
 8006006:	d009      	beq.n	800601c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	430a      	orrs	r2, r1
 8006018:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	430a      	orrs	r2, r1
 8006036:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	4b0f      	ldr	r3, [pc, #60]	@ (8006080 <HAL_FDCAN_ActivateNotification+0xec>)
 8006044:	4013      	ands	r3, r2
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	430b      	orrs	r3, r1
 800604c:	6553      	str	r3, [r2, #84]	@ 0x54
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	0f9b      	lsrs	r3, r3, #30
 8006056:	490b      	ldr	r1, [pc, #44]	@ (8006084 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006058:	4313      	orrs	r3, r2
 800605a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	e008      	b.n	8006072 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006066:	f043 0202 	orr.w	r2, r3, #2
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	3fcfffff 	.word	0x3fcfffff
 8006084:	4000a800 	.word	0x4000a800

08006088 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b096      	sub	sp, #88	@ 0x58
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006090:	4b9a      	ldr	r3, [pc, #616]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	079b      	lsls	r3, r3, #30
 8006096:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8006098:	4b98      	ldr	r3, [pc, #608]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	079b      	lsls	r3, r3, #30
 800609e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80060a0:	4013      	ands	r3, r2
 80060a2:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060aa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80060ae:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80060b8:	4013      	ands	r3, r2
 80060ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c2:	f003 030f 	and.w	r3, r3, #15
 80060c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060d0:	4013      	ands	r3, r2
 80060d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060e8:	4013      	ands	r3, r2
 80060ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80060f6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006100:	4013      	ands	r3, r2
 8006102:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610a:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800610e:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006116:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006118:	4013      	ands	r3, r2
 800611a:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800612a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800612c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800612e:	0a1b      	lsrs	r3, r3, #8
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d010      	beq.n	800615a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613a:	0a1b      	lsrs	r3, r3, #8
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800614c:	651a      	str	r2, [r3, #80]	@ 0x50
 800614e:	4b6b      	ldr	r3, [pc, #428]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 8006150:	2200      	movs	r2, #0
 8006152:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fa54 	bl	8006602 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800615a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615c:	0a9b      	lsrs	r3, r3, #10
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d01d      	beq.n	80061a2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006168:	0a9b      	lsrs	r3, r3, #10
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d017      	beq.n	80061a2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800617a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006184:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006186:	4013      	ands	r3, r2
 8006188:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006192:	651a      	str	r2, [r3, #80]	@ 0x50
 8006194:	4b59      	ldr	r3, [pc, #356]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 8006196:	2200      	movs	r2, #0
 8006198:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800619a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fa07 	bl	80065b0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80061a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061ae:	4b54      	ldr	r3, [pc, #336]	@ (8006300 <HAL_FDCAN_IRQHandler+0x278>)
 80061b0:	400b      	ands	r3, r1
 80061b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80061b4:	4a51      	ldr	r2, [pc, #324]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 80061b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061b8:	0f9b      	lsrs	r3, r3, #30
 80061ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80061bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f9c0 	bl	8006544 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80061c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006300 <HAL_FDCAN_IRQHandler+0x278>)
 80061d2:	400b      	ands	r3, r1
 80061d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80061d6:	4a49      	ldr	r2, [pc, #292]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 80061d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061da:	0f9b      	lsrs	r3, r3, #30
 80061dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80061de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f9ba 	bl	800655a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80061e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80061f2:	4b43      	ldr	r3, [pc, #268]	@ (8006300 <HAL_FDCAN_IRQHandler+0x278>)
 80061f4:	400b      	ands	r3, r1
 80061f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80061f8:	4a40      	ldr	r2, [pc, #256]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 80061fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061fc:	0f9b      	lsrs	r3, r3, #30
 80061fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006200:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fa ff92 	bl	800112c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00d      	beq.n	800622a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006214:	4b3a      	ldr	r3, [pc, #232]	@ (8006300 <HAL_FDCAN_IRQHandler+0x278>)
 8006216:	400b      	ands	r3, r1
 8006218:	6513      	str	r3, [r2, #80]	@ 0x50
 800621a:	4a38      	ldr	r2, [pc, #224]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 800621c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800621e:	0f9b      	lsrs	r3, r3, #30
 8006220:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006222:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f9a3 	bl	8006570 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800622a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622c:	0adb      	lsrs	r3, r3, #11
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d010      	beq.n	8006258 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	0adb      	lsrs	r3, r3, #11
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800624a:	651a      	str	r2, [r3, #80]	@ 0x50
 800624c:	4b2b      	ldr	r3, [pc, #172]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f997 	bl	8006586 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8006258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625a:	0a5b      	lsrs	r3, r3, #9
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01d      	beq.n	80062a0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006266:	0a5b      	lsrs	r3, r3, #9
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b00      	cmp	r3, #0
 800626e:	d017      	beq.n	80062a0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006278:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006284:	4013      	ands	r3, r2
 8006286:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006290:	651a      	str	r2, [r3, #80]	@ 0x50
 8006292:	4b1a      	ldr	r3, [pc, #104]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 8006294:	2200      	movs	r2, #0
 8006296:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006298:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f97d 	bl	800659a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80062a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a2:	0cdb      	lsrs	r3, r3, #19
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d010      	beq.n	80062ce <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80062ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ae:	0cdb      	lsrs	r3, r3, #19
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80062c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80062c2:	4b0e      	ldr	r3, [pc, #56]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f97c 	bl	80065c6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80062ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	f003 0301 	and.w	r3, r3, #1
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d010      	beq.n	8006308 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80062ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80062f0:	4b02      	ldr	r3, [pc, #8]	@ (80062fc <HAL_FDCAN_IRQHandler+0x274>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	e004      	b.n	8006304 <HAL_FDCAN_IRQHandler+0x27c>
 80062fa:	bf00      	nop
 80062fc:	4000a800 	.word	0x4000a800
 8006300:	3fcfffff 	.word	0x3fcfffff
 8006304:	f000 f969 	bl	80065da <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800630a:	0c9b      	lsrs	r3, r3, #18
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d010      	beq.n	8006336 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	0c9b      	lsrs	r3, r3, #18
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006328:	651a      	str	r2, [r3, #80]	@ 0x50
 800632a:	4b83      	ldr	r3, [pc, #524]	@ (8006538 <HAL_FDCAN_IRQHandler+0x4b0>)
 800632c:	2200      	movs	r2, #0
 800632e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f95c 	bl	80065ee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006338:	0c5b      	lsrs	r3, r3, #17
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d015      	beq.n	800636e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006344:	0c5b      	lsrs	r3, r3, #17
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00f      	beq.n	800636e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006356:	651a      	str	r2, [r3, #80]	@ 0x50
 8006358:	4b77      	ldr	r3, [pc, #476]	@ (8006538 <HAL_FDCAN_IRQHandler+0x4b0>)
 800635a:	2200      	movs	r2, #0
 800635c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006364:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800636e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00d      	beq.n	8006390 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800637a:	4b70      	ldr	r3, [pc, #448]	@ (800653c <HAL_FDCAN_IRQHandler+0x4b4>)
 800637c:	400b      	ands	r3, r1
 800637e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006380:	4a6d      	ldr	r2, [pc, #436]	@ (8006538 <HAL_FDCAN_IRQHandler+0x4b0>)
 8006382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006384:	0f9b      	lsrs	r3, r3, #30
 8006386:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f94d 	bl	800662a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006392:	2b00      	cmp	r3, #0
 8006394:	d011      	beq.n	80063ba <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800639c:	4b67      	ldr	r3, [pc, #412]	@ (800653c <HAL_FDCAN_IRQHandler+0x4b4>)
 800639e:	400b      	ands	r3, r1
 80063a0:	6513      	str	r3, [r2, #80]	@ 0x50
 80063a2:	4a65      	ldr	r2, [pc, #404]	@ (8006538 <HAL_FDCAN_IRQHandler+0x4b0>)
 80063a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063a6:	0f9b      	lsrs	r3, r3, #30
 80063a8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80063b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a60      	ldr	r2, [pc, #384]	@ (8006540 <HAL_FDCAN_IRQHandler+0x4b8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	f040 80ac 	bne.w	800651e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0303 	and.w	r3, r3, #3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80a4 	beq.w	800651e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ea:	4013      	ands	r3, r2
 80063ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006402:	4013      	ands	r3, r2
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641a:	4013      	ands	r3, r2
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8006428:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	4013      	ands	r3, r2
 8006434:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8006440:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	4013      	ands	r3, r2
 800644c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800645e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800646a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800646c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f8e6 	bl	8006640 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006480:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f8e6 	bl	8006656 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	099b      	lsrs	r3, r3, #6
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d01a      	beq.n	80064cc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	099b      	lsrs	r3, r3, #6
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d014      	beq.n	80064cc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a8:	0c1b      	lsrs	r3, r3, #16
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064b8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2240      	movs	r2, #64	@ 0x40
 80064c0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	6939      	ldr	r1, [r7, #16]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8d0 	bl	800666c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80064da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8d1 	bl	8006684 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	6a3a      	ldr	r2, [r7, #32]
 80064ee:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f874 	bl	8006616 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800652e:	bf00      	nop
 8006530:	3758      	adds	r7, #88	@ 0x58
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	4000a800 	.word	0x4000a800
 800653c:	3fcfffff 	.word	0x3fcfffff
 8006540:	4000a000 	.word	0x4000a000

08006544 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b083      	sub	sp, #12
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065da:	b480      	push	{r7}
 80065dc:	b083      	sub	sp, #12
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80065e2:	bf00      	nop
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
	...

0800669c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80066b2:	4ba7      	ldr	r3, [pc, #668]	@ (8006950 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	0091      	lsls	r1, r2, #2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	430b      	orrs	r3, r1
 80066c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066cc:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d4:	041a      	lsls	r2, r3, #16
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	4413      	add	r3, r2
 80066e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80066f2:	4b97      	ldr	r3, [pc, #604]	@ (8006950 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	0091      	lsls	r1, r2, #2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	430b      	orrs	r3, r1
 8006700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006714:	041a      	lsls	r2, r3, #16
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	4413      	add	r3, r2
 800672a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006734:	4b86      	ldr	r3, [pc, #536]	@ (8006950 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006736:	4013      	ands	r3, r2
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	0091      	lsls	r1, r2, #2
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	430b      	orrs	r3, r1
 8006742:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800674e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006756:	041a      	lsls	r2, r3, #16
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4413      	add	r3, r2
 8006772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800677c:	4b74      	ldr	r3, [pc, #464]	@ (8006950 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800677e:	4013      	ands	r3, r2
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	0091      	lsls	r1, r2, #2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	430b      	orrs	r3, r1
 800678a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006796:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679e:	041a      	lsls	r2, r3, #16
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4413      	add	r3, r2
 80067ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80067c4:	4b62      	ldr	r3, [pc, #392]	@ (8006950 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	0091      	lsls	r1, r2, #2
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	430b      	orrs	r3, r1
 80067d2:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80067de:	fb02 f303 	mul.w	r3, r2, r3
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	4413      	add	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80067f0:	4b57      	ldr	r3, [pc, #348]	@ (8006950 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	0091      	lsls	r1, r2, #2
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6812      	ldr	r2, [r2, #0]
 80067fc:	430b      	orrs	r3, r1
 80067fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800680a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006812:	041a      	lsls	r2, r3, #16
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	4413      	add	r3, r2
 8006828:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006832:	4b47      	ldr	r3, [pc, #284]	@ (8006950 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006834:	4013      	ands	r3, r2
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	0091      	lsls	r1, r2, #2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	430b      	orrs	r3, r1
 8006840:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800684c:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006854:	041a      	lsls	r2, r3, #16
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006868:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006870:	061a      	lsls	r2, r3, #24
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006880:	4b34      	ldr	r3, [pc, #208]	@ (8006954 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006882:	4413      	add	r3, r2
 8006884:	009a      	lsls	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	441a      	add	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80068b6:	fb01 f303 	mul.w	r3, r1, r3
 80068ba:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80068bc:	441a      	add	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80068ce:	fb01 f303 	mul.w	r3, r1, r3
 80068d2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80068d4:	441a      	add	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80068ec:	441a      	add	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	441a      	add	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8006932:	fb01 f303 	mul.w	r3, r1, r3
 8006936:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8006938:	441a      	add	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006946:	4a04      	ldr	r2, [pc, #16]	@ (8006958 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d915      	bls.n	8006978 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800694c:	e006      	b.n	800695c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800694e:	bf00      	nop
 8006950:	ffff0003 	.word	0xffff0003
 8006954:	10002b00 	.word	0x10002b00
 8006958:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006962:	f043 0220 	orr.w	r2, r3, #32
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2203      	movs	r2, #3
 8006970:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e010      	b.n	800699a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	e005      	b.n	800698c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3304      	adds	r3, #4
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	429a      	cmp	r2, r3
 8006996:	d3f3      	bcc.n	8006980 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b089      	sub	sp, #36	@ 0x24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80069c6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069ce:	4313      	orrs	r3, r2
 80069d0:	61fb      	str	r3, [r7, #28]
 80069d2:	e00a      	b.n	80069ea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80069dc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80069e2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069e8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80069f4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80069fa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006a00:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	fb01 f303 	mul.w	r3, r1, r3
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	3304      	adds	r3, #4
 8006a38:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e020      	b.n	8006a82 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	3303      	adds	r3, #3
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4413      	add	r3, r2
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	3302      	adds	r3, #2
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	440b      	add	r3, r1
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006a58:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	440b      	add	r3, r1
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006a66:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006a70:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	4a06      	ldr	r2, [pc, #24]	@ (8006aa0 <FDCAN_CopyMessageToRAM+0xf8>)
 8006a88:	5cd3      	ldrb	r3, [r2, r3]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d3d6      	bcc.n	8006a40 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	3724      	adds	r7, #36	@ 0x24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	0801157c 	.word	0x0801157c

08006aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b089      	sub	sp, #36	@ 0x24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006ab2:	4b89      	ldr	r3, [pc, #548]	@ (8006cd8 <HAL_GPIO_Init+0x234>)
 8006ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ab6:	e194      	b.n	8006de2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	2101      	movs	r1, #1
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8186 	beq.w	8006ddc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d005      	beq.n	8006ae8 <HAL_GPIO_Init+0x44>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f003 0303 	and.w	r3, r3, #3
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d130      	bne.n	8006b4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	2203      	movs	r2, #3
 8006af4:	fa02 f303 	lsl.w	r3, r2, r3
 8006af8:	43db      	mvns	r3, r3
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	4013      	ands	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b1e:	2201      	movs	r2, #1
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	43db      	mvns	r3, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	091b      	lsrs	r3, r3, #4
 8006b34:	f003 0201 	and.w	r2, r3, #1
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d017      	beq.n	8006b86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	2203      	movs	r2, #3
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43db      	mvns	r3, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	005b      	lsls	r3, r3, #1
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d123      	bne.n	8006bda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	08da      	lsrs	r2, r3, #3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3208      	adds	r2, #8
 8006b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	220f      	movs	r2, #15
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	08da      	lsrs	r2, r3, #3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3208      	adds	r2, #8
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	2203      	movs	r2, #3
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	43db      	mvns	r3, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f003 0203 	and.w	r2, r3, #3
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80e0 	beq.w	8006ddc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c1c:	4b2f      	ldr	r3, [pc, #188]	@ (8006cdc <HAL_GPIO_Init+0x238>)
 8006c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c22:	4a2e      	ldr	r2, [pc, #184]	@ (8006cdc <HAL_GPIO_Init+0x238>)
 8006c24:	f043 0302 	orr.w	r3, r3, #2
 8006c28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8006cdc <HAL_GPIO_Init+0x238>)
 8006c2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c3a:	4a29      	ldr	r2, [pc, #164]	@ (8006ce0 <HAL_GPIO_Init+0x23c>)
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	089b      	lsrs	r3, r3, #2
 8006c40:	3302      	adds	r3, #2
 8006c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	220f      	movs	r2, #15
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	43db      	mvns	r3, r3
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a20      	ldr	r2, [pc, #128]	@ (8006ce4 <HAL_GPIO_Init+0x240>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d052      	beq.n	8006d0c <HAL_GPIO_Init+0x268>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce8 <HAL_GPIO_Init+0x244>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d031      	beq.n	8006cd2 <HAL_GPIO_Init+0x22e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a1e      	ldr	r2, [pc, #120]	@ (8006cec <HAL_GPIO_Init+0x248>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d02b      	beq.n	8006cce <HAL_GPIO_Init+0x22a>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf0 <HAL_GPIO_Init+0x24c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d025      	beq.n	8006cca <HAL_GPIO_Init+0x226>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf4 <HAL_GPIO_Init+0x250>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d01f      	beq.n	8006cc6 <HAL_GPIO_Init+0x222>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf8 <HAL_GPIO_Init+0x254>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d019      	beq.n	8006cc2 <HAL_GPIO_Init+0x21e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a1a      	ldr	r2, [pc, #104]	@ (8006cfc <HAL_GPIO_Init+0x258>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <HAL_GPIO_Init+0x21a>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a19      	ldr	r2, [pc, #100]	@ (8006d00 <HAL_GPIO_Init+0x25c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00d      	beq.n	8006cba <HAL_GPIO_Init+0x216>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a18      	ldr	r2, [pc, #96]	@ (8006d04 <HAL_GPIO_Init+0x260>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d007      	beq.n	8006cb6 <HAL_GPIO_Init+0x212>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a17      	ldr	r2, [pc, #92]	@ (8006d08 <HAL_GPIO_Init+0x264>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d101      	bne.n	8006cb2 <HAL_GPIO_Init+0x20e>
 8006cae:	2309      	movs	r3, #9
 8006cb0:	e02d      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cb2:	230a      	movs	r3, #10
 8006cb4:	e02b      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	e029      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cba:	2307      	movs	r3, #7
 8006cbc:	e027      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cbe:	2306      	movs	r3, #6
 8006cc0:	e025      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cc2:	2305      	movs	r3, #5
 8006cc4:	e023      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cc6:	2304      	movs	r3, #4
 8006cc8:	e021      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e01f      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e01d      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e01b      	b.n	8006d0e <HAL_GPIO_Init+0x26a>
 8006cd6:	bf00      	nop
 8006cd8:	58000080 	.word	0x58000080
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	58000400 	.word	0x58000400
 8006ce4:	58020000 	.word	0x58020000
 8006ce8:	58020400 	.word	0x58020400
 8006cec:	58020800 	.word	0x58020800
 8006cf0:	58020c00 	.word	0x58020c00
 8006cf4:	58021000 	.word	0x58021000
 8006cf8:	58021400 	.word	0x58021400
 8006cfc:	58021800 	.word	0x58021800
 8006d00:	58021c00 	.word	0x58021c00
 8006d04:	58022000 	.word	0x58022000
 8006d08:	58022400 	.word	0x58022400
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	f002 0203 	and.w	r2, r2, #3
 8006d14:	0092      	lsls	r2, r2, #2
 8006d16:	4093      	lsls	r3, r2
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d1e:	4938      	ldr	r1, [pc, #224]	@ (8006e00 <HAL_GPIO_Init+0x35c>)
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	089b      	lsrs	r3, r3, #2
 8006d24:	3302      	adds	r3, #2
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	43db      	mvns	r3, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	43db      	mvns	r3, r3
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	4013      	ands	r3, r2
 8006d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	3301      	adds	r3, #1
 8006de0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f47f ae63 	bne.w	8006ab8 <HAL_GPIO_Init+0x14>
  }
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	3724      	adds	r7, #36	@ 0x24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	58000400 	.word	0x58000400

08006e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	807b      	strh	r3, [r7, #2]
 8006e10:	4613      	mov	r3, r2
 8006e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e14:	787b      	ldrb	r3, [r7, #1]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e1a:	887a      	ldrh	r2, [r7, #2]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006e20:	e003      	b.n	8006e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	041a      	lsls	r2, r3, #16
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	619a      	str	r2, [r3, #24]
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b085      	sub	sp, #20
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e48:	887a      	ldrh	r2, [r7, #2]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	041a      	lsls	r2, r3, #16
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	43d9      	mvns	r1, r3
 8006e54:	887b      	ldrh	r3, [r7, #2]
 8006e56:	400b      	ands	r3, r1
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	619a      	str	r2, [r3, #24]
}
 8006e5e:	bf00      	nop
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e74:	4b19      	ldr	r3, [pc, #100]	@ (8006edc <HAL_PWREx_ConfigSupply+0x70>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d00a      	beq.n	8006e96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e80:	4b16      	ldr	r3, [pc, #88]	@ (8006edc <HAL_PWREx_ConfigSupply+0x70>)
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d001      	beq.n	8006e92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e01f      	b.n	8006ed2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e01d      	b.n	8006ed2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e96:	4b11      	ldr	r3, [pc, #68]	@ (8006edc <HAL_PWREx_ConfigSupply+0x70>)
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	f023 0207 	bic.w	r2, r3, #7
 8006e9e:	490f      	ldr	r1, [pc, #60]	@ (8006edc <HAL_PWREx_ConfigSupply+0x70>)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ea6:	f7fe fa9b 	bl	80053e0 <HAL_GetTick>
 8006eaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006eac:	e009      	b.n	8006ec2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006eae:	f7fe fa97 	bl	80053e0 <HAL_GetTick>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ebc:	d901      	bls.n	8006ec2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e007      	b.n	8006ed2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006ec2:	4b06      	ldr	r3, [pc, #24]	@ (8006edc <HAL_PWREx_ConfigSupply+0x70>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ece:	d1ee      	bne.n	8006eae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	58024800 	.word	0x58024800

08006ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	@ 0x30
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f000 bc48 	b.w	8007784 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8088 	beq.w	8007012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f02:	4b99      	ldr	r3, [pc, #612]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f0c:	4b96      	ldr	r3, [pc, #600]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f10:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f14:	2b10      	cmp	r3, #16
 8006f16:	d007      	beq.n	8006f28 <HAL_RCC_OscConfig+0x48>
 8006f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1a:	2b18      	cmp	r3, #24
 8006f1c:	d111      	bne.n	8006f42 <HAL_RCC_OscConfig+0x62>
 8006f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f20:	f003 0303 	and.w	r3, r3, #3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d10c      	bne.n	8006f42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f28:	4b8f      	ldr	r3, [pc, #572]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d06d      	beq.n	8007010 <HAL_RCC_OscConfig+0x130>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d169      	bne.n	8007010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f000 bc21 	b.w	8007784 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f4a:	d106      	bne.n	8006f5a <HAL_RCC_OscConfig+0x7a>
 8006f4c:	4b86      	ldr	r3, [pc, #536]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a85      	ldr	r2, [pc, #532]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	e02e      	b.n	8006fb8 <HAL_RCC_OscConfig+0xd8>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10c      	bne.n	8006f7c <HAL_RCC_OscConfig+0x9c>
 8006f62:	4b81      	ldr	r3, [pc, #516]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a80      	ldr	r2, [pc, #512]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	4b7e      	ldr	r3, [pc, #504]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a7d      	ldr	r2, [pc, #500]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	e01d      	b.n	8006fb8 <HAL_RCC_OscConfig+0xd8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f84:	d10c      	bne.n	8006fa0 <HAL_RCC_OscConfig+0xc0>
 8006f86:	4b78      	ldr	r3, [pc, #480]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a77      	ldr	r2, [pc, #476]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	4b75      	ldr	r3, [pc, #468]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a74      	ldr	r2, [pc, #464]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	e00b      	b.n	8006fb8 <HAL_RCC_OscConfig+0xd8>
 8006fa0:	4b71      	ldr	r3, [pc, #452]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a70      	ldr	r2, [pc, #448]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006faa:	6013      	str	r3, [r2, #0]
 8006fac:	4b6e      	ldr	r3, [pc, #440]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a6d      	ldr	r2, [pc, #436]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d013      	beq.n	8006fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc0:	f7fe fa0e 	bl	80053e0 <HAL_GetTick>
 8006fc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fc6:	e008      	b.n	8006fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fc8:	f7fe fa0a 	bl	80053e0 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b64      	cmp	r3, #100	@ 0x64
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e3d4      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fda:	4b63      	ldr	r3, [pc, #396]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f0      	beq.n	8006fc8 <HAL_RCC_OscConfig+0xe8>
 8006fe6:	e014      	b.n	8007012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe8:	f7fe f9fa 	bl	80053e0 <HAL_GetTick>
 8006fec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ff0:	f7fe f9f6 	bl	80053e0 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b64      	cmp	r3, #100	@ 0x64
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e3c0      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007002:	4b59      	ldr	r3, [pc, #356]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f0      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x110>
 800700e:	e000      	b.n	8007012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 80ca 	beq.w	80071b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007020:	4b51      	ldr	r3, [pc, #324]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007028:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800702a:	4b4f      	ldr	r3, [pc, #316]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 800702c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <HAL_RCC_OscConfig+0x166>
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	2b18      	cmp	r3, #24
 800703a:	d156      	bne.n	80070ea <HAL_RCC_OscConfig+0x20a>
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d151      	bne.n	80070ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007046:	4b48      	ldr	r3, [pc, #288]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <HAL_RCC_OscConfig+0x17e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e392      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800705e:	4b42      	ldr	r3, [pc, #264]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f023 0219 	bic.w	r2, r3, #25
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	493f      	ldr	r1, [pc, #252]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 800706c:	4313      	orrs	r3, r2
 800706e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007070:	f7fe f9b6 	bl	80053e0 <HAL_GetTick>
 8007074:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007078:	f7fe f9b2 	bl	80053e0 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e37c      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800708a:	4b37      	ldr	r3, [pc, #220]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007096:	f7fe f9d3 	bl	8005440 <HAL_GetREVID>
 800709a:	4603      	mov	r3, r0
 800709c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d817      	bhi.n	80070d4 <HAL_RCC_OscConfig+0x1f4>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	2b40      	cmp	r3, #64	@ 0x40
 80070aa:	d108      	bne.n	80070be <HAL_RCC_OscConfig+0x1de>
 80070ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80070b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 80070b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070bc:	e07a      	b.n	80071b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070be:	4b2a      	ldr	r3, [pc, #168]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	031b      	lsls	r3, r3, #12
 80070cc:	4926      	ldr	r1, [pc, #152]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070d2:	e06f      	b.n	80071b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d4:	4b24      	ldr	r3, [pc, #144]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	4921      	ldr	r1, [pc, #132]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e8:	e064      	b.n	80071b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d047      	beq.n	8007182 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f023 0219 	bic.w	r2, r3, #25
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	491a      	ldr	r1, [pc, #104]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007100:	4313      	orrs	r3, r2
 8007102:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fe f96c 	bl	80053e0 <HAL_GetTick>
 8007108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800710c:	f7fe f968 	bl	80053e0 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e332      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800711e:	4b12      	ldr	r3, [pc, #72]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0f0      	beq.n	800710c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800712a:	f7fe f989 	bl	8005440 <HAL_GetREVID>
 800712e:	4603      	mov	r3, r0
 8007130:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007134:	4293      	cmp	r3, r2
 8007136:	d819      	bhi.n	800716c <HAL_RCC_OscConfig+0x28c>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b40      	cmp	r3, #64	@ 0x40
 800713e:	d108      	bne.n	8007152 <HAL_RCC_OscConfig+0x272>
 8007140:	4b09      	ldr	r3, [pc, #36]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007148:	4a07      	ldr	r2, [pc, #28]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 800714a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800714e:	6053      	str	r3, [r2, #4]
 8007150:	e030      	b.n	80071b4 <HAL_RCC_OscConfig+0x2d4>
 8007152:	4b05      	ldr	r3, [pc, #20]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	031b      	lsls	r3, r3, #12
 8007160:	4901      	ldr	r1, [pc, #4]	@ (8007168 <HAL_RCC_OscConfig+0x288>)
 8007162:	4313      	orrs	r3, r2
 8007164:	604b      	str	r3, [r1, #4]
 8007166:	e025      	b.n	80071b4 <HAL_RCC_OscConfig+0x2d4>
 8007168:	58024400 	.word	0x58024400
 800716c:	4b9a      	ldr	r3, [pc, #616]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	061b      	lsls	r3, r3, #24
 800717a:	4997      	ldr	r1, [pc, #604]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800717c:	4313      	orrs	r3, r2
 800717e:	604b      	str	r3, [r1, #4]
 8007180:	e018      	b.n	80071b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007182:	4b95      	ldr	r3, [pc, #596]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a94      	ldr	r2, [pc, #592]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fe f927 	bl	80053e0 <HAL_GetTick>
 8007192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007196:	f7fe f923 	bl	80053e0 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e2ed      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071a8:	4b8b      	ldr	r3, [pc, #556]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f0      	bne.n	8007196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80a9 	beq.w	8007314 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071c2:	4b85      	ldr	r3, [pc, #532]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071cc:	4b82      	ldr	r3, [pc, #520]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d007      	beq.n	80071e8 <HAL_RCC_OscConfig+0x308>
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b18      	cmp	r3, #24
 80071dc:	d13a      	bne.n	8007254 <HAL_RCC_OscConfig+0x374>
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d135      	bne.n	8007254 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071e8:	4b7b      	ldr	r3, [pc, #492]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_RCC_OscConfig+0x320>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	2b80      	cmp	r3, #128	@ 0x80
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e2c1      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007200:	f7fe f91e 	bl	8005440 <HAL_GetREVID>
 8007204:	4603      	mov	r3, r0
 8007206:	f241 0203 	movw	r2, #4099	@ 0x1003
 800720a:	4293      	cmp	r3, r2
 800720c:	d817      	bhi.n	800723e <HAL_RCC_OscConfig+0x35e>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	2b20      	cmp	r3, #32
 8007214:	d108      	bne.n	8007228 <HAL_RCC_OscConfig+0x348>
 8007216:	4b70      	ldr	r3, [pc, #448]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800721e:	4a6e      	ldr	r2, [pc, #440]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007220:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007224:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007226:	e075      	b.n	8007314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007228:	4b6b      	ldr	r3, [pc, #428]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	069b      	lsls	r3, r3, #26
 8007236:	4968      	ldr	r1, [pc, #416]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007238:	4313      	orrs	r3, r2
 800723a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800723c:	e06a      	b.n	8007314 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800723e:	4b66      	ldr	r3, [pc, #408]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	061b      	lsls	r3, r3, #24
 800724c:	4962      	ldr	r1, [pc, #392]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800724e:	4313      	orrs	r3, r2
 8007250:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007252:	e05f      	b.n	8007314 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d042      	beq.n	80072e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800725c:	4b5e      	ldr	r3, [pc, #376]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a5d      	ldr	r2, [pc, #372]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007268:	f7fe f8ba 	bl	80053e0 <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007270:	f7fe f8b6 	bl	80053e0 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e280      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007282:	4b55      	ldr	r3, [pc, #340]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800728e:	f7fe f8d7 	bl	8005440 <HAL_GetREVID>
 8007292:	4603      	mov	r3, r0
 8007294:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007298:	4293      	cmp	r3, r2
 800729a:	d817      	bhi.n	80072cc <HAL_RCC_OscConfig+0x3ec>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d108      	bne.n	80072b6 <HAL_RCC_OscConfig+0x3d6>
 80072a4:	4b4c      	ldr	r3, [pc, #304]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80072ac:	4a4a      	ldr	r2, [pc, #296]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80072ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072b2:	6053      	str	r3, [r2, #4]
 80072b4:	e02e      	b.n	8007314 <HAL_RCC_OscConfig+0x434>
 80072b6:	4b48      	ldr	r3, [pc, #288]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	069b      	lsls	r3, r3, #26
 80072c4:	4944      	ldr	r1, [pc, #272]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	604b      	str	r3, [r1, #4]
 80072ca:	e023      	b.n	8007314 <HAL_RCC_OscConfig+0x434>
 80072cc:	4b42      	ldr	r3, [pc, #264]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	061b      	lsls	r3, r3, #24
 80072da:	493f      	ldr	r1, [pc, #252]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	60cb      	str	r3, [r1, #12]
 80072e0:	e018      	b.n	8007314 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80072e2:	4b3d      	ldr	r3, [pc, #244]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a3c      	ldr	r2, [pc, #240]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80072e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ee:	f7fe f877 	bl	80053e0 <HAL_GetTick>
 80072f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072f4:	e008      	b.n	8007308 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80072f6:	f7fe f873 	bl	80053e0 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e23d      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007308:	4b33      	ldr	r3, [pc, #204]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f0      	bne.n	80072f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0308 	and.w	r3, r3, #8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d036      	beq.n	800738e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d019      	beq.n	800735c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007328:	4b2b      	ldr	r3, [pc, #172]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800732a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732c:	4a2a      	ldr	r2, [pc, #168]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007334:	f7fe f854 	bl	80053e0 <HAL_GetTick>
 8007338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800733c:	f7fe f850 	bl	80053e0 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e21a      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800734e:	4b22      	ldr	r3, [pc, #136]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f0      	beq.n	800733c <HAL_RCC_OscConfig+0x45c>
 800735a:	e018      	b.n	800738e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800735c:	4b1e      	ldr	r3, [pc, #120]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 800735e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007360:	4a1d      	ldr	r2, [pc, #116]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007362:	f023 0301 	bic.w	r3, r3, #1
 8007366:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007368:	f7fe f83a 	bl	80053e0 <HAL_GetTick>
 800736c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007370:	f7fe f836 	bl	80053e0 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e200      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007382:	4b15      	ldr	r3, [pc, #84]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 8007384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d039      	beq.n	800740e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01c      	beq.n	80073dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073a2:	4b0d      	ldr	r3, [pc, #52]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a0c      	ldr	r2, [pc, #48]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80073a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80073ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073ae:	f7fe f817 	bl	80053e0 <HAL_GetTick>
 80073b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073b4:	e008      	b.n	80073c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073b6:	f7fe f813 	bl	80053e0 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e1dd      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073c8:	4b03      	ldr	r3, [pc, #12]	@ (80073d8 <HAL_RCC_OscConfig+0x4f8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0f0      	beq.n	80073b6 <HAL_RCC_OscConfig+0x4d6>
 80073d4:	e01b      	b.n	800740e <HAL_RCC_OscConfig+0x52e>
 80073d6:	bf00      	nop
 80073d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073dc:	4b9b      	ldr	r3, [pc, #620]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a9a      	ldr	r2, [pc, #616]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80073e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073e8:	f7fd fffa 	bl	80053e0 <HAL_GetTick>
 80073ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073f0:	f7fd fff6 	bl	80053e0 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e1c0      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007402:	4b92      	ldr	r3, [pc, #584]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f0      	bne.n	80073f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 8081 	beq.w	800751e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800741c:	4b8c      	ldr	r3, [pc, #560]	@ (8007650 <HAL_RCC_OscConfig+0x770>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a8b      	ldr	r2, [pc, #556]	@ (8007650 <HAL_RCC_OscConfig+0x770>)
 8007422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007428:	f7fd ffda 	bl	80053e0 <HAL_GetTick>
 800742c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007430:	f7fd ffd6 	bl	80053e0 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b64      	cmp	r3, #100	@ 0x64
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e1a0      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007442:	4b83      	ldr	r3, [pc, #524]	@ (8007650 <HAL_RCC_OscConfig+0x770>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0f0      	beq.n	8007430 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d106      	bne.n	8007464 <HAL_RCC_OscConfig+0x584>
 8007456:	4b7d      	ldr	r3, [pc, #500]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745a:	4a7c      	ldr	r2, [pc, #496]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	6713      	str	r3, [r2, #112]	@ 0x70
 8007462:	e02d      	b.n	80074c0 <HAL_RCC_OscConfig+0x5e0>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10c      	bne.n	8007486 <HAL_RCC_OscConfig+0x5a6>
 800746c:	4b77      	ldr	r3, [pc, #476]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007470:	4a76      	ldr	r2, [pc, #472]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007472:	f023 0301 	bic.w	r3, r3, #1
 8007476:	6713      	str	r3, [r2, #112]	@ 0x70
 8007478:	4b74      	ldr	r3, [pc, #464]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800747a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800747c:	4a73      	ldr	r2, [pc, #460]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800747e:	f023 0304 	bic.w	r3, r3, #4
 8007482:	6713      	str	r3, [r2, #112]	@ 0x70
 8007484:	e01c      	b.n	80074c0 <HAL_RCC_OscConfig+0x5e0>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b05      	cmp	r3, #5
 800748c:	d10c      	bne.n	80074a8 <HAL_RCC_OscConfig+0x5c8>
 800748e:	4b6f      	ldr	r3, [pc, #444]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007492:	4a6e      	ldr	r2, [pc, #440]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007494:	f043 0304 	orr.w	r3, r3, #4
 8007498:	6713      	str	r3, [r2, #112]	@ 0x70
 800749a:	4b6c      	ldr	r3, [pc, #432]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800749c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749e:	4a6b      	ldr	r2, [pc, #428]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80074a6:	e00b      	b.n	80074c0 <HAL_RCC_OscConfig+0x5e0>
 80074a8:	4b68      	ldr	r3, [pc, #416]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ac:	4a67      	ldr	r2, [pc, #412]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80074ae:	f023 0301 	bic.w	r3, r3, #1
 80074b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80074b4:	4b65      	ldr	r3, [pc, #404]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b8:	4a64      	ldr	r2, [pc, #400]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80074ba:	f023 0304 	bic.w	r3, r3, #4
 80074be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d015      	beq.n	80074f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c8:	f7fd ff8a 	bl	80053e0 <HAL_GetTick>
 80074cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ce:	e00a      	b.n	80074e6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d0:	f7fd ff86 	bl	80053e0 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074de:	4293      	cmp	r3, r2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e14e      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074e6:	4b59      	ldr	r3, [pc, #356]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d0ee      	beq.n	80074d0 <HAL_RCC_OscConfig+0x5f0>
 80074f2:	e014      	b.n	800751e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f4:	f7fd ff74 	bl	80053e0 <HAL_GetTick>
 80074f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074fa:	e00a      	b.n	8007512 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074fc:	f7fd ff70 	bl	80053e0 <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800750a:	4293      	cmp	r3, r2
 800750c:	d901      	bls.n	8007512 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e138      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007512:	4b4e      	ldr	r3, [pc, #312]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1ee      	bne.n	80074fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 812d 	beq.w	8007782 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007528:	4b48      	ldr	r3, [pc, #288]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007530:	2b18      	cmp	r3, #24
 8007532:	f000 80bd 	beq.w	80076b0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753a:	2b02      	cmp	r3, #2
 800753c:	f040 809e 	bne.w	800767c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007540:	4b42      	ldr	r3, [pc, #264]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a41      	ldr	r2, [pc, #260]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800754a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800754c:	f7fd ff48 	bl	80053e0 <HAL_GetTick>
 8007550:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007552:	e008      	b.n	8007566 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007554:	f7fd ff44 	bl	80053e0 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e10e      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007566:	4b39      	ldr	r3, [pc, #228]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f0      	bne.n	8007554 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007572:	4b36      	ldr	r3, [pc, #216]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007574:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007576:	4b37      	ldr	r3, [pc, #220]	@ (8007654 <HAL_RCC_OscConfig+0x774>)
 8007578:	4013      	ands	r3, r2
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007582:	0112      	lsls	r2, r2, #4
 8007584:	430a      	orrs	r2, r1
 8007586:	4931      	ldr	r1, [pc, #196]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007588:	4313      	orrs	r3, r2
 800758a:	628b      	str	r3, [r1, #40]	@ 0x28
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007590:	3b01      	subs	r3, #1
 8007592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800759a:	3b01      	subs	r3, #1
 800759c:	025b      	lsls	r3, r3, #9
 800759e:	b29b      	uxth	r3, r3
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	3b01      	subs	r3, #1
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075b4:	3b01      	subs	r3, #1
 80075b6:	061b      	lsls	r3, r3, #24
 80075b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80075bc:	4923      	ldr	r1, [pc, #140]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80075c2:	4b22      	ldr	r3, [pc, #136]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c6:	4a21      	ldr	r2, [pc, #132]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80075c8:	f023 0301 	bic.w	r3, r3, #1
 80075cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075ce:	4b1f      	ldr	r3, [pc, #124]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80075d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075d2:	4b21      	ldr	r3, [pc, #132]	@ (8007658 <HAL_RCC_OscConfig+0x778>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075da:	00d2      	lsls	r2, r2, #3
 80075dc:	491b      	ldr	r1, [pc, #108]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075e2:	4b1a      	ldr	r3, [pc, #104]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	f023 020c 	bic.w	r2, r3, #12
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	4917      	ldr	r1, [pc, #92]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075f4:	4b15      	ldr	r3, [pc, #84]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 80075f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f8:	f023 0202 	bic.w	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007600:	4912      	ldr	r1, [pc, #72]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007602:	4313      	orrs	r3, r2
 8007604:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007606:	4b11      	ldr	r3, [pc, #68]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800760a:	4a10      	ldr	r2, [pc, #64]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800760c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007610:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007612:	4b0e      	ldr	r3, [pc, #56]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007616:	4a0d      	ldr	r2, [pc, #52]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800761c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800761e:	4b0b      	ldr	r3, [pc, #44]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	4a0a      	ldr	r2, [pc, #40]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800762a:	4b08      	ldr	r3, [pc, #32]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800762c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800762e:	4a07      	ldr	r2, [pc, #28]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007630:	f043 0301 	orr.w	r3, r3, #1
 8007634:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007636:	4b05      	ldr	r3, [pc, #20]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a04      	ldr	r2, [pc, #16]	@ (800764c <HAL_RCC_OscConfig+0x76c>)
 800763c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7fd fecd 	bl	80053e0 <HAL_GetTick>
 8007646:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007648:	e011      	b.n	800766e <HAL_RCC_OscConfig+0x78e>
 800764a:	bf00      	nop
 800764c:	58024400 	.word	0x58024400
 8007650:	58024800 	.word	0x58024800
 8007654:	fffffc0c 	.word	0xfffffc0c
 8007658:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800765c:	f7fd fec0 	bl	80053e0 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e08a      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800766e:	4b47      	ldr	r3, [pc, #284]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f0      	beq.n	800765c <HAL_RCC_OscConfig+0x77c>
 800767a:	e082      	b.n	8007782 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767c:	4b43      	ldr	r3, [pc, #268]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a42      	ldr	r2, [pc, #264]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 8007682:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007688:	f7fd feaa 	bl	80053e0 <HAL_GetTick>
 800768c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007690:	f7fd fea6 	bl	80053e0 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e070      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076a2:	4b3a      	ldr	r3, [pc, #232]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f0      	bne.n	8007690 <HAL_RCC_OscConfig+0x7b0>
 80076ae:	e068      	b.n	8007782 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80076b0:	4b36      	ldr	r3, [pc, #216]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 80076b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80076b6:	4b35      	ldr	r3, [pc, #212]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d031      	beq.n	8007728 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f003 0203 	and.w	r2, r3, #3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d12a      	bne.n	8007728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	091b      	lsrs	r3, r3, #4
 80076d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076de:	429a      	cmp	r2, r3
 80076e0:	d122      	bne.n	8007728 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d11a      	bne.n	8007728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	0a5b      	lsrs	r3, r3, #9
 80076f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007700:	429a      	cmp	r2, r3
 8007702:	d111      	bne.n	8007728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	0c1b      	lsrs	r3, r3, #16
 8007708:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007710:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007712:	429a      	cmp	r2, r3
 8007714:	d108      	bne.n	8007728 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	0e1b      	lsrs	r3, r3, #24
 800771a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007722:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007724:	429a      	cmp	r2, r3
 8007726:	d001      	beq.n	800772c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e02b      	b.n	8007784 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800772c:	4b17      	ldr	r3, [pc, #92]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 800772e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007730:	08db      	lsrs	r3, r3, #3
 8007732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007736:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	429a      	cmp	r2, r3
 8007740:	d01f      	beq.n	8007782 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007742:	4b12      	ldr	r3, [pc, #72]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 8007744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007746:	4a11      	ldr	r2, [pc, #68]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 8007748:	f023 0301 	bic.w	r3, r3, #1
 800774c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800774e:	f7fd fe47 	bl	80053e0 <HAL_GetTick>
 8007752:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007754:	bf00      	nop
 8007756:	f7fd fe43 	bl	80053e0 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	4293      	cmp	r3, r2
 8007760:	d0f9      	beq.n	8007756 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007762:	4b0a      	ldr	r3, [pc, #40]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 8007764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007766:	4b0a      	ldr	r3, [pc, #40]	@ (8007790 <HAL_RCC_OscConfig+0x8b0>)
 8007768:	4013      	ands	r3, r2
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800776e:	00d2      	lsls	r2, r2, #3
 8007770:	4906      	ldr	r1, [pc, #24]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 8007772:	4313      	orrs	r3, r2
 8007774:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007776:	4b05      	ldr	r3, [pc, #20]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 8007778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777a:	4a04      	ldr	r2, [pc, #16]	@ (800778c <HAL_RCC_OscConfig+0x8ac>)
 800777c:	f043 0301 	orr.w	r3, r3, #1
 8007780:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3730      	adds	r7, #48	@ 0x30
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	58024400 	.word	0x58024400
 8007790:	ffff0007 	.word	0xffff0007

08007794 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e19c      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077a8:	4b8a      	ldr	r3, [pc, #552]	@ (80079d4 <HAL_RCC_ClockConfig+0x240>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d910      	bls.n	80077d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077b6:	4b87      	ldr	r3, [pc, #540]	@ (80079d4 <HAL_RCC_ClockConfig+0x240>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f023 020f 	bic.w	r2, r3, #15
 80077be:	4985      	ldr	r1, [pc, #532]	@ (80079d4 <HAL_RCC_ClockConfig+0x240>)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077c6:	4b83      	ldr	r3, [pc, #524]	@ (80079d4 <HAL_RCC_ClockConfig+0x240>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d001      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e184      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d010      	beq.n	8007806 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	4b7b      	ldr	r3, [pc, #492]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d908      	bls.n	8007806 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80077f4:	4b78      	ldr	r3, [pc, #480]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	4975      	ldr	r1, [pc, #468]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007802:	4313      	orrs	r3, r2
 8007804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d010      	beq.n	8007834 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	695a      	ldr	r2, [r3, #20]
 8007816:	4b70      	ldr	r3, [pc, #448]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800781e:	429a      	cmp	r2, r3
 8007820:	d908      	bls.n	8007834 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007822:	4b6d      	ldr	r3, [pc, #436]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	496a      	ldr	r1, [pc, #424]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007830:	4313      	orrs	r3, r2
 8007832:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0310 	and.w	r3, r3, #16
 800783c:	2b00      	cmp	r3, #0
 800783e:	d010      	beq.n	8007862 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699a      	ldr	r2, [r3, #24]
 8007844:	4b64      	ldr	r3, [pc, #400]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800784c:	429a      	cmp	r2, r3
 800784e:	d908      	bls.n	8007862 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007850:	4b61      	ldr	r3, [pc, #388]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	495e      	ldr	r1, [pc, #376]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 800785e:	4313      	orrs	r3, r2
 8007860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0320 	and.w	r3, r3, #32
 800786a:	2b00      	cmp	r3, #0
 800786c:	d010      	beq.n	8007890 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	4b59      	ldr	r3, [pc, #356]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800787a:	429a      	cmp	r2, r3
 800787c:	d908      	bls.n	8007890 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800787e:	4b56      	ldr	r3, [pc, #344]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	4953      	ldr	r1, [pc, #332]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 800788c:	4313      	orrs	r3, r2
 800788e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d010      	beq.n	80078be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	4b4d      	ldr	r3, [pc, #308]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d908      	bls.n	80078be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078ac:	4b4a      	ldr	r3, [pc, #296]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	f023 020f 	bic.w	r2, r3, #15
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4947      	ldr	r1, [pc, #284]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d055      	beq.n	8007976 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078ca:	4b43      	ldr	r3, [pc, #268]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	4940      	ldr	r1, [pc, #256]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d107      	bne.n	80078f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078e4:	4b3c      	ldr	r3, [pc, #240]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d121      	bne.n	8007934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e0f6      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d107      	bne.n	800790c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078fc:	4b36      	ldr	r3, [pc, #216]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d115      	bne.n	8007934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e0ea      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d107      	bne.n	8007924 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007914:	4b30      	ldr	r3, [pc, #192]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e0de      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007924:	4b2c      	ldr	r3, [pc, #176]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e0d6      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007934:	4b28      	ldr	r3, [pc, #160]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	f023 0207 	bic.w	r2, r3, #7
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4925      	ldr	r1, [pc, #148]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007942:	4313      	orrs	r3, r2
 8007944:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007946:	f7fd fd4b 	bl	80053e0 <HAL_GetTick>
 800794a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800794c:	e00a      	b.n	8007964 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800794e:	f7fd fd47 	bl	80053e0 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800795c:	4293      	cmp	r3, r2
 800795e:	d901      	bls.n	8007964 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e0be      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007964:	4b1c      	ldr	r3, [pc, #112]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	429a      	cmp	r2, r3
 8007974:	d1eb      	bne.n	800794e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d010      	beq.n	80079a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	4b14      	ldr	r3, [pc, #80]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	429a      	cmp	r2, r3
 8007990:	d208      	bcs.n	80079a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007992:	4b11      	ldr	r3, [pc, #68]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f023 020f 	bic.w	r2, r3, #15
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	490e      	ldr	r1, [pc, #56]	@ (80079d8 <HAL_RCC_ClockConfig+0x244>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079a4:	4b0b      	ldr	r3, [pc, #44]	@ (80079d4 <HAL_RCC_ClockConfig+0x240>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 030f 	and.w	r3, r3, #15
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d214      	bcs.n	80079dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079b2:	4b08      	ldr	r3, [pc, #32]	@ (80079d4 <HAL_RCC_ClockConfig+0x240>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f023 020f 	bic.w	r2, r3, #15
 80079ba:	4906      	ldr	r1, [pc, #24]	@ (80079d4 <HAL_RCC_ClockConfig+0x240>)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	4313      	orrs	r3, r2
 80079c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079c2:	4b04      	ldr	r3, [pc, #16]	@ (80079d4 <HAL_RCC_ClockConfig+0x240>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d005      	beq.n	80079dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e086      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x34e>
 80079d4:	52002000 	.word	0x52002000
 80079d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d010      	beq.n	8007a0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	4b3f      	ldr	r3, [pc, #252]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d208      	bcs.n	8007a0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079f8:	4b3c      	ldr	r3, [pc, #240]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	4939      	ldr	r1, [pc, #228]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0308 	and.w	r3, r3, #8
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d010      	beq.n	8007a38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695a      	ldr	r2, [r3, #20]
 8007a1a:	4b34      	ldr	r3, [pc, #208]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d208      	bcs.n	8007a38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a26:	4b31      	ldr	r3, [pc, #196]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	492e      	ldr	r1, [pc, #184]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d010      	beq.n	8007a66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	4b28      	ldr	r3, [pc, #160]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d208      	bcs.n	8007a66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a54:	4b25      	ldr	r3, [pc, #148]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	4922      	ldr	r1, [pc, #136]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0320 	and.w	r3, r3, #32
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d010      	beq.n	8007a94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69da      	ldr	r2, [r3, #28]
 8007a76:	4b1d      	ldr	r3, [pc, #116]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d208      	bcs.n	8007a94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a82:	4b1a      	ldr	r3, [pc, #104]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	4917      	ldr	r1, [pc, #92]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a94:	f000 f834 	bl	8007b00 <HAL_RCC_GetSysClockFreq>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	4b14      	ldr	r3, [pc, #80]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	0a1b      	lsrs	r3, r3, #8
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	4912      	ldr	r1, [pc, #72]	@ (8007af0 <HAL_RCC_ClockConfig+0x35c>)
 8007aa6:	5ccb      	ldrb	r3, [r1, r3]
 8007aa8:	f003 031f 	and.w	r3, r3, #31
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8007aec <HAL_RCC_ClockConfig+0x358>)
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	4a0d      	ldr	r2, [pc, #52]	@ (8007af0 <HAL_RCC_ClockConfig+0x35c>)
 8007abc:	5cd3      	ldrb	r3, [r2, r3]
 8007abe:	f003 031f 	and.w	r3, r3, #31
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8007af4 <HAL_RCC_ClockConfig+0x360>)
 8007aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007acc:	4a0a      	ldr	r2, [pc, #40]	@ (8007af8 <HAL_RCC_ClockConfig+0x364>)
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8007afc <HAL_RCC_ClockConfig+0x368>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fd f8f4 	bl	8004cc4 <HAL_InitTick>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	58024400 	.word	0x58024400
 8007af0:	08011560 	.word	0x08011560
 8007af4:	24000058 	.word	0x24000058
 8007af8:	24000054 	.word	0x24000054
 8007afc:	24000074 	.word	0x24000074

08007b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b089      	sub	sp, #36	@ 0x24
 8007b04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b06:	4bb3      	ldr	r3, [pc, #716]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b0e:	2b18      	cmp	r3, #24
 8007b10:	f200 8155 	bhi.w	8007dbe <HAL_RCC_GetSysClockFreq+0x2be>
 8007b14:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b81 	.word	0x08007b81
 8007b20:	08007dbf 	.word	0x08007dbf
 8007b24:	08007dbf 	.word	0x08007dbf
 8007b28:	08007dbf 	.word	0x08007dbf
 8007b2c:	08007dbf 	.word	0x08007dbf
 8007b30:	08007dbf 	.word	0x08007dbf
 8007b34:	08007dbf 	.word	0x08007dbf
 8007b38:	08007dbf 	.word	0x08007dbf
 8007b3c:	08007ba7 	.word	0x08007ba7
 8007b40:	08007dbf 	.word	0x08007dbf
 8007b44:	08007dbf 	.word	0x08007dbf
 8007b48:	08007dbf 	.word	0x08007dbf
 8007b4c:	08007dbf 	.word	0x08007dbf
 8007b50:	08007dbf 	.word	0x08007dbf
 8007b54:	08007dbf 	.word	0x08007dbf
 8007b58:	08007dbf 	.word	0x08007dbf
 8007b5c:	08007bad 	.word	0x08007bad
 8007b60:	08007dbf 	.word	0x08007dbf
 8007b64:	08007dbf 	.word	0x08007dbf
 8007b68:	08007dbf 	.word	0x08007dbf
 8007b6c:	08007dbf 	.word	0x08007dbf
 8007b70:	08007dbf 	.word	0x08007dbf
 8007b74:	08007dbf 	.word	0x08007dbf
 8007b78:	08007dbf 	.word	0x08007dbf
 8007b7c:	08007bb3 	.word	0x08007bb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b80:	4b94      	ldr	r3, [pc, #592]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d009      	beq.n	8007ba0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b8c:	4b91      	ldr	r3, [pc, #580]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	08db      	lsrs	r3, r3, #3
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	4a90      	ldr	r2, [pc, #576]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b9e:	e111      	b.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007ba0:	4b8d      	ldr	r3, [pc, #564]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ba2:	61bb      	str	r3, [r7, #24]
      break;
 8007ba4:	e10e      	b.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8007ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ba8:	61bb      	str	r3, [r7, #24]
      break;
 8007baa:	e10b      	b.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007bac:	4b8c      	ldr	r3, [pc, #560]	@ (8007de0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007bae:	61bb      	str	r3, [r7, #24]
      break;
 8007bb0:	e108      	b.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bb2:	4b88      	ldr	r3, [pc, #544]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb6:	f003 0303 	and.w	r3, r3, #3
 8007bba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007bbc:	4b85      	ldr	r3, [pc, #532]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc0:	091b      	lsrs	r3, r3, #4
 8007bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bc8:	4b82      	ldr	r3, [pc, #520]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007bd2:	4b80      	ldr	r3, [pc, #512]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bd6:	08db      	lsrs	r3, r3, #3
 8007bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 80e1 	beq.w	8007db8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	f000 8083 	beq.w	8007d04 <HAL_RCC_GetSysClockFreq+0x204>
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	f200 80a1 	bhi.w	8007d48 <HAL_RCC_GetSysClockFreq+0x248>
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_RCC_GetSysClockFreq+0x114>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d056      	beq.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c12:	e099      	b.n	8007d48 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c14:	4b6f      	ldr	r3, [pc, #444]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d02d      	beq.n	8007c7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c20:	4b6c      	ldr	r3, [pc, #432]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	08db      	lsrs	r3, r3, #3
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	4a6b      	ldr	r2, [pc, #428]	@ (8007dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	ee07 3a90 	vmov	s15, r3
 8007c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	ee07 3a90 	vmov	s15, r3
 8007c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c4a:	4b62      	ldr	r3, [pc, #392]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c7a:	e087      	b.n	8007d8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	ee07 3a90 	vmov	s15, r3
 8007c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007de8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c8e:	4b51      	ldr	r3, [pc, #324]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ca2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cbe:	e065      	b.n	8007d8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	ee07 3a90 	vmov	s15, r3
 8007cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cd2:	4b40      	ldr	r3, [pc, #256]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ce6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d02:	e043      	b.n	8007d8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	ee07 3a90 	vmov	s15, r3
 8007d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007df0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d16:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d46:	e021      	b.n	8007d8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d8c:	4b11      	ldr	r3, [pc, #68]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d90:	0a5b      	lsrs	r3, r3, #9
 8007d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d96:	3301      	adds	r3, #1
 8007d98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	ee07 3a90 	vmov	s15, r3
 8007da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007db0:	ee17 3a90 	vmov	r3, s15
 8007db4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007db6:	e005      	b.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61bb      	str	r3, [r7, #24]
      break;
 8007dbc:	e002      	b.n	8007dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007dbe:	4b07      	ldr	r3, [pc, #28]	@ (8007ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007dc0:	61bb      	str	r3, [r7, #24]
      break;
 8007dc2:	bf00      	nop
  }

  return sysclockfreq;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3724      	adds	r7, #36	@ 0x24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	03d09000 	.word	0x03d09000
 8007ddc:	003d0900 	.word	0x003d0900
 8007de0:	007a1200 	.word	0x007a1200
 8007de4:	46000000 	.word	0x46000000
 8007de8:	4c742400 	.word	0x4c742400
 8007dec:	4a742400 	.word	0x4a742400
 8007df0:	4af42400 	.word	0x4af42400

08007df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007dfa:	f7ff fe81 	bl	8007b00 <HAL_RCC_GetSysClockFreq>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	4b10      	ldr	r3, [pc, #64]	@ (8007e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	0a1b      	lsrs	r3, r3, #8
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	490f      	ldr	r1, [pc, #60]	@ (8007e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e0c:	5ccb      	ldrb	r3, [r1, r3]
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	fa22 f303 	lsr.w	r3, r2, r3
 8007e16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e18:	4b0a      	ldr	r3, [pc, #40]	@ (8007e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	4a09      	ldr	r2, [pc, #36]	@ (8007e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e22:	5cd3      	ldrb	r3, [r2, r3]
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2e:	4a07      	ldr	r2, [pc, #28]	@ (8007e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8007e30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e32:	4a07      	ldr	r2, [pc, #28]	@ (8007e50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e38:	4b04      	ldr	r3, [pc, #16]	@ (8007e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	58024400 	.word	0x58024400
 8007e48:	08011560 	.word	0x08011560
 8007e4c:	24000058 	.word	0x24000058
 8007e50:	24000054 	.word	0x24000054

08007e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e58:	f7ff ffcc 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	4b06      	ldr	r3, [pc, #24]	@ (8007e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	091b      	lsrs	r3, r3, #4
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	4904      	ldr	r1, [pc, #16]	@ (8007e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e6a:	5ccb      	ldrb	r3, [r1, r3]
 8007e6c:	f003 031f 	and.w	r3, r3, #31
 8007e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	08011560 	.word	0x08011560

08007e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e84:	f7ff ffb6 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	4b06      	ldr	r3, [pc, #24]	@ (8007ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	0a1b      	lsrs	r3, r3, #8
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	4904      	ldr	r1, [pc, #16]	@ (8007ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e96:	5ccb      	ldrb	r3, [r1, r3]
 8007e98:	f003 031f 	and.w	r3, r3, #31
 8007e9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	58024400 	.word	0x58024400
 8007ea8:	08011560 	.word	0x08011560

08007eac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	223f      	movs	r2, #63	@ 0x3f
 8007eba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	f003 0207 	and.w	r2, r3, #7
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007ec8:	4b17      	ldr	r3, [pc, #92]	@ (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007ed4:	4b14      	ldr	r3, [pc, #80]	@ (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f003 020f 	and.w	r2, r3, #15
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ee0:	4b11      	ldr	r3, [pc, #68]	@ (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007eec:	4b0e      	ldr	r3, [pc, #56]	@ (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007f04:	4b08      	ldr	r3, [pc, #32]	@ (8007f28 <HAL_RCC_GetClockConfig+0x7c>)
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f10:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <HAL_RCC_GetClockConfig+0x80>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 020f 	and.w	r2, r3, #15
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	52002000 	.word	0x52002000

08007f30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f34:	b0ca      	sub	sp, #296	@ 0x128
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f42:	2300      	movs	r3, #0
 8007f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f54:	2500      	movs	r5, #0
 8007f56:	ea54 0305 	orrs.w	r3, r4, r5
 8007f5a:	d049      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f66:	d02f      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f6c:	d828      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f72:	d01a      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f78:	d822      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f82:	d007      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f84:	e01c      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f86:	4bb8      	ldr	r3, [pc, #736]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8a:	4ab7      	ldr	r2, [pc, #732]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f92:	e01a      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f98:	3308      	adds	r3, #8
 8007f9a:	2102      	movs	r1, #2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 fc8f 	bl	80098c0 <RCCEx_PLL2_Config>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fa8:	e00f      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fae:	3328      	adds	r3, #40	@ 0x28
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f001 fd36 	bl	8009a24 <RCCEx_PLL3_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fbe:	e004      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fc6:	e000      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fd2:	4ba5      	ldr	r3, [pc, #660]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007fe0:	4aa1      	ldr	r2, [pc, #644]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fe6:	e003      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007ffc:	f04f 0900 	mov.w	r9, #0
 8008000:	ea58 0309 	orrs.w	r3, r8, r9
 8008004:	d047      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800800c:	2b04      	cmp	r3, #4
 800800e:	d82a      	bhi.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008010:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008016:	bf00      	nop
 8008018:	0800802d 	.word	0x0800802d
 800801c:	0800803b 	.word	0x0800803b
 8008020:	08008051 	.word	0x08008051
 8008024:	0800806f 	.word	0x0800806f
 8008028:	0800806f 	.word	0x0800806f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800802c:	4b8e      	ldr	r3, [pc, #568]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800802e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008030:	4a8d      	ldr	r2, [pc, #564]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008038:	e01a      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	3308      	adds	r3, #8
 8008040:	2100      	movs	r1, #0
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fc3c 	bl	80098c0 <RCCEx_PLL2_Config>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800804e:	e00f      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008054:	3328      	adds	r3, #40	@ 0x28
 8008056:	2100      	movs	r1, #0
 8008058:	4618      	mov	r0, r3
 800805a:	f001 fce3 	bl	8009a24 <RCCEx_PLL3_Config>
 800805e:	4603      	mov	r3, r0
 8008060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008064:	e004      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800806c:	e000      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800806e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008078:	4b7b      	ldr	r3, [pc, #492]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800807a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800807c:	f023 0107 	bic.w	r1, r3, #7
 8008080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008086:	4a78      	ldr	r2, [pc, #480]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008088:	430b      	orrs	r3, r1
 800808a:	6513      	str	r3, [r2, #80]	@ 0x50
 800808c:	e003      	b.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80080a2:	f04f 0b00 	mov.w	fp, #0
 80080a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80080aa:	d04c      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80080ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b6:	d030      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80080b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080bc:	d829      	bhi.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80080be:	2bc0      	cmp	r3, #192	@ 0xc0
 80080c0:	d02d      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080c4:	d825      	bhi.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80080c6:	2b80      	cmp	r3, #128	@ 0x80
 80080c8:	d018      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80080ca:	2b80      	cmp	r3, #128	@ 0x80
 80080cc:	d821      	bhi.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80080d2:	2b40      	cmp	r3, #64	@ 0x40
 80080d4:	d007      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80080d6:	e01c      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d8:	4b63      	ldr	r3, [pc, #396]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080dc:	4a62      	ldr	r2, [pc, #392]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080e4:	e01c      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ea:	3308      	adds	r3, #8
 80080ec:	2100      	movs	r1, #0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fbe6 	bl	80098c0 <RCCEx_PLL2_Config>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080fa:	e011      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008100:	3328      	adds	r3, #40	@ 0x28
 8008102:	2100      	movs	r1, #0
 8008104:	4618      	mov	r0, r3
 8008106:	f001 fc8d 	bl	8009a24 <RCCEx_PLL3_Config>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008110:	e006      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008118:	e002      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800811e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008128:	4b4f      	ldr	r3, [pc, #316]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800812a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008136:	4a4c      	ldr	r2, [pc, #304]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008138:	430b      	orrs	r3, r1
 800813a:	6513      	str	r3, [r2, #80]	@ 0x50
 800813c:	e003      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800813e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008152:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008156:	2300      	movs	r3, #0
 8008158:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800815c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008160:	460b      	mov	r3, r1
 8008162:	4313      	orrs	r3, r2
 8008164:	d053      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800816e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008172:	d035      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008174:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008178:	d82e      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800817a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800817e:	d031      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008180:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008184:	d828      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800818a:	d01a      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800818c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008190:	d822      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008196:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800819a:	d007      	beq.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800819c:	e01c      	b.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819e:	4b32      	ldr	r3, [pc, #200]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a2:	4a31      	ldr	r2, [pc, #196]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081aa:	e01c      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b0:	3308      	adds	r3, #8
 80081b2:	2100      	movs	r1, #0
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 fb83 	bl	80098c0 <RCCEx_PLL2_Config>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80081c0:	e011      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c6:	3328      	adds	r3, #40	@ 0x28
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 fc2a 	bl	8009a24 <RCCEx_PLL3_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081d6:	e006      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081de:	e002      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80081e0:	bf00      	nop
 80081e2:	e000      	b.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80081e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10b      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80081ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80081fe:	4a1a      	ldr	r2, [pc, #104]	@ (8008268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008200:	430b      	orrs	r3, r1
 8008202:	6593      	str	r3, [r2, #88]	@ 0x58
 8008204:	e003      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800820a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800820e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800821a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800821e:	2300      	movs	r3, #0
 8008220:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008224:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008228:	460b      	mov	r3, r1
 800822a:	4313      	orrs	r3, r2
 800822c:	d056      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800822e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008236:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800823a:	d038      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800823c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008240:	d831      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008242:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008246:	d034      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008248:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800824c:	d82b      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800824e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008252:	d01d      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008258:	d825      	bhi.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d006      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800825e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008262:	d00a      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008264:	e01f      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008266:	bf00      	nop
 8008268:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800826c:	4ba2      	ldr	r3, [pc, #648]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	4aa1      	ldr	r2, [pc, #644]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008278:	e01c      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827e:	3308      	adds	r3, #8
 8008280:	2100      	movs	r1, #0
 8008282:	4618      	mov	r0, r3
 8008284:	f001 fb1c 	bl	80098c0 <RCCEx_PLL2_Config>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800828e:	e011      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008294:	3328      	adds	r3, #40	@ 0x28
 8008296:	2100      	movs	r1, #0
 8008298:	4618      	mov	r0, r3
 800829a:	f001 fbc3 	bl	8009a24 <RCCEx_PLL3_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082a4:	e006      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ac:	e002      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80082ae:	bf00      	nop
 80082b0:	e000      	b.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80082b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10b      	bne.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80082bc:	4b8e      	ldr	r3, [pc, #568]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80082c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082cc:	4a8a      	ldr	r2, [pc, #552]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082ce:	430b      	orrs	r3, r1
 80082d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80082d2:	e003      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80082dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80082e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80082ec:	2300      	movs	r3, #0
 80082ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80082f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80082f6:	460b      	mov	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	d03a      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80082fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008302:	2b30      	cmp	r3, #48	@ 0x30
 8008304:	d01f      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008306:	2b30      	cmp	r3, #48	@ 0x30
 8008308:	d819      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800830a:	2b20      	cmp	r3, #32
 800830c:	d00c      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800830e:	2b20      	cmp	r3, #32
 8008310:	d815      	bhi.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d019      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008316:	2b10      	cmp	r3, #16
 8008318:	d111      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831a:	4b77      	ldr	r3, [pc, #476]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831e:	4a76      	ldr	r2, [pc, #472]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008326:	e011      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832c:	3308      	adds	r3, #8
 800832e:	2102      	movs	r1, #2
 8008330:	4618      	mov	r0, r3
 8008332:	f001 fac5 	bl	80098c0 <RCCEx_PLL2_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800833c:	e006      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008344:	e002      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800834a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800834c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10a      	bne.n	800836a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008354:	4b68      	ldr	r3, [pc, #416]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008358:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800835c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008362:	4a65      	ldr	r2, [pc, #404]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008364:	430b      	orrs	r3, r1
 8008366:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008368:	e003      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800836e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800837e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008382:	2300      	movs	r3, #0
 8008384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008388:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800838c:	460b      	mov	r3, r1
 800838e:	4313      	orrs	r3, r2
 8008390:	d051      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800839c:	d035      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800839e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083a2:	d82e      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80083a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083a8:	d031      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80083aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083ae:	d828      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80083b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083b4:	d01a      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80083b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083ba:	d822      	bhi.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80083c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083c4:	d007      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80083c6:	e01c      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083c8:	4b4b      	ldr	r3, [pc, #300]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	4a4a      	ldr	r2, [pc, #296]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083d4:	e01c      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083da:	3308      	adds	r3, #8
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 fa6e 	bl	80098c0 <RCCEx_PLL2_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80083ea:	e011      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f0:	3328      	adds	r3, #40	@ 0x28
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fb15 	bl	8009a24 <RCCEx_PLL3_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008400:	e006      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008408:	e002      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800840a:	bf00      	nop
 800840c:	e000      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800840e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008418:	4b37      	ldr	r3, [pc, #220]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800841a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800841c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008426:	4a34      	ldr	r2, [pc, #208]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008428:	430b      	orrs	r3, r1
 800842a:	6513      	str	r3, [r2, #80]	@ 0x50
 800842c:	e003      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800842e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008442:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008446:	2300      	movs	r3, #0
 8008448:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800844c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008450:	460b      	mov	r3, r1
 8008452:	4313      	orrs	r3, r2
 8008454:	d056      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800845c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008460:	d033      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008462:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008466:	d82c      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008468:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800846c:	d02f      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800846e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008472:	d826      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008474:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008478:	d02b      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800847a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800847e:	d820      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008484:	d012      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800848a:	d81a      	bhi.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800848c:	2b00      	cmp	r3, #0
 800848e:	d022      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008494:	d115      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800849a:	3308      	adds	r3, #8
 800849c:	2101      	movs	r1, #1
 800849e:	4618      	mov	r0, r3
 80084a0:	f001 fa0e 	bl	80098c0 <RCCEx_PLL2_Config>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80084aa:	e015      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b0:	3328      	adds	r3, #40	@ 0x28
 80084b2:	2101      	movs	r1, #1
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 fab5 	bl	8009a24 <RCCEx_PLL3_Config>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80084c0:	e00a      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084c8:	e006      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80084ca:	bf00      	nop
 80084cc:	e004      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80084ce:	bf00      	nop
 80084d0:	e002      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80084d2:	bf00      	nop
 80084d4:	e000      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80084d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10d      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80084e0:	4b05      	ldr	r3, [pc, #20]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ee:	4a02      	ldr	r2, [pc, #8]	@ (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084f0:	430b      	orrs	r3, r1
 80084f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80084f4:	e006      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084f6:	bf00      	nop
 80084f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008514:	2300      	movs	r3, #0
 8008516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800851a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800851e:	460b      	mov	r3, r1
 8008520:	4313      	orrs	r3, r2
 8008522:	d055      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008528:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800852c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008530:	d033      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008536:	d82c      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853c:	d02f      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800853e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008542:	d826      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008544:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008548:	d02b      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800854a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800854e:	d820      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008554:	d012      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800855a:	d81a      	bhi.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d022      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008564:	d115      	bne.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856a:	3308      	adds	r3, #8
 800856c:	2101      	movs	r1, #1
 800856e:	4618      	mov	r0, r3
 8008570:	f001 f9a6 	bl	80098c0 <RCCEx_PLL2_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800857a:	e015      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800857c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008580:	3328      	adds	r3, #40	@ 0x28
 8008582:	2101      	movs	r1, #1
 8008584:	4618      	mov	r0, r3
 8008586:	f001 fa4d 	bl	8009a24 <RCCEx_PLL3_Config>
 800858a:	4603      	mov	r3, r0
 800858c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008590:	e00a      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008598:	e006      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800859a:	bf00      	nop
 800859c:	e004      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800859e:	bf00      	nop
 80085a0:	e002      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80085a2:	bf00      	nop
 80085a4:	e000      	b.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80085a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10b      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80085b0:	4ba3      	ldr	r3, [pc, #652]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80085b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80085c0:	4a9f      	ldr	r2, [pc, #636]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c2:	430b      	orrs	r3, r1
 80085c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80085c6:	e003      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80085d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80085dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085e0:	2300      	movs	r3, #0
 80085e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80085ea:	460b      	mov	r3, r1
 80085ec:	4313      	orrs	r3, r2
 80085ee:	d037      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80085f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085fa:	d00e      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80085fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008600:	d816      	bhi.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d018      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800860a:	d111      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800860c:	4b8c      	ldr	r3, [pc, #560]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	4a8b      	ldr	r2, [pc, #556]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008618:	e00f      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800861a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800861e:	3308      	adds	r3, #8
 8008620:	2101      	movs	r1, #1
 8008622:	4618      	mov	r0, r3
 8008624:	f001 f94c 	bl	80098c0 <RCCEx_PLL2_Config>
 8008628:	4603      	mov	r3, r0
 800862a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800862e:	e004      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008636:	e000      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800863a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008642:	4b7f      	ldr	r3, [pc, #508]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008646:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008650:	4a7b      	ldr	r2, [pc, #492]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008652:	430b      	orrs	r3, r1
 8008654:	6513      	str	r3, [r2, #80]	@ 0x50
 8008656:	e003      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800866c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008670:	2300      	movs	r3, #0
 8008672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008676:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800867a:	460b      	mov	r3, r1
 800867c:	4313      	orrs	r3, r2
 800867e:	d039      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008686:	2b03      	cmp	r3, #3
 8008688:	d81c      	bhi.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800868a:	a201      	add	r2, pc, #4	@ (adr r2, 8008690 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800868c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008690:	080086cd 	.word	0x080086cd
 8008694:	080086a1 	.word	0x080086a1
 8008698:	080086af 	.word	0x080086af
 800869c:	080086cd 	.word	0x080086cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086a0:	4b67      	ldr	r3, [pc, #412]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a4:	4a66      	ldr	r2, [pc, #408]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80086ac:	e00f      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	3308      	adds	r3, #8
 80086b4:	2102      	movs	r1, #2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f001 f902 	bl	80098c0 <RCCEx_PLL2_Config>
 80086bc:	4603      	mov	r3, r0
 80086be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80086c2:	e004      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086ca:	e000      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80086cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80086d6:	4b5a      	ldr	r3, [pc, #360]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086da:	f023 0103 	bic.w	r1, r3, #3
 80086de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086e4:	4a56      	ldr	r2, [pc, #344]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086e6:	430b      	orrs	r3, r1
 80086e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80086ea:	e003      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008700:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008704:	2300      	movs	r3, #0
 8008706:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800870a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800870e:	460b      	mov	r3, r1
 8008710:	4313      	orrs	r3, r2
 8008712:	f000 809f 	beq.w	8008854 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008716:	4b4b      	ldr	r3, [pc, #300]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a4a      	ldr	r2, [pc, #296]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800871c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008720:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008722:	f7fc fe5d 	bl	80053e0 <HAL_GetTick>
 8008726:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800872a:	e00b      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800872c:	f7fc fe58 	bl	80053e0 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	2b64      	cmp	r3, #100	@ 0x64
 800873a:	d903      	bls.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008742:	e005      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008744:	4b3f      	ldr	r3, [pc, #252]	@ (8008844 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0ed      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008754:	2b00      	cmp	r3, #0
 8008756:	d179      	bne.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008758:	4b39      	ldr	r3, [pc, #228]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800875a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800875c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008760:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008764:	4053      	eors	r3, r2
 8008766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800876a:	2b00      	cmp	r3, #0
 800876c:	d015      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800876e:	4b34      	ldr	r3, [pc, #208]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008776:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800877a:	4b31      	ldr	r3, [pc, #196]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800877c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800877e:	4a30      	ldr	r2, [pc, #192]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008784:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008786:	4b2e      	ldr	r3, [pc, #184]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878a:	4a2d      	ldr	r2, [pc, #180]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800878c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008790:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008792:	4a2b      	ldr	r2, [pc, #172]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008798:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087a6:	d118      	bne.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a8:	f7fc fe1a 	bl	80053e0 <HAL_GetTick>
 80087ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087b0:	e00d      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087b2:	f7fc fe15 	bl	80053e0 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80087bc:	1ad2      	subs	r2, r2, r3
 80087be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d903      	bls.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80087cc:	e005      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0eb      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80087da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d129      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087f2:	d10e      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80087f4:	4b12      	ldr	r3, [pc, #72]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80087fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008804:	091a      	lsrs	r2, r3, #4
 8008806:	4b10      	ldr	r3, [pc, #64]	@ (8008848 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008808:	4013      	ands	r3, r2
 800880a:	4a0d      	ldr	r2, [pc, #52]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800880c:	430b      	orrs	r3, r1
 800880e:	6113      	str	r3, [r2, #16]
 8008810:	e005      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008812:	4b0b      	ldr	r3, [pc, #44]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	4a0a      	ldr	r2, [pc, #40]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008818:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800881c:	6113      	str	r3, [r2, #16]
 800881e:	4b08      	ldr	r3, [pc, #32]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008820:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800882a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800882e:	4a04      	ldr	r2, [pc, #16]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008830:	430b      	orrs	r3, r1
 8008832:	6713      	str	r3, [r2, #112]	@ 0x70
 8008834:	e00e      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800883a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800883e:	e009      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008840:	58024400 	.word	0x58024400
 8008844:	58024800 	.word	0x58024800
 8008848:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800884c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	f002 0301 	and.w	r3, r2, #1
 8008860:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008864:	2300      	movs	r3, #0
 8008866:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800886a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800886e:	460b      	mov	r3, r1
 8008870:	4313      	orrs	r3, r2
 8008872:	f000 8089 	beq.w	8008988 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800887c:	2b28      	cmp	r3, #40	@ 0x28
 800887e:	d86b      	bhi.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008880:	a201      	add	r2, pc, #4	@ (adr r2, 8008888 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008886:	bf00      	nop
 8008888:	08008961 	.word	0x08008961
 800888c:	08008959 	.word	0x08008959
 8008890:	08008959 	.word	0x08008959
 8008894:	08008959 	.word	0x08008959
 8008898:	08008959 	.word	0x08008959
 800889c:	08008959 	.word	0x08008959
 80088a0:	08008959 	.word	0x08008959
 80088a4:	08008959 	.word	0x08008959
 80088a8:	0800892d 	.word	0x0800892d
 80088ac:	08008959 	.word	0x08008959
 80088b0:	08008959 	.word	0x08008959
 80088b4:	08008959 	.word	0x08008959
 80088b8:	08008959 	.word	0x08008959
 80088bc:	08008959 	.word	0x08008959
 80088c0:	08008959 	.word	0x08008959
 80088c4:	08008959 	.word	0x08008959
 80088c8:	08008943 	.word	0x08008943
 80088cc:	08008959 	.word	0x08008959
 80088d0:	08008959 	.word	0x08008959
 80088d4:	08008959 	.word	0x08008959
 80088d8:	08008959 	.word	0x08008959
 80088dc:	08008959 	.word	0x08008959
 80088e0:	08008959 	.word	0x08008959
 80088e4:	08008959 	.word	0x08008959
 80088e8:	08008961 	.word	0x08008961
 80088ec:	08008959 	.word	0x08008959
 80088f0:	08008959 	.word	0x08008959
 80088f4:	08008959 	.word	0x08008959
 80088f8:	08008959 	.word	0x08008959
 80088fc:	08008959 	.word	0x08008959
 8008900:	08008959 	.word	0x08008959
 8008904:	08008959 	.word	0x08008959
 8008908:	08008961 	.word	0x08008961
 800890c:	08008959 	.word	0x08008959
 8008910:	08008959 	.word	0x08008959
 8008914:	08008959 	.word	0x08008959
 8008918:	08008959 	.word	0x08008959
 800891c:	08008959 	.word	0x08008959
 8008920:	08008959 	.word	0x08008959
 8008924:	08008959 	.word	0x08008959
 8008928:	08008961 	.word	0x08008961
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800892c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008930:	3308      	adds	r3, #8
 8008932:	2101      	movs	r1, #1
 8008934:	4618      	mov	r0, r3
 8008936:	f000 ffc3 	bl	80098c0 <RCCEx_PLL2_Config>
 800893a:	4603      	mov	r3, r0
 800893c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008940:	e00f      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008946:	3328      	adds	r3, #40	@ 0x28
 8008948:	2101      	movs	r1, #1
 800894a:	4618      	mov	r0, r3
 800894c:	f001 f86a 	bl	8009a24 <RCCEx_PLL3_Config>
 8008950:	4603      	mov	r3, r0
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008956:	e004      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10a      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800896a:	4bbf      	ldr	r3, [pc, #764]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800896c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008978:	4abb      	ldr	r2, [pc, #748]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800897a:	430b      	orrs	r3, r1
 800897c:	6553      	str	r3, [r2, #84]	@ 0x54
 800897e:	e003      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f002 0302 	and.w	r3, r2, #2
 8008994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008998:	2300      	movs	r3, #0
 800899a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800899e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80089a2:	460b      	mov	r3, r1
 80089a4:	4313      	orrs	r3, r2
 80089a6:	d041      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80089a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80089ae:	2b05      	cmp	r3, #5
 80089b0:	d824      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80089b2:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	08008a05 	.word	0x08008a05
 80089bc:	080089d1 	.word	0x080089d1
 80089c0:	080089e7 	.word	0x080089e7
 80089c4:	08008a05 	.word	0x08008a05
 80089c8:	08008a05 	.word	0x08008a05
 80089cc:	08008a05 	.word	0x08008a05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d4:	3308      	adds	r3, #8
 80089d6:	2101      	movs	r1, #1
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 ff71 	bl	80098c0 <RCCEx_PLL2_Config>
 80089de:	4603      	mov	r3, r0
 80089e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089e4:	e00f      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	3328      	adds	r3, #40	@ 0x28
 80089ec:	2101      	movs	r1, #1
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 f818 	bl	8009a24 <RCCEx_PLL3_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80089fa:	e004      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a02:	e000      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10a      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008a0e:	4b96      	ldr	r3, [pc, #600]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a12:	f023 0107 	bic.w	r1, r3, #7
 8008a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a1c:	4a92      	ldr	r2, [pc, #584]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a22:	e003      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	f002 0304 	and.w	r3, r2, #4
 8008a38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	d044      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a54:	2b05      	cmp	r3, #5
 8008a56:	d825      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008a58:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008aad 	.word	0x08008aad
 8008a64:	08008a79 	.word	0x08008a79
 8008a68:	08008a8f 	.word	0x08008a8f
 8008a6c:	08008aad 	.word	0x08008aad
 8008a70:	08008aad 	.word	0x08008aad
 8008a74:	08008aad 	.word	0x08008aad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 ff1d 	bl	80098c0 <RCCEx_PLL2_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a8c:	e00f      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	3328      	adds	r3, #40	@ 0x28
 8008a94:	2101      	movs	r1, #1
 8008a96:	4618      	mov	r0, r3
 8008a98:	f000 ffc4 	bl	8009a24 <RCCEx_PLL3_Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008aa2:	e004      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008aaa:	e000      	b.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10b      	bne.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aba:	f023 0107 	bic.w	r1, r3, #7
 8008abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ac6:	4a68      	ldr	r2, [pc, #416]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8008acc:	e003      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f002 0320 	and.w	r3, r2, #32
 8008ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008af0:	460b      	mov	r3, r1
 8008af2:	4313      	orrs	r3, r2
 8008af4:	d055      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b02:	d033      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b08:	d82c      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b0e:	d02f      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b14:	d826      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b1a:	d02b      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008b1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b20:	d820      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b26:	d012      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b2c:	d81a      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d022      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b36:	d115      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	2100      	movs	r1, #0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 febd 	bl	80098c0 <RCCEx_PLL2_Config>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b4c:	e015      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b52:	3328      	adds	r3, #40	@ 0x28
 8008b54:	2102      	movs	r1, #2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 ff64 	bl	8009a24 <RCCEx_PLL3_Config>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008b62:	e00a      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b6a:	e006      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b6c:	bf00      	nop
 8008b6e:	e004      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b70:	bf00      	nop
 8008b72:	e002      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b74:	bf00      	nop
 8008b76:	e000      	b.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10b      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b82:	4b39      	ldr	r3, [pc, #228]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b92:	4a35      	ldr	r2, [pc, #212]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6553      	str	r3, [r2, #84]	@ 0x54
 8008b98:	e003      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008bb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	d058      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008bca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008bce:	d033      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008bd0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008bd4:	d82c      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bda:	d02f      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008be0:	d826      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008be2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008be6:	d02b      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008be8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bec:	d820      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bf2:	d012      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bf8:	d81a      	bhi.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d022      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c02:	d115      	bne.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c08:	3308      	adds	r3, #8
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fe57 	bl	80098c0 <RCCEx_PLL2_Config>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008c18:	e015      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1e:	3328      	adds	r3, #40	@ 0x28
 8008c20:	2102      	movs	r1, #2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fefe 	bl	8009a24 <RCCEx_PLL3_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008c2e:	e00a      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c36:	e006      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c38:	bf00      	nop
 8008c3a:	e004      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c3c:	bf00      	nop
 8008c3e:	e002      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c40:	bf00      	nop
 8008c42:	e000      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10e      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c4e:	4b06      	ldr	r3, [pc, #24]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c5e:	4a02      	ldr	r2, [pc, #8]	@ (8008c68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c60:	430b      	orrs	r3, r1
 8008c62:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c64:	e006      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008c66:	bf00      	nop
 8008c68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008c80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d055      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ca0:	d033      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008ca2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ca6:	d82c      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cac:	d02f      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cb2:	d826      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008cb4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008cb8:	d02b      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008cba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008cbe:	d820      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cc4:	d012      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cca:	d81a      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d022      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cd4:	d115      	bne.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cda:	3308      	adds	r3, #8
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fdee 	bl	80098c0 <RCCEx_PLL2_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008cea:	e015      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf0:	3328      	adds	r3, #40	@ 0x28
 8008cf2:	2102      	movs	r1, #2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fe95 	bl	8009a24 <RCCEx_PLL3_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008d00:	e00a      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d08:	e006      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008d0a:	bf00      	nop
 8008d0c:	e004      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008d0e:	bf00      	nop
 8008d10:	e002      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10b      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008d20:	4ba1      	ldr	r3, [pc, #644]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d30:	4a9d      	ldr	r2, [pc, #628]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d32:	430b      	orrs	r3, r1
 8008d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d36:	e003      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f002 0308 	and.w	r3, r2, #8
 8008d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d50:	2300      	movs	r3, #0
 8008d52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	d01e      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d6c:	d10c      	bne.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d72:	3328      	adds	r3, #40	@ 0x28
 8008d74:	2102      	movs	r1, #2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 fe54 	bl	8009a24 <RCCEx_PLL3_Config>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008d88:	4b87      	ldr	r3, [pc, #540]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d98:	4a83      	ldr	r2, [pc, #524]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f002 0310 	and.w	r3, r2, #16
 8008daa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008dae:	2300      	movs	r3, #0
 8008db0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008db4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008db8:	460b      	mov	r3, r1
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	d01e      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dca:	d10c      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd0:	3328      	adds	r3, #40	@ 0x28
 8008dd2:	2102      	movs	r1, #2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fe25 	bl	8009a24 <RCCEx_PLL3_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008de6:	4b70      	ldr	r3, [pc, #448]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008df6:	4a6c      	ldr	r2, [pc, #432]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008e08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008e12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008e16:	460b      	mov	r3, r1
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	d03e      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e28:	d022      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008e2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e2e:	d81b      	bhi.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e38:	d00b      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008e3a:	e015      	b.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e40:	3308      	adds	r3, #8
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fd3b 	bl	80098c0 <RCCEx_PLL2_Config>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e50:	e00f      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e56:	3328      	adds	r3, #40	@ 0x28
 8008e58:	2102      	movs	r1, #2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fde2 	bl	8009a24 <RCCEx_PLL3_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008e66:	e004      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e6e:	e000      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008e8a:	4a47      	ldr	r2, [pc, #284]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e90:	e003      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ea6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008eac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	d03b      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ebe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ec2:	d01f      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ec4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ec8:	d818      	bhi.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ece:	d003      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008ed0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ed4:	d007      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008ed6:	e011      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed8:	4b33      	ldr	r3, [pc, #204]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008edc:	4a32      	ldr	r2, [pc, #200]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ee4:	e00f      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eea:	3328      	adds	r3, #40	@ 0x28
 8008eec:	2101      	movs	r1, #1
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fd98 	bl	8009a24 <RCCEx_PLL3_Config>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008efa:	e004      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f02:	e000      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10b      	bne.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f0e:	4b26      	ldr	r3, [pc, #152]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f1e:	4a22      	ldr	r2, [pc, #136]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f20:	430b      	orrs	r3, r1
 8008f22:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f24:	e003      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008f3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008f44:	460b      	mov	r3, r1
 8008f46:	4313      	orrs	r3, r2
 8008f48:	d034      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f58:	d007      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008f5a:	e011      	b.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f5c:	4b12      	ldr	r3, [pc, #72]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f60:	4a11      	ldr	r2, [pc, #68]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f68:	e00e      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6e:	3308      	adds	r3, #8
 8008f70:	2102      	movs	r1, #2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fca4 	bl	80098c0 <RCCEx_PLL2_Config>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f7e:	e003      	b.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10d      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f90:	4b05      	ldr	r3, [pc, #20]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f9e:	4a02      	ldr	r2, [pc, #8]	@ (8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fa0:	430b      	orrs	r3, r1
 8008fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008fa4:	e006      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008fa6:	bf00      	nop
 8008fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008fc6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	d00c      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd4:	3328      	adds	r3, #40	@ 0x28
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fd23 	bl	8009a24 <RCCEx_PLL3_Config>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008ff6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ffc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009000:	460b      	mov	r3, r1
 8009002:	4313      	orrs	r3, r2
 8009004:	d038      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800900e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009012:	d018      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009014:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009018:	d811      	bhi.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800901a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800901e:	d014      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009024:	d80b      	bhi.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800902a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800902e:	d106      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009030:	4bc3      	ldr	r3, [pc, #780]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009034:	4ac2      	ldr	r2, [pc, #776]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800903a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800903c:	e008      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009044:	e004      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009046:	bf00      	nop
 8009048:	e002      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800904a:	bf00      	nop
 800904c:	e000      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800904e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10b      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009058:	4bb9      	ldr	r3, [pc, #740]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800905a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009068:	4ab5      	ldr	r2, [pc, #724]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800906a:	430b      	orrs	r3, r1
 800906c:	6553      	str	r3, [r2, #84]	@ 0x54
 800906e:	e003      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009084:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009086:	2300      	movs	r3, #0
 8009088:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800908a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800908e:	460b      	mov	r3, r1
 8009090:	4313      	orrs	r3, r2
 8009092:	d009      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009094:	4baa      	ldr	r3, [pc, #680]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009098:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800909c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a2:	4aa7      	ldr	r2, [pc, #668]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80090b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80090b6:	2300      	movs	r3, #0
 80090b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80090ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80090be:	460b      	mov	r3, r1
 80090c0:	4313      	orrs	r3, r2
 80090c2:	d00a      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80090c4:	4b9e      	ldr	r3, [pc, #632]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80090cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80090d4:	4a9a      	ldr	r2, [pc, #616]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090d6:	430b      	orrs	r3, r1
 80090d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80090e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090e8:	2300      	movs	r3, #0
 80090ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80090f0:	460b      	mov	r3, r1
 80090f2:	4313      	orrs	r3, r2
 80090f4:	d009      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80090f6:	4b92      	ldr	r3, [pc, #584]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80090fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009104:	4a8e      	ldr	r2, [pc, #568]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009106:	430b      	orrs	r3, r1
 8009108:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009116:	643b      	str	r3, [r7, #64]	@ 0x40
 8009118:	2300      	movs	r3, #0
 800911a:	647b      	str	r3, [r7, #68]	@ 0x44
 800911c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009120:	460b      	mov	r3, r1
 8009122:	4313      	orrs	r3, r2
 8009124:	d00e      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009126:	4b86      	ldr	r3, [pc, #536]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	4a85      	ldr	r2, [pc, #532]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800912c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009130:	6113      	str	r3, [r2, #16]
 8009132:	4b83      	ldr	r3, [pc, #524]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009134:	6919      	ldr	r1, [r3, #16]
 8009136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800913e:	4a80      	ldr	r2, [pc, #512]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009140:	430b      	orrs	r3, r1
 8009142:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009150:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009152:	2300      	movs	r3, #0
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009156:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800915a:	460b      	mov	r3, r1
 800915c:	4313      	orrs	r3, r2
 800915e:	d009      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009160:	4b77      	ldr	r3, [pc, #476]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009164:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800916c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800916e:	4a74      	ldr	r2, [pc, #464]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009170:	430b      	orrs	r3, r1
 8009172:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009180:	633b      	str	r3, [r7, #48]	@ 0x30
 8009182:	2300      	movs	r3, #0
 8009184:	637b      	str	r3, [r7, #52]	@ 0x34
 8009186:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800918a:	460b      	mov	r3, r1
 800918c:	4313      	orrs	r3, r2
 800918e:	d00a      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009190:	4b6b      	ldr	r3, [pc, #428]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009194:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091a0:	4a67      	ldr	r2, [pc, #412]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80091a2:	430b      	orrs	r3, r1
 80091a4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80091a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	2100      	movs	r1, #0
 80091b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80091bc:	460b      	mov	r3, r1
 80091be:	4313      	orrs	r3, r2
 80091c0:	d011      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c6:	3308      	adds	r3, #8
 80091c8:	2100      	movs	r1, #0
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fb78 	bl	80098c0 <RCCEx_PLL2_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80091d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80091e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	2100      	movs	r1, #0
 80091f0:	6239      	str	r1, [r7, #32]
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80091f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80091fc:	460b      	mov	r3, r1
 80091fe:	4313      	orrs	r3, r2
 8009200:	d011      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009206:	3308      	adds	r3, #8
 8009208:	2101      	movs	r1, #1
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fb58 	bl	80098c0 <RCCEx_PLL2_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	2100      	movs	r1, #0
 8009230:	61b9      	str	r1, [r7, #24]
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	61fb      	str	r3, [r7, #28]
 8009238:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800923c:	460b      	mov	r3, r1
 800923e:	4313      	orrs	r3, r2
 8009240:	d011      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009246:	3308      	adds	r3, #8
 8009248:	2102      	movs	r1, #2
 800924a:	4618      	mov	r0, r3
 800924c:	f000 fb38 	bl	80098c0 <RCCEx_PLL2_Config>
 8009250:	4603      	mov	r3, r0
 8009252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	2100      	movs	r1, #0
 8009270:	6139      	str	r1, [r7, #16]
 8009272:	f003 0308 	and.w	r3, r3, #8
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800927c:	460b      	mov	r3, r1
 800927e:	4313      	orrs	r3, r2
 8009280:	d011      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009286:	3328      	adds	r3, #40	@ 0x28
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fbca 	bl	8009a24 <RCCEx_PLL3_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800929e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80092a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	2100      	movs	r1, #0
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80092bc:	460b      	mov	r3, r1
 80092be:	4313      	orrs	r3, r2
 80092c0:	d011      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c6:	3328      	adds	r3, #40	@ 0x28
 80092c8:	2101      	movs	r1, #1
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 fbaa 	bl	8009a24 <RCCEx_PLL3_Config>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80092d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80092e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	2100      	movs	r1, #0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	f003 0320 	and.w	r3, r3, #32
 80092f6:	607b      	str	r3, [r7, #4]
 80092f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80092fc:	460b      	mov	r3, r1
 80092fe:	4313      	orrs	r3, r2
 8009300:	d011      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009306:	3328      	adds	r3, #40	@ 0x28
 8009308:	2102      	movs	r1, #2
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fb8a 	bl	8009a24 <RCCEx_PLL3_Config>
 8009310:	4603      	mov	r3, r0
 8009312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800931e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009326:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800932e:	2300      	movs	r3, #0
 8009330:	e000      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
}
 8009334:	4618      	mov	r0, r3
 8009336:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800933a:	46bd      	mov	sp, r7
 800933c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009340:	58024400 	.word	0x58024400

08009344 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009348:	f7fe fd54 	bl	8007df4 <HAL_RCC_GetHCLKFreq>
 800934c:	4602      	mov	r2, r0
 800934e:	4b06      	ldr	r3, [pc, #24]	@ (8009368 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	091b      	lsrs	r3, r3, #4
 8009354:	f003 0307 	and.w	r3, r3, #7
 8009358:	4904      	ldr	r1, [pc, #16]	@ (800936c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800935a:	5ccb      	ldrb	r3, [r1, r3]
 800935c:	f003 031f 	and.w	r3, r3, #31
 8009360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009364:	4618      	mov	r0, r3
 8009366:	bd80      	pop	{r7, pc}
 8009368:	58024400 	.word	0x58024400
 800936c:	08011560 	.word	0x08011560

08009370 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009370:	b480      	push	{r7}
 8009372:	b089      	sub	sp, #36	@ 0x24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009378:	4ba1      	ldr	r3, [pc, #644]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800937a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937c:	f003 0303 	and.w	r3, r3, #3
 8009380:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009382:	4b9f      	ldr	r3, [pc, #636]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009386:	0b1b      	lsrs	r3, r3, #12
 8009388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800938c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800938e:	4b9c      	ldr	r3, [pc, #624]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009392:	091b      	lsrs	r3, r3, #4
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800939a:	4b99      	ldr	r3, [pc, #612]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800939c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939e:	08db      	lsrs	r3, r3, #3
 80093a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	fb02 f303 	mul.w	r3, r2, r3
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8111 	beq.w	80095e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	f000 8083 	beq.w	80094cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b02      	cmp	r3, #2
 80093ca:	f200 80a1 	bhi.w	8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d056      	beq.n	8009488 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80093da:	e099      	b.n	8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093dc:	4b88      	ldr	r3, [pc, #544]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0320 	and.w	r3, r3, #32
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d02d      	beq.n	8009444 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093e8:	4b85      	ldr	r3, [pc, #532]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	08db      	lsrs	r3, r3, #3
 80093ee:	f003 0303 	and.w	r3, r3, #3
 80093f2:	4a84      	ldr	r2, [pc, #528]	@ (8009604 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80093f4:	fa22 f303 	lsr.w	r3, r2, r3
 80093f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	ee07 3a90 	vmov	s15, r3
 8009400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	ee07 3a90 	vmov	s15, r3
 800940a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009412:	4b7b      	ldr	r3, [pc, #492]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009422:	ed97 6a03 	vldr	s12, [r7, #12]
 8009426:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800942a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009442:	e087      	b.n	8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	ee07 3a90 	vmov	s15, r3
 800944a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800960c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009456:	4b6a      	ldr	r3, [pc, #424]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009466:	ed97 6a03 	vldr	s12, [r7, #12]
 800946a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800946e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800947a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009486:	e065      	b.n	8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	ee07 3a90 	vmov	s15, r3
 800948e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009492:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800949a:	4b59      	ldr	r3, [pc, #356]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800949c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094ca:	e043      	b.n	8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009614 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80094da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094de:	4b48      	ldr	r3, [pc, #288]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80094f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800950a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800950e:	e021      	b.n	8009554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	ee07 3a90 	vmov	s15, r3
 8009516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800951e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009522:	4b37      	ldr	r3, [pc, #220]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009532:	ed97 6a03 	vldr	s12, [r7, #12]
 8009536:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800953a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800953e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800954a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800954e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009552:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009554:	4b2a      	ldr	r3, [pc, #168]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009558:	0a5b      	lsrs	r3, r3, #9
 800955a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800956a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800956e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800957a:	ee17 2a90 	vmov	r2, s15
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009582:	4b1f      	ldr	r3, [pc, #124]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009586:	0c1b      	lsrs	r3, r3, #16
 8009588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800958c:	ee07 3a90 	vmov	s15, r3
 8009590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009594:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009598:	ee37 7a87 	vadd.f32	s14, s15, s14
 800959c:	edd7 6a07 	vldr	s13, [r7, #28]
 80095a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a8:	ee17 2a90 	vmov	r2, s15
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80095b0:	4b13      	ldr	r3, [pc, #76]	@ (8009600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b4:	0e1b      	lsrs	r3, r3, #24
 80095b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80095ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d6:	ee17 2a90 	vmov	r2, s15
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80095de:	e008      	b.n	80095f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	609a      	str	r2, [r3, #8]
}
 80095f2:	bf00      	nop
 80095f4:	3724      	adds	r7, #36	@ 0x24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	58024400 	.word	0x58024400
 8009604:	03d09000 	.word	0x03d09000
 8009608:	46000000 	.word	0x46000000
 800960c:	4c742400 	.word	0x4c742400
 8009610:	4a742400 	.word	0x4a742400
 8009614:	4af42400 	.word	0x4af42400

08009618 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009618:	b480      	push	{r7}
 800961a:	b089      	sub	sp, #36	@ 0x24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009620:	4ba1      	ldr	r3, [pc, #644]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009624:	f003 0303 	and.w	r3, r3, #3
 8009628:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800962a:	4b9f      	ldr	r3, [pc, #636]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800962c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800962e:	0d1b      	lsrs	r3, r3, #20
 8009630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009634:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009636:	4b9c      	ldr	r3, [pc, #624]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963a:	0a1b      	lsrs	r3, r3, #8
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009642:	4b99      	ldr	r3, [pc, #612]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009646:	08db      	lsrs	r3, r3, #3
 8009648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	fb02 f303 	mul.w	r3, r2, r3
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 8111 	beq.w	8009888 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	2b02      	cmp	r3, #2
 800966a:	f000 8083 	beq.w	8009774 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b02      	cmp	r3, #2
 8009672:	f200 80a1 	bhi.w	80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d056      	beq.n	8009730 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009682:	e099      	b.n	80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009684:	4b88      	ldr	r3, [pc, #544]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b00      	cmp	r3, #0
 800968e:	d02d      	beq.n	80096ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009690:	4b85      	ldr	r3, [pc, #532]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	08db      	lsrs	r3, r3, #3
 8009696:	f003 0303 	and.w	r3, r3, #3
 800969a:	4a84      	ldr	r2, [pc, #528]	@ (80098ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800969c:	fa22 f303 	lsr.w	r3, r2, r3
 80096a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ba:	4b7b      	ldr	r3, [pc, #492]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096ea:	e087      	b.n	80097fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80098b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80096fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fe:	4b6a      	ldr	r3, [pc, #424]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009712:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800972e:	e065      	b.n	80097fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800973e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009742:	4b59      	ldr	r3, [pc, #356]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009752:	ed97 6a03 	vldr	s12, [r7, #12]
 8009756:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800975a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009772:	e043      	b.n	80097fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80098bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009786:	4b48      	ldr	r3, [pc, #288]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009796:	ed97 6a03 	vldr	s12, [r7, #12]
 800979a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800979e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097b6:	e021      	b.n	80097fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	ee07 3a90 	vmov	s15, r3
 80097be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80097c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ca:	4b37      	ldr	r3, [pc, #220]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097d2:	ee07 3a90 	vmov	s15, r3
 80097d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097da:	ed97 6a03 	vldr	s12, [r7, #12]
 80097de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80098b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80097fc:	4b2a      	ldr	r3, [pc, #168]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009800:	0a5b      	lsrs	r3, r3, #9
 8009802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800980e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009812:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009816:	edd7 6a07 	vldr	s13, [r7, #28]
 800981a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800981e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009822:	ee17 2a90 	vmov	r2, s15
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800982a:	4b1f      	ldr	r3, [pc, #124]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800982c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800982e:	0c1b      	lsrs	r3, r3, #16
 8009830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009834:	ee07 3a90 	vmov	s15, r3
 8009838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009844:	edd7 6a07 	vldr	s13, [r7, #28]
 8009848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800984c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009850:	ee17 2a90 	vmov	r2, s15
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009858:	4b13      	ldr	r3, [pc, #76]	@ (80098a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800985a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985c:	0e1b      	lsrs	r3, r3, #24
 800985e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800986e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009872:	edd7 6a07 	vldr	s13, [r7, #28]
 8009876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800987a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800987e:	ee17 2a90 	vmov	r2, s15
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009886:	e008      	b.n	800989a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	609a      	str	r2, [r3, #8]
}
 800989a:	bf00      	nop
 800989c:	3724      	adds	r7, #36	@ 0x24
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	58024400 	.word	0x58024400
 80098ac:	03d09000 	.word	0x03d09000
 80098b0:	46000000 	.word	0x46000000
 80098b4:	4c742400 	.word	0x4c742400
 80098b8:	4a742400 	.word	0x4a742400
 80098bc:	4af42400 	.word	0x4af42400

080098c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098ce:	4b53      	ldr	r3, [pc, #332]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80098d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d101      	bne.n	80098de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e099      	b.n	8009a12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098de:	4b4f      	ldr	r3, [pc, #316]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a4e      	ldr	r2, [pc, #312]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80098e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ea:	f7fb fd79 	bl	80053e0 <HAL_GetTick>
 80098ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098f0:	e008      	b.n	8009904 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098f2:	f7fb fd75 	bl	80053e0 <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d901      	bls.n	8009904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e086      	b.n	8009a12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009904:	4b45      	ldr	r3, [pc, #276]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1f0      	bne.n	80098f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009910:	4b42      	ldr	r3, [pc, #264]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 8009912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009914:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	031b      	lsls	r3, r3, #12
 800991e:	493f      	ldr	r1, [pc, #252]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 8009920:	4313      	orrs	r3, r2
 8009922:	628b      	str	r3, [r1, #40]	@ 0x28
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	3b01      	subs	r3, #1
 800992a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	3b01      	subs	r3, #1
 8009934:	025b      	lsls	r3, r3, #9
 8009936:	b29b      	uxth	r3, r3
 8009938:	431a      	orrs	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	3b01      	subs	r3, #1
 8009940:	041b      	lsls	r3, r3, #16
 8009942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009946:	431a      	orrs	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	3b01      	subs	r3, #1
 800994e:	061b      	lsls	r3, r3, #24
 8009950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009954:	4931      	ldr	r1, [pc, #196]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 8009956:	4313      	orrs	r3, r2
 8009958:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800995a:	4b30      	ldr	r3, [pc, #192]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 800995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	492d      	ldr	r1, [pc, #180]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 8009968:	4313      	orrs	r3, r2
 800996a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800996c:	4b2b      	ldr	r3, [pc, #172]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 800996e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009970:	f023 0220 	bic.w	r2, r3, #32
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	4928      	ldr	r1, [pc, #160]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 800997a:	4313      	orrs	r3, r2
 800997c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800997e:	4b27      	ldr	r3, [pc, #156]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 8009980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009982:	4a26      	ldr	r2, [pc, #152]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 8009984:	f023 0310 	bic.w	r3, r3, #16
 8009988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800998a:	4b24      	ldr	r3, [pc, #144]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 800998c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800998e:	4b24      	ldr	r3, [pc, #144]	@ (8009a20 <RCCEx_PLL2_Config+0x160>)
 8009990:	4013      	ands	r3, r2
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	69d2      	ldr	r2, [r2, #28]
 8009996:	00d2      	lsls	r2, r2, #3
 8009998:	4920      	ldr	r1, [pc, #128]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 800999a:	4313      	orrs	r3, r2
 800999c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800999e:	4b1f      	ldr	r3, [pc, #124]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099a4:	f043 0310 	orr.w	r3, r3, #16
 80099a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d106      	bne.n	80099be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80099b0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b4:	4a19      	ldr	r2, [pc, #100]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099bc:	e00f      	b.n	80099de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d106      	bne.n	80099d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80099c4:	4b15      	ldr	r3, [pc, #84]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c8:	4a14      	ldr	r2, [pc, #80]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80099d0:	e005      	b.n	80099de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099d2:	4b12      	ldr	r3, [pc, #72]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d6:	4a11      	ldr	r2, [pc, #68]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80099dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80099de:	4b0f      	ldr	r3, [pc, #60]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a0e      	ldr	r2, [pc, #56]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 80099e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80099e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099ea:	f7fb fcf9 	bl	80053e0 <HAL_GetTick>
 80099ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099f0:	e008      	b.n	8009a04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80099f2:	f7fb fcf5 	bl	80053e0 <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d901      	bls.n	8009a04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e006      	b.n	8009a12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a04:	4b05      	ldr	r3, [pc, #20]	@ (8009a1c <RCCEx_PLL2_Config+0x15c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d0f0      	beq.n	80099f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	58024400 	.word	0x58024400
 8009a20:	ffff0007 	.word	0xffff0007

08009a24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a32:	4b53      	ldr	r3, [pc, #332]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	d101      	bne.n	8009a42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e099      	b.n	8009b76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a42:	4b4f      	ldr	r3, [pc, #316]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a4e      	ldr	r2, [pc, #312]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a4e:	f7fb fcc7 	bl	80053e0 <HAL_GetTick>
 8009a52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a54:	e008      	b.n	8009a68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a56:	f7fb fcc3 	bl	80053e0 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d901      	bls.n	8009a68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e086      	b.n	8009b76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a68:	4b45      	ldr	r3, [pc, #276]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1f0      	bne.n	8009a56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a74:	4b42      	ldr	r3, [pc, #264]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	051b      	lsls	r3, r3, #20
 8009a82:	493f      	ldr	r1, [pc, #252]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	628b      	str	r3, [r1, #40]	@ 0x28
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	3b01      	subs	r3, #1
 8009a98:	025b      	lsls	r3, r3, #9
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	041b      	lsls	r3, r3, #16
 8009aa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	061b      	lsls	r3, r3, #24
 8009ab4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009ab8:	4931      	ldr	r1, [pc, #196]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009abe:	4b30      	ldr	r3, [pc, #192]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	492d      	ldr	r1, [pc, #180]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009acc:	4313      	orrs	r3, r2
 8009ace:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	4928      	ldr	r1, [pc, #160]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ae2:	4b27      	ldr	r3, [pc, #156]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae6:	4a26      	ldr	r2, [pc, #152]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009aee:	4b24      	ldr	r3, [pc, #144]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009af2:	4b24      	ldr	r3, [pc, #144]	@ (8009b84 <RCCEx_PLL3_Config+0x160>)
 8009af4:	4013      	ands	r3, r2
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	69d2      	ldr	r2, [r2, #28]
 8009afa:	00d2      	lsls	r2, r2, #3
 8009afc:	4920      	ldr	r1, [pc, #128]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b02:	4b1f      	ldr	r3, [pc, #124]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b06:	4a1e      	ldr	r2, [pc, #120]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d106      	bne.n	8009b22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b14:	4b1a      	ldr	r3, [pc, #104]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b18:	4a19      	ldr	r2, [pc, #100]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b20:	e00f      	b.n	8009b42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d106      	bne.n	8009b36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b28:	4b15      	ldr	r3, [pc, #84]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b2c:	4a14      	ldr	r2, [pc, #80]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b34:	e005      	b.n	8009b42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b36:	4b12      	ldr	r3, [pc, #72]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3a:	4a11      	ldr	r2, [pc, #68]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b42:	4b0f      	ldr	r3, [pc, #60]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a0e      	ldr	r2, [pc, #56]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b4e:	f7fb fc47 	bl	80053e0 <HAL_GetTick>
 8009b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b54:	e008      	b.n	8009b68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b56:	f7fb fc43 	bl	80053e0 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d901      	bls.n	8009b68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e006      	b.n	8009b76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b68:	4b05      	ldr	r3, [pc, #20]	@ (8009b80 <RCCEx_PLL3_Config+0x15c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d0f0      	beq.n	8009b56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	58024400 	.word	0x58024400
 8009b84:	ffff0007 	.word	0xffff0007

08009b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e049      	b.n	8009c2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d106      	bne.n	8009bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f841 	bl	8009c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f000 f9e8 	bl	8009f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009c3e:	bf00      	nop
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
	...

08009c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d001      	beq.n	8009c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e054      	b.n	8009d0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0201 	orr.w	r2, r2, #1
 8009c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a26      	ldr	r2, [pc, #152]	@ (8009d1c <HAL_TIM_Base_Start_IT+0xd0>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d022      	beq.n	8009ccc <HAL_TIM_Base_Start_IT+0x80>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c8e:	d01d      	beq.n	8009ccc <HAL_TIM_Base_Start_IT+0x80>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a22      	ldr	r2, [pc, #136]	@ (8009d20 <HAL_TIM_Base_Start_IT+0xd4>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d018      	beq.n	8009ccc <HAL_TIM_Base_Start_IT+0x80>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a21      	ldr	r2, [pc, #132]	@ (8009d24 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d013      	beq.n	8009ccc <HAL_TIM_Base_Start_IT+0x80>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8009d28 <HAL_TIM_Base_Start_IT+0xdc>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d00e      	beq.n	8009ccc <HAL_TIM_Base_Start_IT+0x80>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8009d2c <HAL_TIM_Base_Start_IT+0xe0>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d009      	beq.n	8009ccc <HAL_TIM_Base_Start_IT+0x80>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8009d30 <HAL_TIM_Base_Start_IT+0xe4>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d004      	beq.n	8009ccc <HAL_TIM_Base_Start_IT+0x80>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8009d34 <HAL_TIM_Base_Start_IT+0xe8>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d115      	bne.n	8009cf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	4b19      	ldr	r3, [pc, #100]	@ (8009d38 <HAL_TIM_Base_Start_IT+0xec>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2b06      	cmp	r3, #6
 8009cdc:	d015      	beq.n	8009d0a <HAL_TIM_Base_Start_IT+0xbe>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ce4:	d011      	beq.n	8009d0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f042 0201 	orr.w	r2, r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf6:	e008      	b.n	8009d0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f042 0201 	orr.w	r2, r2, #1
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	e000      	b.n	8009d0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3714      	adds	r7, #20
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	40010000 	.word	0x40010000
 8009d20:	40000400 	.word	0x40000400
 8009d24:	40000800 	.word	0x40000800
 8009d28:	40000c00 	.word	0x40000c00
 8009d2c:	40010400 	.word	0x40010400
 8009d30:	40001800 	.word	0x40001800
 8009d34:	40014000 	.word	0x40014000
 8009d38:	00010007 	.word	0x00010007

08009d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f003 0302 	and.w	r3, r3, #2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d020      	beq.n	8009da0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01b      	beq.n	8009da0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f06f 0202 	mvn.w	r2, #2
 8009d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	f003 0303 	and.w	r3, r3, #3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f8e9 	bl	8009f5e <HAL_TIM_IC_CaptureCallback>
 8009d8c:	e005      	b.n	8009d9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f8db 	bl	8009f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f8ec 	bl	8009f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f003 0304 	and.w	r3, r3, #4
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d020      	beq.n	8009dec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f003 0304 	and.w	r3, r3, #4
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01b      	beq.n	8009dec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f06f 0204 	mvn.w	r2, #4
 8009dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f8c3 	bl	8009f5e <HAL_TIM_IC_CaptureCallback>
 8009dd8:	e005      	b.n	8009de6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f8b5 	bl	8009f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f8c6 	bl	8009f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f003 0308 	and.w	r3, r3, #8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d020      	beq.n	8009e38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f003 0308 	and.w	r3, r3, #8
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d01b      	beq.n	8009e38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f06f 0208 	mvn.w	r2, #8
 8009e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2204      	movs	r2, #4
 8009e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f003 0303 	and.w	r3, r3, #3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f89d 	bl	8009f5e <HAL_TIM_IC_CaptureCallback>
 8009e24:	e005      	b.n	8009e32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f88f 	bl	8009f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f8a0 	bl	8009f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	f003 0310 	and.w	r3, r3, #16
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d020      	beq.n	8009e84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d01b      	beq.n	8009e84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f06f 0210 	mvn.w	r2, #16
 8009e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2208      	movs	r2, #8
 8009e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f877 	bl	8009f5e <HAL_TIM_IC_CaptureCallback>
 8009e70:	e005      	b.n	8009e7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f869 	bl	8009f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f87a 	bl	8009f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00c      	beq.n	8009ea8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d007      	beq.n	8009ea8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f06f 0201 	mvn.w	r2, #1
 8009ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7fa fd2e 	bl	8004904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d104      	bne.n	8009ebc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00c      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f90d 	bl	800a0f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00c      	beq.n	8009efa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d007      	beq.n	8009efa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f905 	bl	800a104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00c      	beq.n	8009f1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d007      	beq.n	8009f1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f834 	bl	8009f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00c      	beq.n	8009f42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f003 0320 	and.w	r3, r3, #32
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f06f 0220 	mvn.w	r2, #32
 8009f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f8cd 	bl	800a0dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f42:	bf00      	nop
 8009f44:	3710      	adds	r7, #16
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f52:	bf00      	nop
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b083      	sub	sp, #12
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f7a:	bf00      	nop
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f8e:	bf00      	nop
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
	...

08009f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a43      	ldr	r2, [pc, #268]	@ (800a0bc <TIM_Base_SetConfig+0x120>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d013      	beq.n	8009fdc <TIM_Base_SetConfig+0x40>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fba:	d00f      	beq.n	8009fdc <TIM_Base_SetConfig+0x40>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a40      	ldr	r2, [pc, #256]	@ (800a0c0 <TIM_Base_SetConfig+0x124>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d00b      	beq.n	8009fdc <TIM_Base_SetConfig+0x40>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a3f      	ldr	r2, [pc, #252]	@ (800a0c4 <TIM_Base_SetConfig+0x128>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d007      	beq.n	8009fdc <TIM_Base_SetConfig+0x40>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a3e      	ldr	r2, [pc, #248]	@ (800a0c8 <TIM_Base_SetConfig+0x12c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d003      	beq.n	8009fdc <TIM_Base_SetConfig+0x40>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a3d      	ldr	r2, [pc, #244]	@ (800a0cc <TIM_Base_SetConfig+0x130>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d108      	bne.n	8009fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a32      	ldr	r2, [pc, #200]	@ (800a0bc <TIM_Base_SetConfig+0x120>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d01f      	beq.n	800a036 <TIM_Base_SetConfig+0x9a>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ffc:	d01b      	beq.n	800a036 <TIM_Base_SetConfig+0x9a>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a2f      	ldr	r2, [pc, #188]	@ (800a0c0 <TIM_Base_SetConfig+0x124>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d017      	beq.n	800a036 <TIM_Base_SetConfig+0x9a>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a2e      	ldr	r2, [pc, #184]	@ (800a0c4 <TIM_Base_SetConfig+0x128>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d013      	beq.n	800a036 <TIM_Base_SetConfig+0x9a>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a2d      	ldr	r2, [pc, #180]	@ (800a0c8 <TIM_Base_SetConfig+0x12c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d00f      	beq.n	800a036 <TIM_Base_SetConfig+0x9a>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a2c      	ldr	r2, [pc, #176]	@ (800a0cc <TIM_Base_SetConfig+0x130>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d00b      	beq.n	800a036 <TIM_Base_SetConfig+0x9a>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a2b      	ldr	r2, [pc, #172]	@ (800a0d0 <TIM_Base_SetConfig+0x134>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d007      	beq.n	800a036 <TIM_Base_SetConfig+0x9a>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a2a      	ldr	r2, [pc, #168]	@ (800a0d4 <TIM_Base_SetConfig+0x138>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d003      	beq.n	800a036 <TIM_Base_SetConfig+0x9a>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a29      	ldr	r2, [pc, #164]	@ (800a0d8 <TIM_Base_SetConfig+0x13c>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d108      	bne.n	800a048 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a03c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	4313      	orrs	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	689a      	ldr	r2, [r3, #8]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a14      	ldr	r2, [pc, #80]	@ (800a0bc <TIM_Base_SetConfig+0x120>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d00f      	beq.n	800a08e <TIM_Base_SetConfig+0xf2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a16      	ldr	r2, [pc, #88]	@ (800a0cc <TIM_Base_SetConfig+0x130>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00b      	beq.n	800a08e <TIM_Base_SetConfig+0xf2>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a15      	ldr	r2, [pc, #84]	@ (800a0d0 <TIM_Base_SetConfig+0x134>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d007      	beq.n	800a08e <TIM_Base_SetConfig+0xf2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a14      	ldr	r2, [pc, #80]	@ (800a0d4 <TIM_Base_SetConfig+0x138>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d003      	beq.n	800a08e <TIM_Base_SetConfig+0xf2>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a13      	ldr	r2, [pc, #76]	@ (800a0d8 <TIM_Base_SetConfig+0x13c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d103      	bne.n	800a096 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	691a      	ldr	r2, [r3, #16]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f043 0204 	orr.w	r2, r3, #4
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	601a      	str	r2, [r3, #0]
}
 800a0ae:	bf00      	nop
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	40010000 	.word	0x40010000
 800a0c0:	40000400 	.word	0x40000400
 800a0c4:	40000800 	.word	0x40000800
 800a0c8:	40000c00 	.word	0x40000c00
 800a0cc:	40010400 	.word	0x40010400
 800a0d0:	40014000 	.word	0x40014000
 800a0d4:	40014400 	.word	0x40014400
 800a0d8:	40014800 	.word	0x40014800

0800a0dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d101      	bne.n	800a12a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e042      	b.n	800a1b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a130:	2b00      	cmp	r3, #0
 800a132:	d106      	bne.n	800a142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7fa fd57 	bl	8004bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2224      	movs	r2, #36	@ 0x24
 800a146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0201 	bic.w	r2, r2, #1
 800a158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d002      	beq.n	800a168 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fe1e 	bl	800ada4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f8b3 	bl	800a2d4 <UART_SetConfig>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e01b      	b.n	800a1b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689a      	ldr	r2, [r3, #8]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 0201 	orr.w	r2, r2, #1
 800a1a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fe9d 	bl	800aee8 <UART_CheckIdleState>
 800a1ae:	4603      	mov	r3, r0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08a      	sub	sp, #40	@ 0x28
 800a1bc:	af02      	add	r7, sp, #8
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ce:	2b20      	cmp	r3, #32
 800a1d0:	d17b      	bne.n	800a2ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <HAL_UART_Transmit+0x26>
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e074      	b.n	800a2cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2221      	movs	r2, #33	@ 0x21
 800a1ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1f2:	f7fb f8f5 	bl	80053e0 <HAL_GetTick>
 800a1f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	88fa      	ldrh	r2, [r7, #6]
 800a1fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	88fa      	ldrh	r2, [r7, #6]
 800a204:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a210:	d108      	bne.n	800a224 <HAL_UART_Transmit+0x6c>
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d104      	bne.n	800a224 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a21a:	2300      	movs	r3, #0
 800a21c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	61bb      	str	r3, [r7, #24]
 800a222:	e003      	b.n	800a22c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a228:	2300      	movs	r3, #0
 800a22a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a22c:	e030      	b.n	800a290 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2200      	movs	r2, #0
 800a236:	2180      	movs	r1, #128	@ 0x80
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 feff 	bl	800b03c <UART_WaitOnFlagUntilTimeout>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d005      	beq.n	800a250 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2220      	movs	r2, #32
 800a248:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e03d      	b.n	800a2cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10b      	bne.n	800a26e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	881b      	ldrh	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a264:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	3302      	adds	r3, #2
 800a26a:	61bb      	str	r3, [r7, #24]
 800a26c:	e007      	b.n	800a27e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	781a      	ldrb	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	3301      	adds	r3, #1
 800a27c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a284:	b29b      	uxth	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a296:	b29b      	uxth	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1c8      	bne.n	800a22e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2140      	movs	r1, #64	@ 0x40
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 fec8 	bl	800b03c <UART_WaitOnFlagUntilTimeout>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e006      	b.n	800a2cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2220      	movs	r2, #32
 800a2c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e000      	b.n	800a2cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a2ca:	2302      	movs	r3, #2
  }
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3720      	adds	r7, #32
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2d8:	b092      	sub	sp, #72	@ 0x48
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	689a      	ldr	r2, [r3, #8]
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4bbe      	ldr	r3, [pc, #760]	@ (800a5fc <UART_SetConfig+0x328>)
 800a304:	4013      	ands	r3, r2
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	6812      	ldr	r2, [r2, #0]
 800a30a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a30c:	430b      	orrs	r3, r1
 800a30e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	68da      	ldr	r2, [r3, #12]
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4ab3      	ldr	r2, [pc, #716]	@ (800a600 <UART_SetConfig+0x32c>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d004      	beq.n	800a340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a33c:	4313      	orrs	r3, r2
 800a33e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	4baf      	ldr	r3, [pc, #700]	@ (800a604 <UART_SetConfig+0x330>)
 800a348:	4013      	ands	r3, r2
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	6812      	ldr	r2, [r2, #0]
 800a34e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a350:	430b      	orrs	r3, r1
 800a352:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a35a:	f023 010f 	bic.w	r1, r3, #15
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	430a      	orrs	r2, r1
 800a368:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4aa6      	ldr	r2, [pc, #664]	@ (800a608 <UART_SetConfig+0x334>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d177      	bne.n	800a464 <UART_SetConfig+0x190>
 800a374:	4ba5      	ldr	r3, [pc, #660]	@ (800a60c <UART_SetConfig+0x338>)
 800a376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a378:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a37c:	2b28      	cmp	r3, #40	@ 0x28
 800a37e:	d86d      	bhi.n	800a45c <UART_SetConfig+0x188>
 800a380:	a201      	add	r2, pc, #4	@ (adr r2, 800a388 <UART_SetConfig+0xb4>)
 800a382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a386:	bf00      	nop
 800a388:	0800a42d 	.word	0x0800a42d
 800a38c:	0800a45d 	.word	0x0800a45d
 800a390:	0800a45d 	.word	0x0800a45d
 800a394:	0800a45d 	.word	0x0800a45d
 800a398:	0800a45d 	.word	0x0800a45d
 800a39c:	0800a45d 	.word	0x0800a45d
 800a3a0:	0800a45d 	.word	0x0800a45d
 800a3a4:	0800a45d 	.word	0x0800a45d
 800a3a8:	0800a435 	.word	0x0800a435
 800a3ac:	0800a45d 	.word	0x0800a45d
 800a3b0:	0800a45d 	.word	0x0800a45d
 800a3b4:	0800a45d 	.word	0x0800a45d
 800a3b8:	0800a45d 	.word	0x0800a45d
 800a3bc:	0800a45d 	.word	0x0800a45d
 800a3c0:	0800a45d 	.word	0x0800a45d
 800a3c4:	0800a45d 	.word	0x0800a45d
 800a3c8:	0800a43d 	.word	0x0800a43d
 800a3cc:	0800a45d 	.word	0x0800a45d
 800a3d0:	0800a45d 	.word	0x0800a45d
 800a3d4:	0800a45d 	.word	0x0800a45d
 800a3d8:	0800a45d 	.word	0x0800a45d
 800a3dc:	0800a45d 	.word	0x0800a45d
 800a3e0:	0800a45d 	.word	0x0800a45d
 800a3e4:	0800a45d 	.word	0x0800a45d
 800a3e8:	0800a445 	.word	0x0800a445
 800a3ec:	0800a45d 	.word	0x0800a45d
 800a3f0:	0800a45d 	.word	0x0800a45d
 800a3f4:	0800a45d 	.word	0x0800a45d
 800a3f8:	0800a45d 	.word	0x0800a45d
 800a3fc:	0800a45d 	.word	0x0800a45d
 800a400:	0800a45d 	.word	0x0800a45d
 800a404:	0800a45d 	.word	0x0800a45d
 800a408:	0800a44d 	.word	0x0800a44d
 800a40c:	0800a45d 	.word	0x0800a45d
 800a410:	0800a45d 	.word	0x0800a45d
 800a414:	0800a45d 	.word	0x0800a45d
 800a418:	0800a45d 	.word	0x0800a45d
 800a41c:	0800a45d 	.word	0x0800a45d
 800a420:	0800a45d 	.word	0x0800a45d
 800a424:	0800a45d 	.word	0x0800a45d
 800a428:	0800a455 	.word	0x0800a455
 800a42c:	2301      	movs	r3, #1
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e222      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a434:	2304      	movs	r3, #4
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e21e      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a43c:	2308      	movs	r3, #8
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a442:	e21a      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a444:	2310      	movs	r3, #16
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44a:	e216      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a44c:	2320      	movs	r3, #32
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a452:	e212      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a454:	2340      	movs	r3, #64	@ 0x40
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45a:	e20e      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a45c:	2380      	movs	r3, #128	@ 0x80
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a462:	e20a      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a69      	ldr	r2, [pc, #420]	@ (800a610 <UART_SetConfig+0x33c>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d130      	bne.n	800a4d0 <UART_SetConfig+0x1fc>
 800a46e:	4b67      	ldr	r3, [pc, #412]	@ (800a60c <UART_SetConfig+0x338>)
 800a470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	2b05      	cmp	r3, #5
 800a478:	d826      	bhi.n	800a4c8 <UART_SetConfig+0x1f4>
 800a47a:	a201      	add	r2, pc, #4	@ (adr r2, 800a480 <UART_SetConfig+0x1ac>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a499 	.word	0x0800a499
 800a484:	0800a4a1 	.word	0x0800a4a1
 800a488:	0800a4a9 	.word	0x0800a4a9
 800a48c:	0800a4b1 	.word	0x0800a4b1
 800a490:	0800a4b9 	.word	0x0800a4b9
 800a494:	0800a4c1 	.word	0x0800a4c1
 800a498:	2300      	movs	r3, #0
 800a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49e:	e1ec      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a4a0:	2304      	movs	r3, #4
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a6:	e1e8      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a4a8:	2308      	movs	r3, #8
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ae:	e1e4      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a4b0:	2310      	movs	r3, #16
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b6:	e1e0      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a4b8:	2320      	movs	r3, #32
 800a4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4be:	e1dc      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a4c0:	2340      	movs	r3, #64	@ 0x40
 800a4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c6:	e1d8      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a4c8:	2380      	movs	r3, #128	@ 0x80
 800a4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ce:	e1d4      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a4f      	ldr	r2, [pc, #316]	@ (800a614 <UART_SetConfig+0x340>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d130      	bne.n	800a53c <UART_SetConfig+0x268>
 800a4da:	4b4c      	ldr	r3, [pc, #304]	@ (800a60c <UART_SetConfig+0x338>)
 800a4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4de:	f003 0307 	and.w	r3, r3, #7
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	d826      	bhi.n	800a534 <UART_SetConfig+0x260>
 800a4e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ec <UART_SetConfig+0x218>)
 800a4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ec:	0800a505 	.word	0x0800a505
 800a4f0:	0800a50d 	.word	0x0800a50d
 800a4f4:	0800a515 	.word	0x0800a515
 800a4f8:	0800a51d 	.word	0x0800a51d
 800a4fc:	0800a525 	.word	0x0800a525
 800a500:	0800a52d 	.word	0x0800a52d
 800a504:	2300      	movs	r3, #0
 800a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50a:	e1b6      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a50c:	2304      	movs	r3, #4
 800a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a512:	e1b2      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a514:	2308      	movs	r3, #8
 800a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51a:	e1ae      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a51c:	2310      	movs	r3, #16
 800a51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a522:	e1aa      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a524:	2320      	movs	r3, #32
 800a526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52a:	e1a6      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a52c:	2340      	movs	r3, #64	@ 0x40
 800a52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a532:	e1a2      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a534:	2380      	movs	r3, #128	@ 0x80
 800a536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53a:	e19e      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a35      	ldr	r2, [pc, #212]	@ (800a618 <UART_SetConfig+0x344>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d130      	bne.n	800a5a8 <UART_SetConfig+0x2d4>
 800a546:	4b31      	ldr	r3, [pc, #196]	@ (800a60c <UART_SetConfig+0x338>)
 800a548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a54a:	f003 0307 	and.w	r3, r3, #7
 800a54e:	2b05      	cmp	r3, #5
 800a550:	d826      	bhi.n	800a5a0 <UART_SetConfig+0x2cc>
 800a552:	a201      	add	r2, pc, #4	@ (adr r2, 800a558 <UART_SetConfig+0x284>)
 800a554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a558:	0800a571 	.word	0x0800a571
 800a55c:	0800a579 	.word	0x0800a579
 800a560:	0800a581 	.word	0x0800a581
 800a564:	0800a589 	.word	0x0800a589
 800a568:	0800a591 	.word	0x0800a591
 800a56c:	0800a599 	.word	0x0800a599
 800a570:	2300      	movs	r3, #0
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e180      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a578:	2304      	movs	r3, #4
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e17c      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a580:	2308      	movs	r3, #8
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e178      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a588:	2310      	movs	r3, #16
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e174      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a590:	2320      	movs	r3, #32
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e170      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a598:	2340      	movs	r3, #64	@ 0x40
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e16c      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a5a0:	2380      	movs	r3, #128	@ 0x80
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a6:	e168      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a1b      	ldr	r2, [pc, #108]	@ (800a61c <UART_SetConfig+0x348>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d142      	bne.n	800a638 <UART_SetConfig+0x364>
 800a5b2:	4b16      	ldr	r3, [pc, #88]	@ (800a60c <UART_SetConfig+0x338>)
 800a5b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	2b05      	cmp	r3, #5
 800a5bc:	d838      	bhi.n	800a630 <UART_SetConfig+0x35c>
 800a5be:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c4 <UART_SetConfig+0x2f0>)
 800a5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c4:	0800a5dd 	.word	0x0800a5dd
 800a5c8:	0800a5e5 	.word	0x0800a5e5
 800a5cc:	0800a5ed 	.word	0x0800a5ed
 800a5d0:	0800a5f5 	.word	0x0800a5f5
 800a5d4:	0800a621 	.word	0x0800a621
 800a5d8:	0800a629 	.word	0x0800a629
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e14a      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e146      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f2:	e142      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a5f4:	2310      	movs	r3, #16
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fa:	e13e      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a5fc:	cfff69f3 	.word	0xcfff69f3
 800a600:	58000c00 	.word	0x58000c00
 800a604:	11fff4ff 	.word	0x11fff4ff
 800a608:	40011000 	.word	0x40011000
 800a60c:	58024400 	.word	0x58024400
 800a610:	40004400 	.word	0x40004400
 800a614:	40004800 	.word	0x40004800
 800a618:	40004c00 	.word	0x40004c00
 800a61c:	40005000 	.word	0x40005000
 800a620:	2320      	movs	r3, #32
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e128      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a628:	2340      	movs	r3, #64	@ 0x40
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e124      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a630:	2380      	movs	r3, #128	@ 0x80
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a636:	e120      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4acb      	ldr	r2, [pc, #812]	@ (800a96c <UART_SetConfig+0x698>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d176      	bne.n	800a730 <UART_SetConfig+0x45c>
 800a642:	4bcb      	ldr	r3, [pc, #812]	@ (800a970 <UART_SetConfig+0x69c>)
 800a644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a64a:	2b28      	cmp	r3, #40	@ 0x28
 800a64c:	d86c      	bhi.n	800a728 <UART_SetConfig+0x454>
 800a64e:	a201      	add	r2, pc, #4	@ (adr r2, 800a654 <UART_SetConfig+0x380>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a6f9 	.word	0x0800a6f9
 800a658:	0800a729 	.word	0x0800a729
 800a65c:	0800a729 	.word	0x0800a729
 800a660:	0800a729 	.word	0x0800a729
 800a664:	0800a729 	.word	0x0800a729
 800a668:	0800a729 	.word	0x0800a729
 800a66c:	0800a729 	.word	0x0800a729
 800a670:	0800a729 	.word	0x0800a729
 800a674:	0800a701 	.word	0x0800a701
 800a678:	0800a729 	.word	0x0800a729
 800a67c:	0800a729 	.word	0x0800a729
 800a680:	0800a729 	.word	0x0800a729
 800a684:	0800a729 	.word	0x0800a729
 800a688:	0800a729 	.word	0x0800a729
 800a68c:	0800a729 	.word	0x0800a729
 800a690:	0800a729 	.word	0x0800a729
 800a694:	0800a709 	.word	0x0800a709
 800a698:	0800a729 	.word	0x0800a729
 800a69c:	0800a729 	.word	0x0800a729
 800a6a0:	0800a729 	.word	0x0800a729
 800a6a4:	0800a729 	.word	0x0800a729
 800a6a8:	0800a729 	.word	0x0800a729
 800a6ac:	0800a729 	.word	0x0800a729
 800a6b0:	0800a729 	.word	0x0800a729
 800a6b4:	0800a711 	.word	0x0800a711
 800a6b8:	0800a729 	.word	0x0800a729
 800a6bc:	0800a729 	.word	0x0800a729
 800a6c0:	0800a729 	.word	0x0800a729
 800a6c4:	0800a729 	.word	0x0800a729
 800a6c8:	0800a729 	.word	0x0800a729
 800a6cc:	0800a729 	.word	0x0800a729
 800a6d0:	0800a729 	.word	0x0800a729
 800a6d4:	0800a719 	.word	0x0800a719
 800a6d8:	0800a729 	.word	0x0800a729
 800a6dc:	0800a729 	.word	0x0800a729
 800a6e0:	0800a729 	.word	0x0800a729
 800a6e4:	0800a729 	.word	0x0800a729
 800a6e8:	0800a729 	.word	0x0800a729
 800a6ec:	0800a729 	.word	0x0800a729
 800a6f0:	0800a729 	.word	0x0800a729
 800a6f4:	0800a721 	.word	0x0800a721
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e0bc      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a700:	2304      	movs	r3, #4
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e0b8      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a708:	2308      	movs	r3, #8
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e0b4      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a710:	2310      	movs	r3, #16
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e0b0      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a718:	2320      	movs	r3, #32
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e0ac      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a720:	2340      	movs	r3, #64	@ 0x40
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e0a8      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a728:	2380      	movs	r3, #128	@ 0x80
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72e:	e0a4      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a8f      	ldr	r2, [pc, #572]	@ (800a974 <UART_SetConfig+0x6a0>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d130      	bne.n	800a79c <UART_SetConfig+0x4c8>
 800a73a:	4b8d      	ldr	r3, [pc, #564]	@ (800a970 <UART_SetConfig+0x69c>)
 800a73c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a73e:	f003 0307 	and.w	r3, r3, #7
 800a742:	2b05      	cmp	r3, #5
 800a744:	d826      	bhi.n	800a794 <UART_SetConfig+0x4c0>
 800a746:	a201      	add	r2, pc, #4	@ (adr r2, 800a74c <UART_SetConfig+0x478>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a765 	.word	0x0800a765
 800a750:	0800a76d 	.word	0x0800a76d
 800a754:	0800a775 	.word	0x0800a775
 800a758:	0800a77d 	.word	0x0800a77d
 800a75c:	0800a785 	.word	0x0800a785
 800a760:	0800a78d 	.word	0x0800a78d
 800a764:	2300      	movs	r3, #0
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e086      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a76c:	2304      	movs	r3, #4
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e082      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a774:	2308      	movs	r3, #8
 800a776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77a:	e07e      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a77c:	2310      	movs	r3, #16
 800a77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a782:	e07a      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a784:	2320      	movs	r3, #32
 800a786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78a:	e076      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a78c:	2340      	movs	r3, #64	@ 0x40
 800a78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a792:	e072      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a794:	2380      	movs	r3, #128	@ 0x80
 800a796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a79a:	e06e      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a75      	ldr	r2, [pc, #468]	@ (800a978 <UART_SetConfig+0x6a4>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d130      	bne.n	800a808 <UART_SetConfig+0x534>
 800a7a6:	4b72      	ldr	r3, [pc, #456]	@ (800a970 <UART_SetConfig+0x69c>)
 800a7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7aa:	f003 0307 	and.w	r3, r3, #7
 800a7ae:	2b05      	cmp	r3, #5
 800a7b0:	d826      	bhi.n	800a800 <UART_SetConfig+0x52c>
 800a7b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7b8 <UART_SetConfig+0x4e4>)
 800a7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b8:	0800a7d1 	.word	0x0800a7d1
 800a7bc:	0800a7d9 	.word	0x0800a7d9
 800a7c0:	0800a7e1 	.word	0x0800a7e1
 800a7c4:	0800a7e9 	.word	0x0800a7e9
 800a7c8:	0800a7f1 	.word	0x0800a7f1
 800a7cc:	0800a7f9 	.word	0x0800a7f9
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7d6:	e050      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a7d8:	2304      	movs	r3, #4
 800a7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7de:	e04c      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a7e0:	2308      	movs	r3, #8
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e048      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a7e8:	2310      	movs	r3, #16
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e044      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a7f0:	2320      	movs	r3, #32
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e040      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a7f8:	2340      	movs	r3, #64	@ 0x40
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e03c      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a800:	2380      	movs	r3, #128	@ 0x80
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a806:	e038      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a5b      	ldr	r2, [pc, #364]	@ (800a97c <UART_SetConfig+0x6a8>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d130      	bne.n	800a874 <UART_SetConfig+0x5a0>
 800a812:	4b57      	ldr	r3, [pc, #348]	@ (800a970 <UART_SetConfig+0x69c>)
 800a814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a816:	f003 0307 	and.w	r3, r3, #7
 800a81a:	2b05      	cmp	r3, #5
 800a81c:	d826      	bhi.n	800a86c <UART_SetConfig+0x598>
 800a81e:	a201      	add	r2, pc, #4	@ (adr r2, 800a824 <UART_SetConfig+0x550>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a83d 	.word	0x0800a83d
 800a828:	0800a845 	.word	0x0800a845
 800a82c:	0800a84d 	.word	0x0800a84d
 800a830:	0800a855 	.word	0x0800a855
 800a834:	0800a85d 	.word	0x0800a85d
 800a838:	0800a865 	.word	0x0800a865
 800a83c:	2302      	movs	r3, #2
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e01a      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a844:	2304      	movs	r3, #4
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e016      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a84c:	2308      	movs	r3, #8
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e012      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a854:	2310      	movs	r3, #16
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e00e      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a85c:	2320      	movs	r3, #32
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e00a      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a864:	2340      	movs	r3, #64	@ 0x40
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e006      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a86c:	2380      	movs	r3, #128	@ 0x80
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a872:	e002      	b.n	800a87a <UART_SetConfig+0x5a6>
 800a874:	2380      	movs	r3, #128	@ 0x80
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a3f      	ldr	r2, [pc, #252]	@ (800a97c <UART_SetConfig+0x6a8>)
 800a880:	4293      	cmp	r3, r2
 800a882:	f040 80f8 	bne.w	800aa76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a886:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	dc46      	bgt.n	800a91c <UART_SetConfig+0x648>
 800a88e:	2b02      	cmp	r3, #2
 800a890:	f2c0 8082 	blt.w	800a998 <UART_SetConfig+0x6c4>
 800a894:	3b02      	subs	r3, #2
 800a896:	2b1e      	cmp	r3, #30
 800a898:	d87e      	bhi.n	800a998 <UART_SetConfig+0x6c4>
 800a89a:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a0 <UART_SetConfig+0x5cc>)
 800a89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a0:	0800a923 	.word	0x0800a923
 800a8a4:	0800a999 	.word	0x0800a999
 800a8a8:	0800a92b 	.word	0x0800a92b
 800a8ac:	0800a999 	.word	0x0800a999
 800a8b0:	0800a999 	.word	0x0800a999
 800a8b4:	0800a999 	.word	0x0800a999
 800a8b8:	0800a93b 	.word	0x0800a93b
 800a8bc:	0800a999 	.word	0x0800a999
 800a8c0:	0800a999 	.word	0x0800a999
 800a8c4:	0800a999 	.word	0x0800a999
 800a8c8:	0800a999 	.word	0x0800a999
 800a8cc:	0800a999 	.word	0x0800a999
 800a8d0:	0800a999 	.word	0x0800a999
 800a8d4:	0800a999 	.word	0x0800a999
 800a8d8:	0800a94b 	.word	0x0800a94b
 800a8dc:	0800a999 	.word	0x0800a999
 800a8e0:	0800a999 	.word	0x0800a999
 800a8e4:	0800a999 	.word	0x0800a999
 800a8e8:	0800a999 	.word	0x0800a999
 800a8ec:	0800a999 	.word	0x0800a999
 800a8f0:	0800a999 	.word	0x0800a999
 800a8f4:	0800a999 	.word	0x0800a999
 800a8f8:	0800a999 	.word	0x0800a999
 800a8fc:	0800a999 	.word	0x0800a999
 800a900:	0800a999 	.word	0x0800a999
 800a904:	0800a999 	.word	0x0800a999
 800a908:	0800a999 	.word	0x0800a999
 800a90c:	0800a999 	.word	0x0800a999
 800a910:	0800a999 	.word	0x0800a999
 800a914:	0800a999 	.word	0x0800a999
 800a918:	0800a98b 	.word	0x0800a98b
 800a91c:	2b40      	cmp	r3, #64	@ 0x40
 800a91e:	d037      	beq.n	800a990 <UART_SetConfig+0x6bc>
 800a920:	e03a      	b.n	800a998 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a922:	f7fe fd0f 	bl	8009344 <HAL_RCCEx_GetD3PCLK1Freq>
 800a926:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a928:	e03c      	b.n	800a9a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a92a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe fd1e 	bl	8009370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a938:	e034      	b.n	800a9a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a93a:	f107 0318 	add.w	r3, r7, #24
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe fe6a 	bl	8009618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a948:	e02c      	b.n	800a9a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a94a:	4b09      	ldr	r3, [pc, #36]	@ (800a970 <UART_SetConfig+0x69c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 0320 	and.w	r3, r3, #32
 800a952:	2b00      	cmp	r3, #0
 800a954:	d016      	beq.n	800a984 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a956:	4b06      	ldr	r3, [pc, #24]	@ (800a970 <UART_SetConfig+0x69c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	08db      	lsrs	r3, r3, #3
 800a95c:	f003 0303 	and.w	r3, r3, #3
 800a960:	4a07      	ldr	r2, [pc, #28]	@ (800a980 <UART_SetConfig+0x6ac>)
 800a962:	fa22 f303 	lsr.w	r3, r2, r3
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a968:	e01c      	b.n	800a9a4 <UART_SetConfig+0x6d0>
 800a96a:	bf00      	nop
 800a96c:	40011400 	.word	0x40011400
 800a970:	58024400 	.word	0x58024400
 800a974:	40007800 	.word	0x40007800
 800a978:	40007c00 	.word	0x40007c00
 800a97c:	58000c00 	.word	0x58000c00
 800a980:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a984:	4b9d      	ldr	r3, [pc, #628]	@ (800abfc <UART_SetConfig+0x928>)
 800a986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a988:	e00c      	b.n	800a9a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a98a:	4b9d      	ldr	r3, [pc, #628]	@ (800ac00 <UART_SetConfig+0x92c>)
 800a98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98e:	e009      	b.n	800a9a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a996:	e005      	b.n	800a9a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a998:	2300      	movs	r3, #0
 800a99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a9a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 81de 	beq.w	800ad68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b0:	4a94      	ldr	r2, [pc, #592]	@ (800ac04 <UART_SetConfig+0x930>)
 800a9b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	685a      	ldr	r2, [r3, #4]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	005b      	lsls	r3, r3, #1
 800a9c8:	4413      	add	r3, r2
 800a9ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d305      	bcc.n	800a9dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d903      	bls.n	800a9e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a9e2:	e1c1      	b.n	800ad68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	60bb      	str	r3, [r7, #8]
 800a9ea:	60fa      	str	r2, [r7, #12]
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f0:	4a84      	ldr	r2, [pc, #528]	@ (800ac04 <UART_SetConfig+0x930>)
 800a9f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	607a      	str	r2, [r7, #4]
 800a9fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa06:	f7f5 ff8d 	bl	8000924 <__aeabi_uldivmod>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4610      	mov	r0, r2
 800aa10:	4619      	mov	r1, r3
 800aa12:	f04f 0200 	mov.w	r2, #0
 800aa16:	f04f 0300 	mov.w	r3, #0
 800aa1a:	020b      	lsls	r3, r1, #8
 800aa1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa20:	0202      	lsls	r2, r0, #8
 800aa22:	6979      	ldr	r1, [r7, #20]
 800aa24:	6849      	ldr	r1, [r1, #4]
 800aa26:	0849      	lsrs	r1, r1, #1
 800aa28:	2000      	movs	r0, #0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	eb12 0804 	adds.w	r8, r2, r4
 800aa32:	eb43 0905 	adc.w	r9, r3, r5
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	469a      	mov	sl, r3
 800aa3e:	4693      	mov	fp, r2
 800aa40:	4652      	mov	r2, sl
 800aa42:	465b      	mov	r3, fp
 800aa44:	4640      	mov	r0, r8
 800aa46:	4649      	mov	r1, r9
 800aa48:	f7f5 ff6c 	bl	8000924 <__aeabi_uldivmod>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4613      	mov	r3, r2
 800aa52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa5a:	d308      	bcc.n	800aa6e <UART_SetConfig+0x79a>
 800aa5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa62:	d204      	bcs.n	800aa6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa6a:	60da      	str	r2, [r3, #12]
 800aa6c:	e17c      	b.n	800ad68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa74:	e178      	b.n	800ad68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa7e:	f040 80c5 	bne.w	800ac0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800aa82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aa86:	2b20      	cmp	r3, #32
 800aa88:	dc48      	bgt.n	800ab1c <UART_SetConfig+0x848>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	db7b      	blt.n	800ab86 <UART_SetConfig+0x8b2>
 800aa8e:	2b20      	cmp	r3, #32
 800aa90:	d879      	bhi.n	800ab86 <UART_SetConfig+0x8b2>
 800aa92:	a201      	add	r2, pc, #4	@ (adr r2, 800aa98 <UART_SetConfig+0x7c4>)
 800aa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa98:	0800ab23 	.word	0x0800ab23
 800aa9c:	0800ab2b 	.word	0x0800ab2b
 800aaa0:	0800ab87 	.word	0x0800ab87
 800aaa4:	0800ab87 	.word	0x0800ab87
 800aaa8:	0800ab33 	.word	0x0800ab33
 800aaac:	0800ab87 	.word	0x0800ab87
 800aab0:	0800ab87 	.word	0x0800ab87
 800aab4:	0800ab87 	.word	0x0800ab87
 800aab8:	0800ab43 	.word	0x0800ab43
 800aabc:	0800ab87 	.word	0x0800ab87
 800aac0:	0800ab87 	.word	0x0800ab87
 800aac4:	0800ab87 	.word	0x0800ab87
 800aac8:	0800ab87 	.word	0x0800ab87
 800aacc:	0800ab87 	.word	0x0800ab87
 800aad0:	0800ab87 	.word	0x0800ab87
 800aad4:	0800ab87 	.word	0x0800ab87
 800aad8:	0800ab53 	.word	0x0800ab53
 800aadc:	0800ab87 	.word	0x0800ab87
 800aae0:	0800ab87 	.word	0x0800ab87
 800aae4:	0800ab87 	.word	0x0800ab87
 800aae8:	0800ab87 	.word	0x0800ab87
 800aaec:	0800ab87 	.word	0x0800ab87
 800aaf0:	0800ab87 	.word	0x0800ab87
 800aaf4:	0800ab87 	.word	0x0800ab87
 800aaf8:	0800ab87 	.word	0x0800ab87
 800aafc:	0800ab87 	.word	0x0800ab87
 800ab00:	0800ab87 	.word	0x0800ab87
 800ab04:	0800ab87 	.word	0x0800ab87
 800ab08:	0800ab87 	.word	0x0800ab87
 800ab0c:	0800ab87 	.word	0x0800ab87
 800ab10:	0800ab87 	.word	0x0800ab87
 800ab14:	0800ab87 	.word	0x0800ab87
 800ab18:	0800ab79 	.word	0x0800ab79
 800ab1c:	2b40      	cmp	r3, #64	@ 0x40
 800ab1e:	d02e      	beq.n	800ab7e <UART_SetConfig+0x8aa>
 800ab20:	e031      	b.n	800ab86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab22:	f7fd f997 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 800ab26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab28:	e033      	b.n	800ab92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab2a:	f7fd f9a9 	bl	8007e80 <HAL_RCC_GetPCLK2Freq>
 800ab2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab30:	e02f      	b.n	800ab92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe fc1a 	bl	8009370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab40:	e027      	b.n	800ab92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab42:	f107 0318 	add.w	r3, r7, #24
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fd66 	bl	8009618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab50:	e01f      	b.n	800ab92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab52:	4b2d      	ldr	r3, [pc, #180]	@ (800ac08 <UART_SetConfig+0x934>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0320 	and.w	r3, r3, #32
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d009      	beq.n	800ab72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab5e:	4b2a      	ldr	r3, [pc, #168]	@ (800ac08 <UART_SetConfig+0x934>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	08db      	lsrs	r3, r3, #3
 800ab64:	f003 0303 	and.w	r3, r3, #3
 800ab68:	4a24      	ldr	r2, [pc, #144]	@ (800abfc <UART_SetConfig+0x928>)
 800ab6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab70:	e00f      	b.n	800ab92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ab72:	4b22      	ldr	r3, [pc, #136]	@ (800abfc <UART_SetConfig+0x928>)
 800ab74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab76:	e00c      	b.n	800ab92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab78:	4b21      	ldr	r3, [pc, #132]	@ (800ac00 <UART_SetConfig+0x92c>)
 800ab7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab7c:	e009      	b.n	800ab92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab84:	e005      	b.n	800ab92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ab90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 80e7 	beq.w	800ad68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9e:	4a19      	ldr	r2, [pc, #100]	@ (800ac04 <UART_SetConfig+0x930>)
 800aba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aba4:	461a      	mov	r2, r3
 800aba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abac:	005a      	lsls	r2, r3, #1
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	085b      	lsrs	r3, r3, #1
 800abb4:	441a      	add	r2, r3
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	fbb2 f3f3 	udiv	r3, r2, r3
 800abbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc2:	2b0f      	cmp	r3, #15
 800abc4:	d916      	bls.n	800abf4 <UART_SetConfig+0x920>
 800abc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abcc:	d212      	bcs.n	800abf4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	f023 030f 	bic.w	r3, r3, #15
 800abd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abda:	085b      	lsrs	r3, r3, #1
 800abdc:	b29b      	uxth	r3, r3
 800abde:	f003 0307 	and.w	r3, r3, #7
 800abe2:	b29a      	uxth	r2, r3
 800abe4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800abe6:	4313      	orrs	r3, r2
 800abe8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800abf0:	60da      	str	r2, [r3, #12]
 800abf2:	e0b9      	b.n	800ad68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abfa:	e0b5      	b.n	800ad68 <UART_SetConfig+0xa94>
 800abfc:	03d09000 	.word	0x03d09000
 800ac00:	003d0900 	.word	0x003d0900
 800ac04:	0801158c 	.word	0x0801158c
 800ac08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac10:	2b20      	cmp	r3, #32
 800ac12:	dc49      	bgt.n	800aca8 <UART_SetConfig+0x9d4>
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	db7c      	blt.n	800ad12 <UART_SetConfig+0xa3e>
 800ac18:	2b20      	cmp	r3, #32
 800ac1a:	d87a      	bhi.n	800ad12 <UART_SetConfig+0xa3e>
 800ac1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac24 <UART_SetConfig+0x950>)
 800ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac22:	bf00      	nop
 800ac24:	0800acaf 	.word	0x0800acaf
 800ac28:	0800acb7 	.word	0x0800acb7
 800ac2c:	0800ad13 	.word	0x0800ad13
 800ac30:	0800ad13 	.word	0x0800ad13
 800ac34:	0800acbf 	.word	0x0800acbf
 800ac38:	0800ad13 	.word	0x0800ad13
 800ac3c:	0800ad13 	.word	0x0800ad13
 800ac40:	0800ad13 	.word	0x0800ad13
 800ac44:	0800accf 	.word	0x0800accf
 800ac48:	0800ad13 	.word	0x0800ad13
 800ac4c:	0800ad13 	.word	0x0800ad13
 800ac50:	0800ad13 	.word	0x0800ad13
 800ac54:	0800ad13 	.word	0x0800ad13
 800ac58:	0800ad13 	.word	0x0800ad13
 800ac5c:	0800ad13 	.word	0x0800ad13
 800ac60:	0800ad13 	.word	0x0800ad13
 800ac64:	0800acdf 	.word	0x0800acdf
 800ac68:	0800ad13 	.word	0x0800ad13
 800ac6c:	0800ad13 	.word	0x0800ad13
 800ac70:	0800ad13 	.word	0x0800ad13
 800ac74:	0800ad13 	.word	0x0800ad13
 800ac78:	0800ad13 	.word	0x0800ad13
 800ac7c:	0800ad13 	.word	0x0800ad13
 800ac80:	0800ad13 	.word	0x0800ad13
 800ac84:	0800ad13 	.word	0x0800ad13
 800ac88:	0800ad13 	.word	0x0800ad13
 800ac8c:	0800ad13 	.word	0x0800ad13
 800ac90:	0800ad13 	.word	0x0800ad13
 800ac94:	0800ad13 	.word	0x0800ad13
 800ac98:	0800ad13 	.word	0x0800ad13
 800ac9c:	0800ad13 	.word	0x0800ad13
 800aca0:	0800ad13 	.word	0x0800ad13
 800aca4:	0800ad05 	.word	0x0800ad05
 800aca8:	2b40      	cmp	r3, #64	@ 0x40
 800acaa:	d02e      	beq.n	800ad0a <UART_SetConfig+0xa36>
 800acac:	e031      	b.n	800ad12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acae:	f7fd f8d1 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 800acb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acb4:	e033      	b.n	800ad1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acb6:	f7fd f8e3 	bl	8007e80 <HAL_RCC_GetPCLK2Freq>
 800acba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acbc:	e02f      	b.n	800ad1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fb54 	bl	8009370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800acc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800accc:	e027      	b.n	800ad1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acce:	f107 0318 	add.w	r3, r7, #24
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe fca0 	bl	8009618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acdc:	e01f      	b.n	800ad1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acde:	4b2d      	ldr	r3, [pc, #180]	@ (800ad94 <UART_SetConfig+0xac0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 0320 	and.w	r3, r3, #32
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acea:	4b2a      	ldr	r3, [pc, #168]	@ (800ad94 <UART_SetConfig+0xac0>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	08db      	lsrs	r3, r3, #3
 800acf0:	f003 0303 	and.w	r3, r3, #3
 800acf4:	4a28      	ldr	r2, [pc, #160]	@ (800ad98 <UART_SetConfig+0xac4>)
 800acf6:	fa22 f303 	lsr.w	r3, r2, r3
 800acfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acfc:	e00f      	b.n	800ad1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800acfe:	4b26      	ldr	r3, [pc, #152]	@ (800ad98 <UART_SetConfig+0xac4>)
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad02:	e00c      	b.n	800ad1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ad04:	4b25      	ldr	r3, [pc, #148]	@ (800ad9c <UART_SetConfig+0xac8>)
 800ad06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad08:	e009      	b.n	800ad1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad10:	e005      	b.n	800ad1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ad12:	2300      	movs	r3, #0
 800ad14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ad1c:	bf00      	nop
    }

    if (pclk != 0U)
 800ad1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d021      	beq.n	800ad68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad28:	4a1d      	ldr	r2, [pc, #116]	@ (800ada0 <UART_SetConfig+0xacc>)
 800ad2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad32:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	085b      	lsrs	r3, r3, #1
 800ad3c:	441a      	add	r2, r3
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4a:	2b0f      	cmp	r3, #15
 800ad4c:	d909      	bls.n	800ad62 <UART_SetConfig+0xa8e>
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad54:	d205      	bcs.n	800ad62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60da      	str	r2, [r3, #12]
 800ad60:	e002      	b.n	800ad68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2200      	movs	r2, #0
 800ad82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3748      	adds	r7, #72	@ 0x48
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad92:	bf00      	nop
 800ad94:	58024400 	.word	0x58024400
 800ad98:	03d09000 	.word	0x03d09000
 800ad9c:	003d0900 	.word	0x003d0900
 800ada0:	0801158c 	.word	0x0801158c

0800ada4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb0:	f003 0308 	and.w	r3, r3, #8
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00a      	beq.n	800adce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	430a      	orrs	r2, r1
 800adee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00a      	beq.n	800ae12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae16:	f003 0304 	and.w	r3, r3, #4
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	430a      	orrs	r2, r1
 800ae32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae38:	f003 0310 	and.w	r3, r3, #16
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00a      	beq.n	800ae56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5a:	f003 0320 	and.w	r3, r3, #32
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00a      	beq.n	800ae78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d01a      	beq.n	800aeba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aea2:	d10a      	bne.n	800aeba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00a      	beq.n	800aedc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	605a      	str	r2, [r3, #4]
  }
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b098      	sub	sp, #96	@ 0x60
 800aeec:	af02      	add	r7, sp, #8
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aef8:	f7fa fa72 	bl	80053e0 <HAL_GetTick>
 800aefc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0308 	and.w	r3, r3, #8
 800af08:	2b08      	cmp	r3, #8
 800af0a:	d12f      	bne.n	800af6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af14:	2200      	movs	r2, #0
 800af16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f88e 	bl	800b03c <UART_WaitOnFlagUntilTimeout>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d022      	beq.n	800af6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2e:	e853 3f00 	ldrex	r3, [r3]
 800af32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	461a      	mov	r2, r3
 800af42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af44:	647b      	str	r3, [r7, #68]	@ 0x44
 800af46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af4c:	e841 2300 	strex	r3, r2, [r1]
 800af50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1e6      	bne.n	800af26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e063      	b.n	800b034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0304 	and.w	r3, r3, #4
 800af76:	2b04      	cmp	r3, #4
 800af78:	d149      	bne.n	800b00e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af82:	2200      	movs	r2, #0
 800af84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f857 	bl	800b03c <UART_WaitOnFlagUntilTimeout>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d03c      	beq.n	800b00e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9c:	e853 3f00 	ldrex	r3, [r3]
 800afa0:	623b      	str	r3, [r7, #32]
   return(result);
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800afb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800afb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afba:	e841 2300 	strex	r3, r2, [r1]
 800afbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d1e6      	bne.n	800af94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3308      	adds	r3, #8
 800afcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	e853 3f00 	ldrex	r3, [r3]
 800afd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f023 0301 	bic.w	r3, r3, #1
 800afdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3308      	adds	r3, #8
 800afe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afe6:	61fa      	str	r2, [r7, #28]
 800afe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afea:	69b9      	ldr	r1, [r7, #24]
 800afec:	69fa      	ldr	r2, [r7, #28]
 800afee:	e841 2300 	strex	r3, r2, [r1]
 800aff2:	617b      	str	r3, [r7, #20]
   return(result);
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1e5      	bne.n	800afc6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2220      	movs	r2, #32
 800affe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b00a:	2303      	movs	r3, #3
 800b00c:	e012      	b.n	800b034 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2220      	movs	r2, #32
 800b012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2220      	movs	r2, #32
 800b01a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3758      	adds	r7, #88	@ 0x58
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	4613      	mov	r3, r2
 800b04a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b04c:	e04f      	b.n	800b0ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b054:	d04b      	beq.n	800b0ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b056:	f7fa f9c3 	bl	80053e0 <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	429a      	cmp	r2, r3
 800b064:	d302      	bcc.n	800b06c <UART_WaitOnFlagUntilTimeout+0x30>
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d101      	bne.n	800b070 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e04e      	b.n	800b10e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0304 	and.w	r3, r3, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d037      	beq.n	800b0ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2b80      	cmp	r3, #128	@ 0x80
 800b082:	d034      	beq.n	800b0ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b40      	cmp	r3, #64	@ 0x40
 800b088:	d031      	beq.n	800b0ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69db      	ldr	r3, [r3, #28]
 800b090:	f003 0308 	and.w	r3, r3, #8
 800b094:	2b08      	cmp	r3, #8
 800b096:	d110      	bne.n	800b0ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2208      	movs	r2, #8
 800b09e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 f839 	bl	800b118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2208      	movs	r2, #8
 800b0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e029      	b.n	800b10e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	69db      	ldr	r3, [r3, #28]
 800b0c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0c8:	d111      	bne.n	800b0ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 f81f 	bl	800b118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2220      	movs	r2, #32
 800b0de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	e00f      	b.n	800b10e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	69da      	ldr	r2, [r3, #28]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	bf0c      	ite	eq
 800b0fe:	2301      	moveq	r3, #1
 800b100:	2300      	movne	r3, #0
 800b102:	b2db      	uxtb	r3, r3
 800b104:	461a      	mov	r2, r3
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d0a0      	beq.n	800b04e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b118:	b480      	push	{r7}
 800b11a:	b095      	sub	sp, #84	@ 0x54
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b128:	e853 3f00 	ldrex	r3, [r3]
 800b12c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b134:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	461a      	mov	r2, r3
 800b13c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b13e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b140:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b142:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b144:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e6      	bne.n	800b120 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3308      	adds	r3, #8
 800b158:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	e853 3f00 	ldrex	r3, [r3]
 800b160:	61fb      	str	r3, [r7, #28]
   return(result);
 800b162:	69fa      	ldr	r2, [r7, #28]
 800b164:	4b1e      	ldr	r3, [pc, #120]	@ (800b1e0 <UART_EndRxTransfer+0xc8>)
 800b166:	4013      	ands	r3, r2
 800b168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3308      	adds	r3, #8
 800b170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b174:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b17a:	e841 2300 	strex	r3, r2, [r1]
 800b17e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1e5      	bne.n	800b152 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d118      	bne.n	800b1c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	e853 3f00 	ldrex	r3, [r3]
 800b19a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	f023 0310 	bic.w	r3, r3, #16
 800b1a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1ac:	61bb      	str	r3, [r7, #24]
 800b1ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b0:	6979      	ldr	r1, [r7, #20]
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	e841 2300 	strex	r3, r2, [r1]
 800b1b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1e6      	bne.n	800b18e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2220      	movs	r2, #32
 800b1c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b1d4:	bf00      	nop
 800b1d6:	3754      	adds	r7, #84	@ 0x54
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	effffffe 	.word	0xeffffffe

0800b1e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d101      	bne.n	800b1fa <HAL_UARTEx_DisableFifoMode+0x16>
 800b1f6:	2302      	movs	r3, #2
 800b1f8:	e027      	b.n	800b24a <HAL_UARTEx_DisableFifoMode+0x66>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2224      	movs	r2, #36	@ 0x24
 800b206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f022 0201 	bic.w	r2, r2, #1
 800b220:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b228:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2220      	movs	r2, #32
 800b23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b266:	2b01      	cmp	r3, #1
 800b268:	d101      	bne.n	800b26e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b26a:	2302      	movs	r3, #2
 800b26c:	e02d      	b.n	800b2ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2224      	movs	r2, #36	@ 0x24
 800b27a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f022 0201 	bic.w	r2, r2, #1
 800b294:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f850 	bl	800b350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d101      	bne.n	800b2ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e02d      	b.n	800b346 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2224      	movs	r2, #36	@ 0x24
 800b2f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f022 0201 	bic.w	r2, r2, #1
 800b310:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	689b      	ldr	r3, [r3, #8]
 800b318:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	430a      	orrs	r2, r1
 800b324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f000 f812 	bl	800b350 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2220      	movs	r2, #32
 800b338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b344:	2300      	movs	r3, #0
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
	...

0800b350 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d108      	bne.n	800b372 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b370:	e031      	b.n	800b3d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b372:	2310      	movs	r3, #16
 800b374:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b376:	2310      	movs	r3, #16
 800b378:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	0e5b      	lsrs	r3, r3, #25
 800b382:	b2db      	uxtb	r3, r3
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	0f5b      	lsrs	r3, r3, #29
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f003 0307 	and.w	r3, r3, #7
 800b398:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b39a:	7bbb      	ldrb	r3, [r7, #14]
 800b39c:	7b3a      	ldrb	r2, [r7, #12]
 800b39e:	4911      	ldr	r1, [pc, #68]	@ (800b3e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3a0:	5c8a      	ldrb	r2, [r1, r2]
 800b3a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3a6:	7b3a      	ldrb	r2, [r7, #12]
 800b3a8:	490f      	ldr	r1, [pc, #60]	@ (800b3e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b3aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	7b7a      	ldrb	r2, [r7, #13]
 800b3bc:	4909      	ldr	r1, [pc, #36]	@ (800b3e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b3be:	5c8a      	ldrb	r2, [r1, r2]
 800b3c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3c4:	7b7a      	ldrb	r2, [r7, #13]
 800b3c6:	4908      	ldr	r1, [pc, #32]	@ (800b3e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b3c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	080115a4 	.word	0x080115a4
 800b3e8:	080115ac 	.word	0x080115ac

0800b3ec <__NVIC_SetPriority>:
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b3f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	db0a      	blt.n	800b416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	b2da      	uxtb	r2, r3
 800b404:	490c      	ldr	r1, [pc, #48]	@ (800b438 <__NVIC_SetPriority+0x4c>)
 800b406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b40a:	0112      	lsls	r2, r2, #4
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	440b      	add	r3, r1
 800b410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b414:	e00a      	b.n	800b42c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	4908      	ldr	r1, [pc, #32]	@ (800b43c <__NVIC_SetPriority+0x50>)
 800b41c:	88fb      	ldrh	r3, [r7, #6]
 800b41e:	f003 030f 	and.w	r3, r3, #15
 800b422:	3b04      	subs	r3, #4
 800b424:	0112      	lsls	r2, r2, #4
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	440b      	add	r3, r1
 800b42a:	761a      	strb	r2, [r3, #24]
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	e000e100 	.word	0xe000e100
 800b43c:	e000ed00 	.word	0xe000ed00

0800b440 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b440:	b580      	push	{r7, lr}
 800b442:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b444:	4b05      	ldr	r3, [pc, #20]	@ (800b45c <SysTick_Handler+0x1c>)
 800b446:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b448:	f001 fdb0 	bl	800cfac <xTaskGetSchedulerState>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d001      	beq.n	800b456 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b452:	f002 fba9 	bl	800dba8 <xPortSysTickHandler>
  }
}
 800b456:	bf00      	nop
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	e000e010 	.word	0xe000e010

0800b460 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b460:	b580      	push	{r7, lr}
 800b462:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b464:	2100      	movs	r1, #0
 800b466:	f06f 0004 	mvn.w	r0, #4
 800b46a:	f7ff ffbf 	bl	800b3ec <__NVIC_SetPriority>
#endif
}
 800b46e:	bf00      	nop
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b47a:	f3ef 8305 	mrs	r3, IPSR
 800b47e:	603b      	str	r3, [r7, #0]
  return(result);
 800b480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b482:	2b00      	cmp	r3, #0
 800b484:	d003      	beq.n	800b48e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b486:	f06f 0305 	mvn.w	r3, #5
 800b48a:	607b      	str	r3, [r7, #4]
 800b48c:	e00c      	b.n	800b4a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b48e:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b8 <osKernelInitialize+0x44>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d105      	bne.n	800b4a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b496:	4b08      	ldr	r3, [pc, #32]	@ (800b4b8 <osKernelInitialize+0x44>)
 800b498:	2201      	movs	r2, #1
 800b49a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	607b      	str	r3, [r7, #4]
 800b4a0:	e002      	b.n	800b4a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4a8:	687b      	ldr	r3, [r7, #4]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	24000ad8 	.word	0x24000ad8

0800b4bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4c2:	f3ef 8305 	mrs	r3, IPSR
 800b4c6:	603b      	str	r3, [r7, #0]
  return(result);
 800b4c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b4ce:	f06f 0305 	mvn.w	r3, #5
 800b4d2:	607b      	str	r3, [r7, #4]
 800b4d4:	e010      	b.n	800b4f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b504 <osKernelStart+0x48>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d109      	bne.n	800b4f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b4de:	f7ff ffbf 	bl	800b460 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b4e2:	4b08      	ldr	r3, [pc, #32]	@ (800b504 <osKernelStart+0x48>)
 800b4e4:	2202      	movs	r2, #2
 800b4e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b4e8:	f001 f8fc 	bl	800c6e4 <vTaskStartScheduler>
      stat = osOK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	607b      	str	r3, [r7, #4]
 800b4f0:	e002      	b.n	800b4f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b4f8:	687b      	ldr	r3, [r7, #4]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	24000ad8 	.word	0x24000ad8

0800b508 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08e      	sub	sp, #56	@ 0x38
 800b50c:	af04      	add	r7, sp, #16
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b514:	2300      	movs	r3, #0
 800b516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b518:	f3ef 8305 	mrs	r3, IPSR
 800b51c:	617b      	str	r3, [r7, #20]
  return(result);
 800b51e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b520:	2b00      	cmp	r3, #0
 800b522:	d17e      	bne.n	800b622 <osThreadNew+0x11a>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d07b      	beq.n	800b622 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b52a:	2380      	movs	r3, #128	@ 0x80
 800b52c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b52e:	2318      	movs	r3, #24
 800b530:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b536:	f04f 33ff 	mov.w	r3, #4294967295
 800b53a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d045      	beq.n	800b5ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <osThreadNew+0x48>
        name = attr->name;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d008      	beq.n	800b576 <osThreadNew+0x6e>
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	2b38      	cmp	r3, #56	@ 0x38
 800b568:	d805      	bhi.n	800b576 <osThreadNew+0x6e>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f003 0301 	and.w	r3, r3, #1
 800b572:	2b00      	cmp	r3, #0
 800b574:	d001      	beq.n	800b57a <osThreadNew+0x72>
        return (NULL);
 800b576:	2300      	movs	r3, #0
 800b578:	e054      	b.n	800b624 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d003      	beq.n	800b58a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	695b      	ldr	r3, [r3, #20]
 800b586:	089b      	lsrs	r3, r3, #2
 800b588:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00e      	beq.n	800b5b0 <osThreadNew+0xa8>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	2ba7      	cmp	r3, #167	@ 0xa7
 800b598:	d90a      	bls.n	800b5b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d006      	beq.n	800b5b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <osThreadNew+0xa8>
        mem = 1;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	e010      	b.n	800b5d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10c      	bne.n	800b5d2 <osThreadNew+0xca>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d108      	bne.n	800b5d2 <osThreadNew+0xca>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d104      	bne.n	800b5d2 <osThreadNew+0xca>
          mem = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61bb      	str	r3, [r7, #24]
 800b5cc:	e001      	b.n	800b5d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d110      	bne.n	800b5fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b5e0:	9202      	str	r2, [sp, #8]
 800b5e2:	9301      	str	r3, [sp, #4]
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	6a3a      	ldr	r2, [r7, #32]
 800b5ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 fe3a 	bl	800c268 <xTaskCreateStatic>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	613b      	str	r3, [r7, #16]
 800b5f8:	e013      	b.n	800b622 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d110      	bne.n	800b622 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	b29a      	uxth	r2, r3
 800b604:	f107 0310 	add.w	r3, r7, #16
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fe88 	bl	800c328 <xTaskCreate>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d001      	beq.n	800b622 <osThreadNew+0x11a>
            hTask = NULL;
 800b61e:	2300      	movs	r3, #0
 800b620:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b622:	693b      	ldr	r3, [r7, #16]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3728      	adds	r7, #40	@ 0x28
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	4a07      	ldr	r2, [pc, #28]	@ (800b658 <vApplicationGetIdleTaskMemory+0x2c>)
 800b63c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	4a06      	ldr	r2, [pc, #24]	@ (800b65c <vApplicationGetIdleTaskMemory+0x30>)
 800b642:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2280      	movs	r2, #128	@ 0x80
 800b648:	601a      	str	r2, [r3, #0]
}
 800b64a:	bf00      	nop
 800b64c:	3714      	adds	r7, #20
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	24000adc 	.word	0x24000adc
 800b65c:	24000b84 	.word	0x24000b84

0800b660 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4a07      	ldr	r2, [pc, #28]	@ (800b68c <vApplicationGetTimerTaskMemory+0x2c>)
 800b670:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	4a06      	ldr	r2, [pc, #24]	@ (800b690 <vApplicationGetTimerTaskMemory+0x30>)
 800b676:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b67e:	601a      	str	r2, [r3, #0]
}
 800b680:	bf00      	nop
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	24000d84 	.word	0x24000d84
 800b690:	24000e2c 	.word	0x24000e2c

0800b694 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f103 0208 	add.w	r2, r3, #8
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f103 0208 	add.w	r2, r3, #8
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f103 0208 	add.w	r2, r3, #8
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6e2:	bf00      	nop
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	689a      	ldr	r2, [r3, #8]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	601a      	str	r2, [r3, #0]
}
 800b72a:	bf00      	nop
 800b72c:	3714      	adds	r7, #20
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b736:	b480      	push	{r7}
 800b738:	b085      	sub	sp, #20
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74c:	d103      	bne.n	800b756 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	691b      	ldr	r3, [r3, #16]
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	e00c      	b.n	800b770 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3308      	adds	r3, #8
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	e002      	b.n	800b764 <vListInsert+0x2e>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	60fb      	str	r3, [r7, #12]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d2f6      	bcs.n	800b75e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	601a      	str	r2, [r3, #0]
}
 800b79c:	bf00      	nop
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b085      	sub	sp, #20
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	691b      	ldr	r3, [r3, #16]
 800b7b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	6892      	ldr	r2, [r2, #8]
 800b7be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	6852      	ldr	r2, [r2, #4]
 800b7c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d103      	bne.n	800b7dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	1e5a      	subs	r2, r3, #1
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10b      	bne.n	800b828 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b828:	f002 f92e 	bl	800da88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b834:	68f9      	ldr	r1, [r7, #12]
 800b836:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b838:	fb01 f303 	mul.w	r3, r1, r3
 800b83c:	441a      	add	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b858:	3b01      	subs	r3, #1
 800b85a:	68f9      	ldr	r1, [r7, #12]
 800b85c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b85e:	fb01 f303 	mul.w	r3, r1, r3
 800b862:	441a      	add	r2, r3
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	22ff      	movs	r2, #255	@ 0xff
 800b86c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	22ff      	movs	r2, #255	@ 0xff
 800b874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d114      	bne.n	800b8a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d01a      	beq.n	800b8bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3310      	adds	r3, #16
 800b88a:	4618      	mov	r0, r3
 800b88c:	f001 f9c8 	bl	800cc20 <xTaskRemoveFromEventList>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d012      	beq.n	800b8bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b896:	4b0d      	ldr	r3, [pc, #52]	@ (800b8cc <xQueueGenericReset+0xd0>)
 800b898:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	e009      	b.n	800b8bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	3310      	adds	r3, #16
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff fef1 	bl	800b694 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3324      	adds	r3, #36	@ 0x24
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff feec 	bl	800b694 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8bc:	f002 f916 	bl	800daec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8c0:	2301      	movs	r3, #1
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	e000ed04 	.word	0xe000ed04

0800b8d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08e      	sub	sp, #56	@ 0x38
 800b8d4:	af02      	add	r7, sp, #8
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10b      	bne.n	800b8fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	e7fd      	b.n	800b8f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10b      	bne.n	800b91a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b914:	bf00      	nop
 800b916:	bf00      	nop
 800b918:	e7fd      	b.n	800b916 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d002      	beq.n	800b926 <xQueueGenericCreateStatic+0x56>
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d001      	beq.n	800b92a <xQueueGenericCreateStatic+0x5a>
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <xQueueGenericCreateStatic+0x5c>
 800b92a:	2300      	movs	r3, #0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10b      	bne.n	800b948 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	623b      	str	r3, [r7, #32]
}
 800b942:	bf00      	nop
 800b944:	bf00      	nop
 800b946:	e7fd      	b.n	800b944 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d102      	bne.n	800b954 <xQueueGenericCreateStatic+0x84>
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <xQueueGenericCreateStatic+0x88>
 800b954:	2301      	movs	r3, #1
 800b956:	e000      	b.n	800b95a <xQueueGenericCreateStatic+0x8a>
 800b958:	2300      	movs	r3, #0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10b      	bne.n	800b976 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	61fb      	str	r3, [r7, #28]
}
 800b970:	bf00      	nop
 800b972:	bf00      	nop
 800b974:	e7fd      	b.n	800b972 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b976:	2350      	movs	r3, #80	@ 0x50
 800b978:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b50      	cmp	r3, #80	@ 0x50
 800b97e:	d00b      	beq.n	800b998 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	61bb      	str	r3, [r7, #24]
}
 800b992:	bf00      	nop
 800b994:	bf00      	nop
 800b996:	e7fd      	b.n	800b994 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b998:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00d      	beq.n	800b9c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	68b9      	ldr	r1, [r7, #8]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 f840 	bl	800ba40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3730      	adds	r7, #48	@ 0x30
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b9ca:	b580      	push	{r7, lr}
 800b9cc:	b08a      	sub	sp, #40	@ 0x28
 800b9ce:	af02      	add	r7, sp, #8
 800b9d0:	60f8      	str	r0, [r7, #12]
 800b9d2:	60b9      	str	r1, [r7, #8]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10b      	bne.n	800b9f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	613b      	str	r3, [r7, #16]
}
 800b9f0:	bf00      	nop
 800b9f2:	bf00      	nop
 800b9f4:	e7fd      	b.n	800b9f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	fb02 f303 	mul.w	r3, r2, r3
 800b9fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	3350      	adds	r3, #80	@ 0x50
 800ba04:	4618      	mov	r0, r3
 800ba06:	f002 f961 	bl	800dccc <pvPortMalloc>
 800ba0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d011      	beq.n	800ba36 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	3350      	adds	r3, #80	@ 0x50
 800ba1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba24:	79fa      	ldrb	r2, [r7, #7]
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	9300      	str	r3, [sp, #0]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	68b9      	ldr	r1, [r7, #8]
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 f805 	bl	800ba40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba36:	69bb      	ldr	r3, [r7, #24]
	}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3720      	adds	r7, #32
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d103      	bne.n	800ba5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	e002      	b.n	800ba62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba6e:	2101      	movs	r1, #1
 800ba70:	69b8      	ldr	r0, [r7, #24]
 800ba72:	f7ff fec3 	bl	800b7fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	78fa      	ldrb	r2, [r7, #3]
 800ba7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba7e:	bf00      	nop
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08e      	sub	sp, #56	@ 0x38
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba96:	2300      	movs	r3, #0
 800ba98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10b      	bne.n	800babc <xQueueGenericSend+0x34>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bab6:	bf00      	nop
 800bab8:	bf00      	nop
 800baba:	e7fd      	b.n	800bab8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d103      	bne.n	800baca <xQueueGenericSend+0x42>
 800bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <xQueueGenericSend+0x46>
 800baca:	2301      	movs	r3, #1
 800bacc:	e000      	b.n	800bad0 <xQueueGenericSend+0x48>
 800bace:	2300      	movs	r3, #0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10b      	bne.n	800baec <xQueueGenericSend+0x64>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bae6:	bf00      	nop
 800bae8:	bf00      	nop
 800baea:	e7fd      	b.n	800bae8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d103      	bne.n	800bafa <xQueueGenericSend+0x72>
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d101      	bne.n	800bafe <xQueueGenericSend+0x76>
 800bafa:	2301      	movs	r3, #1
 800bafc:	e000      	b.n	800bb00 <xQueueGenericSend+0x78>
 800bafe:	2300      	movs	r3, #0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10b      	bne.n	800bb1c <xQueueGenericSend+0x94>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	623b      	str	r3, [r7, #32]
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	e7fd      	b.n	800bb18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb1c:	f001 fa46 	bl	800cfac <xTaskGetSchedulerState>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d102      	bne.n	800bb2c <xQueueGenericSend+0xa4>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d101      	bne.n	800bb30 <xQueueGenericSend+0xa8>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e000      	b.n	800bb32 <xQueueGenericSend+0xaa>
 800bb30:	2300      	movs	r3, #0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10b      	bne.n	800bb4e <xQueueGenericSend+0xc6>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	61fb      	str	r3, [r7, #28]
}
 800bb48:	bf00      	nop
 800bb4a:	bf00      	nop
 800bb4c:	e7fd      	b.n	800bb4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb4e:	f001 ff9b 	bl	800da88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d302      	bcc.n	800bb64 <xQueueGenericSend+0xdc>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d129      	bne.n	800bbb8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	68b9      	ldr	r1, [r7, #8]
 800bb68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bb6a:	f000 fa0f 	bl	800bf8c <prvCopyDataToQueue>
 800bb6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d010      	beq.n	800bb9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb7a:	3324      	adds	r3, #36	@ 0x24
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f001 f84f 	bl	800cc20 <xTaskRemoveFromEventList>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d013      	beq.n	800bbb0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb88:	4b3f      	ldr	r3, [pc, #252]	@ (800bc88 <xQueueGenericSend+0x200>)
 800bb8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb8e:	601a      	str	r2, [r3, #0]
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	e00a      	b.n	800bbb0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d007      	beq.n	800bbb0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bba0:	4b39      	ldr	r3, [pc, #228]	@ (800bc88 <xQueueGenericSend+0x200>)
 800bba2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bba6:	601a      	str	r2, [r3, #0]
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bbb0:	f001 ff9c 	bl	800daec <vPortExitCritical>
				return pdPASS;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e063      	b.n	800bc80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d103      	bne.n	800bbc6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbbe:	f001 ff95 	bl	800daec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	e05c      	b.n	800bc80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d106      	bne.n	800bbda <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbcc:	f107 0314 	add.w	r3, r7, #20
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f001 f889 	bl	800cce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbda:	f001 ff87 	bl	800daec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbde:	f000 fdf1 	bl	800c7c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbe2:	f001 ff51 	bl	800da88 <vPortEnterCritical>
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bbec:	b25b      	sxtb	r3, r3
 800bbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf2:	d103      	bne.n	800bbfc <xQueueGenericSend+0x174>
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc02:	b25b      	sxtb	r3, r3
 800bc04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc08:	d103      	bne.n	800bc12 <xQueueGenericSend+0x18a>
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc12:	f001 ff6b 	bl	800daec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc16:	1d3a      	adds	r2, r7, #4
 800bc18:	f107 0314 	add.w	r3, r7, #20
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f001 f878 	bl	800cd14 <xTaskCheckForTimeOut>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d124      	bne.n	800bc74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc2c:	f000 faa6 	bl	800c17c <prvIsQueueFull>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d018      	beq.n	800bc68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc38:	3310      	adds	r3, #16
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	4611      	mov	r1, r2
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f000 ff9c 	bl	800cb7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bc44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc46:	f000 fa31 	bl	800c0ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bc4a:	f000 fdc9 	bl	800c7e0 <xTaskResumeAll>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f47f af7c 	bne.w	800bb4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bc56:	4b0c      	ldr	r3, [pc, #48]	@ (800bc88 <xQueueGenericSend+0x200>)
 800bc58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	e772      	b.n	800bb4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc6a:	f000 fa1f 	bl	800c0ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc6e:	f000 fdb7 	bl	800c7e0 <xTaskResumeAll>
 800bc72:	e76c      	b.n	800bb4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc76:	f000 fa19 	bl	800c0ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc7a:	f000 fdb1 	bl	800c7e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3738      	adds	r7, #56	@ 0x38
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b090      	sub	sp, #64	@ 0x40
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
 800bc98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10b      	bne.n	800bcbc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bcb6:	bf00      	nop
 800bcb8:	bf00      	nop
 800bcba:	e7fd      	b.n	800bcb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d103      	bne.n	800bcca <xQueueGenericSendFromISR+0x3e>
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <xQueueGenericSendFromISR+0x42>
 800bcca:	2301      	movs	r3, #1
 800bccc:	e000      	b.n	800bcd0 <xQueueGenericSendFromISR+0x44>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10b      	bne.n	800bcec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bce6:	bf00      	nop
 800bce8:	bf00      	nop
 800bcea:	e7fd      	b.n	800bce8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d103      	bne.n	800bcfa <xQueueGenericSendFromISR+0x6e>
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d101      	bne.n	800bcfe <xQueueGenericSendFromISR+0x72>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e000      	b.n	800bd00 <xQueueGenericSendFromISR+0x74>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10b      	bne.n	800bd1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	623b      	str	r3, [r7, #32]
}
 800bd16:	bf00      	nop
 800bd18:	bf00      	nop
 800bd1a:	e7fd      	b.n	800bd18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd1c:	f001 ff94 	bl	800dc48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bd20:	f3ef 8211 	mrs	r2, BASEPRI
 800bd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	61fa      	str	r2, [r7, #28]
 800bd36:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d302      	bcc.n	800bd4e <xQueueGenericSendFromISR+0xc2>
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d12f      	bne.n	800bdae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	68b9      	ldr	r1, [r7, #8]
 800bd62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd64:	f000 f912 	bl	800bf8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800bd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd70:	d112      	bne.n	800bd98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d016      	beq.n	800bda8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd7c:	3324      	adds	r3, #36	@ 0x24
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f000 ff4e 	bl	800cc20 <xTaskRemoveFromEventList>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00e      	beq.n	800bda8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00b      	beq.n	800bda8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	e007      	b.n	800bda8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	b25a      	sxtb	r2, r3
 800bda2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bdac:	e001      	b.n	800bdb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bdbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3740      	adds	r7, #64	@ 0x40
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08c      	sub	sp, #48	@ 0x30
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10b      	bne.n	800bdfa <xQueueReceive+0x32>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	623b      	str	r3, [r7, #32]
}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop
 800bdf8:	e7fd      	b.n	800bdf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d103      	bne.n	800be08 <xQueueReceive+0x40>
 800be00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <xQueueReceive+0x44>
 800be08:	2301      	movs	r3, #1
 800be0a:	e000      	b.n	800be0e <xQueueReceive+0x46>
 800be0c:	2300      	movs	r3, #0
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10b      	bne.n	800be2a <xQueueReceive+0x62>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	61fb      	str	r3, [r7, #28]
}
 800be24:	bf00      	nop
 800be26:	bf00      	nop
 800be28:	e7fd      	b.n	800be26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be2a:	f001 f8bf 	bl	800cfac <xTaskGetSchedulerState>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d102      	bne.n	800be3a <xQueueReceive+0x72>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <xQueueReceive+0x76>
 800be3a:	2301      	movs	r3, #1
 800be3c:	e000      	b.n	800be40 <xQueueReceive+0x78>
 800be3e:	2300      	movs	r3, #0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10b      	bne.n	800be5c <xQueueReceive+0x94>
	__asm volatile
 800be44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	61bb      	str	r3, [r7, #24]
}
 800be56:	bf00      	nop
 800be58:	bf00      	nop
 800be5a:	e7fd      	b.n	800be58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be5c:	f001 fe14 	bl	800da88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d01f      	beq.n	800beac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be6c:	68b9      	ldr	r1, [r7, #8]
 800be6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be70:	f000 f8f6 	bl	800c060 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be76:	1e5a      	subs	r2, r3, #1
 800be78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00f      	beq.n	800bea4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be86:	3310      	adds	r3, #16
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 fec9 	bl	800cc20 <xTaskRemoveFromEventList>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d007      	beq.n	800bea4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be94:	4b3c      	ldr	r3, [pc, #240]	@ (800bf88 <xQueueReceive+0x1c0>)
 800be96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bea4:	f001 fe22 	bl	800daec <vPortExitCritical>
				return pdPASS;
 800bea8:	2301      	movs	r3, #1
 800beaa:	e069      	b.n	800bf80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d103      	bne.n	800beba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800beb2:	f001 fe1b 	bl	800daec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800beb6:	2300      	movs	r3, #0
 800beb8:	e062      	b.n	800bf80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800beba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d106      	bne.n	800bece <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bec0:	f107 0310 	add.w	r3, r7, #16
 800bec4:	4618      	mov	r0, r3
 800bec6:	f000 ff0f 	bl	800cce8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800beca:	2301      	movs	r3, #1
 800becc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bece:	f001 fe0d 	bl	800daec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bed2:	f000 fc77 	bl	800c7c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bed6:	f001 fdd7 	bl	800da88 <vPortEnterCritical>
 800beda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bedc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bee0:	b25b      	sxtb	r3, r3
 800bee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee6:	d103      	bne.n	800bef0 <xQueueReceive+0x128>
 800bee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bef6:	b25b      	sxtb	r3, r3
 800bef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800befc:	d103      	bne.n	800bf06 <xQueueReceive+0x13e>
 800befe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf06:	f001 fdf1 	bl	800daec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf0a:	1d3a      	adds	r2, r7, #4
 800bf0c:	f107 0310 	add.w	r3, r7, #16
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 fefe 	bl	800cd14 <xTaskCheckForTimeOut>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d123      	bne.n	800bf66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf20:	f000 f916 	bl	800c150 <prvIsQueueEmpty>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d017      	beq.n	800bf5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2c:	3324      	adds	r3, #36	@ 0x24
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	4611      	mov	r1, r2
 800bf32:	4618      	mov	r0, r3
 800bf34:	f000 fe22 	bl	800cb7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf3a:	f000 f8b7 	bl	800c0ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf3e:	f000 fc4f 	bl	800c7e0 <xTaskResumeAll>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d189      	bne.n	800be5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bf48:	4b0f      	ldr	r3, [pc, #60]	@ (800bf88 <xQueueReceive+0x1c0>)
 800bf4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	e780      	b.n	800be5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf5c:	f000 f8a6 	bl	800c0ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf60:	f000 fc3e 	bl	800c7e0 <xTaskResumeAll>
 800bf64:	e77a      	b.n	800be5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bf66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf68:	f000 f8a0 	bl	800c0ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf6c:	f000 fc38 	bl	800c7e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf72:	f000 f8ed 	bl	800c150 <prvIsQueueEmpty>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	f43f af6f 	beq.w	800be5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3730      	adds	r7, #48	@ 0x30
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	e000ed04 	.word	0xe000ed04

0800bf8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b086      	sub	sp, #24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10d      	bne.n	800bfc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d14d      	bne.n	800c04e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f001 f816 	bl	800cfe8 <xTaskPriorityDisinherit>
 800bfbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	609a      	str	r2, [r3, #8]
 800bfc4:	e043      	b.n	800c04e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d119      	bne.n	800c000 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6858      	ldr	r0, [r3, #4]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	f003 f98f 	bl	800f2fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	685a      	ldr	r2, [r3, #4]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe4:	441a      	add	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d32b      	bcc.n	800c04e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	605a      	str	r2, [r3, #4]
 800bffe:	e026      	b.n	800c04e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	68d8      	ldr	r0, [r3, #12]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c008:	461a      	mov	r2, r3
 800c00a:	68b9      	ldr	r1, [r7, #8]
 800c00c:	f003 f975 	bl	800f2fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c018:	425b      	negs	r3, r3
 800c01a:	441a      	add	r2, r3
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	68da      	ldr	r2, [r3, #12]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d207      	bcs.n	800c03c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c034:	425b      	negs	r3, r3
 800c036:	441a      	add	r2, r3
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d105      	bne.n	800c04e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	3b01      	subs	r3, #1
 800c04c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c056:	697b      	ldr	r3, [r7, #20]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3718      	adds	r7, #24
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d018      	beq.n	800c0a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68da      	ldr	r2, [r3, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c07a:	441a      	add	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	68da      	ldr	r2, [r3, #12]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d303      	bcc.n	800c094 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68d9      	ldr	r1, [r3, #12]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c09c:	461a      	mov	r2, r3
 800c09e:	6838      	ldr	r0, [r7, #0]
 800c0a0:	f003 f92b 	bl	800f2fa <memcpy>
	}
}
 800c0a4:	bf00      	nop
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c0b4:	f001 fce8 	bl	800da88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c0be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0c0:	e011      	b.n	800c0e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d012      	beq.n	800c0f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	3324      	adds	r3, #36	@ 0x24
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 fda6 	bl	800cc20 <xTaskRemoveFromEventList>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d001      	beq.n	800c0de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c0da:	f000 fe7f 	bl	800cddc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	dce9      	bgt.n	800c0c2 <prvUnlockQueue+0x16>
 800c0ee:	e000      	b.n	800c0f2 <prvUnlockQueue+0x46>
					break;
 800c0f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	22ff      	movs	r2, #255	@ 0xff
 800c0f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c0fa:	f001 fcf7 	bl	800daec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c0fe:	f001 fcc3 	bl	800da88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c108:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c10a:	e011      	b.n	800c130 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d012      	beq.n	800c13a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	3310      	adds	r3, #16
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 fd81 	bl	800cc20 <xTaskRemoveFromEventList>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c124:	f000 fe5a 	bl	800cddc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	3b01      	subs	r3, #1
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c134:	2b00      	cmp	r3, #0
 800c136:	dce9      	bgt.n	800c10c <prvUnlockQueue+0x60>
 800c138:	e000      	b.n	800c13c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c13a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	22ff      	movs	r2, #255	@ 0xff
 800c140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c144:	f001 fcd2 	bl	800daec <vPortExitCritical>
}
 800c148:	bf00      	nop
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c158:	f001 fc96 	bl	800da88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c164:	2301      	movs	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	e001      	b.n	800c16e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c16e:	f001 fcbd 	bl	800daec <vPortExitCritical>

	return xReturn;
 800c172:	68fb      	ldr	r3, [r7, #12]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c184:	f001 fc80 	bl	800da88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c190:	429a      	cmp	r2, r3
 800c192:	d102      	bne.n	800c19a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c194:	2301      	movs	r3, #1
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e001      	b.n	800c19e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c19e:	f001 fca5 	bl	800daec <vPortExitCritical>

	return xReturn;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b085      	sub	sp, #20
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	e014      	b.n	800c1e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c1bc:	4a0f      	ldr	r2, [pc, #60]	@ (800c1fc <vQueueAddToRegistry+0x50>)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d10b      	bne.n	800c1e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c1c8:	490c      	ldr	r1, [pc, #48]	@ (800c1fc <vQueueAddToRegistry+0x50>)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c1d2:	4a0a      	ldr	r2, [pc, #40]	@ (800c1fc <vQueueAddToRegistry+0x50>)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	4413      	add	r3, r2
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c1de:	e006      	b.n	800c1ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	60fb      	str	r3, [r7, #12]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b07      	cmp	r3, #7
 800c1ea:	d9e7      	bls.n	800c1bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c1ec:	bf00      	nop
 800c1ee:	bf00      	nop
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	2400122c 	.word	0x2400122c

0800c200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c210:	f001 fc3a 	bl	800da88 <vPortEnterCritical>
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c21a:	b25b      	sxtb	r3, r3
 800c21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c220:	d103      	bne.n	800c22a <vQueueWaitForMessageRestricted+0x2a>
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2200      	movs	r2, #0
 800c226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c230:	b25b      	sxtb	r3, r3
 800c232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c236:	d103      	bne.n	800c240 <vQueueWaitForMessageRestricted+0x40>
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c240:	f001 fc54 	bl	800daec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d106      	bne.n	800c25a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	3324      	adds	r3, #36	@ 0x24
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	68b9      	ldr	r1, [r7, #8]
 800c254:	4618      	mov	r0, r3
 800c256:	f000 fcb7 	bl	800cbc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c25a:	6978      	ldr	r0, [r7, #20]
 800c25c:	f7ff ff26 	bl	800c0ac <prvUnlockQueue>
	}
 800c260:	bf00      	nop
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08e      	sub	sp, #56	@ 0x38
 800c26c:	af04      	add	r7, sp, #16
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10b      	bne.n	800c294 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	623b      	str	r3, [r7, #32]
}
 800c28e:	bf00      	nop
 800c290:	bf00      	nop
 800c292:	e7fd      	b.n	800c290 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10b      	bne.n	800c2b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	61fb      	str	r3, [r7, #28]
}
 800c2ac:	bf00      	nop
 800c2ae:	bf00      	nop
 800c2b0:	e7fd      	b.n	800c2ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c2b2:	23a8      	movs	r3, #168	@ 0xa8
 800c2b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	2ba8      	cmp	r3, #168	@ 0xa8
 800c2ba:	d00b      	beq.n	800c2d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	61bb      	str	r3, [r7, #24]
}
 800c2ce:	bf00      	nop
 800c2d0:	bf00      	nop
 800c2d2:	e7fd      	b.n	800c2d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c2d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01e      	beq.n	800c31a <xTaskCreateStatic+0xb2>
 800c2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01b      	beq.n	800c31a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9303      	str	r3, [sp, #12]
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fa:	9302      	str	r3, [sp, #8]
 800c2fc:	f107 0314 	add.w	r3, r7, #20
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 f851 	bl	800c3b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c314:	f000 f8f6 	bl	800c504 <prvAddNewTaskToReadyList>
 800c318:	e001      	b.n	800c31e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c31e:	697b      	ldr	r3, [r7, #20]
	}
 800c320:	4618      	mov	r0, r3
 800c322:	3728      	adds	r7, #40	@ 0x28
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08c      	sub	sp, #48	@ 0x30
 800c32c:	af04      	add	r7, sp, #16
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	603b      	str	r3, [r7, #0]
 800c334:	4613      	mov	r3, r2
 800c336:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c338:	88fb      	ldrh	r3, [r7, #6]
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4618      	mov	r0, r3
 800c33e:	f001 fcc5 	bl	800dccc <pvPortMalloc>
 800c342:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00e      	beq.n	800c368 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c34a:	20a8      	movs	r0, #168	@ 0xa8
 800c34c:	f001 fcbe 	bl	800dccc <pvPortMalloc>
 800c350:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d003      	beq.n	800c360 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	631a      	str	r2, [r3, #48]	@ 0x30
 800c35e:	e005      	b.n	800c36c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c360:	6978      	ldr	r0, [r7, #20]
 800c362:	f001 fd81 	bl	800de68 <vPortFree>
 800c366:	e001      	b.n	800c36c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c368:	2300      	movs	r3, #0
 800c36a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d017      	beq.n	800c3a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	2200      	movs	r2, #0
 800c376:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c37a:	88fa      	ldrh	r2, [r7, #6]
 800c37c:	2300      	movs	r3, #0
 800c37e:	9303      	str	r3, [sp, #12]
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	9302      	str	r3, [sp, #8]
 800c384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	68b9      	ldr	r1, [r7, #8]
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f000 f80f 	bl	800c3b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c396:	69f8      	ldr	r0, [r7, #28]
 800c398:	f000 f8b4 	bl	800c504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c39c:	2301      	movs	r3, #1
 800c39e:	61bb      	str	r3, [r7, #24]
 800c3a0:	e002      	b.n	800c3a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c3a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c3a8:	69bb      	ldr	r3, [r7, #24]
	}
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3720      	adds	r7, #32
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
	...

0800c3b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	21a5      	movs	r1, #165	@ 0xa5
 800c3ce:	f002 feb7 	bl	800f140 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c3dc:	440b      	add	r3, r1
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	4413      	add	r3, r2
 800c3e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	f023 0307 	bic.w	r3, r3, #7
 800c3ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	f003 0307 	and.w	r3, r3, #7
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00b      	beq.n	800c40e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	617b      	str	r3, [r7, #20]
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	e7fd      	b.n	800c40a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01f      	beq.n	800c454 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c414:	2300      	movs	r3, #0
 800c416:	61fb      	str	r3, [r7, #28]
 800c418:	e012      	b.n	800c440 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	4413      	add	r3, r2
 800c420:	7819      	ldrb	r1, [r3, #0]
 800c422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c424:	69fb      	ldr	r3, [r7, #28]
 800c426:	4413      	add	r3, r2
 800c428:	3334      	adds	r3, #52	@ 0x34
 800c42a:	460a      	mov	r2, r1
 800c42c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	4413      	add	r3, r2
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d006      	beq.n	800c448 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	3301      	adds	r3, #1
 800c43e:	61fb      	str	r3, [r7, #28]
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	2b0f      	cmp	r3, #15
 800c444:	d9e9      	bls.n	800c41a <prvInitialiseNewTask+0x66>
 800c446:	e000      	b.n	800c44a <prvInitialiseNewTask+0x96>
			{
				break;
 800c448:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c452:	e003      	b.n	800c45c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45e:	2b37      	cmp	r3, #55	@ 0x37
 800c460:	d901      	bls.n	800c466 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c462:	2337      	movs	r3, #55	@ 0x37
 800c464:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c46a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c470:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c474:	2200      	movs	r2, #0
 800c476:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47a:	3304      	adds	r3, #4
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff f929 	bl	800b6d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c484:	3318      	adds	r3, #24
 800c486:	4618      	mov	r0, r3
 800c488:	f7ff f924 	bl	800b6d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c490:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c494:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b4:	3354      	adds	r3, #84	@ 0x54
 800c4b6:	224c      	movs	r2, #76	@ 0x4c
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f002 fe40 	bl	800f140 <memset>
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	4a0d      	ldr	r2, [pc, #52]	@ (800c4f8 <prvInitialiseNewTask+0x144>)
 800c4c4:	659a      	str	r2, [r3, #88]	@ 0x58
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	4a0c      	ldr	r2, [pc, #48]	@ (800c4fc <prvInitialiseNewTask+0x148>)
 800c4ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ce:	4a0c      	ldr	r2, [pc, #48]	@ (800c500 <prvInitialiseNewTask+0x14c>)
 800c4d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	68f9      	ldr	r1, [r7, #12]
 800c4d6:	69b8      	ldr	r0, [r7, #24]
 800c4d8:	f001 f9a4 	bl	800d824 <pxPortInitialiseStack>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4ee:	bf00      	nop
 800c4f0:	3720      	adds	r7, #32
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	240054c0 	.word	0x240054c0
 800c4fc:	24005528 	.word	0x24005528
 800c500:	24005590 	.word	0x24005590

0800c504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c50c:	f001 fabc 	bl	800da88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c510:	4b2d      	ldr	r3, [pc, #180]	@ (800c5c8 <prvAddNewTaskToReadyList+0xc4>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3301      	adds	r3, #1
 800c516:	4a2c      	ldr	r2, [pc, #176]	@ (800c5c8 <prvAddNewTaskToReadyList+0xc4>)
 800c518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c51a:	4b2c      	ldr	r3, [pc, #176]	@ (800c5cc <prvAddNewTaskToReadyList+0xc8>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d109      	bne.n	800c536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c522:	4a2a      	ldr	r2, [pc, #168]	@ (800c5cc <prvAddNewTaskToReadyList+0xc8>)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c528:	4b27      	ldr	r3, [pc, #156]	@ (800c5c8 <prvAddNewTaskToReadyList+0xc4>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d110      	bne.n	800c552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c530:	f000 fc78 	bl	800ce24 <prvInitialiseTaskLists>
 800c534:	e00d      	b.n	800c552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c536:	4b26      	ldr	r3, [pc, #152]	@ (800c5d0 <prvAddNewTaskToReadyList+0xcc>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d109      	bne.n	800c552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c53e:	4b23      	ldr	r3, [pc, #140]	@ (800c5cc <prvAddNewTaskToReadyList+0xc8>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c548:	429a      	cmp	r2, r3
 800c54a:	d802      	bhi.n	800c552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c54c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5cc <prvAddNewTaskToReadyList+0xc8>)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c552:	4b20      	ldr	r3, [pc, #128]	@ (800c5d4 <prvAddNewTaskToReadyList+0xd0>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	3301      	adds	r3, #1
 800c558:	4a1e      	ldr	r2, [pc, #120]	@ (800c5d4 <prvAddNewTaskToReadyList+0xd0>)
 800c55a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c55c:	4b1d      	ldr	r3, [pc, #116]	@ (800c5d4 <prvAddNewTaskToReadyList+0xd0>)
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c568:	4b1b      	ldr	r3, [pc, #108]	@ (800c5d8 <prvAddNewTaskToReadyList+0xd4>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d903      	bls.n	800c578 <prvAddNewTaskToReadyList+0x74>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c574:	4a18      	ldr	r2, [pc, #96]	@ (800c5d8 <prvAddNewTaskToReadyList+0xd4>)
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c57c:	4613      	mov	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4a15      	ldr	r2, [pc, #84]	@ (800c5dc <prvAddNewTaskToReadyList+0xd8>)
 800c586:	441a      	add	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	3304      	adds	r3, #4
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f7ff f8ad 	bl	800b6ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c594:	f001 faaa 	bl	800daec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c598:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d0 <prvAddNewTaskToReadyList+0xcc>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00e      	beq.n	800c5be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5cc <prvAddNewTaskToReadyList+0xc8>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d207      	bcs.n	800c5be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c5ae:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e0 <prvAddNewTaskToReadyList+0xdc>)
 800c5b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5be:	bf00      	nop
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	24001740 	.word	0x24001740
 800c5cc:	2400126c 	.word	0x2400126c
 800c5d0:	2400174c 	.word	0x2400174c
 800c5d4:	2400175c 	.word	0x2400175c
 800c5d8:	24001748 	.word	0x24001748
 800c5dc:	24001270 	.word	0x24001270
 800c5e0:	e000ed04 	.word	0xe000ed04

0800c5e4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08a      	sub	sp, #40	@ 0x28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10b      	bne.n	800c610 <vTaskDelayUntil+0x2c>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5fc:	f383 8811 	msr	BASEPRI, r3
 800c600:	f3bf 8f6f 	isb	sy
 800c604:	f3bf 8f4f 	dsb	sy
 800c608:	617b      	str	r3, [r7, #20]
}
 800c60a:	bf00      	nop
 800c60c:	bf00      	nop
 800c60e:	e7fd      	b.n	800c60c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d10b      	bne.n	800c62e <vTaskDelayUntil+0x4a>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	613b      	str	r3, [r7, #16]
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	e7fd      	b.n	800c62a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800c62e:	4b2a      	ldr	r3, [pc, #168]	@ (800c6d8 <vTaskDelayUntil+0xf4>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d00b      	beq.n	800c64e <vTaskDelayUntil+0x6a>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	60fb      	str	r3, [r7, #12]
}
 800c648:	bf00      	nop
 800c64a:	bf00      	nop
 800c64c:	e7fd      	b.n	800c64a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800c64e:	f000 f8b9 	bl	800c7c4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c652:	4b22      	ldr	r3, [pc, #136]	@ (800c6dc <vTaskDelayUntil+0xf8>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	683a      	ldr	r2, [r7, #0]
 800c65e:	4413      	add	r3, r2
 800c660:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6a3a      	ldr	r2, [r7, #32]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d20b      	bcs.n	800c684 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	69fa      	ldr	r2, [r7, #28]
 800c672:	429a      	cmp	r2, r3
 800c674:	d211      	bcs.n	800c69a <vTaskDelayUntil+0xb6>
 800c676:	69fa      	ldr	r2, [r7, #28]
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d90d      	bls.n	800c69a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c67e:	2301      	movs	r3, #1
 800c680:	627b      	str	r3, [r7, #36]	@ 0x24
 800c682:	e00a      	b.n	800c69a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	69fa      	ldr	r2, [r7, #28]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d303      	bcc.n	800c696 <vTaskDelayUntil+0xb2>
 800c68e:	69fa      	ldr	r2, [r7, #28]
 800c690:	6a3b      	ldr	r3, [r7, #32]
 800c692:	429a      	cmp	r2, r3
 800c694:	d901      	bls.n	800c69a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c696:	2301      	movs	r3, #1
 800c698:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	69fa      	ldr	r2, [r7, #28]
 800c69e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d006      	beq.n	800c6b4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c6a6:	69fa      	ldr	r2, [r7, #28]
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fd0a 	bl	800d0c8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c6b4:	f000 f894 	bl	800c7e0 <xTaskResumeAll>
 800c6b8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d107      	bne.n	800c6d0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c6c0:	4b07      	ldr	r3, [pc, #28]	@ (800c6e0 <vTaskDelayUntil+0xfc>)
 800c6c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6d0:	bf00      	nop
 800c6d2:	3728      	adds	r7, #40	@ 0x28
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	24001768 	.word	0x24001768
 800c6dc:	24001744 	.word	0x24001744
 800c6e0:	e000ed04 	.word	0xe000ed04

0800c6e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08a      	sub	sp, #40	@ 0x28
 800c6e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6f2:	463a      	mov	r2, r7
 800c6f4:	1d39      	adds	r1, r7, #4
 800c6f6:	f107 0308 	add.w	r3, r7, #8
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f7fe ff96 	bl	800b62c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	9202      	str	r2, [sp, #8]
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	2300      	movs	r3, #0
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	2300      	movs	r3, #0
 800c710:	460a      	mov	r2, r1
 800c712:	4924      	ldr	r1, [pc, #144]	@ (800c7a4 <vTaskStartScheduler+0xc0>)
 800c714:	4824      	ldr	r0, [pc, #144]	@ (800c7a8 <vTaskStartScheduler+0xc4>)
 800c716:	f7ff fda7 	bl	800c268 <xTaskCreateStatic>
 800c71a:	4603      	mov	r3, r0
 800c71c:	4a23      	ldr	r2, [pc, #140]	@ (800c7ac <vTaskStartScheduler+0xc8>)
 800c71e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c720:	4b22      	ldr	r3, [pc, #136]	@ (800c7ac <vTaskStartScheduler+0xc8>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c728:	2301      	movs	r3, #1
 800c72a:	617b      	str	r3, [r7, #20]
 800c72c:	e001      	b.n	800c732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c72e:	2300      	movs	r3, #0
 800c730:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d102      	bne.n	800c73e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c738:	f000 fd1a 	bl	800d170 <xTimerCreateTimerTask>
 800c73c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d11b      	bne.n	800c77c <vTaskStartScheduler+0x98>
	__asm volatile
 800c744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c748:	f383 8811 	msr	BASEPRI, r3
 800c74c:	f3bf 8f6f 	isb	sy
 800c750:	f3bf 8f4f 	dsb	sy
 800c754:	613b      	str	r3, [r7, #16]
}
 800c756:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c758:	4b15      	ldr	r3, [pc, #84]	@ (800c7b0 <vTaskStartScheduler+0xcc>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3354      	adds	r3, #84	@ 0x54
 800c75e:	4a15      	ldr	r2, [pc, #84]	@ (800c7b4 <vTaskStartScheduler+0xd0>)
 800c760:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c762:	4b15      	ldr	r3, [pc, #84]	@ (800c7b8 <vTaskStartScheduler+0xd4>)
 800c764:	f04f 32ff 	mov.w	r2, #4294967295
 800c768:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c76a:	4b14      	ldr	r3, [pc, #80]	@ (800c7bc <vTaskStartScheduler+0xd8>)
 800c76c:	2201      	movs	r2, #1
 800c76e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c770:	4b13      	ldr	r3, [pc, #76]	@ (800c7c0 <vTaskStartScheduler+0xdc>)
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c776:	f001 f8e3 	bl	800d940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c77a:	e00f      	b.n	800c79c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c782:	d10b      	bne.n	800c79c <vTaskStartScheduler+0xb8>
	__asm volatile
 800c784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	60fb      	str	r3, [r7, #12]
}
 800c796:	bf00      	nop
 800c798:	bf00      	nop
 800c79a:	e7fd      	b.n	800c798 <vTaskStartScheduler+0xb4>
}
 800c79c:	bf00      	nop
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	08011500 	.word	0x08011500
 800c7a8:	0800cdf5 	.word	0x0800cdf5
 800c7ac:	24001764 	.word	0x24001764
 800c7b0:	2400126c 	.word	0x2400126c
 800c7b4:	2400008c 	.word	0x2400008c
 800c7b8:	24001760 	.word	0x24001760
 800c7bc:	2400174c 	.word	0x2400174c
 800c7c0:	24001744 	.word	0x24001744

0800c7c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c7c8:	4b04      	ldr	r3, [pc, #16]	@ (800c7dc <vTaskSuspendAll+0x18>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	4a03      	ldr	r2, [pc, #12]	@ (800c7dc <vTaskSuspendAll+0x18>)
 800c7d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c7d2:	bf00      	nop
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	24001768 	.word	0x24001768

0800c7e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7ee:	4b42      	ldr	r3, [pc, #264]	@ (800c8f8 <xTaskResumeAll+0x118>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10b      	bne.n	800c80e <xTaskResumeAll+0x2e>
	__asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	603b      	str	r3, [r7, #0]
}
 800c808:	bf00      	nop
 800c80a:	bf00      	nop
 800c80c:	e7fd      	b.n	800c80a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c80e:	f001 f93b 	bl	800da88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c812:	4b39      	ldr	r3, [pc, #228]	@ (800c8f8 <xTaskResumeAll+0x118>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3b01      	subs	r3, #1
 800c818:	4a37      	ldr	r2, [pc, #220]	@ (800c8f8 <xTaskResumeAll+0x118>)
 800c81a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c81c:	4b36      	ldr	r3, [pc, #216]	@ (800c8f8 <xTaskResumeAll+0x118>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d162      	bne.n	800c8ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c824:	4b35      	ldr	r3, [pc, #212]	@ (800c8fc <xTaskResumeAll+0x11c>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d05e      	beq.n	800c8ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c82c:	e02f      	b.n	800c88e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c82e:	4b34      	ldr	r3, [pc, #208]	@ (800c900 <xTaskResumeAll+0x120>)
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3318      	adds	r3, #24
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7fe ffb4 	bl	800b7a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	3304      	adds	r3, #4
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe ffaf 	bl	800b7a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c84e:	4b2d      	ldr	r3, [pc, #180]	@ (800c904 <xTaskResumeAll+0x124>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	429a      	cmp	r2, r3
 800c854:	d903      	bls.n	800c85e <xTaskResumeAll+0x7e>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c85a:	4a2a      	ldr	r2, [pc, #168]	@ (800c904 <xTaskResumeAll+0x124>)
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c862:	4613      	mov	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4a27      	ldr	r2, [pc, #156]	@ (800c908 <xTaskResumeAll+0x128>)
 800c86c:	441a      	add	r2, r3
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	3304      	adds	r3, #4
 800c872:	4619      	mov	r1, r3
 800c874:	4610      	mov	r0, r2
 800c876:	f7fe ff3a 	bl	800b6ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c87e:	4b23      	ldr	r3, [pc, #140]	@ (800c90c <xTaskResumeAll+0x12c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c884:	429a      	cmp	r2, r3
 800c886:	d302      	bcc.n	800c88e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c888:	4b21      	ldr	r3, [pc, #132]	@ (800c910 <xTaskResumeAll+0x130>)
 800c88a:	2201      	movs	r2, #1
 800c88c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c88e:	4b1c      	ldr	r3, [pc, #112]	@ (800c900 <xTaskResumeAll+0x120>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1cb      	bne.n	800c82e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d001      	beq.n	800c8a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c89c:	f000 fb66 	bl	800cf6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c914 <xTaskResumeAll+0x134>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d010      	beq.n	800c8ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c8ac:	f000 f846 	bl	800c93c <xTaskIncrementTick>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c8b6:	4b16      	ldr	r3, [pc, #88]	@ (800c910 <xTaskResumeAll+0x130>)
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1f1      	bne.n	800c8ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c8c8:	4b12      	ldr	r3, [pc, #72]	@ (800c914 <xTaskResumeAll+0x134>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8ce:	4b10      	ldr	r3, [pc, #64]	@ (800c910 <xTaskResumeAll+0x130>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d009      	beq.n	800c8ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8da:	4b0f      	ldr	r3, [pc, #60]	@ (800c918 <xTaskResumeAll+0x138>)
 800c8dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8e0:	601a      	str	r2, [r3, #0]
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8ea:	f001 f8ff 	bl	800daec <vPortExitCritical>

	return xAlreadyYielded;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	24001768 	.word	0x24001768
 800c8fc:	24001740 	.word	0x24001740
 800c900:	24001700 	.word	0x24001700
 800c904:	24001748 	.word	0x24001748
 800c908:	24001270 	.word	0x24001270
 800c90c:	2400126c 	.word	0x2400126c
 800c910:	24001754 	.word	0x24001754
 800c914:	24001750 	.word	0x24001750
 800c918:	e000ed04 	.word	0xe000ed04

0800c91c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c922:	4b05      	ldr	r3, [pc, #20]	@ (800c938 <xTaskGetTickCount+0x1c>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c928:	687b      	ldr	r3, [r7, #4]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	24001744 	.word	0x24001744

0800c93c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c942:	2300      	movs	r3, #0
 800c944:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c946:	4b4f      	ldr	r3, [pc, #316]	@ (800ca84 <xTaskIncrementTick+0x148>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f040 8090 	bne.w	800ca70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c950:	4b4d      	ldr	r3, [pc, #308]	@ (800ca88 <xTaskIncrementTick+0x14c>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3301      	adds	r3, #1
 800c956:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c958:	4a4b      	ldr	r2, [pc, #300]	@ (800ca88 <xTaskIncrementTick+0x14c>)
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d121      	bne.n	800c9a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c964:	4b49      	ldr	r3, [pc, #292]	@ (800ca8c <xTaskIncrementTick+0x150>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00b      	beq.n	800c986 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	603b      	str	r3, [r7, #0]
}
 800c980:	bf00      	nop
 800c982:	bf00      	nop
 800c984:	e7fd      	b.n	800c982 <xTaskIncrementTick+0x46>
 800c986:	4b41      	ldr	r3, [pc, #260]	@ (800ca8c <xTaskIncrementTick+0x150>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	4b40      	ldr	r3, [pc, #256]	@ (800ca90 <xTaskIncrementTick+0x154>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a3e      	ldr	r2, [pc, #248]	@ (800ca8c <xTaskIncrementTick+0x150>)
 800c992:	6013      	str	r3, [r2, #0]
 800c994:	4a3e      	ldr	r2, [pc, #248]	@ (800ca90 <xTaskIncrementTick+0x154>)
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6013      	str	r3, [r2, #0]
 800c99a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca94 <xTaskIncrementTick+0x158>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	4a3c      	ldr	r2, [pc, #240]	@ (800ca94 <xTaskIncrementTick+0x158>)
 800c9a2:	6013      	str	r3, [r2, #0]
 800c9a4:	f000 fae2 	bl	800cf6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9a8:	4b3b      	ldr	r3, [pc, #236]	@ (800ca98 <xTaskIncrementTick+0x15c>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d349      	bcc.n	800ca46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9b2:	4b36      	ldr	r3, [pc, #216]	@ (800ca8c <xTaskIncrementTick+0x150>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d104      	bne.n	800c9c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9bc:	4b36      	ldr	r3, [pc, #216]	@ (800ca98 <xTaskIncrementTick+0x15c>)
 800c9be:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c2:	601a      	str	r2, [r3, #0]
					break;
 800c9c4:	e03f      	b.n	800ca46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9c6:	4b31      	ldr	r3, [pc, #196]	@ (800ca8c <xTaskIncrementTick+0x150>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d203      	bcs.n	800c9e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9de:	4a2e      	ldr	r2, [pc, #184]	@ (800ca98 <xTaskIncrementTick+0x15c>)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9e4:	e02f      	b.n	800ca46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fe fedc 	bl	800b7a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d004      	beq.n	800ca02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	3318      	adds	r3, #24
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fe fed3 	bl	800b7a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca06:	4b25      	ldr	r3, [pc, #148]	@ (800ca9c <xTaskIncrementTick+0x160>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d903      	bls.n	800ca16 <xTaskIncrementTick+0xda>
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca12:	4a22      	ldr	r2, [pc, #136]	@ (800ca9c <xTaskIncrementTick+0x160>)
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4a1f      	ldr	r2, [pc, #124]	@ (800caa0 <xTaskIncrementTick+0x164>)
 800ca24:	441a      	add	r2, r3
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f7fe fe5e 	bl	800b6ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca36:	4b1b      	ldr	r3, [pc, #108]	@ (800caa4 <xTaskIncrementTick+0x168>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d3b8      	bcc.n	800c9b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ca40:	2301      	movs	r3, #1
 800ca42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca44:	e7b5      	b.n	800c9b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca46:	4b17      	ldr	r3, [pc, #92]	@ (800caa4 <xTaskIncrementTick+0x168>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca4c:	4914      	ldr	r1, [pc, #80]	@ (800caa0 <xTaskIncrementTick+0x164>)
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	440b      	add	r3, r1
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d901      	bls.n	800ca62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca62:	4b11      	ldr	r3, [pc, #68]	@ (800caa8 <xTaskIncrementTick+0x16c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d007      	beq.n	800ca7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	617b      	str	r3, [r7, #20]
 800ca6e:	e004      	b.n	800ca7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca70:	4b0e      	ldr	r3, [pc, #56]	@ (800caac <xTaskIncrementTick+0x170>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3301      	adds	r3, #1
 800ca76:	4a0d      	ldr	r2, [pc, #52]	@ (800caac <xTaskIncrementTick+0x170>)
 800ca78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca7a:	697b      	ldr	r3, [r7, #20]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	24001768 	.word	0x24001768
 800ca88:	24001744 	.word	0x24001744
 800ca8c:	240016f8 	.word	0x240016f8
 800ca90:	240016fc 	.word	0x240016fc
 800ca94:	24001758 	.word	0x24001758
 800ca98:	24001760 	.word	0x24001760
 800ca9c:	24001748 	.word	0x24001748
 800caa0:	24001270 	.word	0x24001270
 800caa4:	2400126c 	.word	0x2400126c
 800caa8:	24001754 	.word	0x24001754
 800caac:	24001750 	.word	0x24001750

0800cab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cab6:	4b2b      	ldr	r3, [pc, #172]	@ (800cb64 <vTaskSwitchContext+0xb4>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d003      	beq.n	800cac6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cabe:	4b2a      	ldr	r3, [pc, #168]	@ (800cb68 <vTaskSwitchContext+0xb8>)
 800cac0:	2201      	movs	r2, #1
 800cac2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cac4:	e047      	b.n	800cb56 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800cac6:	4b28      	ldr	r3, [pc, #160]	@ (800cb68 <vTaskSwitchContext+0xb8>)
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cacc:	4b27      	ldr	r3, [pc, #156]	@ (800cb6c <vTaskSwitchContext+0xbc>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	60fb      	str	r3, [r7, #12]
 800cad2:	e011      	b.n	800caf8 <vTaskSwitchContext+0x48>
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d10b      	bne.n	800caf2 <vTaskSwitchContext+0x42>
	__asm volatile
 800cada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	607b      	str	r3, [r7, #4]
}
 800caec:	bf00      	nop
 800caee:	bf00      	nop
 800caf0:	e7fd      	b.n	800caee <vTaskSwitchContext+0x3e>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	60fb      	str	r3, [r7, #12]
 800caf8:	491d      	ldr	r1, [pc, #116]	@ (800cb70 <vTaskSwitchContext+0xc0>)
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	4613      	mov	r3, r2
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4413      	add	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	440b      	add	r3, r1
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d0e3      	beq.n	800cad4 <vTaskSwitchContext+0x24>
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	4413      	add	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4a16      	ldr	r2, [pc, #88]	@ (800cb70 <vTaskSwitchContext+0xc0>)
 800cb18:	4413      	add	r3, r2
 800cb1a:	60bb      	str	r3, [r7, #8]
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	685a      	ldr	r2, [r3, #4]
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	605a      	str	r2, [r3, #4]
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	685a      	ldr	r2, [r3, #4]
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d104      	bne.n	800cb3c <vTaskSwitchContext+0x8c>
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	605a      	str	r2, [r3, #4]
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	4a0c      	ldr	r2, [pc, #48]	@ (800cb74 <vTaskSwitchContext+0xc4>)
 800cb44:	6013      	str	r3, [r2, #0]
 800cb46:	4a09      	ldr	r2, [pc, #36]	@ (800cb6c <vTaskSwitchContext+0xbc>)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb4c:	4b09      	ldr	r3, [pc, #36]	@ (800cb74 <vTaskSwitchContext+0xc4>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3354      	adds	r3, #84	@ 0x54
 800cb52:	4a09      	ldr	r2, [pc, #36]	@ (800cb78 <vTaskSwitchContext+0xc8>)
 800cb54:	6013      	str	r3, [r2, #0]
}
 800cb56:	bf00      	nop
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	24001768 	.word	0x24001768
 800cb68:	24001754 	.word	0x24001754
 800cb6c:	24001748 	.word	0x24001748
 800cb70:	24001270 	.word	0x24001270
 800cb74:	2400126c 	.word	0x2400126c
 800cb78:	2400008c 	.word	0x2400008c

0800cb7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10b      	bne.n	800cba4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	60fb      	str	r3, [r7, #12]
}
 800cb9e:	bf00      	nop
 800cba0:	bf00      	nop
 800cba2:	e7fd      	b.n	800cba0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cba4:	4b07      	ldr	r3, [pc, #28]	@ (800cbc4 <vTaskPlaceOnEventList+0x48>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	3318      	adds	r3, #24
 800cbaa:	4619      	mov	r1, r3
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7fe fdc2 	bl	800b736 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	6838      	ldr	r0, [r7, #0]
 800cbb6:	f000 fa87 	bl	800d0c8 <prvAddCurrentTaskToDelayedList>
}
 800cbba:	bf00      	nop
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	2400126c 	.word	0x2400126c

0800cbc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b086      	sub	sp, #24
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d10b      	bne.n	800cbf2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800cbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbde:	f383 8811 	msr	BASEPRI, r3
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	617b      	str	r3, [r7, #20]
}
 800cbec:	bf00      	nop
 800cbee:	bf00      	nop
 800cbf0:	e7fd      	b.n	800cbee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbf2:	4b0a      	ldr	r3, [pc, #40]	@ (800cc1c <vTaskPlaceOnEventListRestricted+0x54>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	3318      	adds	r3, #24
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f7fe fd77 	bl	800b6ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d002      	beq.n	800cc0c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800cc06:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc0c:	6879      	ldr	r1, [r7, #4]
 800cc0e:	68b8      	ldr	r0, [r7, #8]
 800cc10:	f000 fa5a 	bl	800d0c8 <prvAddCurrentTaskToDelayedList>
	}
 800cc14:	bf00      	nop
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	2400126c 	.word	0x2400126c

0800cc20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10b      	bne.n	800cc4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc3a:	f383 8811 	msr	BASEPRI, r3
 800cc3e:	f3bf 8f6f 	isb	sy
 800cc42:	f3bf 8f4f 	dsb	sy
 800cc46:	60fb      	str	r3, [r7, #12]
}
 800cc48:	bf00      	nop
 800cc4a:	bf00      	nop
 800cc4c:	e7fd      	b.n	800cc4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	3318      	adds	r3, #24
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe fda8 	bl	800b7a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc58:	4b1d      	ldr	r3, [pc, #116]	@ (800ccd0 <xTaskRemoveFromEventList+0xb0>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d11d      	bne.n	800cc9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	3304      	adds	r3, #4
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fd9f 	bl	800b7a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc6e:	4b19      	ldr	r3, [pc, #100]	@ (800ccd4 <xTaskRemoveFromEventList+0xb4>)
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d903      	bls.n	800cc7e <xTaskRemoveFromEventList+0x5e>
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7a:	4a16      	ldr	r2, [pc, #88]	@ (800ccd4 <xTaskRemoveFromEventList+0xb4>)
 800cc7c:	6013      	str	r3, [r2, #0]
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc82:	4613      	mov	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4a13      	ldr	r2, [pc, #76]	@ (800ccd8 <xTaskRemoveFromEventList+0xb8>)
 800cc8c:	441a      	add	r2, r3
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	3304      	adds	r3, #4
 800cc92:	4619      	mov	r1, r3
 800cc94:	4610      	mov	r0, r2
 800cc96:	f7fe fd2a 	bl	800b6ee <vListInsertEnd>
 800cc9a:	e005      	b.n	800cca8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	3318      	adds	r3, #24
 800cca0:	4619      	mov	r1, r3
 800cca2:	480e      	ldr	r0, [pc, #56]	@ (800ccdc <xTaskRemoveFromEventList+0xbc>)
 800cca4:	f7fe fd23 	bl	800b6ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccac:	4b0c      	ldr	r3, [pc, #48]	@ (800cce0 <xTaskRemoveFromEventList+0xc0>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d905      	bls.n	800ccc2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ccba:	4b0a      	ldr	r3, [pc, #40]	@ (800cce4 <xTaskRemoveFromEventList+0xc4>)
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	e001      	b.n	800ccc6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ccc6:	697b      	ldr	r3, [r7, #20]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	24001768 	.word	0x24001768
 800ccd4:	24001748 	.word	0x24001748
 800ccd8:	24001270 	.word	0x24001270
 800ccdc:	24001700 	.word	0x24001700
 800cce0:	2400126c 	.word	0x2400126c
 800cce4:	24001754 	.word	0x24001754

0800cce8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ccf0:	4b06      	ldr	r3, [pc, #24]	@ (800cd0c <vTaskInternalSetTimeOutState+0x24>)
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ccf8:	4b05      	ldr	r3, [pc, #20]	@ (800cd10 <vTaskInternalSetTimeOutState+0x28>)
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	605a      	str	r2, [r3, #4]
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	24001758 	.word	0x24001758
 800cd10:	24001744 	.word	0x24001744

0800cd14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b088      	sub	sp, #32
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10b      	bne.n	800cd3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	613b      	str	r3, [r7, #16]
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	e7fd      	b.n	800cd38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10b      	bne.n	800cd5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	60fb      	str	r3, [r7, #12]
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop
 800cd58:	e7fd      	b.n	800cd56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cd5a:	f000 fe95 	bl	800da88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd5e:	4b1d      	ldr	r3, [pc, #116]	@ (800cdd4 <xTaskCheckForTimeOut+0xc0>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	69ba      	ldr	r2, [r7, #24]
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd76:	d102      	bne.n	800cd7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	61fb      	str	r3, [r7, #28]
 800cd7c:	e023      	b.n	800cdc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	4b15      	ldr	r3, [pc, #84]	@ (800cdd8 <xTaskCheckForTimeOut+0xc4>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d007      	beq.n	800cd9a <xTaskCheckForTimeOut+0x86>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	69ba      	ldr	r2, [r7, #24]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d302      	bcc.n	800cd9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd94:	2301      	movs	r3, #1
 800cd96:	61fb      	str	r3, [r7, #28]
 800cd98:	e015      	b.n	800cdc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	697a      	ldr	r2, [r7, #20]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d20b      	bcs.n	800cdbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	681a      	ldr	r2, [r3, #0]
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	1ad2      	subs	r2, r2, r3
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7ff ff99 	bl	800cce8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	61fb      	str	r3, [r7, #28]
 800cdba:	e004      	b.n	800cdc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdc6:	f000 fe91 	bl	800daec <vPortExitCritical>

	return xReturn;
 800cdca:	69fb      	ldr	r3, [r7, #28]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3720      	adds	r7, #32
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	24001744 	.word	0x24001744
 800cdd8:	24001758 	.word	0x24001758

0800cddc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cddc:	b480      	push	{r7}
 800cdde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cde0:	4b03      	ldr	r3, [pc, #12]	@ (800cdf0 <vTaskMissedYield+0x14>)
 800cde2:	2201      	movs	r2, #1
 800cde4:	601a      	str	r2, [r3, #0]
}
 800cde6:	bf00      	nop
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr
 800cdf0:	24001754 	.word	0x24001754

0800cdf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cdfc:	f000 f852 	bl	800cea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce00:	4b06      	ldr	r3, [pc, #24]	@ (800ce1c <prvIdleTask+0x28>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b01      	cmp	r3, #1
 800ce06:	d9f9      	bls.n	800cdfc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce08:	4b05      	ldr	r3, [pc, #20]	@ (800ce20 <prvIdleTask+0x2c>)
 800ce0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce18:	e7f0      	b.n	800cdfc <prvIdleTask+0x8>
 800ce1a:	bf00      	nop
 800ce1c:	24001270 	.word	0x24001270
 800ce20:	e000ed04 	.word	0xe000ed04

0800ce24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	607b      	str	r3, [r7, #4]
 800ce2e:	e00c      	b.n	800ce4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	4613      	mov	r3, r2
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4413      	add	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4a12      	ldr	r2, [pc, #72]	@ (800ce84 <prvInitialiseTaskLists+0x60>)
 800ce3c:	4413      	add	r3, r2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fe fc28 	bl	800b694 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	3301      	adds	r3, #1
 800ce48:	607b      	str	r3, [r7, #4]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b37      	cmp	r3, #55	@ 0x37
 800ce4e:	d9ef      	bls.n	800ce30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce50:	480d      	ldr	r0, [pc, #52]	@ (800ce88 <prvInitialiseTaskLists+0x64>)
 800ce52:	f7fe fc1f 	bl	800b694 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce56:	480d      	ldr	r0, [pc, #52]	@ (800ce8c <prvInitialiseTaskLists+0x68>)
 800ce58:	f7fe fc1c 	bl	800b694 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce5c:	480c      	ldr	r0, [pc, #48]	@ (800ce90 <prvInitialiseTaskLists+0x6c>)
 800ce5e:	f7fe fc19 	bl	800b694 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce62:	480c      	ldr	r0, [pc, #48]	@ (800ce94 <prvInitialiseTaskLists+0x70>)
 800ce64:	f7fe fc16 	bl	800b694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce68:	480b      	ldr	r0, [pc, #44]	@ (800ce98 <prvInitialiseTaskLists+0x74>)
 800ce6a:	f7fe fc13 	bl	800b694 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce9c <prvInitialiseTaskLists+0x78>)
 800ce70:	4a05      	ldr	r2, [pc, #20]	@ (800ce88 <prvInitialiseTaskLists+0x64>)
 800ce72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce74:	4b0a      	ldr	r3, [pc, #40]	@ (800cea0 <prvInitialiseTaskLists+0x7c>)
 800ce76:	4a05      	ldr	r2, [pc, #20]	@ (800ce8c <prvInitialiseTaskLists+0x68>)
 800ce78:	601a      	str	r2, [r3, #0]
}
 800ce7a:	bf00      	nop
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	24001270 	.word	0x24001270
 800ce88:	240016d0 	.word	0x240016d0
 800ce8c:	240016e4 	.word	0x240016e4
 800ce90:	24001700 	.word	0x24001700
 800ce94:	24001714 	.word	0x24001714
 800ce98:	2400172c 	.word	0x2400172c
 800ce9c:	240016f8 	.word	0x240016f8
 800cea0:	240016fc 	.word	0x240016fc

0800cea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ceaa:	e019      	b.n	800cee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ceac:	f000 fdec 	bl	800da88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceb0:	4b10      	ldr	r3, [pc, #64]	@ (800cef4 <prvCheckTasksWaitingTermination+0x50>)
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3304      	adds	r3, #4
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fe fc73 	bl	800b7a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cec2:	4b0d      	ldr	r3, [pc, #52]	@ (800cef8 <prvCheckTasksWaitingTermination+0x54>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3b01      	subs	r3, #1
 800cec8:	4a0b      	ldr	r2, [pc, #44]	@ (800cef8 <prvCheckTasksWaitingTermination+0x54>)
 800ceca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cecc:	4b0b      	ldr	r3, [pc, #44]	@ (800cefc <prvCheckTasksWaitingTermination+0x58>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	3b01      	subs	r3, #1
 800ced2:	4a0a      	ldr	r2, [pc, #40]	@ (800cefc <prvCheckTasksWaitingTermination+0x58>)
 800ced4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ced6:	f000 fe09 	bl	800daec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 f810 	bl	800cf00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cee0:	4b06      	ldr	r3, [pc, #24]	@ (800cefc <prvCheckTasksWaitingTermination+0x58>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1e1      	bne.n	800ceac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	24001714 	.word	0x24001714
 800cef8:	24001740 	.word	0x24001740
 800cefc:	24001728 	.word	0x24001728

0800cf00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3354      	adds	r3, #84	@ 0x54
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f002 f933 	bl	800f178 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d108      	bne.n	800cf2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf20:	4618      	mov	r0, r3
 800cf22:	f000 ffa1 	bl	800de68 <vPortFree>
				vPortFree( pxTCB );
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 ff9e 	bl	800de68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf2c:	e019      	b.n	800cf62 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d103      	bne.n	800cf40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 ff95 	bl	800de68 <vPortFree>
	}
 800cf3e:	e010      	b.n	800cf62 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d00b      	beq.n	800cf62 <prvDeleteTCB+0x62>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	60fb      	str	r3, [r7, #12]
}
 800cf5c:	bf00      	nop
 800cf5e:	bf00      	nop
 800cf60:	e7fd      	b.n	800cf5e <prvDeleteTCB+0x5e>
	}
 800cf62:	bf00      	nop
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
	...

0800cf6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf72:	4b0c      	ldr	r3, [pc, #48]	@ (800cfa4 <prvResetNextTaskUnblockTime+0x38>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d104      	bne.n	800cf86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf7c:	4b0a      	ldr	r3, [pc, #40]	@ (800cfa8 <prvResetNextTaskUnblockTime+0x3c>)
 800cf7e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf84:	e008      	b.n	800cf98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf86:	4b07      	ldr	r3, [pc, #28]	@ (800cfa4 <prvResetNextTaskUnblockTime+0x38>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	4a04      	ldr	r2, [pc, #16]	@ (800cfa8 <prvResetNextTaskUnblockTime+0x3c>)
 800cf96:	6013      	str	r3, [r2, #0]
}
 800cf98:	bf00      	nop
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	240016f8 	.word	0x240016f8
 800cfa8:	24001760 	.word	0x24001760

0800cfac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cfb2:	4b0b      	ldr	r3, [pc, #44]	@ (800cfe0 <xTaskGetSchedulerState+0x34>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d102      	bne.n	800cfc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	607b      	str	r3, [r7, #4]
 800cfbe:	e008      	b.n	800cfd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfc0:	4b08      	ldr	r3, [pc, #32]	@ (800cfe4 <xTaskGetSchedulerState+0x38>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d102      	bne.n	800cfce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfc8:	2302      	movs	r3, #2
 800cfca:	607b      	str	r3, [r7, #4]
 800cfcc:	e001      	b.n	800cfd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cfd2:	687b      	ldr	r3, [r7, #4]
	}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	2400174c 	.word	0x2400174c
 800cfe4:	24001768 	.word	0x24001768

0800cfe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cff4:	2300      	movs	r3, #0
 800cff6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d058      	beq.n	800d0b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cffe:	4b2f      	ldr	r3, [pc, #188]	@ (800d0bc <xTaskPriorityDisinherit+0xd4>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	693a      	ldr	r2, [r7, #16]
 800d004:	429a      	cmp	r2, r3
 800d006:	d00b      	beq.n	800d020 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	60fb      	str	r3, [r7, #12]
}
 800d01a:	bf00      	nop
 800d01c:	bf00      	nop
 800d01e:	e7fd      	b.n	800d01c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10b      	bne.n	800d040 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	60bb      	str	r3, [r7, #8]
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	e7fd      	b.n	800d03c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d044:	1e5a      	subs	r2, r3, #1
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d052:	429a      	cmp	r2, r3
 800d054:	d02c      	beq.n	800d0b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d128      	bne.n	800d0b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	3304      	adds	r3, #4
 800d062:	4618      	mov	r0, r3
 800d064:	f7fe fba0 	bl	800b7a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d074:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d080:	4b0f      	ldr	r3, [pc, #60]	@ (800d0c0 <xTaskPriorityDisinherit+0xd8>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	429a      	cmp	r2, r3
 800d086:	d903      	bls.n	800d090 <xTaskPriorityDisinherit+0xa8>
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d08c:	4a0c      	ldr	r2, [pc, #48]	@ (800d0c0 <xTaskPriorityDisinherit+0xd8>)
 800d08e:	6013      	str	r3, [r2, #0]
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d094:	4613      	mov	r3, r2
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	4413      	add	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4a09      	ldr	r2, [pc, #36]	@ (800d0c4 <xTaskPriorityDisinherit+0xdc>)
 800d09e:	441a      	add	r2, r3
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4610      	mov	r0, r2
 800d0a8:	f7fe fb21 	bl	800b6ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0b0:	697b      	ldr	r3, [r7, #20]
	}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3718      	adds	r7, #24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	2400126c 	.word	0x2400126c
 800d0c0:	24001748 	.word	0x24001748
 800d0c4:	24001270 	.word	0x24001270

0800d0c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0d2:	4b21      	ldr	r3, [pc, #132]	@ (800d158 <prvAddCurrentTaskToDelayedList+0x90>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0d8:	4b20      	ldr	r3, [pc, #128]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x94>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	3304      	adds	r3, #4
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fb62 	bl	800b7a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ea:	d10a      	bne.n	800d102 <prvAddCurrentTaskToDelayedList+0x3a>
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d007      	beq.n	800d102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0f2:	4b1a      	ldr	r3, [pc, #104]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x94>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3304      	adds	r3, #4
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	4819      	ldr	r0, [pc, #100]	@ (800d160 <prvAddCurrentTaskToDelayedList+0x98>)
 800d0fc:	f7fe faf7 	bl	800b6ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d100:	e026      	b.n	800d150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4413      	add	r3, r2
 800d108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d10a:	4b14      	ldr	r3, [pc, #80]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x94>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	429a      	cmp	r2, r3
 800d118:	d209      	bcs.n	800d12e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d11a:	4b12      	ldr	r3, [pc, #72]	@ (800d164 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	4b0f      	ldr	r3, [pc, #60]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x94>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3304      	adds	r3, #4
 800d124:	4619      	mov	r1, r3
 800d126:	4610      	mov	r0, r2
 800d128:	f7fe fb05 	bl	800b736 <vListInsert>
}
 800d12c:	e010      	b.n	800d150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d12e:	4b0e      	ldr	r3, [pc, #56]	@ (800d168 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	4b0a      	ldr	r3, [pc, #40]	@ (800d15c <prvAddCurrentTaskToDelayedList+0x94>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3304      	adds	r3, #4
 800d138:	4619      	mov	r1, r3
 800d13a:	4610      	mov	r0, r2
 800d13c:	f7fe fafb 	bl	800b736 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d140:	4b0a      	ldr	r3, [pc, #40]	@ (800d16c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68ba      	ldr	r2, [r7, #8]
 800d146:	429a      	cmp	r2, r3
 800d148:	d202      	bcs.n	800d150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d14a:	4a08      	ldr	r2, [pc, #32]	@ (800d16c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	6013      	str	r3, [r2, #0]
}
 800d150:	bf00      	nop
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	24001744 	.word	0x24001744
 800d15c:	2400126c 	.word	0x2400126c
 800d160:	2400172c 	.word	0x2400172c
 800d164:	240016fc 	.word	0x240016fc
 800d168:	240016f8 	.word	0x240016f8
 800d16c:	24001760 	.word	0x24001760

0800d170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08a      	sub	sp, #40	@ 0x28
 800d174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d176:	2300      	movs	r3, #0
 800d178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d17a:	f000 fb13 	bl	800d7a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d17e:	4b1d      	ldr	r3, [pc, #116]	@ (800d1f4 <xTimerCreateTimerTask+0x84>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d021      	beq.n	800d1ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d186:	2300      	movs	r3, #0
 800d188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d18a:	2300      	movs	r3, #0
 800d18c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d18e:	1d3a      	adds	r2, r7, #4
 800d190:	f107 0108 	add.w	r1, r7, #8
 800d194:	f107 030c 	add.w	r3, r7, #12
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fa61 	bl	800b660 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d19e:	6879      	ldr	r1, [r7, #4]
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	9202      	str	r2, [sp, #8]
 800d1a6:	9301      	str	r3, [sp, #4]
 800d1a8:	2302      	movs	r3, #2
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	460a      	mov	r2, r1
 800d1b0:	4911      	ldr	r1, [pc, #68]	@ (800d1f8 <xTimerCreateTimerTask+0x88>)
 800d1b2:	4812      	ldr	r0, [pc, #72]	@ (800d1fc <xTimerCreateTimerTask+0x8c>)
 800d1b4:	f7ff f858 	bl	800c268 <xTaskCreateStatic>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	4a11      	ldr	r2, [pc, #68]	@ (800d200 <xTimerCreateTimerTask+0x90>)
 800d1bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d1be:	4b10      	ldr	r3, [pc, #64]	@ (800d200 <xTimerCreateTimerTask+0x90>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10b      	bne.n	800d1e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	613b      	str	r3, [r7, #16]
}
 800d1e2:	bf00      	nop
 800d1e4:	bf00      	nop
 800d1e6:	e7fd      	b.n	800d1e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d1e8:	697b      	ldr	r3, [r7, #20]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3718      	adds	r7, #24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	2400179c 	.word	0x2400179c
 800d1f8:	08011508 	.word	0x08011508
 800d1fc:	0800d33d 	.word	0x0800d33d
 800d200:	240017a0 	.word	0x240017a0

0800d204 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b08a      	sub	sp, #40	@ 0x28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
 800d210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d212:	2300      	movs	r3, #0
 800d214:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10b      	bne.n	800d234 <xTimerGenericCommand+0x30>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	623b      	str	r3, [r7, #32]
}
 800d22e:	bf00      	nop
 800d230:	bf00      	nop
 800d232:	e7fd      	b.n	800d230 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d234:	4b19      	ldr	r3, [pc, #100]	@ (800d29c <xTimerGenericCommand+0x98>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d02a      	beq.n	800d292 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2b05      	cmp	r3, #5
 800d24c:	dc18      	bgt.n	800d280 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d24e:	f7ff fead 	bl	800cfac <xTaskGetSchedulerState>
 800d252:	4603      	mov	r3, r0
 800d254:	2b02      	cmp	r3, #2
 800d256:	d109      	bne.n	800d26c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d258:	4b10      	ldr	r3, [pc, #64]	@ (800d29c <xTimerGenericCommand+0x98>)
 800d25a:	6818      	ldr	r0, [r3, #0]
 800d25c:	f107 0110 	add.w	r1, r7, #16
 800d260:	2300      	movs	r3, #0
 800d262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d264:	f7fe fc10 	bl	800ba88 <xQueueGenericSend>
 800d268:	6278      	str	r0, [r7, #36]	@ 0x24
 800d26a:	e012      	b.n	800d292 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d26c:	4b0b      	ldr	r3, [pc, #44]	@ (800d29c <xTimerGenericCommand+0x98>)
 800d26e:	6818      	ldr	r0, [r3, #0]
 800d270:	f107 0110 	add.w	r1, r7, #16
 800d274:	2300      	movs	r3, #0
 800d276:	2200      	movs	r2, #0
 800d278:	f7fe fc06 	bl	800ba88 <xQueueGenericSend>
 800d27c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d27e:	e008      	b.n	800d292 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d280:	4b06      	ldr	r3, [pc, #24]	@ (800d29c <xTimerGenericCommand+0x98>)
 800d282:	6818      	ldr	r0, [r3, #0]
 800d284:	f107 0110 	add.w	r1, r7, #16
 800d288:	2300      	movs	r3, #0
 800d28a:	683a      	ldr	r2, [r7, #0]
 800d28c:	f7fe fcfe 	bl	800bc8c <xQueueGenericSendFromISR>
 800d290:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d294:	4618      	mov	r0, r3
 800d296:	3728      	adds	r7, #40	@ 0x28
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	2400179c 	.word	0x2400179c

0800d2a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b088      	sub	sp, #32
 800d2a4:	af02      	add	r7, sp, #8
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2aa:	4b23      	ldr	r3, [pc, #140]	@ (800d338 <prvProcessExpiredTimer+0x98>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe fa75 	bl	800b7a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2c4:	f003 0304 	and.w	r3, r3, #4
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d023      	beq.n	800d314 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	699a      	ldr	r2, [r3, #24]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	18d1      	adds	r1, r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	6978      	ldr	r0, [r7, #20]
 800d2da:	f000 f8d5 	bl	800d488 <prvInsertTimerInActiveList>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d020      	beq.n	800d326 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	6978      	ldr	r0, [r7, #20]
 800d2f0:	f7ff ff88 	bl	800d204 <xTimerGenericCommand>
 800d2f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d114      	bne.n	800d326 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d2fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d300:	f383 8811 	msr	BASEPRI, r3
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	60fb      	str	r3, [r7, #12]
}
 800d30e:	bf00      	nop
 800d310:	bf00      	nop
 800d312:	e7fd      	b.n	800d310 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d31a:	f023 0301 	bic.w	r3, r3, #1
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	6978      	ldr	r0, [r7, #20]
 800d32c:	4798      	blx	r3
}
 800d32e:	bf00      	nop
 800d330:	3718      	adds	r7, #24
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	24001794 	.word	0x24001794

0800d33c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d344:	f107 0308 	add.w	r3, r7, #8
 800d348:	4618      	mov	r0, r3
 800d34a:	f000 f859 	bl	800d400 <prvGetNextExpireTime>
 800d34e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	4619      	mov	r1, r3
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 f805 	bl	800d364 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d35a:	f000 f8d7 	bl	800d50c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d35e:	bf00      	nop
 800d360:	e7f0      	b.n	800d344 <prvTimerTask+0x8>
	...

0800d364 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d36e:	f7ff fa29 	bl	800c7c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d372:	f107 0308 	add.w	r3, r7, #8
 800d376:	4618      	mov	r0, r3
 800d378:	f000 f866 	bl	800d448 <prvSampleTimeNow>
 800d37c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d130      	bne.n	800d3e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10a      	bne.n	800d3a0 <prvProcessTimerOrBlockTask+0x3c>
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d806      	bhi.n	800d3a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d392:	f7ff fa25 	bl	800c7e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d396:	68f9      	ldr	r1, [r7, #12]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7ff ff81 	bl	800d2a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d39e:	e024      	b.n	800d3ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d008      	beq.n	800d3b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d3a6:	4b13      	ldr	r3, [pc, #76]	@ (800d3f4 <prvProcessTimerOrBlockTask+0x90>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <prvProcessTimerOrBlockTask+0x50>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e000      	b.n	800d3b6 <prvProcessTimerOrBlockTask+0x52>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d3b8:	4b0f      	ldr	r3, [pc, #60]	@ (800d3f8 <prvProcessTimerOrBlockTask+0x94>)
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	f7fe ff1b 	bl	800c200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d3ca:	f7ff fa09 	bl	800c7e0 <xTaskResumeAll>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10a      	bne.n	800d3ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d3d4:	4b09      	ldr	r3, [pc, #36]	@ (800d3fc <prvProcessTimerOrBlockTask+0x98>)
 800d3d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	f3bf 8f4f 	dsb	sy
 800d3e0:	f3bf 8f6f 	isb	sy
}
 800d3e4:	e001      	b.n	800d3ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d3e6:	f7ff f9fb 	bl	800c7e0 <xTaskResumeAll>
}
 800d3ea:	bf00      	nop
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	24001798 	.word	0x24001798
 800d3f8:	2400179c 	.word	0x2400179c
 800d3fc:	e000ed04 	.word	0xe000ed04

0800d400 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d408:	4b0e      	ldr	r3, [pc, #56]	@ (800d444 <prvGetNextExpireTime+0x44>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d101      	bne.n	800d416 <prvGetNextExpireTime+0x16>
 800d412:	2201      	movs	r2, #1
 800d414:	e000      	b.n	800d418 <prvGetNextExpireTime+0x18>
 800d416:	2200      	movs	r2, #0
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d105      	bne.n	800d430 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d424:	4b07      	ldr	r3, [pc, #28]	@ (800d444 <prvGetNextExpireTime+0x44>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	e001      	b.n	800d434 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d430:	2300      	movs	r3, #0
 800d432:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d434:	68fb      	ldr	r3, [r7, #12]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
 800d442:	bf00      	nop
 800d444:	24001794 	.word	0x24001794

0800d448 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d450:	f7ff fa64 	bl	800c91c <xTaskGetTickCount>
 800d454:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d456:	4b0b      	ldr	r3, [pc, #44]	@ (800d484 <prvSampleTimeNow+0x3c>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d205      	bcs.n	800d46c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d460:	f000 f93a 	bl	800d6d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	e002      	b.n	800d472 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d472:	4a04      	ldr	r2, [pc, #16]	@ (800d484 <prvSampleTimeNow+0x3c>)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d478:	68fb      	ldr	r3, [r7, #12]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	240017a4 	.word	0x240017a4

0800d488 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
 800d494:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d496:	2300      	movs	r3, #0
 800d498:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	68fa      	ldr	r2, [r7, #12]
 800d4a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d812      	bhi.n	800d4d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	1ad2      	subs	r2, r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	699b      	ldr	r3, [r3, #24]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d302      	bcc.n	800d4c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	617b      	str	r3, [r7, #20]
 800d4c0:	e01b      	b.n	800d4fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d4c2:	4b10      	ldr	r3, [pc, #64]	@ (800d504 <prvInsertTimerInActiveList+0x7c>)
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	f7fe f932 	bl	800b736 <vListInsert>
 800d4d2:	e012      	b.n	800d4fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d206      	bcs.n	800d4ea <prvInsertTimerInActiveList+0x62>
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d302      	bcc.n	800d4ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	617b      	str	r3, [r7, #20]
 800d4e8:	e007      	b.n	800d4fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4ea:	4b07      	ldr	r3, [pc, #28]	@ (800d508 <prvInsertTimerInActiveList+0x80>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	3304      	adds	r3, #4
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	f7fe f91e 	bl	800b736 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d4fa:	697b      	ldr	r3, [r7, #20]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3718      	adds	r7, #24
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	24001798 	.word	0x24001798
 800d508:	24001794 	.word	0x24001794

0800d50c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08e      	sub	sp, #56	@ 0x38
 800d510:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d512:	e0ce      	b.n	800d6b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	da19      	bge.n	800d54e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d51a:	1d3b      	adds	r3, r7, #4
 800d51c:	3304      	adds	r3, #4
 800d51e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d522:	2b00      	cmp	r3, #0
 800d524:	d10b      	bne.n	800d53e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	61fb      	str	r3, [r7, #28]
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	e7fd      	b.n	800d53a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d544:	6850      	ldr	r0, [r2, #4]
 800d546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d548:	6892      	ldr	r2, [r2, #8]
 800d54a:	4611      	mov	r1, r2
 800d54c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	f2c0 80ae 	blt.w	800d6b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d564:	3304      	adds	r3, #4
 800d566:	4618      	mov	r0, r3
 800d568:	f7fe f91e 	bl	800b7a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d56c:	463b      	mov	r3, r7
 800d56e:	4618      	mov	r0, r3
 800d570:	f7ff ff6a 	bl	800d448 <prvSampleTimeNow>
 800d574:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b09      	cmp	r3, #9
 800d57a:	f200 8097 	bhi.w	800d6ac <prvProcessReceivedCommands+0x1a0>
 800d57e:	a201      	add	r2, pc, #4	@ (adr r2, 800d584 <prvProcessReceivedCommands+0x78>)
 800d580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d584:	0800d5ad 	.word	0x0800d5ad
 800d588:	0800d5ad 	.word	0x0800d5ad
 800d58c:	0800d5ad 	.word	0x0800d5ad
 800d590:	0800d623 	.word	0x0800d623
 800d594:	0800d637 	.word	0x0800d637
 800d598:	0800d683 	.word	0x0800d683
 800d59c:	0800d5ad 	.word	0x0800d5ad
 800d5a0:	0800d5ad 	.word	0x0800d5ad
 800d5a4:	0800d623 	.word	0x0800d623
 800d5a8:	0800d637 	.word	0x0800d637
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5b2:	f043 0301 	orr.w	r3, r3, #1
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c2:	699b      	ldr	r3, [r3, #24]
 800d5c4:	18d1      	adds	r1, r2, r3
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5cc:	f7ff ff5c 	bl	800d488 <prvInsertTimerInActiveList>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d06c      	beq.n	800d6b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d5e4:	f003 0304 	and.w	r3, r3, #4
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d061      	beq.n	800d6b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d5ec:	68ba      	ldr	r2, [r7, #8]
 800d5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f0:	699b      	ldr	r3, [r3, #24]
 800d5f2:	441a      	add	r2, r3
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5fe:	f7ff fe01 	bl	800d204 <xTimerGenericCommand>
 800d602:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d604:	6a3b      	ldr	r3, [r7, #32]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d152      	bne.n	800d6b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	61bb      	str	r3, [r7, #24]
}
 800d61c:	bf00      	nop
 800d61e:	bf00      	nop
 800d620:	e7fd      	b.n	800d61e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d628:	f023 0301 	bic.w	r3, r3, #1
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d634:	e03d      	b.n	800d6b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d63c:	f043 0301 	orr.w	r3, r3, #1
 800d640:	b2da      	uxtb	r2, r3
 800d642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d644:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10b      	bne.n	800d66e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65a:	f383 8811 	msr	BASEPRI, r3
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	617b      	str	r3, [r7, #20]
}
 800d668:	bf00      	nop
 800d66a:	bf00      	nop
 800d66c:	e7fd      	b.n	800d66a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d670:	699a      	ldr	r2, [r3, #24]
 800d672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d674:	18d1      	adds	r1, r2, r3
 800d676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d67a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d67c:	f7ff ff04 	bl	800d488 <prvInsertTimerInActiveList>
					break;
 800d680:	e017      	b.n	800d6b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d688:	f003 0302 	and.w	r3, r3, #2
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d103      	bne.n	800d698 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d692:	f000 fbe9 	bl	800de68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d696:	e00c      	b.n	800d6b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d69a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d69e:	f023 0301 	bic.w	r3, r3, #1
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d6aa:	e002      	b.n	800d6b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d6ac:	bf00      	nop
 800d6ae:	e000      	b.n	800d6b2 <prvProcessReceivedCommands+0x1a6>
					break;
 800d6b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6b2:	4b08      	ldr	r3, [pc, #32]	@ (800d6d4 <prvProcessReceivedCommands+0x1c8>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	1d39      	adds	r1, r7, #4
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fb84 	bl	800bdc8 <xQueueReceive>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f47f af26 	bne.w	800d514 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d6c8:	bf00      	nop
 800d6ca:	bf00      	nop
 800d6cc:	3730      	adds	r7, #48	@ 0x30
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	2400179c 	.word	0x2400179c

0800d6d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6de:	e049      	b.n	800d774 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d79c <prvSwitchTimerLists+0xc4>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	4b2c      	ldr	r3, [pc, #176]	@ (800d79c <prvSwitchTimerLists+0xc4>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	3304      	adds	r3, #4
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe f855 	bl	800b7a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6a1b      	ldr	r3, [r3, #32]
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d70c:	f003 0304 	and.w	r3, r3, #4
 800d710:	2b00      	cmp	r3, #0
 800d712:	d02f      	beq.n	800d774 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	699b      	ldr	r3, [r3, #24]
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	4413      	add	r3, r2
 800d71c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	429a      	cmp	r2, r3
 800d724:	d90e      	bls.n	800d744 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	68ba      	ldr	r2, [r7, #8]
 800d72a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	68fa      	ldr	r2, [r7, #12]
 800d730:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d732:	4b1a      	ldr	r3, [pc, #104]	@ (800d79c <prvSwitchTimerLists+0xc4>)
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	3304      	adds	r3, #4
 800d73a:	4619      	mov	r1, r3
 800d73c:	4610      	mov	r0, r2
 800d73e:	f7fd fffa 	bl	800b736 <vListInsert>
 800d742:	e017      	b.n	800d774 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d744:	2300      	movs	r3, #0
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	2300      	movs	r3, #0
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	2100      	movs	r1, #0
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f7ff fd58 	bl	800d204 <xTimerGenericCommand>
 800d754:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10b      	bne.n	800d774 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d760:	f383 8811 	msr	BASEPRI, r3
 800d764:	f3bf 8f6f 	isb	sy
 800d768:	f3bf 8f4f 	dsb	sy
 800d76c:	603b      	str	r3, [r7, #0]
}
 800d76e:	bf00      	nop
 800d770:	bf00      	nop
 800d772:	e7fd      	b.n	800d770 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d774:	4b09      	ldr	r3, [pc, #36]	@ (800d79c <prvSwitchTimerLists+0xc4>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1b0      	bne.n	800d6e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d77e:	4b07      	ldr	r3, [pc, #28]	@ (800d79c <prvSwitchTimerLists+0xc4>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d784:	4b06      	ldr	r3, [pc, #24]	@ (800d7a0 <prvSwitchTimerLists+0xc8>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4a04      	ldr	r2, [pc, #16]	@ (800d79c <prvSwitchTimerLists+0xc4>)
 800d78a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d78c:	4a04      	ldr	r2, [pc, #16]	@ (800d7a0 <prvSwitchTimerLists+0xc8>)
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	6013      	str	r3, [r2, #0]
}
 800d792:	bf00      	nop
 800d794:	3718      	adds	r7, #24
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	24001794 	.word	0x24001794
 800d7a0:	24001798 	.word	0x24001798

0800d7a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d7aa:	f000 f96d 	bl	800da88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d7ae:	4b15      	ldr	r3, [pc, #84]	@ (800d804 <prvCheckForValidListAndQueue+0x60>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d120      	bne.n	800d7f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d7b6:	4814      	ldr	r0, [pc, #80]	@ (800d808 <prvCheckForValidListAndQueue+0x64>)
 800d7b8:	f7fd ff6c 	bl	800b694 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d7bc:	4813      	ldr	r0, [pc, #76]	@ (800d80c <prvCheckForValidListAndQueue+0x68>)
 800d7be:	f7fd ff69 	bl	800b694 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d7c2:	4b13      	ldr	r3, [pc, #76]	@ (800d810 <prvCheckForValidListAndQueue+0x6c>)
 800d7c4:	4a10      	ldr	r2, [pc, #64]	@ (800d808 <prvCheckForValidListAndQueue+0x64>)
 800d7c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d7c8:	4b12      	ldr	r3, [pc, #72]	@ (800d814 <prvCheckForValidListAndQueue+0x70>)
 800d7ca:	4a10      	ldr	r2, [pc, #64]	@ (800d80c <prvCheckForValidListAndQueue+0x68>)
 800d7cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	4b11      	ldr	r3, [pc, #68]	@ (800d818 <prvCheckForValidListAndQueue+0x74>)
 800d7d4:	4a11      	ldr	r2, [pc, #68]	@ (800d81c <prvCheckForValidListAndQueue+0x78>)
 800d7d6:	2110      	movs	r1, #16
 800d7d8:	200a      	movs	r0, #10
 800d7da:	f7fe f879 	bl	800b8d0 <xQueueGenericCreateStatic>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	4a08      	ldr	r2, [pc, #32]	@ (800d804 <prvCheckForValidListAndQueue+0x60>)
 800d7e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d7e4:	4b07      	ldr	r3, [pc, #28]	@ (800d804 <prvCheckForValidListAndQueue+0x60>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d005      	beq.n	800d7f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d7ec:	4b05      	ldr	r3, [pc, #20]	@ (800d804 <prvCheckForValidListAndQueue+0x60>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	490b      	ldr	r1, [pc, #44]	@ (800d820 <prvCheckForValidListAndQueue+0x7c>)
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fe fcda 	bl	800c1ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7f8:	f000 f978 	bl	800daec <vPortExitCritical>
}
 800d7fc:	bf00      	nop
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	2400179c 	.word	0x2400179c
 800d808:	2400176c 	.word	0x2400176c
 800d80c:	24001780 	.word	0x24001780
 800d810:	24001794 	.word	0x24001794
 800d814:	24001798 	.word	0x24001798
 800d818:	24001848 	.word	0x24001848
 800d81c:	240017a8 	.word	0x240017a8
 800d820:	08011510 	.word	0x08011510

0800d824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3b04      	subs	r3, #4
 800d834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d83c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	3b04      	subs	r3, #4
 800d842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	f023 0201 	bic.w	r2, r3, #1
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	3b04      	subs	r3, #4
 800d852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d854:	4a0c      	ldr	r2, [pc, #48]	@ (800d888 <pxPortInitialiseStack+0x64>)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3b14      	subs	r3, #20
 800d85e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	3b04      	subs	r3, #4
 800d86a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f06f 0202 	mvn.w	r2, #2
 800d872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	3b20      	subs	r3, #32
 800d878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d87a:	68fb      	ldr	r3, [r7, #12]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	0800d88d 	.word	0x0800d88d

0800d88c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d896:	4b13      	ldr	r3, [pc, #76]	@ (800d8e4 <prvTaskExitError+0x58>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89e:	d00b      	beq.n	800d8b8 <prvTaskExitError+0x2c>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	60fb      	str	r3, [r7, #12]
}
 800d8b2:	bf00      	nop
 800d8b4:	bf00      	nop
 800d8b6:	e7fd      	b.n	800d8b4 <prvTaskExitError+0x28>
	__asm volatile
 800d8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8bc:	f383 8811 	msr	BASEPRI, r3
 800d8c0:	f3bf 8f6f 	isb	sy
 800d8c4:	f3bf 8f4f 	dsb	sy
 800d8c8:	60bb      	str	r3, [r7, #8]
}
 800d8ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d8cc:	bf00      	nop
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d0fc      	beq.n	800d8ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop
 800d8e4:	2400007c 	.word	0x2400007c
	...

0800d8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d8f0:	4b07      	ldr	r3, [pc, #28]	@ (800d910 <pxCurrentTCBConst2>)
 800d8f2:	6819      	ldr	r1, [r3, #0]
 800d8f4:	6808      	ldr	r0, [r1, #0]
 800d8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fa:	f380 8809 	msr	PSP, r0
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f04f 0000 	mov.w	r0, #0
 800d906:	f380 8811 	msr	BASEPRI, r0
 800d90a:	4770      	bx	lr
 800d90c:	f3af 8000 	nop.w

0800d910 <pxCurrentTCBConst2>:
 800d910:	2400126c 	.word	0x2400126c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d914:	bf00      	nop
 800d916:	bf00      	nop

0800d918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d918:	4808      	ldr	r0, [pc, #32]	@ (800d93c <prvPortStartFirstTask+0x24>)
 800d91a:	6800      	ldr	r0, [r0, #0]
 800d91c:	6800      	ldr	r0, [r0, #0]
 800d91e:	f380 8808 	msr	MSP, r0
 800d922:	f04f 0000 	mov.w	r0, #0
 800d926:	f380 8814 	msr	CONTROL, r0
 800d92a:	b662      	cpsie	i
 800d92c:	b661      	cpsie	f
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	df00      	svc	0
 800d938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d93a:	bf00      	nop
 800d93c:	e000ed08 	.word	0xe000ed08

0800d940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d946:	4b47      	ldr	r3, [pc, #284]	@ (800da64 <xPortStartScheduler+0x124>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a47      	ldr	r2, [pc, #284]	@ (800da68 <xPortStartScheduler+0x128>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d10b      	bne.n	800d968 <xPortStartScheduler+0x28>
	__asm volatile
 800d950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	60fb      	str	r3, [r7, #12]
}
 800d962:	bf00      	nop
 800d964:	bf00      	nop
 800d966:	e7fd      	b.n	800d964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d968:	4b3e      	ldr	r3, [pc, #248]	@ (800da64 <xPortStartScheduler+0x124>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a3f      	ldr	r2, [pc, #252]	@ (800da6c <xPortStartScheduler+0x12c>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d10b      	bne.n	800d98a <xPortStartScheduler+0x4a>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	613b      	str	r3, [r7, #16]
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop
 800d988:	e7fd      	b.n	800d986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d98a:	4b39      	ldr	r3, [pc, #228]	@ (800da70 <xPortStartScheduler+0x130>)
 800d98c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	b2db      	uxtb	r3, r3
 800d994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	22ff      	movs	r2, #255	@ 0xff
 800d99a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d9a4:	78fb      	ldrb	r3, [r7, #3]
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	4b31      	ldr	r3, [pc, #196]	@ (800da74 <xPortStartScheduler+0x134>)
 800d9b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d9b2:	4b31      	ldr	r3, [pc, #196]	@ (800da78 <xPortStartScheduler+0x138>)
 800d9b4:	2207      	movs	r2, #7
 800d9b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9b8:	e009      	b.n	800d9ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d9ba:	4b2f      	ldr	r3, [pc, #188]	@ (800da78 <xPortStartScheduler+0x138>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	4a2d      	ldr	r2, [pc, #180]	@ (800da78 <xPortStartScheduler+0x138>)
 800d9c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	005b      	lsls	r3, r3, #1
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9ce:	78fb      	ldrb	r3, [r7, #3]
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9d6:	2b80      	cmp	r3, #128	@ 0x80
 800d9d8:	d0ef      	beq.n	800d9ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d9da:	4b27      	ldr	r3, [pc, #156]	@ (800da78 <xPortStartScheduler+0x138>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f1c3 0307 	rsb	r3, r3, #7
 800d9e2:	2b04      	cmp	r3, #4
 800d9e4:	d00b      	beq.n	800d9fe <xPortStartScheduler+0xbe>
	__asm volatile
 800d9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ea:	f383 8811 	msr	BASEPRI, r3
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f3bf 8f4f 	dsb	sy
 800d9f6:	60bb      	str	r3, [r7, #8]
}
 800d9f8:	bf00      	nop
 800d9fa:	bf00      	nop
 800d9fc:	e7fd      	b.n	800d9fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d9fe:	4b1e      	ldr	r3, [pc, #120]	@ (800da78 <xPortStartScheduler+0x138>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	021b      	lsls	r3, r3, #8
 800da04:	4a1c      	ldr	r2, [pc, #112]	@ (800da78 <xPortStartScheduler+0x138>)
 800da06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da08:	4b1b      	ldr	r3, [pc, #108]	@ (800da78 <xPortStartScheduler+0x138>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800da10:	4a19      	ldr	r2, [pc, #100]	@ (800da78 <xPortStartScheduler+0x138>)
 800da12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	b2da      	uxtb	r2, r3
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da1c:	4b17      	ldr	r3, [pc, #92]	@ (800da7c <xPortStartScheduler+0x13c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a16      	ldr	r2, [pc, #88]	@ (800da7c <xPortStartScheduler+0x13c>)
 800da22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800da26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da28:	4b14      	ldr	r3, [pc, #80]	@ (800da7c <xPortStartScheduler+0x13c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a13      	ldr	r2, [pc, #76]	@ (800da7c <xPortStartScheduler+0x13c>)
 800da2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800da32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da34:	f000 f8da 	bl	800dbec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800da38:	4b11      	ldr	r3, [pc, #68]	@ (800da80 <xPortStartScheduler+0x140>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800da3e:	f000 f8f9 	bl	800dc34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da42:	4b10      	ldr	r3, [pc, #64]	@ (800da84 <xPortStartScheduler+0x144>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a0f      	ldr	r2, [pc, #60]	@ (800da84 <xPortStartScheduler+0x144>)
 800da48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800da4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da4e:	f7ff ff63 	bl	800d918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da52:	f7ff f82d 	bl	800cab0 <vTaskSwitchContext>
	prvTaskExitError();
 800da56:	f7ff ff19 	bl	800d88c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da5a:	2300      	movs	r3, #0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3718      	adds	r7, #24
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	e000ed00 	.word	0xe000ed00
 800da68:	410fc271 	.word	0x410fc271
 800da6c:	410fc270 	.word	0x410fc270
 800da70:	e000e400 	.word	0xe000e400
 800da74:	24001898 	.word	0x24001898
 800da78:	2400189c 	.word	0x2400189c
 800da7c:	e000ed20 	.word	0xe000ed20
 800da80:	2400007c 	.word	0x2400007c
 800da84:	e000ef34 	.word	0xe000ef34

0800da88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	607b      	str	r3, [r7, #4]
}
 800daa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800daa2:	4b10      	ldr	r3, [pc, #64]	@ (800dae4 <vPortEnterCritical+0x5c>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	3301      	adds	r3, #1
 800daa8:	4a0e      	ldr	r2, [pc, #56]	@ (800dae4 <vPortEnterCritical+0x5c>)
 800daaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800daac:	4b0d      	ldr	r3, [pc, #52]	@ (800dae4 <vPortEnterCritical+0x5c>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d110      	bne.n	800dad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dab4:	4b0c      	ldr	r3, [pc, #48]	@ (800dae8 <vPortEnterCritical+0x60>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00b      	beq.n	800dad6 <vPortEnterCritical+0x4e>
	__asm volatile
 800dabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac2:	f383 8811 	msr	BASEPRI, r3
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	603b      	str	r3, [r7, #0]
}
 800dad0:	bf00      	nop
 800dad2:	bf00      	nop
 800dad4:	e7fd      	b.n	800dad2 <vPortEnterCritical+0x4a>
	}
}
 800dad6:	bf00      	nop
 800dad8:	370c      	adds	r7, #12
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	2400007c 	.word	0x2400007c
 800dae8:	e000ed04 	.word	0xe000ed04

0800daec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800daf2:	4b12      	ldr	r3, [pc, #72]	@ (800db3c <vPortExitCritical+0x50>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10b      	bne.n	800db12 <vPortExitCritical+0x26>
	__asm volatile
 800dafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	607b      	str	r3, [r7, #4]
}
 800db0c:	bf00      	nop
 800db0e:	bf00      	nop
 800db10:	e7fd      	b.n	800db0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800db12:	4b0a      	ldr	r3, [pc, #40]	@ (800db3c <vPortExitCritical+0x50>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	3b01      	subs	r3, #1
 800db18:	4a08      	ldr	r2, [pc, #32]	@ (800db3c <vPortExitCritical+0x50>)
 800db1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db1c:	4b07      	ldr	r3, [pc, #28]	@ (800db3c <vPortExitCritical+0x50>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d105      	bne.n	800db30 <vPortExitCritical+0x44>
 800db24:	2300      	movs	r3, #0
 800db26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	f383 8811 	msr	BASEPRI, r3
}
 800db2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db30:	bf00      	nop
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	2400007c 	.word	0x2400007c

0800db40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db40:	f3ef 8009 	mrs	r0, PSP
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	4b15      	ldr	r3, [pc, #84]	@ (800dba0 <pxCurrentTCBConst>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	f01e 0f10 	tst.w	lr, #16
 800db50:	bf08      	it	eq
 800db52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5a:	6010      	str	r0, [r2, #0]
 800db5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800db60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800db64:	f380 8811 	msr	BASEPRI, r0
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f7fe ff9e 	bl	800cab0 <vTaskSwitchContext>
 800db74:	f04f 0000 	mov.w	r0, #0
 800db78:	f380 8811 	msr	BASEPRI, r0
 800db7c:	bc09      	pop	{r0, r3}
 800db7e:	6819      	ldr	r1, [r3, #0]
 800db80:	6808      	ldr	r0, [r1, #0]
 800db82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db86:	f01e 0f10 	tst.w	lr, #16
 800db8a:	bf08      	it	eq
 800db8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db90:	f380 8809 	msr	PSP, r0
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	f3af 8000 	nop.w

0800dba0 <pxCurrentTCBConst>:
 800dba0:	2400126c 	.word	0x2400126c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dba4:	bf00      	nop
 800dba6:	bf00      	nop

0800dba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	607b      	str	r3, [r7, #4]
}
 800dbc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dbc2:	f7fe febb 	bl	800c93c <xTaskIncrementTick>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d003      	beq.n	800dbd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dbcc:	4b06      	ldr	r3, [pc, #24]	@ (800dbe8 <xPortSysTickHandler+0x40>)
 800dbce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f383 8811 	msr	BASEPRI, r3
}
 800dbde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	e000ed04 	.word	0xe000ed04

0800dbec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dbec:	b480      	push	{r7}
 800dbee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	@ (800dc20 <vPortSetupTimerInterrupt+0x34>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dbf6:	4b0b      	ldr	r3, [pc, #44]	@ (800dc24 <vPortSetupTimerInterrupt+0x38>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	@ (800dc28 <vPortSetupTimerInterrupt+0x3c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a0a      	ldr	r2, [pc, #40]	@ (800dc2c <vPortSetupTimerInterrupt+0x40>)
 800dc02:	fba2 2303 	umull	r2, r3, r2, r3
 800dc06:	095b      	lsrs	r3, r3, #5
 800dc08:	4a09      	ldr	r2, [pc, #36]	@ (800dc30 <vPortSetupTimerInterrupt+0x44>)
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc0e:	4b04      	ldr	r3, [pc, #16]	@ (800dc20 <vPortSetupTimerInterrupt+0x34>)
 800dc10:	2207      	movs	r2, #7
 800dc12:	601a      	str	r2, [r3, #0]
}
 800dc14:	bf00      	nop
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	e000e010 	.word	0xe000e010
 800dc24:	e000e018 	.word	0xe000e018
 800dc28:	24000054 	.word	0x24000054
 800dc2c:	10624dd3 	.word	0x10624dd3
 800dc30:	e000e014 	.word	0xe000e014

0800dc34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dc44 <vPortEnableVFP+0x10>
 800dc38:	6801      	ldr	r1, [r0, #0]
 800dc3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dc3e:	6001      	str	r1, [r0, #0]
 800dc40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc42:	bf00      	nop
 800dc44:	e000ed88 	.word	0xe000ed88

0800dc48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc4e:	f3ef 8305 	mrs	r3, IPSR
 800dc52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b0f      	cmp	r3, #15
 800dc58:	d915      	bls.n	800dc86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc5a:	4a18      	ldr	r2, [pc, #96]	@ (800dcbc <vPortValidateInterruptPriority+0x74>)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dc64:	4b16      	ldr	r3, [pc, #88]	@ (800dcc0 <vPortValidateInterruptPriority+0x78>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	7afa      	ldrb	r2, [r7, #11]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d20b      	bcs.n	800dc86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	607b      	str	r3, [r7, #4]
}
 800dc80:	bf00      	nop
 800dc82:	bf00      	nop
 800dc84:	e7fd      	b.n	800dc82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dc86:	4b0f      	ldr	r3, [pc, #60]	@ (800dcc4 <vPortValidateInterruptPriority+0x7c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800dc8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dcc8 <vPortValidateInterruptPriority+0x80>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d90b      	bls.n	800dcae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800dc96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc9a:	f383 8811 	msr	BASEPRI, r3
 800dc9e:	f3bf 8f6f 	isb	sy
 800dca2:	f3bf 8f4f 	dsb	sy
 800dca6:	603b      	str	r3, [r7, #0]
}
 800dca8:	bf00      	nop
 800dcaa:	bf00      	nop
 800dcac:	e7fd      	b.n	800dcaa <vPortValidateInterruptPriority+0x62>
	}
 800dcae:	bf00      	nop
 800dcb0:	3714      	adds	r7, #20
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	e000e3f0 	.word	0xe000e3f0
 800dcc0:	24001898 	.word	0x24001898
 800dcc4:	e000ed0c 	.word	0xe000ed0c
 800dcc8:	2400189c 	.word	0x2400189c

0800dccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b08a      	sub	sp, #40	@ 0x28
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dcd8:	f7fe fd74 	bl	800c7c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dcdc:	4b5c      	ldr	r3, [pc, #368]	@ (800de50 <pvPortMalloc+0x184>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d101      	bne.n	800dce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dce4:	f000 f924 	bl	800df30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dce8:	4b5a      	ldr	r3, [pc, #360]	@ (800de54 <pvPortMalloc+0x188>)
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4013      	ands	r3, r2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f040 8095 	bne.w	800de20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d01e      	beq.n	800dd3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dcfc:	2208      	movs	r2, #8
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4413      	add	r3, r2
 800dd02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f003 0307 	and.w	r3, r3, #7
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d015      	beq.n	800dd3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f023 0307 	bic.w	r3, r3, #7
 800dd14:	3308      	adds	r3, #8
 800dd16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f003 0307 	and.w	r3, r3, #7
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00b      	beq.n	800dd3a <pvPortMalloc+0x6e>
	__asm volatile
 800dd22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	617b      	str	r3, [r7, #20]
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop
 800dd38:	e7fd      	b.n	800dd36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d06f      	beq.n	800de20 <pvPortMalloc+0x154>
 800dd40:	4b45      	ldr	r3, [pc, #276]	@ (800de58 <pvPortMalloc+0x18c>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d86a      	bhi.n	800de20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dd4a:	4b44      	ldr	r3, [pc, #272]	@ (800de5c <pvPortMalloc+0x190>)
 800dd4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dd4e:	4b43      	ldr	r3, [pc, #268]	@ (800de5c <pvPortMalloc+0x190>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd54:	e004      	b.n	800dd60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d903      	bls.n	800dd72 <pvPortMalloc+0xa6>
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1f1      	bne.n	800dd56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dd72:	4b37      	ldr	r3, [pc, #220]	@ (800de50 <pvPortMalloc+0x184>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d051      	beq.n	800de20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dd7c:	6a3b      	ldr	r3, [r7, #32]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2208      	movs	r2, #8
 800dd82:	4413      	add	r3, r2
 800dd84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	6a3b      	ldr	r3, [r7, #32]
 800dd8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd90:	685a      	ldr	r2, [r3, #4]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	1ad2      	subs	r2, r2, r3
 800dd96:	2308      	movs	r3, #8
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d920      	bls.n	800dde0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dd9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4413      	add	r3, r2
 800dda4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	f003 0307 	and.w	r3, r3, #7
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00b      	beq.n	800ddc8 <pvPortMalloc+0xfc>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	613b      	str	r3, [r7, #16]
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	e7fd      	b.n	800ddc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ddc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	1ad2      	subs	r2, r2, r3
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ddda:	69b8      	ldr	r0, [r7, #24]
 800dddc:	f000 f90a 	bl	800dff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dde0:	4b1d      	ldr	r3, [pc, #116]	@ (800de58 <pvPortMalloc+0x18c>)
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	4a1b      	ldr	r2, [pc, #108]	@ (800de58 <pvPortMalloc+0x18c>)
 800ddec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ddee:	4b1a      	ldr	r3, [pc, #104]	@ (800de58 <pvPortMalloc+0x18c>)
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	4b1b      	ldr	r3, [pc, #108]	@ (800de60 <pvPortMalloc+0x194>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d203      	bcs.n	800de02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ddfa:	4b17      	ldr	r3, [pc, #92]	@ (800de58 <pvPortMalloc+0x18c>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	4a18      	ldr	r2, [pc, #96]	@ (800de60 <pvPortMalloc+0x194>)
 800de00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de04:	685a      	ldr	r2, [r3, #4]
 800de06:	4b13      	ldr	r3, [pc, #76]	@ (800de54 <pvPortMalloc+0x188>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	431a      	orrs	r2, r3
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de12:	2200      	movs	r2, #0
 800de14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800de16:	4b13      	ldr	r3, [pc, #76]	@ (800de64 <pvPortMalloc+0x198>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3301      	adds	r3, #1
 800de1c:	4a11      	ldr	r2, [pc, #68]	@ (800de64 <pvPortMalloc+0x198>)
 800de1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de20:	f7fe fcde 	bl	800c7e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	f003 0307 	and.w	r3, r3, #7
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00b      	beq.n	800de46 <pvPortMalloc+0x17a>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	60fb      	str	r3, [r7, #12]
}
 800de40:	bf00      	nop
 800de42:	bf00      	nop
 800de44:	e7fd      	b.n	800de42 <pvPortMalloc+0x176>
	return pvReturn;
 800de46:	69fb      	ldr	r3, [r7, #28]
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3728      	adds	r7, #40	@ 0x28
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	240054a8 	.word	0x240054a8
 800de54:	240054bc 	.word	0x240054bc
 800de58:	240054ac 	.word	0x240054ac
 800de5c:	240054a0 	.word	0x240054a0
 800de60:	240054b0 	.word	0x240054b0
 800de64:	240054b4 	.word	0x240054b4

0800de68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d04f      	beq.n	800df1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800de7a:	2308      	movs	r3, #8
 800de7c:	425b      	negs	r3, r3
 800de7e:	697a      	ldr	r2, [r7, #20]
 800de80:	4413      	add	r3, r2
 800de82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	685a      	ldr	r2, [r3, #4]
 800de8c:	4b25      	ldr	r3, [pc, #148]	@ (800df24 <vPortFree+0xbc>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4013      	ands	r3, r2
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10b      	bne.n	800deae <vPortFree+0x46>
	__asm volatile
 800de96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	60fb      	str	r3, [r7, #12]
}
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	e7fd      	b.n	800deaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00b      	beq.n	800dece <vPortFree+0x66>
	__asm volatile
 800deb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deba:	f383 8811 	msr	BASEPRI, r3
 800debe:	f3bf 8f6f 	isb	sy
 800dec2:	f3bf 8f4f 	dsb	sy
 800dec6:	60bb      	str	r3, [r7, #8]
}
 800dec8:	bf00      	nop
 800deca:	bf00      	nop
 800decc:	e7fd      	b.n	800deca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	4b14      	ldr	r3, [pc, #80]	@ (800df24 <vPortFree+0xbc>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	4013      	ands	r3, r2
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d01e      	beq.n	800df1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d11a      	bne.n	800df1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	685a      	ldr	r2, [r3, #4]
 800dee8:	4b0e      	ldr	r3, [pc, #56]	@ (800df24 <vPortFree+0xbc>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	43db      	mvns	r3, r3
 800deee:	401a      	ands	r2, r3
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800def4:	f7fe fc66 	bl	800c7c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	685a      	ldr	r2, [r3, #4]
 800defc:	4b0a      	ldr	r3, [pc, #40]	@ (800df28 <vPortFree+0xc0>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4413      	add	r3, r2
 800df02:	4a09      	ldr	r2, [pc, #36]	@ (800df28 <vPortFree+0xc0>)
 800df04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df06:	6938      	ldr	r0, [r7, #16]
 800df08:	f000 f874 	bl	800dff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df0c:	4b07      	ldr	r3, [pc, #28]	@ (800df2c <vPortFree+0xc4>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3301      	adds	r3, #1
 800df12:	4a06      	ldr	r2, [pc, #24]	@ (800df2c <vPortFree+0xc4>)
 800df14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df16:	f7fe fc63 	bl	800c7e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df1a:	bf00      	nop
 800df1c:	3718      	adds	r7, #24
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	240054bc 	.word	0x240054bc
 800df28:	240054ac 	.word	0x240054ac
 800df2c:	240054b8 	.word	0x240054b8

0800df30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800df30:	b480      	push	{r7}
 800df32:	b085      	sub	sp, #20
 800df34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800df36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800df3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800df3c:	4b27      	ldr	r3, [pc, #156]	@ (800dfdc <prvHeapInit+0xac>)
 800df3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f003 0307 	and.w	r3, r3, #7
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00c      	beq.n	800df64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	3307      	adds	r3, #7
 800df4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f023 0307 	bic.w	r3, r3, #7
 800df56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	4a1f      	ldr	r2, [pc, #124]	@ (800dfdc <prvHeapInit+0xac>)
 800df60:	4413      	add	r3, r2
 800df62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800df68:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe0 <prvHeapInit+0xb0>)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800df6e:	4b1c      	ldr	r3, [pc, #112]	@ (800dfe0 <prvHeapInit+0xb0>)
 800df70:	2200      	movs	r2, #0
 800df72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	4413      	add	r3, r2
 800df7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800df7c:	2208      	movs	r2, #8
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	1a9b      	subs	r3, r3, r2
 800df82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f023 0307 	bic.w	r3, r3, #7
 800df8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	4a15      	ldr	r2, [pc, #84]	@ (800dfe4 <prvHeapInit+0xb4>)
 800df90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800df92:	4b14      	ldr	r3, [pc, #80]	@ (800dfe4 <prvHeapInit+0xb4>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2200      	movs	r2, #0
 800df98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800df9a:	4b12      	ldr	r3, [pc, #72]	@ (800dfe4 <prvHeapInit+0xb4>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	1ad2      	subs	r2, r2, r3
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dfb0:	4b0c      	ldr	r3, [pc, #48]	@ (800dfe4 <prvHeapInit+0xb4>)
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	4a0a      	ldr	r2, [pc, #40]	@ (800dfe8 <prvHeapInit+0xb8>)
 800dfbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	4a09      	ldr	r2, [pc, #36]	@ (800dfec <prvHeapInit+0xbc>)
 800dfc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dfc8:	4b09      	ldr	r3, [pc, #36]	@ (800dff0 <prvHeapInit+0xc0>)
 800dfca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dfce:	601a      	str	r2, [r3, #0]
}
 800dfd0:	bf00      	nop
 800dfd2:	3714      	adds	r7, #20
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	240018a0 	.word	0x240018a0
 800dfe0:	240054a0 	.word	0x240054a0
 800dfe4:	240054a8 	.word	0x240054a8
 800dfe8:	240054b0 	.word	0x240054b0
 800dfec:	240054ac 	.word	0x240054ac
 800dff0:	240054bc 	.word	0x240054bc

0800dff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dffc:	4b28      	ldr	r3, [pc, #160]	@ (800e0a0 <prvInsertBlockIntoFreeList+0xac>)
 800dffe:	60fb      	str	r3, [r7, #12]
 800e000:	e002      	b.n	800e008 <prvInsertBlockIntoFreeList+0x14>
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d8f7      	bhi.n	800e002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	68ba      	ldr	r2, [r7, #8]
 800e01c:	4413      	add	r3, r2
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	429a      	cmp	r2, r3
 800e022:	d108      	bne.n	800e036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	441a      	add	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	441a      	add	r2, r3
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	429a      	cmp	r2, r3
 800e048:	d118      	bne.n	800e07c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	4b15      	ldr	r3, [pc, #84]	@ (800e0a4 <prvInsertBlockIntoFreeList+0xb0>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	429a      	cmp	r2, r3
 800e054:	d00d      	beq.n	800e072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	685a      	ldr	r2, [r3, #4]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	685b      	ldr	r3, [r3, #4]
 800e060:	441a      	add	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	601a      	str	r2, [r3, #0]
 800e070:	e008      	b.n	800e084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e072:	4b0c      	ldr	r3, [pc, #48]	@ (800e0a4 <prvInsertBlockIntoFreeList+0xb0>)
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	601a      	str	r2, [r3, #0]
 800e07a:	e003      	b.n	800e084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d002      	beq.n	800e092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	687a      	ldr	r2, [r7, #4]
 800e090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e092:	bf00      	nop
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr
 800e09e:	bf00      	nop
 800e0a0:	240054a0 	.word	0x240054a0
 800e0a4:	240054a8 	.word	0x240054a8

0800e0a8 <arm_mat_trans_f32>:
 800e0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ac:	8802      	ldrh	r2, [r0, #0]
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	884b      	ldrh	r3, [r1, #2]
 800e0b2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	8844      	ldrh	r4, [r0, #2]
 800e0ba:	6848      	ldr	r0, [r1, #4]
 800e0bc:	d14e      	bne.n	800e15c <arm_mat_trans_f32+0xb4>
 800e0be:	f8b1 8000 	ldrh.w	r8, [r1]
 800e0c2:	45a0      	cmp	r8, r4
 800e0c4:	d14a      	bne.n	800e15c <arm_mat_trans_f32+0xb4>
 800e0c6:	ea4f 0998 	mov.w	r9, r8, lsr #2
 800e0ca:	f008 0803 	and.w	r8, r8, #3
 800e0ce:	009c      	lsls	r4, r3, #2
 800e0d0:	4684      	mov	ip, r0
 800e0d2:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800e0d6:	fb09 f204 	mul.w	r2, r9, r4
 800e0da:	011d      	lsls	r5, r3, #4
 800e0dc:	ea4f 1b09 	mov.w	fp, r9, lsl #4
 800e0e0:	eb00 0a04 	add.w	sl, r0, r4
 800e0e4:	0092      	lsls	r2, r2, #2
 800e0e6:	9103      	str	r1, [sp, #12]
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	9202      	str	r2, [sp, #8]
 800e0ec:	9301      	str	r3, [sp, #4]
 800e0ee:	4663      	mov	r3, ip
 800e0f0:	f1b9 0f00 	cmp.w	r9, #0
 800e0f4:	d01d      	beq.n	800e132 <arm_mat_trans_f32+0x8a>
 800e0f6:	9901      	ldr	r1, [sp, #4]
 800e0f8:	f10e 0210 	add.w	r2, lr, #16
 800e0fc:	4648      	mov	r0, r9
 800e0fe:	4461      	add	r1, ip
 800e100:	ed52 7a04 	vldr	s15, [r2, #-16]
 800e104:	191f      	adds	r7, r3, r4
 800e106:	190e      	adds	r6, r1, r4
 800e108:	3801      	subs	r0, #1
 800e10a:	edc3 7a00 	vstr	s15, [r3]
 800e10e:	f102 0210 	add.w	r2, r2, #16
 800e112:	ed52 7a07 	vldr	s15, [r2, #-28]	@ 0xffffffe4
 800e116:	442b      	add	r3, r5
 800e118:	edc7 7a00 	vstr	s15, [r7]
 800e11c:	f852 7c18 	ldr.w	r7, [r2, #-24]
 800e120:	600f      	str	r7, [r1, #0]
 800e122:	4429      	add	r1, r5
 800e124:	f852 7c14 	ldr.w	r7, [r2, #-20]
 800e128:	6037      	str	r7, [r6, #0]
 800e12a:	d1e9      	bne.n	800e100 <arm_mat_trans_f32+0x58>
 800e12c:	9b02      	ldr	r3, [sp, #8]
 800e12e:	44de      	add	lr, fp
 800e130:	4463      	add	r3, ip
 800e132:	f1b8 0f00 	cmp.w	r8, #0
 800e136:	d009      	beq.n	800e14c <arm_mat_trans_f32+0xa4>
 800e138:	4642      	mov	r2, r8
 800e13a:	4671      	mov	r1, lr
 800e13c:	f851 0b04 	ldr.w	r0, [r1], #4
 800e140:	3a01      	subs	r2, #1
 800e142:	6018      	str	r0, [r3, #0]
 800e144:	4423      	add	r3, r4
 800e146:	d1f9      	bne.n	800e13c <arm_mat_trans_f32+0x94>
 800e148:	9b03      	ldr	r3, [sp, #12]
 800e14a:	449e      	add	lr, r3
 800e14c:	f10c 0c04 	add.w	ip, ip, #4
 800e150:	45d4      	cmp	ip, sl
 800e152:	d1cc      	bne.n	800e0ee <arm_mat_trans_f32+0x46>
 800e154:	2000      	movs	r0, #0
 800e156:	b005      	add	sp, #20
 800e158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e15c:	f06f 0002 	mvn.w	r0, #2
 800e160:	e7f9      	b.n	800e156 <arm_mat_trans_f32+0xae>
 800e162:	bf00      	nop

0800e164 <arm_mat_mult_f32>:
 800e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e168:	8845      	ldrh	r5, [r0, #2]
 800e16a:	b08b      	sub	sp, #44	@ 0x2c
 800e16c:	880b      	ldrh	r3, [r1, #0]
 800e16e:	8806      	ldrh	r6, [r0, #0]
 800e170:	42ab      	cmp	r3, r5
 800e172:	9109      	str	r1, [sp, #36]	@ 0x24
 800e174:	6847      	ldr	r7, [r0, #4]
 800e176:	9604      	str	r6, [sp, #16]
 800e178:	6848      	ldr	r0, [r1, #4]
 800e17a:	6854      	ldr	r4, [r2, #4]
 800e17c:	8849      	ldrh	r1, [r1, #2]
 800e17e:	f040 808d 	bne.w	800e29c <arm_mat_mult_f32+0x138>
 800e182:	8815      	ldrh	r5, [r2, #0]
 800e184:	42b5      	cmp	r5, r6
 800e186:	f040 8089 	bne.w	800e29c <arm_mat_mult_f32+0x138>
 800e18a:	8852      	ldrh	r2, [r2, #2]
 800e18c:	428a      	cmp	r2, r1
 800e18e:	f040 8085 	bne.w	800e29c <arm_mat_mult_f32+0x138>
 800e192:	ea4f 0893 	mov.w	r8, r3, lsr #2
 800e196:	1d01      	adds	r1, r0, #4
 800e198:	0116      	lsls	r6, r2, #4
 800e19a:	f003 0903 	and.w	r9, r3, #3
 800e19e:	9108      	str	r1, [sp, #32]
 800e1a0:	0095      	lsls	r5, r2, #2
 800e1a2:	fb06 f108 	mul.w	r1, r6, r8
 800e1a6:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	f107 0b10 	add.w	fp, r7, #16
 800e1b0:	9103      	str	r1, [sp, #12]
 800e1b2:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 800e1b6:	00d2      	lsls	r2, r2, #3
 800e1b8:	eb04 0a05 	add.w	sl, r4, r5
 800e1bc:	9101      	str	r1, [sp, #4]
 800e1be:	ea4f 018c 	mov.w	r1, ip, lsl #2
 800e1c2:	9202      	str	r2, [sp, #8]
 800e1c4:	9107      	str	r1, [sp, #28]
 800e1c6:	9306      	str	r3, [sp, #24]
 800e1c8:	f1ab 0310 	sub.w	r3, fp, #16
 800e1cc:	f8dd e020 	ldr.w	lr, [sp, #32]
 800e1d0:	9305      	str	r3, [sp, #20]
 800e1d2:	9b07      	ldr	r3, [sp, #28]
 800e1d4:	eb03 0c0a 	add.w	ip, r3, sl
 800e1d8:	f1b8 0f00 	cmp.w	r8, #0
 800e1dc:	d056      	beq.n	800e28c <arm_mat_mult_f32+0x128>
 800e1de:	9b02      	ldr	r3, [sp, #8]
 800e1e0:	4644      	mov	r4, r8
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800e2a8 <arm_mat_mult_f32+0x144>
 800e1e8:	18c1      	adds	r1, r0, r3
 800e1ea:	465b      	mov	r3, fp
 800e1ec:	edd2 6a00 	vldr	s13, [r2]
 800e1f0:	1957      	adds	r7, r2, r5
 800e1f2:	ed13 7a04 	vldr	s14, [r3, #-16]
 800e1f6:	3c01      	subs	r4, #1
 800e1f8:	ed53 5a03 	vldr	s11, [r3, #-12]
 800e1fc:	4432      	add	r2, r6
 800e1fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e202:	ed97 6a00 	vldr	s12, [r7]
 800e206:	ed53 6a02 	vldr	s13, [r3, #-8]
 800e20a:	eb01 0705 	add.w	r7, r1, r5
 800e20e:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e212:	ed91 5a00 	vldr	s10, [r1]
 800e216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e21a:	edd7 5a00 	vldr	s11, [r7]
 800e21e:	ee26 7a85 	vmul.f32	s14, s13, s10
 800e222:	ed53 6a01 	vldr	s13, [r3, #-4]
 800e226:	4431      	add	r1, r6
 800e228:	f103 0310 	add.w	r3, r3, #16
 800e22c:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e230:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800e234:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e23c:	d1d6      	bne.n	800e1ec <arm_mat_mult_f32+0x88>
 800e23e:	9b03      	ldr	r3, [sp, #12]
 800e240:	9a01      	ldr	r2, [sp, #4]
 800e242:	4418      	add	r0, r3
 800e244:	f1b9 0f00 	cmp.w	r9, #0
 800e248:	d00b      	beq.n	800e262 <arm_mat_mult_f32+0xfe>
 800e24a:	464b      	mov	r3, r9
 800e24c:	edd0 6a00 	vldr	s13, [r0]
 800e250:	3b01      	subs	r3, #1
 800e252:	ecb2 7a01 	vldmia	r2!, {s14}
 800e256:	4428      	add	r0, r5
 800e258:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e25c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e260:	d1f4      	bne.n	800e24c <arm_mat_mult_f32+0xe8>
 800e262:	ecec 7a01 	vstmia	ip!, {s15}
 800e266:	45d4      	cmp	ip, sl
 800e268:	4670      	mov	r0, lr
 800e26a:	f10e 0e04 	add.w	lr, lr, #4
 800e26e:	d1b3      	bne.n	800e1d8 <arm_mat_mult_f32+0x74>
 800e270:	9a01      	ldr	r2, [sp, #4]
 800e272:	44aa      	add	sl, r5
 800e274:	9b06      	ldr	r3, [sp, #24]
 800e276:	4611      	mov	r1, r2
 800e278:	449b      	add	fp, r3
 800e27a:	4419      	add	r1, r3
 800e27c:	9b04      	ldr	r3, [sp, #16]
 800e27e:	3b01      	subs	r3, #1
 800e280:	9101      	str	r1, [sp, #4]
 800e282:	9304      	str	r3, [sp, #16]
 800e284:	d006      	beq.n	800e294 <arm_mat_mult_f32+0x130>
 800e286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e288:	6858      	ldr	r0, [r3, #4]
 800e28a:	e79d      	b.n	800e1c8 <arm_mat_mult_f32+0x64>
 800e28c:	9a05      	ldr	r2, [sp, #20]
 800e28e:	eddf 7a06 	vldr	s15, [pc, #24]	@ 800e2a8 <arm_mat_mult_f32+0x144>
 800e292:	e7d7      	b.n	800e244 <arm_mat_mult_f32+0xe0>
 800e294:	4618      	mov	r0, r3
 800e296:	b00b      	add	sp, #44	@ 0x2c
 800e298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29c:	f06f 0002 	mvn.w	r0, #2
 800e2a0:	b00b      	add	sp, #44	@ 0x2c
 800e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a6:	bf00      	nop
 800e2a8:	00000000 	.word	0x00000000

0800e2ac <arm_mat_inverse_f32>:
 800e2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b0:	8843      	ldrh	r3, [r0, #2]
 800e2b2:	b087      	sub	sp, #28
 800e2b4:	8804      	ldrh	r4, [r0, #0]
 800e2b6:	684d      	ldr	r5, [r1, #4]
 800e2b8:	429c      	cmp	r4, r3
 800e2ba:	9301      	str	r3, [sp, #4]
 800e2bc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 800e2c0:	9503      	str	r5, [sp, #12]
 800e2c2:	f040 80e2 	bne.w	800e48a <arm_mat_inverse_f32+0x1de>
 800e2c6:	880b      	ldrh	r3, [r1, #0]
 800e2c8:	884a      	ldrh	r2, [r1, #2]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	f040 80dd 	bne.w	800e48a <arm_mat_inverse_f32+0x1de>
 800e2d0:	429c      	cmp	r4, r3
 800e2d2:	f040 80da 	bne.w	800e48a <arm_mat_inverse_f32+0x1de>
 800e2d6:	9005      	str	r0, [sp, #20]
 800e2d8:	b1fc      	cbz	r4, 800e31a <arm_mat_inverse_f32+0x6e>
 800e2da:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 800e2de:	1e66      	subs	r6, r4, #1
 800e2e0:	f845 bb04 	str.w	fp, [r5], #4
 800e2e4:	d019      	beq.n	800e31a <arm_mat_inverse_f32+0x6e>
 800e2e6:	2701      	movs	r7, #1
 800e2e8:	00b2      	lsls	r2, r6, #2
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	eb05 0a02 	add.w	sl, r5, r2
 800e2f6:	f000 ff23 	bl	800f140 <memset>
 800e2fa:	4642      	mov	r2, r8
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	eb0a 0508 	add.w	r5, sl, r8
 800e302:	4650      	mov	r0, sl
 800e304:	2f00      	cmp	r7, #0
 800e306:	f000 80c5 	beq.w	800e494 <arm_mat_inverse_f32+0x1e8>
 800e30a:	f000 ff19 	bl	800f140 <memset>
 800e30e:	3e01      	subs	r6, #1
 800e310:	f107 0701 	add.w	r7, r7, #1
 800e314:	f845 bb04 	str.w	fp, [r5], #4
 800e318:	d1e6      	bne.n	800e2e8 <arm_mat_inverse_f32+0x3c>
 800e31a:	9b01      	ldr	r3, [sp, #4]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 80af 	beq.w	800e480 <arm_mat_inverse_f32+0x1d4>
 800e322:	009d      	lsls	r5, r3, #2
 800e324:	46cc      	mov	ip, r9
 800e326:	469e      	mov	lr, r3
 800e328:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e32c:	eb0c 0305 	add.w	r3, ip, r5
 800e330:	462f      	mov	r7, r5
 800e332:	2600      	movs	r6, #0
 800e334:	9302      	str	r3, [sp, #8]
 800e336:	1d2b      	adds	r3, r5, #4
 800e338:	9304      	str	r3, [sp, #16]
 800e33a:	9b02      	ldr	r3, [sp, #8]
 800e33c:	42b4      	cmp	r4, r6
 800e33e:	eddc 6a00 	vldr	s13, [ip]
 800e342:	eba3 0b07 	sub.w	fp, r3, r7
 800e346:	f000 809b 	beq.w	800e480 <arm_mat_inverse_f32+0x1d4>
 800e34a:	4632      	mov	r2, r6
 800e34c:	4663      	mov	r3, ip
 800e34e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e4a4 <arm_mat_inverse_f32+0x1f8>
 800e352:	e009      	b.n	800e368 <arm_mat_inverse_f32+0xbc>
 800e354:	eef4 7a47 	vcmp.f32	s15, s14
 800e358:	3201      	adds	r2, #1
 800e35a:	442b      	add	r3, r5
 800e35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e360:	fe37 7a87 	vselgt.f32	s14, s15, s14
 800e364:	42a2      	cmp	r2, r4
 800e366:	d012      	beq.n	800e38e <arm_mat_inverse_f32+0xe2>
 800e368:	edd3 7a00 	vldr	s15, [r3]
 800e36c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e370:	eeb1 6a67 	vneg.f32	s12, s15
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	dcec      	bgt.n	800e354 <arm_mat_inverse_f32+0xa8>
 800e37a:	eeb4 6a47 	vcmp.f32	s12, s14
 800e37e:	3201      	adds	r2, #1
 800e380:	442b      	add	r3, r5
 800e382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e386:	fe36 7a07 	vselgt.f32	s14, s12, s14
 800e38a:	42a2      	cmp	r2, r4
 800e38c:	d1ec      	bne.n	800e368 <arm_mat_inverse_f32+0xbc>
 800e38e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e396:	d073      	beq.n	800e480 <arm_mat_inverse_f32+0x1d4>
 800e398:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a0:	d06e      	beq.n	800e480 <arm_mat_inverse_f32+0x1d4>
 800e3a2:	4672      	mov	r2, lr
 800e3a4:	4663      	mov	r3, ip
 800e3a6:	ed93 7a00 	vldr	s14, [r3]
 800e3aa:	3a01      	subs	r2, #1
 800e3ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3b0:	ece3 7a01 	vstmia	r3!, {s15}
 800e3b4:	d1f7      	bne.n	800e3a6 <arm_mat_inverse_f32+0xfa>
 800e3b6:	9901      	ldr	r1, [sp, #4]
 800e3b8:	464b      	mov	r3, r9
 800e3ba:	ed93 7a00 	vldr	s14, [r3]
 800e3be:	3901      	subs	r1, #1
 800e3c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e3c4:	ece3 7a01 	vstmia	r3!, {s15}
 800e3c8:	d1f7      	bne.n	800e3ba <arm_mat_inverse_f32+0x10e>
 800e3ca:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800e3ce:	9803      	ldr	r0, [sp, #12]
 800e3d0:	42b1      	cmp	r1, r6
 800e3d2:	d038      	beq.n	800e446 <arm_mat_inverse_f32+0x19a>
 800e3d4:	eddb 6a00 	vldr	s13, [fp]
 800e3d8:	465a      	mov	r2, fp
 800e3da:	4673      	mov	r3, lr
 800e3dc:	46e2      	mov	sl, ip
 800e3de:	ecba 7a01 	vldmia	sl!, {s14}
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	edd2 7a00 	vldr	s15, [r2]
 800e3e8:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e3ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3f0:	ece2 7a01 	vstmia	r2!, {s15}
 800e3f4:	d1f3      	bne.n	800e3de <arm_mat_inverse_f32+0x132>
 800e3f6:	44bb      	add	fp, r7
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	9b01      	ldr	r3, [sp, #4]
 800e3fc:	46ca      	mov	sl, r9
 800e3fe:	ecba 7a01 	vldmia	sl!, {s14}
 800e402:	3b01      	subs	r3, #1
 800e404:	edd2 7a00 	vldr	s15, [r2]
 800e408:	ee26 7a87 	vmul.f32	s14, s13, s14
 800e40c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e410:	ece2 7a01 	vstmia	r2!, {s15}
 800e414:	d1f3      	bne.n	800e3fe <arm_mat_inverse_f32+0x152>
 800e416:	4428      	add	r0, r5
 800e418:	3101      	adds	r1, #1
 800e41a:	44c3      	add	fp, r8
 800e41c:	428c      	cmp	r4, r1
 800e41e:	d1d7      	bne.n	800e3d0 <arm_mat_inverse_f32+0x124>
 800e420:	9b04      	ldr	r3, [sp, #16]
 800e422:	f1be 0e01 	subs.w	lr, lr, #1
 800e426:	f106 0601 	add.w	r6, r6, #1
 800e42a:	f1a7 0704 	sub.w	r7, r7, #4
 800e42e:	449c      	add	ip, r3
 800e430:	44a9      	add	r9, r5
 800e432:	d182      	bne.n	800e33a <arm_mat_inverse_f32+0x8e>
 800e434:	eef5 6a40 	vcmp.f32	s13, #0.0
 800e438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43c:	d006      	beq.n	800e44c <arm_mat_inverse_f32+0x1a0>
 800e43e:	2000      	movs	r0, #0
 800e440:	b007      	add	sp, #28
 800e442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e446:	44bb      	add	fp, r7
 800e448:	4428      	add	r0, r5
 800e44a:	e7e5      	b.n	800e418 <arm_mat_inverse_f32+0x16c>
 800e44c:	9b05      	ldr	r3, [sp, #20]
 800e44e:	9a01      	ldr	r2, [sp, #4]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	fb02 f204 	mul.w	r2, r2, r4
 800e456:	edd3 7a00 	vldr	s15, [r3]
 800e45a:	4614      	mov	r4, r2
 800e45c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e464:	d1eb      	bne.n	800e43e <arm_mat_inverse_f32+0x192>
 800e466:	3304      	adds	r3, #4
 800e468:	e006      	b.n	800e478 <arm_mat_inverse_f32+0x1cc>
 800e46a:	ecf3 7a01 	vldmia	r3!, {s15}
 800e46e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e476:	d1e2      	bne.n	800e43e <arm_mat_inverse_f32+0x192>
 800e478:	f10e 0e01 	add.w	lr, lr, #1
 800e47c:	4574      	cmp	r4, lr
 800e47e:	d1f4      	bne.n	800e46a <arm_mat_inverse_f32+0x1be>
 800e480:	f06f 0004 	mvn.w	r0, #4
 800e484:	b007      	add	sp, #28
 800e486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48a:	f06f 0002 	mvn.w	r0, #2
 800e48e:	b007      	add	sp, #28
 800e490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e494:	4655      	mov	r5, sl
 800e496:	3e01      	subs	r6, #1
 800e498:	f845 bb04 	str.w	fp, [r5], #4
 800e49c:	f47f af23 	bne.w	800e2e6 <arm_mat_inverse_f32+0x3a>
 800e4a0:	e73b      	b.n	800e31a <arm_mat_inverse_f32+0x6e>
 800e4a2:	bf00      	nop
 800e4a4:	00000000 	.word	0x00000000

0800e4a8 <arm_mat_init_f32>:
 800e4a8:	8001      	strh	r1, [r0, #0]
 800e4aa:	8042      	strh	r2, [r0, #2]
 800e4ac:	6043      	str	r3, [r0, #4]
 800e4ae:	4770      	bx	lr

0800e4b0 <__cvt>:
 800e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4b2:	ed2d 8b02 	vpush	{d8}
 800e4b6:	eeb0 8b40 	vmov.f64	d8, d0
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	4617      	mov	r7, r2
 800e4be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e4c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e4c2:	ee18 2a90 	vmov	r2, s17
 800e4c6:	f025 0520 	bic.w	r5, r5, #32
 800e4ca:	2a00      	cmp	r2, #0
 800e4cc:	bfb6      	itet	lt
 800e4ce:	222d      	movlt	r2, #45	@ 0x2d
 800e4d0:	2200      	movge	r2, #0
 800e4d2:	eeb1 8b40 	vneglt.f64	d8, d0
 800e4d6:	2d46      	cmp	r5, #70	@ 0x46
 800e4d8:	460c      	mov	r4, r1
 800e4da:	701a      	strb	r2, [r3, #0]
 800e4dc:	d004      	beq.n	800e4e8 <__cvt+0x38>
 800e4de:	2d45      	cmp	r5, #69	@ 0x45
 800e4e0:	d100      	bne.n	800e4e4 <__cvt+0x34>
 800e4e2:	3401      	adds	r4, #1
 800e4e4:	2102      	movs	r1, #2
 800e4e6:	e000      	b.n	800e4ea <__cvt+0x3a>
 800e4e8:	2103      	movs	r1, #3
 800e4ea:	ab03      	add	r3, sp, #12
 800e4ec:	9301      	str	r3, [sp, #4]
 800e4ee:	ab02      	add	r3, sp, #8
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	4622      	mov	r2, r4
 800e4f4:	4633      	mov	r3, r6
 800e4f6:	eeb0 0b48 	vmov.f64	d0, d8
 800e4fa:	f000 ff95 	bl	800f428 <_dtoa_r>
 800e4fe:	2d47      	cmp	r5, #71	@ 0x47
 800e500:	d114      	bne.n	800e52c <__cvt+0x7c>
 800e502:	07fb      	lsls	r3, r7, #31
 800e504:	d50a      	bpl.n	800e51c <__cvt+0x6c>
 800e506:	1902      	adds	r2, r0, r4
 800e508:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e510:	bf08      	it	eq
 800e512:	9203      	streq	r2, [sp, #12]
 800e514:	2130      	movs	r1, #48	@ 0x30
 800e516:	9b03      	ldr	r3, [sp, #12]
 800e518:	4293      	cmp	r3, r2
 800e51a:	d319      	bcc.n	800e550 <__cvt+0xa0>
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e520:	1a1b      	subs	r3, r3, r0
 800e522:	6013      	str	r3, [r2, #0]
 800e524:	b005      	add	sp, #20
 800e526:	ecbd 8b02 	vpop	{d8}
 800e52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e52c:	2d46      	cmp	r5, #70	@ 0x46
 800e52e:	eb00 0204 	add.w	r2, r0, r4
 800e532:	d1e9      	bne.n	800e508 <__cvt+0x58>
 800e534:	7803      	ldrb	r3, [r0, #0]
 800e536:	2b30      	cmp	r3, #48	@ 0x30
 800e538:	d107      	bne.n	800e54a <__cvt+0x9a>
 800e53a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e542:	bf1c      	itt	ne
 800e544:	f1c4 0401 	rsbne	r4, r4, #1
 800e548:	6034      	strne	r4, [r6, #0]
 800e54a:	6833      	ldr	r3, [r6, #0]
 800e54c:	441a      	add	r2, r3
 800e54e:	e7db      	b.n	800e508 <__cvt+0x58>
 800e550:	1c5c      	adds	r4, r3, #1
 800e552:	9403      	str	r4, [sp, #12]
 800e554:	7019      	strb	r1, [r3, #0]
 800e556:	e7de      	b.n	800e516 <__cvt+0x66>

0800e558 <__exponent>:
 800e558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e55a:	2900      	cmp	r1, #0
 800e55c:	bfba      	itte	lt
 800e55e:	4249      	neglt	r1, r1
 800e560:	232d      	movlt	r3, #45	@ 0x2d
 800e562:	232b      	movge	r3, #43	@ 0x2b
 800e564:	2909      	cmp	r1, #9
 800e566:	7002      	strb	r2, [r0, #0]
 800e568:	7043      	strb	r3, [r0, #1]
 800e56a:	dd29      	ble.n	800e5c0 <__exponent+0x68>
 800e56c:	f10d 0307 	add.w	r3, sp, #7
 800e570:	461d      	mov	r5, r3
 800e572:	270a      	movs	r7, #10
 800e574:	461a      	mov	r2, r3
 800e576:	fbb1 f6f7 	udiv	r6, r1, r7
 800e57a:	fb07 1416 	mls	r4, r7, r6, r1
 800e57e:	3430      	adds	r4, #48	@ 0x30
 800e580:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e584:	460c      	mov	r4, r1
 800e586:	2c63      	cmp	r4, #99	@ 0x63
 800e588:	f103 33ff 	add.w	r3, r3, #4294967295
 800e58c:	4631      	mov	r1, r6
 800e58e:	dcf1      	bgt.n	800e574 <__exponent+0x1c>
 800e590:	3130      	adds	r1, #48	@ 0x30
 800e592:	1e94      	subs	r4, r2, #2
 800e594:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e598:	1c41      	adds	r1, r0, #1
 800e59a:	4623      	mov	r3, r4
 800e59c:	42ab      	cmp	r3, r5
 800e59e:	d30a      	bcc.n	800e5b6 <__exponent+0x5e>
 800e5a0:	f10d 0309 	add.w	r3, sp, #9
 800e5a4:	1a9b      	subs	r3, r3, r2
 800e5a6:	42ac      	cmp	r4, r5
 800e5a8:	bf88      	it	hi
 800e5aa:	2300      	movhi	r3, #0
 800e5ac:	3302      	adds	r3, #2
 800e5ae:	4403      	add	r3, r0
 800e5b0:	1a18      	subs	r0, r3, r0
 800e5b2:	b003      	add	sp, #12
 800e5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e5ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e5be:	e7ed      	b.n	800e59c <__exponent+0x44>
 800e5c0:	2330      	movs	r3, #48	@ 0x30
 800e5c2:	3130      	adds	r1, #48	@ 0x30
 800e5c4:	7083      	strb	r3, [r0, #2]
 800e5c6:	70c1      	strb	r1, [r0, #3]
 800e5c8:	1d03      	adds	r3, r0, #4
 800e5ca:	e7f1      	b.n	800e5b0 <__exponent+0x58>
 800e5cc:	0000      	movs	r0, r0
	...

0800e5d0 <_printf_float>:
 800e5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5d4:	b08d      	sub	sp, #52	@ 0x34
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e5dc:	4616      	mov	r6, r2
 800e5de:	461f      	mov	r7, r3
 800e5e0:	4605      	mov	r5, r0
 800e5e2:	f000 fdb5 	bl	800f150 <_localeconv_r>
 800e5e6:	f8d0 b000 	ldr.w	fp, [r0]
 800e5ea:	4658      	mov	r0, fp
 800e5ec:	f7f1 fec8 	bl	8000380 <strlen>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5f4:	f8d8 3000 	ldr.w	r3, [r8]
 800e5f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e5fc:	6822      	ldr	r2, [r4, #0]
 800e5fe:	9005      	str	r0, [sp, #20]
 800e600:	3307      	adds	r3, #7
 800e602:	f023 0307 	bic.w	r3, r3, #7
 800e606:	f103 0108 	add.w	r1, r3, #8
 800e60a:	f8c8 1000 	str.w	r1, [r8]
 800e60e:	ed93 0b00 	vldr	d0, [r3]
 800e612:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e870 <_printf_float+0x2a0>
 800e616:	eeb0 7bc0 	vabs.f64	d7, d0
 800e61a:	eeb4 7b46 	vcmp.f64	d7, d6
 800e61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e622:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e626:	dd24      	ble.n	800e672 <_printf_float+0xa2>
 800e628:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e630:	d502      	bpl.n	800e638 <_printf_float+0x68>
 800e632:	232d      	movs	r3, #45	@ 0x2d
 800e634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e638:	498f      	ldr	r1, [pc, #572]	@ (800e878 <_printf_float+0x2a8>)
 800e63a:	4b90      	ldr	r3, [pc, #576]	@ (800e87c <_printf_float+0x2ac>)
 800e63c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e640:	bf8c      	ite	hi
 800e642:	4688      	movhi	r8, r1
 800e644:	4698      	movls	r8, r3
 800e646:	f022 0204 	bic.w	r2, r2, #4
 800e64a:	2303      	movs	r3, #3
 800e64c:	6123      	str	r3, [r4, #16]
 800e64e:	6022      	str	r2, [r4, #0]
 800e650:	f04f 0a00 	mov.w	sl, #0
 800e654:	9700      	str	r7, [sp, #0]
 800e656:	4633      	mov	r3, r6
 800e658:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e65a:	4621      	mov	r1, r4
 800e65c:	4628      	mov	r0, r5
 800e65e:	f000 f9d1 	bl	800ea04 <_printf_common>
 800e662:	3001      	adds	r0, #1
 800e664:	f040 8089 	bne.w	800e77a <_printf_float+0x1aa>
 800e668:	f04f 30ff 	mov.w	r0, #4294967295
 800e66c:	b00d      	add	sp, #52	@ 0x34
 800e66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e672:	eeb4 0b40 	vcmp.f64	d0, d0
 800e676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67a:	d709      	bvc.n	800e690 <_printf_float+0xc0>
 800e67c:	ee10 3a90 	vmov	r3, s1
 800e680:	2b00      	cmp	r3, #0
 800e682:	bfbc      	itt	lt
 800e684:	232d      	movlt	r3, #45	@ 0x2d
 800e686:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e68a:	497d      	ldr	r1, [pc, #500]	@ (800e880 <_printf_float+0x2b0>)
 800e68c:	4b7d      	ldr	r3, [pc, #500]	@ (800e884 <_printf_float+0x2b4>)
 800e68e:	e7d5      	b.n	800e63c <_printf_float+0x6c>
 800e690:	6863      	ldr	r3, [r4, #4]
 800e692:	1c59      	adds	r1, r3, #1
 800e694:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e698:	d139      	bne.n	800e70e <_printf_float+0x13e>
 800e69a:	2306      	movs	r3, #6
 800e69c:	6063      	str	r3, [r4, #4]
 800e69e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	6022      	str	r2, [r4, #0]
 800e6a6:	9303      	str	r3, [sp, #12]
 800e6a8:	ab0a      	add	r3, sp, #40	@ 0x28
 800e6aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e6ae:	ab09      	add	r3, sp, #36	@ 0x24
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	6861      	ldr	r1, [r4, #4]
 800e6b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	f7ff fef9 	bl	800e4b0 <__cvt>
 800e6be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e6c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e6c4:	4680      	mov	r8, r0
 800e6c6:	d129      	bne.n	800e71c <_printf_float+0x14c>
 800e6c8:	1cc8      	adds	r0, r1, #3
 800e6ca:	db02      	blt.n	800e6d2 <_printf_float+0x102>
 800e6cc:	6863      	ldr	r3, [r4, #4]
 800e6ce:	4299      	cmp	r1, r3
 800e6d0:	dd41      	ble.n	800e756 <_printf_float+0x186>
 800e6d2:	f1a9 0902 	sub.w	r9, r9, #2
 800e6d6:	fa5f f989 	uxtb.w	r9, r9
 800e6da:	3901      	subs	r1, #1
 800e6dc:	464a      	mov	r2, r9
 800e6de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e6e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e6e4:	f7ff ff38 	bl	800e558 <__exponent>
 800e6e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e6ea:	1813      	adds	r3, r2, r0
 800e6ec:	2a01      	cmp	r2, #1
 800e6ee:	4682      	mov	sl, r0
 800e6f0:	6123      	str	r3, [r4, #16]
 800e6f2:	dc02      	bgt.n	800e6fa <_printf_float+0x12a>
 800e6f4:	6822      	ldr	r2, [r4, #0]
 800e6f6:	07d2      	lsls	r2, r2, #31
 800e6f8:	d501      	bpl.n	800e6fe <_printf_float+0x12e>
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	6123      	str	r3, [r4, #16]
 800e6fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e702:	2b00      	cmp	r3, #0
 800e704:	d0a6      	beq.n	800e654 <_printf_float+0x84>
 800e706:	232d      	movs	r3, #45	@ 0x2d
 800e708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e70c:	e7a2      	b.n	800e654 <_printf_float+0x84>
 800e70e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e712:	d1c4      	bne.n	800e69e <_printf_float+0xce>
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1c2      	bne.n	800e69e <_printf_float+0xce>
 800e718:	2301      	movs	r3, #1
 800e71a:	e7bf      	b.n	800e69c <_printf_float+0xcc>
 800e71c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e720:	d9db      	bls.n	800e6da <_printf_float+0x10a>
 800e722:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e726:	d118      	bne.n	800e75a <_printf_float+0x18a>
 800e728:	2900      	cmp	r1, #0
 800e72a:	6863      	ldr	r3, [r4, #4]
 800e72c:	dd0b      	ble.n	800e746 <_printf_float+0x176>
 800e72e:	6121      	str	r1, [r4, #16]
 800e730:	b913      	cbnz	r3, 800e738 <_printf_float+0x168>
 800e732:	6822      	ldr	r2, [r4, #0]
 800e734:	07d0      	lsls	r0, r2, #31
 800e736:	d502      	bpl.n	800e73e <_printf_float+0x16e>
 800e738:	3301      	adds	r3, #1
 800e73a:	440b      	add	r3, r1
 800e73c:	6123      	str	r3, [r4, #16]
 800e73e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e740:	f04f 0a00 	mov.w	sl, #0
 800e744:	e7db      	b.n	800e6fe <_printf_float+0x12e>
 800e746:	b913      	cbnz	r3, 800e74e <_printf_float+0x17e>
 800e748:	6822      	ldr	r2, [r4, #0]
 800e74a:	07d2      	lsls	r2, r2, #31
 800e74c:	d501      	bpl.n	800e752 <_printf_float+0x182>
 800e74e:	3302      	adds	r3, #2
 800e750:	e7f4      	b.n	800e73c <_printf_float+0x16c>
 800e752:	2301      	movs	r3, #1
 800e754:	e7f2      	b.n	800e73c <_printf_float+0x16c>
 800e756:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e75a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e75c:	4299      	cmp	r1, r3
 800e75e:	db05      	blt.n	800e76c <_printf_float+0x19c>
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	6121      	str	r1, [r4, #16]
 800e764:	07d8      	lsls	r0, r3, #31
 800e766:	d5ea      	bpl.n	800e73e <_printf_float+0x16e>
 800e768:	1c4b      	adds	r3, r1, #1
 800e76a:	e7e7      	b.n	800e73c <_printf_float+0x16c>
 800e76c:	2900      	cmp	r1, #0
 800e76e:	bfd4      	ite	le
 800e770:	f1c1 0202 	rsble	r2, r1, #2
 800e774:	2201      	movgt	r2, #1
 800e776:	4413      	add	r3, r2
 800e778:	e7e0      	b.n	800e73c <_printf_float+0x16c>
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	055a      	lsls	r2, r3, #21
 800e77e:	d407      	bmi.n	800e790 <_printf_float+0x1c0>
 800e780:	6923      	ldr	r3, [r4, #16]
 800e782:	4642      	mov	r2, r8
 800e784:	4631      	mov	r1, r6
 800e786:	4628      	mov	r0, r5
 800e788:	47b8      	blx	r7
 800e78a:	3001      	adds	r0, #1
 800e78c:	d12a      	bne.n	800e7e4 <_printf_float+0x214>
 800e78e:	e76b      	b.n	800e668 <_printf_float+0x98>
 800e790:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e794:	f240 80e0 	bls.w	800e958 <_printf_float+0x388>
 800e798:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e79c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a4:	d133      	bne.n	800e80e <_printf_float+0x23e>
 800e7a6:	4a38      	ldr	r2, [pc, #224]	@ (800e888 <_printf_float+0x2b8>)
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	4631      	mov	r1, r6
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	47b8      	blx	r7
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	f43f af59 	beq.w	800e668 <_printf_float+0x98>
 800e7b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e7ba:	4543      	cmp	r3, r8
 800e7bc:	db02      	blt.n	800e7c4 <_printf_float+0x1f4>
 800e7be:	6823      	ldr	r3, [r4, #0]
 800e7c0:	07d8      	lsls	r0, r3, #31
 800e7c2:	d50f      	bpl.n	800e7e4 <_printf_float+0x214>
 800e7c4:	9b05      	ldr	r3, [sp, #20]
 800e7c6:	465a      	mov	r2, fp
 800e7c8:	4631      	mov	r1, r6
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	47b8      	blx	r7
 800e7ce:	3001      	adds	r0, #1
 800e7d0:	f43f af4a 	beq.w	800e668 <_printf_float+0x98>
 800e7d4:	f04f 0900 	mov.w	r9, #0
 800e7d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800e7dc:	f104 0a1a 	add.w	sl, r4, #26
 800e7e0:	45c8      	cmp	r8, r9
 800e7e2:	dc09      	bgt.n	800e7f8 <_printf_float+0x228>
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	079b      	lsls	r3, r3, #30
 800e7e8:	f100 8107 	bmi.w	800e9fa <_printf_float+0x42a>
 800e7ec:	68e0      	ldr	r0, [r4, #12]
 800e7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7f0:	4298      	cmp	r0, r3
 800e7f2:	bfb8      	it	lt
 800e7f4:	4618      	movlt	r0, r3
 800e7f6:	e739      	b.n	800e66c <_printf_float+0x9c>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	4652      	mov	r2, sl
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	4628      	mov	r0, r5
 800e800:	47b8      	blx	r7
 800e802:	3001      	adds	r0, #1
 800e804:	f43f af30 	beq.w	800e668 <_printf_float+0x98>
 800e808:	f109 0901 	add.w	r9, r9, #1
 800e80c:	e7e8      	b.n	800e7e0 <_printf_float+0x210>
 800e80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e810:	2b00      	cmp	r3, #0
 800e812:	dc3b      	bgt.n	800e88c <_printf_float+0x2bc>
 800e814:	4a1c      	ldr	r2, [pc, #112]	@ (800e888 <_printf_float+0x2b8>)
 800e816:	2301      	movs	r3, #1
 800e818:	4631      	mov	r1, r6
 800e81a:	4628      	mov	r0, r5
 800e81c:	47b8      	blx	r7
 800e81e:	3001      	adds	r0, #1
 800e820:	f43f af22 	beq.w	800e668 <_printf_float+0x98>
 800e824:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e828:	ea59 0303 	orrs.w	r3, r9, r3
 800e82c:	d102      	bne.n	800e834 <_printf_float+0x264>
 800e82e:	6823      	ldr	r3, [r4, #0]
 800e830:	07d9      	lsls	r1, r3, #31
 800e832:	d5d7      	bpl.n	800e7e4 <_printf_float+0x214>
 800e834:	9b05      	ldr	r3, [sp, #20]
 800e836:	465a      	mov	r2, fp
 800e838:	4631      	mov	r1, r6
 800e83a:	4628      	mov	r0, r5
 800e83c:	47b8      	blx	r7
 800e83e:	3001      	adds	r0, #1
 800e840:	f43f af12 	beq.w	800e668 <_printf_float+0x98>
 800e844:	f04f 0a00 	mov.w	sl, #0
 800e848:	f104 0b1a 	add.w	fp, r4, #26
 800e84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84e:	425b      	negs	r3, r3
 800e850:	4553      	cmp	r3, sl
 800e852:	dc01      	bgt.n	800e858 <_printf_float+0x288>
 800e854:	464b      	mov	r3, r9
 800e856:	e794      	b.n	800e782 <_printf_float+0x1b2>
 800e858:	2301      	movs	r3, #1
 800e85a:	465a      	mov	r2, fp
 800e85c:	4631      	mov	r1, r6
 800e85e:	4628      	mov	r0, r5
 800e860:	47b8      	blx	r7
 800e862:	3001      	adds	r0, #1
 800e864:	f43f af00 	beq.w	800e668 <_printf_float+0x98>
 800e868:	f10a 0a01 	add.w	sl, sl, #1
 800e86c:	e7ee      	b.n	800e84c <_printf_float+0x27c>
 800e86e:	bf00      	nop
 800e870:	ffffffff 	.word	0xffffffff
 800e874:	7fefffff 	.word	0x7fefffff
 800e878:	080115b8 	.word	0x080115b8
 800e87c:	080115b4 	.word	0x080115b4
 800e880:	080115c0 	.word	0x080115c0
 800e884:	080115bc 	.word	0x080115bc
 800e888:	080115c4 	.word	0x080115c4
 800e88c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e88e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e892:	4553      	cmp	r3, sl
 800e894:	bfa8      	it	ge
 800e896:	4653      	movge	r3, sl
 800e898:	2b00      	cmp	r3, #0
 800e89a:	4699      	mov	r9, r3
 800e89c:	dc37      	bgt.n	800e90e <_printf_float+0x33e>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	9307      	str	r3, [sp, #28]
 800e8a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8a6:	f104 021a 	add.w	r2, r4, #26
 800e8aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e8ac:	9907      	ldr	r1, [sp, #28]
 800e8ae:	9306      	str	r3, [sp, #24]
 800e8b0:	eba3 0309 	sub.w	r3, r3, r9
 800e8b4:	428b      	cmp	r3, r1
 800e8b6:	dc31      	bgt.n	800e91c <_printf_float+0x34c>
 800e8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8ba:	459a      	cmp	sl, r3
 800e8bc:	dc3b      	bgt.n	800e936 <_printf_float+0x366>
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	07da      	lsls	r2, r3, #31
 800e8c2:	d438      	bmi.n	800e936 <_printf_float+0x366>
 800e8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8c6:	ebaa 0903 	sub.w	r9, sl, r3
 800e8ca:	9b06      	ldr	r3, [sp, #24]
 800e8cc:	ebaa 0303 	sub.w	r3, sl, r3
 800e8d0:	4599      	cmp	r9, r3
 800e8d2:	bfa8      	it	ge
 800e8d4:	4699      	movge	r9, r3
 800e8d6:	f1b9 0f00 	cmp.w	r9, #0
 800e8da:	dc34      	bgt.n	800e946 <_printf_float+0x376>
 800e8dc:	f04f 0800 	mov.w	r8, #0
 800e8e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8e4:	f104 0b1a 	add.w	fp, r4, #26
 800e8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8ea:	ebaa 0303 	sub.w	r3, sl, r3
 800e8ee:	eba3 0309 	sub.w	r3, r3, r9
 800e8f2:	4543      	cmp	r3, r8
 800e8f4:	f77f af76 	ble.w	800e7e4 <_printf_float+0x214>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	465a      	mov	r2, fp
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4628      	mov	r0, r5
 800e900:	47b8      	blx	r7
 800e902:	3001      	adds	r0, #1
 800e904:	f43f aeb0 	beq.w	800e668 <_printf_float+0x98>
 800e908:	f108 0801 	add.w	r8, r8, #1
 800e90c:	e7ec      	b.n	800e8e8 <_printf_float+0x318>
 800e90e:	4642      	mov	r2, r8
 800e910:	4631      	mov	r1, r6
 800e912:	4628      	mov	r0, r5
 800e914:	47b8      	blx	r7
 800e916:	3001      	adds	r0, #1
 800e918:	d1c1      	bne.n	800e89e <_printf_float+0x2ce>
 800e91a:	e6a5      	b.n	800e668 <_printf_float+0x98>
 800e91c:	2301      	movs	r3, #1
 800e91e:	4631      	mov	r1, r6
 800e920:	4628      	mov	r0, r5
 800e922:	9206      	str	r2, [sp, #24]
 800e924:	47b8      	blx	r7
 800e926:	3001      	adds	r0, #1
 800e928:	f43f ae9e 	beq.w	800e668 <_printf_float+0x98>
 800e92c:	9b07      	ldr	r3, [sp, #28]
 800e92e:	9a06      	ldr	r2, [sp, #24]
 800e930:	3301      	adds	r3, #1
 800e932:	9307      	str	r3, [sp, #28]
 800e934:	e7b9      	b.n	800e8aa <_printf_float+0x2da>
 800e936:	9b05      	ldr	r3, [sp, #20]
 800e938:	465a      	mov	r2, fp
 800e93a:	4631      	mov	r1, r6
 800e93c:	4628      	mov	r0, r5
 800e93e:	47b8      	blx	r7
 800e940:	3001      	adds	r0, #1
 800e942:	d1bf      	bne.n	800e8c4 <_printf_float+0x2f4>
 800e944:	e690      	b.n	800e668 <_printf_float+0x98>
 800e946:	9a06      	ldr	r2, [sp, #24]
 800e948:	464b      	mov	r3, r9
 800e94a:	4442      	add	r2, r8
 800e94c:	4631      	mov	r1, r6
 800e94e:	4628      	mov	r0, r5
 800e950:	47b8      	blx	r7
 800e952:	3001      	adds	r0, #1
 800e954:	d1c2      	bne.n	800e8dc <_printf_float+0x30c>
 800e956:	e687      	b.n	800e668 <_printf_float+0x98>
 800e958:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e95c:	f1b9 0f01 	cmp.w	r9, #1
 800e960:	dc01      	bgt.n	800e966 <_printf_float+0x396>
 800e962:	07db      	lsls	r3, r3, #31
 800e964:	d536      	bpl.n	800e9d4 <_printf_float+0x404>
 800e966:	2301      	movs	r3, #1
 800e968:	4642      	mov	r2, r8
 800e96a:	4631      	mov	r1, r6
 800e96c:	4628      	mov	r0, r5
 800e96e:	47b8      	blx	r7
 800e970:	3001      	adds	r0, #1
 800e972:	f43f ae79 	beq.w	800e668 <_printf_float+0x98>
 800e976:	9b05      	ldr	r3, [sp, #20]
 800e978:	465a      	mov	r2, fp
 800e97a:	4631      	mov	r1, r6
 800e97c:	4628      	mov	r0, r5
 800e97e:	47b8      	blx	r7
 800e980:	3001      	adds	r0, #1
 800e982:	f43f ae71 	beq.w	800e668 <_printf_float+0x98>
 800e986:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e98a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e992:	f109 39ff 	add.w	r9, r9, #4294967295
 800e996:	d018      	beq.n	800e9ca <_printf_float+0x3fa>
 800e998:	464b      	mov	r3, r9
 800e99a:	f108 0201 	add.w	r2, r8, #1
 800e99e:	4631      	mov	r1, r6
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	47b8      	blx	r7
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	d10c      	bne.n	800e9c2 <_printf_float+0x3f2>
 800e9a8:	e65e      	b.n	800e668 <_printf_float+0x98>
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	465a      	mov	r2, fp
 800e9ae:	4631      	mov	r1, r6
 800e9b0:	4628      	mov	r0, r5
 800e9b2:	47b8      	blx	r7
 800e9b4:	3001      	adds	r0, #1
 800e9b6:	f43f ae57 	beq.w	800e668 <_printf_float+0x98>
 800e9ba:	f108 0801 	add.w	r8, r8, #1
 800e9be:	45c8      	cmp	r8, r9
 800e9c0:	dbf3      	blt.n	800e9aa <_printf_float+0x3da>
 800e9c2:	4653      	mov	r3, sl
 800e9c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e9c8:	e6dc      	b.n	800e784 <_printf_float+0x1b4>
 800e9ca:	f04f 0800 	mov.w	r8, #0
 800e9ce:	f104 0b1a 	add.w	fp, r4, #26
 800e9d2:	e7f4      	b.n	800e9be <_printf_float+0x3ee>
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	4642      	mov	r2, r8
 800e9d8:	e7e1      	b.n	800e99e <_printf_float+0x3ce>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	464a      	mov	r2, r9
 800e9de:	4631      	mov	r1, r6
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	47b8      	blx	r7
 800e9e4:	3001      	adds	r0, #1
 800e9e6:	f43f ae3f 	beq.w	800e668 <_printf_float+0x98>
 800e9ea:	f108 0801 	add.w	r8, r8, #1
 800e9ee:	68e3      	ldr	r3, [r4, #12]
 800e9f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9f2:	1a5b      	subs	r3, r3, r1
 800e9f4:	4543      	cmp	r3, r8
 800e9f6:	dcf0      	bgt.n	800e9da <_printf_float+0x40a>
 800e9f8:	e6f8      	b.n	800e7ec <_printf_float+0x21c>
 800e9fa:	f04f 0800 	mov.w	r8, #0
 800e9fe:	f104 0919 	add.w	r9, r4, #25
 800ea02:	e7f4      	b.n	800e9ee <_printf_float+0x41e>

0800ea04 <_printf_common>:
 800ea04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea08:	4616      	mov	r6, r2
 800ea0a:	4698      	mov	r8, r3
 800ea0c:	688a      	ldr	r2, [r1, #8]
 800ea0e:	690b      	ldr	r3, [r1, #16]
 800ea10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea14:	4293      	cmp	r3, r2
 800ea16:	bfb8      	it	lt
 800ea18:	4613      	movlt	r3, r2
 800ea1a:	6033      	str	r3, [r6, #0]
 800ea1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea20:	4607      	mov	r7, r0
 800ea22:	460c      	mov	r4, r1
 800ea24:	b10a      	cbz	r2, 800ea2a <_printf_common+0x26>
 800ea26:	3301      	adds	r3, #1
 800ea28:	6033      	str	r3, [r6, #0]
 800ea2a:	6823      	ldr	r3, [r4, #0]
 800ea2c:	0699      	lsls	r1, r3, #26
 800ea2e:	bf42      	ittt	mi
 800ea30:	6833      	ldrmi	r3, [r6, #0]
 800ea32:	3302      	addmi	r3, #2
 800ea34:	6033      	strmi	r3, [r6, #0]
 800ea36:	6825      	ldr	r5, [r4, #0]
 800ea38:	f015 0506 	ands.w	r5, r5, #6
 800ea3c:	d106      	bne.n	800ea4c <_printf_common+0x48>
 800ea3e:	f104 0a19 	add.w	sl, r4, #25
 800ea42:	68e3      	ldr	r3, [r4, #12]
 800ea44:	6832      	ldr	r2, [r6, #0]
 800ea46:	1a9b      	subs	r3, r3, r2
 800ea48:	42ab      	cmp	r3, r5
 800ea4a:	dc26      	bgt.n	800ea9a <_printf_common+0x96>
 800ea4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea50:	6822      	ldr	r2, [r4, #0]
 800ea52:	3b00      	subs	r3, #0
 800ea54:	bf18      	it	ne
 800ea56:	2301      	movne	r3, #1
 800ea58:	0692      	lsls	r2, r2, #26
 800ea5a:	d42b      	bmi.n	800eab4 <_printf_common+0xb0>
 800ea5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea60:	4641      	mov	r1, r8
 800ea62:	4638      	mov	r0, r7
 800ea64:	47c8      	blx	r9
 800ea66:	3001      	adds	r0, #1
 800ea68:	d01e      	beq.n	800eaa8 <_printf_common+0xa4>
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	6922      	ldr	r2, [r4, #16]
 800ea6e:	f003 0306 	and.w	r3, r3, #6
 800ea72:	2b04      	cmp	r3, #4
 800ea74:	bf02      	ittt	eq
 800ea76:	68e5      	ldreq	r5, [r4, #12]
 800ea78:	6833      	ldreq	r3, [r6, #0]
 800ea7a:	1aed      	subeq	r5, r5, r3
 800ea7c:	68a3      	ldr	r3, [r4, #8]
 800ea7e:	bf0c      	ite	eq
 800ea80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea84:	2500      	movne	r5, #0
 800ea86:	4293      	cmp	r3, r2
 800ea88:	bfc4      	itt	gt
 800ea8a:	1a9b      	subgt	r3, r3, r2
 800ea8c:	18ed      	addgt	r5, r5, r3
 800ea8e:	2600      	movs	r6, #0
 800ea90:	341a      	adds	r4, #26
 800ea92:	42b5      	cmp	r5, r6
 800ea94:	d11a      	bne.n	800eacc <_printf_common+0xc8>
 800ea96:	2000      	movs	r0, #0
 800ea98:	e008      	b.n	800eaac <_printf_common+0xa8>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	4652      	mov	r2, sl
 800ea9e:	4641      	mov	r1, r8
 800eaa0:	4638      	mov	r0, r7
 800eaa2:	47c8      	blx	r9
 800eaa4:	3001      	adds	r0, #1
 800eaa6:	d103      	bne.n	800eab0 <_printf_common+0xac>
 800eaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eab0:	3501      	adds	r5, #1
 800eab2:	e7c6      	b.n	800ea42 <_printf_common+0x3e>
 800eab4:	18e1      	adds	r1, r4, r3
 800eab6:	1c5a      	adds	r2, r3, #1
 800eab8:	2030      	movs	r0, #48	@ 0x30
 800eaba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eabe:	4422      	add	r2, r4
 800eac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eac8:	3302      	adds	r3, #2
 800eaca:	e7c7      	b.n	800ea5c <_printf_common+0x58>
 800eacc:	2301      	movs	r3, #1
 800eace:	4622      	mov	r2, r4
 800ead0:	4641      	mov	r1, r8
 800ead2:	4638      	mov	r0, r7
 800ead4:	47c8      	blx	r9
 800ead6:	3001      	adds	r0, #1
 800ead8:	d0e6      	beq.n	800eaa8 <_printf_common+0xa4>
 800eada:	3601      	adds	r6, #1
 800eadc:	e7d9      	b.n	800ea92 <_printf_common+0x8e>
	...

0800eae0 <_printf_i>:
 800eae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eae4:	7e0f      	ldrb	r7, [r1, #24]
 800eae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eae8:	2f78      	cmp	r7, #120	@ 0x78
 800eaea:	4691      	mov	r9, r2
 800eaec:	4680      	mov	r8, r0
 800eaee:	460c      	mov	r4, r1
 800eaf0:	469a      	mov	sl, r3
 800eaf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eaf6:	d807      	bhi.n	800eb08 <_printf_i+0x28>
 800eaf8:	2f62      	cmp	r7, #98	@ 0x62
 800eafa:	d80a      	bhi.n	800eb12 <_printf_i+0x32>
 800eafc:	2f00      	cmp	r7, #0
 800eafe:	f000 80d1 	beq.w	800eca4 <_printf_i+0x1c4>
 800eb02:	2f58      	cmp	r7, #88	@ 0x58
 800eb04:	f000 80b8 	beq.w	800ec78 <_printf_i+0x198>
 800eb08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb10:	e03a      	b.n	800eb88 <_printf_i+0xa8>
 800eb12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb16:	2b15      	cmp	r3, #21
 800eb18:	d8f6      	bhi.n	800eb08 <_printf_i+0x28>
 800eb1a:	a101      	add	r1, pc, #4	@ (adr r1, 800eb20 <_printf_i+0x40>)
 800eb1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb20:	0800eb79 	.word	0x0800eb79
 800eb24:	0800eb8d 	.word	0x0800eb8d
 800eb28:	0800eb09 	.word	0x0800eb09
 800eb2c:	0800eb09 	.word	0x0800eb09
 800eb30:	0800eb09 	.word	0x0800eb09
 800eb34:	0800eb09 	.word	0x0800eb09
 800eb38:	0800eb8d 	.word	0x0800eb8d
 800eb3c:	0800eb09 	.word	0x0800eb09
 800eb40:	0800eb09 	.word	0x0800eb09
 800eb44:	0800eb09 	.word	0x0800eb09
 800eb48:	0800eb09 	.word	0x0800eb09
 800eb4c:	0800ec8b 	.word	0x0800ec8b
 800eb50:	0800ebb7 	.word	0x0800ebb7
 800eb54:	0800ec45 	.word	0x0800ec45
 800eb58:	0800eb09 	.word	0x0800eb09
 800eb5c:	0800eb09 	.word	0x0800eb09
 800eb60:	0800ecad 	.word	0x0800ecad
 800eb64:	0800eb09 	.word	0x0800eb09
 800eb68:	0800ebb7 	.word	0x0800ebb7
 800eb6c:	0800eb09 	.word	0x0800eb09
 800eb70:	0800eb09 	.word	0x0800eb09
 800eb74:	0800ec4d 	.word	0x0800ec4d
 800eb78:	6833      	ldr	r3, [r6, #0]
 800eb7a:	1d1a      	adds	r2, r3, #4
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	6032      	str	r2, [r6, #0]
 800eb80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e09c      	b.n	800ecc6 <_printf_i+0x1e6>
 800eb8c:	6833      	ldr	r3, [r6, #0]
 800eb8e:	6820      	ldr	r0, [r4, #0]
 800eb90:	1d19      	adds	r1, r3, #4
 800eb92:	6031      	str	r1, [r6, #0]
 800eb94:	0606      	lsls	r6, r0, #24
 800eb96:	d501      	bpl.n	800eb9c <_printf_i+0xbc>
 800eb98:	681d      	ldr	r5, [r3, #0]
 800eb9a:	e003      	b.n	800eba4 <_printf_i+0xc4>
 800eb9c:	0645      	lsls	r5, r0, #25
 800eb9e:	d5fb      	bpl.n	800eb98 <_printf_i+0xb8>
 800eba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eba4:	2d00      	cmp	r5, #0
 800eba6:	da03      	bge.n	800ebb0 <_printf_i+0xd0>
 800eba8:	232d      	movs	r3, #45	@ 0x2d
 800ebaa:	426d      	negs	r5, r5
 800ebac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebb0:	4858      	ldr	r0, [pc, #352]	@ (800ed14 <_printf_i+0x234>)
 800ebb2:	230a      	movs	r3, #10
 800ebb4:	e011      	b.n	800ebda <_printf_i+0xfa>
 800ebb6:	6821      	ldr	r1, [r4, #0]
 800ebb8:	6833      	ldr	r3, [r6, #0]
 800ebba:	0608      	lsls	r0, r1, #24
 800ebbc:	f853 5b04 	ldr.w	r5, [r3], #4
 800ebc0:	d402      	bmi.n	800ebc8 <_printf_i+0xe8>
 800ebc2:	0649      	lsls	r1, r1, #25
 800ebc4:	bf48      	it	mi
 800ebc6:	b2ad      	uxthmi	r5, r5
 800ebc8:	2f6f      	cmp	r7, #111	@ 0x6f
 800ebca:	4852      	ldr	r0, [pc, #328]	@ (800ed14 <_printf_i+0x234>)
 800ebcc:	6033      	str	r3, [r6, #0]
 800ebce:	bf14      	ite	ne
 800ebd0:	230a      	movne	r3, #10
 800ebd2:	2308      	moveq	r3, #8
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebda:	6866      	ldr	r6, [r4, #4]
 800ebdc:	60a6      	str	r6, [r4, #8]
 800ebde:	2e00      	cmp	r6, #0
 800ebe0:	db05      	blt.n	800ebee <_printf_i+0x10e>
 800ebe2:	6821      	ldr	r1, [r4, #0]
 800ebe4:	432e      	orrs	r6, r5
 800ebe6:	f021 0104 	bic.w	r1, r1, #4
 800ebea:	6021      	str	r1, [r4, #0]
 800ebec:	d04b      	beq.n	800ec86 <_printf_i+0x1a6>
 800ebee:	4616      	mov	r6, r2
 800ebf0:	fbb5 f1f3 	udiv	r1, r5, r3
 800ebf4:	fb03 5711 	mls	r7, r3, r1, r5
 800ebf8:	5dc7      	ldrb	r7, [r0, r7]
 800ebfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebfe:	462f      	mov	r7, r5
 800ec00:	42bb      	cmp	r3, r7
 800ec02:	460d      	mov	r5, r1
 800ec04:	d9f4      	bls.n	800ebf0 <_printf_i+0x110>
 800ec06:	2b08      	cmp	r3, #8
 800ec08:	d10b      	bne.n	800ec22 <_printf_i+0x142>
 800ec0a:	6823      	ldr	r3, [r4, #0]
 800ec0c:	07df      	lsls	r7, r3, #31
 800ec0e:	d508      	bpl.n	800ec22 <_printf_i+0x142>
 800ec10:	6923      	ldr	r3, [r4, #16]
 800ec12:	6861      	ldr	r1, [r4, #4]
 800ec14:	4299      	cmp	r1, r3
 800ec16:	bfde      	ittt	le
 800ec18:	2330      	movle	r3, #48	@ 0x30
 800ec1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec22:	1b92      	subs	r2, r2, r6
 800ec24:	6122      	str	r2, [r4, #16]
 800ec26:	f8cd a000 	str.w	sl, [sp]
 800ec2a:	464b      	mov	r3, r9
 800ec2c:	aa03      	add	r2, sp, #12
 800ec2e:	4621      	mov	r1, r4
 800ec30:	4640      	mov	r0, r8
 800ec32:	f7ff fee7 	bl	800ea04 <_printf_common>
 800ec36:	3001      	adds	r0, #1
 800ec38:	d14a      	bne.n	800ecd0 <_printf_i+0x1f0>
 800ec3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec3e:	b004      	add	sp, #16
 800ec40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	f043 0320 	orr.w	r3, r3, #32
 800ec4a:	6023      	str	r3, [r4, #0]
 800ec4c:	4832      	ldr	r0, [pc, #200]	@ (800ed18 <_printf_i+0x238>)
 800ec4e:	2778      	movs	r7, #120	@ 0x78
 800ec50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	6831      	ldr	r1, [r6, #0]
 800ec58:	061f      	lsls	r7, r3, #24
 800ec5a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec5e:	d402      	bmi.n	800ec66 <_printf_i+0x186>
 800ec60:	065f      	lsls	r7, r3, #25
 800ec62:	bf48      	it	mi
 800ec64:	b2ad      	uxthmi	r5, r5
 800ec66:	6031      	str	r1, [r6, #0]
 800ec68:	07d9      	lsls	r1, r3, #31
 800ec6a:	bf44      	itt	mi
 800ec6c:	f043 0320 	orrmi.w	r3, r3, #32
 800ec70:	6023      	strmi	r3, [r4, #0]
 800ec72:	b11d      	cbz	r5, 800ec7c <_printf_i+0x19c>
 800ec74:	2310      	movs	r3, #16
 800ec76:	e7ad      	b.n	800ebd4 <_printf_i+0xf4>
 800ec78:	4826      	ldr	r0, [pc, #152]	@ (800ed14 <_printf_i+0x234>)
 800ec7a:	e7e9      	b.n	800ec50 <_printf_i+0x170>
 800ec7c:	6823      	ldr	r3, [r4, #0]
 800ec7e:	f023 0320 	bic.w	r3, r3, #32
 800ec82:	6023      	str	r3, [r4, #0]
 800ec84:	e7f6      	b.n	800ec74 <_printf_i+0x194>
 800ec86:	4616      	mov	r6, r2
 800ec88:	e7bd      	b.n	800ec06 <_printf_i+0x126>
 800ec8a:	6833      	ldr	r3, [r6, #0]
 800ec8c:	6825      	ldr	r5, [r4, #0]
 800ec8e:	6961      	ldr	r1, [r4, #20]
 800ec90:	1d18      	adds	r0, r3, #4
 800ec92:	6030      	str	r0, [r6, #0]
 800ec94:	062e      	lsls	r6, r5, #24
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	d501      	bpl.n	800ec9e <_printf_i+0x1be>
 800ec9a:	6019      	str	r1, [r3, #0]
 800ec9c:	e002      	b.n	800eca4 <_printf_i+0x1c4>
 800ec9e:	0668      	lsls	r0, r5, #25
 800eca0:	d5fb      	bpl.n	800ec9a <_printf_i+0x1ba>
 800eca2:	8019      	strh	r1, [r3, #0]
 800eca4:	2300      	movs	r3, #0
 800eca6:	6123      	str	r3, [r4, #16]
 800eca8:	4616      	mov	r6, r2
 800ecaa:	e7bc      	b.n	800ec26 <_printf_i+0x146>
 800ecac:	6833      	ldr	r3, [r6, #0]
 800ecae:	1d1a      	adds	r2, r3, #4
 800ecb0:	6032      	str	r2, [r6, #0]
 800ecb2:	681e      	ldr	r6, [r3, #0]
 800ecb4:	6862      	ldr	r2, [r4, #4]
 800ecb6:	2100      	movs	r1, #0
 800ecb8:	4630      	mov	r0, r6
 800ecba:	f7f1 fb11 	bl	80002e0 <memchr>
 800ecbe:	b108      	cbz	r0, 800ecc4 <_printf_i+0x1e4>
 800ecc0:	1b80      	subs	r0, r0, r6
 800ecc2:	6060      	str	r0, [r4, #4]
 800ecc4:	6863      	ldr	r3, [r4, #4]
 800ecc6:	6123      	str	r3, [r4, #16]
 800ecc8:	2300      	movs	r3, #0
 800ecca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecce:	e7aa      	b.n	800ec26 <_printf_i+0x146>
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	4632      	mov	r2, r6
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	47d0      	blx	sl
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d0ad      	beq.n	800ec3a <_printf_i+0x15a>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	079b      	lsls	r3, r3, #30
 800ece2:	d413      	bmi.n	800ed0c <_printf_i+0x22c>
 800ece4:	68e0      	ldr	r0, [r4, #12]
 800ece6:	9b03      	ldr	r3, [sp, #12]
 800ece8:	4298      	cmp	r0, r3
 800ecea:	bfb8      	it	lt
 800ecec:	4618      	movlt	r0, r3
 800ecee:	e7a6      	b.n	800ec3e <_printf_i+0x15e>
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	4632      	mov	r2, r6
 800ecf4:	4649      	mov	r1, r9
 800ecf6:	4640      	mov	r0, r8
 800ecf8:	47d0      	blx	sl
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	d09d      	beq.n	800ec3a <_printf_i+0x15a>
 800ecfe:	3501      	adds	r5, #1
 800ed00:	68e3      	ldr	r3, [r4, #12]
 800ed02:	9903      	ldr	r1, [sp, #12]
 800ed04:	1a5b      	subs	r3, r3, r1
 800ed06:	42ab      	cmp	r3, r5
 800ed08:	dcf2      	bgt.n	800ecf0 <_printf_i+0x210>
 800ed0a:	e7eb      	b.n	800ece4 <_printf_i+0x204>
 800ed0c:	2500      	movs	r5, #0
 800ed0e:	f104 0619 	add.w	r6, r4, #25
 800ed12:	e7f5      	b.n	800ed00 <_printf_i+0x220>
 800ed14:	080115c6 	.word	0x080115c6
 800ed18:	080115d7 	.word	0x080115d7

0800ed1c <std>:
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	b510      	push	{r4, lr}
 800ed20:	4604      	mov	r4, r0
 800ed22:	e9c0 3300 	strd	r3, r3, [r0]
 800ed26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed2a:	6083      	str	r3, [r0, #8]
 800ed2c:	8181      	strh	r1, [r0, #12]
 800ed2e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ed30:	81c2      	strh	r2, [r0, #14]
 800ed32:	6183      	str	r3, [r0, #24]
 800ed34:	4619      	mov	r1, r3
 800ed36:	2208      	movs	r2, #8
 800ed38:	305c      	adds	r0, #92	@ 0x5c
 800ed3a:	f000 fa01 	bl	800f140 <memset>
 800ed3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed74 <std+0x58>)
 800ed40:	6263      	str	r3, [r4, #36]	@ 0x24
 800ed42:	4b0d      	ldr	r3, [pc, #52]	@ (800ed78 <std+0x5c>)
 800ed44:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ed46:	4b0d      	ldr	r3, [pc, #52]	@ (800ed7c <std+0x60>)
 800ed48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ed4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed80 <std+0x64>)
 800ed4c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ed4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ed84 <std+0x68>)
 800ed50:	6224      	str	r4, [r4, #32]
 800ed52:	429c      	cmp	r4, r3
 800ed54:	d006      	beq.n	800ed64 <std+0x48>
 800ed56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ed5a:	4294      	cmp	r4, r2
 800ed5c:	d002      	beq.n	800ed64 <std+0x48>
 800ed5e:	33d0      	adds	r3, #208	@ 0xd0
 800ed60:	429c      	cmp	r4, r3
 800ed62:	d105      	bne.n	800ed70 <std+0x54>
 800ed64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ed68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed6c:	f000 bac2 	b.w	800f2f4 <__retarget_lock_init_recursive>
 800ed70:	bd10      	pop	{r4, pc}
 800ed72:	bf00      	nop
 800ed74:	0800ef91 	.word	0x0800ef91
 800ed78:	0800efb3 	.word	0x0800efb3
 800ed7c:	0800efeb 	.word	0x0800efeb
 800ed80:	0800f00f 	.word	0x0800f00f
 800ed84:	240054c0 	.word	0x240054c0

0800ed88 <stdio_exit_handler>:
 800ed88:	4a02      	ldr	r2, [pc, #8]	@ (800ed94 <stdio_exit_handler+0xc>)
 800ed8a:	4903      	ldr	r1, [pc, #12]	@ (800ed98 <stdio_exit_handler+0x10>)
 800ed8c:	4803      	ldr	r0, [pc, #12]	@ (800ed9c <stdio_exit_handler+0x14>)
 800ed8e:	f000 b869 	b.w	800ee64 <_fwalk_sglue>
 800ed92:	bf00      	nop
 800ed94:	24000080 	.word	0x24000080
 800ed98:	08010b65 	.word	0x08010b65
 800ed9c:	24000090 	.word	0x24000090

0800eda0 <cleanup_stdio>:
 800eda0:	6841      	ldr	r1, [r0, #4]
 800eda2:	4b0c      	ldr	r3, [pc, #48]	@ (800edd4 <cleanup_stdio+0x34>)
 800eda4:	4299      	cmp	r1, r3
 800eda6:	b510      	push	{r4, lr}
 800eda8:	4604      	mov	r4, r0
 800edaa:	d001      	beq.n	800edb0 <cleanup_stdio+0x10>
 800edac:	f001 feda 	bl	8010b64 <_fflush_r>
 800edb0:	68a1      	ldr	r1, [r4, #8]
 800edb2:	4b09      	ldr	r3, [pc, #36]	@ (800edd8 <cleanup_stdio+0x38>)
 800edb4:	4299      	cmp	r1, r3
 800edb6:	d002      	beq.n	800edbe <cleanup_stdio+0x1e>
 800edb8:	4620      	mov	r0, r4
 800edba:	f001 fed3 	bl	8010b64 <_fflush_r>
 800edbe:	68e1      	ldr	r1, [r4, #12]
 800edc0:	4b06      	ldr	r3, [pc, #24]	@ (800eddc <cleanup_stdio+0x3c>)
 800edc2:	4299      	cmp	r1, r3
 800edc4:	d004      	beq.n	800edd0 <cleanup_stdio+0x30>
 800edc6:	4620      	mov	r0, r4
 800edc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edcc:	f001 beca 	b.w	8010b64 <_fflush_r>
 800edd0:	bd10      	pop	{r4, pc}
 800edd2:	bf00      	nop
 800edd4:	240054c0 	.word	0x240054c0
 800edd8:	24005528 	.word	0x24005528
 800eddc:	24005590 	.word	0x24005590

0800ede0 <global_stdio_init.part.0>:
 800ede0:	b510      	push	{r4, lr}
 800ede2:	4b0b      	ldr	r3, [pc, #44]	@ (800ee10 <global_stdio_init.part.0+0x30>)
 800ede4:	4c0b      	ldr	r4, [pc, #44]	@ (800ee14 <global_stdio_init.part.0+0x34>)
 800ede6:	4a0c      	ldr	r2, [pc, #48]	@ (800ee18 <global_stdio_init.part.0+0x38>)
 800ede8:	601a      	str	r2, [r3, #0]
 800edea:	4620      	mov	r0, r4
 800edec:	2200      	movs	r2, #0
 800edee:	2104      	movs	r1, #4
 800edf0:	f7ff ff94 	bl	800ed1c <std>
 800edf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800edf8:	2201      	movs	r2, #1
 800edfa:	2109      	movs	r1, #9
 800edfc:	f7ff ff8e 	bl	800ed1c <std>
 800ee00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ee04:	2202      	movs	r2, #2
 800ee06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee0a:	2112      	movs	r1, #18
 800ee0c:	f7ff bf86 	b.w	800ed1c <std>
 800ee10:	240055f8 	.word	0x240055f8
 800ee14:	240054c0 	.word	0x240054c0
 800ee18:	0800ed89 	.word	0x0800ed89

0800ee1c <__sfp_lock_acquire>:
 800ee1c:	4801      	ldr	r0, [pc, #4]	@ (800ee24 <__sfp_lock_acquire+0x8>)
 800ee1e:	f000 ba6a 	b.w	800f2f6 <__retarget_lock_acquire_recursive>
 800ee22:	bf00      	nop
 800ee24:	24005601 	.word	0x24005601

0800ee28 <__sfp_lock_release>:
 800ee28:	4801      	ldr	r0, [pc, #4]	@ (800ee30 <__sfp_lock_release+0x8>)
 800ee2a:	f000 ba65 	b.w	800f2f8 <__retarget_lock_release_recursive>
 800ee2e:	bf00      	nop
 800ee30:	24005601 	.word	0x24005601

0800ee34 <__sinit>:
 800ee34:	b510      	push	{r4, lr}
 800ee36:	4604      	mov	r4, r0
 800ee38:	f7ff fff0 	bl	800ee1c <__sfp_lock_acquire>
 800ee3c:	6a23      	ldr	r3, [r4, #32]
 800ee3e:	b11b      	cbz	r3, 800ee48 <__sinit+0x14>
 800ee40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee44:	f7ff bff0 	b.w	800ee28 <__sfp_lock_release>
 800ee48:	4b04      	ldr	r3, [pc, #16]	@ (800ee5c <__sinit+0x28>)
 800ee4a:	6223      	str	r3, [r4, #32]
 800ee4c:	4b04      	ldr	r3, [pc, #16]	@ (800ee60 <__sinit+0x2c>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d1f5      	bne.n	800ee40 <__sinit+0xc>
 800ee54:	f7ff ffc4 	bl	800ede0 <global_stdio_init.part.0>
 800ee58:	e7f2      	b.n	800ee40 <__sinit+0xc>
 800ee5a:	bf00      	nop
 800ee5c:	0800eda1 	.word	0x0800eda1
 800ee60:	240055f8 	.word	0x240055f8

0800ee64 <_fwalk_sglue>:
 800ee64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee68:	4607      	mov	r7, r0
 800ee6a:	4688      	mov	r8, r1
 800ee6c:	4614      	mov	r4, r2
 800ee6e:	2600      	movs	r6, #0
 800ee70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee74:	f1b9 0901 	subs.w	r9, r9, #1
 800ee78:	d505      	bpl.n	800ee86 <_fwalk_sglue+0x22>
 800ee7a:	6824      	ldr	r4, [r4, #0]
 800ee7c:	2c00      	cmp	r4, #0
 800ee7e:	d1f7      	bne.n	800ee70 <_fwalk_sglue+0xc>
 800ee80:	4630      	mov	r0, r6
 800ee82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee86:	89ab      	ldrh	r3, [r5, #12]
 800ee88:	2b01      	cmp	r3, #1
 800ee8a:	d907      	bls.n	800ee9c <_fwalk_sglue+0x38>
 800ee8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee90:	3301      	adds	r3, #1
 800ee92:	d003      	beq.n	800ee9c <_fwalk_sglue+0x38>
 800ee94:	4629      	mov	r1, r5
 800ee96:	4638      	mov	r0, r7
 800ee98:	47c0      	blx	r8
 800ee9a:	4306      	orrs	r6, r0
 800ee9c:	3568      	adds	r5, #104	@ 0x68
 800ee9e:	e7e9      	b.n	800ee74 <_fwalk_sglue+0x10>

0800eea0 <iprintf>:
 800eea0:	b40f      	push	{r0, r1, r2, r3}
 800eea2:	b507      	push	{r0, r1, r2, lr}
 800eea4:	4906      	ldr	r1, [pc, #24]	@ (800eec0 <iprintf+0x20>)
 800eea6:	ab04      	add	r3, sp, #16
 800eea8:	6808      	ldr	r0, [r1, #0]
 800eeaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeae:	6881      	ldr	r1, [r0, #8]
 800eeb0:	9301      	str	r3, [sp, #4]
 800eeb2:	f001 fcbb 	bl	801082c <_vfiprintf_r>
 800eeb6:	b003      	add	sp, #12
 800eeb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eebc:	b004      	add	sp, #16
 800eebe:	4770      	bx	lr
 800eec0:	2400008c 	.word	0x2400008c

0800eec4 <putchar>:
 800eec4:	4b02      	ldr	r3, [pc, #8]	@ (800eed0 <putchar+0xc>)
 800eec6:	4601      	mov	r1, r0
 800eec8:	6818      	ldr	r0, [r3, #0]
 800eeca:	6882      	ldr	r2, [r0, #8]
 800eecc:	f001 bed4 	b.w	8010c78 <_putc_r>
 800eed0:	2400008c 	.word	0x2400008c

0800eed4 <_puts_r>:
 800eed4:	6a03      	ldr	r3, [r0, #32]
 800eed6:	b570      	push	{r4, r5, r6, lr}
 800eed8:	6884      	ldr	r4, [r0, #8]
 800eeda:	4605      	mov	r5, r0
 800eedc:	460e      	mov	r6, r1
 800eede:	b90b      	cbnz	r3, 800eee4 <_puts_r+0x10>
 800eee0:	f7ff ffa8 	bl	800ee34 <__sinit>
 800eee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eee6:	07db      	lsls	r3, r3, #31
 800eee8:	d405      	bmi.n	800eef6 <_puts_r+0x22>
 800eeea:	89a3      	ldrh	r3, [r4, #12]
 800eeec:	0598      	lsls	r0, r3, #22
 800eeee:	d402      	bmi.n	800eef6 <_puts_r+0x22>
 800eef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eef2:	f000 fa00 	bl	800f2f6 <__retarget_lock_acquire_recursive>
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	0719      	lsls	r1, r3, #28
 800eefa:	d502      	bpl.n	800ef02 <_puts_r+0x2e>
 800eefc:	6923      	ldr	r3, [r4, #16]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d135      	bne.n	800ef6e <_puts_r+0x9a>
 800ef02:	4621      	mov	r1, r4
 800ef04:	4628      	mov	r0, r5
 800ef06:	f000 f8c5 	bl	800f094 <__swsetup_r>
 800ef0a:	b380      	cbz	r0, 800ef6e <_puts_r+0x9a>
 800ef0c:	f04f 35ff 	mov.w	r5, #4294967295
 800ef10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ef12:	07da      	lsls	r2, r3, #31
 800ef14:	d405      	bmi.n	800ef22 <_puts_r+0x4e>
 800ef16:	89a3      	ldrh	r3, [r4, #12]
 800ef18:	059b      	lsls	r3, r3, #22
 800ef1a:	d402      	bmi.n	800ef22 <_puts_r+0x4e>
 800ef1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ef1e:	f000 f9eb 	bl	800f2f8 <__retarget_lock_release_recursive>
 800ef22:	4628      	mov	r0, r5
 800ef24:	bd70      	pop	{r4, r5, r6, pc}
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	da04      	bge.n	800ef34 <_puts_r+0x60>
 800ef2a:	69a2      	ldr	r2, [r4, #24]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	dc17      	bgt.n	800ef60 <_puts_r+0x8c>
 800ef30:	290a      	cmp	r1, #10
 800ef32:	d015      	beq.n	800ef60 <_puts_r+0x8c>
 800ef34:	6823      	ldr	r3, [r4, #0]
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	6022      	str	r2, [r4, #0]
 800ef3a:	7019      	strb	r1, [r3, #0]
 800ef3c:	68a3      	ldr	r3, [r4, #8]
 800ef3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ef42:	3b01      	subs	r3, #1
 800ef44:	60a3      	str	r3, [r4, #8]
 800ef46:	2900      	cmp	r1, #0
 800ef48:	d1ed      	bne.n	800ef26 <_puts_r+0x52>
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	da11      	bge.n	800ef72 <_puts_r+0x9e>
 800ef4e:	4622      	mov	r2, r4
 800ef50:	210a      	movs	r1, #10
 800ef52:	4628      	mov	r0, r5
 800ef54:	f000 f85f 	bl	800f016 <__swbuf_r>
 800ef58:	3001      	adds	r0, #1
 800ef5a:	d0d7      	beq.n	800ef0c <_puts_r+0x38>
 800ef5c:	250a      	movs	r5, #10
 800ef5e:	e7d7      	b.n	800ef10 <_puts_r+0x3c>
 800ef60:	4622      	mov	r2, r4
 800ef62:	4628      	mov	r0, r5
 800ef64:	f000 f857 	bl	800f016 <__swbuf_r>
 800ef68:	3001      	adds	r0, #1
 800ef6a:	d1e7      	bne.n	800ef3c <_puts_r+0x68>
 800ef6c:	e7ce      	b.n	800ef0c <_puts_r+0x38>
 800ef6e:	3e01      	subs	r6, #1
 800ef70:	e7e4      	b.n	800ef3c <_puts_r+0x68>
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	1c5a      	adds	r2, r3, #1
 800ef76:	6022      	str	r2, [r4, #0]
 800ef78:	220a      	movs	r2, #10
 800ef7a:	701a      	strb	r2, [r3, #0]
 800ef7c:	e7ee      	b.n	800ef5c <_puts_r+0x88>
	...

0800ef80 <puts>:
 800ef80:	4b02      	ldr	r3, [pc, #8]	@ (800ef8c <puts+0xc>)
 800ef82:	4601      	mov	r1, r0
 800ef84:	6818      	ldr	r0, [r3, #0]
 800ef86:	f7ff bfa5 	b.w	800eed4 <_puts_r>
 800ef8a:	bf00      	nop
 800ef8c:	2400008c 	.word	0x2400008c

0800ef90 <__sread>:
 800ef90:	b510      	push	{r4, lr}
 800ef92:	460c      	mov	r4, r1
 800ef94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef98:	f000 f95e 	bl	800f258 <_read_r>
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	bfab      	itete	ge
 800efa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800efa2:	89a3      	ldrhlt	r3, [r4, #12]
 800efa4:	181b      	addge	r3, r3, r0
 800efa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800efaa:	bfac      	ite	ge
 800efac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800efae:	81a3      	strhlt	r3, [r4, #12]
 800efb0:	bd10      	pop	{r4, pc}

0800efb2 <__swrite>:
 800efb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb6:	461f      	mov	r7, r3
 800efb8:	898b      	ldrh	r3, [r1, #12]
 800efba:	05db      	lsls	r3, r3, #23
 800efbc:	4605      	mov	r5, r0
 800efbe:	460c      	mov	r4, r1
 800efc0:	4616      	mov	r6, r2
 800efc2:	d505      	bpl.n	800efd0 <__swrite+0x1e>
 800efc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc8:	2302      	movs	r3, #2
 800efca:	2200      	movs	r2, #0
 800efcc:	f000 f932 	bl	800f234 <_lseek_r>
 800efd0:	89a3      	ldrh	r3, [r4, #12]
 800efd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800efda:	81a3      	strh	r3, [r4, #12]
 800efdc:	4632      	mov	r2, r6
 800efde:	463b      	mov	r3, r7
 800efe0:	4628      	mov	r0, r5
 800efe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efe6:	f000 b949 	b.w	800f27c <_write_r>

0800efea <__sseek>:
 800efea:	b510      	push	{r4, lr}
 800efec:	460c      	mov	r4, r1
 800efee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eff2:	f000 f91f 	bl	800f234 <_lseek_r>
 800eff6:	1c43      	adds	r3, r0, #1
 800eff8:	89a3      	ldrh	r3, [r4, #12]
 800effa:	bf15      	itete	ne
 800effc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800effe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f002:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f006:	81a3      	strheq	r3, [r4, #12]
 800f008:	bf18      	it	ne
 800f00a:	81a3      	strhne	r3, [r4, #12]
 800f00c:	bd10      	pop	{r4, pc}

0800f00e <__sclose>:
 800f00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f012:	f000 b8a1 	b.w	800f158 <_close_r>

0800f016 <__swbuf_r>:
 800f016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f018:	460e      	mov	r6, r1
 800f01a:	4614      	mov	r4, r2
 800f01c:	4605      	mov	r5, r0
 800f01e:	b118      	cbz	r0, 800f028 <__swbuf_r+0x12>
 800f020:	6a03      	ldr	r3, [r0, #32]
 800f022:	b90b      	cbnz	r3, 800f028 <__swbuf_r+0x12>
 800f024:	f7ff ff06 	bl	800ee34 <__sinit>
 800f028:	69a3      	ldr	r3, [r4, #24]
 800f02a:	60a3      	str	r3, [r4, #8]
 800f02c:	89a3      	ldrh	r3, [r4, #12]
 800f02e:	071a      	lsls	r2, r3, #28
 800f030:	d501      	bpl.n	800f036 <__swbuf_r+0x20>
 800f032:	6923      	ldr	r3, [r4, #16]
 800f034:	b943      	cbnz	r3, 800f048 <__swbuf_r+0x32>
 800f036:	4621      	mov	r1, r4
 800f038:	4628      	mov	r0, r5
 800f03a:	f000 f82b 	bl	800f094 <__swsetup_r>
 800f03e:	b118      	cbz	r0, 800f048 <__swbuf_r+0x32>
 800f040:	f04f 37ff 	mov.w	r7, #4294967295
 800f044:	4638      	mov	r0, r7
 800f046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	6922      	ldr	r2, [r4, #16]
 800f04c:	1a98      	subs	r0, r3, r2
 800f04e:	6963      	ldr	r3, [r4, #20]
 800f050:	b2f6      	uxtb	r6, r6
 800f052:	4283      	cmp	r3, r0
 800f054:	4637      	mov	r7, r6
 800f056:	dc05      	bgt.n	800f064 <__swbuf_r+0x4e>
 800f058:	4621      	mov	r1, r4
 800f05a:	4628      	mov	r0, r5
 800f05c:	f001 fd82 	bl	8010b64 <_fflush_r>
 800f060:	2800      	cmp	r0, #0
 800f062:	d1ed      	bne.n	800f040 <__swbuf_r+0x2a>
 800f064:	68a3      	ldr	r3, [r4, #8]
 800f066:	3b01      	subs	r3, #1
 800f068:	60a3      	str	r3, [r4, #8]
 800f06a:	6823      	ldr	r3, [r4, #0]
 800f06c:	1c5a      	adds	r2, r3, #1
 800f06e:	6022      	str	r2, [r4, #0]
 800f070:	701e      	strb	r6, [r3, #0]
 800f072:	6962      	ldr	r2, [r4, #20]
 800f074:	1c43      	adds	r3, r0, #1
 800f076:	429a      	cmp	r2, r3
 800f078:	d004      	beq.n	800f084 <__swbuf_r+0x6e>
 800f07a:	89a3      	ldrh	r3, [r4, #12]
 800f07c:	07db      	lsls	r3, r3, #31
 800f07e:	d5e1      	bpl.n	800f044 <__swbuf_r+0x2e>
 800f080:	2e0a      	cmp	r6, #10
 800f082:	d1df      	bne.n	800f044 <__swbuf_r+0x2e>
 800f084:	4621      	mov	r1, r4
 800f086:	4628      	mov	r0, r5
 800f088:	f001 fd6c 	bl	8010b64 <_fflush_r>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	d0d9      	beq.n	800f044 <__swbuf_r+0x2e>
 800f090:	e7d6      	b.n	800f040 <__swbuf_r+0x2a>
	...

0800f094 <__swsetup_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4b29      	ldr	r3, [pc, #164]	@ (800f13c <__swsetup_r+0xa8>)
 800f098:	4605      	mov	r5, r0
 800f09a:	6818      	ldr	r0, [r3, #0]
 800f09c:	460c      	mov	r4, r1
 800f09e:	b118      	cbz	r0, 800f0a8 <__swsetup_r+0x14>
 800f0a0:	6a03      	ldr	r3, [r0, #32]
 800f0a2:	b90b      	cbnz	r3, 800f0a8 <__swsetup_r+0x14>
 800f0a4:	f7ff fec6 	bl	800ee34 <__sinit>
 800f0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0ac:	0719      	lsls	r1, r3, #28
 800f0ae:	d422      	bmi.n	800f0f6 <__swsetup_r+0x62>
 800f0b0:	06da      	lsls	r2, r3, #27
 800f0b2:	d407      	bmi.n	800f0c4 <__swsetup_r+0x30>
 800f0b4:	2209      	movs	r2, #9
 800f0b6:	602a      	str	r2, [r5, #0]
 800f0b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0bc:	81a3      	strh	r3, [r4, #12]
 800f0be:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c2:	e033      	b.n	800f12c <__swsetup_r+0x98>
 800f0c4:	0758      	lsls	r0, r3, #29
 800f0c6:	d512      	bpl.n	800f0ee <__swsetup_r+0x5a>
 800f0c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0ca:	b141      	cbz	r1, 800f0de <__swsetup_r+0x4a>
 800f0cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0d0:	4299      	cmp	r1, r3
 800f0d2:	d002      	beq.n	800f0da <__swsetup_r+0x46>
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	f000 ff05 	bl	800fee4 <_free_r>
 800f0da:	2300      	movs	r3, #0
 800f0dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0de:	89a3      	ldrh	r3, [r4, #12]
 800f0e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f0e4:	81a3      	strh	r3, [r4, #12]
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	6063      	str	r3, [r4, #4]
 800f0ea:	6923      	ldr	r3, [r4, #16]
 800f0ec:	6023      	str	r3, [r4, #0]
 800f0ee:	89a3      	ldrh	r3, [r4, #12]
 800f0f0:	f043 0308 	orr.w	r3, r3, #8
 800f0f4:	81a3      	strh	r3, [r4, #12]
 800f0f6:	6923      	ldr	r3, [r4, #16]
 800f0f8:	b94b      	cbnz	r3, 800f10e <__swsetup_r+0x7a>
 800f0fa:	89a3      	ldrh	r3, [r4, #12]
 800f0fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f104:	d003      	beq.n	800f10e <__swsetup_r+0x7a>
 800f106:	4621      	mov	r1, r4
 800f108:	4628      	mov	r0, r5
 800f10a:	f001 fd79 	bl	8010c00 <__smakebuf_r>
 800f10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f112:	f013 0201 	ands.w	r2, r3, #1
 800f116:	d00a      	beq.n	800f12e <__swsetup_r+0x9a>
 800f118:	2200      	movs	r2, #0
 800f11a:	60a2      	str	r2, [r4, #8]
 800f11c:	6962      	ldr	r2, [r4, #20]
 800f11e:	4252      	negs	r2, r2
 800f120:	61a2      	str	r2, [r4, #24]
 800f122:	6922      	ldr	r2, [r4, #16]
 800f124:	b942      	cbnz	r2, 800f138 <__swsetup_r+0xa4>
 800f126:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f12a:	d1c5      	bne.n	800f0b8 <__swsetup_r+0x24>
 800f12c:	bd38      	pop	{r3, r4, r5, pc}
 800f12e:	0799      	lsls	r1, r3, #30
 800f130:	bf58      	it	pl
 800f132:	6962      	ldrpl	r2, [r4, #20]
 800f134:	60a2      	str	r2, [r4, #8]
 800f136:	e7f4      	b.n	800f122 <__swsetup_r+0x8e>
 800f138:	2000      	movs	r0, #0
 800f13a:	e7f7      	b.n	800f12c <__swsetup_r+0x98>
 800f13c:	2400008c 	.word	0x2400008c

0800f140 <memset>:
 800f140:	4402      	add	r2, r0
 800f142:	4603      	mov	r3, r0
 800f144:	4293      	cmp	r3, r2
 800f146:	d100      	bne.n	800f14a <memset+0xa>
 800f148:	4770      	bx	lr
 800f14a:	f803 1b01 	strb.w	r1, [r3], #1
 800f14e:	e7f9      	b.n	800f144 <memset+0x4>

0800f150 <_localeconv_r>:
 800f150:	4800      	ldr	r0, [pc, #0]	@ (800f154 <_localeconv_r+0x4>)
 800f152:	4770      	bx	lr
 800f154:	240001cc 	.word	0x240001cc

0800f158 <_close_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4d06      	ldr	r5, [pc, #24]	@ (800f174 <_close_r+0x1c>)
 800f15c:	2300      	movs	r3, #0
 800f15e:	4604      	mov	r4, r0
 800f160:	4608      	mov	r0, r1
 800f162:	602b      	str	r3, [r5, #0]
 800f164:	f7f5 fe9c 	bl	8004ea0 <_close>
 800f168:	1c43      	adds	r3, r0, #1
 800f16a:	d102      	bne.n	800f172 <_close_r+0x1a>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	b103      	cbz	r3, 800f172 <_close_r+0x1a>
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	240055fc 	.word	0x240055fc

0800f178 <_reclaim_reent>:
 800f178:	4b2d      	ldr	r3, [pc, #180]	@ (800f230 <_reclaim_reent+0xb8>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4283      	cmp	r3, r0
 800f17e:	b570      	push	{r4, r5, r6, lr}
 800f180:	4604      	mov	r4, r0
 800f182:	d053      	beq.n	800f22c <_reclaim_reent+0xb4>
 800f184:	69c3      	ldr	r3, [r0, #28]
 800f186:	b31b      	cbz	r3, 800f1d0 <_reclaim_reent+0x58>
 800f188:	68db      	ldr	r3, [r3, #12]
 800f18a:	b163      	cbz	r3, 800f1a6 <_reclaim_reent+0x2e>
 800f18c:	2500      	movs	r5, #0
 800f18e:	69e3      	ldr	r3, [r4, #28]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	5959      	ldr	r1, [r3, r5]
 800f194:	b9b1      	cbnz	r1, 800f1c4 <_reclaim_reent+0x4c>
 800f196:	3504      	adds	r5, #4
 800f198:	2d80      	cmp	r5, #128	@ 0x80
 800f19a:	d1f8      	bne.n	800f18e <_reclaim_reent+0x16>
 800f19c:	69e3      	ldr	r3, [r4, #28]
 800f19e:	4620      	mov	r0, r4
 800f1a0:	68d9      	ldr	r1, [r3, #12]
 800f1a2:	f000 fe9f 	bl	800fee4 <_free_r>
 800f1a6:	69e3      	ldr	r3, [r4, #28]
 800f1a8:	6819      	ldr	r1, [r3, #0]
 800f1aa:	b111      	cbz	r1, 800f1b2 <_reclaim_reent+0x3a>
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f000 fe99 	bl	800fee4 <_free_r>
 800f1b2:	69e3      	ldr	r3, [r4, #28]
 800f1b4:	689d      	ldr	r5, [r3, #8]
 800f1b6:	b15d      	cbz	r5, 800f1d0 <_reclaim_reent+0x58>
 800f1b8:	4629      	mov	r1, r5
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	682d      	ldr	r5, [r5, #0]
 800f1be:	f000 fe91 	bl	800fee4 <_free_r>
 800f1c2:	e7f8      	b.n	800f1b6 <_reclaim_reent+0x3e>
 800f1c4:	680e      	ldr	r6, [r1, #0]
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 fe8c 	bl	800fee4 <_free_r>
 800f1cc:	4631      	mov	r1, r6
 800f1ce:	e7e1      	b.n	800f194 <_reclaim_reent+0x1c>
 800f1d0:	6961      	ldr	r1, [r4, #20]
 800f1d2:	b111      	cbz	r1, 800f1da <_reclaim_reent+0x62>
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	f000 fe85 	bl	800fee4 <_free_r>
 800f1da:	69e1      	ldr	r1, [r4, #28]
 800f1dc:	b111      	cbz	r1, 800f1e4 <_reclaim_reent+0x6c>
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f000 fe80 	bl	800fee4 <_free_r>
 800f1e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f1e6:	b111      	cbz	r1, 800f1ee <_reclaim_reent+0x76>
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f000 fe7b 	bl	800fee4 <_free_r>
 800f1ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1f0:	b111      	cbz	r1, 800f1f8 <_reclaim_reent+0x80>
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 fe76 	bl	800fee4 <_free_r>
 800f1f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f1fa:	b111      	cbz	r1, 800f202 <_reclaim_reent+0x8a>
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f000 fe71 	bl	800fee4 <_free_r>
 800f202:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f204:	b111      	cbz	r1, 800f20c <_reclaim_reent+0x94>
 800f206:	4620      	mov	r0, r4
 800f208:	f000 fe6c 	bl	800fee4 <_free_r>
 800f20c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f20e:	b111      	cbz	r1, 800f216 <_reclaim_reent+0x9e>
 800f210:	4620      	mov	r0, r4
 800f212:	f000 fe67 	bl	800fee4 <_free_r>
 800f216:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f218:	b111      	cbz	r1, 800f220 <_reclaim_reent+0xa8>
 800f21a:	4620      	mov	r0, r4
 800f21c:	f000 fe62 	bl	800fee4 <_free_r>
 800f220:	6a23      	ldr	r3, [r4, #32]
 800f222:	b11b      	cbz	r3, 800f22c <_reclaim_reent+0xb4>
 800f224:	4620      	mov	r0, r4
 800f226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f22a:	4718      	bx	r3
 800f22c:	bd70      	pop	{r4, r5, r6, pc}
 800f22e:	bf00      	nop
 800f230:	2400008c 	.word	0x2400008c

0800f234 <_lseek_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4d07      	ldr	r5, [pc, #28]	@ (800f254 <_lseek_r+0x20>)
 800f238:	4604      	mov	r4, r0
 800f23a:	4608      	mov	r0, r1
 800f23c:	4611      	mov	r1, r2
 800f23e:	2200      	movs	r2, #0
 800f240:	602a      	str	r2, [r5, #0]
 800f242:	461a      	mov	r2, r3
 800f244:	f7f5 fe53 	bl	8004eee <_lseek>
 800f248:	1c43      	adds	r3, r0, #1
 800f24a:	d102      	bne.n	800f252 <_lseek_r+0x1e>
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	b103      	cbz	r3, 800f252 <_lseek_r+0x1e>
 800f250:	6023      	str	r3, [r4, #0]
 800f252:	bd38      	pop	{r3, r4, r5, pc}
 800f254:	240055fc 	.word	0x240055fc

0800f258 <_read_r>:
 800f258:	b538      	push	{r3, r4, r5, lr}
 800f25a:	4d07      	ldr	r5, [pc, #28]	@ (800f278 <_read_r+0x20>)
 800f25c:	4604      	mov	r4, r0
 800f25e:	4608      	mov	r0, r1
 800f260:	4611      	mov	r1, r2
 800f262:	2200      	movs	r2, #0
 800f264:	602a      	str	r2, [r5, #0]
 800f266:	461a      	mov	r2, r3
 800f268:	f7f5 fdfd 	bl	8004e66 <_read>
 800f26c:	1c43      	adds	r3, r0, #1
 800f26e:	d102      	bne.n	800f276 <_read_r+0x1e>
 800f270:	682b      	ldr	r3, [r5, #0]
 800f272:	b103      	cbz	r3, 800f276 <_read_r+0x1e>
 800f274:	6023      	str	r3, [r4, #0]
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	240055fc 	.word	0x240055fc

0800f27c <_write_r>:
 800f27c:	b538      	push	{r3, r4, r5, lr}
 800f27e:	4d07      	ldr	r5, [pc, #28]	@ (800f29c <_write_r+0x20>)
 800f280:	4604      	mov	r4, r0
 800f282:	4608      	mov	r0, r1
 800f284:	4611      	mov	r1, r2
 800f286:	2200      	movs	r2, #0
 800f288:	602a      	str	r2, [r5, #0]
 800f28a:	461a      	mov	r2, r3
 800f28c:	f7f1 fce0 	bl	8000c50 <_write>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d102      	bne.n	800f29a <_write_r+0x1e>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b103      	cbz	r3, 800f29a <_write_r+0x1e>
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	240055fc 	.word	0x240055fc

0800f2a0 <__errno>:
 800f2a0:	4b01      	ldr	r3, [pc, #4]	@ (800f2a8 <__errno+0x8>)
 800f2a2:	6818      	ldr	r0, [r3, #0]
 800f2a4:	4770      	bx	lr
 800f2a6:	bf00      	nop
 800f2a8:	2400008c 	.word	0x2400008c

0800f2ac <__libc_init_array>:
 800f2ac:	b570      	push	{r4, r5, r6, lr}
 800f2ae:	4d0d      	ldr	r5, [pc, #52]	@ (800f2e4 <__libc_init_array+0x38>)
 800f2b0:	4c0d      	ldr	r4, [pc, #52]	@ (800f2e8 <__libc_init_array+0x3c>)
 800f2b2:	1b64      	subs	r4, r4, r5
 800f2b4:	10a4      	asrs	r4, r4, #2
 800f2b6:	2600      	movs	r6, #0
 800f2b8:	42a6      	cmp	r6, r4
 800f2ba:	d109      	bne.n	800f2d0 <__libc_init_array+0x24>
 800f2bc:	4d0b      	ldr	r5, [pc, #44]	@ (800f2ec <__libc_init_array+0x40>)
 800f2be:	4c0c      	ldr	r4, [pc, #48]	@ (800f2f0 <__libc_init_array+0x44>)
 800f2c0:	f002 f834 	bl	801132c <_init>
 800f2c4:	1b64      	subs	r4, r4, r5
 800f2c6:	10a4      	asrs	r4, r4, #2
 800f2c8:	2600      	movs	r6, #0
 800f2ca:	42a6      	cmp	r6, r4
 800f2cc:	d105      	bne.n	800f2da <__libc_init_array+0x2e>
 800f2ce:	bd70      	pop	{r4, r5, r6, pc}
 800f2d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2d4:	4798      	blx	r3
 800f2d6:	3601      	adds	r6, #1
 800f2d8:	e7ee      	b.n	800f2b8 <__libc_init_array+0xc>
 800f2da:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2de:	4798      	blx	r3
 800f2e0:	3601      	adds	r6, #1
 800f2e2:	e7f2      	b.n	800f2ca <__libc_init_array+0x1e>
 800f2e4:	08011a78 	.word	0x08011a78
 800f2e8:	08011a78 	.word	0x08011a78
 800f2ec:	08011a78 	.word	0x08011a78
 800f2f0:	08011a7c 	.word	0x08011a7c

0800f2f4 <__retarget_lock_init_recursive>:
 800f2f4:	4770      	bx	lr

0800f2f6 <__retarget_lock_acquire_recursive>:
 800f2f6:	4770      	bx	lr

0800f2f8 <__retarget_lock_release_recursive>:
 800f2f8:	4770      	bx	lr

0800f2fa <memcpy>:
 800f2fa:	440a      	add	r2, r1
 800f2fc:	4291      	cmp	r1, r2
 800f2fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800f302:	d100      	bne.n	800f306 <memcpy+0xc>
 800f304:	4770      	bx	lr
 800f306:	b510      	push	{r4, lr}
 800f308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f30c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f310:	4291      	cmp	r1, r2
 800f312:	d1f9      	bne.n	800f308 <memcpy+0xe>
 800f314:	bd10      	pop	{r4, pc}

0800f316 <quorem>:
 800f316:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31a:	6903      	ldr	r3, [r0, #16]
 800f31c:	690c      	ldr	r4, [r1, #16]
 800f31e:	42a3      	cmp	r3, r4
 800f320:	4607      	mov	r7, r0
 800f322:	db7e      	blt.n	800f422 <quorem+0x10c>
 800f324:	3c01      	subs	r4, #1
 800f326:	f101 0814 	add.w	r8, r1, #20
 800f32a:	00a3      	lsls	r3, r4, #2
 800f32c:	f100 0514 	add.w	r5, r0, #20
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f336:	9301      	str	r3, [sp, #4]
 800f338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f33c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f340:	3301      	adds	r3, #1
 800f342:	429a      	cmp	r2, r3
 800f344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f348:	fbb2 f6f3 	udiv	r6, r2, r3
 800f34c:	d32e      	bcc.n	800f3ac <quorem+0x96>
 800f34e:	f04f 0a00 	mov.w	sl, #0
 800f352:	46c4      	mov	ip, r8
 800f354:	46ae      	mov	lr, r5
 800f356:	46d3      	mov	fp, sl
 800f358:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f35c:	b298      	uxth	r0, r3
 800f35e:	fb06 a000 	mla	r0, r6, r0, sl
 800f362:	0c02      	lsrs	r2, r0, #16
 800f364:	0c1b      	lsrs	r3, r3, #16
 800f366:	fb06 2303 	mla	r3, r6, r3, r2
 800f36a:	f8de 2000 	ldr.w	r2, [lr]
 800f36e:	b280      	uxth	r0, r0
 800f370:	b292      	uxth	r2, r2
 800f372:	1a12      	subs	r2, r2, r0
 800f374:	445a      	add	r2, fp
 800f376:	f8de 0000 	ldr.w	r0, [lr]
 800f37a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f37e:	b29b      	uxth	r3, r3
 800f380:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f384:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f388:	b292      	uxth	r2, r2
 800f38a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f38e:	45e1      	cmp	r9, ip
 800f390:	f84e 2b04 	str.w	r2, [lr], #4
 800f394:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f398:	d2de      	bcs.n	800f358 <quorem+0x42>
 800f39a:	9b00      	ldr	r3, [sp, #0]
 800f39c:	58eb      	ldr	r3, [r5, r3]
 800f39e:	b92b      	cbnz	r3, 800f3ac <quorem+0x96>
 800f3a0:	9b01      	ldr	r3, [sp, #4]
 800f3a2:	3b04      	subs	r3, #4
 800f3a4:	429d      	cmp	r5, r3
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	d32f      	bcc.n	800f40a <quorem+0xf4>
 800f3aa:	613c      	str	r4, [r7, #16]
 800f3ac:	4638      	mov	r0, r7
 800f3ae:	f001 f90b 	bl	80105c8 <__mcmp>
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	db25      	blt.n	800f402 <quorem+0xec>
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3be:	f8d1 c000 	ldr.w	ip, [r1]
 800f3c2:	fa1f fe82 	uxth.w	lr, r2
 800f3c6:	fa1f f38c 	uxth.w	r3, ip
 800f3ca:	eba3 030e 	sub.w	r3, r3, lr
 800f3ce:	4403      	add	r3, r0
 800f3d0:	0c12      	lsrs	r2, r2, #16
 800f3d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f3d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3e0:	45c1      	cmp	r9, r8
 800f3e2:	f841 3b04 	str.w	r3, [r1], #4
 800f3e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f3ea:	d2e6      	bcs.n	800f3ba <quorem+0xa4>
 800f3ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3f4:	b922      	cbnz	r2, 800f400 <quorem+0xea>
 800f3f6:	3b04      	subs	r3, #4
 800f3f8:	429d      	cmp	r5, r3
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	d30b      	bcc.n	800f416 <quorem+0x100>
 800f3fe:	613c      	str	r4, [r7, #16]
 800f400:	3601      	adds	r6, #1
 800f402:	4630      	mov	r0, r6
 800f404:	b003      	add	sp, #12
 800f406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f40a:	6812      	ldr	r2, [r2, #0]
 800f40c:	3b04      	subs	r3, #4
 800f40e:	2a00      	cmp	r2, #0
 800f410:	d1cb      	bne.n	800f3aa <quorem+0x94>
 800f412:	3c01      	subs	r4, #1
 800f414:	e7c6      	b.n	800f3a4 <quorem+0x8e>
 800f416:	6812      	ldr	r2, [r2, #0]
 800f418:	3b04      	subs	r3, #4
 800f41a:	2a00      	cmp	r2, #0
 800f41c:	d1ef      	bne.n	800f3fe <quorem+0xe8>
 800f41e:	3c01      	subs	r4, #1
 800f420:	e7ea      	b.n	800f3f8 <quorem+0xe2>
 800f422:	2000      	movs	r0, #0
 800f424:	e7ee      	b.n	800f404 <quorem+0xee>
	...

0800f428 <_dtoa_r>:
 800f428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	ed2d 8b02 	vpush	{d8}
 800f430:	69c7      	ldr	r7, [r0, #28]
 800f432:	b091      	sub	sp, #68	@ 0x44
 800f434:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f438:	ec55 4b10 	vmov	r4, r5, d0
 800f43c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f43e:	9107      	str	r1, [sp, #28]
 800f440:	4681      	mov	r9, r0
 800f442:	9209      	str	r2, [sp, #36]	@ 0x24
 800f444:	930d      	str	r3, [sp, #52]	@ 0x34
 800f446:	b97f      	cbnz	r7, 800f468 <_dtoa_r+0x40>
 800f448:	2010      	movs	r0, #16
 800f44a:	f000 fd95 	bl	800ff78 <malloc>
 800f44e:	4602      	mov	r2, r0
 800f450:	f8c9 001c 	str.w	r0, [r9, #28]
 800f454:	b920      	cbnz	r0, 800f460 <_dtoa_r+0x38>
 800f456:	4ba0      	ldr	r3, [pc, #640]	@ (800f6d8 <_dtoa_r+0x2b0>)
 800f458:	21ef      	movs	r1, #239	@ 0xef
 800f45a:	48a0      	ldr	r0, [pc, #640]	@ (800f6dc <_dtoa_r+0x2b4>)
 800f45c:	f001 fc72 	bl	8010d44 <__assert_func>
 800f460:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f464:	6007      	str	r7, [r0, #0]
 800f466:	60c7      	str	r7, [r0, #12]
 800f468:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f46c:	6819      	ldr	r1, [r3, #0]
 800f46e:	b159      	cbz	r1, 800f488 <_dtoa_r+0x60>
 800f470:	685a      	ldr	r2, [r3, #4]
 800f472:	604a      	str	r2, [r1, #4]
 800f474:	2301      	movs	r3, #1
 800f476:	4093      	lsls	r3, r2
 800f478:	608b      	str	r3, [r1, #8]
 800f47a:	4648      	mov	r0, r9
 800f47c:	f000 fe72 	bl	8010164 <_Bfree>
 800f480:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f484:	2200      	movs	r2, #0
 800f486:	601a      	str	r2, [r3, #0]
 800f488:	1e2b      	subs	r3, r5, #0
 800f48a:	bfbb      	ittet	lt
 800f48c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f490:	9303      	strlt	r3, [sp, #12]
 800f492:	2300      	movge	r3, #0
 800f494:	2201      	movlt	r2, #1
 800f496:	bfac      	ite	ge
 800f498:	6033      	strge	r3, [r6, #0]
 800f49a:	6032      	strlt	r2, [r6, #0]
 800f49c:	4b90      	ldr	r3, [pc, #576]	@ (800f6e0 <_dtoa_r+0x2b8>)
 800f49e:	9e03      	ldr	r6, [sp, #12]
 800f4a0:	43b3      	bics	r3, r6
 800f4a2:	d110      	bne.n	800f4c6 <_dtoa_r+0x9e>
 800f4a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4a6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f4aa:	6013      	str	r3, [r2, #0]
 800f4ac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f4b0:	4323      	orrs	r3, r4
 800f4b2:	f000 84e6 	beq.w	800fe82 <_dtoa_r+0xa5a>
 800f4b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f4b8:	4f8a      	ldr	r7, [pc, #552]	@ (800f6e4 <_dtoa_r+0x2bc>)
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	f000 84e8 	beq.w	800fe90 <_dtoa_r+0xa68>
 800f4c0:	1cfb      	adds	r3, r7, #3
 800f4c2:	f000 bce3 	b.w	800fe8c <_dtoa_r+0xa64>
 800f4c6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f4ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d2:	d10a      	bne.n	800f4ea <_dtoa_r+0xc2>
 800f4d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	6013      	str	r3, [r2, #0]
 800f4da:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f4dc:	b113      	cbz	r3, 800f4e4 <_dtoa_r+0xbc>
 800f4de:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f4e0:	4b81      	ldr	r3, [pc, #516]	@ (800f6e8 <_dtoa_r+0x2c0>)
 800f4e2:	6013      	str	r3, [r2, #0]
 800f4e4:	4f81      	ldr	r7, [pc, #516]	@ (800f6ec <_dtoa_r+0x2c4>)
 800f4e6:	f000 bcd3 	b.w	800fe90 <_dtoa_r+0xa68>
 800f4ea:	aa0e      	add	r2, sp, #56	@ 0x38
 800f4ec:	a90f      	add	r1, sp, #60	@ 0x3c
 800f4ee:	4648      	mov	r0, r9
 800f4f0:	eeb0 0b48 	vmov.f64	d0, d8
 800f4f4:	f001 f918 	bl	8010728 <__d2b>
 800f4f8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f4fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4fe:	9001      	str	r0, [sp, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d045      	beq.n	800f590 <_dtoa_r+0x168>
 800f504:	eeb0 7b48 	vmov.f64	d7, d8
 800f508:	ee18 1a90 	vmov	r1, s17
 800f50c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f510:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f514:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f518:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f51c:	2500      	movs	r5, #0
 800f51e:	ee07 1a90 	vmov	s15, r1
 800f522:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f526:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f6c0 <_dtoa_r+0x298>
 800f52a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f52e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f6c8 <_dtoa_r+0x2a0>
 800f532:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f536:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f6d0 <_dtoa_r+0x2a8>
 800f53a:	ee07 3a90 	vmov	s15, r3
 800f53e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f542:	eeb0 7b46 	vmov.f64	d7, d6
 800f546:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f54a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f54e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f556:	ee16 8a90 	vmov	r8, s13
 800f55a:	d508      	bpl.n	800f56e <_dtoa_r+0x146>
 800f55c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f560:	eeb4 6b47 	vcmp.f64	d6, d7
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	bf18      	it	ne
 800f56a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f56e:	f1b8 0f16 	cmp.w	r8, #22
 800f572:	d82b      	bhi.n	800f5cc <_dtoa_r+0x1a4>
 800f574:	495e      	ldr	r1, [pc, #376]	@ (800f6f0 <_dtoa_r+0x2c8>)
 800f576:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f57a:	ed91 7b00 	vldr	d7, [r1]
 800f57e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f586:	d501      	bpl.n	800f58c <_dtoa_r+0x164>
 800f588:	f108 38ff 	add.w	r8, r8, #4294967295
 800f58c:	2100      	movs	r1, #0
 800f58e:	e01e      	b.n	800f5ce <_dtoa_r+0x1a6>
 800f590:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f592:	4413      	add	r3, r2
 800f594:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f598:	2920      	cmp	r1, #32
 800f59a:	bfc1      	itttt	gt
 800f59c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f5a0:	408e      	lslgt	r6, r1
 800f5a2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f5a6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f5aa:	bfd6      	itet	le
 800f5ac:	f1c1 0120 	rsble	r1, r1, #32
 800f5b0:	4331      	orrgt	r1, r6
 800f5b2:	fa04 f101 	lslle.w	r1, r4, r1
 800f5b6:	ee07 1a90 	vmov	s15, r1
 800f5ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	ee17 1a90 	vmov	r1, s15
 800f5c4:	2501      	movs	r5, #1
 800f5c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f5ca:	e7a8      	b.n	800f51e <_dtoa_r+0xf6>
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	1ad2      	subs	r2, r2, r3
 800f5d0:	1e53      	subs	r3, r2, #1
 800f5d2:	9306      	str	r3, [sp, #24]
 800f5d4:	bf45      	ittet	mi
 800f5d6:	f1c2 0301 	rsbmi	r3, r2, #1
 800f5da:	9304      	strmi	r3, [sp, #16]
 800f5dc:	2300      	movpl	r3, #0
 800f5de:	2300      	movmi	r3, #0
 800f5e0:	bf4c      	ite	mi
 800f5e2:	9306      	strmi	r3, [sp, #24]
 800f5e4:	9304      	strpl	r3, [sp, #16]
 800f5e6:	f1b8 0f00 	cmp.w	r8, #0
 800f5ea:	910c      	str	r1, [sp, #48]	@ 0x30
 800f5ec:	db18      	blt.n	800f620 <_dtoa_r+0x1f8>
 800f5ee:	9b06      	ldr	r3, [sp, #24]
 800f5f0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f5f4:	4443      	add	r3, r8
 800f5f6:	9306      	str	r3, [sp, #24]
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	9a07      	ldr	r2, [sp, #28]
 800f5fc:	2a09      	cmp	r2, #9
 800f5fe:	d845      	bhi.n	800f68c <_dtoa_r+0x264>
 800f600:	2a05      	cmp	r2, #5
 800f602:	bfc4      	itt	gt
 800f604:	3a04      	subgt	r2, #4
 800f606:	9207      	strgt	r2, [sp, #28]
 800f608:	9a07      	ldr	r2, [sp, #28]
 800f60a:	f1a2 0202 	sub.w	r2, r2, #2
 800f60e:	bfcc      	ite	gt
 800f610:	2400      	movgt	r4, #0
 800f612:	2401      	movle	r4, #1
 800f614:	2a03      	cmp	r2, #3
 800f616:	d844      	bhi.n	800f6a2 <_dtoa_r+0x27a>
 800f618:	e8df f002 	tbb	[pc, r2]
 800f61c:	0b173634 	.word	0x0b173634
 800f620:	9b04      	ldr	r3, [sp, #16]
 800f622:	2200      	movs	r2, #0
 800f624:	eba3 0308 	sub.w	r3, r3, r8
 800f628:	9304      	str	r3, [sp, #16]
 800f62a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f62c:	f1c8 0300 	rsb	r3, r8, #0
 800f630:	e7e3      	b.n	800f5fa <_dtoa_r+0x1d2>
 800f632:	2201      	movs	r2, #1
 800f634:	9208      	str	r2, [sp, #32]
 800f636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f638:	eb08 0b02 	add.w	fp, r8, r2
 800f63c:	f10b 0a01 	add.w	sl, fp, #1
 800f640:	4652      	mov	r2, sl
 800f642:	2a01      	cmp	r2, #1
 800f644:	bfb8      	it	lt
 800f646:	2201      	movlt	r2, #1
 800f648:	e006      	b.n	800f658 <_dtoa_r+0x230>
 800f64a:	2201      	movs	r2, #1
 800f64c:	9208      	str	r2, [sp, #32]
 800f64e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f650:	2a00      	cmp	r2, #0
 800f652:	dd29      	ble.n	800f6a8 <_dtoa_r+0x280>
 800f654:	4693      	mov	fp, r2
 800f656:	4692      	mov	sl, r2
 800f658:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f65c:	2100      	movs	r1, #0
 800f65e:	2004      	movs	r0, #4
 800f660:	f100 0614 	add.w	r6, r0, #20
 800f664:	4296      	cmp	r6, r2
 800f666:	d926      	bls.n	800f6b6 <_dtoa_r+0x28e>
 800f668:	6079      	str	r1, [r7, #4]
 800f66a:	4648      	mov	r0, r9
 800f66c:	9305      	str	r3, [sp, #20]
 800f66e:	f000 fd39 	bl	80100e4 <_Balloc>
 800f672:	9b05      	ldr	r3, [sp, #20]
 800f674:	4607      	mov	r7, r0
 800f676:	2800      	cmp	r0, #0
 800f678:	d13e      	bne.n	800f6f8 <_dtoa_r+0x2d0>
 800f67a:	4b1e      	ldr	r3, [pc, #120]	@ (800f6f4 <_dtoa_r+0x2cc>)
 800f67c:	4602      	mov	r2, r0
 800f67e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f682:	e6ea      	b.n	800f45a <_dtoa_r+0x32>
 800f684:	2200      	movs	r2, #0
 800f686:	e7e1      	b.n	800f64c <_dtoa_r+0x224>
 800f688:	2200      	movs	r2, #0
 800f68a:	e7d3      	b.n	800f634 <_dtoa_r+0x20c>
 800f68c:	2401      	movs	r4, #1
 800f68e:	2200      	movs	r2, #0
 800f690:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f694:	f04f 3bff 	mov.w	fp, #4294967295
 800f698:	2100      	movs	r1, #0
 800f69a:	46da      	mov	sl, fp
 800f69c:	2212      	movs	r2, #18
 800f69e:	9109      	str	r1, [sp, #36]	@ 0x24
 800f6a0:	e7da      	b.n	800f658 <_dtoa_r+0x230>
 800f6a2:	2201      	movs	r2, #1
 800f6a4:	9208      	str	r2, [sp, #32]
 800f6a6:	e7f5      	b.n	800f694 <_dtoa_r+0x26c>
 800f6a8:	f04f 0b01 	mov.w	fp, #1
 800f6ac:	46da      	mov	sl, fp
 800f6ae:	465a      	mov	r2, fp
 800f6b0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f6b4:	e7d0      	b.n	800f658 <_dtoa_r+0x230>
 800f6b6:	3101      	adds	r1, #1
 800f6b8:	0040      	lsls	r0, r0, #1
 800f6ba:	e7d1      	b.n	800f660 <_dtoa_r+0x238>
 800f6bc:	f3af 8000 	nop.w
 800f6c0:	636f4361 	.word	0x636f4361
 800f6c4:	3fd287a7 	.word	0x3fd287a7
 800f6c8:	8b60c8b3 	.word	0x8b60c8b3
 800f6cc:	3fc68a28 	.word	0x3fc68a28
 800f6d0:	509f79fb 	.word	0x509f79fb
 800f6d4:	3fd34413 	.word	0x3fd34413
 800f6d8:	080115f5 	.word	0x080115f5
 800f6dc:	0801160c 	.word	0x0801160c
 800f6e0:	7ff00000 	.word	0x7ff00000
 800f6e4:	080115f1 	.word	0x080115f1
 800f6e8:	080115c5 	.word	0x080115c5
 800f6ec:	080115c4 	.word	0x080115c4
 800f6f0:	08011760 	.word	0x08011760
 800f6f4:	08011664 	.word	0x08011664
 800f6f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f6fc:	f1ba 0f0e 	cmp.w	sl, #14
 800f700:	6010      	str	r0, [r2, #0]
 800f702:	d86e      	bhi.n	800f7e2 <_dtoa_r+0x3ba>
 800f704:	2c00      	cmp	r4, #0
 800f706:	d06c      	beq.n	800f7e2 <_dtoa_r+0x3ba>
 800f708:	f1b8 0f00 	cmp.w	r8, #0
 800f70c:	f340 80b4 	ble.w	800f878 <_dtoa_r+0x450>
 800f710:	4ac8      	ldr	r2, [pc, #800]	@ (800fa34 <_dtoa_r+0x60c>)
 800f712:	f008 010f 	and.w	r1, r8, #15
 800f716:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f71a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f71e:	ed92 7b00 	vldr	d7, [r2]
 800f722:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f726:	f000 809b 	beq.w	800f860 <_dtoa_r+0x438>
 800f72a:	4ac3      	ldr	r2, [pc, #780]	@ (800fa38 <_dtoa_r+0x610>)
 800f72c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f730:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f734:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f738:	f001 010f 	and.w	r1, r1, #15
 800f73c:	2203      	movs	r2, #3
 800f73e:	48be      	ldr	r0, [pc, #760]	@ (800fa38 <_dtoa_r+0x610>)
 800f740:	2900      	cmp	r1, #0
 800f742:	f040 808f 	bne.w	800f864 <_dtoa_r+0x43c>
 800f746:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f74a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f74e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f752:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f754:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f758:	2900      	cmp	r1, #0
 800f75a:	f000 80b3 	beq.w	800f8c4 <_dtoa_r+0x49c>
 800f75e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f762:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76a:	f140 80ab 	bpl.w	800f8c4 <_dtoa_r+0x49c>
 800f76e:	f1ba 0f00 	cmp.w	sl, #0
 800f772:	f000 80a7 	beq.w	800f8c4 <_dtoa_r+0x49c>
 800f776:	f1bb 0f00 	cmp.w	fp, #0
 800f77a:	dd30      	ble.n	800f7de <_dtoa_r+0x3b6>
 800f77c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f780:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f784:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f788:	f108 31ff 	add.w	r1, r8, #4294967295
 800f78c:	9105      	str	r1, [sp, #20]
 800f78e:	3201      	adds	r2, #1
 800f790:	465c      	mov	r4, fp
 800f792:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f796:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f79a:	ee07 2a90 	vmov	s15, r2
 800f79e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f7a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f7a6:	ee15 2a90 	vmov	r2, s11
 800f7aa:	ec51 0b15 	vmov	r0, r1, d5
 800f7ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f7b2:	2c00      	cmp	r4, #0
 800f7b4:	f040 808a 	bne.w	800f8cc <_dtoa_r+0x4a4>
 800f7b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f7bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f7c0:	ec41 0b17 	vmov	d7, r0, r1
 800f7c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7cc:	f300 826a 	bgt.w	800fca4 <_dtoa_r+0x87c>
 800f7d0:	eeb1 7b47 	vneg.f64	d7, d7
 800f7d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7dc:	d423      	bmi.n	800f826 <_dtoa_r+0x3fe>
 800f7de:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f7e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f7e4:	2a00      	cmp	r2, #0
 800f7e6:	f2c0 8129 	blt.w	800fa3c <_dtoa_r+0x614>
 800f7ea:	f1b8 0f0e 	cmp.w	r8, #14
 800f7ee:	f300 8125 	bgt.w	800fa3c <_dtoa_r+0x614>
 800f7f2:	4b90      	ldr	r3, [pc, #576]	@ (800fa34 <_dtoa_r+0x60c>)
 800f7f4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f7f8:	ed93 6b00 	vldr	d6, [r3]
 800f7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f280 80c8 	bge.w	800f994 <_dtoa_r+0x56c>
 800f804:	f1ba 0f00 	cmp.w	sl, #0
 800f808:	f300 80c4 	bgt.w	800f994 <_dtoa_r+0x56c>
 800f80c:	d10b      	bne.n	800f826 <_dtoa_r+0x3fe>
 800f80e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f812:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f816:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f81a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f822:	f2c0 823c 	blt.w	800fc9e <_dtoa_r+0x876>
 800f826:	2400      	movs	r4, #0
 800f828:	4625      	mov	r5, r4
 800f82a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f82c:	43db      	mvns	r3, r3
 800f82e:	9305      	str	r3, [sp, #20]
 800f830:	463e      	mov	r6, r7
 800f832:	f04f 0800 	mov.w	r8, #0
 800f836:	4621      	mov	r1, r4
 800f838:	4648      	mov	r0, r9
 800f83a:	f000 fc93 	bl	8010164 <_Bfree>
 800f83e:	2d00      	cmp	r5, #0
 800f840:	f000 80a2 	beq.w	800f988 <_dtoa_r+0x560>
 800f844:	f1b8 0f00 	cmp.w	r8, #0
 800f848:	d005      	beq.n	800f856 <_dtoa_r+0x42e>
 800f84a:	45a8      	cmp	r8, r5
 800f84c:	d003      	beq.n	800f856 <_dtoa_r+0x42e>
 800f84e:	4641      	mov	r1, r8
 800f850:	4648      	mov	r0, r9
 800f852:	f000 fc87 	bl	8010164 <_Bfree>
 800f856:	4629      	mov	r1, r5
 800f858:	4648      	mov	r0, r9
 800f85a:	f000 fc83 	bl	8010164 <_Bfree>
 800f85e:	e093      	b.n	800f988 <_dtoa_r+0x560>
 800f860:	2202      	movs	r2, #2
 800f862:	e76c      	b.n	800f73e <_dtoa_r+0x316>
 800f864:	07cc      	lsls	r4, r1, #31
 800f866:	d504      	bpl.n	800f872 <_dtoa_r+0x44a>
 800f868:	ed90 6b00 	vldr	d6, [r0]
 800f86c:	3201      	adds	r2, #1
 800f86e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f872:	1049      	asrs	r1, r1, #1
 800f874:	3008      	adds	r0, #8
 800f876:	e763      	b.n	800f740 <_dtoa_r+0x318>
 800f878:	d022      	beq.n	800f8c0 <_dtoa_r+0x498>
 800f87a:	f1c8 0100 	rsb	r1, r8, #0
 800f87e:	4a6d      	ldr	r2, [pc, #436]	@ (800fa34 <_dtoa_r+0x60c>)
 800f880:	f001 000f 	and.w	r0, r1, #15
 800f884:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f888:	ed92 7b00 	vldr	d7, [r2]
 800f88c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f890:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f894:	4868      	ldr	r0, [pc, #416]	@ (800fa38 <_dtoa_r+0x610>)
 800f896:	1109      	asrs	r1, r1, #4
 800f898:	2400      	movs	r4, #0
 800f89a:	2202      	movs	r2, #2
 800f89c:	b929      	cbnz	r1, 800f8aa <_dtoa_r+0x482>
 800f89e:	2c00      	cmp	r4, #0
 800f8a0:	f43f af57 	beq.w	800f752 <_dtoa_r+0x32a>
 800f8a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8a8:	e753      	b.n	800f752 <_dtoa_r+0x32a>
 800f8aa:	07ce      	lsls	r6, r1, #31
 800f8ac:	d505      	bpl.n	800f8ba <_dtoa_r+0x492>
 800f8ae:	ed90 6b00 	vldr	d6, [r0]
 800f8b2:	3201      	adds	r2, #1
 800f8b4:	2401      	movs	r4, #1
 800f8b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f8ba:	1049      	asrs	r1, r1, #1
 800f8bc:	3008      	adds	r0, #8
 800f8be:	e7ed      	b.n	800f89c <_dtoa_r+0x474>
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	e746      	b.n	800f752 <_dtoa_r+0x32a>
 800f8c4:	f8cd 8014 	str.w	r8, [sp, #20]
 800f8c8:	4654      	mov	r4, sl
 800f8ca:	e762      	b.n	800f792 <_dtoa_r+0x36a>
 800f8cc:	4a59      	ldr	r2, [pc, #356]	@ (800fa34 <_dtoa_r+0x60c>)
 800f8ce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f8d2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f8d6:	9a08      	ldr	r2, [sp, #32]
 800f8d8:	ec41 0b17 	vmov	d7, r0, r1
 800f8dc:	443c      	add	r4, r7
 800f8de:	b34a      	cbz	r2, 800f934 <_dtoa_r+0x50c>
 800f8e0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f8e4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f8e8:	463e      	mov	r6, r7
 800f8ea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f8ee:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f8f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f8f6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f8fa:	ee14 2a90 	vmov	r2, s9
 800f8fe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f902:	3230      	adds	r2, #48	@ 0x30
 800f904:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f908:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f910:	f806 2b01 	strb.w	r2, [r6], #1
 800f914:	d438      	bmi.n	800f988 <_dtoa_r+0x560>
 800f916:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f91a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	d46e      	bmi.n	800fa02 <_dtoa_r+0x5da>
 800f924:	42a6      	cmp	r6, r4
 800f926:	f43f af5a 	beq.w	800f7de <_dtoa_r+0x3b6>
 800f92a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f92e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f932:	e7e0      	b.n	800f8f6 <_dtoa_r+0x4ce>
 800f934:	4621      	mov	r1, r4
 800f936:	463e      	mov	r6, r7
 800f938:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f93c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f940:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f944:	ee14 2a90 	vmov	r2, s9
 800f948:	3230      	adds	r2, #48	@ 0x30
 800f94a:	f806 2b01 	strb.w	r2, [r6], #1
 800f94e:	42a6      	cmp	r6, r4
 800f950:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f954:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f958:	d119      	bne.n	800f98e <_dtoa_r+0x566>
 800f95a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f95e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f962:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f96a:	dc4a      	bgt.n	800fa02 <_dtoa_r+0x5da>
 800f96c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f970:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f978:	f57f af31 	bpl.w	800f7de <_dtoa_r+0x3b6>
 800f97c:	460e      	mov	r6, r1
 800f97e:	3901      	subs	r1, #1
 800f980:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f984:	2b30      	cmp	r3, #48	@ 0x30
 800f986:	d0f9      	beq.n	800f97c <_dtoa_r+0x554>
 800f988:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f98c:	e027      	b.n	800f9de <_dtoa_r+0x5b6>
 800f98e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f992:	e7d5      	b.n	800f940 <_dtoa_r+0x518>
 800f994:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f998:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f99c:	463e      	mov	r6, r7
 800f99e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f9a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f9a6:	ee15 3a10 	vmov	r3, s10
 800f9aa:	3330      	adds	r3, #48	@ 0x30
 800f9ac:	f806 3b01 	strb.w	r3, [r6], #1
 800f9b0:	1bf3      	subs	r3, r6, r7
 800f9b2:	459a      	cmp	sl, r3
 800f9b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f9b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f9bc:	d132      	bne.n	800fa24 <_dtoa_r+0x5fc>
 800f9be:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f9c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ca:	dc18      	bgt.n	800f9fe <_dtoa_r+0x5d6>
 800f9cc:	eeb4 7b46 	vcmp.f64	d7, d6
 800f9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d4:	d103      	bne.n	800f9de <_dtoa_r+0x5b6>
 800f9d6:	ee15 3a10 	vmov	r3, s10
 800f9da:	07db      	lsls	r3, r3, #31
 800f9dc:	d40f      	bmi.n	800f9fe <_dtoa_r+0x5d6>
 800f9de:	9901      	ldr	r1, [sp, #4]
 800f9e0:	4648      	mov	r0, r9
 800f9e2:	f000 fbbf 	bl	8010164 <_Bfree>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f9ea:	7033      	strb	r3, [r6, #0]
 800f9ec:	f108 0301 	add.w	r3, r8, #1
 800f9f0:	6013      	str	r3, [r2, #0]
 800f9f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f000 824b 	beq.w	800fe90 <_dtoa_r+0xa68>
 800f9fa:	601e      	str	r6, [r3, #0]
 800f9fc:	e248      	b.n	800fe90 <_dtoa_r+0xa68>
 800f9fe:	f8cd 8014 	str.w	r8, [sp, #20]
 800fa02:	4633      	mov	r3, r6
 800fa04:	461e      	mov	r6, r3
 800fa06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa0a:	2a39      	cmp	r2, #57	@ 0x39
 800fa0c:	d106      	bne.n	800fa1c <_dtoa_r+0x5f4>
 800fa0e:	429f      	cmp	r7, r3
 800fa10:	d1f8      	bne.n	800fa04 <_dtoa_r+0x5dc>
 800fa12:	9a05      	ldr	r2, [sp, #20]
 800fa14:	3201      	adds	r2, #1
 800fa16:	9205      	str	r2, [sp, #20]
 800fa18:	2230      	movs	r2, #48	@ 0x30
 800fa1a:	703a      	strb	r2, [r7, #0]
 800fa1c:	781a      	ldrb	r2, [r3, #0]
 800fa1e:	3201      	adds	r2, #1
 800fa20:	701a      	strb	r2, [r3, #0]
 800fa22:	e7b1      	b.n	800f988 <_dtoa_r+0x560>
 800fa24:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fa28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa30:	d1b5      	bne.n	800f99e <_dtoa_r+0x576>
 800fa32:	e7d4      	b.n	800f9de <_dtoa_r+0x5b6>
 800fa34:	08011760 	.word	0x08011760
 800fa38:	08011738 	.word	0x08011738
 800fa3c:	9908      	ldr	r1, [sp, #32]
 800fa3e:	2900      	cmp	r1, #0
 800fa40:	f000 80e9 	beq.w	800fc16 <_dtoa_r+0x7ee>
 800fa44:	9907      	ldr	r1, [sp, #28]
 800fa46:	2901      	cmp	r1, #1
 800fa48:	f300 80cb 	bgt.w	800fbe2 <_dtoa_r+0x7ba>
 800fa4c:	2d00      	cmp	r5, #0
 800fa4e:	f000 80c4 	beq.w	800fbda <_dtoa_r+0x7b2>
 800fa52:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fa56:	9e04      	ldr	r6, [sp, #16]
 800fa58:	461c      	mov	r4, r3
 800fa5a:	9305      	str	r3, [sp, #20]
 800fa5c:	9b04      	ldr	r3, [sp, #16]
 800fa5e:	4413      	add	r3, r2
 800fa60:	9304      	str	r3, [sp, #16]
 800fa62:	9b06      	ldr	r3, [sp, #24]
 800fa64:	2101      	movs	r1, #1
 800fa66:	4413      	add	r3, r2
 800fa68:	4648      	mov	r0, r9
 800fa6a:	9306      	str	r3, [sp, #24]
 800fa6c:	f000 fc2e 	bl	80102cc <__i2b>
 800fa70:	9b05      	ldr	r3, [sp, #20]
 800fa72:	4605      	mov	r5, r0
 800fa74:	b166      	cbz	r6, 800fa90 <_dtoa_r+0x668>
 800fa76:	9a06      	ldr	r2, [sp, #24]
 800fa78:	2a00      	cmp	r2, #0
 800fa7a:	dd09      	ble.n	800fa90 <_dtoa_r+0x668>
 800fa7c:	42b2      	cmp	r2, r6
 800fa7e:	9904      	ldr	r1, [sp, #16]
 800fa80:	bfa8      	it	ge
 800fa82:	4632      	movge	r2, r6
 800fa84:	1a89      	subs	r1, r1, r2
 800fa86:	9104      	str	r1, [sp, #16]
 800fa88:	9906      	ldr	r1, [sp, #24]
 800fa8a:	1ab6      	subs	r6, r6, r2
 800fa8c:	1a8a      	subs	r2, r1, r2
 800fa8e:	9206      	str	r2, [sp, #24]
 800fa90:	b30b      	cbz	r3, 800fad6 <_dtoa_r+0x6ae>
 800fa92:	9a08      	ldr	r2, [sp, #32]
 800fa94:	2a00      	cmp	r2, #0
 800fa96:	f000 80c5 	beq.w	800fc24 <_dtoa_r+0x7fc>
 800fa9a:	2c00      	cmp	r4, #0
 800fa9c:	f000 80bf 	beq.w	800fc1e <_dtoa_r+0x7f6>
 800faa0:	4629      	mov	r1, r5
 800faa2:	4622      	mov	r2, r4
 800faa4:	4648      	mov	r0, r9
 800faa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800faa8:	f000 fcc8 	bl	801043c <__pow5mult>
 800faac:	9a01      	ldr	r2, [sp, #4]
 800faae:	4601      	mov	r1, r0
 800fab0:	4605      	mov	r5, r0
 800fab2:	4648      	mov	r0, r9
 800fab4:	f000 fc20 	bl	80102f8 <__multiply>
 800fab8:	9901      	ldr	r1, [sp, #4]
 800faba:	9005      	str	r0, [sp, #20]
 800fabc:	4648      	mov	r0, r9
 800fabe:	f000 fb51 	bl	8010164 <_Bfree>
 800fac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fac4:	1b1b      	subs	r3, r3, r4
 800fac6:	f000 80b0 	beq.w	800fc2a <_dtoa_r+0x802>
 800faca:	9905      	ldr	r1, [sp, #20]
 800facc:	461a      	mov	r2, r3
 800face:	4648      	mov	r0, r9
 800fad0:	f000 fcb4 	bl	801043c <__pow5mult>
 800fad4:	9001      	str	r0, [sp, #4]
 800fad6:	2101      	movs	r1, #1
 800fad8:	4648      	mov	r0, r9
 800fada:	f000 fbf7 	bl	80102cc <__i2b>
 800fade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fae0:	4604      	mov	r4, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f000 81da 	beq.w	800fe9c <_dtoa_r+0xa74>
 800fae8:	461a      	mov	r2, r3
 800faea:	4601      	mov	r1, r0
 800faec:	4648      	mov	r0, r9
 800faee:	f000 fca5 	bl	801043c <__pow5mult>
 800faf2:	9b07      	ldr	r3, [sp, #28]
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	4604      	mov	r4, r0
 800faf8:	f300 80a0 	bgt.w	800fc3c <_dtoa_r+0x814>
 800fafc:	9b02      	ldr	r3, [sp, #8]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f040 8096 	bne.w	800fc30 <_dtoa_r+0x808>
 800fb04:	9b03      	ldr	r3, [sp, #12]
 800fb06:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800fb0a:	2a00      	cmp	r2, #0
 800fb0c:	f040 8092 	bne.w	800fc34 <_dtoa_r+0x80c>
 800fb10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fb14:	0d12      	lsrs	r2, r2, #20
 800fb16:	0512      	lsls	r2, r2, #20
 800fb18:	2a00      	cmp	r2, #0
 800fb1a:	f000 808d 	beq.w	800fc38 <_dtoa_r+0x810>
 800fb1e:	9b04      	ldr	r3, [sp, #16]
 800fb20:	3301      	adds	r3, #1
 800fb22:	9304      	str	r3, [sp, #16]
 800fb24:	9b06      	ldr	r3, [sp, #24]
 800fb26:	3301      	adds	r3, #1
 800fb28:	9306      	str	r3, [sp, #24]
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f000 81b9 	beq.w	800fea8 <_dtoa_r+0xa80>
 800fb36:	6922      	ldr	r2, [r4, #16]
 800fb38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fb3c:	6910      	ldr	r0, [r2, #16]
 800fb3e:	f000 fb79 	bl	8010234 <__hi0bits>
 800fb42:	f1c0 0020 	rsb	r0, r0, #32
 800fb46:	9b06      	ldr	r3, [sp, #24]
 800fb48:	4418      	add	r0, r3
 800fb4a:	f010 001f 	ands.w	r0, r0, #31
 800fb4e:	f000 8081 	beq.w	800fc54 <_dtoa_r+0x82c>
 800fb52:	f1c0 0220 	rsb	r2, r0, #32
 800fb56:	2a04      	cmp	r2, #4
 800fb58:	dd73      	ble.n	800fc42 <_dtoa_r+0x81a>
 800fb5a:	9b04      	ldr	r3, [sp, #16]
 800fb5c:	f1c0 001c 	rsb	r0, r0, #28
 800fb60:	4403      	add	r3, r0
 800fb62:	9304      	str	r3, [sp, #16]
 800fb64:	9b06      	ldr	r3, [sp, #24]
 800fb66:	4406      	add	r6, r0
 800fb68:	4403      	add	r3, r0
 800fb6a:	9306      	str	r3, [sp, #24]
 800fb6c:	9b04      	ldr	r3, [sp, #16]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	dd05      	ble.n	800fb7e <_dtoa_r+0x756>
 800fb72:	9901      	ldr	r1, [sp, #4]
 800fb74:	461a      	mov	r2, r3
 800fb76:	4648      	mov	r0, r9
 800fb78:	f000 fcba 	bl	80104f0 <__lshift>
 800fb7c:	9001      	str	r0, [sp, #4]
 800fb7e:	9b06      	ldr	r3, [sp, #24]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	dd05      	ble.n	800fb90 <_dtoa_r+0x768>
 800fb84:	4621      	mov	r1, r4
 800fb86:	461a      	mov	r2, r3
 800fb88:	4648      	mov	r0, r9
 800fb8a:	f000 fcb1 	bl	80104f0 <__lshift>
 800fb8e:	4604      	mov	r4, r0
 800fb90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d060      	beq.n	800fc58 <_dtoa_r+0x830>
 800fb96:	9801      	ldr	r0, [sp, #4]
 800fb98:	4621      	mov	r1, r4
 800fb9a:	f000 fd15 	bl	80105c8 <__mcmp>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	da5a      	bge.n	800fc58 <_dtoa_r+0x830>
 800fba2:	f108 33ff 	add.w	r3, r8, #4294967295
 800fba6:	9305      	str	r3, [sp, #20]
 800fba8:	9901      	ldr	r1, [sp, #4]
 800fbaa:	2300      	movs	r3, #0
 800fbac:	220a      	movs	r2, #10
 800fbae:	4648      	mov	r0, r9
 800fbb0:	f000 fafa 	bl	80101a8 <__multadd>
 800fbb4:	9b08      	ldr	r3, [sp, #32]
 800fbb6:	9001      	str	r0, [sp, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f000 8177 	beq.w	800feac <_dtoa_r+0xa84>
 800fbbe:	4629      	mov	r1, r5
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	220a      	movs	r2, #10
 800fbc4:	4648      	mov	r0, r9
 800fbc6:	f000 faef 	bl	80101a8 <__multadd>
 800fbca:	f1bb 0f00 	cmp.w	fp, #0
 800fbce:	4605      	mov	r5, r0
 800fbd0:	dc6e      	bgt.n	800fcb0 <_dtoa_r+0x888>
 800fbd2:	9b07      	ldr	r3, [sp, #28]
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	dc48      	bgt.n	800fc6a <_dtoa_r+0x842>
 800fbd8:	e06a      	b.n	800fcb0 <_dtoa_r+0x888>
 800fbda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fbe0:	e739      	b.n	800fa56 <_dtoa_r+0x62e>
 800fbe2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800fbe6:	42a3      	cmp	r3, r4
 800fbe8:	db07      	blt.n	800fbfa <_dtoa_r+0x7d2>
 800fbea:	f1ba 0f00 	cmp.w	sl, #0
 800fbee:	eba3 0404 	sub.w	r4, r3, r4
 800fbf2:	db0b      	blt.n	800fc0c <_dtoa_r+0x7e4>
 800fbf4:	9e04      	ldr	r6, [sp, #16]
 800fbf6:	4652      	mov	r2, sl
 800fbf8:	e72f      	b.n	800fa5a <_dtoa_r+0x632>
 800fbfa:	1ae2      	subs	r2, r4, r3
 800fbfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbfe:	9e04      	ldr	r6, [sp, #16]
 800fc00:	4413      	add	r3, r2
 800fc02:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc04:	4652      	mov	r2, sl
 800fc06:	4623      	mov	r3, r4
 800fc08:	2400      	movs	r4, #0
 800fc0a:	e726      	b.n	800fa5a <_dtoa_r+0x632>
 800fc0c:	9a04      	ldr	r2, [sp, #16]
 800fc0e:	eba2 060a 	sub.w	r6, r2, sl
 800fc12:	2200      	movs	r2, #0
 800fc14:	e721      	b.n	800fa5a <_dtoa_r+0x632>
 800fc16:	9e04      	ldr	r6, [sp, #16]
 800fc18:	9d08      	ldr	r5, [sp, #32]
 800fc1a:	461c      	mov	r4, r3
 800fc1c:	e72a      	b.n	800fa74 <_dtoa_r+0x64c>
 800fc1e:	9a01      	ldr	r2, [sp, #4]
 800fc20:	9205      	str	r2, [sp, #20]
 800fc22:	e752      	b.n	800faca <_dtoa_r+0x6a2>
 800fc24:	9901      	ldr	r1, [sp, #4]
 800fc26:	461a      	mov	r2, r3
 800fc28:	e751      	b.n	800face <_dtoa_r+0x6a6>
 800fc2a:	9b05      	ldr	r3, [sp, #20]
 800fc2c:	9301      	str	r3, [sp, #4]
 800fc2e:	e752      	b.n	800fad6 <_dtoa_r+0x6ae>
 800fc30:	2300      	movs	r3, #0
 800fc32:	e77b      	b.n	800fb2c <_dtoa_r+0x704>
 800fc34:	9b02      	ldr	r3, [sp, #8]
 800fc36:	e779      	b.n	800fb2c <_dtoa_r+0x704>
 800fc38:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fc3a:	e778      	b.n	800fb2e <_dtoa_r+0x706>
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc40:	e779      	b.n	800fb36 <_dtoa_r+0x70e>
 800fc42:	d093      	beq.n	800fb6c <_dtoa_r+0x744>
 800fc44:	9b04      	ldr	r3, [sp, #16]
 800fc46:	321c      	adds	r2, #28
 800fc48:	4413      	add	r3, r2
 800fc4a:	9304      	str	r3, [sp, #16]
 800fc4c:	9b06      	ldr	r3, [sp, #24]
 800fc4e:	4416      	add	r6, r2
 800fc50:	4413      	add	r3, r2
 800fc52:	e78a      	b.n	800fb6a <_dtoa_r+0x742>
 800fc54:	4602      	mov	r2, r0
 800fc56:	e7f5      	b.n	800fc44 <_dtoa_r+0x81c>
 800fc58:	f1ba 0f00 	cmp.w	sl, #0
 800fc5c:	f8cd 8014 	str.w	r8, [sp, #20]
 800fc60:	46d3      	mov	fp, sl
 800fc62:	dc21      	bgt.n	800fca8 <_dtoa_r+0x880>
 800fc64:	9b07      	ldr	r3, [sp, #28]
 800fc66:	2b02      	cmp	r3, #2
 800fc68:	dd1e      	ble.n	800fca8 <_dtoa_r+0x880>
 800fc6a:	f1bb 0f00 	cmp.w	fp, #0
 800fc6e:	f47f addc 	bne.w	800f82a <_dtoa_r+0x402>
 800fc72:	4621      	mov	r1, r4
 800fc74:	465b      	mov	r3, fp
 800fc76:	2205      	movs	r2, #5
 800fc78:	4648      	mov	r0, r9
 800fc7a:	f000 fa95 	bl	80101a8 <__multadd>
 800fc7e:	4601      	mov	r1, r0
 800fc80:	4604      	mov	r4, r0
 800fc82:	9801      	ldr	r0, [sp, #4]
 800fc84:	f000 fca0 	bl	80105c8 <__mcmp>
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	f77f adce 	ble.w	800f82a <_dtoa_r+0x402>
 800fc8e:	463e      	mov	r6, r7
 800fc90:	2331      	movs	r3, #49	@ 0x31
 800fc92:	f806 3b01 	strb.w	r3, [r6], #1
 800fc96:	9b05      	ldr	r3, [sp, #20]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	9305      	str	r3, [sp, #20]
 800fc9c:	e5c9      	b.n	800f832 <_dtoa_r+0x40a>
 800fc9e:	f8cd 8014 	str.w	r8, [sp, #20]
 800fca2:	4654      	mov	r4, sl
 800fca4:	4625      	mov	r5, r4
 800fca6:	e7f2      	b.n	800fc8e <_dtoa_r+0x866>
 800fca8:	9b08      	ldr	r3, [sp, #32]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	f000 8102 	beq.w	800feb4 <_dtoa_r+0xa8c>
 800fcb0:	2e00      	cmp	r6, #0
 800fcb2:	dd05      	ble.n	800fcc0 <_dtoa_r+0x898>
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	4632      	mov	r2, r6
 800fcb8:	4648      	mov	r0, r9
 800fcba:	f000 fc19 	bl	80104f0 <__lshift>
 800fcbe:	4605      	mov	r5, r0
 800fcc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d058      	beq.n	800fd78 <_dtoa_r+0x950>
 800fcc6:	6869      	ldr	r1, [r5, #4]
 800fcc8:	4648      	mov	r0, r9
 800fcca:	f000 fa0b 	bl	80100e4 <_Balloc>
 800fcce:	4606      	mov	r6, r0
 800fcd0:	b928      	cbnz	r0, 800fcde <_dtoa_r+0x8b6>
 800fcd2:	4b82      	ldr	r3, [pc, #520]	@ (800fedc <_dtoa_r+0xab4>)
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fcda:	f7ff bbbe 	b.w	800f45a <_dtoa_r+0x32>
 800fcde:	692a      	ldr	r2, [r5, #16]
 800fce0:	3202      	adds	r2, #2
 800fce2:	0092      	lsls	r2, r2, #2
 800fce4:	f105 010c 	add.w	r1, r5, #12
 800fce8:	300c      	adds	r0, #12
 800fcea:	f7ff fb06 	bl	800f2fa <memcpy>
 800fcee:	2201      	movs	r2, #1
 800fcf0:	4631      	mov	r1, r6
 800fcf2:	4648      	mov	r0, r9
 800fcf4:	f000 fbfc 	bl	80104f0 <__lshift>
 800fcf8:	1c7b      	adds	r3, r7, #1
 800fcfa:	9304      	str	r3, [sp, #16]
 800fcfc:	eb07 030b 	add.w	r3, r7, fp
 800fd00:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd02:	9b02      	ldr	r3, [sp, #8]
 800fd04:	f003 0301 	and.w	r3, r3, #1
 800fd08:	46a8      	mov	r8, r5
 800fd0a:	9308      	str	r3, [sp, #32]
 800fd0c:	4605      	mov	r5, r0
 800fd0e:	9b04      	ldr	r3, [sp, #16]
 800fd10:	9801      	ldr	r0, [sp, #4]
 800fd12:	4621      	mov	r1, r4
 800fd14:	f103 3bff 	add.w	fp, r3, #4294967295
 800fd18:	f7ff fafd 	bl	800f316 <quorem>
 800fd1c:	4641      	mov	r1, r8
 800fd1e:	9002      	str	r0, [sp, #8]
 800fd20:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fd24:	9801      	ldr	r0, [sp, #4]
 800fd26:	f000 fc4f 	bl	80105c8 <__mcmp>
 800fd2a:	462a      	mov	r2, r5
 800fd2c:	9006      	str	r0, [sp, #24]
 800fd2e:	4621      	mov	r1, r4
 800fd30:	4648      	mov	r0, r9
 800fd32:	f000 fc65 	bl	8010600 <__mdiff>
 800fd36:	68c2      	ldr	r2, [r0, #12]
 800fd38:	4606      	mov	r6, r0
 800fd3a:	b9fa      	cbnz	r2, 800fd7c <_dtoa_r+0x954>
 800fd3c:	4601      	mov	r1, r0
 800fd3e:	9801      	ldr	r0, [sp, #4]
 800fd40:	f000 fc42 	bl	80105c8 <__mcmp>
 800fd44:	4602      	mov	r2, r0
 800fd46:	4631      	mov	r1, r6
 800fd48:	4648      	mov	r0, r9
 800fd4a:	920a      	str	r2, [sp, #40]	@ 0x28
 800fd4c:	f000 fa0a 	bl	8010164 <_Bfree>
 800fd50:	9b07      	ldr	r3, [sp, #28]
 800fd52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd54:	9e04      	ldr	r6, [sp, #16]
 800fd56:	ea42 0103 	orr.w	r1, r2, r3
 800fd5a:	9b08      	ldr	r3, [sp, #32]
 800fd5c:	4319      	orrs	r1, r3
 800fd5e:	d10f      	bne.n	800fd80 <_dtoa_r+0x958>
 800fd60:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fd64:	d028      	beq.n	800fdb8 <_dtoa_r+0x990>
 800fd66:	9b06      	ldr	r3, [sp, #24]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	dd02      	ble.n	800fd72 <_dtoa_r+0x94a>
 800fd6c:	9b02      	ldr	r3, [sp, #8]
 800fd6e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fd72:	f88b a000 	strb.w	sl, [fp]
 800fd76:	e55e      	b.n	800f836 <_dtoa_r+0x40e>
 800fd78:	4628      	mov	r0, r5
 800fd7a:	e7bd      	b.n	800fcf8 <_dtoa_r+0x8d0>
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	e7e2      	b.n	800fd46 <_dtoa_r+0x91e>
 800fd80:	9b06      	ldr	r3, [sp, #24]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	db04      	blt.n	800fd90 <_dtoa_r+0x968>
 800fd86:	9907      	ldr	r1, [sp, #28]
 800fd88:	430b      	orrs	r3, r1
 800fd8a:	9908      	ldr	r1, [sp, #32]
 800fd8c:	430b      	orrs	r3, r1
 800fd8e:	d120      	bne.n	800fdd2 <_dtoa_r+0x9aa>
 800fd90:	2a00      	cmp	r2, #0
 800fd92:	ddee      	ble.n	800fd72 <_dtoa_r+0x94a>
 800fd94:	9901      	ldr	r1, [sp, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	4648      	mov	r0, r9
 800fd9a:	f000 fba9 	bl	80104f0 <__lshift>
 800fd9e:	4621      	mov	r1, r4
 800fda0:	9001      	str	r0, [sp, #4]
 800fda2:	f000 fc11 	bl	80105c8 <__mcmp>
 800fda6:	2800      	cmp	r0, #0
 800fda8:	dc03      	bgt.n	800fdb2 <_dtoa_r+0x98a>
 800fdaa:	d1e2      	bne.n	800fd72 <_dtoa_r+0x94a>
 800fdac:	f01a 0f01 	tst.w	sl, #1
 800fdb0:	d0df      	beq.n	800fd72 <_dtoa_r+0x94a>
 800fdb2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fdb6:	d1d9      	bne.n	800fd6c <_dtoa_r+0x944>
 800fdb8:	2339      	movs	r3, #57	@ 0x39
 800fdba:	f88b 3000 	strb.w	r3, [fp]
 800fdbe:	4633      	mov	r3, r6
 800fdc0:	461e      	mov	r6, r3
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fdc8:	2a39      	cmp	r2, #57	@ 0x39
 800fdca:	d052      	beq.n	800fe72 <_dtoa_r+0xa4a>
 800fdcc:	3201      	adds	r2, #1
 800fdce:	701a      	strb	r2, [r3, #0]
 800fdd0:	e531      	b.n	800f836 <_dtoa_r+0x40e>
 800fdd2:	2a00      	cmp	r2, #0
 800fdd4:	dd07      	ble.n	800fde6 <_dtoa_r+0x9be>
 800fdd6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fdda:	d0ed      	beq.n	800fdb8 <_dtoa_r+0x990>
 800fddc:	f10a 0301 	add.w	r3, sl, #1
 800fde0:	f88b 3000 	strb.w	r3, [fp]
 800fde4:	e527      	b.n	800f836 <_dtoa_r+0x40e>
 800fde6:	9b04      	ldr	r3, [sp, #16]
 800fde8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdea:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d029      	beq.n	800fe46 <_dtoa_r+0xa1e>
 800fdf2:	9901      	ldr	r1, [sp, #4]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	220a      	movs	r2, #10
 800fdf8:	4648      	mov	r0, r9
 800fdfa:	f000 f9d5 	bl	80101a8 <__multadd>
 800fdfe:	45a8      	cmp	r8, r5
 800fe00:	9001      	str	r0, [sp, #4]
 800fe02:	f04f 0300 	mov.w	r3, #0
 800fe06:	f04f 020a 	mov.w	r2, #10
 800fe0a:	4641      	mov	r1, r8
 800fe0c:	4648      	mov	r0, r9
 800fe0e:	d107      	bne.n	800fe20 <_dtoa_r+0x9f8>
 800fe10:	f000 f9ca 	bl	80101a8 <__multadd>
 800fe14:	4680      	mov	r8, r0
 800fe16:	4605      	mov	r5, r0
 800fe18:	9b04      	ldr	r3, [sp, #16]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	9304      	str	r3, [sp, #16]
 800fe1e:	e776      	b.n	800fd0e <_dtoa_r+0x8e6>
 800fe20:	f000 f9c2 	bl	80101a8 <__multadd>
 800fe24:	4629      	mov	r1, r5
 800fe26:	4680      	mov	r8, r0
 800fe28:	2300      	movs	r3, #0
 800fe2a:	220a      	movs	r2, #10
 800fe2c:	4648      	mov	r0, r9
 800fe2e:	f000 f9bb 	bl	80101a8 <__multadd>
 800fe32:	4605      	mov	r5, r0
 800fe34:	e7f0      	b.n	800fe18 <_dtoa_r+0x9f0>
 800fe36:	f1bb 0f00 	cmp.w	fp, #0
 800fe3a:	bfcc      	ite	gt
 800fe3c:	465e      	movgt	r6, fp
 800fe3e:	2601      	movle	r6, #1
 800fe40:	443e      	add	r6, r7
 800fe42:	f04f 0800 	mov.w	r8, #0
 800fe46:	9901      	ldr	r1, [sp, #4]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	4648      	mov	r0, r9
 800fe4c:	f000 fb50 	bl	80104f0 <__lshift>
 800fe50:	4621      	mov	r1, r4
 800fe52:	9001      	str	r0, [sp, #4]
 800fe54:	f000 fbb8 	bl	80105c8 <__mcmp>
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	dcb0      	bgt.n	800fdbe <_dtoa_r+0x996>
 800fe5c:	d102      	bne.n	800fe64 <_dtoa_r+0xa3c>
 800fe5e:	f01a 0f01 	tst.w	sl, #1
 800fe62:	d1ac      	bne.n	800fdbe <_dtoa_r+0x996>
 800fe64:	4633      	mov	r3, r6
 800fe66:	461e      	mov	r6, r3
 800fe68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe6c:	2a30      	cmp	r2, #48	@ 0x30
 800fe6e:	d0fa      	beq.n	800fe66 <_dtoa_r+0xa3e>
 800fe70:	e4e1      	b.n	800f836 <_dtoa_r+0x40e>
 800fe72:	429f      	cmp	r7, r3
 800fe74:	d1a4      	bne.n	800fdc0 <_dtoa_r+0x998>
 800fe76:	9b05      	ldr	r3, [sp, #20]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	9305      	str	r3, [sp, #20]
 800fe7c:	2331      	movs	r3, #49	@ 0x31
 800fe7e:	703b      	strb	r3, [r7, #0]
 800fe80:	e4d9      	b.n	800f836 <_dtoa_r+0x40e>
 800fe82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fe84:	4f16      	ldr	r7, [pc, #88]	@ (800fee0 <_dtoa_r+0xab8>)
 800fe86:	b11b      	cbz	r3, 800fe90 <_dtoa_r+0xa68>
 800fe88:	f107 0308 	add.w	r3, r7, #8
 800fe8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fe8e:	6013      	str	r3, [r2, #0]
 800fe90:	4638      	mov	r0, r7
 800fe92:	b011      	add	sp, #68	@ 0x44
 800fe94:	ecbd 8b02 	vpop	{d8}
 800fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe9c:	9b07      	ldr	r3, [sp, #28]
 800fe9e:	2b01      	cmp	r3, #1
 800fea0:	f77f ae2c 	ble.w	800fafc <_dtoa_r+0x6d4>
 800fea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fea8:	2001      	movs	r0, #1
 800feaa:	e64c      	b.n	800fb46 <_dtoa_r+0x71e>
 800feac:	f1bb 0f00 	cmp.w	fp, #0
 800feb0:	f77f aed8 	ble.w	800fc64 <_dtoa_r+0x83c>
 800feb4:	463e      	mov	r6, r7
 800feb6:	9801      	ldr	r0, [sp, #4]
 800feb8:	4621      	mov	r1, r4
 800feba:	f7ff fa2c 	bl	800f316 <quorem>
 800febe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fec2:	f806 ab01 	strb.w	sl, [r6], #1
 800fec6:	1bf2      	subs	r2, r6, r7
 800fec8:	4593      	cmp	fp, r2
 800feca:	ddb4      	ble.n	800fe36 <_dtoa_r+0xa0e>
 800fecc:	9901      	ldr	r1, [sp, #4]
 800fece:	2300      	movs	r3, #0
 800fed0:	220a      	movs	r2, #10
 800fed2:	4648      	mov	r0, r9
 800fed4:	f000 f968 	bl	80101a8 <__multadd>
 800fed8:	9001      	str	r0, [sp, #4]
 800feda:	e7ec      	b.n	800feb6 <_dtoa_r+0xa8e>
 800fedc:	08011664 	.word	0x08011664
 800fee0:	080115e8 	.word	0x080115e8

0800fee4 <_free_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	4605      	mov	r5, r0
 800fee8:	2900      	cmp	r1, #0
 800feea:	d041      	beq.n	800ff70 <_free_r+0x8c>
 800feec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fef0:	1f0c      	subs	r4, r1, #4
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	bfb8      	it	lt
 800fef6:	18e4      	addlt	r4, r4, r3
 800fef8:	f000 f8e8 	bl	80100cc <__malloc_lock>
 800fefc:	4a1d      	ldr	r2, [pc, #116]	@ (800ff74 <_free_r+0x90>)
 800fefe:	6813      	ldr	r3, [r2, #0]
 800ff00:	b933      	cbnz	r3, 800ff10 <_free_r+0x2c>
 800ff02:	6063      	str	r3, [r4, #4]
 800ff04:	6014      	str	r4, [r2, #0]
 800ff06:	4628      	mov	r0, r5
 800ff08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff0c:	f000 b8e4 	b.w	80100d8 <__malloc_unlock>
 800ff10:	42a3      	cmp	r3, r4
 800ff12:	d908      	bls.n	800ff26 <_free_r+0x42>
 800ff14:	6820      	ldr	r0, [r4, #0]
 800ff16:	1821      	adds	r1, r4, r0
 800ff18:	428b      	cmp	r3, r1
 800ff1a:	bf01      	itttt	eq
 800ff1c:	6819      	ldreq	r1, [r3, #0]
 800ff1e:	685b      	ldreq	r3, [r3, #4]
 800ff20:	1809      	addeq	r1, r1, r0
 800ff22:	6021      	streq	r1, [r4, #0]
 800ff24:	e7ed      	b.n	800ff02 <_free_r+0x1e>
 800ff26:	461a      	mov	r2, r3
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	b10b      	cbz	r3, 800ff30 <_free_r+0x4c>
 800ff2c:	42a3      	cmp	r3, r4
 800ff2e:	d9fa      	bls.n	800ff26 <_free_r+0x42>
 800ff30:	6811      	ldr	r1, [r2, #0]
 800ff32:	1850      	adds	r0, r2, r1
 800ff34:	42a0      	cmp	r0, r4
 800ff36:	d10b      	bne.n	800ff50 <_free_r+0x6c>
 800ff38:	6820      	ldr	r0, [r4, #0]
 800ff3a:	4401      	add	r1, r0
 800ff3c:	1850      	adds	r0, r2, r1
 800ff3e:	4283      	cmp	r3, r0
 800ff40:	6011      	str	r1, [r2, #0]
 800ff42:	d1e0      	bne.n	800ff06 <_free_r+0x22>
 800ff44:	6818      	ldr	r0, [r3, #0]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	6053      	str	r3, [r2, #4]
 800ff4a:	4408      	add	r0, r1
 800ff4c:	6010      	str	r0, [r2, #0]
 800ff4e:	e7da      	b.n	800ff06 <_free_r+0x22>
 800ff50:	d902      	bls.n	800ff58 <_free_r+0x74>
 800ff52:	230c      	movs	r3, #12
 800ff54:	602b      	str	r3, [r5, #0]
 800ff56:	e7d6      	b.n	800ff06 <_free_r+0x22>
 800ff58:	6820      	ldr	r0, [r4, #0]
 800ff5a:	1821      	adds	r1, r4, r0
 800ff5c:	428b      	cmp	r3, r1
 800ff5e:	bf04      	itt	eq
 800ff60:	6819      	ldreq	r1, [r3, #0]
 800ff62:	685b      	ldreq	r3, [r3, #4]
 800ff64:	6063      	str	r3, [r4, #4]
 800ff66:	bf04      	itt	eq
 800ff68:	1809      	addeq	r1, r1, r0
 800ff6a:	6021      	streq	r1, [r4, #0]
 800ff6c:	6054      	str	r4, [r2, #4]
 800ff6e:	e7ca      	b.n	800ff06 <_free_r+0x22>
 800ff70:	bd38      	pop	{r3, r4, r5, pc}
 800ff72:	bf00      	nop
 800ff74:	24005608 	.word	0x24005608

0800ff78 <malloc>:
 800ff78:	4b02      	ldr	r3, [pc, #8]	@ (800ff84 <malloc+0xc>)
 800ff7a:	4601      	mov	r1, r0
 800ff7c:	6818      	ldr	r0, [r3, #0]
 800ff7e:	f000 b825 	b.w	800ffcc <_malloc_r>
 800ff82:	bf00      	nop
 800ff84:	2400008c 	.word	0x2400008c

0800ff88 <sbrk_aligned>:
 800ff88:	b570      	push	{r4, r5, r6, lr}
 800ff8a:	4e0f      	ldr	r6, [pc, #60]	@ (800ffc8 <sbrk_aligned+0x40>)
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	6831      	ldr	r1, [r6, #0]
 800ff90:	4605      	mov	r5, r0
 800ff92:	b911      	cbnz	r1, 800ff9a <sbrk_aligned+0x12>
 800ff94:	f000 fec6 	bl	8010d24 <_sbrk_r>
 800ff98:	6030      	str	r0, [r6, #0]
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	4628      	mov	r0, r5
 800ff9e:	f000 fec1 	bl	8010d24 <_sbrk_r>
 800ffa2:	1c43      	adds	r3, r0, #1
 800ffa4:	d103      	bne.n	800ffae <sbrk_aligned+0x26>
 800ffa6:	f04f 34ff 	mov.w	r4, #4294967295
 800ffaa:	4620      	mov	r0, r4
 800ffac:	bd70      	pop	{r4, r5, r6, pc}
 800ffae:	1cc4      	adds	r4, r0, #3
 800ffb0:	f024 0403 	bic.w	r4, r4, #3
 800ffb4:	42a0      	cmp	r0, r4
 800ffb6:	d0f8      	beq.n	800ffaa <sbrk_aligned+0x22>
 800ffb8:	1a21      	subs	r1, r4, r0
 800ffba:	4628      	mov	r0, r5
 800ffbc:	f000 feb2 	bl	8010d24 <_sbrk_r>
 800ffc0:	3001      	adds	r0, #1
 800ffc2:	d1f2      	bne.n	800ffaa <sbrk_aligned+0x22>
 800ffc4:	e7ef      	b.n	800ffa6 <sbrk_aligned+0x1e>
 800ffc6:	bf00      	nop
 800ffc8:	24005604 	.word	0x24005604

0800ffcc <_malloc_r>:
 800ffcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffd0:	1ccd      	adds	r5, r1, #3
 800ffd2:	f025 0503 	bic.w	r5, r5, #3
 800ffd6:	3508      	adds	r5, #8
 800ffd8:	2d0c      	cmp	r5, #12
 800ffda:	bf38      	it	cc
 800ffdc:	250c      	movcc	r5, #12
 800ffde:	2d00      	cmp	r5, #0
 800ffe0:	4606      	mov	r6, r0
 800ffe2:	db01      	blt.n	800ffe8 <_malloc_r+0x1c>
 800ffe4:	42a9      	cmp	r1, r5
 800ffe6:	d904      	bls.n	800fff2 <_malloc_r+0x26>
 800ffe8:	230c      	movs	r3, #12
 800ffea:	6033      	str	r3, [r6, #0]
 800ffec:	2000      	movs	r0, #0
 800ffee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80100c8 <_malloc_r+0xfc>
 800fff6:	f000 f869 	bl	80100cc <__malloc_lock>
 800fffa:	f8d8 3000 	ldr.w	r3, [r8]
 800fffe:	461c      	mov	r4, r3
 8010000:	bb44      	cbnz	r4, 8010054 <_malloc_r+0x88>
 8010002:	4629      	mov	r1, r5
 8010004:	4630      	mov	r0, r6
 8010006:	f7ff ffbf 	bl	800ff88 <sbrk_aligned>
 801000a:	1c43      	adds	r3, r0, #1
 801000c:	4604      	mov	r4, r0
 801000e:	d158      	bne.n	80100c2 <_malloc_r+0xf6>
 8010010:	f8d8 4000 	ldr.w	r4, [r8]
 8010014:	4627      	mov	r7, r4
 8010016:	2f00      	cmp	r7, #0
 8010018:	d143      	bne.n	80100a2 <_malloc_r+0xd6>
 801001a:	2c00      	cmp	r4, #0
 801001c:	d04b      	beq.n	80100b6 <_malloc_r+0xea>
 801001e:	6823      	ldr	r3, [r4, #0]
 8010020:	4639      	mov	r1, r7
 8010022:	4630      	mov	r0, r6
 8010024:	eb04 0903 	add.w	r9, r4, r3
 8010028:	f000 fe7c 	bl	8010d24 <_sbrk_r>
 801002c:	4581      	cmp	r9, r0
 801002e:	d142      	bne.n	80100b6 <_malloc_r+0xea>
 8010030:	6821      	ldr	r1, [r4, #0]
 8010032:	1a6d      	subs	r5, r5, r1
 8010034:	4629      	mov	r1, r5
 8010036:	4630      	mov	r0, r6
 8010038:	f7ff ffa6 	bl	800ff88 <sbrk_aligned>
 801003c:	3001      	adds	r0, #1
 801003e:	d03a      	beq.n	80100b6 <_malloc_r+0xea>
 8010040:	6823      	ldr	r3, [r4, #0]
 8010042:	442b      	add	r3, r5
 8010044:	6023      	str	r3, [r4, #0]
 8010046:	f8d8 3000 	ldr.w	r3, [r8]
 801004a:	685a      	ldr	r2, [r3, #4]
 801004c:	bb62      	cbnz	r2, 80100a8 <_malloc_r+0xdc>
 801004e:	f8c8 7000 	str.w	r7, [r8]
 8010052:	e00f      	b.n	8010074 <_malloc_r+0xa8>
 8010054:	6822      	ldr	r2, [r4, #0]
 8010056:	1b52      	subs	r2, r2, r5
 8010058:	d420      	bmi.n	801009c <_malloc_r+0xd0>
 801005a:	2a0b      	cmp	r2, #11
 801005c:	d917      	bls.n	801008e <_malloc_r+0xc2>
 801005e:	1961      	adds	r1, r4, r5
 8010060:	42a3      	cmp	r3, r4
 8010062:	6025      	str	r5, [r4, #0]
 8010064:	bf18      	it	ne
 8010066:	6059      	strne	r1, [r3, #4]
 8010068:	6863      	ldr	r3, [r4, #4]
 801006a:	bf08      	it	eq
 801006c:	f8c8 1000 	streq.w	r1, [r8]
 8010070:	5162      	str	r2, [r4, r5]
 8010072:	604b      	str	r3, [r1, #4]
 8010074:	4630      	mov	r0, r6
 8010076:	f000 f82f 	bl	80100d8 <__malloc_unlock>
 801007a:	f104 000b 	add.w	r0, r4, #11
 801007e:	1d23      	adds	r3, r4, #4
 8010080:	f020 0007 	bic.w	r0, r0, #7
 8010084:	1ac2      	subs	r2, r0, r3
 8010086:	bf1c      	itt	ne
 8010088:	1a1b      	subne	r3, r3, r0
 801008a:	50a3      	strne	r3, [r4, r2]
 801008c:	e7af      	b.n	800ffee <_malloc_r+0x22>
 801008e:	6862      	ldr	r2, [r4, #4]
 8010090:	42a3      	cmp	r3, r4
 8010092:	bf0c      	ite	eq
 8010094:	f8c8 2000 	streq.w	r2, [r8]
 8010098:	605a      	strne	r2, [r3, #4]
 801009a:	e7eb      	b.n	8010074 <_malloc_r+0xa8>
 801009c:	4623      	mov	r3, r4
 801009e:	6864      	ldr	r4, [r4, #4]
 80100a0:	e7ae      	b.n	8010000 <_malloc_r+0x34>
 80100a2:	463c      	mov	r4, r7
 80100a4:	687f      	ldr	r7, [r7, #4]
 80100a6:	e7b6      	b.n	8010016 <_malloc_r+0x4a>
 80100a8:	461a      	mov	r2, r3
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	42a3      	cmp	r3, r4
 80100ae:	d1fb      	bne.n	80100a8 <_malloc_r+0xdc>
 80100b0:	2300      	movs	r3, #0
 80100b2:	6053      	str	r3, [r2, #4]
 80100b4:	e7de      	b.n	8010074 <_malloc_r+0xa8>
 80100b6:	230c      	movs	r3, #12
 80100b8:	6033      	str	r3, [r6, #0]
 80100ba:	4630      	mov	r0, r6
 80100bc:	f000 f80c 	bl	80100d8 <__malloc_unlock>
 80100c0:	e794      	b.n	800ffec <_malloc_r+0x20>
 80100c2:	6005      	str	r5, [r0, #0]
 80100c4:	e7d6      	b.n	8010074 <_malloc_r+0xa8>
 80100c6:	bf00      	nop
 80100c8:	24005608 	.word	0x24005608

080100cc <__malloc_lock>:
 80100cc:	4801      	ldr	r0, [pc, #4]	@ (80100d4 <__malloc_lock+0x8>)
 80100ce:	f7ff b912 	b.w	800f2f6 <__retarget_lock_acquire_recursive>
 80100d2:	bf00      	nop
 80100d4:	24005600 	.word	0x24005600

080100d8 <__malloc_unlock>:
 80100d8:	4801      	ldr	r0, [pc, #4]	@ (80100e0 <__malloc_unlock+0x8>)
 80100da:	f7ff b90d 	b.w	800f2f8 <__retarget_lock_release_recursive>
 80100de:	bf00      	nop
 80100e0:	24005600 	.word	0x24005600

080100e4 <_Balloc>:
 80100e4:	b570      	push	{r4, r5, r6, lr}
 80100e6:	69c6      	ldr	r6, [r0, #28]
 80100e8:	4604      	mov	r4, r0
 80100ea:	460d      	mov	r5, r1
 80100ec:	b976      	cbnz	r6, 801010c <_Balloc+0x28>
 80100ee:	2010      	movs	r0, #16
 80100f0:	f7ff ff42 	bl	800ff78 <malloc>
 80100f4:	4602      	mov	r2, r0
 80100f6:	61e0      	str	r0, [r4, #28]
 80100f8:	b920      	cbnz	r0, 8010104 <_Balloc+0x20>
 80100fa:	4b18      	ldr	r3, [pc, #96]	@ (801015c <_Balloc+0x78>)
 80100fc:	4818      	ldr	r0, [pc, #96]	@ (8010160 <_Balloc+0x7c>)
 80100fe:	216b      	movs	r1, #107	@ 0x6b
 8010100:	f000 fe20 	bl	8010d44 <__assert_func>
 8010104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010108:	6006      	str	r6, [r0, #0]
 801010a:	60c6      	str	r6, [r0, #12]
 801010c:	69e6      	ldr	r6, [r4, #28]
 801010e:	68f3      	ldr	r3, [r6, #12]
 8010110:	b183      	cbz	r3, 8010134 <_Balloc+0x50>
 8010112:	69e3      	ldr	r3, [r4, #28]
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801011a:	b9b8      	cbnz	r0, 801014c <_Balloc+0x68>
 801011c:	2101      	movs	r1, #1
 801011e:	fa01 f605 	lsl.w	r6, r1, r5
 8010122:	1d72      	adds	r2, r6, #5
 8010124:	0092      	lsls	r2, r2, #2
 8010126:	4620      	mov	r0, r4
 8010128:	f000 fe2a 	bl	8010d80 <_calloc_r>
 801012c:	b160      	cbz	r0, 8010148 <_Balloc+0x64>
 801012e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010132:	e00e      	b.n	8010152 <_Balloc+0x6e>
 8010134:	2221      	movs	r2, #33	@ 0x21
 8010136:	2104      	movs	r1, #4
 8010138:	4620      	mov	r0, r4
 801013a:	f000 fe21 	bl	8010d80 <_calloc_r>
 801013e:	69e3      	ldr	r3, [r4, #28]
 8010140:	60f0      	str	r0, [r6, #12]
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d1e4      	bne.n	8010112 <_Balloc+0x2e>
 8010148:	2000      	movs	r0, #0
 801014a:	bd70      	pop	{r4, r5, r6, pc}
 801014c:	6802      	ldr	r2, [r0, #0]
 801014e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010152:	2300      	movs	r3, #0
 8010154:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010158:	e7f7      	b.n	801014a <_Balloc+0x66>
 801015a:	bf00      	nop
 801015c:	080115f5 	.word	0x080115f5
 8010160:	08011675 	.word	0x08011675

08010164 <_Bfree>:
 8010164:	b570      	push	{r4, r5, r6, lr}
 8010166:	69c6      	ldr	r6, [r0, #28]
 8010168:	4605      	mov	r5, r0
 801016a:	460c      	mov	r4, r1
 801016c:	b976      	cbnz	r6, 801018c <_Bfree+0x28>
 801016e:	2010      	movs	r0, #16
 8010170:	f7ff ff02 	bl	800ff78 <malloc>
 8010174:	4602      	mov	r2, r0
 8010176:	61e8      	str	r0, [r5, #28]
 8010178:	b920      	cbnz	r0, 8010184 <_Bfree+0x20>
 801017a:	4b09      	ldr	r3, [pc, #36]	@ (80101a0 <_Bfree+0x3c>)
 801017c:	4809      	ldr	r0, [pc, #36]	@ (80101a4 <_Bfree+0x40>)
 801017e:	218f      	movs	r1, #143	@ 0x8f
 8010180:	f000 fde0 	bl	8010d44 <__assert_func>
 8010184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010188:	6006      	str	r6, [r0, #0]
 801018a:	60c6      	str	r6, [r0, #12]
 801018c:	b13c      	cbz	r4, 801019e <_Bfree+0x3a>
 801018e:	69eb      	ldr	r3, [r5, #28]
 8010190:	6862      	ldr	r2, [r4, #4]
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010198:	6021      	str	r1, [r4, #0]
 801019a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801019e:	bd70      	pop	{r4, r5, r6, pc}
 80101a0:	080115f5 	.word	0x080115f5
 80101a4:	08011675 	.word	0x08011675

080101a8 <__multadd>:
 80101a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ac:	690d      	ldr	r5, [r1, #16]
 80101ae:	4607      	mov	r7, r0
 80101b0:	460c      	mov	r4, r1
 80101b2:	461e      	mov	r6, r3
 80101b4:	f101 0c14 	add.w	ip, r1, #20
 80101b8:	2000      	movs	r0, #0
 80101ba:	f8dc 3000 	ldr.w	r3, [ip]
 80101be:	b299      	uxth	r1, r3
 80101c0:	fb02 6101 	mla	r1, r2, r1, r6
 80101c4:	0c1e      	lsrs	r6, r3, #16
 80101c6:	0c0b      	lsrs	r3, r1, #16
 80101c8:	fb02 3306 	mla	r3, r2, r6, r3
 80101cc:	b289      	uxth	r1, r1
 80101ce:	3001      	adds	r0, #1
 80101d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80101d4:	4285      	cmp	r5, r0
 80101d6:	f84c 1b04 	str.w	r1, [ip], #4
 80101da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80101de:	dcec      	bgt.n	80101ba <__multadd+0x12>
 80101e0:	b30e      	cbz	r6, 8010226 <__multadd+0x7e>
 80101e2:	68a3      	ldr	r3, [r4, #8]
 80101e4:	42ab      	cmp	r3, r5
 80101e6:	dc19      	bgt.n	801021c <__multadd+0x74>
 80101e8:	6861      	ldr	r1, [r4, #4]
 80101ea:	4638      	mov	r0, r7
 80101ec:	3101      	adds	r1, #1
 80101ee:	f7ff ff79 	bl	80100e4 <_Balloc>
 80101f2:	4680      	mov	r8, r0
 80101f4:	b928      	cbnz	r0, 8010202 <__multadd+0x5a>
 80101f6:	4602      	mov	r2, r0
 80101f8:	4b0c      	ldr	r3, [pc, #48]	@ (801022c <__multadd+0x84>)
 80101fa:	480d      	ldr	r0, [pc, #52]	@ (8010230 <__multadd+0x88>)
 80101fc:	21ba      	movs	r1, #186	@ 0xba
 80101fe:	f000 fda1 	bl	8010d44 <__assert_func>
 8010202:	6922      	ldr	r2, [r4, #16]
 8010204:	3202      	adds	r2, #2
 8010206:	f104 010c 	add.w	r1, r4, #12
 801020a:	0092      	lsls	r2, r2, #2
 801020c:	300c      	adds	r0, #12
 801020e:	f7ff f874 	bl	800f2fa <memcpy>
 8010212:	4621      	mov	r1, r4
 8010214:	4638      	mov	r0, r7
 8010216:	f7ff ffa5 	bl	8010164 <_Bfree>
 801021a:	4644      	mov	r4, r8
 801021c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010220:	3501      	adds	r5, #1
 8010222:	615e      	str	r6, [r3, #20]
 8010224:	6125      	str	r5, [r4, #16]
 8010226:	4620      	mov	r0, r4
 8010228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801022c:	08011664 	.word	0x08011664
 8010230:	08011675 	.word	0x08011675

08010234 <__hi0bits>:
 8010234:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010238:	4603      	mov	r3, r0
 801023a:	bf36      	itet	cc
 801023c:	0403      	lslcc	r3, r0, #16
 801023e:	2000      	movcs	r0, #0
 8010240:	2010      	movcc	r0, #16
 8010242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010246:	bf3c      	itt	cc
 8010248:	021b      	lslcc	r3, r3, #8
 801024a:	3008      	addcc	r0, #8
 801024c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010250:	bf3c      	itt	cc
 8010252:	011b      	lslcc	r3, r3, #4
 8010254:	3004      	addcc	r0, #4
 8010256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801025a:	bf3c      	itt	cc
 801025c:	009b      	lslcc	r3, r3, #2
 801025e:	3002      	addcc	r0, #2
 8010260:	2b00      	cmp	r3, #0
 8010262:	db05      	blt.n	8010270 <__hi0bits+0x3c>
 8010264:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010268:	f100 0001 	add.w	r0, r0, #1
 801026c:	bf08      	it	eq
 801026e:	2020      	moveq	r0, #32
 8010270:	4770      	bx	lr

08010272 <__lo0bits>:
 8010272:	6803      	ldr	r3, [r0, #0]
 8010274:	4602      	mov	r2, r0
 8010276:	f013 0007 	ands.w	r0, r3, #7
 801027a:	d00b      	beq.n	8010294 <__lo0bits+0x22>
 801027c:	07d9      	lsls	r1, r3, #31
 801027e:	d421      	bmi.n	80102c4 <__lo0bits+0x52>
 8010280:	0798      	lsls	r0, r3, #30
 8010282:	bf49      	itett	mi
 8010284:	085b      	lsrmi	r3, r3, #1
 8010286:	089b      	lsrpl	r3, r3, #2
 8010288:	2001      	movmi	r0, #1
 801028a:	6013      	strmi	r3, [r2, #0]
 801028c:	bf5c      	itt	pl
 801028e:	6013      	strpl	r3, [r2, #0]
 8010290:	2002      	movpl	r0, #2
 8010292:	4770      	bx	lr
 8010294:	b299      	uxth	r1, r3
 8010296:	b909      	cbnz	r1, 801029c <__lo0bits+0x2a>
 8010298:	0c1b      	lsrs	r3, r3, #16
 801029a:	2010      	movs	r0, #16
 801029c:	b2d9      	uxtb	r1, r3
 801029e:	b909      	cbnz	r1, 80102a4 <__lo0bits+0x32>
 80102a0:	3008      	adds	r0, #8
 80102a2:	0a1b      	lsrs	r3, r3, #8
 80102a4:	0719      	lsls	r1, r3, #28
 80102a6:	bf04      	itt	eq
 80102a8:	091b      	lsreq	r3, r3, #4
 80102aa:	3004      	addeq	r0, #4
 80102ac:	0799      	lsls	r1, r3, #30
 80102ae:	bf04      	itt	eq
 80102b0:	089b      	lsreq	r3, r3, #2
 80102b2:	3002      	addeq	r0, #2
 80102b4:	07d9      	lsls	r1, r3, #31
 80102b6:	d403      	bmi.n	80102c0 <__lo0bits+0x4e>
 80102b8:	085b      	lsrs	r3, r3, #1
 80102ba:	f100 0001 	add.w	r0, r0, #1
 80102be:	d003      	beq.n	80102c8 <__lo0bits+0x56>
 80102c0:	6013      	str	r3, [r2, #0]
 80102c2:	4770      	bx	lr
 80102c4:	2000      	movs	r0, #0
 80102c6:	4770      	bx	lr
 80102c8:	2020      	movs	r0, #32
 80102ca:	4770      	bx	lr

080102cc <__i2b>:
 80102cc:	b510      	push	{r4, lr}
 80102ce:	460c      	mov	r4, r1
 80102d0:	2101      	movs	r1, #1
 80102d2:	f7ff ff07 	bl	80100e4 <_Balloc>
 80102d6:	4602      	mov	r2, r0
 80102d8:	b928      	cbnz	r0, 80102e6 <__i2b+0x1a>
 80102da:	4b05      	ldr	r3, [pc, #20]	@ (80102f0 <__i2b+0x24>)
 80102dc:	4805      	ldr	r0, [pc, #20]	@ (80102f4 <__i2b+0x28>)
 80102de:	f240 1145 	movw	r1, #325	@ 0x145
 80102e2:	f000 fd2f 	bl	8010d44 <__assert_func>
 80102e6:	2301      	movs	r3, #1
 80102e8:	6144      	str	r4, [r0, #20]
 80102ea:	6103      	str	r3, [r0, #16]
 80102ec:	bd10      	pop	{r4, pc}
 80102ee:	bf00      	nop
 80102f0:	08011664 	.word	0x08011664
 80102f4:	08011675 	.word	0x08011675

080102f8 <__multiply>:
 80102f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102fc:	4617      	mov	r7, r2
 80102fe:	690a      	ldr	r2, [r1, #16]
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	429a      	cmp	r2, r3
 8010304:	bfa8      	it	ge
 8010306:	463b      	movge	r3, r7
 8010308:	4689      	mov	r9, r1
 801030a:	bfa4      	itt	ge
 801030c:	460f      	movge	r7, r1
 801030e:	4699      	movge	r9, r3
 8010310:	693d      	ldr	r5, [r7, #16]
 8010312:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	6879      	ldr	r1, [r7, #4]
 801031a:	eb05 060a 	add.w	r6, r5, sl
 801031e:	42b3      	cmp	r3, r6
 8010320:	b085      	sub	sp, #20
 8010322:	bfb8      	it	lt
 8010324:	3101      	addlt	r1, #1
 8010326:	f7ff fedd 	bl	80100e4 <_Balloc>
 801032a:	b930      	cbnz	r0, 801033a <__multiply+0x42>
 801032c:	4602      	mov	r2, r0
 801032e:	4b41      	ldr	r3, [pc, #260]	@ (8010434 <__multiply+0x13c>)
 8010330:	4841      	ldr	r0, [pc, #260]	@ (8010438 <__multiply+0x140>)
 8010332:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010336:	f000 fd05 	bl	8010d44 <__assert_func>
 801033a:	f100 0414 	add.w	r4, r0, #20
 801033e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010342:	4623      	mov	r3, r4
 8010344:	2200      	movs	r2, #0
 8010346:	4573      	cmp	r3, lr
 8010348:	d320      	bcc.n	801038c <__multiply+0x94>
 801034a:	f107 0814 	add.w	r8, r7, #20
 801034e:	f109 0114 	add.w	r1, r9, #20
 8010352:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010356:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801035a:	9302      	str	r3, [sp, #8]
 801035c:	1beb      	subs	r3, r5, r7
 801035e:	3b15      	subs	r3, #21
 8010360:	f023 0303 	bic.w	r3, r3, #3
 8010364:	3304      	adds	r3, #4
 8010366:	3715      	adds	r7, #21
 8010368:	42bd      	cmp	r5, r7
 801036a:	bf38      	it	cc
 801036c:	2304      	movcc	r3, #4
 801036e:	9301      	str	r3, [sp, #4]
 8010370:	9b02      	ldr	r3, [sp, #8]
 8010372:	9103      	str	r1, [sp, #12]
 8010374:	428b      	cmp	r3, r1
 8010376:	d80c      	bhi.n	8010392 <__multiply+0x9a>
 8010378:	2e00      	cmp	r6, #0
 801037a:	dd03      	ble.n	8010384 <__multiply+0x8c>
 801037c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010380:	2b00      	cmp	r3, #0
 8010382:	d055      	beq.n	8010430 <__multiply+0x138>
 8010384:	6106      	str	r6, [r0, #16]
 8010386:	b005      	add	sp, #20
 8010388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801038c:	f843 2b04 	str.w	r2, [r3], #4
 8010390:	e7d9      	b.n	8010346 <__multiply+0x4e>
 8010392:	f8b1 a000 	ldrh.w	sl, [r1]
 8010396:	f1ba 0f00 	cmp.w	sl, #0
 801039a:	d01f      	beq.n	80103dc <__multiply+0xe4>
 801039c:	46c4      	mov	ip, r8
 801039e:	46a1      	mov	r9, r4
 80103a0:	2700      	movs	r7, #0
 80103a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80103a6:	f8d9 3000 	ldr.w	r3, [r9]
 80103aa:	fa1f fb82 	uxth.w	fp, r2
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80103b4:	443b      	add	r3, r7
 80103b6:	f8d9 7000 	ldr.w	r7, [r9]
 80103ba:	0c12      	lsrs	r2, r2, #16
 80103bc:	0c3f      	lsrs	r7, r7, #16
 80103be:	fb0a 7202 	mla	r2, sl, r2, r7
 80103c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80103cc:	4565      	cmp	r5, ip
 80103ce:	f849 3b04 	str.w	r3, [r9], #4
 80103d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80103d6:	d8e4      	bhi.n	80103a2 <__multiply+0xaa>
 80103d8:	9b01      	ldr	r3, [sp, #4]
 80103da:	50e7      	str	r7, [r4, r3]
 80103dc:	9b03      	ldr	r3, [sp, #12]
 80103de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80103e2:	3104      	adds	r1, #4
 80103e4:	f1b9 0f00 	cmp.w	r9, #0
 80103e8:	d020      	beq.n	801042c <__multiply+0x134>
 80103ea:	6823      	ldr	r3, [r4, #0]
 80103ec:	4647      	mov	r7, r8
 80103ee:	46a4      	mov	ip, r4
 80103f0:	f04f 0a00 	mov.w	sl, #0
 80103f4:	f8b7 b000 	ldrh.w	fp, [r7]
 80103f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80103fc:	fb09 220b 	mla	r2, r9, fp, r2
 8010400:	4452      	add	r2, sl
 8010402:	b29b      	uxth	r3, r3
 8010404:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010408:	f84c 3b04 	str.w	r3, [ip], #4
 801040c:	f857 3b04 	ldr.w	r3, [r7], #4
 8010410:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010414:	f8bc 3000 	ldrh.w	r3, [ip]
 8010418:	fb09 330a 	mla	r3, r9, sl, r3
 801041c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010420:	42bd      	cmp	r5, r7
 8010422:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010426:	d8e5      	bhi.n	80103f4 <__multiply+0xfc>
 8010428:	9a01      	ldr	r2, [sp, #4]
 801042a:	50a3      	str	r3, [r4, r2]
 801042c:	3404      	adds	r4, #4
 801042e:	e79f      	b.n	8010370 <__multiply+0x78>
 8010430:	3e01      	subs	r6, #1
 8010432:	e7a1      	b.n	8010378 <__multiply+0x80>
 8010434:	08011664 	.word	0x08011664
 8010438:	08011675 	.word	0x08011675

0801043c <__pow5mult>:
 801043c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010440:	4615      	mov	r5, r2
 8010442:	f012 0203 	ands.w	r2, r2, #3
 8010446:	4607      	mov	r7, r0
 8010448:	460e      	mov	r6, r1
 801044a:	d007      	beq.n	801045c <__pow5mult+0x20>
 801044c:	4c25      	ldr	r4, [pc, #148]	@ (80104e4 <__pow5mult+0xa8>)
 801044e:	3a01      	subs	r2, #1
 8010450:	2300      	movs	r3, #0
 8010452:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010456:	f7ff fea7 	bl	80101a8 <__multadd>
 801045a:	4606      	mov	r6, r0
 801045c:	10ad      	asrs	r5, r5, #2
 801045e:	d03d      	beq.n	80104dc <__pow5mult+0xa0>
 8010460:	69fc      	ldr	r4, [r7, #28]
 8010462:	b97c      	cbnz	r4, 8010484 <__pow5mult+0x48>
 8010464:	2010      	movs	r0, #16
 8010466:	f7ff fd87 	bl	800ff78 <malloc>
 801046a:	4602      	mov	r2, r0
 801046c:	61f8      	str	r0, [r7, #28]
 801046e:	b928      	cbnz	r0, 801047c <__pow5mult+0x40>
 8010470:	4b1d      	ldr	r3, [pc, #116]	@ (80104e8 <__pow5mult+0xac>)
 8010472:	481e      	ldr	r0, [pc, #120]	@ (80104ec <__pow5mult+0xb0>)
 8010474:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010478:	f000 fc64 	bl	8010d44 <__assert_func>
 801047c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010480:	6004      	str	r4, [r0, #0]
 8010482:	60c4      	str	r4, [r0, #12]
 8010484:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010488:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801048c:	b94c      	cbnz	r4, 80104a2 <__pow5mult+0x66>
 801048e:	f240 2171 	movw	r1, #625	@ 0x271
 8010492:	4638      	mov	r0, r7
 8010494:	f7ff ff1a 	bl	80102cc <__i2b>
 8010498:	2300      	movs	r3, #0
 801049a:	f8c8 0008 	str.w	r0, [r8, #8]
 801049e:	4604      	mov	r4, r0
 80104a0:	6003      	str	r3, [r0, #0]
 80104a2:	f04f 0900 	mov.w	r9, #0
 80104a6:	07eb      	lsls	r3, r5, #31
 80104a8:	d50a      	bpl.n	80104c0 <__pow5mult+0x84>
 80104aa:	4631      	mov	r1, r6
 80104ac:	4622      	mov	r2, r4
 80104ae:	4638      	mov	r0, r7
 80104b0:	f7ff ff22 	bl	80102f8 <__multiply>
 80104b4:	4631      	mov	r1, r6
 80104b6:	4680      	mov	r8, r0
 80104b8:	4638      	mov	r0, r7
 80104ba:	f7ff fe53 	bl	8010164 <_Bfree>
 80104be:	4646      	mov	r6, r8
 80104c0:	106d      	asrs	r5, r5, #1
 80104c2:	d00b      	beq.n	80104dc <__pow5mult+0xa0>
 80104c4:	6820      	ldr	r0, [r4, #0]
 80104c6:	b938      	cbnz	r0, 80104d8 <__pow5mult+0x9c>
 80104c8:	4622      	mov	r2, r4
 80104ca:	4621      	mov	r1, r4
 80104cc:	4638      	mov	r0, r7
 80104ce:	f7ff ff13 	bl	80102f8 <__multiply>
 80104d2:	6020      	str	r0, [r4, #0]
 80104d4:	f8c0 9000 	str.w	r9, [r0]
 80104d8:	4604      	mov	r4, r0
 80104da:	e7e4      	b.n	80104a6 <__pow5mult+0x6a>
 80104dc:	4630      	mov	r0, r6
 80104de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104e2:	bf00      	nop
 80104e4:	08011728 	.word	0x08011728
 80104e8:	080115f5 	.word	0x080115f5
 80104ec:	08011675 	.word	0x08011675

080104f0 <__lshift>:
 80104f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104f4:	460c      	mov	r4, r1
 80104f6:	6849      	ldr	r1, [r1, #4]
 80104f8:	6923      	ldr	r3, [r4, #16]
 80104fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80104fe:	68a3      	ldr	r3, [r4, #8]
 8010500:	4607      	mov	r7, r0
 8010502:	4691      	mov	r9, r2
 8010504:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010508:	f108 0601 	add.w	r6, r8, #1
 801050c:	42b3      	cmp	r3, r6
 801050e:	db0b      	blt.n	8010528 <__lshift+0x38>
 8010510:	4638      	mov	r0, r7
 8010512:	f7ff fde7 	bl	80100e4 <_Balloc>
 8010516:	4605      	mov	r5, r0
 8010518:	b948      	cbnz	r0, 801052e <__lshift+0x3e>
 801051a:	4602      	mov	r2, r0
 801051c:	4b28      	ldr	r3, [pc, #160]	@ (80105c0 <__lshift+0xd0>)
 801051e:	4829      	ldr	r0, [pc, #164]	@ (80105c4 <__lshift+0xd4>)
 8010520:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010524:	f000 fc0e 	bl	8010d44 <__assert_func>
 8010528:	3101      	adds	r1, #1
 801052a:	005b      	lsls	r3, r3, #1
 801052c:	e7ee      	b.n	801050c <__lshift+0x1c>
 801052e:	2300      	movs	r3, #0
 8010530:	f100 0114 	add.w	r1, r0, #20
 8010534:	f100 0210 	add.w	r2, r0, #16
 8010538:	4618      	mov	r0, r3
 801053a:	4553      	cmp	r3, sl
 801053c:	db33      	blt.n	80105a6 <__lshift+0xb6>
 801053e:	6920      	ldr	r0, [r4, #16]
 8010540:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010544:	f104 0314 	add.w	r3, r4, #20
 8010548:	f019 091f 	ands.w	r9, r9, #31
 801054c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010550:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010554:	d02b      	beq.n	80105ae <__lshift+0xbe>
 8010556:	f1c9 0e20 	rsb	lr, r9, #32
 801055a:	468a      	mov	sl, r1
 801055c:	2200      	movs	r2, #0
 801055e:	6818      	ldr	r0, [r3, #0]
 8010560:	fa00 f009 	lsl.w	r0, r0, r9
 8010564:	4310      	orrs	r0, r2
 8010566:	f84a 0b04 	str.w	r0, [sl], #4
 801056a:	f853 2b04 	ldr.w	r2, [r3], #4
 801056e:	459c      	cmp	ip, r3
 8010570:	fa22 f20e 	lsr.w	r2, r2, lr
 8010574:	d8f3      	bhi.n	801055e <__lshift+0x6e>
 8010576:	ebac 0304 	sub.w	r3, ip, r4
 801057a:	3b15      	subs	r3, #21
 801057c:	f023 0303 	bic.w	r3, r3, #3
 8010580:	3304      	adds	r3, #4
 8010582:	f104 0015 	add.w	r0, r4, #21
 8010586:	4560      	cmp	r0, ip
 8010588:	bf88      	it	hi
 801058a:	2304      	movhi	r3, #4
 801058c:	50ca      	str	r2, [r1, r3]
 801058e:	b10a      	cbz	r2, 8010594 <__lshift+0xa4>
 8010590:	f108 0602 	add.w	r6, r8, #2
 8010594:	3e01      	subs	r6, #1
 8010596:	4638      	mov	r0, r7
 8010598:	612e      	str	r6, [r5, #16]
 801059a:	4621      	mov	r1, r4
 801059c:	f7ff fde2 	bl	8010164 <_Bfree>
 80105a0:	4628      	mov	r0, r5
 80105a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80105aa:	3301      	adds	r3, #1
 80105ac:	e7c5      	b.n	801053a <__lshift+0x4a>
 80105ae:	3904      	subs	r1, #4
 80105b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80105b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80105b8:	459c      	cmp	ip, r3
 80105ba:	d8f9      	bhi.n	80105b0 <__lshift+0xc0>
 80105bc:	e7ea      	b.n	8010594 <__lshift+0xa4>
 80105be:	bf00      	nop
 80105c0:	08011664 	.word	0x08011664
 80105c4:	08011675 	.word	0x08011675

080105c8 <__mcmp>:
 80105c8:	690a      	ldr	r2, [r1, #16]
 80105ca:	4603      	mov	r3, r0
 80105cc:	6900      	ldr	r0, [r0, #16]
 80105ce:	1a80      	subs	r0, r0, r2
 80105d0:	b530      	push	{r4, r5, lr}
 80105d2:	d10e      	bne.n	80105f2 <__mcmp+0x2a>
 80105d4:	3314      	adds	r3, #20
 80105d6:	3114      	adds	r1, #20
 80105d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80105dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80105e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80105e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80105e8:	4295      	cmp	r5, r2
 80105ea:	d003      	beq.n	80105f4 <__mcmp+0x2c>
 80105ec:	d205      	bcs.n	80105fa <__mcmp+0x32>
 80105ee:	f04f 30ff 	mov.w	r0, #4294967295
 80105f2:	bd30      	pop	{r4, r5, pc}
 80105f4:	42a3      	cmp	r3, r4
 80105f6:	d3f3      	bcc.n	80105e0 <__mcmp+0x18>
 80105f8:	e7fb      	b.n	80105f2 <__mcmp+0x2a>
 80105fa:	2001      	movs	r0, #1
 80105fc:	e7f9      	b.n	80105f2 <__mcmp+0x2a>
	...

08010600 <__mdiff>:
 8010600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010604:	4689      	mov	r9, r1
 8010606:	4606      	mov	r6, r0
 8010608:	4611      	mov	r1, r2
 801060a:	4648      	mov	r0, r9
 801060c:	4614      	mov	r4, r2
 801060e:	f7ff ffdb 	bl	80105c8 <__mcmp>
 8010612:	1e05      	subs	r5, r0, #0
 8010614:	d112      	bne.n	801063c <__mdiff+0x3c>
 8010616:	4629      	mov	r1, r5
 8010618:	4630      	mov	r0, r6
 801061a:	f7ff fd63 	bl	80100e4 <_Balloc>
 801061e:	4602      	mov	r2, r0
 8010620:	b928      	cbnz	r0, 801062e <__mdiff+0x2e>
 8010622:	4b3f      	ldr	r3, [pc, #252]	@ (8010720 <__mdiff+0x120>)
 8010624:	f240 2137 	movw	r1, #567	@ 0x237
 8010628:	483e      	ldr	r0, [pc, #248]	@ (8010724 <__mdiff+0x124>)
 801062a:	f000 fb8b 	bl	8010d44 <__assert_func>
 801062e:	2301      	movs	r3, #1
 8010630:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010634:	4610      	mov	r0, r2
 8010636:	b003      	add	sp, #12
 8010638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801063c:	bfbc      	itt	lt
 801063e:	464b      	movlt	r3, r9
 8010640:	46a1      	movlt	r9, r4
 8010642:	4630      	mov	r0, r6
 8010644:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010648:	bfba      	itte	lt
 801064a:	461c      	movlt	r4, r3
 801064c:	2501      	movlt	r5, #1
 801064e:	2500      	movge	r5, #0
 8010650:	f7ff fd48 	bl	80100e4 <_Balloc>
 8010654:	4602      	mov	r2, r0
 8010656:	b918      	cbnz	r0, 8010660 <__mdiff+0x60>
 8010658:	4b31      	ldr	r3, [pc, #196]	@ (8010720 <__mdiff+0x120>)
 801065a:	f240 2145 	movw	r1, #581	@ 0x245
 801065e:	e7e3      	b.n	8010628 <__mdiff+0x28>
 8010660:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010664:	6926      	ldr	r6, [r4, #16]
 8010666:	60c5      	str	r5, [r0, #12]
 8010668:	f109 0310 	add.w	r3, r9, #16
 801066c:	f109 0514 	add.w	r5, r9, #20
 8010670:	f104 0e14 	add.w	lr, r4, #20
 8010674:	f100 0b14 	add.w	fp, r0, #20
 8010678:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801067c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010680:	9301      	str	r3, [sp, #4]
 8010682:	46d9      	mov	r9, fp
 8010684:	f04f 0c00 	mov.w	ip, #0
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801068e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010692:	9301      	str	r3, [sp, #4]
 8010694:	fa1f f38a 	uxth.w	r3, sl
 8010698:	4619      	mov	r1, r3
 801069a:	b283      	uxth	r3, r0
 801069c:	1acb      	subs	r3, r1, r3
 801069e:	0c00      	lsrs	r0, r0, #16
 80106a0:	4463      	add	r3, ip
 80106a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80106a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80106b0:	4576      	cmp	r6, lr
 80106b2:	f849 3b04 	str.w	r3, [r9], #4
 80106b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80106ba:	d8e5      	bhi.n	8010688 <__mdiff+0x88>
 80106bc:	1b33      	subs	r3, r6, r4
 80106be:	3b15      	subs	r3, #21
 80106c0:	f023 0303 	bic.w	r3, r3, #3
 80106c4:	3415      	adds	r4, #21
 80106c6:	3304      	adds	r3, #4
 80106c8:	42a6      	cmp	r6, r4
 80106ca:	bf38      	it	cc
 80106cc:	2304      	movcc	r3, #4
 80106ce:	441d      	add	r5, r3
 80106d0:	445b      	add	r3, fp
 80106d2:	461e      	mov	r6, r3
 80106d4:	462c      	mov	r4, r5
 80106d6:	4544      	cmp	r4, r8
 80106d8:	d30e      	bcc.n	80106f8 <__mdiff+0xf8>
 80106da:	f108 0103 	add.w	r1, r8, #3
 80106de:	1b49      	subs	r1, r1, r5
 80106e0:	f021 0103 	bic.w	r1, r1, #3
 80106e4:	3d03      	subs	r5, #3
 80106e6:	45a8      	cmp	r8, r5
 80106e8:	bf38      	it	cc
 80106ea:	2100      	movcc	r1, #0
 80106ec:	440b      	add	r3, r1
 80106ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80106f2:	b191      	cbz	r1, 801071a <__mdiff+0x11a>
 80106f4:	6117      	str	r7, [r2, #16]
 80106f6:	e79d      	b.n	8010634 <__mdiff+0x34>
 80106f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80106fc:	46e6      	mov	lr, ip
 80106fe:	0c08      	lsrs	r0, r1, #16
 8010700:	fa1c fc81 	uxtah	ip, ip, r1
 8010704:	4471      	add	r1, lr
 8010706:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801070a:	b289      	uxth	r1, r1
 801070c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010710:	f846 1b04 	str.w	r1, [r6], #4
 8010714:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010718:	e7dd      	b.n	80106d6 <__mdiff+0xd6>
 801071a:	3f01      	subs	r7, #1
 801071c:	e7e7      	b.n	80106ee <__mdiff+0xee>
 801071e:	bf00      	nop
 8010720:	08011664 	.word	0x08011664
 8010724:	08011675 	.word	0x08011675

08010728 <__d2b>:
 8010728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801072c:	460f      	mov	r7, r1
 801072e:	2101      	movs	r1, #1
 8010730:	ec59 8b10 	vmov	r8, r9, d0
 8010734:	4616      	mov	r6, r2
 8010736:	f7ff fcd5 	bl	80100e4 <_Balloc>
 801073a:	4604      	mov	r4, r0
 801073c:	b930      	cbnz	r0, 801074c <__d2b+0x24>
 801073e:	4602      	mov	r2, r0
 8010740:	4b23      	ldr	r3, [pc, #140]	@ (80107d0 <__d2b+0xa8>)
 8010742:	4824      	ldr	r0, [pc, #144]	@ (80107d4 <__d2b+0xac>)
 8010744:	f240 310f 	movw	r1, #783	@ 0x30f
 8010748:	f000 fafc 	bl	8010d44 <__assert_func>
 801074c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010754:	b10d      	cbz	r5, 801075a <__d2b+0x32>
 8010756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801075a:	9301      	str	r3, [sp, #4]
 801075c:	f1b8 0300 	subs.w	r3, r8, #0
 8010760:	d023      	beq.n	80107aa <__d2b+0x82>
 8010762:	4668      	mov	r0, sp
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	f7ff fd84 	bl	8010272 <__lo0bits>
 801076a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801076e:	b1d0      	cbz	r0, 80107a6 <__d2b+0x7e>
 8010770:	f1c0 0320 	rsb	r3, r0, #32
 8010774:	fa02 f303 	lsl.w	r3, r2, r3
 8010778:	430b      	orrs	r3, r1
 801077a:	40c2      	lsrs	r2, r0
 801077c:	6163      	str	r3, [r4, #20]
 801077e:	9201      	str	r2, [sp, #4]
 8010780:	9b01      	ldr	r3, [sp, #4]
 8010782:	61a3      	str	r3, [r4, #24]
 8010784:	2b00      	cmp	r3, #0
 8010786:	bf0c      	ite	eq
 8010788:	2201      	moveq	r2, #1
 801078a:	2202      	movne	r2, #2
 801078c:	6122      	str	r2, [r4, #16]
 801078e:	b1a5      	cbz	r5, 80107ba <__d2b+0x92>
 8010790:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010794:	4405      	add	r5, r0
 8010796:	603d      	str	r5, [r7, #0]
 8010798:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801079c:	6030      	str	r0, [r6, #0]
 801079e:	4620      	mov	r0, r4
 80107a0:	b003      	add	sp, #12
 80107a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107a6:	6161      	str	r1, [r4, #20]
 80107a8:	e7ea      	b.n	8010780 <__d2b+0x58>
 80107aa:	a801      	add	r0, sp, #4
 80107ac:	f7ff fd61 	bl	8010272 <__lo0bits>
 80107b0:	9b01      	ldr	r3, [sp, #4]
 80107b2:	6163      	str	r3, [r4, #20]
 80107b4:	3020      	adds	r0, #32
 80107b6:	2201      	movs	r2, #1
 80107b8:	e7e8      	b.n	801078c <__d2b+0x64>
 80107ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80107be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80107c2:	6038      	str	r0, [r7, #0]
 80107c4:	6918      	ldr	r0, [r3, #16]
 80107c6:	f7ff fd35 	bl	8010234 <__hi0bits>
 80107ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80107ce:	e7e5      	b.n	801079c <__d2b+0x74>
 80107d0:	08011664 	.word	0x08011664
 80107d4:	08011675 	.word	0x08011675

080107d8 <__sfputc_r>:
 80107d8:	6893      	ldr	r3, [r2, #8]
 80107da:	3b01      	subs	r3, #1
 80107dc:	2b00      	cmp	r3, #0
 80107de:	b410      	push	{r4}
 80107e0:	6093      	str	r3, [r2, #8]
 80107e2:	da08      	bge.n	80107f6 <__sfputc_r+0x1e>
 80107e4:	6994      	ldr	r4, [r2, #24]
 80107e6:	42a3      	cmp	r3, r4
 80107e8:	db01      	blt.n	80107ee <__sfputc_r+0x16>
 80107ea:	290a      	cmp	r1, #10
 80107ec:	d103      	bne.n	80107f6 <__sfputc_r+0x1e>
 80107ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107f2:	f7fe bc10 	b.w	800f016 <__swbuf_r>
 80107f6:	6813      	ldr	r3, [r2, #0]
 80107f8:	1c58      	adds	r0, r3, #1
 80107fa:	6010      	str	r0, [r2, #0]
 80107fc:	7019      	strb	r1, [r3, #0]
 80107fe:	4608      	mov	r0, r1
 8010800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010804:	4770      	bx	lr

08010806 <__sfputs_r>:
 8010806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010808:	4606      	mov	r6, r0
 801080a:	460f      	mov	r7, r1
 801080c:	4614      	mov	r4, r2
 801080e:	18d5      	adds	r5, r2, r3
 8010810:	42ac      	cmp	r4, r5
 8010812:	d101      	bne.n	8010818 <__sfputs_r+0x12>
 8010814:	2000      	movs	r0, #0
 8010816:	e007      	b.n	8010828 <__sfputs_r+0x22>
 8010818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801081c:	463a      	mov	r2, r7
 801081e:	4630      	mov	r0, r6
 8010820:	f7ff ffda 	bl	80107d8 <__sfputc_r>
 8010824:	1c43      	adds	r3, r0, #1
 8010826:	d1f3      	bne.n	8010810 <__sfputs_r+0xa>
 8010828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801082c <_vfiprintf_r>:
 801082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010830:	460d      	mov	r5, r1
 8010832:	b09d      	sub	sp, #116	@ 0x74
 8010834:	4614      	mov	r4, r2
 8010836:	4698      	mov	r8, r3
 8010838:	4606      	mov	r6, r0
 801083a:	b118      	cbz	r0, 8010844 <_vfiprintf_r+0x18>
 801083c:	6a03      	ldr	r3, [r0, #32]
 801083e:	b90b      	cbnz	r3, 8010844 <_vfiprintf_r+0x18>
 8010840:	f7fe faf8 	bl	800ee34 <__sinit>
 8010844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010846:	07d9      	lsls	r1, r3, #31
 8010848:	d405      	bmi.n	8010856 <_vfiprintf_r+0x2a>
 801084a:	89ab      	ldrh	r3, [r5, #12]
 801084c:	059a      	lsls	r2, r3, #22
 801084e:	d402      	bmi.n	8010856 <_vfiprintf_r+0x2a>
 8010850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010852:	f7fe fd50 	bl	800f2f6 <__retarget_lock_acquire_recursive>
 8010856:	89ab      	ldrh	r3, [r5, #12]
 8010858:	071b      	lsls	r3, r3, #28
 801085a:	d501      	bpl.n	8010860 <_vfiprintf_r+0x34>
 801085c:	692b      	ldr	r3, [r5, #16]
 801085e:	b99b      	cbnz	r3, 8010888 <_vfiprintf_r+0x5c>
 8010860:	4629      	mov	r1, r5
 8010862:	4630      	mov	r0, r6
 8010864:	f7fe fc16 	bl	800f094 <__swsetup_r>
 8010868:	b170      	cbz	r0, 8010888 <_vfiprintf_r+0x5c>
 801086a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801086c:	07dc      	lsls	r4, r3, #31
 801086e:	d504      	bpl.n	801087a <_vfiprintf_r+0x4e>
 8010870:	f04f 30ff 	mov.w	r0, #4294967295
 8010874:	b01d      	add	sp, #116	@ 0x74
 8010876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801087a:	89ab      	ldrh	r3, [r5, #12]
 801087c:	0598      	lsls	r0, r3, #22
 801087e:	d4f7      	bmi.n	8010870 <_vfiprintf_r+0x44>
 8010880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010882:	f7fe fd39 	bl	800f2f8 <__retarget_lock_release_recursive>
 8010886:	e7f3      	b.n	8010870 <_vfiprintf_r+0x44>
 8010888:	2300      	movs	r3, #0
 801088a:	9309      	str	r3, [sp, #36]	@ 0x24
 801088c:	2320      	movs	r3, #32
 801088e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010892:	f8cd 800c 	str.w	r8, [sp, #12]
 8010896:	2330      	movs	r3, #48	@ 0x30
 8010898:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010a48 <_vfiprintf_r+0x21c>
 801089c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80108a0:	f04f 0901 	mov.w	r9, #1
 80108a4:	4623      	mov	r3, r4
 80108a6:	469a      	mov	sl, r3
 80108a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108ac:	b10a      	cbz	r2, 80108b2 <_vfiprintf_r+0x86>
 80108ae:	2a25      	cmp	r2, #37	@ 0x25
 80108b0:	d1f9      	bne.n	80108a6 <_vfiprintf_r+0x7a>
 80108b2:	ebba 0b04 	subs.w	fp, sl, r4
 80108b6:	d00b      	beq.n	80108d0 <_vfiprintf_r+0xa4>
 80108b8:	465b      	mov	r3, fp
 80108ba:	4622      	mov	r2, r4
 80108bc:	4629      	mov	r1, r5
 80108be:	4630      	mov	r0, r6
 80108c0:	f7ff ffa1 	bl	8010806 <__sfputs_r>
 80108c4:	3001      	adds	r0, #1
 80108c6:	f000 80a7 	beq.w	8010a18 <_vfiprintf_r+0x1ec>
 80108ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108cc:	445a      	add	r2, fp
 80108ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80108d0:	f89a 3000 	ldrb.w	r3, [sl]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f000 809f 	beq.w	8010a18 <_vfiprintf_r+0x1ec>
 80108da:	2300      	movs	r3, #0
 80108dc:	f04f 32ff 	mov.w	r2, #4294967295
 80108e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108e4:	f10a 0a01 	add.w	sl, sl, #1
 80108e8:	9304      	str	r3, [sp, #16]
 80108ea:	9307      	str	r3, [sp, #28]
 80108ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80108f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80108f2:	4654      	mov	r4, sl
 80108f4:	2205      	movs	r2, #5
 80108f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108fa:	4853      	ldr	r0, [pc, #332]	@ (8010a48 <_vfiprintf_r+0x21c>)
 80108fc:	f7ef fcf0 	bl	80002e0 <memchr>
 8010900:	9a04      	ldr	r2, [sp, #16]
 8010902:	b9d8      	cbnz	r0, 801093c <_vfiprintf_r+0x110>
 8010904:	06d1      	lsls	r1, r2, #27
 8010906:	bf44      	itt	mi
 8010908:	2320      	movmi	r3, #32
 801090a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801090e:	0713      	lsls	r3, r2, #28
 8010910:	bf44      	itt	mi
 8010912:	232b      	movmi	r3, #43	@ 0x2b
 8010914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010918:	f89a 3000 	ldrb.w	r3, [sl]
 801091c:	2b2a      	cmp	r3, #42	@ 0x2a
 801091e:	d015      	beq.n	801094c <_vfiprintf_r+0x120>
 8010920:	9a07      	ldr	r2, [sp, #28]
 8010922:	4654      	mov	r4, sl
 8010924:	2000      	movs	r0, #0
 8010926:	f04f 0c0a 	mov.w	ip, #10
 801092a:	4621      	mov	r1, r4
 801092c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010930:	3b30      	subs	r3, #48	@ 0x30
 8010932:	2b09      	cmp	r3, #9
 8010934:	d94b      	bls.n	80109ce <_vfiprintf_r+0x1a2>
 8010936:	b1b0      	cbz	r0, 8010966 <_vfiprintf_r+0x13a>
 8010938:	9207      	str	r2, [sp, #28]
 801093a:	e014      	b.n	8010966 <_vfiprintf_r+0x13a>
 801093c:	eba0 0308 	sub.w	r3, r0, r8
 8010940:	fa09 f303 	lsl.w	r3, r9, r3
 8010944:	4313      	orrs	r3, r2
 8010946:	9304      	str	r3, [sp, #16]
 8010948:	46a2      	mov	sl, r4
 801094a:	e7d2      	b.n	80108f2 <_vfiprintf_r+0xc6>
 801094c:	9b03      	ldr	r3, [sp, #12]
 801094e:	1d19      	adds	r1, r3, #4
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	9103      	str	r1, [sp, #12]
 8010954:	2b00      	cmp	r3, #0
 8010956:	bfbb      	ittet	lt
 8010958:	425b      	neglt	r3, r3
 801095a:	f042 0202 	orrlt.w	r2, r2, #2
 801095e:	9307      	strge	r3, [sp, #28]
 8010960:	9307      	strlt	r3, [sp, #28]
 8010962:	bfb8      	it	lt
 8010964:	9204      	strlt	r2, [sp, #16]
 8010966:	7823      	ldrb	r3, [r4, #0]
 8010968:	2b2e      	cmp	r3, #46	@ 0x2e
 801096a:	d10a      	bne.n	8010982 <_vfiprintf_r+0x156>
 801096c:	7863      	ldrb	r3, [r4, #1]
 801096e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010970:	d132      	bne.n	80109d8 <_vfiprintf_r+0x1ac>
 8010972:	9b03      	ldr	r3, [sp, #12]
 8010974:	1d1a      	adds	r2, r3, #4
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	9203      	str	r2, [sp, #12]
 801097a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801097e:	3402      	adds	r4, #2
 8010980:	9305      	str	r3, [sp, #20]
 8010982:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010a58 <_vfiprintf_r+0x22c>
 8010986:	7821      	ldrb	r1, [r4, #0]
 8010988:	2203      	movs	r2, #3
 801098a:	4650      	mov	r0, sl
 801098c:	f7ef fca8 	bl	80002e0 <memchr>
 8010990:	b138      	cbz	r0, 80109a2 <_vfiprintf_r+0x176>
 8010992:	9b04      	ldr	r3, [sp, #16]
 8010994:	eba0 000a 	sub.w	r0, r0, sl
 8010998:	2240      	movs	r2, #64	@ 0x40
 801099a:	4082      	lsls	r2, r0
 801099c:	4313      	orrs	r3, r2
 801099e:	3401      	adds	r4, #1
 80109a0:	9304      	str	r3, [sp, #16]
 80109a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109a6:	4829      	ldr	r0, [pc, #164]	@ (8010a4c <_vfiprintf_r+0x220>)
 80109a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80109ac:	2206      	movs	r2, #6
 80109ae:	f7ef fc97 	bl	80002e0 <memchr>
 80109b2:	2800      	cmp	r0, #0
 80109b4:	d03f      	beq.n	8010a36 <_vfiprintf_r+0x20a>
 80109b6:	4b26      	ldr	r3, [pc, #152]	@ (8010a50 <_vfiprintf_r+0x224>)
 80109b8:	bb1b      	cbnz	r3, 8010a02 <_vfiprintf_r+0x1d6>
 80109ba:	9b03      	ldr	r3, [sp, #12]
 80109bc:	3307      	adds	r3, #7
 80109be:	f023 0307 	bic.w	r3, r3, #7
 80109c2:	3308      	adds	r3, #8
 80109c4:	9303      	str	r3, [sp, #12]
 80109c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109c8:	443b      	add	r3, r7
 80109ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80109cc:	e76a      	b.n	80108a4 <_vfiprintf_r+0x78>
 80109ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80109d2:	460c      	mov	r4, r1
 80109d4:	2001      	movs	r0, #1
 80109d6:	e7a8      	b.n	801092a <_vfiprintf_r+0xfe>
 80109d8:	2300      	movs	r3, #0
 80109da:	3401      	adds	r4, #1
 80109dc:	9305      	str	r3, [sp, #20]
 80109de:	4619      	mov	r1, r3
 80109e0:	f04f 0c0a 	mov.w	ip, #10
 80109e4:	4620      	mov	r0, r4
 80109e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109ea:	3a30      	subs	r2, #48	@ 0x30
 80109ec:	2a09      	cmp	r2, #9
 80109ee:	d903      	bls.n	80109f8 <_vfiprintf_r+0x1cc>
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d0c6      	beq.n	8010982 <_vfiprintf_r+0x156>
 80109f4:	9105      	str	r1, [sp, #20]
 80109f6:	e7c4      	b.n	8010982 <_vfiprintf_r+0x156>
 80109f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80109fc:	4604      	mov	r4, r0
 80109fe:	2301      	movs	r3, #1
 8010a00:	e7f0      	b.n	80109e4 <_vfiprintf_r+0x1b8>
 8010a02:	ab03      	add	r3, sp, #12
 8010a04:	9300      	str	r3, [sp, #0]
 8010a06:	462a      	mov	r2, r5
 8010a08:	4b12      	ldr	r3, [pc, #72]	@ (8010a54 <_vfiprintf_r+0x228>)
 8010a0a:	a904      	add	r1, sp, #16
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	f7fd fddf 	bl	800e5d0 <_printf_float>
 8010a12:	4607      	mov	r7, r0
 8010a14:	1c78      	adds	r0, r7, #1
 8010a16:	d1d6      	bne.n	80109c6 <_vfiprintf_r+0x19a>
 8010a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a1a:	07d9      	lsls	r1, r3, #31
 8010a1c:	d405      	bmi.n	8010a2a <_vfiprintf_r+0x1fe>
 8010a1e:	89ab      	ldrh	r3, [r5, #12]
 8010a20:	059a      	lsls	r2, r3, #22
 8010a22:	d402      	bmi.n	8010a2a <_vfiprintf_r+0x1fe>
 8010a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a26:	f7fe fc67 	bl	800f2f8 <__retarget_lock_release_recursive>
 8010a2a:	89ab      	ldrh	r3, [r5, #12]
 8010a2c:	065b      	lsls	r3, r3, #25
 8010a2e:	f53f af1f 	bmi.w	8010870 <_vfiprintf_r+0x44>
 8010a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a34:	e71e      	b.n	8010874 <_vfiprintf_r+0x48>
 8010a36:	ab03      	add	r3, sp, #12
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	462a      	mov	r2, r5
 8010a3c:	4b05      	ldr	r3, [pc, #20]	@ (8010a54 <_vfiprintf_r+0x228>)
 8010a3e:	a904      	add	r1, sp, #16
 8010a40:	4630      	mov	r0, r6
 8010a42:	f7fe f84d 	bl	800eae0 <_printf_i>
 8010a46:	e7e4      	b.n	8010a12 <_vfiprintf_r+0x1e6>
 8010a48:	080116ce 	.word	0x080116ce
 8010a4c:	080116d8 	.word	0x080116d8
 8010a50:	0800e5d1 	.word	0x0800e5d1
 8010a54:	08010807 	.word	0x08010807
 8010a58:	080116d4 	.word	0x080116d4

08010a5c <__sflush_r>:
 8010a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a64:	0716      	lsls	r6, r2, #28
 8010a66:	4605      	mov	r5, r0
 8010a68:	460c      	mov	r4, r1
 8010a6a:	d454      	bmi.n	8010b16 <__sflush_r+0xba>
 8010a6c:	684b      	ldr	r3, [r1, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	dc02      	bgt.n	8010a78 <__sflush_r+0x1c>
 8010a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	dd48      	ble.n	8010b0a <__sflush_r+0xae>
 8010a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010a7a:	2e00      	cmp	r6, #0
 8010a7c:	d045      	beq.n	8010b0a <__sflush_r+0xae>
 8010a7e:	2300      	movs	r3, #0
 8010a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010a84:	682f      	ldr	r7, [r5, #0]
 8010a86:	6a21      	ldr	r1, [r4, #32]
 8010a88:	602b      	str	r3, [r5, #0]
 8010a8a:	d030      	beq.n	8010aee <__sflush_r+0x92>
 8010a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010a8e:	89a3      	ldrh	r3, [r4, #12]
 8010a90:	0759      	lsls	r1, r3, #29
 8010a92:	d505      	bpl.n	8010aa0 <__sflush_r+0x44>
 8010a94:	6863      	ldr	r3, [r4, #4]
 8010a96:	1ad2      	subs	r2, r2, r3
 8010a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010a9a:	b10b      	cbz	r3, 8010aa0 <__sflush_r+0x44>
 8010a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010a9e:	1ad2      	subs	r2, r2, r3
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010aa4:	6a21      	ldr	r1, [r4, #32]
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	47b0      	blx	r6
 8010aaa:	1c43      	adds	r3, r0, #1
 8010aac:	89a3      	ldrh	r3, [r4, #12]
 8010aae:	d106      	bne.n	8010abe <__sflush_r+0x62>
 8010ab0:	6829      	ldr	r1, [r5, #0]
 8010ab2:	291d      	cmp	r1, #29
 8010ab4:	d82b      	bhi.n	8010b0e <__sflush_r+0xb2>
 8010ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8010b60 <__sflush_r+0x104>)
 8010ab8:	40ca      	lsrs	r2, r1
 8010aba:	07d6      	lsls	r6, r2, #31
 8010abc:	d527      	bpl.n	8010b0e <__sflush_r+0xb2>
 8010abe:	2200      	movs	r2, #0
 8010ac0:	6062      	str	r2, [r4, #4]
 8010ac2:	04d9      	lsls	r1, r3, #19
 8010ac4:	6922      	ldr	r2, [r4, #16]
 8010ac6:	6022      	str	r2, [r4, #0]
 8010ac8:	d504      	bpl.n	8010ad4 <__sflush_r+0x78>
 8010aca:	1c42      	adds	r2, r0, #1
 8010acc:	d101      	bne.n	8010ad2 <__sflush_r+0x76>
 8010ace:	682b      	ldr	r3, [r5, #0]
 8010ad0:	b903      	cbnz	r3, 8010ad4 <__sflush_r+0x78>
 8010ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8010ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010ad6:	602f      	str	r7, [r5, #0]
 8010ad8:	b1b9      	cbz	r1, 8010b0a <__sflush_r+0xae>
 8010ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ade:	4299      	cmp	r1, r3
 8010ae0:	d002      	beq.n	8010ae8 <__sflush_r+0x8c>
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	f7ff f9fe 	bl	800fee4 <_free_r>
 8010ae8:	2300      	movs	r3, #0
 8010aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8010aec:	e00d      	b.n	8010b0a <__sflush_r+0xae>
 8010aee:	2301      	movs	r3, #1
 8010af0:	4628      	mov	r0, r5
 8010af2:	47b0      	blx	r6
 8010af4:	4602      	mov	r2, r0
 8010af6:	1c50      	adds	r0, r2, #1
 8010af8:	d1c9      	bne.n	8010a8e <__sflush_r+0x32>
 8010afa:	682b      	ldr	r3, [r5, #0]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d0c6      	beq.n	8010a8e <__sflush_r+0x32>
 8010b00:	2b1d      	cmp	r3, #29
 8010b02:	d001      	beq.n	8010b08 <__sflush_r+0xac>
 8010b04:	2b16      	cmp	r3, #22
 8010b06:	d11e      	bne.n	8010b46 <__sflush_r+0xea>
 8010b08:	602f      	str	r7, [r5, #0]
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	e022      	b.n	8010b54 <__sflush_r+0xf8>
 8010b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b12:	b21b      	sxth	r3, r3
 8010b14:	e01b      	b.n	8010b4e <__sflush_r+0xf2>
 8010b16:	690f      	ldr	r7, [r1, #16]
 8010b18:	2f00      	cmp	r7, #0
 8010b1a:	d0f6      	beq.n	8010b0a <__sflush_r+0xae>
 8010b1c:	0793      	lsls	r3, r2, #30
 8010b1e:	680e      	ldr	r6, [r1, #0]
 8010b20:	bf08      	it	eq
 8010b22:	694b      	ldreq	r3, [r1, #20]
 8010b24:	600f      	str	r7, [r1, #0]
 8010b26:	bf18      	it	ne
 8010b28:	2300      	movne	r3, #0
 8010b2a:	eba6 0807 	sub.w	r8, r6, r7
 8010b2e:	608b      	str	r3, [r1, #8]
 8010b30:	f1b8 0f00 	cmp.w	r8, #0
 8010b34:	dde9      	ble.n	8010b0a <__sflush_r+0xae>
 8010b36:	6a21      	ldr	r1, [r4, #32]
 8010b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010b3a:	4643      	mov	r3, r8
 8010b3c:	463a      	mov	r2, r7
 8010b3e:	4628      	mov	r0, r5
 8010b40:	47b0      	blx	r6
 8010b42:	2800      	cmp	r0, #0
 8010b44:	dc08      	bgt.n	8010b58 <__sflush_r+0xfc>
 8010b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b4e:	81a3      	strh	r3, [r4, #12]
 8010b50:	f04f 30ff 	mov.w	r0, #4294967295
 8010b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b58:	4407      	add	r7, r0
 8010b5a:	eba8 0800 	sub.w	r8, r8, r0
 8010b5e:	e7e7      	b.n	8010b30 <__sflush_r+0xd4>
 8010b60:	20400001 	.word	0x20400001

08010b64 <_fflush_r>:
 8010b64:	b538      	push	{r3, r4, r5, lr}
 8010b66:	690b      	ldr	r3, [r1, #16]
 8010b68:	4605      	mov	r5, r0
 8010b6a:	460c      	mov	r4, r1
 8010b6c:	b913      	cbnz	r3, 8010b74 <_fflush_r+0x10>
 8010b6e:	2500      	movs	r5, #0
 8010b70:	4628      	mov	r0, r5
 8010b72:	bd38      	pop	{r3, r4, r5, pc}
 8010b74:	b118      	cbz	r0, 8010b7e <_fflush_r+0x1a>
 8010b76:	6a03      	ldr	r3, [r0, #32]
 8010b78:	b90b      	cbnz	r3, 8010b7e <_fflush_r+0x1a>
 8010b7a:	f7fe f95b 	bl	800ee34 <__sinit>
 8010b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d0f3      	beq.n	8010b6e <_fflush_r+0xa>
 8010b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010b88:	07d0      	lsls	r0, r2, #31
 8010b8a:	d404      	bmi.n	8010b96 <_fflush_r+0x32>
 8010b8c:	0599      	lsls	r1, r3, #22
 8010b8e:	d402      	bmi.n	8010b96 <_fflush_r+0x32>
 8010b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b92:	f7fe fbb0 	bl	800f2f6 <__retarget_lock_acquire_recursive>
 8010b96:	4628      	mov	r0, r5
 8010b98:	4621      	mov	r1, r4
 8010b9a:	f7ff ff5f 	bl	8010a5c <__sflush_r>
 8010b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ba0:	07da      	lsls	r2, r3, #31
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	d4e4      	bmi.n	8010b70 <_fflush_r+0xc>
 8010ba6:	89a3      	ldrh	r3, [r4, #12]
 8010ba8:	059b      	lsls	r3, r3, #22
 8010baa:	d4e1      	bmi.n	8010b70 <_fflush_r+0xc>
 8010bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bae:	f7fe fba3 	bl	800f2f8 <__retarget_lock_release_recursive>
 8010bb2:	e7dd      	b.n	8010b70 <_fflush_r+0xc>

08010bb4 <__swhatbuf_r>:
 8010bb4:	b570      	push	{r4, r5, r6, lr}
 8010bb6:	460c      	mov	r4, r1
 8010bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bbc:	2900      	cmp	r1, #0
 8010bbe:	b096      	sub	sp, #88	@ 0x58
 8010bc0:	4615      	mov	r5, r2
 8010bc2:	461e      	mov	r6, r3
 8010bc4:	da0d      	bge.n	8010be2 <__swhatbuf_r+0x2e>
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010bcc:	f04f 0100 	mov.w	r1, #0
 8010bd0:	bf14      	ite	ne
 8010bd2:	2340      	movne	r3, #64	@ 0x40
 8010bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010bd8:	2000      	movs	r0, #0
 8010bda:	6031      	str	r1, [r6, #0]
 8010bdc:	602b      	str	r3, [r5, #0]
 8010bde:	b016      	add	sp, #88	@ 0x58
 8010be0:	bd70      	pop	{r4, r5, r6, pc}
 8010be2:	466a      	mov	r2, sp
 8010be4:	f000 f87c 	bl	8010ce0 <_fstat_r>
 8010be8:	2800      	cmp	r0, #0
 8010bea:	dbec      	blt.n	8010bc6 <__swhatbuf_r+0x12>
 8010bec:	9901      	ldr	r1, [sp, #4]
 8010bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010bf6:	4259      	negs	r1, r3
 8010bf8:	4159      	adcs	r1, r3
 8010bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bfe:	e7eb      	b.n	8010bd8 <__swhatbuf_r+0x24>

08010c00 <__smakebuf_r>:
 8010c00:	898b      	ldrh	r3, [r1, #12]
 8010c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c04:	079d      	lsls	r5, r3, #30
 8010c06:	4606      	mov	r6, r0
 8010c08:	460c      	mov	r4, r1
 8010c0a:	d507      	bpl.n	8010c1c <__smakebuf_r+0x1c>
 8010c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c10:	6023      	str	r3, [r4, #0]
 8010c12:	6123      	str	r3, [r4, #16]
 8010c14:	2301      	movs	r3, #1
 8010c16:	6163      	str	r3, [r4, #20]
 8010c18:	b003      	add	sp, #12
 8010c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c1c:	ab01      	add	r3, sp, #4
 8010c1e:	466a      	mov	r2, sp
 8010c20:	f7ff ffc8 	bl	8010bb4 <__swhatbuf_r>
 8010c24:	9f00      	ldr	r7, [sp, #0]
 8010c26:	4605      	mov	r5, r0
 8010c28:	4639      	mov	r1, r7
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	f7ff f9ce 	bl	800ffcc <_malloc_r>
 8010c30:	b948      	cbnz	r0, 8010c46 <__smakebuf_r+0x46>
 8010c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c36:	059a      	lsls	r2, r3, #22
 8010c38:	d4ee      	bmi.n	8010c18 <__smakebuf_r+0x18>
 8010c3a:	f023 0303 	bic.w	r3, r3, #3
 8010c3e:	f043 0302 	orr.w	r3, r3, #2
 8010c42:	81a3      	strh	r3, [r4, #12]
 8010c44:	e7e2      	b.n	8010c0c <__smakebuf_r+0xc>
 8010c46:	89a3      	ldrh	r3, [r4, #12]
 8010c48:	6020      	str	r0, [r4, #0]
 8010c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c4e:	81a3      	strh	r3, [r4, #12]
 8010c50:	9b01      	ldr	r3, [sp, #4]
 8010c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c56:	b15b      	cbz	r3, 8010c70 <__smakebuf_r+0x70>
 8010c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c5c:	4630      	mov	r0, r6
 8010c5e:	f000 f851 	bl	8010d04 <_isatty_r>
 8010c62:	b128      	cbz	r0, 8010c70 <__smakebuf_r+0x70>
 8010c64:	89a3      	ldrh	r3, [r4, #12]
 8010c66:	f023 0303 	bic.w	r3, r3, #3
 8010c6a:	f043 0301 	orr.w	r3, r3, #1
 8010c6e:	81a3      	strh	r3, [r4, #12]
 8010c70:	89a3      	ldrh	r3, [r4, #12]
 8010c72:	431d      	orrs	r5, r3
 8010c74:	81a5      	strh	r5, [r4, #12]
 8010c76:	e7cf      	b.n	8010c18 <__smakebuf_r+0x18>

08010c78 <_putc_r>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	460d      	mov	r5, r1
 8010c7c:	4614      	mov	r4, r2
 8010c7e:	4606      	mov	r6, r0
 8010c80:	b118      	cbz	r0, 8010c8a <_putc_r+0x12>
 8010c82:	6a03      	ldr	r3, [r0, #32]
 8010c84:	b90b      	cbnz	r3, 8010c8a <_putc_r+0x12>
 8010c86:	f7fe f8d5 	bl	800ee34 <__sinit>
 8010c8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c8c:	07d8      	lsls	r0, r3, #31
 8010c8e:	d405      	bmi.n	8010c9c <_putc_r+0x24>
 8010c90:	89a3      	ldrh	r3, [r4, #12]
 8010c92:	0599      	lsls	r1, r3, #22
 8010c94:	d402      	bmi.n	8010c9c <_putc_r+0x24>
 8010c96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c98:	f7fe fb2d 	bl	800f2f6 <__retarget_lock_acquire_recursive>
 8010c9c:	68a3      	ldr	r3, [r4, #8]
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	60a3      	str	r3, [r4, #8]
 8010ca4:	da05      	bge.n	8010cb2 <_putc_r+0x3a>
 8010ca6:	69a2      	ldr	r2, [r4, #24]
 8010ca8:	4293      	cmp	r3, r2
 8010caa:	db12      	blt.n	8010cd2 <_putc_r+0x5a>
 8010cac:	b2eb      	uxtb	r3, r5
 8010cae:	2b0a      	cmp	r3, #10
 8010cb0:	d00f      	beq.n	8010cd2 <_putc_r+0x5a>
 8010cb2:	6823      	ldr	r3, [r4, #0]
 8010cb4:	1c5a      	adds	r2, r3, #1
 8010cb6:	6022      	str	r2, [r4, #0]
 8010cb8:	701d      	strb	r5, [r3, #0]
 8010cba:	b2ed      	uxtb	r5, r5
 8010cbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cbe:	07da      	lsls	r2, r3, #31
 8010cc0:	d405      	bmi.n	8010cce <_putc_r+0x56>
 8010cc2:	89a3      	ldrh	r3, [r4, #12]
 8010cc4:	059b      	lsls	r3, r3, #22
 8010cc6:	d402      	bmi.n	8010cce <_putc_r+0x56>
 8010cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cca:	f7fe fb15 	bl	800f2f8 <__retarget_lock_release_recursive>
 8010cce:	4628      	mov	r0, r5
 8010cd0:	bd70      	pop	{r4, r5, r6, pc}
 8010cd2:	4629      	mov	r1, r5
 8010cd4:	4622      	mov	r2, r4
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	f7fe f99d 	bl	800f016 <__swbuf_r>
 8010cdc:	4605      	mov	r5, r0
 8010cde:	e7ed      	b.n	8010cbc <_putc_r+0x44>

08010ce0 <_fstat_r>:
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	4d07      	ldr	r5, [pc, #28]	@ (8010d00 <_fstat_r+0x20>)
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	4608      	mov	r0, r1
 8010cea:	4611      	mov	r1, r2
 8010cec:	602b      	str	r3, [r5, #0]
 8010cee:	f7f4 f8e3 	bl	8004eb8 <_fstat>
 8010cf2:	1c43      	adds	r3, r0, #1
 8010cf4:	d102      	bne.n	8010cfc <_fstat_r+0x1c>
 8010cf6:	682b      	ldr	r3, [r5, #0]
 8010cf8:	b103      	cbz	r3, 8010cfc <_fstat_r+0x1c>
 8010cfa:	6023      	str	r3, [r4, #0]
 8010cfc:	bd38      	pop	{r3, r4, r5, pc}
 8010cfe:	bf00      	nop
 8010d00:	240055fc 	.word	0x240055fc

08010d04 <_isatty_r>:
 8010d04:	b538      	push	{r3, r4, r5, lr}
 8010d06:	4d06      	ldr	r5, [pc, #24]	@ (8010d20 <_isatty_r+0x1c>)
 8010d08:	2300      	movs	r3, #0
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	4608      	mov	r0, r1
 8010d0e:	602b      	str	r3, [r5, #0]
 8010d10:	f7f4 f8e2 	bl	8004ed8 <_isatty>
 8010d14:	1c43      	adds	r3, r0, #1
 8010d16:	d102      	bne.n	8010d1e <_isatty_r+0x1a>
 8010d18:	682b      	ldr	r3, [r5, #0]
 8010d1a:	b103      	cbz	r3, 8010d1e <_isatty_r+0x1a>
 8010d1c:	6023      	str	r3, [r4, #0]
 8010d1e:	bd38      	pop	{r3, r4, r5, pc}
 8010d20:	240055fc 	.word	0x240055fc

08010d24 <_sbrk_r>:
 8010d24:	b538      	push	{r3, r4, r5, lr}
 8010d26:	4d06      	ldr	r5, [pc, #24]	@ (8010d40 <_sbrk_r+0x1c>)
 8010d28:	2300      	movs	r3, #0
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	4608      	mov	r0, r1
 8010d2e:	602b      	str	r3, [r5, #0]
 8010d30:	f7f4 f8ea 	bl	8004f08 <_sbrk>
 8010d34:	1c43      	adds	r3, r0, #1
 8010d36:	d102      	bne.n	8010d3e <_sbrk_r+0x1a>
 8010d38:	682b      	ldr	r3, [r5, #0]
 8010d3a:	b103      	cbz	r3, 8010d3e <_sbrk_r+0x1a>
 8010d3c:	6023      	str	r3, [r4, #0]
 8010d3e:	bd38      	pop	{r3, r4, r5, pc}
 8010d40:	240055fc 	.word	0x240055fc

08010d44 <__assert_func>:
 8010d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d46:	4614      	mov	r4, r2
 8010d48:	461a      	mov	r2, r3
 8010d4a:	4b09      	ldr	r3, [pc, #36]	@ (8010d70 <__assert_func+0x2c>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	4605      	mov	r5, r0
 8010d50:	68d8      	ldr	r0, [r3, #12]
 8010d52:	b14c      	cbz	r4, 8010d68 <__assert_func+0x24>
 8010d54:	4b07      	ldr	r3, [pc, #28]	@ (8010d74 <__assert_func+0x30>)
 8010d56:	9100      	str	r1, [sp, #0]
 8010d58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d5c:	4906      	ldr	r1, [pc, #24]	@ (8010d78 <__assert_func+0x34>)
 8010d5e:	462b      	mov	r3, r5
 8010d60:	f000 f842 	bl	8010de8 <fiprintf>
 8010d64:	f000 f852 	bl	8010e0c <abort>
 8010d68:	4b04      	ldr	r3, [pc, #16]	@ (8010d7c <__assert_func+0x38>)
 8010d6a:	461c      	mov	r4, r3
 8010d6c:	e7f3      	b.n	8010d56 <__assert_func+0x12>
 8010d6e:	bf00      	nop
 8010d70:	2400008c 	.word	0x2400008c
 8010d74:	080116e9 	.word	0x080116e9
 8010d78:	080116f6 	.word	0x080116f6
 8010d7c:	08011724 	.word	0x08011724

08010d80 <_calloc_r>:
 8010d80:	b570      	push	{r4, r5, r6, lr}
 8010d82:	fba1 5402 	umull	r5, r4, r1, r2
 8010d86:	b934      	cbnz	r4, 8010d96 <_calloc_r+0x16>
 8010d88:	4629      	mov	r1, r5
 8010d8a:	f7ff f91f 	bl	800ffcc <_malloc_r>
 8010d8e:	4606      	mov	r6, r0
 8010d90:	b928      	cbnz	r0, 8010d9e <_calloc_r+0x1e>
 8010d92:	4630      	mov	r0, r6
 8010d94:	bd70      	pop	{r4, r5, r6, pc}
 8010d96:	220c      	movs	r2, #12
 8010d98:	6002      	str	r2, [r0, #0]
 8010d9a:	2600      	movs	r6, #0
 8010d9c:	e7f9      	b.n	8010d92 <_calloc_r+0x12>
 8010d9e:	462a      	mov	r2, r5
 8010da0:	4621      	mov	r1, r4
 8010da2:	f7fe f9cd 	bl	800f140 <memset>
 8010da6:	e7f4      	b.n	8010d92 <_calloc_r+0x12>

08010da8 <__ascii_mbtowc>:
 8010da8:	b082      	sub	sp, #8
 8010daa:	b901      	cbnz	r1, 8010dae <__ascii_mbtowc+0x6>
 8010dac:	a901      	add	r1, sp, #4
 8010dae:	b142      	cbz	r2, 8010dc2 <__ascii_mbtowc+0x1a>
 8010db0:	b14b      	cbz	r3, 8010dc6 <__ascii_mbtowc+0x1e>
 8010db2:	7813      	ldrb	r3, [r2, #0]
 8010db4:	600b      	str	r3, [r1, #0]
 8010db6:	7812      	ldrb	r2, [r2, #0]
 8010db8:	1e10      	subs	r0, r2, #0
 8010dba:	bf18      	it	ne
 8010dbc:	2001      	movne	r0, #1
 8010dbe:	b002      	add	sp, #8
 8010dc0:	4770      	bx	lr
 8010dc2:	4610      	mov	r0, r2
 8010dc4:	e7fb      	b.n	8010dbe <__ascii_mbtowc+0x16>
 8010dc6:	f06f 0001 	mvn.w	r0, #1
 8010dca:	e7f8      	b.n	8010dbe <__ascii_mbtowc+0x16>

08010dcc <__ascii_wctomb>:
 8010dcc:	4603      	mov	r3, r0
 8010dce:	4608      	mov	r0, r1
 8010dd0:	b141      	cbz	r1, 8010de4 <__ascii_wctomb+0x18>
 8010dd2:	2aff      	cmp	r2, #255	@ 0xff
 8010dd4:	d904      	bls.n	8010de0 <__ascii_wctomb+0x14>
 8010dd6:	228a      	movs	r2, #138	@ 0x8a
 8010dd8:	601a      	str	r2, [r3, #0]
 8010dda:	f04f 30ff 	mov.w	r0, #4294967295
 8010dde:	4770      	bx	lr
 8010de0:	700a      	strb	r2, [r1, #0]
 8010de2:	2001      	movs	r0, #1
 8010de4:	4770      	bx	lr
	...

08010de8 <fiprintf>:
 8010de8:	b40e      	push	{r1, r2, r3}
 8010dea:	b503      	push	{r0, r1, lr}
 8010dec:	4601      	mov	r1, r0
 8010dee:	ab03      	add	r3, sp, #12
 8010df0:	4805      	ldr	r0, [pc, #20]	@ (8010e08 <fiprintf+0x20>)
 8010df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010df6:	6800      	ldr	r0, [r0, #0]
 8010df8:	9301      	str	r3, [sp, #4]
 8010dfa:	f7ff fd17 	bl	801082c <_vfiprintf_r>
 8010dfe:	b002      	add	sp, #8
 8010e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e04:	b003      	add	sp, #12
 8010e06:	4770      	bx	lr
 8010e08:	2400008c 	.word	0x2400008c

08010e0c <abort>:
 8010e0c:	b508      	push	{r3, lr}
 8010e0e:	2006      	movs	r0, #6
 8010e10:	f000 f82c 	bl	8010e6c <raise>
 8010e14:	2001      	movs	r0, #1
 8010e16:	f7f4 f81b 	bl	8004e50 <_exit>

08010e1a <_raise_r>:
 8010e1a:	291f      	cmp	r1, #31
 8010e1c:	b538      	push	{r3, r4, r5, lr}
 8010e1e:	4605      	mov	r5, r0
 8010e20:	460c      	mov	r4, r1
 8010e22:	d904      	bls.n	8010e2e <_raise_r+0x14>
 8010e24:	2316      	movs	r3, #22
 8010e26:	6003      	str	r3, [r0, #0]
 8010e28:	f04f 30ff 	mov.w	r0, #4294967295
 8010e2c:	bd38      	pop	{r3, r4, r5, pc}
 8010e2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010e30:	b112      	cbz	r2, 8010e38 <_raise_r+0x1e>
 8010e32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e36:	b94b      	cbnz	r3, 8010e4c <_raise_r+0x32>
 8010e38:	4628      	mov	r0, r5
 8010e3a:	f000 f831 	bl	8010ea0 <_getpid_r>
 8010e3e:	4622      	mov	r2, r4
 8010e40:	4601      	mov	r1, r0
 8010e42:	4628      	mov	r0, r5
 8010e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e48:	f000 b818 	b.w	8010e7c <_kill_r>
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d00a      	beq.n	8010e66 <_raise_r+0x4c>
 8010e50:	1c59      	adds	r1, r3, #1
 8010e52:	d103      	bne.n	8010e5c <_raise_r+0x42>
 8010e54:	2316      	movs	r3, #22
 8010e56:	6003      	str	r3, [r0, #0]
 8010e58:	2001      	movs	r0, #1
 8010e5a:	e7e7      	b.n	8010e2c <_raise_r+0x12>
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010e62:	4620      	mov	r0, r4
 8010e64:	4798      	blx	r3
 8010e66:	2000      	movs	r0, #0
 8010e68:	e7e0      	b.n	8010e2c <_raise_r+0x12>
	...

08010e6c <raise>:
 8010e6c:	4b02      	ldr	r3, [pc, #8]	@ (8010e78 <raise+0xc>)
 8010e6e:	4601      	mov	r1, r0
 8010e70:	6818      	ldr	r0, [r3, #0]
 8010e72:	f7ff bfd2 	b.w	8010e1a <_raise_r>
 8010e76:	bf00      	nop
 8010e78:	2400008c 	.word	0x2400008c

08010e7c <_kill_r>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	4d07      	ldr	r5, [pc, #28]	@ (8010e9c <_kill_r+0x20>)
 8010e80:	2300      	movs	r3, #0
 8010e82:	4604      	mov	r4, r0
 8010e84:	4608      	mov	r0, r1
 8010e86:	4611      	mov	r1, r2
 8010e88:	602b      	str	r3, [r5, #0]
 8010e8a:	f7f3 ffd1 	bl	8004e30 <_kill>
 8010e8e:	1c43      	adds	r3, r0, #1
 8010e90:	d102      	bne.n	8010e98 <_kill_r+0x1c>
 8010e92:	682b      	ldr	r3, [r5, #0]
 8010e94:	b103      	cbz	r3, 8010e98 <_kill_r+0x1c>
 8010e96:	6023      	str	r3, [r4, #0]
 8010e98:	bd38      	pop	{r3, r4, r5, pc}
 8010e9a:	bf00      	nop
 8010e9c:	240055fc 	.word	0x240055fc

08010ea0 <_getpid_r>:
 8010ea0:	f7f3 bfbe 	b.w	8004e20 <_getpid>

08010ea4 <fmax>:
 8010ea4:	b508      	push	{r3, lr}
 8010ea6:	ed2d 8b04 	vpush	{d8-d9}
 8010eaa:	eeb0 8b40 	vmov.f64	d8, d0
 8010eae:	eeb0 9b41 	vmov.f64	d9, d1
 8010eb2:	f000 f831 	bl	8010f18 <__fpclassifyd>
 8010eb6:	b930      	cbnz	r0, 8010ec6 <fmax+0x22>
 8010eb8:	eeb0 8b49 	vmov.f64	d8, d9
 8010ebc:	eeb0 0b48 	vmov.f64	d0, d8
 8010ec0:	ecbd 8b04 	vpop	{d8-d9}
 8010ec4:	bd08      	pop	{r3, pc}
 8010ec6:	eeb0 0b49 	vmov.f64	d0, d9
 8010eca:	f000 f825 	bl	8010f18 <__fpclassifyd>
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	d0f4      	beq.n	8010ebc <fmax+0x18>
 8010ed2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eda:	dded      	ble.n	8010eb8 <fmax+0x14>
 8010edc:	e7ee      	b.n	8010ebc <fmax+0x18>

08010ede <fmin>:
 8010ede:	b508      	push	{r3, lr}
 8010ee0:	ed2d 8b04 	vpush	{d8-d9}
 8010ee4:	eeb0 8b40 	vmov.f64	d8, d0
 8010ee8:	eeb0 9b41 	vmov.f64	d9, d1
 8010eec:	f000 f814 	bl	8010f18 <__fpclassifyd>
 8010ef0:	b930      	cbnz	r0, 8010f00 <fmin+0x22>
 8010ef2:	eeb0 8b49 	vmov.f64	d8, d9
 8010ef6:	eeb0 0b48 	vmov.f64	d0, d8
 8010efa:	ecbd 8b04 	vpop	{d8-d9}
 8010efe:	bd08      	pop	{r3, pc}
 8010f00:	eeb0 0b49 	vmov.f64	d0, d9
 8010f04:	f000 f808 	bl	8010f18 <__fpclassifyd>
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d0f4      	beq.n	8010ef6 <fmin+0x18>
 8010f0c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f14:	d5ed      	bpl.n	8010ef2 <fmin+0x14>
 8010f16:	e7ee      	b.n	8010ef6 <fmin+0x18>

08010f18 <__fpclassifyd>:
 8010f18:	ec51 0b10 	vmov	r0, r1, d0
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8010f22:	b510      	push	{r4, lr}
 8010f24:	d104      	bne.n	8010f30 <__fpclassifyd+0x18>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	bf0c      	ite	eq
 8010f2a:	2002      	moveq	r0, #2
 8010f2c:	2003      	movne	r0, #3
 8010f2e:	bd10      	pop	{r4, pc}
 8010f30:	4a09      	ldr	r2, [pc, #36]	@ (8010f58 <__fpclassifyd+0x40>)
 8010f32:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8010f36:	4294      	cmp	r4, r2
 8010f38:	d908      	bls.n	8010f4c <__fpclassifyd+0x34>
 8010f3a:	4a08      	ldr	r2, [pc, #32]	@ (8010f5c <__fpclassifyd+0x44>)
 8010f3c:	4213      	tst	r3, r2
 8010f3e:	d007      	beq.n	8010f50 <__fpclassifyd+0x38>
 8010f40:	4291      	cmp	r1, r2
 8010f42:	d107      	bne.n	8010f54 <__fpclassifyd+0x3c>
 8010f44:	fab0 f080 	clz	r0, r0
 8010f48:	0940      	lsrs	r0, r0, #5
 8010f4a:	e7f0      	b.n	8010f2e <__fpclassifyd+0x16>
 8010f4c:	2004      	movs	r0, #4
 8010f4e:	e7ee      	b.n	8010f2e <__fpclassifyd+0x16>
 8010f50:	2003      	movs	r0, #3
 8010f52:	e7ec      	b.n	8010f2e <__fpclassifyd+0x16>
 8010f54:	2000      	movs	r0, #0
 8010f56:	e7ea      	b.n	8010f2e <__fpclassifyd+0x16>
 8010f58:	7fdfffff 	.word	0x7fdfffff
 8010f5c:	7ff00000 	.word	0x7ff00000

08010f60 <fmaxf>:
 8010f60:	b508      	push	{r3, lr}
 8010f62:	ed2d 8b02 	vpush	{d8}
 8010f66:	eeb0 8a40 	vmov.f32	s16, s0
 8010f6a:	eef0 8a60 	vmov.f32	s17, s1
 8010f6e:	f000 f815 	bl	8010f9c <__fpclassifyf>
 8010f72:	b930      	cbnz	r0, 8010f82 <fmaxf+0x22>
 8010f74:	eeb0 8a68 	vmov.f32	s16, s17
 8010f78:	eeb0 0a48 	vmov.f32	s0, s16
 8010f7c:	ecbd 8b02 	vpop	{d8}
 8010f80:	bd08      	pop	{r3, pc}
 8010f82:	eeb0 0a68 	vmov.f32	s0, s17
 8010f86:	f000 f809 	bl	8010f9c <__fpclassifyf>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d0f4      	beq.n	8010f78 <fmaxf+0x18>
 8010f8e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f96:	dded      	ble.n	8010f74 <fmaxf+0x14>
 8010f98:	e7ee      	b.n	8010f78 <fmaxf+0x18>
	...

08010f9c <__fpclassifyf>:
 8010f9c:	ee10 3a10 	vmov	r3, s0
 8010fa0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010fa4:	d00d      	beq.n	8010fc2 <__fpclassifyf+0x26>
 8010fa6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010faa:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010fae:	d30a      	bcc.n	8010fc6 <__fpclassifyf+0x2a>
 8010fb0:	4b07      	ldr	r3, [pc, #28]	@ (8010fd0 <__fpclassifyf+0x34>)
 8010fb2:	1e42      	subs	r2, r0, #1
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d908      	bls.n	8010fca <__fpclassifyf+0x2e>
 8010fb8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010fbc:	4258      	negs	r0, r3
 8010fbe:	4158      	adcs	r0, r3
 8010fc0:	4770      	bx	lr
 8010fc2:	2002      	movs	r0, #2
 8010fc4:	4770      	bx	lr
 8010fc6:	2004      	movs	r0, #4
 8010fc8:	4770      	bx	lr
 8010fca:	2003      	movs	r0, #3
 8010fcc:	4770      	bx	lr
 8010fce:	bf00      	nop
 8010fd0:	007ffffe 	.word	0x007ffffe

08010fd4 <sinf_poly>:
 8010fd4:	07cb      	lsls	r3, r1, #31
 8010fd6:	d412      	bmi.n	8010ffe <sinf_poly+0x2a>
 8010fd8:	ee21 5b00 	vmul.f64	d5, d1, d0
 8010fdc:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8010fe0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8010fe4:	eea6 7b01 	vfma.f64	d7, d6, d1
 8010fe8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8010fec:	ee21 1b05 	vmul.f64	d1, d1, d5
 8010ff0:	eea6 0b05 	vfma.f64	d0, d6, d5
 8010ff4:	eea7 0b01 	vfma.f64	d0, d7, d1
 8010ff8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010ffc:	4770      	bx	lr
 8010ffe:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8011002:	ee21 5b01 	vmul.f64	d5, d1, d1
 8011006:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801100a:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801100e:	eea1 7b06 	vfma.f64	d7, d1, d6
 8011012:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8011016:	eea1 0b06 	vfma.f64	d0, d1, d6
 801101a:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801101e:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011022:	eea5 0b06 	vfma.f64	d0, d5, d6
 8011026:	e7e5      	b.n	8010ff4 <sinf_poly+0x20>

08011028 <sinf>:
 8011028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801102a:	ee10 4a10 	vmov	r4, s0
 801102e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8011032:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8011036:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801103a:	eef0 7a40 	vmov.f32	s15, s0
 801103e:	d218      	bcs.n	8011072 <sinf+0x4a>
 8011040:	ee26 1b06 	vmul.f64	d1, d6, d6
 8011044:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8011048:	d20a      	bcs.n	8011060 <sinf+0x38>
 801104a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801104e:	d103      	bne.n	8011058 <sinf+0x30>
 8011050:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8011054:	ed8d 1a01 	vstr	s2, [sp, #4]
 8011058:	eeb0 0a67 	vmov.f32	s0, s15
 801105c:	b003      	add	sp, #12
 801105e:	bd30      	pop	{r4, r5, pc}
 8011060:	483b      	ldr	r0, [pc, #236]	@ (8011150 <sinf+0x128>)
 8011062:	eeb0 0b46 	vmov.f64	d0, d6
 8011066:	2100      	movs	r1, #0
 8011068:	b003      	add	sp, #12
 801106a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801106e:	f7ff bfb1 	b.w	8010fd4 <sinf_poly>
 8011072:	f240 422e 	movw	r2, #1070	@ 0x42e
 8011076:	4293      	cmp	r3, r2
 8011078:	d824      	bhi.n	80110c4 <sinf+0x9c>
 801107a:	4b35      	ldr	r3, [pc, #212]	@ (8011150 <sinf+0x128>)
 801107c:	ed93 7b08 	vldr	d7, [r3, #32]
 8011080:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011084:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011088:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801108c:	ee17 1a90 	vmov	r1, s15
 8011090:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8011094:	1609      	asrs	r1, r1, #24
 8011096:	ee07 1a90 	vmov	s15, r1
 801109a:	f001 0203 	and.w	r2, r1, #3
 801109e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80110a2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80110a6:	ed92 0b00 	vldr	d0, [r2]
 80110aa:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80110ae:	f011 0f02 	tst.w	r1, #2
 80110b2:	eea5 6b47 	vfms.f64	d6, d5, d7
 80110b6:	bf08      	it	eq
 80110b8:	4618      	moveq	r0, r3
 80110ba:	ee26 1b06 	vmul.f64	d1, d6, d6
 80110be:	ee20 0b06 	vmul.f64	d0, d0, d6
 80110c2:	e7d1      	b.n	8011068 <sinf+0x40>
 80110c4:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80110c8:	d237      	bcs.n	801113a <sinf+0x112>
 80110ca:	4922      	ldr	r1, [pc, #136]	@ (8011154 <sinf+0x12c>)
 80110cc:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80110d0:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80110d4:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80110d8:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80110dc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80110e0:	6a10      	ldr	r0, [r2, #32]
 80110e2:	6912      	ldr	r2, [r2, #16]
 80110e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80110e8:	40ab      	lsls	r3, r5
 80110ea:	fba0 5003 	umull	r5, r0, r0, r3
 80110ee:	4359      	muls	r1, r3
 80110f0:	fbe3 0102 	umlal	r0, r1, r3, r2
 80110f4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80110f8:	0f9d      	lsrs	r5, r3, #30
 80110fa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80110fe:	1ac9      	subs	r1, r1, r3
 8011100:	f7ef fad4 	bl	80006ac <__aeabi_l2d>
 8011104:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8011108:	4b11      	ldr	r3, [pc, #68]	@ (8011150 <sinf+0x128>)
 801110a:	f004 0203 	and.w	r2, r4, #3
 801110e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011112:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8011148 <sinf+0x120>
 8011116:	ed92 0b00 	vldr	d0, [r2]
 801111a:	ec41 0b17 	vmov	d7, r0, r1
 801111e:	f014 0f02 	tst.w	r4, #2
 8011122:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011126:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801112a:	4629      	mov	r1, r5
 801112c:	bf08      	it	eq
 801112e:	4618      	moveq	r0, r3
 8011130:	ee27 1b07 	vmul.f64	d1, d7, d7
 8011134:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011138:	e796      	b.n	8011068 <sinf+0x40>
 801113a:	b003      	add	sp, #12
 801113c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011140:	f000 b8e4 	b.w	801130c <__math_invalidf>
 8011144:	f3af 8000 	nop.w
 8011148:	54442d18 	.word	0x54442d18
 801114c:	3c1921fb 	.word	0x3c1921fb
 8011150:	08011990 	.word	0x08011990
 8011154:	0801192c 	.word	0x0801192c

08011158 <sinf_poly>:
 8011158:	07cb      	lsls	r3, r1, #31
 801115a:	d412      	bmi.n	8011182 <sinf_poly+0x2a>
 801115c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8011160:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8011164:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8011168:	eea6 7b01 	vfma.f64	d7, d6, d1
 801116c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8011170:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011174:	eea6 0b05 	vfma.f64	d0, d6, d5
 8011178:	eea7 0b01 	vfma.f64	d0, d7, d1
 801117c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011180:	4770      	bx	lr
 8011182:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8011186:	ee21 5b01 	vmul.f64	d5, d1, d1
 801118a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801118e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8011192:	eea1 7b06 	vfma.f64	d7, d1, d6
 8011196:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801119a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801119e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80111a2:	ee21 1b05 	vmul.f64	d1, d1, d5
 80111a6:	eea5 0b06 	vfma.f64	d0, d5, d6
 80111aa:	e7e5      	b.n	8011178 <sinf_poly+0x20>
 80111ac:	0000      	movs	r0, r0
	...

080111b0 <cosf>:
 80111b0:	b538      	push	{r3, r4, r5, lr}
 80111b2:	ee10 4a10 	vmov	r4, s0
 80111b6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80111ba:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80111be:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80111c2:	d21f      	bcs.n	8011204 <cosf+0x54>
 80111c4:	ee27 7b07 	vmul.f64	d7, d7, d7
 80111c8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80111cc:	f0c0 8082 	bcc.w	80112d4 <cosf+0x124>
 80111d0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80111d4:	4b44      	ldr	r3, [pc, #272]	@ (80112e8 <cosf+0x138>)
 80111d6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80111da:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80111de:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80111e2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80111e6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80111ea:	eea7 0b05 	vfma.f64	d0, d7, d5
 80111ee:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80111f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80111f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80111fa:	eea6 0b07 	vfma.f64	d0, d6, d7
 80111fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011202:	bd38      	pop	{r3, r4, r5, pc}
 8011204:	f240 422e 	movw	r2, #1070	@ 0x42e
 8011208:	4293      	cmp	r3, r2
 801120a:	d829      	bhi.n	8011260 <cosf+0xb0>
 801120c:	4b36      	ldr	r3, [pc, #216]	@ (80112e8 <cosf+0x138>)
 801120e:	ed93 6b08 	vldr	d6, [r3, #32]
 8011212:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011216:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801121a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801121e:	ee16 1a90 	vmov	r1, s13
 8011222:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8011226:	1609      	asrs	r1, r1, #24
 8011228:	ee06 1a90 	vmov	s13, r1
 801122c:	f001 0203 	and.w	r2, r1, #3
 8011230:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011234:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8011238:	ed92 0b00 	vldr	d0, [r2]
 801123c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8011240:	f011 0f02 	tst.w	r1, #2
 8011244:	f081 0101 	eor.w	r1, r1, #1
 8011248:	eea5 7b46 	vfms.f64	d7, d5, d6
 801124c:	bf08      	it	eq
 801124e:	4618      	moveq	r0, r3
 8011250:	ee27 1b07 	vmul.f64	d1, d7, d7
 8011254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011258:	ee20 0b07 	vmul.f64	d0, d0, d7
 801125c:	f7ff bf7c 	b.w	8011158 <sinf_poly>
 8011260:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8011264:	d232      	bcs.n	80112cc <cosf+0x11c>
 8011266:	4921      	ldr	r1, [pc, #132]	@ (80112ec <cosf+0x13c>)
 8011268:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801126c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8011270:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8011274:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8011278:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801127c:	6a10      	ldr	r0, [r2, #32]
 801127e:	6912      	ldr	r2, [r2, #16]
 8011280:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011284:	40ab      	lsls	r3, r5
 8011286:	fba0 5003 	umull	r5, r0, r0, r3
 801128a:	4359      	muls	r1, r3
 801128c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8011290:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8011294:	0f9d      	lsrs	r5, r3, #30
 8011296:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801129a:	1ac9      	subs	r1, r1, r3
 801129c:	f7ef fa06 	bl	80006ac <__aeabi_l2d>
 80112a0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80112a4:	4b10      	ldr	r3, [pc, #64]	@ (80112e8 <cosf+0x138>)
 80112a6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80112e0 <cosf+0x130>
 80112aa:	ec41 0b17 	vmov	d7, r0, r1
 80112ae:	f004 0203 	and.w	r2, r4, #3
 80112b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80112b6:	ed92 0b00 	vldr	d0, [r2]
 80112ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80112be:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80112c2:	f014 0f02 	tst.w	r4, #2
 80112c6:	f085 0101 	eor.w	r1, r5, #1
 80112ca:	e7bf      	b.n	801124c <cosf+0x9c>
 80112cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112d0:	f000 b81c 	b.w	801130c <__math_invalidf>
 80112d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80112d8:	e793      	b.n	8011202 <cosf+0x52>
 80112da:	bf00      	nop
 80112dc:	f3af 8000 	nop.w
 80112e0:	54442d18 	.word	0x54442d18
 80112e4:	3c1921fb 	.word	0x3c1921fb
 80112e8:	08011990 	.word	0x08011990
 80112ec:	0801192c 	.word	0x0801192c

080112f0 <with_errnof>:
 80112f0:	b510      	push	{r4, lr}
 80112f2:	ed2d 8b02 	vpush	{d8}
 80112f6:	eeb0 8a40 	vmov.f32	s16, s0
 80112fa:	4604      	mov	r4, r0
 80112fc:	f7fd ffd0 	bl	800f2a0 <__errno>
 8011300:	eeb0 0a48 	vmov.f32	s0, s16
 8011304:	ecbd 8b02 	vpop	{d8}
 8011308:	6004      	str	r4, [r0, #0]
 801130a:	bd10      	pop	{r4, pc}

0801130c <__math_invalidf>:
 801130c:	eef0 7a40 	vmov.f32	s15, s0
 8011310:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011314:	eef4 7a67 	vcmp.f32	s15, s15
 8011318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8011320:	d602      	bvs.n	8011328 <__math_invalidf+0x1c>
 8011322:	2021      	movs	r0, #33	@ 0x21
 8011324:	f7ff bfe4 	b.w	80112f0 <with_errnof>
 8011328:	4770      	bx	lr
	...

0801132c <_init>:
 801132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801132e:	bf00      	nop
 8011330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011332:	bc08      	pop	{r3}
 8011334:	469e      	mov	lr, r3
 8011336:	4770      	bx	lr

08011338 <_fini>:
 8011338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801133a:	bf00      	nop
 801133c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801133e:	bc08      	pop	{r3}
 8011340:	469e      	mov	lr, r3
 8011342:	4770      	bx	lr
